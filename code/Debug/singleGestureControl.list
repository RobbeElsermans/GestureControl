
singleGestureControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015e34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08015fd4  08015fd4  00025fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801624c  0801624c  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801624c  0801624c  0002624c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016254  08016254  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016254  08016254  00026254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016258  08016258  00026258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0801625c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000739c  200000f0  08016348  000300f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000748c  08016348  0003748c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006b34c  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000061fe  00000000  00000000  0009b468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fa0  00000000  00000000  000a1668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d90  00000000  00000000  000a3608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002171c  00000000  00000000  000a5398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b210  00000000  00000000  000c6ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c023f  00000000  00000000  000f1cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b1f03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f34  00000000  00000000  001b1f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015fbc 	.word	0x08015fbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	08015fbc 	.word	0x08015fbc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9b9 	b.w	8000614 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <MX_TOF_Init>:
static void getResult(uint8_t sensor, RANGING_SENSOR_Result_t * result);
static long getDistance(uint8_t sensor, RANGING_SENSOR_Result_t * result);
static void objectPresent();

void MX_TOF_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L3A2_MultiSensorRanging_Init();
 800061c:	f000 f9e0 	bl	80009e0 <MX_53L3A2_MultiSensorRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void* _htim3)
{
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	b08b      	sub	sp, #44	; 0x2c
 8000628:	af06      	add	r7, sp, #24
 800062a:	6078      	str	r0, [r7, #4]
	htim3 = *(TIM_HandleTypeDef*)_htim3;
 800062c:	4a5c      	ldr	r2, [pc, #368]	; (80007a0 <MX_TOF_Process+0x17c>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4610      	mov	r0, r2
 8000632:	4619      	mov	r1, r3
 8000634:	2348      	movs	r3, #72	; 0x48
 8000636:	461a      	mov	r2, r3
 8000638:	f014 fcca 	bl	8014fd0 <memcpy>
	  //Enkel de 1ste sensor (Center) opstarten
	  /*	Hier zeggen we welk profiel we willen gebruiken
	   * 	bv.
	   *
	   */
	start_sensor(VL53L3A2_DEV_CENTER);
 800063c:	2001      	movs	r0, #1
 800063e:	f000 fa33 	bl	8000aa8 <start_sensor>

  //MX_53L3A2_MultiSensorRanging_Process();

  /* USER CODE BEGIN TOF_Process_PostTreatment */
	while(1){
		HAL_Delay(5);
 8000642:	2005      	movs	r0, #5
 8000644:	f011 fc42 	bl	8011ecc <HAL_Delay>
		getResult(VL53L3A2_DEV_CENTER, Result);
 8000648:	4956      	ldr	r1, [pc, #344]	; (80007a4 <MX_TOF_Process+0x180>)
 800064a:	2001      	movs	r0, #1
 800064c:	f000 fa94 	bl	8000b78 <getResult>
		dis1 = getDistance(VL53L3A2_DEV_CENTER, Result);
 8000650:	4954      	ldr	r1, [pc, #336]	; (80007a4 <MX_TOF_Process+0x180>)
 8000652:	2001      	movs	r0, #1
 8000654:	f000 faa6 	bl	8000ba4 <getDistance>
 8000658:	4603      	mov	r3, r0
 800065a:	4a53      	ldr	r2, [pc, #332]	; (80007a8 <MX_TOF_Process+0x184>)
 800065c:	6013      	str	r3, [r2, #0]

		//Het meten van de afstand van 2 buitenste sensoren.
		if(ObjectPresent)
 800065e:	4b53      	ldr	r3, [pc, #332]	; (80007ac <MX_TOF_Process+0x188>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d015      	beq.n	8000692 <MX_TOF_Process+0x6e>
		{
			getResult(VL53L3A2_DEV_LEFT, Result);
 8000666:	494f      	ldr	r1, [pc, #316]	; (80007a4 <MX_TOF_Process+0x180>)
 8000668:	2000      	movs	r0, #0
 800066a:	f000 fa85 	bl	8000b78 <getResult>
			dis0 = getDistance(VL53L3A2_DEV_LEFT, Result);
 800066e:	494d      	ldr	r1, [pc, #308]	; (80007a4 <MX_TOF_Process+0x180>)
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fa97 	bl	8000ba4 <getDistance>
 8000676:	4603      	mov	r3, r0
 8000678:	4a4d      	ldr	r2, [pc, #308]	; (80007b0 <MX_TOF_Process+0x18c>)
 800067a:	6013      	str	r3, [r2, #0]

			getResult(VL53L3A2_DEV_RIGHT, Result);
 800067c:	4949      	ldr	r1, [pc, #292]	; (80007a4 <MX_TOF_Process+0x180>)
 800067e:	2002      	movs	r0, #2
 8000680:	f000 fa7a 	bl	8000b78 <getResult>
			dis2 = getDistance(VL53L3A2_DEV_RIGHT, Result);
 8000684:	4947      	ldr	r1, [pc, #284]	; (80007a4 <MX_TOF_Process+0x180>)
 8000686:	2002      	movs	r0, #2
 8000688:	f000 fa8c 	bl	8000ba4 <getDistance>
 800068c:	4603      	mov	r3, r0
 800068e:	4a49      	ldr	r2, [pc, #292]	; (80007b4 <MX_TOF_Process+0x190>)
 8000690:	6013      	str	r3, [r2, #0]
		}
		//Bug van 1ste meeting dat deze fout is (Een te hoge waarden)
		if(dis1 >= 17760520)
 8000692:	4b45      	ldr	r3, [pc, #276]	; (80007a8 <MX_TOF_Process+0x184>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a48      	ldr	r2, [pc, #288]	; (80007b8 <MX_TOF_Process+0x194>)
 8000698:	4293      	cmp	r3, r2
 800069a:	dd0b      	ble.n	80006b4 <MX_TOF_Process+0x90>
		{
			HAL_Delay(4);
 800069c:	2004      	movs	r0, #4
 800069e:	f011 fc15 	bl	8011ecc <HAL_Delay>
			getResult(VL53L3A2_DEV_CENTER, Result);
 80006a2:	4940      	ldr	r1, [pc, #256]	; (80007a4 <MX_TOF_Process+0x180>)
 80006a4:	2001      	movs	r0, #1
 80006a6:	f000 fa67 	bl	8000b78 <getResult>
			dis1 = (long)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Distance[0];
 80006aa:	4b3e      	ldr	r3, [pc, #248]	; (80007a4 <MX_TOF_Process+0x180>)
 80006ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b3d      	ldr	r3, [pc, #244]	; (80007a8 <MX_TOF_Process+0x184>)
 80006b2:	601a      	str	r2, [r3, #0]
		}

		//Met afstand een led laten dimmen
		//Op voorwaarde dat de afstand kleiner is dan 500
		if(ObjectPresent && dis0 <=500){
 80006b4:	4b3d      	ldr	r3, [pc, #244]	; (80007ac <MX_TOF_Process+0x188>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d00c      	beq.n	80006d6 <MX_TOF_Process+0xb2>
 80006bc:	4b3c      	ldr	r3, [pc, #240]	; (80007b0 <MX_TOF_Process+0x18c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80006c4:	dc07      	bgt.n	80006d6 <MX_TOF_Process+0xb2>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, (dis0*2) + 23);
 80006c6:	4b3a      	ldr	r3, [pc, #232]	; (80007b0 <MX_TOF_Process+0x18c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	f103 0217 	add.w	r2, r3, #23
 80006d0:	4b33      	ldr	r3, [pc, #204]	; (80007a0 <MX_TOF_Process+0x17c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	639a      	str	r2, [r3, #56]	; 0x38
		}

		//ObjectPresent();
		objectPresent();
 80006d6:	f000 f879 	bl	80007cc <objectPresent>

		  //Ticks
		  // long x = HAL_GetTick();
		  //printf("Ticks: %ld ", x);

		if(!ObjectPresent){
 80006da:	4b34      	ldr	r3, [pc, #208]	; (80007ac <MX_TOF_Process+0x188>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	f083 0301 	eor.w	r3, r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d010      	beq.n	800070a <MX_TOF_Process+0xe6>
			uint8_t obj1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].NumberOfTargets;
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <MX_TOF_Process+0x180>)
 80006ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ec:	727b      	strb	r3, [r7, #9]
			uint8_t sta1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Status[0];
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <MX_TOF_Process+0x180>)
 80006f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f2:	723b      	strb	r3, [r7, #8]
#if DEBUGGING
			printf("center: %5d obj: %1d sta: %2d",dis1,obj1,sta1);
 80006f4:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <MX_TOF_Process+0x184>)
 80006f6:	6819      	ldr	r1, [r3, #0]
 80006f8:	7a7a      	ldrb	r2, [r7, #9]
 80006fa:	7a3b      	ldrb	r3, [r7, #8]
 80006fc:	482f      	ldr	r0, [pc, #188]	; (80007bc <MX_TOF_Process+0x198>)
 80006fe:	f014 fc7d 	bl	8014ffc <iprintf>
			printf("\r\n");
 8000702:	482f      	ldr	r0, [pc, #188]	; (80007c0 <MX_TOF_Process+0x19c>)
 8000704:	f014 fd00 	bl	8015108 <puts>
 8000708:	e03b      	b.n	8000782 <MX_TOF_Process+0x15e>
#endif
		}
		else{
			uint8_t obj0 = (uint8_t)Result[VL53L3A2_DEV_LEFT].ZoneResult[0].NumberOfTargets;
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <MX_TOF_Process+0x180>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	73fb      	strb	r3, [r7, #15]
			uint8_t obj1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].NumberOfTargets;
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MX_TOF_Process+0x180>)
 8000712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000714:	73bb      	strb	r3, [r7, #14]
			uint8_t obj2 = (uint8_t)Result[VL53L3A2_DEV_RIGHT].ZoneResult[0].NumberOfTargets;
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <MX_TOF_Process+0x180>)
 8000718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800071c:	737b      	strb	r3, [r7, #13]

			uint8_t sta0 = (uint8_t)Result[VL53L3A2_DEV_LEFT].ZoneResult[0].Status[0];
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_TOF_Process+0x180>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	733b      	strb	r3, [r7, #12]
			uint8_t sta1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Status[0];
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_TOF_Process+0x180>)
 8000726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000728:	72fb      	strb	r3, [r7, #11]
			uint8_t sta2 = (uint8_t)Result[VL53L3A2_DEV_RIGHT].ZoneResult[0].Status[0];
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_TOF_Process+0x180>)
 800072c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000730:	72bb      	strb	r3, [r7, #10]

#if DEBUGGING
			if(sta0 == sta1 == sta2 == 0){
 8000732:	7b3a      	ldrb	r2, [r7, #12]
 8000734:	7afb      	ldrb	r3, [r7, #11]
 8000736:	429a      	cmp	r2, r3
 8000738:	bf0c      	ite	eq
 800073a:	2301      	moveq	r3, #1
 800073c:	2300      	movne	r3, #0
 800073e:	b2db      	uxtb	r3, r3
 8000740:	461a      	mov	r2, r3
 8000742:	7abb      	ldrb	r3, [r7, #10]
 8000744:	429a      	cmp	r2, r3
 8000746:	d01c      	beq.n	8000782 <MX_TOF_Process+0x15e>
			printf("left: %5d obj: %1d sta: %2d \t center: %5d obj: %1d sta: %2d \t right: %5d obj: %d sta: %2d",dis0,obj0,sta0,dis1,obj1,sta1,dis2,obj2,sta2);
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_TOF_Process+0x18c>)
 800074a:	681e      	ldr	r6, [r3, #0]
 800074c:	f897 c00f 	ldrb.w	ip, [r7, #15]
 8000750:	f897 e00c 	ldrb.w	lr, [r7, #12]
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_TOF_Process+0x184>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	7bba      	ldrb	r2, [r7, #14]
 800075a:	7af9      	ldrb	r1, [r7, #11]
 800075c:	4815      	ldr	r0, [pc, #84]	; (80007b4 <MX_TOF_Process+0x190>)
 800075e:	6800      	ldr	r0, [r0, #0]
 8000760:	7b7c      	ldrb	r4, [r7, #13]
 8000762:	7abd      	ldrb	r5, [r7, #10]
 8000764:	9505      	str	r5, [sp, #20]
 8000766:	9404      	str	r4, [sp, #16]
 8000768:	9003      	str	r0, [sp, #12]
 800076a:	9102      	str	r1, [sp, #8]
 800076c:	9201      	str	r2, [sp, #4]
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	4673      	mov	r3, lr
 8000772:	4662      	mov	r2, ip
 8000774:	4631      	mov	r1, r6
 8000776:	4813      	ldr	r0, [pc, #76]	; (80007c4 <MX_TOF_Process+0x1a0>)
 8000778:	f014 fc40 	bl	8014ffc <iprintf>
			printf("\r\n");
 800077c:	4810      	ldr	r0, [pc, #64]	; (80007c0 <MX_TOF_Process+0x19c>)
 800077e:	f014 fcc3 	bl	8015108 <puts>
			}
#endif
		}

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, ObjectPresent);
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_TOF_Process+0x188>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	2120      	movs	r1, #32
 800078a:	480f      	ldr	r0, [pc, #60]	; (80007c8 <MX_TOF_Process+0x1a4>)
 800078c:	f011 ff28 	bl	80125e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_Y_GPIO_Port, L_Y_Pin, ObjectPresent);
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_TOF_Process+0x188>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461a      	mov	r2, r3
 8000796:	2180      	movs	r1, #128	; 0x80
 8000798:	480b      	ldr	r0, [pc, #44]	; (80007c8 <MX_TOF_Process+0x1a4>)
 800079a:	f011 ff21 	bl	80125e0 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800079e:	e750      	b.n	8000642 <MX_TOF_Process+0x1e>
 80007a0:	20007110 	.word	0x20007110
 80007a4:	20007038 	.word	0x20007038
 80007a8:	20000118 	.word	0x20000118
 80007ac:	20000125 	.word	0x20000125
 80007b0:	20000114 	.word	0x20000114
 80007b4:	2000011c 	.word	0x2000011c
 80007b8:	010f0107 	.word	0x010f0107
 80007bc:	08015fec 	.word	0x08015fec
 80007c0:	0801600c 	.word	0x0801600c
 80007c4:	08016010 	.word	0x08016010
 80007c8:	40020000 	.word	0x40020000

080007cc <objectPresent>:
	  }
  /* USER CODE END TOF_Process_PostTreatment */
}

void objectPresent(){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	  /*	als dist1 onder de 1000 mm komt voor 3 seconden, dan is er een object.
			   * 	+ er mag geen foutcode 12 zijn
			   */
			if((dis1 <= maxDistanceObject) && (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Status[0] == 0	 && !ObjectPresent){
 80007d0:	4b75      	ldr	r3, [pc, #468]	; (80009a8 <objectPresent+0x1dc>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b75      	ldr	r3, [pc, #468]	; (80009ac <objectPresent+0x1e0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	429a      	cmp	r2, r3
 80007da:	dc5a      	bgt.n	8000892 <objectPresent+0xc6>
 80007dc:	4b74      	ldr	r3, [pc, #464]	; (80009b0 <objectPresent+0x1e4>)
 80007de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d155      	bne.n	8000892 <objectPresent+0xc6>
 80007e6:	4b73      	ldr	r3, [pc, #460]	; (80009b4 <objectPresent+0x1e8>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	f083 0301 	eor.w	r3, r3, #1
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d04e      	beq.n	8000892 <objectPresent+0xc6>
				if(!timerMeasurementSet){
 80007f4:	4b70      	ldr	r3, [pc, #448]	; (80009b8 <objectPresent+0x1ec>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	f083 0301 	eor.w	r3, r3, #1
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d017      	beq.n	8000832 <objectPresent+0x66>
					timerMeasurementSet = true;
 8000802:	4b6d      	ldr	r3, [pc, #436]	; (80009b8 <objectPresent+0x1ec>)
 8000804:	2201      	movs	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]
					timerMeasurment = HAL_GetTick();
 8000808:	f011 fb54 	bl	8011eb4 <HAL_GetTick>
 800080c:	ee07 0a90 	vmov	s15, r0
 8000810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000814:	4b69      	ldr	r3, [pc, #420]	; (80009bc <objectPresent+0x1f0>)
 8000816:	edc3 7a00 	vstr	s15, [r3]

#if DEBUGGING
					printf("Timer object %d ", timerMeasurementSet);
 800081a:	4b67      	ldr	r3, [pc, #412]	; (80009b8 <objectPresent+0x1ec>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	4619      	mov	r1, r3
 8000820:	4867      	ldr	r0, [pc, #412]	; (80009c0 <objectPresent+0x1f4>)
 8000822:	f014 fbeb 	bl	8014ffc <iprintf>
					printf("Timer object is set");
 8000826:	4867      	ldr	r0, [pc, #412]	; (80009c4 <objectPresent+0x1f8>)
 8000828:	f014 fbe8 	bl	8014ffc <iprintf>
					printf("\r\n");
 800082c:	4866      	ldr	r0, [pc, #408]	; (80009c8 <objectPresent+0x1fc>)
 800082e:	f014 fc6b 	bl	8015108 <puts>
#endif
				}
				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 8000832:	f011 fb3f 	bl	8011eb4 <HAL_GetTick>
 8000836:	ee07 0a90 	vmov	s15, r0
 800083a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800083e:	4b5f      	ldr	r3, [pc, #380]	; (80009bc <objectPresent+0x1f0>)
 8000840:	edd3 7a00 	vldr	s15, [r3]
 8000844:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000848:	4b60      	ldr	r3, [pc, #384]	; (80009cc <objectPresent+0x200>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	ee07 3a90 	vmov	s15, r3
 8000850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800085c:	db30      	blt.n	80008c0 <objectPresent+0xf4>
				{
					timerMeasurementSet = false;
 800085e:	4b56      	ldr	r3, [pc, #344]	; (80009b8 <objectPresent+0x1ec>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]

					//Persoon naderd en staat dicht genoeg
					//Start andere sensoren ook op
					ObjectPresent = true;
 8000864:	4b53      	ldr	r3, [pc, #332]	; (80009b4 <objectPresent+0x1e8>)
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
					start_sensor(VL53L3A2_DEV_LEFT);
 800086a:	2000      	movs	r0, #0
 800086c:	f000 f91c 	bl	8000aa8 <start_sensor>
					start_sensor(VL53L3A2_DEV_RIGHT);
 8000870:	2002      	movs	r0, #2
 8000872:	f000 f919 	bl	8000aa8 <start_sensor>

					//PWM timer starten
					HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000876:	2104      	movs	r1, #4
 8000878:	4855      	ldr	r0, [pc, #340]	; (80009d0 <objectPresent+0x204>)
 800087a:	f013 fb83 	bl	8013f84 <HAL_TIM_PWM_Start>

#if DEBUGGING
					printf("Object %d", ObjectPresent);
 800087e:	4b4d      	ldr	r3, [pc, #308]	; (80009b4 <objectPresent+0x1e8>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4619      	mov	r1, r3
 8000884:	4853      	ldr	r0, [pc, #332]	; (80009d4 <objectPresent+0x208>)
 8000886:	f014 fbb9 	bl	8014ffc <iprintf>
					printf("\r\n");
 800088a:	484f      	ldr	r0, [pc, #316]	; (80009c8 <objectPresent+0x1fc>)
 800088c:	f014 fc3c 	bl	8015108 <puts>
				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 8000890:	e016      	b.n	80008c0 <objectPresent+0xf4>
#endif
				}
			}
			else
			{
				if(timerMeasurementSet && !ObjectPresent){
 8000892:	4b49      	ldr	r3, [pc, #292]	; (80009b8 <objectPresent+0x1ec>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d012      	beq.n	80008c0 <objectPresent+0xf4>
 800089a:	4b46      	ldr	r3, [pc, #280]	; (80009b4 <objectPresent+0x1e8>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	f083 0301 	eor.w	r3, r3, #1
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d00b      	beq.n	80008c0 <objectPresent+0xf4>
					timerMeasurementSet = false;
 80008a8:	4b43      	ldr	r3, [pc, #268]	; (80009b8 <objectPresent+0x1ec>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
#if DEBUGGING
					printf("Timer object %d ", timerMeasurementSet);
 80008ae:	4b42      	ldr	r3, [pc, #264]	; (80009b8 <objectPresent+0x1ec>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4619      	mov	r1, r3
 80008b4:	4842      	ldr	r0, [pc, #264]	; (80009c0 <objectPresent+0x1f4>)
 80008b6:	f014 fba1 	bl	8014ffc <iprintf>
					printf("\r\n");
 80008ba:	4843      	ldr	r0, [pc, #268]	; (80009c8 <objectPresent+0x1fc>)
 80008bc:	f014 fc24 	bl	8015108 <puts>
#endif
				}
			}


			if( (dis1 >= maxDistanceObject) && ObjectPresent){
 80008c0:	4b39      	ldr	r3, [pc, #228]	; (80009a8 <objectPresent+0x1dc>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b39      	ldr	r3, [pc, #228]	; (80009ac <objectPresent+0x1e0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	db55      	blt.n	8000978 <objectPresent+0x1ac>
 80008cc:	4b39      	ldr	r3, [pc, #228]	; (80009b4 <objectPresent+0x1e8>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d051      	beq.n	8000978 <objectPresent+0x1ac>

				if(timerMeasurementSet == false){
 80008d4:	4b38      	ldr	r3, [pc, #224]	; (80009b8 <objectPresent+0x1ec>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	f083 0301 	eor.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d017      	beq.n	8000912 <objectPresent+0x146>
					timerMeasurementSet = true;
 80008e2:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <objectPresent+0x1ec>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
					timerMeasurment = HAL_GetTick();
 80008e8:	f011 fae4 	bl	8011eb4 <HAL_GetTick>
 80008ec:	ee07 0a90 	vmov	s15, r0
 80008f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008f4:	4b31      	ldr	r3, [pc, #196]	; (80009bc <objectPresent+0x1f0>)
 80008f6:	edc3 7a00 	vstr	s15, [r3]
#if DEBUGGING
					printf("Timer no object %d ", timerMeasurementSet);
 80008fa:	4b2f      	ldr	r3, [pc, #188]	; (80009b8 <objectPresent+0x1ec>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	4619      	mov	r1, r3
 8000900:	4835      	ldr	r0, [pc, #212]	; (80009d8 <objectPresent+0x20c>)
 8000902:	f014 fb7b 	bl	8014ffc <iprintf>
					printf("Timer no object is set");
 8000906:	4835      	ldr	r0, [pc, #212]	; (80009dc <objectPresent+0x210>)
 8000908:	f014 fb78 	bl	8014ffc <iprintf>
					printf("\r\n");
 800090c:	482e      	ldr	r0, [pc, #184]	; (80009c8 <objectPresent+0x1fc>)
 800090e:	f014 fbfb 	bl	8015108 <puts>
#endif
				}

				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 8000912:	f011 facf 	bl	8011eb4 <HAL_GetTick>
 8000916:	ee07 0a90 	vmov	s15, r0
 800091a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800091e:	4b27      	ldr	r3, [pc, #156]	; (80009bc <objectPresent+0x1f0>)
 8000920:	edd3 7a00 	vldr	s15, [r3]
 8000924:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000928:	4b28      	ldr	r3, [pc, #160]	; (80009cc <objectPresent+0x200>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	ee07 3a90 	vmov	s15, r3
 8000930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000934:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800093c:	db31      	blt.n	80009a2 <objectPresent+0x1d6>
				{
					timerMeasurementSet = false;
 800093e:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <objectPresent+0x1ec>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]

					ObjectPresent = false;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <objectPresent+0x1e8>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
					stop_sensor(VL53L3A2_DEV_LEFT);
 800094a:	2000      	movs	r0, #0
 800094c:	f000 f8ec 	bl	8000b28 <stop_sensor>
					stop_sensor(VL53L3A2_DEV_RIGHT);
 8000950:	2002      	movs	r0, #2
 8000952:	f000 f8e9 	bl	8000b28 <stop_sensor>

					//PWM timer starten
					HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000956:	2104      	movs	r1, #4
 8000958:	481d      	ldr	r0, [pc, #116]	; (80009d0 <objectPresent+0x204>)
 800095a:	f013 fbc3 	bl	80140e4 <HAL_TIM_PWM_Stop>

					HAL_Delay(2);
 800095e:	2002      	movs	r0, #2
 8000960:	f011 fab4 	bl	8011ecc <HAL_Delay>
#if DEBUGGING
					printf("Object %d", ObjectPresent);
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <objectPresent+0x1e8>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	481a      	ldr	r0, [pc, #104]	; (80009d4 <objectPresent+0x208>)
 800096c:	f014 fb46 	bl	8014ffc <iprintf>
					printf("\r\n");
 8000970:	4815      	ldr	r0, [pc, #84]	; (80009c8 <objectPresent+0x1fc>)
 8000972:	f014 fbc9 	bl	8015108 <puts>
				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 8000976:	e014      	b.n	80009a2 <objectPresent+0x1d6>
#endif
				}
			}
			else
			{
				if(timerMeasurementSet && ObjectPresent){
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <objectPresent+0x1ec>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d010      	beq.n	80009a2 <objectPresent+0x1d6>
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <objectPresent+0x1e8>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d00c      	beq.n	80009a2 <objectPresent+0x1d6>
					timerMeasurementSet = false;
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <objectPresent+0x1ec>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
#if DEBUGGING
					printf("Timer no object %d ", timerMeasurementSet);
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <objectPresent+0x1ec>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	4619      	mov	r1, r3
 8000994:	4810      	ldr	r0, [pc, #64]	; (80009d8 <objectPresent+0x20c>)
 8000996:	f014 fb31 	bl	8014ffc <iprintf>
					printf("\r\n");
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <objectPresent+0x1fc>)
 800099c:	f014 fbb4 	bl	8015108 <puts>
#endif
				}
			}
}
 80009a0:	e7ff      	b.n	80009a2 <objectPresent+0x1d6>
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000118 	.word	0x20000118
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20007038 	.word	0x20007038
 80009b4:	20000125 	.word	0x20000125
 80009b8:	20000124 	.word	0x20000124
 80009bc:	20000120 	.word	0x20000120
 80009c0:	0801606c 	.word	0x0801606c
 80009c4:	08016080 	.word	0x08016080
 80009c8:	0801600c 	.word	0x0801600c
 80009cc:	20000004 	.word	0x20000004
 80009d0:	20007110 	.word	0x20007110
 80009d4:	08016094 	.word	0x08016094
 80009d8:	080160a0 	.word	0x080160a0
 80009dc:	080160b4 	.word	0x080160b4

080009e0 <MX_53L3A2_MultiSensorRanging_Init>:

static void MX_53L3A2_MultiSensorRanging_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  uint8_t device;
  uint16_t i2c_addr;
  uint32_t id;

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 fb70 	bl	80010cc <BSP_COM_Init>

  printf("53L3A2 Gesture Control\r\n");
 80009ec:	482a      	ldr	r0, [pc, #168]	; (8000a98 <MX_53L3A2_MultiSensorRanging_Init+0xb8>)
 80009ee:	f014 fb8b 	bl	8015108 <puts>

  /* put all the devices in shutdown mode */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 80009f2:	2300      	movs	r3, #0
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	e007      	b.n	8000a08 <MX_53L3A2_MultiSensorRanging_Init+0x28>
  {
    VL53L3A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_OFF);
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	2101      	movs	r1, #1
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 f957 	bl	8001cb0 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	3301      	adds	r3, #1
 8000a06:	71fb      	strb	r3, [r7, #7]
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d9f4      	bls.n	80009f8 <MX_53L3A2_MultiSensorRanging_Init+0x18>

  /* power on the devices one at a time, initialize them and change their address.
   * once the address is updated, the communication with the devices is checked
   * reading its ID.
   */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71fb      	strb	r3, [r7, #7]
 8000a12:	e039      	b.n	8000a88 <MX_53L3A2_MultiSensorRanging_Init+0xa8>
  {
    VL53L3A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_ON);
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 f949 	bl	8001cb0 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
    status = VL53L3A2_RANGING_SENSOR_Init(device);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 f831 	bl	8001a88 <VL53L3A2_RANGING_SENSOR_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <MX_53L3A2_MultiSensorRanging_Init+0xbc>)
 8000a2a:	6013      	str	r3, [r2, #0]

    /* 0: not detected, 1: detected */
    ToF_Present[device] = (status != BSP_ERROR_NONE) ? 0 : 1;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_53L3A2_MultiSensorRanging_Init+0xbc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	bf0c      	ite	eq
 8000a34:	2301      	moveq	r3, #1
 8000a36:	2300      	movne	r3, #0
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <MX_53L3A2_MultiSensorRanging_Init+0xc0>)
 8000a40:	54d1      	strb	r1, [r2, r3]

    /* skip this device if init not successful */
    if (ToF_Present[device] == 0) continue;
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	4a16      	ldr	r2, [pc, #88]	; (8000aa0 <MX_53L3A2_MultiSensorRanging_Init+0xc0>)
 8000a46:	5cd3      	ldrb	r3, [r2, r3]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d019      	beq.n	8000a80 <MX_53L3A2_MultiSensorRanging_Init+0xa0>

    /* left: 0x54, center: 0x56, right: 0x58 */
    i2c_addr = (RANGING_SENSOR_VL53L3CX_ADDRESS + (device + 1) * 2);
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	3329      	adds	r3, #41	; 0x29
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	80bb      	strh	r3, [r7, #4]
    VL53L3A2_RANGING_SENSOR_SetAddress(device, i2c_addr);
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	88ba      	ldrh	r2, [r7, #4]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 f8fd 	bl	8001c60 <VL53L3A2_RANGING_SENSOR_SetAddress>

    /* check the communication with the device reading the ID */
    VL53L3A2_RANGING_SENSOR_ReadID(device, &id);
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	463a      	mov	r2, r7
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 f831 	bl	8001ad4 <VL53L3A2_RANGING_SENSOR_ReadID>
#if DEBUGGING
    printf("ToF sensor %d - ID: %04lX\r\n", device, (unsigned long)id);
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	683a      	ldr	r2, [r7, #0]
 8000a76:	4619      	mov	r1, r3
 8000a78:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <MX_53L3A2_MultiSensorRanging_Init+0xc4>)
 8000a7a:	f014 fabf 	bl	8014ffc <iprintf>
 8000a7e:	e000      	b.n	8000a82 <MX_53L3A2_MultiSensorRanging_Init+0xa2>
    if (ToF_Present[device] == 0) continue;
 8000a80:	bf00      	nop
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	3301      	adds	r3, #1
 8000a86:	71fb      	strb	r3, [r7, #7]
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d9c2      	bls.n	8000a14 <MX_53L3A2_MultiSensorRanging_Init+0x34>
#endif
  }
}
 8000a8e:	bf00      	nop
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	080160cc 	.word	0x080160cc
 8000a9c:	2000010c 	.word	0x2000010c
 8000aa0:	20000110 	.word	0x20000110
 8000aa4:	080160e4 	.word	0x080160e4

08000aa8 <start_sensor>:
  }
  printf ("\r\n");
}
*/

static void start_sensor(uint8_t sensor){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	RANGING_SENSOR_ProfileConfig_t Profile;

	Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	60fb      	str	r3, [r7, #12]
	Profile.TimingBudget = 30; /* 16 ms < TimingBudget < 500 ms */
 8000ab6:	231e      	movs	r3, #30
 8000ab8:	613b      	str	r3, [r7, #16]
	Profile.Frequency = 0; /* not necessary in simple ranging */
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
	Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
 8000abe:	2301      	movs	r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
	Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61fb      	str	r3, [r7, #28]

	VL53L3A2_RANGING_SENSOR_ConfigProfile(sensor, &Profile);
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	f107 020c 	add.w	r2, r7, #12
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 f828 	bl	8001b24 <VL53L3A2_RANGING_SENSOR_ConfigProfile>
	status = VL53L3A2_RANGING_SENSOR_Start(sensor, RS_MODE_BLOCKING_CONTINUOUS);
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 f873 	bl	8001bc4 <VL53L3A2_RANGING_SENSOR_Start>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <start_sensor+0x70>)
 8000ae2:	6013      	str	r3, [r2, #0]
    if (status != BSP_ERROR_NONE)
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <start_sensor+0x70>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d008      	beq.n	8000afe <start_sensor+0x56>
    {
#if DEBUGGING
    	printf("VL53L3A2_RANGING_SENSOR_Start failed for sensor %s \r\n", TofDevStr[sensor]);
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <start_sensor+0x74>)
 8000af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af4:	4619      	mov	r1, r3
 8000af6:	480a      	ldr	r0, [pc, #40]	; (8000b20 <start_sensor+0x78>)
 8000af8:	f014 fa80 	bl	8014ffc <iprintf>
#endif
		while(1);
 8000afc:	e7fe      	b.n	8000afc <start_sensor+0x54>
    }
    else
	{
#if DEBUGGING
    	printf("sensor %s\t opgestart \r\n", TofDevStr[sensor]);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <start_sensor+0x74>)
 8000b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b06:	4619      	mov	r1, r3
 8000b08:	4806      	ldr	r0, [pc, #24]	; (8000b24 <start_sensor+0x7c>)
 8000b0a:	f014 fa77 	bl	8014ffc <iprintf>
#endif
	}
}
 8000b0e:	bf00      	nop
 8000b10:	3720      	adds	r7, #32
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2000010c 	.word	0x2000010c
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	08016100 	.word	0x08016100
 8000b24:	08016138 	.word	0x08016138

08000b28 <stop_sensor>:

static void stop_sensor(uint8_t sensor){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	status = VL53L3A2_RANGING_SENSOR_Stop(sensor);
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 f86d 	bl	8001c14 <VL53L3A2_RANGING_SENSOR_Stop>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <stop_sensor+0x40>)
 8000b3e:	6013      	str	r3, [r2, #0]
    if (status != BSP_ERROR_NONE)
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <stop_sensor+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d003      	beq.n	8000b50 <stop_sensor+0x28>
    {
#if DEBUGGING
    	printf("VL53L3A2_RANGING_SENSOR_Stop failed\r\n");
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <stop_sensor+0x44>)
 8000b4a:	f014 fadd 	bl	8015108 <puts>
#endif
		while(1);
 8000b4e:	e7fe      	b.n	8000b4e <stop_sensor+0x26>
    }
    else
	{
#if DEBUGGING
    	printf("sensor %s\t afgezet \r\n", TofDevStr[sensor]);
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <stop_sensor+0x48>)
 8000b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <stop_sensor+0x4c>)
 8000b5c:	f014 fa4e 	bl	8014ffc <iprintf>
#endif
	}
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2000010c 	.word	0x2000010c
 8000b6c:	08016150 	.word	0x08016150
 8000b70:	20000008 	.word	0x20000008
 8000b74:	08016178 	.word	0x08016178

08000b78 <getResult>:

static void getResult(uint8_t sensor, RANGING_SENSOR_Result_t *result){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
	VL53L3A2_RANGING_SENSOR_GetDistance(sensor, &result[sensor]);
 8000b84:	79f8      	ldrb	r0, [r7, #7]
 8000b86:	79fa      	ldrb	r2, [r7, #7]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	4413      	add	r3, r2
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	461a      	mov	r2, r3
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	4413      	add	r3, r2
 8000b96:	4619      	mov	r1, r3
 8000b98:	f000 ffec 	bl	8001b74 <VL53L3A2_RANGING_SENSOR_GetDistance>
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <getDistance>:

static long getDistance(uint8_t sensor, RANGING_SENSOR_Result_t * result){
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
	long distance = (long)result[sensor].ZoneResult[0].Distance[0];
 8000bb0:	79fa      	ldrb	r2, [r7, #7]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	4413      	add	r3, r2
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	461a      	mov	r2, r3
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	60fb      	str	r3, [r7, #12]
	return distance;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd8:	f011 f906 	bl	8011de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bdc:	f000 f80e 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be0:	f000 f8fe 	bl	8000de0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000be4:	f000 f8d0 	bl	8000d88 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000be8:	f000 f874 	bl	8000cd4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  MX_TOF_Init();
 8000bec:	f7ff fd14 	bl	8000618 <MX_TOF_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_TOF_Process(&htim3);
 8000bf0:	4801      	ldr	r0, [pc, #4]	; (8000bf8 <main+0x24>)
 8000bf2:	f7ff fd17 	bl	8000624 <MX_TOF_Process>
 8000bf6:	e7fb      	b.n	8000bf0 <main+0x1c>
 8000bf8:	20007110 	.word	0x20007110

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b094      	sub	sp, #80	; 0x50
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0320 	add.w	r3, r7, #32
 8000c06:	2230      	movs	r2, #48	; 0x30
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f014 f9ee 	bl	8014fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	4b29      	ldr	r3, [pc, #164]	; (8000ccc <SystemClock_Config+0xd0>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a28      	ldr	r2, [pc, #160]	; (8000ccc <SystemClock_Config+0xd0>)
 8000c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c30:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <SystemClock_Config+0xd0>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <SystemClock_Config+0xd4>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c48:	4a21      	ldr	r2, [pc, #132]	; (8000cd0 <SystemClock_Config+0xd4>)
 8000c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <SystemClock_Config+0xd4>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c60:	2301      	movs	r3, #1
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c64:	2310      	movs	r3, #16
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c70:	2310      	movs	r3, #16
 8000c72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c7e:	2307      	movs	r3, #7
 8000c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c82:	f107 0320 	add.w	r3, r7, #32
 8000c86:	4618      	mov	r0, r3
 8000c88:	f012 fcb8 	bl	80135fc <HAL_RCC_OscConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c92:	f000 f91f 	bl	8000ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c96:	230f      	movs	r3, #15
 8000c98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f012 ff1a 	bl	8013aec <HAL_RCC_ClockConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000cbe:	f000 f909 	bl	8000ed4 <Error_Handler>
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	3750      	adds	r7, #80	; 0x50
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40007000 	.word	0x40007000

08000cd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cda:	f107 0320 	add.w	r3, r7, #32
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]
 8000cf2:	615a      	str	r2, [r3, #20]
 8000cf4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <MX_TIM3_Init+0xac>)
 8000cf8:	4a22      	ldr	r2, [pc, #136]	; (8000d84 <MX_TIM3_Init+0xb0>)
 8000cfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cfc:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <MX_TIM3_Init+0xac>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <MX_TIM3_Init+0xac>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1023;
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_TIM3_Init+0xac>)
 8000d0a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000d0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <MX_TIM3_Init+0xac>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_TIM3_Init+0xac>)
 8000d18:	2280      	movs	r2, #128	; 0x80
 8000d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d1c:	4818      	ldr	r0, [pc, #96]	; (8000d80 <MX_TIM3_Init+0xac>)
 8000d1e:	f013 f8e1 	bl	8013ee4 <HAL_TIM_PWM_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000d28:	f000 f8d4 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d34:	f107 0320 	add.w	r3, r7, #32
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4811      	ldr	r0, [pc, #68]	; (8000d80 <MX_TIM3_Init+0xac>)
 8000d3c:	f013 fd2a 	bl	8014794 <HAL_TIMEx_MasterConfigSynchronization>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000d46:	f000 f8c5 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d4a:	2360      	movs	r3, #96	; 0x60
 8000d4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4807      	ldr	r0, [pc, #28]	; (8000d80 <MX_TIM3_Init+0xac>)
 8000d62:	f013 fa23 	bl	80141ac <HAL_TIM_PWM_ConfigChannel>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000d6c:	f000 f8b2 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d70:	4803      	ldr	r0, [pc, #12]	; (8000d80 <MX_TIM3_Init+0xac>)
 8000d72:	f000 f8ff 	bl	8000f74 <HAL_TIM_MspPostInit>

}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	; 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20007110 	.word	0x20007110
 8000d84:	40000400 	.word	0x40000400

08000d88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_USART2_UART_Init+0x50>)
 8000d8e:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <MX_USART2_UART_Init+0x54>)
 8000d90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_USART2_UART_Init+0x50>)
 8000d94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_USART2_UART_Init+0x50>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <MX_USART2_UART_Init+0x50>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_USART2_UART_Init+0x50>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <MX_USART2_UART_Init+0x50>)
 8000dae:	220c      	movs	r2, #12
 8000db0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_USART2_UART_Init+0x50>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <MX_USART2_UART_Init+0x50>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_USART2_UART_Init+0x50>)
 8000dc4:	f013 fda1 	bl	801490a <HAL_MultiProcessor_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000dce:	f000 f881 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200071f0 	.word	0x200071f0
 8000ddc:	40004400 	.word	0x40004400

08000de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <MX_GPIO_Init+0xe8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a32      	ldr	r2, [pc, #200]	; (8000ec8 <MX_GPIO_Init+0xe8>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <MX_GPIO_Init+0xe8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <MX_GPIO_Init+0xe8>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a2b      	ldr	r2, [pc, #172]	; (8000ec8 <MX_GPIO_Init+0xe8>)
 8000e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <MX_GPIO_Init+0xe8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <MX_GPIO_Init+0xe8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a24      	ldr	r2, [pc, #144]	; (8000ec8 <MX_GPIO_Init+0xe8>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <MX_GPIO_Init+0xe8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <MX_GPIO_Init+0xe8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a1d      	ldr	r2, [pc, #116]	; (8000ec8 <MX_GPIO_Init+0xe8>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_GPIO_Init+0xe8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2120      	movs	r1, #32
 8000e6a:	4818      	ldr	r0, [pc, #96]	; (8000ecc <MX_GPIO_Init+0xec>)
 8000e6c:	f011 fbb8 	bl	80125e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e76:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	4812      	ldr	r0, [pc, #72]	; (8000ed0 <MX_GPIO_Init+0xf0>)
 8000e88:	f011 f92a 	bl	80120e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e8c:	2320      	movs	r3, #32
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480a      	ldr	r0, [pc, #40]	; (8000ecc <MX_GPIO_Init+0xec>)
 8000ea4:	f011 f91c 	bl	80120e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_Y_Pin */
  GPIO_InitStruct.Pin = L_Y_Pin;
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_Y_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4804      	ldr	r0, [pc, #16]	; (8000ecc <MX_GPIO_Init+0xec>)
 8000ebc:	f011 f910 	bl	80120e0 <HAL_GPIO_Init>

}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020800 	.word	0x40020800

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>
	...

08000ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_MspInit+0x4c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <HAL_MspInit+0x4c>)
 8000ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_MspInit+0x4c>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f1e:	2007      	movs	r0, #7
 8000f20:	f011 f8aa 	bl	8012078 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800

08000f30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d10d      	bne.n	8000f5e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_TIM_PWM_MspInit+0x40>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <HAL_TIM_PWM_MspInit+0x40>)
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <HAL_TIM_PWM_MspInit+0x40>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40000400 	.word	0x40000400
 8000f70:	40023800 	.word	0x40023800

08000f74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <HAL_TIM_MspPostInit+0x68>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d11d      	bne.n	8000fd2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_TIM_MspPostInit+0x6c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a10      	ldr	r2, [pc, #64]	; (8000fe0 <HAL_TIM_MspPostInit+0x6c>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_TIM_MspPostInit+0x6c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <HAL_TIM_MspPostInit+0x70>)
 8000fce:	f011 f887 	bl	80120e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	3720      	adds	r7, #32
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40000400 	.word	0x40000400
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40020800 	.word	0x40020800

08000fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a19      	ldr	r2, [pc, #100]	; (800106c <HAL_UART_MspInit+0x84>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d12b      	bne.n	8001062 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_UART_MspInit+0x88>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_UART_MspInit+0x88>)
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_UART_MspInit+0x88>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_UART_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <HAL_UART_MspInit+0x88>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_UART_MspInit+0x88>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001042:	230c      	movs	r3, #12
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001052:	2307      	movs	r3, #7
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <HAL_UART_MspInit+0x8c>)
 800105e:	f011 f83f 	bl	80120e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	; 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40004400 	.word	0x40004400
 8001070:	40023800 	.word	0x40023800
 8001074:	40020000 	.word	0x40020000

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800107c:	e7fe      	b.n	800107c <NMI_Handler+0x4>

0800107e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <MemManage_Handler+0x4>

0800108a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <BusFault_Handler+0x4>

08001090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <UsageFault_Handler+0x4>

08001096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c4:	f010 fee2 	bl	8011e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}

080010cc <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d903      	bls.n	80010e8 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80010e0:	f06f 0301 	mvn.w	r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e025      	b.n	8001134 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	79fa      	ldrb	r2, [r7, #7]
 80010ec:	4914      	ldr	r1, [pc, #80]	; (8001140 <BSP_COM_Init+0x74>)
 80010ee:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80010f2:	4814      	ldr	r0, [pc, #80]	; (8001144 <BSP_COM_Init+0x78>)
 80010f4:	4613      	mov	r3, r2
 80010f6:	011b      	lsls	r3, r3, #4
 80010f8:	4413      	add	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4403      	add	r3, r0
 80010fe:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001100:	79fa      	ldrb	r2, [r7, #7]
 8001102:	4613      	mov	r3, r2
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <BSP_COM_Init+0x78>)
 800110c:	4413      	add	r3, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f864 	bl	80011dc <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8001114:	79fa      	ldrb	r2, [r7, #7]
 8001116:	4613      	mov	r3, r2
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4a09      	ldr	r2, [pc, #36]	; (8001144 <BSP_COM_Init+0x78>)
 8001120:	4413      	add	r3, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f810 	bl	8001148 <MX_USART2_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800112e:	f06f 0303 	mvn.w	r3, #3
 8001132:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001134:	68fb      	ldr	r3, [r7, #12]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000014 	.word	0x20000014
 8001144:	20007234 	.word	0x20007234

08001148 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <MX_USART2_UART_Init+0x58>)
 8001158:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001160:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f013 fb72 	bl	8014870 <HAL_UART_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40004400 	.word	0x40004400

080011a4 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* For IAR and ARM Compiler 5 and 6 */
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <__io_putchar+0x30>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4613      	mov	r3, r2
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	4413      	add	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <__io_putchar+0x34>)
 80011bc:	1898      	adds	r0, r3, r2
 80011be:	1d39      	adds	r1, r7, #4
 80011c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c4:	2201      	movs	r2, #1
 80011c6:	f013 fc10 	bl	80149ea <HAL_UART_Transmit>
  return ch;
 80011ca:	687b      	ldr	r3, [r7, #4]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000126 	.word	0x20000126
 80011d8:	20007234 	.word	0x20007234

080011dc <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <USART2_MspInit+0x88>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <USART2_MspInit+0x88>)
 80011ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f2:	6413      	str	r3, [r2, #64]	; 0x40
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <USART2_MspInit+0x88>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <USART2_MspInit+0x88>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a16      	ldr	r2, [pc, #88]	; (8001264 <USART2_MspInit+0x88>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <USART2_MspInit+0x88>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800121c:	2304      	movs	r3, #4
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800122c:	2307      	movs	r3, #7
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	480c      	ldr	r0, [pc, #48]	; (8001268 <USART2_MspInit+0x8c>)
 8001238:	f010 ff52 	bl	80120e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800123c:	2308      	movs	r3, #8
 800123e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800124c:	2307      	movs	r3, #7
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	4804      	ldr	r0, [pc, #16]	; (8001268 <USART2_MspInit+0x8c>)
 8001258:	f010 ff42 	bl	80120e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800125c:	bf00      	nop
 800125e:	3728      	adds	r7, #40	; 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40020000 	.word	0x40020000

0800126c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <BSP_I2C1_Init+0x58>)
 8001278:	4a13      	ldr	r2, [pc, #76]	; (80012c8 <BSP_I2C1_Init+0x5c>)
 800127a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <BSP_I2C1_Init+0x60>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	1c5a      	adds	r2, r3, #1
 8001282:	4912      	ldr	r1, [pc, #72]	; (80012cc <BSP_I2C1_Init+0x60>)
 8001284:	600a      	str	r2, [r1, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d117      	bne.n	80012ba <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800128a:	480e      	ldr	r0, [pc, #56]	; (80012c4 <BSP_I2C1_Init+0x58>)
 800128c:	f011 fe6e 	bl	8012f6c <HAL_I2C_GetState>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d111      	bne.n	80012ba <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001296:	480b      	ldr	r0, [pc, #44]	; (80012c4 <BSP_I2C1_Init+0x58>)
 8001298:	f000 f8d2 	bl	8001440 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10b      	bne.n	80012ba <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80012a2:	4808      	ldr	r0, [pc, #32]	; (80012c4 <BSP_I2C1_Init+0x58>)
 80012a4:	f000 f898 	bl	80013d8 <MX_I2C1_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80012ae:	f06f 0307 	mvn.w	r3, #7
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	e001      	b.n	80012ba <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80012ba:	687b      	ldr	r3, [r7, #4]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000719c 	.word	0x2000719c
 80012c8:	40005400 	.word	0x40005400
 80012cc:	20000128 	.word	0x20000128

080012d0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <BSP_I2C1_DeInit+0x48>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d014      	beq.n	800130c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <BSP_I2C1_DeInit+0x48>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <BSP_I2C1_DeInit+0x48>)
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <BSP_I2C1_DeInit+0x48>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10b      	bne.n	800130c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <BSP_I2C1_DeInit+0x4c>)
 80012f6:	f000 f8ed 	bl	80014d4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80012fa:	4808      	ldr	r0, [pc, #32]	; (800131c <BSP_I2C1_DeInit+0x4c>)
 80012fc:	f011 face 	bl	801289c <HAL_I2C_DeInit>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d002      	beq.n	800130c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001306:	f06f 0307 	mvn.w	r3, #7
 800130a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800130c:	687b      	ldr	r3, [r7, #4]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000128 	.word	0x20000128
 800131c:	2000719c 	.word	0x2000719c

08001320 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af02      	add	r7, sp, #8
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	80fb      	strh	r3, [r7, #6]
 800132c:	4613      	mov	r3, r2
 800132e:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001334:	88bb      	ldrh	r3, [r7, #4]
 8001336:	88f9      	ldrh	r1, [r7, #6]
 8001338:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800133c:	9200      	str	r2, [sp, #0]
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	480b      	ldr	r0, [pc, #44]	; (8001370 <BSP_I2C1_Send+0x50>)
 8001342:	f011 faef 	bl	8012924 <HAL_I2C_Master_Transmit>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00c      	beq.n	8001366 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800134c:	4808      	ldr	r0, [pc, #32]	; (8001370 <BSP_I2C1_Send+0x50>)
 800134e:	f011 fe1b 	bl	8012f88 <HAL_I2C_GetError>
 8001352:	4603      	mov	r3, r0
 8001354:	2b04      	cmp	r3, #4
 8001356:	d003      	beq.n	8001360 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001358:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	e002      	b.n	8001366 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001360:	f06f 0303 	mvn.w	r3, #3
 8001364:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000719c 	.word	0x2000719c

08001374 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af02      	add	r7, sp, #8
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	80fb      	strh	r3, [r7, #6]
 8001380:	4613      	mov	r3, r2
 8001382:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	88f9      	ldrh	r1, [r7, #6]
 800138c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001390:	9200      	str	r2, [sp, #0]
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <BSP_I2C1_Recv+0x50>)
 8001396:	f011 fbc3 	bl	8012b20 <HAL_I2C_Master_Receive>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00c      	beq.n	80013ba <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80013a0:	4808      	ldr	r0, [pc, #32]	; (80013c4 <BSP_I2C1_Recv+0x50>)
 80013a2:	f011 fdf1 	bl	8012f88 <HAL_I2C_GetError>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d003      	beq.n	80013b4 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80013ac:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e002      	b.n	80013ba <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80013b4:	f06f 0303 	mvn.w	r3, #3
 80013b8:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2000719c 	.word	0x2000719c

080013c8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80013cc:	f010 fd72 	bl	8011eb4 <HAL_GetTick>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a14      	ldr	r2, [pc, #80]	; (8001438 <MX_I2C1_Init+0x60>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a13      	ldr	r2, [pc, #76]	; (800143c <MX_I2C1_Init+0x64>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001402:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f011 f8f9 	bl	8012614 <HAL_I2C_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40005400 	.word	0x40005400
 800143c:	000186a0 	.word	0x000186a0

08001440 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <I2C1_MspInit+0x8c>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	4a1e      	ldr	r2, [pc, #120]	; (80014cc <I2C1_MspInit+0x8c>)
 8001452:	f043 0302 	orr.w	r3, r3, #2
 8001456:	6313      	str	r3, [r2, #48]	; 0x30
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <I2C1_MspInit+0x8c>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001464:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800146a:	2312      	movs	r3, #18
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001476:	2304      	movs	r3, #4
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4813      	ldr	r0, [pc, #76]	; (80014d0 <I2C1_MspInit+0x90>)
 8001482:	f010 fe2d 	bl	80120e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148c:	2312      	movs	r3, #18
 800148e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001498:	2304      	movs	r3, #4
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	480b      	ldr	r0, [pc, #44]	; (80014d0 <I2C1_MspInit+0x90>)
 80014a4:	f010 fe1c 	bl	80120e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <I2C1_MspInit+0x8c>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	4a06      	ldr	r2, [pc, #24]	; (80014cc <I2C1_MspInit+0x8c>)
 80014b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b6:	6413      	str	r3, [r2, #64]	; 0x40
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <I2C1_MspInit+0x8c>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020400 	.word	0x40020400

080014d4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <I2C1_MspDeInit+0x30>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	4a08      	ldr	r2, [pc, #32]	; (8001504 <I2C1_MspDeInit+0x30>)
 80014e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80014e6:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80014e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ec:	4806      	ldr	r0, [pc, #24]	; (8001508 <I2C1_MspDeInit+0x34>)
 80014ee:	f010 ff7b 	bl	80123e8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80014f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f6:	4804      	ldr	r0, [pc, #16]	; (8001508 <I2C1_MspDeInit+0x34>)
 80014f8:	f010 ff76 	bl	80123e8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	40020400 	.word	0x40020400

0800150c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	e00a      	b.n	8001534 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800151e:	f3af 8000 	nop.w
 8001522:	4601      	mov	r1, r0
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	60ba      	str	r2, [r7, #8]
 800152a:	b2ca      	uxtb	r2, r1
 800152c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	3301      	adds	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	429a      	cmp	r2, r3
 800153a:	dbf0      	blt.n	800151e <_read+0x12>
	}

return len;
 800153c:	687b      	ldr	r3, [r7, #4]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	e009      	b.n	800156c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	60ba      	str	r2, [r7, #8]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fe1f 	bl	80011a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3301      	adds	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	429a      	cmp	r2, r3
 8001572:	dbf1      	blt.n	8001558 <_write+0x12>
	}
	return len;
 8001574:	687b      	ldr	r3, [r7, #4]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <_close>:

int _close(int file)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
	return -1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015a6:	605a      	str	r2, [r3, #4]
	return 0;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <_isatty>:

int _isatty(int file)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
	return 1;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
	return 0;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f0:	4a14      	ldr	r2, [pc, #80]	; (8001644 <_sbrk+0x5c>)
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <_sbrk+0x60>)
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <_sbrk+0x64>)
 8001606:	4a12      	ldr	r2, [pc, #72]	; (8001650 <_sbrk+0x68>)
 8001608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	429a      	cmp	r2, r3
 8001616:	d207      	bcs.n	8001628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001618:	f013 fcb0 	bl	8014f7c <__errno>
 800161c:	4603      	mov	r3, r0
 800161e:	220c      	movs	r2, #12
 8001620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	e009      	b.n	800163c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <_sbrk+0x64>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162e:	4b07      	ldr	r3, [pc, #28]	; (800164c <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <_sbrk+0x64>)
 8001638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20018000 	.word	0x20018000
 8001648:	00000400 	.word	0x00000400
 800164c:	2000012c 	.word	0x2000012c
 8001650:	20007490 	.word	0x20007490

08001654 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <SystemInit+0x20>)
 800165a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <SystemInit+0x20>)
 8001660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800167c:	480d      	ldr	r0, [pc, #52]	; (80016b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800167e:	490e      	ldr	r1, [pc, #56]	; (80016b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001680:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001684:	e002      	b.n	800168c <LoopCopyDataInit>

08001686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168a:	3304      	adds	r3, #4

0800168c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800168c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001690:	d3f9      	bcc.n	8001686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001694:	4c0b      	ldr	r4, [pc, #44]	; (80016c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001698:	e001      	b.n	800169e <LoopFillZerobss>

0800169a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800169c:	3204      	adds	r2, #4

0800169e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a0:	d3fb      	bcc.n	800169a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016a2:	f7ff ffd7 	bl	8001654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016a6:	f013 fc6f 	bl	8014f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016aa:	f7ff fa93 	bl	8000bd4 <main>
  bx  lr    
 80016ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b8:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80016bc:	0801625c 	.word	0x0801625c
  ldr r2, =_sbss
 80016c0:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 80016c4:	2000748c 	.word	0x2000748c

080016c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC_IRQHandler>
	...

080016cc <VL53L3A2_Init>:
  * @brief Initialize X-NUCLEO-53L3A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L3A2_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
  int32_t status = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 80016d6:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <VL53L3A2_Init+0xe4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	4934      	ldr	r1, [pc, #208]	; (80017b0 <VL53L3A2_Init+0xe4>)
 80016de:	600a      	str	r2, [r1, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d154      	bne.n	800178e <VL53L3A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 80016e4:	f000 f8d4 	bl	8001890 <_I2cFailRecover>
 80016e8:	4602      	mov	r2, r0
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	607b      	str	r3, [r7, #4]
    status |= VL53L3A2_I2C_Init();
 80016f0:	f7ff fdbc 	bl	800126c <BSP_I2C1_Init>
 80016f4:	4602      	mov	r2, r0
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d147      	bne.n	8001792 <VL53L3A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 8001702:	463a      	mov	r2, r7
 8001704:	2302      	movs	r3, #2
 8001706:	2100      	movs	r1, #0
 8001708:	2086      	movs	r0, #134	; 0x86
 800170a:	f000 f963 	bl	80019d4 <_ExpanderRd>
 800170e:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d13f      	bne.n	8001796 <VL53L3A2_Init+0xca>
 8001716:	783b      	ldrb	r3, [r7, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d13c      	bne.n	8001796 <VL53L3A2_Init+0xca>
 800171c:	787b      	ldrb	r3, [r7, #1]
 800171e:	2b16      	cmp	r3, #22
 8001720:	d139      	bne.n	8001796 <VL53L3A2_Init+0xca>
	  {
      VL53L3A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 8001722:	463a      	mov	r2, r7
 8001724:	2302      	movs	r3, #2
 8001726:	2100      	movs	r1, #0
 8001728:	2084      	movs	r0, #132	; 0x84
 800172a:	f000 f953 	bl	80019d4 <_ExpanderRd>
 800172e:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d131      	bne.n	800179a <VL53L3A2_Init+0xce>
 8001736:	783b      	ldrb	r3, [r7, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d12e      	bne.n	800179a <VL53L3A2_Init+0xce>
 800173c:	787b      	ldrb	r3, [r7, #1]
 800173e:	2b16      	cmp	r3, #22
 8001740:	d12b      	bne.n	800179a <VL53L3A2_Init+0xce>
	  {
		  VL53L3A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <VL53L3A2_Init+0xe8>)
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 8001748:	23ff      	movs	r3, #255	; 0xff
 800174a:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 800174c:	23ff      	movs	r3, #255	; 0xff
 800174e:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 8001750:	463a      	mov	r2, r7
 8001752:	2302      	movs	r3, #2
 8001754:	2114      	movs	r1, #20
 8001756:	2086      	movs	r0, #134	; 0x86
 8001758:	f000 f96e 	bl	8001a38 <_ExpanderWR>
 800175c:	6078      	str	r0, [r7, #4]

	  if (status)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d11c      	bne.n	800179e <VL53L3A2_Init+0xd2>
	  {
		VL53L3A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 8001764:	23ff      	movs	r3, #255	; 0xff
 8001766:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 8001768:	23bf      	movs	r3, #191	; 0xbf
 800176a:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 800176c:	463a      	mov	r2, r7
 800176e:	2302      	movs	r3, #2
 8001770:	2114      	movs	r1, #20
 8001772:	2084      	movs	r0, #132	; 0x84
 8001774:	f000 f960 	bl	8001a38 <_ExpanderWR>
 8001778:	6078      	str	r0, [r7, #4]

	  if (status)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d110      	bne.n	80017a2 <VL53L3A2_Init+0xd6>
		VL53L3A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <VL53L3A2_Init+0xe8>)
 8001782:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8001786:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 8001788:	f000 f904 	bl	8001994 <_ExpandersSetAllIO>
 800178c:	6078      	str	r0, [r7, #4]
	  {
		VL53L3A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 800178e:	bf00      	nop
 8001790:	e008      	b.n	80017a4 <VL53L3A2_Init+0xd8>
      goto done_err;
 8001792:	bf00      	nop
 8001794:	e006      	b.n	80017a4 <VL53L3A2_Init+0xd8>
      goto done_err;
 8001796:	bf00      	nop
 8001798:	e004      	b.n	80017a4 <VL53L3A2_Init+0xd8>
		  goto done_err;
 800179a:	bf00      	nop
 800179c:	e002      	b.n	80017a4 <VL53L3A2_Init+0xd8>
		goto done_err;
 800179e:	bf00      	nop
 80017a0:	e000      	b.n	80017a4 <VL53L3A2_Init+0xd8>
		goto done_err;
 80017a2:	bf00      	nop
  return status;
 80017a4:	687b      	ldr	r3, [r7, #4]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000130 	.word	0x20000130
 80017b4:	20000134 	.word	0x20000134

080017b8 <VL53L3A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L3A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L3A2_ResetId(uint8_t DevNo, uint8_t state)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	460a      	mov	r2, r1
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	4613      	mov	r3, r2
 80017c6:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d037      	beq.n	800183e <VL53L3A2_ResetId+0x86>
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	dc4e      	bgt.n	8001870 <VL53L3A2_ResetId+0xb8>
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d01a      	beq.n	800180c <VL53L3A2_ResetId+0x54>
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d14a      	bne.n	8001870 <VL53L3A2_ResetId+0xb8>
  {
    case VL53L3A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 80017da:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <VL53L3A2_ResetId+0xcc>)
 80017dc:	78db      	ldrb	r3, [r3, #3]
 80017de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	4b27      	ldr	r3, [pc, #156]	; (8001884 <VL53L3A2_ResetId+0xcc>)
 80017e6:	70da      	strb	r2, [r3, #3]

      if (state)
 80017e8:	79bb      	ldrb	r3, [r7, #6]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <VL53L3A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 80017ee:	4b25      	ldr	r3, [pc, #148]	; (8001884 <VL53L3A2_ResetId+0xcc>)
 80017f0:	78db      	ldrb	r3, [r3, #3]
 80017f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b22      	ldr	r3, [pc, #136]	; (8001884 <VL53L3A2_ResetId+0xcc>)
 80017fa:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 80017fc:	2301      	movs	r3, #1
 80017fe:	4a22      	ldr	r2, [pc, #136]	; (8001888 <VL53L3A2_ResetId+0xd0>)
 8001800:	2113      	movs	r1, #19
 8001802:	2084      	movs	r0, #132	; 0x84
 8001804:	f000 f918 	bl	8001a38 <_ExpanderWR>
 8001808:	60f8      	str	r0, [r7, #12]
      break;
 800180a:	e035      	b.n	8001878 <VL53L3A2_ResetId+0xc0>

    case VL53L3A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 800180c:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <VL53L3A2_ResetId+0xcc>)
 800180e:	785b      	ldrb	r3, [r3, #1]
 8001810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <VL53L3A2_ResetId+0xcc>)
 8001818:	705a      	strb	r2, [r3, #1]

      if (state)
 800181a:	79bb      	ldrb	r3, [r7, #6]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d006      	beq.n	800182e <VL53L3A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <VL53L3A2_ResetId+0xcc>)
 8001822:	785b      	ldrb	r3, [r3, #1]
 8001824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4b16      	ldr	r3, [pc, #88]	; (8001884 <VL53L3A2_ResetId+0xcc>)
 800182c:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800182e:	2301      	movs	r3, #1
 8001830:	4a16      	ldr	r2, [pc, #88]	; (800188c <VL53L3A2_ResetId+0xd4>)
 8001832:	2113      	movs	r1, #19
 8001834:	2086      	movs	r0, #134	; 0x86
 8001836:	f000 f8ff 	bl	8001a38 <_ExpanderWR>
 800183a:	60f8      	str	r0, [r7, #12]
      break;
 800183c:	e01c      	b.n	8001878 <VL53L3A2_ResetId+0xc0>

    case VL53L3A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <VL53L3A2_ResetId+0xcc>)
 8001840:	785b      	ldrb	r3, [r3, #1]
 8001842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <VL53L3A2_ResetId+0xcc>)
 800184a:	705a      	strb	r2, [r3, #1]

      if (state)
 800184c:	79bb      	ldrb	r3, [r7, #6]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <VL53L3A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <VL53L3A2_ResetId+0xcc>)
 8001854:	785b      	ldrb	r3, [r3, #1]
 8001856:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800185a:	b2da      	uxtb	r2, r3
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <VL53L3A2_ResetId+0xcc>)
 800185e:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8001860:	2301      	movs	r3, #1
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <VL53L3A2_ResetId+0xd4>)
 8001864:	2113      	movs	r1, #19
 8001866:	2086      	movs	r0, #134	; 0x86
 8001868:	f000 f8e6 	bl	8001a38 <_ExpanderWR>
 800186c:	60f8      	str	r0, [r7, #12]
      break;
 800186e:	e003      	b.n	8001878 <VL53L3A2_ResetId+0xc0>

    default:
      VL53L3A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
 8001874:	60fb      	str	r3, [r7, #12]
      goto done;
 8001876:	e000      	b.n	800187a <VL53L3A2_ResetId+0xc2>
  if (status)
  {
    VL53L3A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 8001878:	bf00      	nop
  return status;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000134 	.word	0x20000134
 8001888:	20000137 	.word	0x20000137
 800188c:	20000135 	.word	0x20000135

08001890 <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	77bb      	strb	r3, [r7, #30]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 800189a:	4b3b      	ldr	r3, [pc, #236]	; (8001988 <_I2cFailRecover+0xf8>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e06b      	b.n	800197e <_I2cFailRecover+0xee>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <_I2cFailRecover+0xfc>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a37      	ldr	r2, [pc, #220]	; (800198c <_I2cFailRecover+0xfc>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b35      	ldr	r3, [pc, #212]	; (800198c <_I2cFailRecover+0xfc>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = VL53L3A2_I2C_SCL_GPIO_PIN;
 80018c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018c8:	2311      	movs	r3, #17
 80018ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L3A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	4619      	mov	r1, r3
 80018d6:	482e      	ldr	r0, [pc, #184]	; (8001990 <_I2cFailRecover+0x100>)
 80018d8:	f010 fc02 	bl	80120e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L3A2_I2C_SDA_GPIO_PIN;
 80018dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018e2:	2311      	movs	r3, #17
 80018e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L3A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 80018ea:	f107 0308 	add.w	r3, r7, #8
 80018ee:	4619      	mov	r1, r3
 80018f0:	4827      	ldr	r0, [pc, #156]	; (8001990 <_I2cFailRecover+0x100>)
 80018f2:	f010 fbf5 	bl	80120e0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80018f6:	2201      	movs	r2, #1
 80018f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018fc:	4824      	ldr	r0, [pc, #144]	; (8001990 <_I2cFailRecover+0x100>)
 80018fe:	f010 fe6f 	bl	80125e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L3A2_I2C_SDA_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 8001902:	2201      	movs	r2, #1
 8001904:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001908:	4821      	ldr	r0, [pc, #132]	; (8001990 <_I2cFailRecover+0x100>)
 800190a:	f010 fe69 	bl	80125e0 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 800190e:	2300      	movs	r3, #0
 8001910:	77fb      	strb	r3, [r7, #31]
 8001912:	e014      	b.n	800193e <_I2cFailRecover+0xae>
    {
      HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 8001914:	2200      	movs	r2, #0
 8001916:	f44f 7180 	mov.w	r1, #256	; 0x100
 800191a:	481d      	ldr	r0, [pc, #116]	; (8001990 <_I2cFailRecover+0x100>)
 800191c:	f010 fe60 	bl	80125e0 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001920:	2001      	movs	r0, #1
 8001922:	f010 fad3 	bl	8011ecc <HAL_Delay>
      HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8001926:	2201      	movs	r2, #1
 8001928:	f44f 7180 	mov.w	r1, #256	; 0x100
 800192c:	4818      	ldr	r0, [pc, #96]	; (8001990 <_I2cFailRecover+0x100>)
 800192e:	f010 fe57 	bl	80125e0 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001932:	2001      	movs	r0, #1
 8001934:	f010 faca 	bl	8011ecc <HAL_Delay>
    for (i = 0; i < 10U; i++)
 8001938:	7ffb      	ldrb	r3, [r7, #31]
 800193a:	3301      	adds	r3, #1
 800193c:	77fb      	strb	r3, [r7, #31]
 800193e:	7ffb      	ldrb	r3, [r7, #31]
 8001940:	2b09      	cmp	r3, #9
 8001942:	d9e7      	bls.n	8001914 <_I2cFailRecover+0x84>
    }
    retry_cnt++;
 8001944:	7fbb      	ldrb	r3, [r7, #30]
 8001946:	3301      	adds	r3, #1
 8001948:	77bb      	strb	r3, [r7, #30]
  } while ((HAL_GPIO_ReadPin(VL53L3A2_I2C_SDA_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 800194a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800194e:	4810      	ldr	r0, [pc, #64]	; (8001990 <_I2cFailRecover+0x100>)
 8001950:	f010 fe2e 	bl	80125b0 <HAL_GPIO_ReadPin>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <_I2cFailRecover+0xd0>
 800195a:	7fbb      	ldrb	r3, [r7, #30]
 800195c:	2b06      	cmp	r3, #6
 800195e:	d9d6      	bls.n	800190e <_I2cFailRecover+0x7e>

  if (HAL_GPIO_ReadPin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 8001960:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001964:	480a      	ldr	r0, [pc, #40]	; (8001990 <_I2cFailRecover+0x100>)
 8001966:	f010 fe23 	bl	80125b0 <HAL_GPIO_ReadPin>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d102      	bne.n	8001976 <_I2cFailRecover+0xe6>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8001970:	f06f 0304 	mvn.w	r3, #4
 8001974:	e003      	b.n	800197e <_I2cFailRecover+0xee>
  }

  is_already_init = 1U;
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <_I2cFailRecover+0xf8>)
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3720      	adds	r7, #32
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000138 	.word	0x20000138
 800198c:	40023800 	.word	0x40023800
 8001990:	40020400 	.word	0x40020400

08001994 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 800199a:	2302      	movs	r3, #2
 800199c:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <_ExpandersSetAllIO+0x38>)
 800199e:	2112      	movs	r1, #18
 80019a0:	2086      	movs	r0, #134	; 0x86
 80019a2:	f000 f849 	bl	8001a38 <_ExpanderWR>
 80019a6:	6078      	str	r0, [r7, #4]

  if (status)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d107      	bne.n	80019be <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 80019ae:	2302      	movs	r3, #2
 80019b0:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <_ExpandersSetAllIO+0x3c>)
 80019b2:	2112      	movs	r1, #18
 80019b4:	2084      	movs	r0, #132	; 0x84
 80019b6:	f000 f83f 	bl	8001a38 <_ExpanderWR>
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	e000      	b.n	80019c0 <_ExpandersSetAllIO+0x2c>
    goto done_err;
 80019be:	bf00      	nop

done_err:
  return status;
 80019c0:	687b      	ldr	r3, [r7, #4]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000134 	.word	0x20000134
 80019d0:	20000136 	.word	0x20000136

080019d4 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af02      	add	r7, sp, #8
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
 80019e0:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	74fb      	strb	r3, [r7, #19]
  VL53L3A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L3A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	b299      	uxth	r1, r3
 80019ec:	f107 0213 	add.w	r2, r7, #19
 80019f0:	2364      	movs	r3, #100	; 0x64
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2301      	movs	r3, #1
 80019f6:	480f      	ldr	r0, [pc, #60]	; (8001a34 <_ExpanderRd+0x60>)
 80019f8:	f010 ff94 	bl	8012924 <HAL_I2C_Master_Transmit>
 80019fc:	4603      	mov	r3, r0
 80019fe:	617b      	str	r3, [r7, #20]

    if (status)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d110      	bne.n	8001a28 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L3A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	b299      	uxth	r1, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2064      	movs	r0, #100	; 0x64
 8001a12:	fb00 f303 	mul.w	r3, r0, r3
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4805      	ldr	r0, [pc, #20]	; (8001a34 <_ExpanderRd+0x60>)
 8001a1e:	f011 f87f 	bl	8012b20 <HAL_I2C_Master_Receive>
 8001a22:	4603      	mov	r3, r0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	e000      	b.n	8001a2a <_ExpanderRd+0x56>
      break;
 8001a28:	bf00      	nop
  } while (0);

  VL53L3A2_PutI2cBus();

  return status;
 8001a2a:	697b      	ldr	r3, [r7, #20]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	2000719c 	.word	0x2000719c

08001a38 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08c      	sub	sp, #48	; 0x30
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	3301      	adds	r3, #1
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f013 faba 	bl	8014fd0 <memcpy>

  VL53L3A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L3A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	b299      	uxth	r1, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	3301      	adds	r3, #1
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	f107 0214 	add.w	r2, r7, #20
 8001a6c:	2064      	movs	r0, #100	; 0x64
 8001a6e:	9000      	str	r0, [sp, #0]
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <_ExpanderWR+0x4c>)
 8001a72:	f010 ff57 	bl	8012924 <HAL_I2C_Master_Transmit>
 8001a76:	4603      	mov	r3, r0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L3A2_PutI2cBus();

  return status;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2000719c 	.word	0x2000719c

08001a88 <VL53L3A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d903      	bls.n	8001a9e <VL53L3A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a96:	f06f 0301 	mvn.w	r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	e014      	b.n	8001ac8 <VL53L3A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L3A2_Init() != 0)
 8001a9e:	f7ff fe15 	bl	80016cc <VL53L3A2_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <VL53L3A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8001aa8:	f06f 0303 	mvn.w	r3, #3
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	e00b      	b.n	8001ac8 <VL53L3A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L3A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f8fc 	bl	8001cb0 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L3A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 8001ab8:	2100      	movs	r1, #0
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f8f8 	bl	8001cb0 <VL53L3A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L3CX_Probe(Instance);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f935 	bl	8001d30 <VL53L3CX_Probe>
 8001ac6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <VL53L3A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d903      	bls.n	8001aec <VL53L3A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ae4:	f06f 0301 	mvn.w	r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	e012      	b.n	8001b12 <VL53L3A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->ReadID(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <VL53L3A2_RANGING_SENSOR_ReadID+0x48>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	490b      	ldr	r1, [pc, #44]	; (8001b20 <VL53L3A2_RANGING_SENSOR_ReadID+0x4c>)
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001afa:	6839      	ldr	r1, [r7, #0]
 8001afc:	4610      	mov	r0, r2
 8001afe:	4798      	blx	r3
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	da03      	bge.n	8001b0e <VL53L3A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b06:	f06f 0304 	mvn.w	r3, #4
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	e001      	b.n	8001b12 <VL53L3A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000148 	.word	0x20000148
 8001b20:	2000013c 	.word	0x2000013c

08001b24 <VL53L3A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d903      	bls.n	8001b3c <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b34:	f06f 0301 	mvn.w	r3, #1
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	e012      	b.n	8001b62 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x48>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	490b      	ldr	r1, [pc, #44]	; (8001b70 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b4a:	6839      	ldr	r1, [r7, #0]
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4798      	blx	r3
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	da03      	bge.n	8001b5e <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b56:	f06f 0304 	mvn.w	r3, #4
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	e001      	b.n	8001b62 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000148 	.word	0x20000148
 8001b70:	2000013c 	.word	0x2000013c

08001b74 <VL53L3A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d903      	bls.n	8001b8c <VL53L3A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b84:	f06f 0301 	mvn.w	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	e012      	b.n	8001bb2 <VL53L3A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->GetDistance(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <VL53L3A2_RANGING_SENSOR_GetDistance+0x48>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	490b      	ldr	r1, [pc, #44]	; (8001bc0 <VL53L3A2_RANGING_SENSOR_GetDistance+0x4c>)
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b9a:	6839      	ldr	r1, [r7, #0]
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4798      	blx	r3
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	da03      	bge.n	8001bae <VL53L3A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001ba6:	f06f 0304 	mvn.w	r3, #4
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	e001      	b.n	8001bb2 <VL53L3A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000148 	.word	0x20000148
 8001bc0:	2000013c 	.word	0x2000013c

08001bc4 <VL53L3A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d903      	bls.n	8001bdc <VL53L3A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001bd4:	f06f 0301 	mvn.w	r3, #1
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	e012      	b.n	8001c02 <VL53L3A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->Start(VL53L3A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <VL53L3A2_RANGING_SENSOR_Start+0x48>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	490b      	ldr	r1, [pc, #44]	; (8001c10 <VL53L3A2_RANGING_SENSOR_Start+0x4c>)
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001bea:	6839      	ldr	r1, [r7, #0]
 8001bec:	4610      	mov	r0, r2
 8001bee:	4798      	blx	r3
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	da03      	bge.n	8001bfe <VL53L3A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001bf6:	f06f 0304 	mvn.w	r3, #4
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	e001      	b.n	8001c02 <VL53L3A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001c02:	68fb      	ldr	r3, [r7, #12]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000148 	.word	0x20000148
 8001c10:	2000013c 	.word	0x2000013c

08001c14 <VL53L3A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d903      	bls.n	8001c2a <VL53L3A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c22:	f06f 0301 	mvn.w	r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	e011      	b.n	8001c4e <VL53L3A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->Stop(VL53L3A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <VL53L3A2_RANGING_SENSOR_Stop+0x44>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	490a      	ldr	r1, [pc, #40]	; (8001c5c <VL53L3A2_RANGING_SENSOR_Stop+0x48>)
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4798      	blx	r3
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	da03      	bge.n	8001c4a <VL53L3A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001c42:	f06f 0304 	mvn.w	r3, #4
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	e001      	b.n	8001c4e <VL53L3A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000148 	.word	0x20000148
 8001c5c:	2000013c 	.word	0x2000013c

08001c60 <VL53L3A2_RANGING_SENSOR_SetAddress>:
  * @param Instance    Ranging sensor instance.
  * @param Address     New I2C address.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_SetAddress(uint32_t Instance, uint32_t Address)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d903      	bls.n	8001c78 <VL53L3A2_RANGING_SENSOR_SetAddress+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c70:	f06f 0301 	mvn.w	r3, #1
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	e012      	b.n	8001c9e <VL53L3A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->SetAddress(VL53L3A2_RANGING_SENSOR_CompObj[Instance], Address) < 0)
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <VL53L3A2_RANGING_SENSOR_SetAddress+0x48>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	490b      	ldr	r1, [pc, #44]	; (8001cac <VL53L3A2_RANGING_SENSOR_SetAddress+0x4c>)
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c86:	6839      	ldr	r1, [r7, #0]
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4798      	blx	r3
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	da03      	bge.n	8001c9a <VL53L3A2_RANGING_SENSOR_SetAddress+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001c92:	f06f 0304 	mvn.w	r3, #4
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	e001      	b.n	8001c9e <VL53L3A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000148 	.word	0x20000148
 8001cac:	2000013c 	.word	0x2000013c

08001cb0 <VL53L3A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d903      	bls.n	8001cc8 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001cc0:	f06f 0301 	mvn.w	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	e02e      	b.n	8001d26 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d112      	bne.n	8001cf4 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L3A2_ResetId((uint8_t)Instance, 1) < 0)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fd6f 	bl	80017b8 <VL53L3A2_ResetId>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	da03      	bge.n	8001ce8 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001ce0:	f06f 0303 	mvn.w	r3, #3
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	e01e      	b.n	8001d26 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001ce8:	2002      	movs	r0, #2
 8001cea:	f010 f8ef 	bl	8011ecc <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	e018      	b.n	8001d26 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d112      	bne.n	8001d20 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L3A2_ResetId((uint8_t)Instance, 0) < 0)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fd59 	bl	80017b8 <VL53L3A2_ResetId>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	da03      	bge.n	8001d14 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001d0c:	f06f 0303 	mvn.w	r3, #3
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	e008      	b.n	8001d26 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001d14:	2002      	movs	r0, #2
 8001d16:	f010 f8d9 	bl	8011ecc <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	e002      	b.n	8001d26 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d20:	f06f 0301 	mvn.w	r3, #1
 8001d24:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <VL53L3CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L3CX_Probe(uint32_t Instance)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  VL53L3CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L3CX_Object_t   VL53L3CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L3CX_ADDRESS;
 8001d38:	2352      	movs	r3, #82	; 0x52
 8001d3a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L3A2_I2C_Init;
 8001d3c:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <VL53L3CX_Probe+0xf0>)
 8001d3e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L3A2_I2C_DeInit;
 8001d40:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <VL53L3CX_Probe+0xf4>)
 8001d42:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L3A2_I2C_WriteReg;
 8001d44:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <VL53L3CX_Probe+0xf8>)
 8001d46:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L3A2_I2C_ReadReg;
 8001d48:	4b38      	ldr	r3, [pc, #224]	; (8001e2c <VL53L3CX_Probe+0xfc>)
 8001d4a:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L3A2_GetTick;
 8001d4c:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <VL53L3CX_Probe+0x100>)
 8001d4e:	623b      	str	r3, [r7, #32]

  if (VL53L3CX_RegisterBusIO(&(VL53L3CXObj[Instance]), &IOCtx) != VL53L3CX_OK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f242 42f0 	movw	r2, #9456	; 0x24f0
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	4a36      	ldr	r2, [pc, #216]	; (8001e34 <VL53L3CX_Probe+0x104>)
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f107 020c 	add.w	r2, r7, #12
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f00f fbf2 	bl	801154e <VL53L3CX_RegisterBusIO>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <VL53L3CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001d70:	f06f 0304 	mvn.w	r3, #4
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
 8001d76:	e04d      	b.n	8001e14 <VL53L3CX_Probe+0xe4>
  }
  else if (VL53L3CX_ReadID(&(VL53L3CXObj[Instance]), &id) != VL53L3CX_OK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f242 42f0 	movw	r2, #9456	; 0x24f0
 8001d7e:	fb02 f303 	mul.w	r3, r2, r3
 8001d82:	4a2c      	ldr	r2, [pc, #176]	; (8001e34 <VL53L3CX_Probe+0x104>)
 8001d84:	4413      	add	r3, r2
 8001d86:	f107 0208 	add.w	r2, r7, #8
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f00f fc90 	bl	80116b2 <VL53L3CX_ReadID>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <VL53L3CX_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001d98:	f06f 0304 	mvn.w	r3, #4
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9e:	e039      	b.n	8001e14 <VL53L3CX_Probe+0xe4>
  }
  else
  {
    if (id != VL53L3CX_ID)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f64e 22aa 	movw	r2, #60074	; 0xeaaa
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d003      	beq.n	8001db2 <VL53L3CX_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001daa:	f06f 0306 	mvn.w	r3, #6
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
 8001db0:	e030      	b.n	8001e14 <VL53L3CX_Probe+0xe4>
    }
    else
    {
      VL53L3A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L3CX_RANGING_SENSOR_Driver;
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <VL53L3CX_Probe+0x108>)
 8001db4:	4a21      	ldr	r2, [pc, #132]	; (8001e3c <VL53L3CX_Probe+0x10c>)
 8001db6:	601a      	str	r2, [r3, #0]
      VL53L3A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L3CXObj[Instance]);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f242 42f0 	movw	r2, #9456	; 0x24f0
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	4a1c      	ldr	r2, [pc, #112]	; (8001e34 <VL53L3CX_Probe+0x104>)
 8001dc4:	441a      	add	r2, r3
 8001dc6:	491e      	ldr	r1, [pc, #120]	; (8001e40 <VL53L3CX_Probe+0x110>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L3A2_RANGING_SENSOR_Drv->Init(VL53L3A2_RANGING_SENSOR_CompObj[Instance]) != VL53L3CX_OK)
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <VL53L3CX_Probe+0x108>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	491a      	ldr	r1, [pc, #104]	; (8001e40 <VL53L3CX_Probe+0x110>)
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4798      	blx	r3
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <VL53L3CX_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001de6:	f06f 0304 	mvn.w	r3, #4
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
 8001dec:	e012      	b.n	8001e14 <VL53L3CX_Probe+0xe4>
      }
      else if (VL53L3A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L3A2_RANGING_SENSOR_CompObj[Instance], &VL53L3A2_RANGING_SENSOR_Cap) != VL53L3CX_OK)
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <VL53L3CX_Probe+0x108>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4912      	ldr	r1, [pc, #72]	; (8001e40 <VL53L3CX_Probe+0x110>)
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001dfc:	4911      	ldr	r1, [pc, #68]	; (8001e44 <VL53L3CX_Probe+0x114>)
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4798      	blx	r3
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <VL53L3CX_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001e08:	f06f 0304 	mvn.w	r3, #4
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0e:	e001      	b.n	8001e14 <VL53L3CX_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3728      	adds	r7, #40	; 0x28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	0800126d 	.word	0x0800126d
 8001e24:	080012d1 	.word	0x080012d1
 8001e28:	08001321 	.word	0x08001321
 8001e2c:	08001375 	.word	0x08001375
 8001e30:	080013c9 	.word	0x080013c9
 8001e34:	20000160 	.word	0x20000160
 8001e38:	20000148 	.word	0x20000148
 8001e3c:	20000048 	.word	0x20000048
 8001e40:	2000013c 	.word	0x2000013c
 8001e44:	2000014c 	.word	0x2000014c

08001e48 <VL53LX_SetDeviceAddress>:
}



VL53LX_Error VL53LX_SetDeviceAddress(VL53LX_DEV Dev, uint8_t DeviceAddress)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3318      	adds	r3, #24
 8001e5c:	613b      	str	r3, [r7, #16]
	VL53LX_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8001e64:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53LX_WrByte(Dev, VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	085b      	lsrs	r3, r3, #1
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	2101      	movs	r1, #1
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f00f f98b 	bl	801118c <VL53LX_WrByte>
 8001e76:	4603      	mov	r3, r0
 8001e78:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	085b      	lsrs	r3, r3, #1
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001e8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <VL53LX_DataInit>:


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 8001ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d105      	bne.n	8001eb6 <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 8001eaa:	2101      	movs	r1, #1
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f001 fcba 	bl	8003826 <VL53LX_data_init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 8001eb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d107      	bne.n	8001ece <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 8001ebe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ec2:	2102      	movs	r1, #2
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f887 	bl	8001fd8 <SetPresetModeL3CX>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 8001ece:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d106      	bne.n	8001ee4 <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001ed6:	f248 2135 	movw	r1, #33333	; 0x8235
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f980 	bl	80021e0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 8001ee4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10a      	bne.n	8001f02 <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3318      	adds	r3, #24
 8001ef0:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8001ef8:	220c      	movs	r2, #12
 8001efa:	2100      	movs	r1, #0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f013 f875 	bl	8014fec <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001f02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d105      	bne.n	8001f16 <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 8001f0a:	2102      	movs	r1, #2
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f003 fdb0 	bl	8005a72 <VL53LX_set_dmax_mode>
 8001f12:	4603      	mov	r3, r0
 8001f14:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 8001f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d105      	bne.n	8001f2a <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 8001f1e:	2100      	movs	r1, #0
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 ff41 	bl	8002da8 <VL53LX_SmudgeCorrectionEnable>
 8001f26:	4603      	mov	r3, r0
 8001f28:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001f2a:	2320      	movs	r3, #32
 8001f2c:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	76da      	strb	r2, [r3, #27]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8001f3a:	3320      	adds	r3, #32
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	701a      	strb	r2, [r3, #0]
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 8001f40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 8001f58:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f00e fd5c 	bl	8010a1a <VL53LX_poll_for_boot_completion>
 8001f62:	4603      	mov	r3, r0
 8001f64:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	6039      	str	r1, [r7, #0]
 8001f7e:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 8001f84:	4a13      	ldr	r2, [pc, #76]	; (8001fd4 <ComputeDevicePresetMode+0x60>)
 8001f86:	f107 0308 	add.w	r3, r7, #8
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	8019      	strh	r1, [r3, #0]
 8001f90:	3302      	adds	r3, #2
 8001f92:	0c12      	lsrs	r2, r2, #16
 8001f94:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d002      	beq.n	8001fa2 <ComputeDevicePresetMode+0x2e>
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d003      	beq.n	8001fa8 <ComputeDevicePresetMode+0x34>
 8001fa0:	e005      	b.n	8001fae <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73fb      	strb	r3, [r7, #15]
		break;
 8001fa6:	e004      	b.n	8001fb2 <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
		break;
 8001fac:	e001      	b.n	8001fb2 <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	f107 0210 	add.w	r2, r7, #16
 8001fb8:	4413      	add	r3, r2
 8001fba:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	701a      	strb	r2, [r3, #0]

	return Status;
 8001fc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	08016190 	.word	0x08016190

08001fd8 <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001fd8:	b5b0      	push	{r4, r5, r7, lr}
 8001fda:	b08e      	sub	sp, #56	; 0x38
 8001fdc:	af04      	add	r7, sp, #16
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001ffc:	2320      	movs	r3, #32
 8001ffe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 8002002:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8002006:	7afb      	ldrb	r3, [r7, #11]
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ffb2 	bl	8001f74 <ComputeDevicePresetMode>
 8002010:	4603      	mov	r3, r0
 8002012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 8002016:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800201a:	2b00      	cmp	r3, #0
 800201c:	d112      	bne.n	8002044 <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 800201e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002022:	f107 001c 	add.w	r0, r7, #28
 8002026:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	f107 0318 	add.w	r3, r7, #24
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	4603      	mov	r3, r0
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f002 f859 	bl	80040f0 <VL53LX_get_preset_mode_timing_cfg>
 800203e:	4603      	mov	r3, r0
 8002040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 8002044:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002048:	2b00      	cmp	r3, #0
 800204a:	d112      	bne.n	8002072 <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 800204c:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8002050:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8002052:	69fd      	ldr	r5, [r7, #28]
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	9102      	str	r1, [sp, #8]
 800205c:	9201      	str	r2, [sp, #4]
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	462b      	mov	r3, r5
 8002062:	4622      	mov	r2, r4
 8002064:	4601      	mov	r1, r0
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f002 f8a3 	bl	80041b2 <VL53LX_set_preset_mode>
 800206c:	4603      	mov	r3, r0
 800206e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8002072:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002076:	2b00      	cmp	r3, #0
 8002078:	d103      	bne.n	8002082 <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002080:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002082:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002086:	4618      	mov	r0, r3
 8002088:	3728      	adds	r7, #40	; 0x28
 800208a:	46bd      	mov	sp, r7
 800208c:	bdb0      	pop	{r4, r5, r7, pc}

0800208e <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 800208e:	b480      	push	{r7}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3318      	adds	r3, #24
 800209e:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f893 3393 	ldrb.w	r3, [r3, #915]	; 0x393
 80020a6:	2baa      	cmp	r3, #170	; 0xaa
 80020a8:	d106      	bne.n	80020b8 <IsL4+0x2a>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f893 3392 	ldrb.w	r3, [r3, #914]	; 0x392
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 80020b0:	2beb      	cmp	r3, #235	; 0xeb
 80020b2:	d101      	bne.n	80020b8 <IsL4+0x2a>
		devL4 = 1;
 80020b4:	2301      	movs	r3, #1
 80020b6:	60fb      	str	r3, [r7, #12]
	return devL4;
 80020b8:	68fb      	ldr	r3, [r7, #12]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <CheckValidRectRoi>:

static VL53LX_Error CheckValidRectRoi(VL53LX_UserRoi_t ROI)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b085      	sub	sp, #20
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 80020d2:	793b      	ldrb	r3, [r7, #4]
 80020d4:	2b0f      	cmp	r3, #15
 80020d6:	d808      	bhi.n	80020ea <CheckValidRectRoi+0x24>
 80020d8:	797b      	ldrb	r3, [r7, #5]
 80020da:	2b0f      	cmp	r3, #15
 80020dc:	d805      	bhi.n	80020ea <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 80020de:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 80020e0:	2b0f      	cmp	r3, #15
 80020e2:	d802      	bhi.n	80020ea <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	d901      	bls.n	80020ee <CheckValidRectRoi+0x28>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80020ea:	23fc      	movs	r3, #252	; 0xfc
 80020ec:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 80020ee:	793a      	ldrb	r2, [r7, #4]
 80020f0:	79bb      	ldrb	r3, [r7, #6]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d803      	bhi.n	80020fe <CheckValidRectRoi+0x38>
 80020f6:	797a      	ldrb	r2, [r7, #5]
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d201      	bcs.n	8002102 <CheckValidRectRoi+0x3c>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80020fe:	23fc      	movs	r3, #252	; 0xfc
 8002100:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002102:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <VL53LX_SetDistanceMode>:


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b088      	sub	sp, #32
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	460b      	mov	r3, r1
 800211c:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800211e:	2300      	movs	r3, #0
 8002120:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d008      	beq.n	8002146 <VL53LX_SetDistanceMode+0x34>
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d005      	beq.n	8002146 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d002      	beq.n	8002146 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 8002140:	f06f 0303 	mvn.w	r3, #3
 8002144:	e048      	b.n	80021d8 <VL53LX_SetDistanceMode+0xc6>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ffa1 	bl	800208e <IsL4>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <VL53LX_SetDistanceMode+0x4c>
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d102      	bne.n	800215e <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 8002158:	f06f 0303 	mvn.w	r3, #3
 800215c:	e03c      	b.n	80021d8 <VL53LX_SetDistanceMode+0xc6>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8002164:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10a      	bne.n	8002182 <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	f107 0210 	add.w	r2, r7, #16
 8002174:	f107 010c 	add.w	r1, r7, #12
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f001 fe92 	bl	8003ea2 <VL53LX_get_timeouts_us>
 800217e:	4603      	mov	r3, r0
 8002180:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 8002182:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d107      	bne.n	800219a <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4619      	mov	r1, r3
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff21 	bl	8001fd8 <SetPresetModeL3CX>
 8002196:	4603      	mov	r3, r0
 8002198:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 800219a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d105      	bne.n	80021ae <VL53LX_SetDistanceMode+0x9c>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80021a8:	3320      	adds	r3, #32
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	701a      	strb	r2, [r3, #0]
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 80021ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10e      	bne.n	80021d4 <VL53LX_SetDistanceMode+0xc2>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80021b6:	68f9      	ldr	r1, [r7, #12]
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f001 fe37 	bl	8003e30 <VL53LX_set_timeouts_us>
 80021c2:	4603      	mov	r3, r0
 80021c4:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 80021c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <VL53LX_SetDistanceMode+0xc2>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80021d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3720      	adds	r7, #32
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80021fc:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 80021fe:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4a31      	ldr	r2, [pc, #196]	; (80022c8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d902      	bls.n	800220e <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002208:	23fc      	movs	r3, #252	; 0xfc
 800220a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53LX_ERROR_NONE)
 800220e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10b      	bne.n	800222e <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	f107 0210 	add.w	r2, r7, #16
 800221e:	f107 010c 	add.w	r1, r7, #12
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f001 fe3d 	bl	8003ea2 <VL53LX_get_timeouts_us>
 8002228:	4603      	mov	r3, r0
 800222a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 800222e:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8002232:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 8002234:	2306      	movs	r3, #6
 8002236:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ff28 	bl	800208e <IsL4>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 8002244:	4b21      	ldr	r3, [pc, #132]	; (80022cc <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 8002246:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	429a      	cmp	r2, r3
 800224e:	d803      	bhi.n	8002258 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002250:	23fc      	movs	r3, #252	; 0xfc
 8002252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002256:	e003      	b.n	8002260 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 800225e:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 8002260:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002264:	2b00      	cmp	r3, #0
 8002266:	d11c      	bne.n	80022a2 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	6a3a      	ldr	r2, [r7, #32]
 800226c:	429a      	cmp	r2, r3
 800226e:	d203      	bcs.n	8002278 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 8002270:	23fc      	movs	r3, #252	; 0xfc
 8002272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002276:	e00d      	b.n	8002294 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 8002282:	68f9      	ldr	r1, [r7, #12]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f001 fdd1 	bl	8003e30 <VL53LX_set_timeouts_us>
 800228e:	4603      	mov	r3, r0
 8002290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 8002294:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	629a      	str	r2, [r3, #40]	; 0x28
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 80022a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d105      	bne.n	80022b6 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd6>
		VL53LXDevDataSet(Dev,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80022b0:	3324      	adds	r3, #36	; 0x24
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	601a      	str	r2, [r3, #0]
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80022b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3728      	adds	r7, #40	; 0x28
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	00086470 	.word	0x00086470
 80022c8:	00989680 	.word	0x00989680
 80022cc:	00030d40 	.word	0x00030d40

080022d0 <VL53LX_SetUserROI>:



VL53LX_Error VL53LX_SetUserROI(VL53LX_DEV Dev,
		VL53LX_UserRoi_t *pRoi)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b092      	sub	sp, #72	; 0x48
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80022da:	2300      	movs	r3, #0
 80022dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53LX_zone_config_t  zone_cfg;
	uint8_t x_centre, y_centre, width, height;

	Status = CheckValidRectRoi(*pRoi);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2300      	movs	r3, #0
 80022e6:	4613      	mov	r3, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff feec 	bl	80020c6 <CheckValidRectRoi>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (Status != VL53LX_ERROR_NONE)
 80022f4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <VL53LX_SetUserROI+0x32>
		return VL53LX_ERROR_INVALID_PARAMS;
 80022fc:	f06f 0303 	mvn.w	r3, #3
 8002300:	e050      	b.n	80023a4 <VL53LX_SetUserROI+0xd4>

	x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	789b      	ldrb	r3, [r3, #2]
 8002306:	461a      	mov	r2, r3
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	4413      	add	r3, r2
 800230e:	3301      	adds	r3, #1
 8002310:	0fda      	lsrs	r2, r3, #31
 8002312:	4413      	add	r3, r2
 8002314:	105b      	asrs	r3, r3, #1
 8002316:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	785b      	ldrb	r3, [r3, #1]
 800231e:	461a      	mov	r2, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	78db      	ldrb	r3, [r3, #3]
 8002324:	4413      	add	r3, r2
 8002326:	3301      	adds	r3, #1
 8002328:	0fda      	lsrs	r2, r3, #31
 800232a:	4413      	add	r3, r2
 800232c:	105b      	asrs	r3, r3, #1
 800232e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	width =    (pRoi->BotRightX - pRoi->TopLeftX);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	789a      	ldrb	r2, [r3, #2]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	785a      	ldrb	r2, [r3, #1]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	78db      	ldrb	r3, [r3, #3]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	zone_cfg.max_zones = 1;
 800234e:	2301      	movs	r3, #1
 8002350:	733b      	strb	r3, [r7, #12]
	zone_cfg.active_zones = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	737b      	strb	r3, [r7, #13]
	zone_cfg.user_zones[0].x_centre = x_centre;
 8002356:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800235a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	zone_cfg.user_zones[0].y_centre = y_centre;
 800235e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002362:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	zone_cfg.user_zones[0].width = width;
 8002366:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800236a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	zone_cfg.user_zones[0].height = height;
 800236e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if ((width < 3) || (height < 3))
 8002376:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800237a:	2b02      	cmp	r3, #2
 800237c:	d903      	bls.n	8002386 <VL53LX_SetUserROI+0xb6>
 800237e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002382:	2b02      	cmp	r3, #2
 8002384:	d803      	bhi.n	800238e <VL53LX_SetUserROI+0xbe>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002386:	23fc      	movs	r3, #252	; 0xfc
 8002388:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800238c:	e008      	b.n	80023a0 <VL53LX_SetUserROI+0xd0>
	else
		Status =  VL53LX_set_zone_config(Dev, &zone_cfg);
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	4619      	mov	r1, r3
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f001 fe68 	bl	800406a <VL53LX_set_zone_config>
 800239a:	4603      	mov	r3, r0
 800239c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	LOG_FUNCTION_END(Status);
	return Status;
 80023a0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3748      	adds	r7, #72	; 0x48
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3318      	adds	r3, #24
 80023bc:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f001 f90c 	bl	80035dc <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80023c4:	2300      	movs	r3, #0
 80023c6:	75bb      	strb	r3, [r7, #22]
 80023c8:	e01a      	b.n	8002400 <VL53LX_StartMeasurement+0x54>
		pdev->PreviousRangeMilliMeter[i] = 0;
 80023ca:	7dbb      	ldrb	r3, [r7, #22]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80023d2:	3308      	adds	r3, #8
 80023d4:	2100      	movs	r1, #0
 80023d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 80023da:	7dbb      	ldrb	r3, [r7, #22]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80023e4:	3318      	adds	r3, #24
 80023e6:	22ff      	movs	r2, #255	; 0xff
 80023e8:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 80023ea:	7dbb      	ldrb	r3, [r7, #22]
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80023f4:	331c      	adds	r3, #28
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80023fa:	7dbb      	ldrb	r3, [r7, #22]
 80023fc:	3301      	adds	r3, #1
 80023fe:	75bb      	strb	r3, [r7, #22]
 8002400:	7dbb      	ldrb	r3, [r7, #22]
 8002402:	2b03      	cmp	r3, #3
 8002404:	d9e1      	bls.n	80023ca <VL53LX_StartMeasurement+0x1e>
	}
	pdev->PreviousStreamCount = 0;
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800240c:	3321      	adds	r3, #33	; 0x21
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = 0;
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002418:	3320      	adds	r3, #32
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	7edb      	ldrb	r3, [r3, #27]
 8002422:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 8002424:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d107      	bne.n	800243c <VL53LX_StartMeasurement+0x90>
		Status = VL53LX_init_and_start_range(
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	2206      	movs	r2, #6
 8002430:	4619      	mov	r1, r3
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f001 ff80 	bl	8004338 <VL53LX_init_and_start_range>
 8002438:	4603      	mov	r3, r0
 800243a:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 800243c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <VL53LX_StopMeasurement>:

VL53LX_Error VL53LX_StopMeasurement(VL53LX_DEV Dev)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_stop_range(Dev);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f002 f9f9 	bl	800484c <VL53LX_stop_range>
 800245a:	4603      	mov	r3, r0
 800245c:	73fb      	strb	r3, [r7, #15]

	VL53LX_unload_patch(Dev);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f001 f9ac 	bl	80037bc <VL53LX_unload_patch>

	LOG_FUNCTION_END(Status);
	return Status;
 8002464:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <VL53LX_ClearInterruptAndStartMeasurement>:


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7edb      	ldrb	r3, [r3, #27]
 8002480:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 8002482:	7bbb      	ldrb	r3, [r7, #14]
 8002484:	4619      	mov	r1, r3
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f002 fedc 	bl	8005244 <VL53LX_clear_interrupt_and_enable_next_range>
 800248c:	4603      	mov	r3, r0
 800248e:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002490:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <VL53LX_GetMeasurementDataReady>:


VL53LX_Error VL53LX_GetMeasurementDataReady(VL53LX_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_is_new_data_ready(Dev, pMeasurementDataReady);
 80024aa:	6839      	ldr	r1, [r7, #0]
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f00e fa7a 	bl	80109a6 <VL53LX_is_new_data_ready>
 80024b2:	4603      	mov	r3, r0
 80024b4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80024b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <ConvertStatusHisto>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	3b05      	subs	r3, #5
 80024d2:	2b12      	cmp	r3, #18
 80024d4:	d840      	bhi.n	8002558 <ConvertStatusHisto+0x94>
 80024d6:	a201      	add	r2, pc, #4	; (adr r2, 80024dc <ConvertStatusHisto+0x18>)
 80024d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024dc:	08002529 	.word	0x08002529
 80024e0:	0800252f 	.word	0x0800252f
 80024e4:	0800253b 	.word	0x0800253b
 80024e8:	08002559 	.word	0x08002559
 80024ec:	08002553 	.word	0x08002553
 80024f0:	08002559 	.word	0x08002559
 80024f4:	08002559 	.word	0x08002559
 80024f8:	08002559 	.word	0x08002559
 80024fc:	08002559 	.word	0x08002559
 8002500:	08002559 	.word	0x08002559
 8002504:	08002559 	.word	0x08002559
 8002508:	08002559 	.word	0x08002559
 800250c:	08002559 	.word	0x08002559
 8002510:	08002559 	.word	0x08002559
 8002514:	08002535 	.word	0x08002535
 8002518:	08002547 	.word	0x08002547
 800251c:	08002559 	.word	0x08002559
 8002520:	0800254d 	.word	0x0800254d
 8002524:	08002541 	.word	0x08002541
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002528:	2304      	movs	r3, #4
 800252a:	73fb      	strb	r3, [r7, #15]
		break;
 800252c:	e016      	b.n	800255c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 800252e:	2301      	movs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
		break;
 8002532:	e013      	b.n	800255c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 8002534:	2306      	movs	r3, #6
 8002536:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 8002538:	e010      	b.n	800255c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 800253a:	2307      	movs	r3, #7
 800253c:	73fb      	strb	r3, [r7, #15]
		break;
 800253e:	e00d      	b.n	800255c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8002540:	230c      	movs	r3, #12
 8002542:	73fb      	strb	r3, [r7, #15]
		break;
 8002544:	e00a      	b.n	800255c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8002546:	2307      	movs	r3, #7
 8002548:	73fb      	strb	r3, [r7, #15]
		break;
 800254a:	e007      	b.n	800255c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 800254c:	230b      	movs	r3, #11
 800254e:	73fb      	strb	r3, [r7, #15]
		break;
 8002550:	e004      	b.n	800255c <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]
		break;
 8002556:	e001      	b.n	800255c <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 8002558:	23ff      	movs	r3, #255	; 0xff
 800255a:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800255c:	7bfb      	ldrb	r3, [r7, #15]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop

0800256c <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08e      	sub	sp, #56	; 0x38
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	4608      	mov	r0, r1
 8002576:	4611      	mov	r1, r2
 8002578:	461a      	mov	r2, r3
 800257a:	4603      	mov	r3, r0
 800257c:	70fb      	strb	r3, [r7, #3]
 800257e:	460b      	mov	r3, r1
 8002580:	70bb      	strb	r3, [r7, #2]
 8002582:	4613      	mov	r3, r2
 8002584:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002586:	2300      	movs	r3, #0
 8002588:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	VL53LX_LLDriverData_t *pdev =
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3318      	adds	r3, #24
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 8002592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002594:	33f8      	adds	r3, #248	; 0xf8
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800259c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800259e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 80025aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ac:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80025ae:	025b      	lsls	r3, r3, #9
 80025b0:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 80025b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b4:	6a3a      	ldr	r2, [r7, #32]
 80025b6:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 80025b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ba:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80025bc:	025b      	lsls	r3, r3, #9
 80025be:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 80025c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 80025c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80025ca:	025b      	lsls	r3, r3, #9
 80025cc:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 80025ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 80025d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d6:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80025da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025dc:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 80025de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e0:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80025e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025e6:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 80025e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ea:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 80025ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025f0:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 80025f2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80025f6:	2b11      	cmp	r3, #17
 80025f8:	d009      	beq.n	800260e <SetTargetData+0xa2>
 80025fa:	2b11      	cmp	r3, #17
 80025fc:	dc0f      	bgt.n	800261e <SetTargetData+0xb2>
 80025fe:	2b03      	cmp	r3, #3
 8002600:	dc02      	bgt.n	8002608 <SetTargetData+0x9c>
 8002602:	2b00      	cmp	r3, #0
 8002604:	dc03      	bgt.n	800260e <SetTargetData+0xa2>
 8002606:	e00a      	b.n	800261e <SetTargetData+0xb2>
 8002608:	2b0d      	cmp	r3, #13
 800260a:	d004      	beq.n	8002616 <SetTargetData+0xaa>
 800260c:	e007      	b.n	800261e <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 800260e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002610:	2205      	movs	r2, #5
 8002612:	749a      	strb	r2, [r3, #18]
		break;
 8002614:	e006      	b.n	8002624 <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 8002616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002618:	220d      	movs	r2, #13
 800261a:	749a      	strb	r2, [r3, #18]
		break;
 800261c:	e002      	b.n	8002624 <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 800261e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002620:	2200      	movs	r2, #0
 8002622:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8002624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002626:	7c9b      	ldrb	r3, [r3, #18]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d117      	bne.n	800265c <SetTargetData+0xf0>
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d114      	bne.n	800265c <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 8002632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002634:	22ff      	movs	r2, #255	; 0xff
 8002636:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 8002638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800263a:	2200      	movs	r2, #0
 800263c:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 800263e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002640:	2200      	movs	r2, #0
 8002642:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 8002644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002646:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800264a:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 800264c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800264e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002652:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 8002654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002656:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800265a:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 800265c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800265e:	7c9b      	ldrb	r3, [r3, #18]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d108      	bne.n	8002676 <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 8002664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff2b 	bl	80024c4 <ConvertStatusHisto>
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 8002672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002674:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	461a      	mov	r2, r3
 800267c:	f248 0191 	movw	r1, #32913	; 0x8091
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f003 fa37 	bl	8005af4 <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8002686:	78bb      	ldrb	r3, [r7, #2]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8002694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002696:	8a1b      	ldrh	r3, [r3, #16]
 8002698:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	86bb      	strh	r3, [r7, #52]	; 0x34

	pRangeData->ExtendedRange = 0;
 800269e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a0:	2200      	movs	r2, #0
 80026a2:	74da      	strb	r2, [r3, #19]

	if ((active_results != 1) ||
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d106      	bne.n	80026b8 <SetTargetData+0x14c>
		(pdev->PreviousRangeActiveResults != 1))
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80026b0:	3320      	adds	r3, #32
 80026b2:	781b      	ldrb	r3, [r3, #0]
	if ((active_results != 1) ||
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d001      	beq.n	80026bc <SetTargetData+0x150>
		ExtendedRangeEnabled = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 81dc 	beq.w	8002a7c <SetTargetData+0x510>
		(pRangeData->RangeStatus ==
 80026c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c6:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 80026c8:	2b07      	cmp	r3, #7
 80026ca:	d004      	beq.n	80026d6 <SetTargetData+0x16a>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 80026cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ce:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	f040 81d3 	bne.w	8002a7c <SetTargetData+0x510>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 80026d6:	787b      	ldrb	r3, [r7, #1]
 80026d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026da:	4413      	add	r3, r2
 80026dc:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80026e0:	3318      	adds	r3, #24
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b07      	cmp	r3, #7
 80026e6:	d01c      	beq.n	8002722 <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 80026e8:	787b      	ldrb	r3, [r7, #1]
 80026ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80026f2:	3318      	adds	r3, #24
 80026f4:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d013      	beq.n	8002722 <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 80026fa:	787b      	ldrb	r3, [r7, #1]
 80026fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026fe:	4413      	add	r3, r2
 8002700:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002704:	3318      	adds	r3, #24
 8002706:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8002708:	2b00      	cmp	r3, #0
 800270a:	f040 81b7 	bne.w	8002a7c <SetTargetData+0x510>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 800270e:	787b      	ldrb	r3, [r7, #1]
 8002710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002712:	4413      	add	r3, r2
 8002714:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002718:	331c      	adds	r3, #28
 800271a:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 800271c:	2b01      	cmp	r3, #1
 800271e:	f040 81ad 	bne.w	8002a7c <SetTargetData+0x510>
	{
		if (((pdev->PreviousStreamCount) ==
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002728:	3321      	adds	r3, #33	; 0x21
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 800272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002730:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8002734:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8002736:	429a      	cmp	r2, r3
 8002738:	d00c      	beq.n	8002754 <SetTargetData+0x1e8>
		|| ((pdev->PreviousStreamCount) ==
 800273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002740:	3321      	adds	r3, #33	; 0x21
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 800274c:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 800274e:	429a      	cmp	r2, r3
 8002750:	f040 816b 	bne.w	8002a2a <SetTargetData+0x4be>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8002754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002756:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800275a:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 800275c:	787b      	ldrb	r3, [r7, #1]
 800275e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002760:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8002764:	3308      	adds	r3, #8
 8002766:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800276a:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	b29b      	uxth	r3, r3
 8002770:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 8002772:	2301      	movs	r3, #1
 8002774:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		switch (pdev->preset_mode) {
 8002778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277a:	785b      	ldrb	r3, [r3, #1]
 800277c:	2b21      	cmp	r3, #33	; 0x21
 800277e:	d008      	beq.n	8002792 <SetTargetData+0x226>
 8002780:	2b21      	cmp	r3, #33	; 0x21
 8002782:	f300 814e 	bgt.w	8002a22 <SetTargetData+0x4b6>
 8002786:	2b1b      	cmp	r3, #27
 8002788:	f000 80d7 	beq.w	800293a <SetTargetData+0x3ce>
 800278c:	2b1e      	cmp	r3, #30
 800278e:	d004      	beq.n	800279a <SetTargetData+0x22e>
 8002790:	e147      	b.n	8002a22 <SetTargetData+0x4b6>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002798:	e148      	b.n	8002a2c <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 800279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279c:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 80027a0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	dd0e      	ble.n	80027c6 <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027aa:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 80027ae:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	da07      	bge.n	80027c6 <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d104      	bne.n	80027c6 <SetTargetData+0x25a>
					sequency == 1) {
					AddOffset =
 80027bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027be:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80027c2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80027c4:	e0b8      	b.n	8002938 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80027c6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 80027d0:	425b      	negs	r3, r3
 80027d2:	429a      	cmp	r2, r3
 80027d4:	da0f      	bge.n	80027f6 <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80027d6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 80027e0:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80027e2:	429a      	cmp	r2, r3
 80027e4:	dd07      	ble.n	80027f6 <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d104      	bne.n	80027f6 <SetTargetData+0x28a>
					sequency == 0) {
					AddOffset =
 80027ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ee:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 80027f2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80027f4:	e0a0      	b.n	8002938 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 80027fc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002800:	429a      	cmp	r2, r3
 8002802:	dd0e      	ble.n	8002822 <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8002804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002806:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 800280a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800280e:	429a      	cmp	r2, r3
 8002810:	da07      	bge.n	8002822 <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8002812:	7dfb      	ldrb	r3, [r7, #23]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d104      	bne.n	8002822 <SetTargetData+0x2b6>
					sequency == 0) {
					AddOffset =
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800281e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002820:	e08a      	b.n	8002938 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8002822:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 800282c:	425b      	negs	r3, r3
 800282e:	429a      	cmp	r2, r3
 8002830:	da0f      	bge.n	8002852 <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8002832:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002838:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 800283c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 800283e:	429a      	cmp	r2, r3
 8002840:	dd07      	ble.n	8002852 <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8002842:	7dfb      	ldrb	r3, [r7, #23]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d104      	bne.n	8002852 <SetTargetData+0x2e6>
					sequency == 1) {
					AddOffset =
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800284e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002850:	e072      	b.n	8002938 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8002852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002854:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002858:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800285c:	429a      	cmp	r2, r3
 800285e:	dd0e      	ble.n	800287e <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8002866:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800286a:	429a      	cmp	r2, r3
 800286c:	da07      	bge.n	800287e <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 800286e:	7dfb      	ldrb	r3, [r7, #23]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d104      	bne.n	800287e <SetTargetData+0x312>
					sequency == 1) {
					AddOffset =
 8002874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002876:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800287a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800287c:	e05c      	b.n	8002938 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 800287e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002884:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002888:	425b      	negs	r3, r3
 800288a:	429a      	cmp	r2, r3
 800288c:	da0f      	bge.n	80028ae <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800288e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8002898:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 800289a:	429a      	cmp	r2, r3
 800289c:	dd07      	ble.n	80028ae <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d104      	bne.n	80028ae <SetTargetData+0x342>
					sequency == 0) {
					AddOffset =
 80028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a6:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80028aa:	86bb      	strh	r3, [r7, #52]	; 0x34
 80028ac:	e044      	b.n	8002938 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80028b4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	dd0e      	ble.n	80028da <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 80028bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028be:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 80028c2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	da07      	bge.n	80028da <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d104      	bne.n	80028da <SetTargetData+0x36e>
					sequency == 0) {
					AddOffset =
 80028d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 80028d6:	86bb      	strh	r3, [r7, #52]	; 0x34
 80028d8:	e02e      	b.n	8002938 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80028da:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80028de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e0:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80028e4:	425b      	negs	r3, r3
 80028e6:	429a      	cmp	r2, r3
 80028e8:	da0f      	bge.n	800290a <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80028ea:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 80028f4:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80028f6:	429a      	cmp	r2, r3
 80028f8:	dd07      	ble.n	800290a <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d104      	bne.n	800290a <SetTargetData+0x39e>
					sequency == 1) {
					AddOffset =
 8002900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002902:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8002906:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002908:	e016      	b.n	8002938 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 800290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290c:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8002910:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002914:	429a      	cmp	r2, r3
 8002916:	da0b      	bge.n	8002930 <SetTargetData+0x3c4>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8002918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291a:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 800291e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002922:	429a      	cmp	r2, r3
 8002924:	dd04      	ble.n	8002930 <SetTargetData+0x3c4>
					AddOffset =
 8002926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002928:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800292c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800292e:	e003      	b.n	8002938 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002936:	e079      	b.n	8002a2c <SetTargetData+0x4c0>
 8002938:	e078      	b.n	8002a2c <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8002940:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002944:	429a      	cmp	r2, r3
 8002946:	dd0e      	ble.n	8002966 <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 800294e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002952:	429a      	cmp	r2, r3
 8002954:	da07      	bge.n	8002966 <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8002956:	7dfb      	ldrb	r3, [r7, #23]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d104      	bne.n	8002966 <SetTargetData+0x3fa>
					sequency == 0) {
					AddOffset =
 800295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295e:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 8002962:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002964:	e05c      	b.n	8002a20 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8002966:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800296a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296c:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8002970:	425b      	negs	r3, r3
 8002972:	429a      	cmp	r2, r3
 8002974:	da0f      	bge.n	8002996 <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8002976:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8002980:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8002982:	429a      	cmp	r2, r3
 8002984:	dd07      	ble.n	8002996 <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8002986:	7dfb      	ldrb	r3, [r7, #23]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d104      	bne.n	8002996 <SetTargetData+0x42a>
					sequency == 1) {
					AddOffset =
 800298c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298e:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002992:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002994:	e044      	b.n	8002a20 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800299c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	dd0e      	ble.n	80029c2 <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80029a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a6:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80029aa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	da07      	bge.n	80029c2 <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d104      	bne.n	80029c2 <SetTargetData+0x456>
					sequency == 1) {
					AddOffset =
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 80029be:	86bb      	strh	r3, [r7, #52]	; 0x34
 80029c0:	e02e      	b.n	8002a20 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80029c2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80029c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c8:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 80029cc:	425b      	negs	r3, r3
 80029ce:	429a      	cmp	r2, r3
 80029d0:	da0f      	bge.n	80029f2 <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80029d2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 80029dc:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80029de:	429a      	cmp	r2, r3
 80029e0:	dd07      	ble.n	80029f2 <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d104      	bne.n	80029f2 <SetTargetData+0x486>
					sequency == 0) {
					AddOffset =
 80029e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ea:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 80029ee:	86bb      	strh	r3, [r7, #52]	; 0x34
 80029f0:	e016      	b.n	8002a20 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80029f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f4:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 80029f8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	da0b      	bge.n	8002a18 <SetTargetData+0x4ac>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8002a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a02:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8002a06:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	dd04      	ble.n	8002a18 <SetTargetData+0x4ac>
					AddOffset =
 8002a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a10:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8002a14:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002a16:	e003      	b.n	8002a20 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002a1e:	e005      	b.n	8002a2c <SetTargetData+0x4c0>
 8002a20:	e004      	b.n	8002a2c <SetTargetData+0x4c0>

			default:
				uwr_status = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002a28:	e000      	b.n	8002a2c <SetTargetData+0x4c0>
			}
		}
 8002a2a:	bf00      	nop

		if (uwr_status) {
 8002a2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d023      	beq.n	8002a7c <SetTargetData+0x510>
			pRangeData->RangeMilliMeter += AddOffset;
 8002a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a36:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002a3e:	4413      	add	r3, r2
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	b21a      	sxth	r2, r3
 8002a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a46:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8002a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002a52:	4413      	add	r3, r2
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	b21a      	sxth	r2, r3
 8002a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a5a:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8002a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002a66:	4413      	add	r3, r2
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	b21a      	sxth	r2, r3
 8002a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6e:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 8002a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a72:	2201      	movs	r2, #1
 8002a74:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 8002a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a78:	2200      	movs	r2, #0
 8002a7a:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8002a7c:	787b      	ldrb	r3, [r7, #1]
 8002a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a80:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8002a84:	3308      	adds	r3, #8
 8002a86:	8ab9      	ldrh	r1, [r7, #20]
 8002a88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a90:	7c91      	ldrb	r1, [r2, #18]
 8002a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002a9a:	3318      	adds	r3, #24
 8002a9c:	460a      	mov	r2, r1
 8002a9e:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8002aa0:	787b      	ldrb	r3, [r7, #1]
 8002aa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aa4:	7cd1      	ldrb	r1, [r2, #19]
 8002aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002aae:	331c      	adds	r3, #28
 8002ab0:	460a      	mov	r2, r1
 8002ab2:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002aba:	3320      	adds	r3, #32
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	701a      	strb	r2, [r3, #0]

	Range = pRangeData->RangeMilliMeter;
 8002ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac2:	8a1b      	ldrh	r3, [r3, #16]
 8002ac4:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8002ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac8:	7c9b      	ldrb	r3, [r3, #18]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d110      	bne.n	8002af0 <SetTargetData+0x584>
 8002ace:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	da0c      	bge.n	8002af0 <SetTargetData+0x584>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 8002ad6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <SetTargetData+0x590>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	da03      	bge.n	8002aea <SetTargetData+0x57e>
			pRangeData->RangeStatus =
 8002ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae4:	220e      	movs	r2, #14
 8002ae6:	749a      	strb	r2, [r3, #18]
 8002ae8:	e002      	b.n	8002af0 <SetTargetData+0x584>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8002aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aec:	2200      	movs	r2, #0
 8002aee:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 8002af0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3738      	adds	r7, #56	; 0x38
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	2000001c 	.word	0x2000001c

08002b00 <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b08f      	sub	sp, #60	; 0x3c
 8002b04:	af04      	add	r7, sp, #16
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3318      	adds	r3, #24
 8002b10:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	7c9a      	ldrb	r2, [r3, #18]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


	pMultiRangingData->TimeStamp = 0;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	78da      	ldrb	r2, [r3, #3]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	7c9b      	ldrb	r3, [r3, #18]
 8002b3e:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 8002b40:	7ffb      	ldrb	r3, [r7, #31]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d103      	bne.n	8002b4e <SetMeasurementData+0x4e>

		iteration = 1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002b4c:	e002      	b.n	8002b54 <SetMeasurementData+0x54>
	else
		iteration = ActiveResults;
 8002b4e:	7ffb      	ldrb	r3, [r7, #31]
 8002b50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for (i = 0; i < iteration; i++) {
 8002b54:	2300      	movs	r3, #0
 8002b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b5a:	e035      	b.n	8002bc8 <SetMeasurementData+0xc8>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 8002b5c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	3308      	adds	r3, #8
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 8002b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b74:	224c      	movs	r2, #76	; 0x4c
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	3310      	adds	r3, #16
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	4413      	add	r3, r2
 8002b80:	3304      	adds	r3, #4
 8002b82:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 8002b84:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d113      	bne.n	8002bb4 <SetMeasurementData+0xb4>
			Status = SetTargetData(Dev, ActiveResults,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	7918      	ldrb	r0, [r3, #4]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	7c1b      	ldrb	r3, [r3, #16]
 8002b94:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8002b98:	7ff9      	ldrb	r1, [r7, #31]
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	9202      	str	r2, [sp, #8]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	9201      	str	r2, [sp, #4]
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	4623      	mov	r3, r4
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f7ff fcdf 	bl	800256c <SetTargetData>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	for (i = 0; i < iteration; i++) {
 8002bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002bc8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002bcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d3c3      	bcc.n	8002b5c <SetMeasurementData+0x5c>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	f893 243f 	ldrb.w	r2, [r3, #1087]	; 0x43f
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002be0:	3321      	adds	r3, #33	; 0x21
 8002be2:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002be4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002bec:	e01f      	b.n	8002c2e <SetMeasurementData+0x12e>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8002bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bf2:	6a3a      	ldr	r2, [r7, #32]
 8002bf4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8002c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c04:	6a3a      	ldr	r2, [r7, #32]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002c0c:	3318      	adds	r3, #24
 8002c0e:	22ff      	movs	r2, #255	; 0xff
 8002c10:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8002c12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c16:	6a3a      	ldr	r2, [r7, #32]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002c1e:	331c      	adds	r3, #28
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c28:	3301      	adds	r3, #1
 8002c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d9db      	bls.n	8002bee <SetMeasurementData+0xee>
	}

	return Status;
 8002c36:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	372c      	adds	r7, #44	; 0x2c
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd90      	pop	{r4, r7, pc}

08002c42 <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b086      	sub	sp, #24
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3318      	adds	r3, #24
 8002c54:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002c5c:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8002c5e:	225c      	movs	r2, #92	; 0x5c
 8002c60:	21ff      	movs	r1, #255	; 0xff
 8002c62:	6838      	ldr	r0, [r7, #0]
 8002c64:	f012 f9c2 	bl	8014fec <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f001 fee7 	bl	8004a40 <VL53LX_get_device_results>
 8002c72:	4603      	mov	r3, r0
 8002c74:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	68f9      	ldr	r1, [r7, #12]
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ff40 	bl	8002b00 <SetMeasurementData>
 8002c80:	4603      	mov	r3, r0
 8002c82:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 8002c84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <VL53LX_PerformRefSpadManagement>:
	return Status;
}


VL53LX_Error VL53LX_PerformRefSpadManagement(VL53LX_DEV Dev)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b090      	sub	sp, #64	; 0x40
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8002c9e:	f240 3305 	movw	r3, #773	; 0x305
 8002ca2:	81bb      	strh	r3, [r7, #12]
	VL53LX_customer_nvm_managed_t *pc;
	VL53LX_DistanceModes DistanceMode;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3318      	adds	r3, #24
 8002ca8:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 8002caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cac:	3348      	adds	r3, #72	; 0x48
 8002cae:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53LX_ERROR_NONE) {
 8002cb0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d11c      	bne.n	8002cf2 <VL53LX_PerformRefSpadManagement+0x62>
		DistanceMode = VL53LXDevDataGet(Dev,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002cbe:	3320      	adds	r3, #32
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.DistanceMode);
		Status = VL53LX_run_ref_spad_char(Dev, &RawStatus);
 8002cc6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f8e3 	bl	8002e98 <VL53LX_run_ref_spad_char>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53LX_ERROR_NONE)
 8002cd8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d108      	bne.n	8002cf2 <VL53LX_PerformRefSpadManagement+0x62>
			Status = VL53LX_SetDistanceMode(Dev, DistanceMode);
 8002ce0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff fa13 	bl	8002112 <VL53LX_SetDistanceMode>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8002cf2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002cf6:	f113 0f1d 	cmn.w	r3, #29
 8002cfa:	d14e      	bne.n	8002d9a <VL53LX_PerformRefSpadManagement+0x10a>

		Status = VL53LX_read_nvm_raw_data(Dev,
 8002cfc:	f107 0310 	add.w	r3, r7, #16
 8002d00:	2206      	movs	r2, #6
 8002d02:	2128      	movs	r1, #40	; 0x28
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f00c f991 	bl	800f02c <VL53LX_read_nvm_raw_data>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53LX_ERROR_NONE)
 8002d10:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <VL53LX_PerformRefSpadManagement+0x9c>
			Status = VL53LX_WriteMulti(Dev,
 8002d18:	f107 020c 	add.w	r2, r7, #12
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	2114      	movs	r1, #20
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f00e f9c7 	bl	80110b4 <VL53LX_WriteMulti>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53LX_ERROR_NONE) {
 8002d2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <VL53LX_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8002d34:	7b3a      	ldrb	r2, [r7, #12]
 8002d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d38:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 8002d3a:	7b7a      	ldrb	r2, [r7, #13]
 8002d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3e:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8002d40:	f107 0310 	add.w	r3, r7, #16
 8002d44:	3310      	adds	r3, #16
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c



		if (Status == VL53LX_ERROR_NONE)
 8002d48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d108      	bne.n	8002d62 <VL53LX_PerformRefSpadManagement+0xd2>
			Status = VL53LX_WriteMulti(Dev,
 8002d50:	2306      	movs	r3, #6
 8002d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d54:	210d      	movs	r1, #13
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f00e f9ac 	bl	80110b4 <VL53LX_WriteMulti>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53LX_ERROR_NONE) {
 8002d62:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d117      	bne.n	8002d9a <VL53LX_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	781a      	ldrb	r2, [r3, #0]
 8002d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d70:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	785a      	ldrb	r2, [r3, #1]
 8002d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d78:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 8002d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7c:	789a      	ldrb	r2, [r3, #2]
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d80:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	78da      	ldrb	r2, [r3, #3]
 8002d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d88:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	791a      	ldrb	r2, [r3, #4]
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d90:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8002d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d94:	795a      	ldrb	r2, [r3, #5]
 8002d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d98:	715a      	strb	r2, [r3, #5]
		}

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002d9a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3740      	adds	r7, #64	; 0x40
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <VL53LX_SmudgeCorrectionEnable>:


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8002dc4:	78fb      	ldrb	r3, [r7, #3]
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d84a      	bhi.n	8002e60 <VL53LX_SmudgeCorrectionEnable+0xb8>
 8002dca:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <VL53LX_SmudgeCorrectionEnable+0x28>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002de1 	.word	0x08002de1
 8002dd4:	08002e01 	.word	0x08002e01
 8002dd8:	08002e21 	.word	0x08002e21
 8002ddc:	08002e41 	.word	0x08002e41
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f003 fd92 	bl	800690a <VL53LX_dynamic_xtalk_correction_disable>
 8002de6:	4603      	mov	r3, r0
 8002de8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f003 fda4 	bl	8006938 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8002df0:	4603      	mov	r3, r0
 8002df2:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f003 fdcd 	bl	8006994 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	733b      	strb	r3, [r7, #12]
		break;
 8002dfe:	e032      	b.n	8002e66 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f003 fd6b 	bl	80068dc <VL53LX_dynamic_xtalk_correction_enable>
 8002e06:	4603      	mov	r3, r0
 8002e08:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f003 fdd9 	bl	80069c2 <VL53LX_dynamic_xtalk_correction_apply_enable>
 8002e10:	4603      	mov	r3, r0
 8002e12:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f003 fdbd 	bl	8006994 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	733b      	strb	r3, [r7, #12]
		break;
 8002e1e:	e022      	b.n	8002e66 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f003 fd5b 	bl	80068dc <VL53LX_dynamic_xtalk_correction_enable>
 8002e26:	4603      	mov	r3, r0
 8002e28:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f003 fdc9 	bl	80069c2 <VL53LX_dynamic_xtalk_correction_apply_enable>
 8002e30:	4603      	mov	r3, r0
 8002e32:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f003 fd96 	bl	8006966 <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	733b      	strb	r3, [r7, #12]
		break;
 8002e3e:	e012      	b.n	8002e66 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f003 fd4b 	bl	80068dc <VL53LX_dynamic_xtalk_correction_enable>
 8002e46:	4603      	mov	r3, r0
 8002e48:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f003 fd74 	bl	8006938 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8002e50:	4603      	mov	r3, r0
 8002e52:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f003 fd9d 	bl	8006994 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	733b      	strb	r3, [r7, #12]
		break;
 8002e5e:	e002      	b.n	8002e66 <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002e60:	23fc      	movs	r3, #252	; 0xfc
 8002e62:	73fb      	strb	r3, [r7, #15]
		break;
 8002e64:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 8002e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10d      	bne.n	8002e8a <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8002e6e:	7bbb      	ldrb	r3, [r7, #14]
 8002e70:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8002e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8002e7a:	7b7b      	ldrb	r3, [r7, #13]
 8002e7c:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8002e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8002e86:	7b3b      	ldrb	r3, [r7, #12]
 8002e88:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop

08002e98 <VL53LX_run_ref_spad_char>:


VL53LX_Error VL53LX_run_ref_spad_char(
	VL53LX_DEV        Dev,
	VL53LX_Error     *pcal_status)
{
 8002e98:	b5b0      	push	{r4, r5, r7, lr}
 8002e9a:	b08c      	sub	sp, #48	; 0x30
 8002e9c:	af04      	add	r7, sp, #16
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3318      	adds	r3, #24
 8002eaa:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53LX_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002eb2:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8002eb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d104      	bne.n	8002ec6 <VL53LX_run_ref_spad_char+0x2e>
		status = VL53LX_enable_powerforce(Dev);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f005 fd62 	bl	8008986 <VL53LX_enable_powerforce>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 8002ec6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d117      	bne.n	8002efe <VL53LX_run_ref_spad_char+0x66>
		status =
		VL53LX_set_ref_spad_char_config(
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	7858      	ldrb	r0, [r3, #1]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	685c      	ldr	r4, [r3, #4]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	891d      	ldrh	r5, [r3, #8]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	899b      	ldrh	r3, [r3, #12]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	8952      	ldrh	r2, [r2, #10]
 8002ee2:	69b9      	ldr	r1, [r7, #24]
 8002ee4:	f8b1 12de 	ldrh.w	r1, [r1, #734]	; 0x2de
 8002ee8:	9102      	str	r1, [sp, #8]
 8002eea:	9201      	str	r2, [sp, #4]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	462b      	mov	r3, r5
 8002ef0:	4622      	mov	r2, r4
 8002ef2:	4601      	mov	r1, r0
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f007 fb71 	bl	800a5dc <VL53LX_set_ref_spad_char_config>
 8002efa:	4603      	mov	r3, r0
 8002efc:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53LX_ERROR_NONE)
 8002efe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d107      	bne.n	8002f16 <VL53LX_run_ref_spad_char+0x7e>
		status = VL53LX_run_device_test(
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f890 	bl	8003032 <VL53LX_run_device_test>
 8002f12:	4603      	mov	r3, r0
 8002f14:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53LX_ERROR_NONE)
 8002f16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d108      	bne.n	8002f30 <VL53LX_run_ref_spad_char+0x98>
		status =
		VL53LX_ReadMulti(
 8002f1e:	f107 020c 	add.w	r2, r7, #12
 8002f22:	2302      	movs	r3, #2
 8002f24:	21d9      	movs	r1, #217	; 0xd9
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f00e f8fa 	bl	8011120 <VL53LX_ReadMulti>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53LX_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53LX_ERROR_NONE) {
 8002f30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10a      	bne.n	8002f4e <VL53LX_run_ref_spad_char+0xb6>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8002f38:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8002f40:	331f      	adds	r3, #31
 8002f42:	701a      	strb	r2, [r3, #0]
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8002f44:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8002f4c:	701a      	strb	r2, [r3, #0]
	}



	if (status == VL53LX_ERROR_NONE)
 8002f4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d108      	bne.n	8002f68 <VL53LX_run_ref_spad_char+0xd0>
		status =
			VL53LX_WriteMulti(
 8002f56:	f107 020c 	add.w	r2, r7, #12
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	2114      	movs	r1, #20
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f00e f8a8 	bl	80110b4 <VL53LX_WriteMulti>
 8002f64:	4603      	mov	r3, r0
 8002f66:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8002f68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <VL53LX_run_ref_spad_char+0xe8>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8002f70:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8002f78:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53LX_ERROR_NONE)
 8002f80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d108      	bne.n	8002f9a <VL53LX_run_ref_spad_char+0x102>
		status =
			VL53LX_ReadMulti(
 8002f88:	f107 020c 	add.w	r2, r7, #12
 8002f8c:	2306      	movs	r3, #6
 8002f8e:	21ac      	movs	r1, #172	; 0xac
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f00e f8c5 	bl	8011120 <VL53LX_ReadMulti>
 8002f96:	4603      	mov	r3, r0
 8002f98:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53LX_ERROR_NONE)
 8002f9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d108      	bne.n	8002fb4 <VL53LX_run_ref_spad_char+0x11c>
		status =
			VL53LX_WriteMulti(
 8002fa2:	f107 020c 	add.w	r2, r7, #12
 8002fa6:	2306      	movs	r3, #6
 8002fa8:	210d      	movs	r1, #13
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f00e f882 	bl	80110b4 <VL53LX_WriteMulti>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53LX_ERROR_NONE) {
 8002fb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d117      	bne.n	8002fec <VL53LX_run_ref_spad_char+0x154>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8002fbc:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8002fc4:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8002fcc:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8002fdc:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8002fe4:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53LX_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53LX_ERROR_NONE) {
 8002fec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d114      	bne.n	800301e <VL53LX_run_ref_spad_char+0x186>

		switch (pdev->sys_results.result__range_status) {
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d00c      	beq.n	8003018 <VL53LX_run_ref_spad_char+0x180>
 8002ffe:	2b10      	cmp	r3, #16
 8003000:	dc0e      	bgt.n	8003020 <VL53LX_run_ref_spad_char+0x188>
 8003002:	2b0e      	cmp	r3, #14
 8003004:	d002      	beq.n	800300c <VL53LX_run_ref_spad_char+0x174>
 8003006:	2b0f      	cmp	r3, #15
 8003008:	d003      	beq.n	8003012 <VL53LX_run_ref_spad_char+0x17a>
 800300a:	e009      	b.n	8003020 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53LX_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 800300c:	23e4      	movs	r3, #228	; 0xe4
 800300e:	77fb      	strb	r3, [r7, #31]
			break;
 8003010:	e006      	b.n	8003020 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8003012:	23e3      	movs	r3, #227	; 0xe3
 8003014:	77fb      	strb	r3, [r7, #31]
			break;
 8003016:	e003      	b.n	8003020 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8003018:	23e2      	movs	r3, #226	; 0xe2
 800301a:	77fb      	strb	r3, [r7, #31]
			break;
 800301c:	e000      	b.n	8003020 <VL53LX_run_ref_spad_char+0x188>
		}
	}
 800301e:	bf00      	nop



	*pcal_status = status;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	7ffa      	ldrb	r2, [r7, #31]
 8003024:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8003026:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3720      	adds	r7, #32
 800302e:	46bd      	mov	sp, r7
 8003030:	bdb0      	pop	{r4, r5, r7, pc}

08003032 <VL53LX_run_device_test>:


VL53LX_Error VL53LX_run_device_test(
	VL53LX_DEV             Dev,
	VL53LX_DeviceTestMode  device_test_mode)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b086      	sub	sp, #24
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800303e:	2300      	movs	r3, #0
 8003040:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3318      	adds	r3, #24
 8003046:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8003048:	2300      	movs	r3, #0
 800304a:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800304c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d108      	bne.n	8003066 <VL53LX_run_device_test+0x34>
		status =
			VL53LX_RdByte(
 8003054:	f107 030b 	add.w	r3, r7, #11
 8003058:	461a      	mov	r2, r3
 800305a:	2130      	movs	r1, #48	; 0x30
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f00e f8f1 	bl	8011244 <VL53LX_RdByte>
 8003062:	4603      	mov	r3, r0
 8003064:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53LX_ERROR_NONE)
 8003066:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d103      	bne.n	8003076 <VL53LX_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 800306e:	7afa      	ldrb	r2, [r7, #11]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a


	if (status == VL53LX_ERROR_NONE)
 8003076:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <VL53LX_run_device_test+0x5a>
		status = VL53LX_start_test(
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	4619      	mov	r1, r3
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f005 fc03 	bl	800888e <VL53LX_start_test>
 8003088:	4603      	mov	r3, r0
 800308a:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53LX_ERROR_NONE)
 800308c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d104      	bne.n	800309e <VL53LX_run_device_test+0x6c>
		status = VL53LX_wait_for_test_completion(Dev);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f00d fc4d 	bl	8010934 <VL53LX_wait_for_test_completion>
 800309a:	4603      	mov	r3, r0
 800309c:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 800309e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d108      	bne.n	80030b8 <VL53LX_run_device_test+0x86>
		status =
			VL53LX_ReadMulti(
 80030a6:	f107 020c 	add.w	r2, r7, #12
 80030aa:	2302      	movs	r3, #2
 80030ac:	2189      	movs	r1, #137	; 0x89
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f00e f836 	bl	8011120 <VL53LX_ReadMulti>
 80030b4:	4603      	mov	r3, r0
 80030b6:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 80030b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d107      	bne.n	80030d0 <VL53LX_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 80030c0:	7b3a      	ldrb	r2, [r7, #12]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		pdev->sys_results.result__report_status = comms_buffer[1];
 80030c8:	7b7a      	ldrb	r2, [r7, #13]
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
	}



	pdev->sys_results.result__range_status &=
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53LX_ERROR_NONE) {
 80030e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d108      	bne.n	80030fc <VL53LX_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53LX_ERROR_NONE)
 80030ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d104      	bne.n	80030fc <VL53LX_run_device_test+0xca>
			status = VL53LX_clear_interrupt(Dev);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f005 fc6b 	bl	80089ce <VL53LX_clear_interrupt>
 80030f8:	4603      	mov	r3, r0
 80030fa:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53LX_ERROR_NONE)
 80030fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d105      	bne.n	8003110 <VL53LX_run_device_test+0xde>
		status =
			VL53LX_start_test(
 8003104:	2100      	movs	r1, #0
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f005 fbc1 	bl	800888e <VL53LX_start_test>
 800310c:	4603      	mov	r3, r0
 800310e:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8003110:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003126:	2300      	movs	r3, #0
 8003128:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	785b      	ldrb	r3, [r3, #1]
 800312e:	2b21      	cmp	r3, #33	; 0x21
 8003130:	d006      	beq.n	8003140 <select_offset_per_vcsel+0x24>
 8003132:	2b21      	cmp	r3, #33	; 0x21
 8003134:	dc2a      	bgt.n	800318c <select_offset_per_vcsel+0x70>
 8003136:	2b1b      	cmp	r3, #27
 8003138:	d01b      	beq.n	8003172 <select_offset_per_vcsel+0x56>
 800313a:	2b1e      	cmp	r3, #30
 800313c:	d00c      	beq.n	8003158 <select_offset_per_vcsel+0x3c>
 800313e:	e025      	b.n	800318c <select_offset_per_vcsel+0x70>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003150:	3302      	adds	r3, #2
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	817b      	strh	r3, [r7, #10]
		break;
 8003156:	e02b      	b.n	80031b0 <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800315e:	3304      	adds	r3, #4
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800316a:	3306      	adds	r3, #6
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	817b      	strh	r3, [r7, #10]
		break;
 8003170:	e01e      	b.n	80031b0 <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003178:	3308      	adds	r3, #8
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003184:	330a      	adds	r3, #10
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	817b      	strh	r3, [r7, #10]
		break;
 800318a:	e011      	b.n	80031b0 <select_offset_per_vcsel+0x94>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003192:	3308      	adds	r3, #8
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800319e:	330a      	adds	r3, #10
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 80031a4:	23fc      	movs	r3, #252	; 0xfc
 80031a6:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2200      	movs	r2, #0
 80031ac:	801a      	strh	r2, [r3, #0]
		break;
 80031ae:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80031b6:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 80031b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10b      	bne.n	80031d8 <select_offset_per_vcsel+0xbc>
		*poffset = (isc & 0x01) ? tA : tB;
 80031c0:	7a7b      	ldrb	r3, [r7, #9]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <select_offset_per_vcsel+0xb4>
 80031ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80031ce:	e001      	b.n	80031d4 <select_offset_per_vcsel+0xb8>
 80031d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	8013      	strh	r3, [r2, #0]

	return status;
 80031d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 80031e8:	b490      	push	{r4, r7}
 80031ea:	b08a      	sub	sp, #40	; 0x28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	4611      	mov	r1, r2
 80031f4:	461a      	mov	r2, r3
 80031f6:	460b      	mov	r3, r1
 80031f8:	71fb      	strb	r3, [r7, #7]
 80031fa:	4613      	mov	r3, r2
 80031fc:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	b29b      	uxth	r3, r3
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	84fb      	strh	r3, [r7, #38]	; 0x26
 800321a:	e021      	b.n	8003260 <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 800321c:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003220:	79fb      	ldrb	r3, [r7, #7]
 8003222:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	461a      	mov	r2, r3
 8003228:	0052      	lsls	r2, r2, #1
 800322a:	441a      	add	r2, r3
 800322c:	00d3      	lsls	r3, r2, #3
 800322e:	461a      	mov	r2, r3
 8003230:	460b      	mov	r3, r1
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	440b      	add	r3, r1
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	4413      	add	r3, r2
 800323a:	4423      	add	r3, r4
 800323c:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8003240:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8003244:	6a3a      	ldr	r2, [r7, #32]
 8003246:	4413      	add	r3, r2
 8003248:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 800324a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	3206      	adds	r2, #6
 8003250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	4413      	add	r3, r2
 8003258:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 800325a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800325c:	3301      	adds	r3, #1
 800325e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003260:	79bb      	ldrb	r3, [r7, #6]
 8003262:	b29b      	uxth	r3, r3
 8003264:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003266:	429a      	cmp	r2, r3
 8003268:	d3d8      	bcc.n	800321c <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d047      	beq.n	8003300 <vl53lx_diff_histo_stddev+0x118>
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d044      	beq.n	8003300 <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	b29b      	uxth	r3, r3
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800327e:	e03a      	b.n	80032f6 <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8003280:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	461a      	mov	r2, r3
 800328c:	0052      	lsls	r2, r2, #1
 800328e:	441a      	add	r2, r3
 8003290:	00d3      	lsls	r3, r2, #3
 8003292:	461a      	mov	r2, r3
 8003294:	460b      	mov	r3, r1
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	440b      	add	r3, r1
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	4413      	add	r3, r2
 800329e:	4423      	add	r3, r4
 80032a0:	f203 7304 	addw	r3, r3, #1796	; 0x704
 80032a4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80032a8:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032b0:	fb02 f203 	mul.w	r2, r2, r3
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80032ba:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 80032bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	3206      	adds	r2, #6
 80032c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032ca:	fb02 f203 	mul.w	r2, r2, r3
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80032d4:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 80032d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	69b9      	ldr	r1, [r7, #24]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 80032e0:	69b8      	ldr	r0, [r7, #24]
 80032e2:	6979      	ldr	r1, [r7, #20]
 80032e4:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	441a      	add	r2, r3
 80032ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ee:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 80032f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80032f2:	3301      	adds	r3, #1
 80032f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80032f6:	79bb      	ldrb	r3, [r7, #6]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d3bf      	bcc.n	8003280 <vl53lx_diff_histo_stddev+0x98>
	}
}
 8003300:	bf00      	nop
 8003302:	3728      	adds	r7, #40	; 0x28
 8003304:	46bd      	mov	sp, r7
 8003306:	bc90      	pop	{r4, r7}
 8003308:	4770      	bx	lr

0800330a <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 800330a:	b5b0      	push	{r4, r5, r7, lr}
 800330c:	b08c      	sub	sp, #48	; 0x30
 800330e:	af02      	add	r7, sp, #8
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3318      	adds	r3, #24
 8003318:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8003328:	2300      	movs	r3, #0
 800332a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 800332e:	2300      	movs	r3, #0
 8003330:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800333a:	2318      	movs	r3, #24
 800333c:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 800333e:	f107 0314 	add.w	r3, r7, #20
 8003342:	461a      	mov	r2, r3
 8003344:	f248 018f 	movw	r1, #32911	; 0x808f
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f002 fbd3 	bl	8005af4 <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 800334e:	f107 0310 	add.w	r3, r7, #16
 8003352:	461a      	mov	r2, r3
 8003354:	f248 018e 	movw	r1, #32910	; 0x808e
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f002 fbcb 	bl	8005af4 <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003364:	330d      	adds	r3, #13
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	f040 811a 	bne.w	80035a2 <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf0c      	ite	eq
 800337c:	2301      	moveq	r3, #1
 800337e:	2300      	movne	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8003388:	7efb      	ldrb	r3, [r7, #27]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	b2db      	uxtb	r3, r3
 800338e:	7eba      	ldrb	r2, [r7, #26]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800339a:	330c      	adds	r3, #12
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <vl53lx_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80033a8:	330c      	adds	r3, #12
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b2:	e004      	b.n	80033be <vl53lx_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 80033be:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80033c2:	7efb      	ldrb	r3, [r7, #27]
 80033c4:	69f8      	ldr	r0, [r7, #28]
 80033c6:	461a      	mov	r2, r3
 80033c8:	0052      	lsls	r2, r2, #1
 80033ca:	441a      	add	r2, r3
 80033cc:	0153      	lsls	r3, r2, #5
 80033ce:	461a      	mov	r2, r3
 80033d0:	460b      	mov	r3, r1
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	440b      	add	r3, r1
 80033d6:	019b      	lsls	r3, r3, #6
 80033d8:	4413      	add	r3, r2
 80033da:	4403      	add	r3, r0
 80033dc:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	dd0c      	ble.n	8003400 <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 80033e6:	7e79      	ldrb	r1, [r7, #25]
 80033e8:	7efa      	ldrb	r2, [r7, #27]
 80033ea:	f107 030c 	add.w	r3, r7, #12
 80033ee:	9301      	str	r3, [sp, #4]
 80033f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	460b      	mov	r3, r1
 80033f8:	6839      	ldr	r1, [r7, #0]
 80033fa:	69f8      	ldr	r0, [r7, #28]
 80033fc:	f7ff fef4 	bl	80031e8 <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	429a      	cmp	r2, r3
 8003406:	db23      	blt.n	8003450 <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800340e:	3310      	adds	r3, #16
 8003410:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8003414:	2100      	movs	r1, #0
 8003416:	4618      	mov	r0, r3
 8003418:	f011 fde8 	bl	8014fec <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003422:	330c      	adds	r3, #12
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]

			recom_been_reset = 1;
 8003428:	2301      	movs	r3, #1
 800342a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 800342e:	7efb      	ldrb	r3, [r7, #27]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d106      	bne.n	8003442 <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800343a:	330d      	adds	r3, #13
 800343c:	2206      	movs	r2, #6
 800343e:	701a      	strb	r2, [r3, #0]
 8003440:	e034      	b.n	80034ac <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003448:	330d      	adds	r3, #13
 800344a:	2207      	movs	r2, #7
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	e02d      	b.n	80034ac <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003456:	330c      	adds	r3, #12
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 800345c:	2300      	movs	r3, #0
 800345e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003462:	e01e      	b.n	80034a2 <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8003464:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 8003468:	7e39      	ldrb	r1, [r7, #24]
 800346a:	7efb      	ldrb	r3, [r7, #27]
 800346c:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	3006      	adds	r0, #6
 8003474:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8003478:	69f8      	ldr	r0, [r7, #28]
 800347a:	461a      	mov	r2, r3
 800347c:	0052      	lsls	r2, r2, #1
 800347e:	441a      	add	r2, r3
 8003480:	00d3      	lsls	r3, r2, #3
 8003482:	461a      	mov	r2, r3
 8003484:	460b      	mov	r3, r1
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	440b      	add	r3, r1
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	4413      	add	r3, r2
 800348e:	442b      	add	r3, r5
 8003490:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8003494:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8003498:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800349c:	3301      	adds	r3, #1
 800349e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80034a2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80034a6:	7ebb      	ldrb	r3, [r7, #26]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d3db      	bcc.n	8003464 <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80034b2:	330c      	adds	r3, #12
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	429a      	cmp	r2, r3
 80034be:	d109      	bne.n	80034d4 <vl53lx_histo_merge+0x1ca>
 80034c0:	7efb      	ldrb	r3, [r7, #27]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d106      	bne.n	80034d4 <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80034cc:	330c      	adds	r3, #12
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e00e      	b.n	80034f2 <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 80034d4:	7efb      	ldrb	r3, [r7, #27]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d10b      	bne.n	80034f2 <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80034e0:	330c      	adds	r3, #12
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	3301      	adds	r3, #1
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80034ee:	330c      	adds	r3, #12
 80034f0:	701a      	strb	r2, [r3, #0]

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 80034f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d102      	bne.n	8003500 <vl53lx_histo_merge+0x1f6>
 80034fa:	7efb      	ldrb	r3, [r7, #27]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d069      	beq.n	80035d4 <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003506:	330d      	adds	r3, #13
 8003508:	781b      	ldrb	r3, [r3, #0]
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 800350a:	2b00      	cmp	r3, #0
 800350c:	d162      	bne.n	80035d4 <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 800350e:	2300      	movs	r3, #0
 8003510:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003512:	e008      	b.n	8003526 <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 8003514:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	3206      	adds	r2, #6
 800351a:	2100      	movs	r1, #0
 800351c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8003520:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003522:	3301      	adds	r3, #1
 8003524:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003526:	7ebb      	ldrb	r3, [r7, #26]
 8003528:	b29b      	uxth	r3, r3
 800352a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800352c:	429a      	cmp	r2, r3
 800352e:	d3f1      	bcc.n	8003514 <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 8003530:	2300      	movs	r3, #0
 8003532:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003534:	e02f      	b.n	8003596 <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 8003536:	2300      	movs	r3, #0
 8003538:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800353c:	e023      	b.n	8003586 <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 800353e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	3206      	adds	r2, #6
 8003544:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 8003548:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800354c:	7efb      	ldrb	r3, [r7, #27]
 800354e:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8003550:	69fc      	ldr	r4, [r7, #28]
 8003552:	461a      	mov	r2, r3
 8003554:	0052      	lsls	r2, r2, #1
 8003556:	441a      	add	r2, r3
 8003558:	00d3      	lsls	r3, r2, #3
 800355a:	461a      	mov	r2, r3
 800355c:	460b      	mov	r3, r1
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	440b      	add	r3, r1
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	4413      	add	r3, r2
 8003566:	442b      	add	r3, r5
 8003568:	f203 7304 	addw	r3, r3, #1796	; 0x704
 800356c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8003570:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003572:	18c1      	adds	r1, r0, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	3206      	adds	r2, #6
 8003578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 800357c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003580:	3301      	adds	r3, #1
 8003582:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003586:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	429a      	cmp	r2, r3
 800358e:	dbd6      	blt.n	800353e <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 8003590:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003592:	3301      	adds	r3, #1
 8003594:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003596:	7ebb      	ldrb	r3, [r7, #26]
 8003598:	b29b      	uxth	r3, r3
 800359a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800359c:	429a      	cmp	r2, r3
 800359e:	d3ca      	bcc.n	8003536 <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 80035a0:	e018      	b.n	80035d4 <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80035a8:	330d      	adds	r3, #13
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80035b6:	330d      	adds	r3, #13
 80035b8:	701a      	strb	r2, [r3, #0]
		if (pdev->pos_before_next_recom == 255)
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80035c0:	330d      	adds	r3, #13
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2bff      	cmp	r3, #255	; 0xff
 80035c6:	d105      	bne.n	80035d4 <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80035ce:	330d      	adds	r3, #13
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
}
 80035d4:	bf00      	nop
 80035d6:	3728      	adds	r7, #40	; 0x28
 80035d8:	46bd      	mov	sp, r7
 80035da:	bdb0      	pop	{r4, r5, r7, pc}

080035dc <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b0c6      	sub	sp, #280	; 0x118
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 80035e6:	2300      	movs	r3, #0
 80035e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80035f2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d108      	bne.n	800360c <VL53LX_load_patch+0x30>
		status = VL53LX_WrByte(Dev,
 80035fa:	1d3b      	adds	r3, r7, #4
 80035fc:	2200      	movs	r2, #0
 80035fe:	2185      	movs	r1, #133	; 0x85
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	f00d fdc3 	bl	801118c <VL53LX_WrByte>
 8003606:	4603      	mov	r3, r0
 8003608:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 800360c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003610:	2b00      	cmp	r3, #0
 8003612:	d103      	bne.n	800361c <VL53LX_load_patch+0x40>
		VL53LX_enable_powerforce(Dev);
 8003614:	1d3b      	adds	r3, r7, #4
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	f005 f9b5 	bl	8008986 <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 800361c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8003620:	1d3b      	adds	r3, r7, #4
 8003622:	f248 018c 	movw	r1, #32908	; 0x808c
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	f002 fa64 	bl	8005af4 <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 800362c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003630:	2b03      	cmp	r3, #3
 8003632:	d81b      	bhi.n	800366c <VL53LX_load_patch+0x90>
 8003634:	a201      	add	r2, pc, #4	; (adr r2, 800363c <VL53LX_load_patch+0x60>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	0800364d 	.word	0x0800364d
 8003640:	08003655 	.word	0x08003655
 8003644:	0800365d 	.word	0x0800365d
 8003648:	08003665 	.word	0x08003665
	case 0:
		patch_power = 0x00;
 800364c:	2300      	movs	r3, #0
 800364e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003652:	e00e      	b.n	8003672 <VL53LX_load_patch+0x96>
	case 1:
		patch_power = 0x10;
 8003654:	2310      	movs	r3, #16
 8003656:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800365a:	e00a      	b.n	8003672 <VL53LX_load_patch+0x96>
	case 2:
		patch_power = 0x20;
 800365c:	2320      	movs	r3, #32
 800365e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003662:	e006      	b.n	8003672 <VL53LX_load_patch+0x96>
	case 3:
		patch_power = 0x40;
 8003664:	2340      	movs	r3, #64	; 0x40
 8003666:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800366a:	e002      	b.n	8003672 <VL53LX_load_patch+0x96>
	default:
		patch_power = 0x00;
 800366c:	2300      	movs	r3, #0
 800366e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 8003672:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003676:	2b00      	cmp	r3, #0
 8003678:	d125      	bne.n	80036c6 <VL53LX_load_patch+0xea>

		comms_buffer[0] = 0x29;
 800367a:	f107 030c 	add.w	r3, r7, #12
 800367e:	2229      	movs	r2, #41	; 0x29
 8003680:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8003682:	f107 030c 	add.w	r3, r7, #12
 8003686:	22c9      	movs	r2, #201	; 0xc9
 8003688:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800368a:	f107 030c 	add.w	r3, r7, #12
 800368e:	220e      	movs	r2, #14
 8003690:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8003692:	f107 030c 	add.w	r3, r7, #12
 8003696:	2240      	movs	r2, #64	; 0x40
 8003698:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800369a:	f107 030c 	add.w	r3, r7, #12
 800369e:	2228      	movs	r2, #40	; 0x28
 80036a0:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 80036a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	f107 030c 	add.w	r3, r7, #12
 80036ac:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 80036ae:	f107 020c 	add.w	r2, r7, #12
 80036b2:	1d38      	adds	r0, r7, #4
 80036b4:	2306      	movs	r3, #6
 80036b6:	f240 4176 	movw	r1, #1142	; 0x476
 80036ba:	6800      	ldr	r0, [r0, #0]
 80036bc:	f00d fcfa 	bl	80110b4 <VL53LX_WriteMulti>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 80036c6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d123      	bne.n	8003716 <VL53LX_load_patch+0x13a>
		comms_buffer[0] = 0x03;
 80036ce:	f107 030c 	add.w	r3, r7, #12
 80036d2:	2203      	movs	r2, #3
 80036d4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 80036d6:	f107 030c 	add.w	r3, r7, #12
 80036da:	226d      	movs	r2, #109	; 0x6d
 80036dc:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 80036de:	f107 030c 	add.w	r3, r7, #12
 80036e2:	2203      	movs	r2, #3
 80036e4:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 80036e6:	f107 030c 	add.w	r3, r7, #12
 80036ea:	226f      	movs	r2, #111	; 0x6f
 80036ec:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 80036ee:	f107 030c 	add.w	r3, r7, #12
 80036f2:	2207      	movs	r2, #7
 80036f4:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 80036f6:	f107 030c 	add.w	r3, r7, #12
 80036fa:	2229      	movs	r2, #41	; 0x29
 80036fc:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 80036fe:	f107 020c 	add.w	r2, r7, #12
 8003702:	1d38      	adds	r0, r7, #4
 8003704:	2306      	movs	r3, #6
 8003706:	f240 4196 	movw	r1, #1174	; 0x496
 800370a:	6800      	ldr	r0, [r0, #0]
 800370c:	f00d fcd2 	bl	80110b4 <VL53LX_WriteMulti>
 8003710:	4603      	mov	r3, r0
 8003712:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8003716:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800371a:	2b00      	cmp	r3, #0
 800371c:	d113      	bne.n	8003746 <VL53LX_load_patch+0x16a>
		comms_buffer[0] = 0x00;
 800371e:	f107 030c 	add.w	r3, r7, #12
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8003726:	f107 030c 	add.w	r3, r7, #12
 800372a:	2207      	movs	r2, #7
 800372c:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 800372e:	f107 020c 	add.w	r2, r7, #12
 8003732:	1d38      	adds	r0, r7, #4
 8003734:	2302      	movs	r3, #2
 8003736:	f240 4172 	movw	r1, #1138	; 0x472
 800373a:	6800      	ldr	r0, [r0, #0]
 800373c:	f00d fcba 	bl	80110b4 <VL53LX_WriteMulti>
 8003740:	4603      	mov	r3, r0
 8003742:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 8003746:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800374a:	2b00      	cmp	r3, #0
 800374c:	d113      	bne.n	8003776 <VL53LX_load_patch+0x19a>
		comms_buffer[0] = 0x00;
 800374e:	f107 030c 	add.w	r3, r7, #12
 8003752:	2200      	movs	r2, #0
 8003754:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8003756:	f107 030c 	add.w	r3, r7, #12
 800375a:	2207      	movs	r2, #7
 800375c:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 800375e:	f107 020c 	add.w	r2, r7, #12
 8003762:	1d38      	adds	r0, r7, #4
 8003764:	2302      	movs	r3, #2
 8003766:	f240 4174 	movw	r1, #1140	; 0x474
 800376a:	6800      	ldr	r0, [r0, #0]
 800376c:	f00d fca2 	bl	80110b4 <VL53LX_WriteMulti>
 8003770:	4603      	mov	r3, r0
 8003772:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 8003776:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <VL53LX_load_patch+0x1b6>
		status = VL53LX_WrByte(Dev,
 800377e:	1d3b      	adds	r3, r7, #4
 8003780:	2201      	movs	r2, #1
 8003782:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	f00d fd00 	bl	801118c <VL53LX_WrByte>
 800378c:	4603      	mov	r3, r0
 800378e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 8003792:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003796:	2b00      	cmp	r3, #0
 8003798:	d108      	bne.n	80037ac <VL53LX_load_patch+0x1d0>
		status = VL53LX_WrByte(Dev,
 800379a:	1d3b      	adds	r3, r7, #4
 800379c:	2201      	movs	r2, #1
 800379e:	2185      	movs	r1, #133	; 0x85
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	f00d fcf3 	bl	801118c <VL53LX_WrByte>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 80037ac:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop

080037bc <VL53LX_unload_patch>:

VL53LX_Error VL53LX_unload_patch(VL53LX_DEV Dev)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 80037c4:	2300      	movs	r3, #0
 80037c6:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE)
 80037c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d106      	bne.n	80037de <VL53LX_unload_patch+0x22>
		status = VL53LX_WrByte(Dev,
 80037d0:	2200      	movs	r2, #0
 80037d2:	2185      	movs	r1, #133	; 0x85
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f00d fcd9 	bl	801118c <VL53LX_WrByte>
 80037da:	4603      	mov	r3, r0
 80037dc:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 80037de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <VL53LX_unload_patch+0x30>
		VL53LX_disable_powerforce(Dev);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f005 f8df 	bl	80089aa <VL53LX_disable_powerforce>

	if (status == VL53LX_ERROR_NONE)
 80037ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d107      	bne.n	8003804 <VL53LX_unload_patch+0x48>
		status = VL53LX_WrByte(Dev,
 80037f4:	2200      	movs	r2, #0
 80037f6:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f00d fcc6 	bl	801118c <VL53LX_WrByte>
 8003800:	4603      	mov	r3, r0
 8003802:	73fb      	strb	r3, [r7, #15]
		VL53LX_PATCH__CTRL, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d106      	bne.n	800381a <VL53LX_unload_patch+0x5e>
		status = VL53LX_WrByte(Dev,
 800380c:	2201      	movs	r2, #1
 800380e:	2185      	movs	r1, #133	; 0x85
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f00d fcbb 	bl	801118c <VL53LX_WrByte>
 8003816:	4603      	mov	r3, r0
 8003818:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800381a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8003826:	b5b0      	push	{r4, r5, r7, lr}
 8003828:	b08a      	sub	sp, #40	; 0x28
 800382a:	af04      	add	r7, sp, #16
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	460b      	mov	r3, r1
 8003830:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8003832:	2300      	movs	r3, #0
 8003834:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3318      	adds	r3, #24
 800383a:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003842:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 8003844:	2300      	movs	r3, #0
 8003846:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 8003848:	2162      	movs	r1, #98	; 0x62
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f004 f920 	bl	8007a90 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2204      	movs	r2, #4
 8003854:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2205      	movs	r2, #5
 8003860:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	pres->zone_results.active_zones    = 0;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 800386c:	2300      	movs	r3, #0
 800386e:	75bb      	strb	r3, [r7, #22]
 8003870:	e01b      	b.n	80038aa <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 8003872:	7dba      	ldrb	r2, [r7, #22]
 8003874:	4613      	mov	r3, r2
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4413      	add	r3, r2
 8003884:	3308      	adds	r3, #8
 8003886:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2200      	movs	r2, #0
 800388c:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2200      	movs	r2, #0
 8003892:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2200      	movs	r2, #0
 8003898:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80038a4:	7dbb      	ldrb	r3, [r7, #22]
 80038a6:	3301      	adds	r3, #1
 80038a8:	75bb      	strb	r3, [r7, #22]
 80038aa:	7dbb      	ldrb	r3, [r7, #22]
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d9e0      	bls.n	8003872 <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2205      	movs	r2, #5
 80038b4:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
	pres->zone_hists.active_zones      = 0;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2205      	movs	r2, #5
 80038c4:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
	pres->zone_cal.active_zones        = 0;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80038d0:	2300      	movs	r3, #0
 80038d2:	75bb      	strb	r3, [r7, #22]
 80038d4:	e039      	b.n	800394a <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 80038d6:	7dba      	ldrb	r2, [r7, #22]
 80038d8:	68f9      	ldr	r1, [r7, #12]
 80038da:	4613      	mov	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	f503 7365 	add.w	r3, r3, #916	; 0x394
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 80038ec:	7dba      	ldrb	r2, [r7, #22]
 80038ee:	68f9      	ldr	r1, [r7, #12]
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	f503 7366 	add.w	r3, r3, #920	; 0x398
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 8003902:	7dba      	ldrb	r2, [r7, #22]
 8003904:	68f9      	ldr	r1, [r7, #12]
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 8003918:	7dba      	ldrb	r2, [r7, #22]
 800391a:	68f9      	ldr	r1, [r7, #12]
 800391c:	4613      	mov	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 800392e:	7dba      	ldrb	r2, [r7, #22]
 8003930:	68f9      	ldr	r1, [r7, #12]
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003944:	7dbb      	ldrb	r3, [r7, #22]
 8003946:	3301      	adds	r3, #1
 8003948:	75bb      	strb	r3, [r7, #22]
 800394a:	7dbb      	ldrb	r3, [r7, #22]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d9c2      	bls.n	80038d6 <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	221e      	movs	r2, #30
 800395a:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	2200      	movs	r2, #0
 8003960:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2200      	movs	r2, #0
 8003966:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	2201      	movs	r2, #1
 800396c:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2201      	movs	r2, #1
 8003972:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2201      	movs	r2, #1
 8003978:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003980:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003988:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8003990:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2264      	movs	r2, #100	; 0x64
 8003996:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800399e:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80039ae:	3302      	adds	r3, #2
 80039b0:	2203      	movs	r2, #3
 80039b2:	701a      	strb	r2, [r3, #0]
	pdev->offset_results.active_results = 0;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80039ba:	3303      	adds	r3, #3
 80039bc:	2200      	movs	r2, #0
 80039be:	701a      	strb	r2, [r3, #0]



	pdev->gain_cal.standard_ranging_gain_factor =
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f240 72db 	movw	r2, #2011	; 0x7db
 80039c6:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f240 72c3 	movw	r2, #1987	; 0x7c3
 80039d0:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f004 f83f 	bl	8007a58 <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80039e0:	3310      	adds	r3, #16
 80039e2:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80039e6:	2100      	movs	r1, #0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f011 faff 	bl	8014fec <memset>
	pdev->bin_rec_pos = 0;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80039f4:	330c      	adds	r3, #12
 80039f6:	2200      	movs	r2, #0
 80039f8:	701a      	strb	r2, [r3, #0]
	pdev->pos_before_next_recom = 0;
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003a00:	330d      	adds	r3, #13
 8003a02:	2200      	movs	r2, #0
 8003a04:	701a      	strb	r2, [r3, #0]



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 8003a06:	78fb      	ldrb	r3, [r7, #3]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <VL53LX_data_init+0x1f8>
 8003a0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d104      	bne.n	8003a1e <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f8b7 	bl	8003b88 <VL53LX_read_p2p_data>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8003a1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d107      	bne.n	8003a36 <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f002 ffdf 	bl	80069f0 <VL53LX_init_refspadchar_config_struct>
 8003a32:	4603      	mov	r3, r0
 8003a34:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 8003a36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d107      	bne.n	8003a4e <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a44:	4618      	mov	r0, r3
 8003a46:	f002 fff7 	bl	8006a38 <VL53LX_init_ssc_config_struct>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10b      	bne.n	8003a6e <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003a62:	4619      	mov	r1, r3
 8003a64:	4610      	mov	r0, r2
 8003a66:	f003 f808 	bl	8006a7a <VL53LX_init_xtalk_config_struct>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003a6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d107      	bne.n	8003a86 <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f003 f86f 	bl	8006b60 <VL53LX_init_xtalk_extract_config_struct>
 8003a82:	4603      	mov	r3, r0
 8003a84:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003a86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d107      	bne.n	8003a9e <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003a94:	4618      	mov	r0, r3
 8003a96:	f003 f892 	bl	8006bbe <VL53LX_init_offset_cal_config_struct>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003a9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d107      	bne.n	8003ab6 <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8003aac:	4618      	mov	r0, r3
 8003aae:	f003 f8ad 	bl	8006c0c <VL53LX_init_zone_cal_config_struct>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003ab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10b      	bne.n	8003ad6 <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003aca:	4619      	mov	r1, r3
 8003acc:	4610      	mov	r0, r2
 8003ace:	f003 f8c1 	bl	8006c54 <VL53LX_init_hist_post_process_config_struct>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 8003ad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d107      	bne.n	8003aee <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f003 fac0 	bl	800706a <VL53LX_init_hist_gen3_dmax_config_struct>
 8003aea:	4603      	mov	r3, r0
 8003aec:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003aee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <VL53LX_data_init+0x2de>
		status = VL53LX_init_tuning_parm_storage_struct(
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	33f8      	adds	r3, #248	; 0xf8
 8003afa:	4618      	mov	r0, r3
 8003afc:	f003 f919 	bl	8006d32 <VL53LX_init_tuning_parm_storage_struct>
 8003b00:	4603      	mov	r3, r0
 8003b02:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 8003b04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d116      	bne.n	8003b3a <VL53LX_data_init+0x314>
		status = VL53LX_set_preset_mode(
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	7858      	ldrb	r0, [r3, #1]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	8b1c      	ldrh	r4, [r3, #24]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	689d      	ldr	r5, [r3, #8]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	6912      	ldr	r2, [r2, #16]
 8003b20:	6939      	ldr	r1, [r7, #16]
 8003b22:	6949      	ldr	r1, [r1, #20]
 8003b24:	9102      	str	r1, [sp, #8]
 8003b26:	9201      	str	r2, [sp, #4]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	462b      	mov	r3, r5
 8003b2c:	4622      	mov	r2, r4
 8003b2e:	4601      	mov	r1, r0
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fb3e 	bl	80041b2 <VL53LX_set_preset_mode>
 8003b36:	4603      	mov	r3, r0
 8003b38:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b40:	461a      	mov	r2, r3
 8003b42:	2118      	movs	r1, #24
 8003b44:	2000      	movs	r0, #0
 8003b46:	f008 fa30 	bl	800bfaa <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8003b50:	461a      	mov	r2, r3
 8003b52:	2118      	movs	r1, #24
 8003b54:	2000      	movs	r0, #0
 8003b56:	f008 fa28 	bl	800bfaa <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8003b60:	461a      	mov	r2, r3
 8003b62:	210c      	movs	r1, #12
 8003b64:	2000      	movs	r0, #0
 8003b66:	f004 fd33 	bl	80085d0 <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f007 fc24 	bl	800b3b8 <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f007 fb3b 	bl	800b1ec <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f007 fc47 	bl	800b40a <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8003b7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bdb0      	pop	{r4, r5, r7, pc}

08003b88 <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 8003b88:	b590      	push	{r4, r7, lr}
 8003b8a:	b091      	sub	sp, #68	; 0x44
 8003b8c:	af04      	add	r7, sp, #16
 8003b8e:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3318      	adds	r3, #24
 8003b9a:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	3348      	adds	r3, #72	; 0x48
 8003ba8:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 8003baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bac:	339c      	adds	r3, #156	; 0x9c
 8003bae:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8003bb0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d109      	bne.n	8003bcc <VL53LX_read_p2p_data+0x44>
		status = VL53LX_get_static_nvm_managed(
 8003bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bba:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f00b fbb0 	bl	800f326 <VL53LX_get_static_nvm_managed>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 8003bcc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d108      	bne.n	8003be6 <VL53LX_read_p2p_data+0x5e>
		status = VL53LX_get_customer_nvm_managed(
 8003bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd6:	3348      	adds	r3, #72	; 0x48
 8003bd8:	4619      	mov	r1, r3
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f00b fce1 	bl	800f5a2 <VL53LX_get_customer_nvm_managed>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 8003be6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d117      	bne.n	8003c1e <VL53LX_read_p2p_data+0x96>

		status = VL53LX_get_nvm_copy_data(
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	f203 3392 	addw	r3, r3, #914	; 0x392
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f00c fbdd 	bl	80103b6 <VL53LX_get_nvm_copy_data>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 8003c02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <VL53LX_read_p2p_data+0x96>
			VL53LX_copy_rtn_good_spads_to_buffer(
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	f203 3292 	addw	r2, r3, #914	; 0x392
 8003c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c12:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003c16:	4619      	mov	r1, r3
 8003c18:	4610      	mov	r0, r2
 8003c1a:	f004 fa2f 	bl	800807c <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 8003c1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10e      	bne.n	8003c44 <VL53LX_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	895b      	ldrh	r3, [r3, #10]
 8003c2a:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 8003c44:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d108      	bne.n	8003c5e <VL53LX_read_p2p_data+0xd6>
		status =
			VL53LX_read_nvm_optical_centre(
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	33c0      	adds	r3, #192	; 0xc0
 8003c50:	4619      	mov	r1, r3
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f00b fa1b 	bl	800f08e <VL53LX_read_nvm_optical_centre>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 8003c5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d108      	bne.n	8003c78 <VL53LX_read_p2p_data+0xf0>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	3360      	adds	r3, #96	; 0x60
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f00b fa31 	bl	800f0d4 <VL53LX_read_nvm_cal_peak_rate_map>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 8003c78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d12d      	bne.n	8003cdc <VL53LX_read_p2p_data+0x154>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 8003c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c82:	339c      	adds	r3, #156	; 0x9c
 8003c84:	4619      	mov	r1, r3
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f00b fa4a 	bl	800f120 <VL53LX_read_nvm_additional_offset_cal_data>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	889b      	ldrh	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d120      	bne.n	8003cdc <VL53LX_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d11c      	bne.n	8003cdc <VL53LX_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	2280      	movs	r2, #128	; 0x80
 8003ca6:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003cae:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	f893 03c2 	ldrb.w	r0, [r3, #962]	; 0x3c2
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	f893 43c3 	ldrb.w	r4, [r3, #963]	; 0x3c3
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	69f9      	ldr	r1, [r7, #28]
 8003cc6:	3102      	adds	r1, #2
 8003cc8:	9103      	str	r1, [sp, #12]
 8003cca:	9202      	str	r2, [sp, #8]
 8003ccc:	2238      	movs	r2, #56	; 0x38
 8003cce:	9201      	str	r2, [sp, #4]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	23ff      	movs	r3, #255	; 0xff
 8003cd4:	22c7      	movs	r2, #199	; 0xc7
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	f006 f97a 	bl	8009fd0 <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 8003cdc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d12f      	bne.n	8003d44 <VL53LX_read_p2p_data+0x1bc>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 8003ce4:	f107 030c 	add.w	r3, r7, #12
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f00b fa39 	bl	800f166 <VL53LX_read_nvm_fmt_range_results_data>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 8003cfa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d120      	bne.n	8003d44 <VL53LX_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8003d02:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8003d0a:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8003d12:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8003d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d16:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d006      	beq.n	8003d32 <VL53LX_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8003d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d26:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8003d30:	e003      	b.n	8003d3a <VL53LX_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	2214      	movs	r2, #20
 8003d36:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d40:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 8003d44:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10b      	bne.n	8003d64 <VL53LX_read_p2p_data+0x1dc>
		status =
			VL53LX_RdWord(
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003d52:	3304      	adds	r3, #4
 8003d54:	461a      	mov	r2, r3
 8003d56:	21de      	movs	r1, #222	; 0xde
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f00d faa7 	bl	80112ac <VL53LX_RdWord>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8003d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d66:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8003d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6e:	d204      	bcs.n	8003d7a <VL53LX_read_p2p_data+0x1f2>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8003d76:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
	}



	if (status == VL53LX_ERROR_NONE)
 8003d7a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d108      	bne.n	8003d94 <VL53LX_read_p2p_data+0x20c>
		status =
			VL53LX_get_mode_mitigation_roi(
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	33bc      	adds	r3, #188	; 0xbc
 8003d86:	4619      	mov	r1, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f91a 	bl	8003fc2 <VL53LX_get_mode_mitigation_roi>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d114      	bne.n	8003dc8 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8003d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10f      	bne.n	8003dc8 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8003db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8003dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8003dc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3734      	adds	r7, #52	; 0x34
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd90      	pop	{r4, r7, pc}

08003dd4 <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3318      	adds	r3, #24
 8003de6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003dee:	3304      	adds	r3, #4
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <VL53LX_set_inter_measurement_period_ms+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003df6:	23f1      	movs	r3, #241	; 0xf1
 8003df8:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 8003dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10e      	bne.n	8003e20 <VL53LX_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003e0e:	3304      	adds	r3, #4
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	}

	LOG_FUNCTION_END(status);

	return status;
 8003e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3318      	adds	r3, #24
 8003e46:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <VL53LX_set_timeouts_us+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003e52:	23f1      	movs	r3, #241	; 0xf1
 8003e54:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 8003e56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d11b      	bne.n	8003e96 <VL53LX_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f8b3 12de 	ldrh.w	r1, [r3, #734]	; 0x2de
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	f502 724d 	add.w	r2, r2, #820	; 0x334
 8003e82:	9201      	str	r2, [sp, #4]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	460b      	mov	r3, r1
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	68b8      	ldr	r0, [r7, #8]
 8003e8e:	f004 ff42 	bl	8008d16 <VL53LX_calc_timeout_register_values>
 8003e92:	4603      	mov	r3, r0
 8003e94:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8003e96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b088      	sub	sp, #32
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
 8003eae:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3318      	adds	r3, #24
 8003eb8:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <VL53LX_get_timeouts_us+0x2e>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003ecc:	23f1      	movs	r3, #241	; 0xf1
 8003ece:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 8003ed0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d14a      	bne.n	8003f6e <VL53LX_get_timeouts_us+0xcc>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	f8b3 22de 	ldrh.w	r2, [r3, #734]	; 0x2de
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	f004 fd8e 	bl	8008a08 <VL53LX_calc_macro_period_us>
 8003eec:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
			VL53LX_calc_timeout_us(
 8003ef4:	6979      	ldr	r1, [r7, #20]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f004 fe4d 	bl	8008b96 <VL53LX_calc_timeout_us>
 8003efc:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		timeout_encoded =
 8003f08:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8003f0a:	8a7b      	ldrh	r3, [r7, #18]
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8003f16:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8003f18:	4413      	add	r3, r2
 8003f1a:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8003f1c:	8a7b      	ldrh	r3, [r7, #18]
 8003f1e:	6979      	ldr	r1, [r7, #20]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f004 fe9d 	bl	8008c60 <VL53LX_calc_decoded_timeout_us>
 8003f26:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
		timeout_encoded =
 8003f32:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8003f34:	8a7b      	ldrh	r3, [r7, #18]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8003f40:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8003f42:	4413      	add	r3, r2
 8003f44:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8003f46:	8a7b      	ldrh	r3, [r7, #18]
 8003f48:	6979      	ldr	r1, [r7, #20]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f004 fe88 	bl	8008c60 <VL53LX_calc_decoded_timeout_us>
 8003f50:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8003f6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3720      	adds	r7, #32
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003f84:	2300      	movs	r3, #0
 8003f86:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3318      	adds	r3, #24
 8003f8c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	7858      	ldrb	r0, [r3, #1]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	7819      	ldrb	r1, [r3, #0]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f203 335b 	addw	r3, r3, #859	; 0x35b
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f005 fe94 	bl	8009cca <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	7898      	ldrb	r0, [r3, #2]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	78d9      	ldrb	r1, [r3, #3]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f005 fec9 	bl	8009d48 <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8003fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b086      	sub	sp, #24
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3318      	adds	r3, #24
 8003fd4:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f893 33c2 	ldrb.w	r3, [r3, #962]	; 0x3c2
 8003fe8:	f107 020e 	add.w	r2, r7, #14
 8003fec:	f107 010d 	add.w	r1, r7, #13
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f008 f883 	bl	800c0fc <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8003ff6:	7bba      	ldrb	r2, [r7, #14]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8003ffc:	7b7a      	ldrb	r2, [r7, #13]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f893 33c3 	ldrb.w	r3, [r3, #963]	; 0x3c3
 8004008:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	091b      	lsrs	r3, r3, #4
 800400e:	b2da      	uxtb	r2, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	b2da      	uxtb	r2, r3
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8004020:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <VL53LX_init_zone_config_histogram_bins>:

VL53LX_Error VL53LX_init_zone_config_histogram_bins(
	VL53LX_zone_config_t   *pdata)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004034:	2300      	movs	r3, #0
 8004036:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8004038:	2300      	movs	r3, #0
 800403a:	73fb      	strb	r3, [r7, #15]
 800403c:	e008      	b.n	8004050 <VL53LX_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	4413      	add	r3, r2
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	for (i = 0; i < pdata->max_zones; i++)
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	3301      	adds	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	7bfa      	ldrb	r2, [r7, #15]
 8004056:	429a      	cmp	r2, r3
 8004058:	d3f1      	bcc.n	800403e <VL53LX_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 800405a:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <VL53LX_set_zone_config>:

VL53LX_Error VL53LX_set_zone_config(
	VL53LX_DEV                 Dev,
	VL53LX_zone_config_t      *pzone_cfg)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004074:	2300      	movs	r3, #0
 8004076:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3318      	adds	r3, #24
 800407c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	331c      	adds	r3, #28
 8004088:	2214      	movs	r2, #20
 800408a:	4619      	mov	r1, r3
 800408c:	f010 ffa0 	bl	8014fd0 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781a      	ldrb	r2, [r3, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	785a      	ldrb	r2, [r3, #1]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53LX_init_zone_config_histogram_bins(&pdev->zone_cfg);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	33c2      	adds	r3, #194	; 0xc2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff ffbf 	bl	800402c <VL53LX_init_zone_config_histogram_bins>
 80040ae:	4603      	mov	r3, r0
 80040b0:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	785b      	ldrb	r3, [r3, #1]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d104      	bne.n	80040c4 <VL53LX_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 80040c2:	e00f      	b.n	80040e4 <VL53LX_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53LX_MAX_USER_ZONES)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	785b      	ldrb	r3, [r3, #1]
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d807      	bhi.n	80040dc <VL53LX_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	785b      	ldrb	r3, [r3, #1]
 80040d0:	3301      	adds	r3, #1
 80040d2:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 80040da:	e003      	b.n	80040e4 <VL53LX_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2206      	movs	r2, #6
 80040e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
				VL53LX_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 80040e4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	607a      	str	r2, [r7, #4]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	460b      	mov	r3, r1
 80040fe:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004100:	2300      	movs	r3, #0
 8004102:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3318      	adds	r3, #24
 8004108:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800410a:	7afb      	ldrb	r3, [r7, #11]
 800410c:	2b21      	cmp	r3, #33	; 0x21
 800410e:	d030      	beq.n	8004172 <VL53LX_get_preset_mode_timing_cfg+0x82>
 8004110:	2b21      	cmp	r3, #33	; 0x21
 8004112:	dc43      	bgt.n	800419c <VL53LX_get_preset_mode_timing_cfg+0xac>
 8004114:	2b1b      	cmp	r3, #27
 8004116:	d002      	beq.n	800411e <VL53LX_get_preset_mode_timing_cfg+0x2e>
 8004118:	2b1e      	cmp	r3, #30
 800411a:	d015      	beq.n	8004148 <VL53LX_get_preset_mode_timing_cfg+0x58>
 800411c:	e03e      	b.n	800419c <VL53LX_get_preset_mode_timing_cfg+0xac>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
		*pphasecal_config_timeout_us =
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	601a      	str	r2, [r3, #0]

	break;
 8004146:	e02c      	b.n	80041a2 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
		*pphasecal_config_timeout_us =
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	601a      	str	r2, [r3, #0]
	break;
 8004170:	e017      	b.n	80041a2 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
		*pphasecal_config_timeout_us =
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	601a      	str	r2, [r3, #0]
	break;
 800419a:	e002      	b.n	80041a2 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 800419c:	23fc      	movs	r3, #252	; 0xfc
 800419e:	75fb      	strb	r3, [r7, #23]
		break;
 80041a0:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80041a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b096      	sub	sp, #88	; 0x58
 80041b6:	af06      	add	r7, sp, #24
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	607b      	str	r3, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	72fb      	strb	r3, [r7, #11]
 80041c0:	4613      	mov	r3, r2
 80041c2:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80041c4:	2300      	movs	r3, #0
 80041c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_LLDriverData_t *pdev =
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3318      	adds	r3, #24
 80041ce:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80041d6:	637b      	str	r3, [r7, #52]	; 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 80041d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041da:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80041de:	633b      	str	r3, [r7, #48]	; 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80041e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e2:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 80041ee:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	f203 331e 	addw	r3, r3, #798	; 0x31e
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80041fe:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8004200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004202:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004206:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800420e:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8004210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004212:	33c2      	adds	r3, #194	; 0xc2
 8004214:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8004216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004218:	33f8      	adds	r3, #248	; 0xf8
 800421a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 800421c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421e:	7afa      	ldrb	r2, [r7, #11]
 8004220:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004226:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8004228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800422c:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800422e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004230:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004232:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 8004234:	2103      	movs	r1, #3
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f003 fc2a 	bl	8007a90 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 800423c:	7afb      	ldrb	r3, [r7, #11]
 800423e:	2b21      	cmp	r3, #33	; 0x21
 8004240:	d02e      	beq.n	80042a0 <VL53LX_set_preset_mode+0xee>
 8004242:	2b21      	cmp	r3, #33	; 0x21
 8004244:	dc40      	bgt.n	80042c8 <VL53LX_set_preset_mode+0x116>
 8004246:	2b1b      	cmp	r3, #27
 8004248:	d002      	beq.n	8004250 <VL53LX_set_preset_mode+0x9e>
 800424a:	2b1e      	cmp	r3, #30
 800424c:	d014      	beq.n	8004278 <VL53LX_set_preset_mode+0xc6>
 800424e:	e03b      	b.n	80042c8 <VL53LX_set_preset_mode+0x116>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	9304      	str	r3, [sp, #16]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	9303      	str	r3, [sp, #12]
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	9302      	str	r3, [sp, #8]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004268:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800426a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800426c:	f003 f941 	bl	80074f2 <VL53LX_preset_mode_histogram_long_range>
 8004270:	4603      	mov	r3, r0
 8004272:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004276:	e02b      	b.n	80042d0 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	9304      	str	r3, [sp, #16]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	9303      	str	r3, [sp, #12]
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	9302      	str	r3, [sp, #8]
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004290:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004292:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004294:	f003 f9cb 	bl	800762e <VL53LX_preset_mode_histogram_medium_range>
 8004298:	4603      	mov	r3, r0
 800429a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800429e:	e017      	b.n	80042d0 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	9304      	str	r3, [sp, #16]
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	9303      	str	r3, [sp, #12]
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	9302      	str	r3, [sp, #8]
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042bc:	f003 fa55 	bl	800776a <VL53LX_preset_mode_histogram_short_range>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80042c6:	e003      	b.n	80042d0 <VL53LX_set_preset_mode+0x11e>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 80042c8:	23fc      	movs	r3, #252	; 0xfc
 80042ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 80042ce:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 80042d0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <VL53LX_set_preset_mode+0x132>

		pstatic->dss_config__target_total_rate_mcps =
 80042d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042da:	893a      	ldrh	r2, [r7, #8]
 80042dc:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	893a      	ldrh	r2, [r7, #8]
 80042e2:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 80042e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d108      	bne.n	80042fe <VL53LX_set_preset_mode+0x14c>
		status =
			VL53LX_set_timeouts_us(
 80042ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f7ff fd9c 	bl	8003e30 <VL53LX_set_timeouts_us>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 80042fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <VL53LX_set_preset_mode+0x162>
		status =
			VL53LX_set_inter_measurement_period_ms(
 8004306:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f7ff fd63 	bl	8003dd4 <VL53LX_set_inter_measurement_period_ms>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8004314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004316:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 800431a:	3301      	adds	r3, #1
 800431c:	b2da      	uxtb	r2, r3
 800431e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004320:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f003 ffc8 	bl	80082bc <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 800432c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004330:	4618      	mov	r0, r3
 8004332:	3740      	adds	r7, #64	; 0x40
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b0d2      	sub	sp, #328	; 0x148
 800433c:	af00      	add	r7, sp, #0
 800433e:	1d3b      	adds	r3, r7, #4
 8004340:	6018      	str	r0, [r3, #0]
 8004342:	4608      	mov	r0, r1
 8004344:	4611      	mov	r1, r2
 8004346:	1cfb      	adds	r3, r7, #3
 8004348:	4602      	mov	r2, r0
 800434a:	701a      	strb	r2, [r3, #0]
 800434c:	1cbb      	adds	r3, r7, #2
 800434e:	460a      	mov	r2, r1
 8004350:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004352:	2300      	movs	r3, #0
 8004354:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004358:	1d3b      	adds	r3, r7, #4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3318      	adds	r3, #24
 800435e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53LX_LLDriverResults_t  *pres =
 8004362:	1d3b      	adds	r3, r7, #4
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800436a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800436e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004372:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8004376:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800437a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800437e:	3348      	adds	r3, #72	; 0x48
 8004380:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8004384:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004388:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 800438c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8004390:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004394:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8004398:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800439c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80043a0:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80043a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80043a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80043ac:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80043b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80043b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80043b8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80043bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 80043c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80043c4:	332c      	adds	r3, #44	; 0x2c
 80043c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 80043ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80043ce:	3348      	adds	r3, #72	; 0x48
 80043d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 80043d4:	f107 030c 	add.w	r3, r7, #12
 80043d8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 80043dc:	2300      	movs	r3, #0
 80043de:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 80043f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80043f8:	1cfa      	adds	r2, r7, #3
 80043fa:	7812      	ldrb	r2, [r2, #0]
 80043fc:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 80043fe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004402:	791b      	ldrb	r3, [r3, #4]
 8004404:	b25b      	sxtb	r3, r3
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800440c:	1cfb      	adds	r3, r7, #3
 800440e:	f993 3000 	ldrsb.w	r3, [r3]
 8004412:	4313      	orrs	r3, r2
 8004414:	b25b      	sxtb	r3, r3
 8004416:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8004418:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800441c:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 800441e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004422:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53LX_set_user_zone(
 8004426:	3336      	adds	r3, #54	; 0x36
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800442e:	4413      	add	r3, r2
 8004430:	1d9a      	adds	r2, r3, #6
 8004432:	1d3b      	adds	r3, r7, #4
 8004434:	4611      	mov	r1, r2
 8004436:	6818      	ldr	r0, [r3, #0]
 8004438:	f7ff fd9f 	bl	8003f7a <VL53LX_set_user_zone>
 800443c:	4603      	mov	r3, r0
 800443e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8004442:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004446:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d016      	beq.n	800447c <VL53LX_init_and_start_range+0x144>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 800444e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004452:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004456:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004464:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004468:	4413      	add	r3, r2
 800446a:	1c9a      	adds	r2, r3, #2
 800446c:	1d3b      	adds	r3, r7, #4
 800446e:	4611      	mov	r1, r2
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	f001 fad7 	bl	8005a24 <VL53LX_set_zone_dss_config>
 8004476:	4603      	mov	r3, r0
 8004478:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 800447c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004480:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10d      	bne.n	80044a8 <VL53LX_init_and_start_range+0x170>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 800448c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8004494:	2b01      	cmp	r3, #1
 8004496:	d107      	bne.n	80044a8 <VL53LX_init_and_start_range+0x170>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8004498:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800449c:	f8b3 22a4 	ldrh.w	r2, [r3, #676]	; 0x2a4
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80044a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80044a4:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 80044a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80044ac:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80044b0:	3312      	adds	r3, #18
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2bff      	cmp	r3, #255	; 0xff
 80044b6:	d106      	bne.n	80044c6 <VL53LX_init_and_start_range+0x18e>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 80044b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80044bc:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80044c0:	3312      	adds	r3, #18
 80044c2:	2200      	movs	r2, #0
 80044c4:	701a      	strb	r2, [r3, #0]


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80044c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80044ca:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80044ce:	3311      	adds	r3, #17
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d133      	bne.n	800453e <VL53LX_init_and_start_range+0x206>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 80044d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80044da:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80044de:	3312      	adds	r3, #18
 80044e0:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d12b      	bne.n	800453e <VL53LX_init_and_start_range+0x206>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 80044e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80044ea:	f893 2320 	ldrb.w	r2, [r3, #800]	; 0x320
		pdev->low_power_auto_data.saved_interrupt_config =
 80044ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80044f2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80044f6:	3313      	adds	r3, #19
 80044f8:	701a      	strb	r2, [r3, #0]

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 80044fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		if ((pdev->dyn_cfg.system__sequence_config & (
 8004504:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004508:	f893 335d 	ldrb.w	r3, [r3, #861]	; 0x35d
 800450c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004510:	2b00      	cmp	r3, #0
 8004512:	d109      	bne.n	8004528 <VL53LX_init_and_start_range+0x1f0>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8004514:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004518:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800451c:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 800451e:	b21a      	sxth	r2, r3
 8004520:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004524:	825a      	strh	r2, [r3, #18]
 8004526:	e003      	b.n	8004530 <VL53LX_init_and_start_range+0x1f8>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8004528:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800452c:	2200      	movs	r2, #0
 800452e:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8004530:	1cbb      	adds	r3, r7, #2
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b04      	cmp	r3, #4
 8004536:	d802      	bhi.n	800453e <VL53LX_init_and_start_range+0x206>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8004538:	1cbb      	adds	r3, r7, #2
 800453a:	2205      	movs	r2, #5
 800453c:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800453e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004542:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004546:	3311      	adds	r3, #17
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d114      	bne.n	8004578 <VL53LX_init_and_start_range+0x240>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800454e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004552:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004556:	3312      	adds	r3, #18
 8004558:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800455a:	2b01      	cmp	r3, #1
 800455c:	d10c      	bne.n	8004578 <VL53LX_init_and_start_range+0x240>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800455e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004562:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004566:	3313      	adds	r3, #19
 8004568:	781a      	ldrb	r2, [r3, #0]
		pdev->gen_cfg.system__interrupt_config_gpio =
 800456a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800456e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 8004572:	1cbb      	adds	r3, r7, #2
 8004574:	2206      	movs	r2, #6
 8004576:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 8004578:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <VL53LX_init_and_start_range+0x256>
		status = VL53LX_save_cfg_data(Dev);
 8004580:	1d3b      	adds	r3, r7, #4
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	f005 fe8e 	bl	800a2a4 <VL53LX_save_cfg_data>
 8004588:	4603      	mov	r3, r0
 800458a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 800458e:	1cbb      	adds	r3, r7, #2
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	3b01      	subs	r3, #1
 8004594:	2b05      	cmp	r3, #5
 8004596:	d827      	bhi.n	80045e8 <VL53LX_init_and_start_range+0x2b0>
 8004598:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <VL53LX_init_and_start_range+0x268>)
 800459a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459e:	bf00      	nop
 80045a0:	080045e1 	.word	0x080045e1
 80045a4:	080045d9 	.word	0x080045d9
 80045a8:	080045d1 	.word	0x080045d1
 80045ac:	080045c9 	.word	0x080045c9
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045b9 	.word	0x080045b9
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80045be:	e017      	b.n	80045f0 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 80045c0:	230d      	movs	r3, #13
 80045c2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80045c6:	e013      	b.n	80045f0 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 80045c8:	2324      	movs	r3, #36	; 0x24
 80045ca:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80045ce:	e00f      	b.n	80045f0 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 80045d0:	2344      	movs	r3, #68	; 0x44
 80045d2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80045d6:	e00b      	b.n	80045f0 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 80045d8:	235a      	movs	r3, #90	; 0x5a
 80045da:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80045de:	e007      	b.n	80045f0 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 80045e0:	2371      	movs	r3, #113	; 0x71
 80045e2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80045e6:	e003      	b.n	80045f0 <VL53LX_init_and_start_range+0x2b8>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 80045e8:	2383      	movs	r3, #131	; 0x83
 80045ea:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80045ee:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 80045f0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80045f4:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 80045f8:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 80045fc:	f107 030c 	add.w	r3, r7, #12
 8004600:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8004604:	2300      	movs	r3, #0
 8004606:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800460a:	e00b      	b.n	8004624 <VL53LX_init_and_start_range+0x2ec>
		*pbuffer++ = 0;
 800460c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8004616:	2200      	movs	r2, #0
 8004618:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 800461a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800461e:	3301      	adds	r3, #1
 8004620:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8004624:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8004628:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800462c:	429a      	cmp	r2, r3
 800462e:	d3ed      	bcc.n	800460c <VL53LX_init_and_start_range+0x2d4>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 8004630:	1cbb      	adds	r3, r7, #2
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b05      	cmp	r3, #5
 8004636:	d917      	bls.n	8004668 <VL53LX_init_and_start_range+0x330>
 8004638:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800463c:	2b00      	cmp	r3, #0
 800463e:	d113      	bne.n	8004668 <VL53LX_init_and_start_range+0x330>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004640:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004644:	f1c3 0301 	rsb	r3, r3, #1
 8004648:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800464c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 8004650:	f107 020c 	add.w	r2, r7, #12
 8004654:	4413      	add	r3, r2
 8004656:	461a      	mov	r2, r3
 8004658:	210b      	movs	r1, #11
 800465a:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800465e:	f00a fdad 	bl	800f1bc <VL53LX_i2c_encode_static_nvm_managed>
 8004662:	4603      	mov	r3, r0
 8004664:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8004668:	1cbb      	adds	r3, r7, #2
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b04      	cmp	r3, #4
 800466e:	d917      	bls.n	80046a0 <VL53LX_init_and_start_range+0x368>
 8004670:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004674:	2b00      	cmp	r3, #0
 8004676:	d113      	bne.n	80046a0 <VL53LX_init_and_start_range+0x368>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004678:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800467c:	f1c3 030d 	rsb	r3, r3, #13
 8004680:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004684:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 8004688:	f107 020c 	add.w	r2, r7, #12
 800468c:	4413      	add	r3, r2
 800468e:	461a      	mov	r2, r3
 8004690:	2117      	movs	r1, #23
 8004692:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8004696:	f00a fe6d 	bl	800f374 <VL53LX_i2c_encode_customer_nvm_managed>
 800469a:	4603      	mov	r3, r0
 800469c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 80046a0:	1cbb      	adds	r3, r7, #2
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d917      	bls.n	80046d8 <VL53LX_init_and_start_range+0x3a0>
 80046a8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d113      	bne.n	80046d8 <VL53LX_init_and_start_range+0x3a0>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80046b0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80046b4:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 80046b8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80046bc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_config(
 80046c0:	f107 020c 	add.w	r2, r7, #12
 80046c4:	4413      	add	r3, r2
 80046c6:	461a      	mov	r2, r3
 80046c8:	2120      	movs	r1, #32
 80046ca:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80046ce:	f00a ffb3 	bl	800f638 <VL53LX_i2c_encode_static_config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80046d8:	1cbb      	adds	r3, r7, #2
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d917      	bls.n	8004710 <VL53LX_init_and_start_range+0x3d8>
 80046e0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d113      	bne.n	8004710 <VL53LX_init_and_start_range+0x3d8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80046e8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80046ec:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 80046f0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80046f4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_general_config(
 80046f8:	f107 020c 	add.w	r2, r7, #12
 80046fc:	4413      	add	r3, r2
 80046fe:	461a      	mov	r2, r3
 8004700:	2116      	movs	r1, #22
 8004702:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004706:	f00b f87a 	bl	800f7fe <VL53LX_i2c_encode_general_config>
 800470a:	4603      	mov	r3, r0
 800470c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8004710:	1cbb      	adds	r3, r7, #2
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d917      	bls.n	8004748 <VL53LX_init_and_start_range+0x410>
 8004718:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800471c:	2b00      	cmp	r3, #0
 800471e:	d113      	bne.n	8004748 <VL53LX_init_and_start_range+0x410>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004720:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004724:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8004728:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800472c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_timing_config(
 8004730:	f107 020c 	add.w	r2, r7, #12
 8004734:	4413      	add	r3, r2
 8004736:	461a      	mov	r2, r3
 8004738:	2117      	movs	r1, #23
 800473a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800473e:	f00b f8e2 	bl	800f906 <VL53LX_i2c_encode_timing_config>
 8004742:	4603      	mov	r3, r0
 8004744:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8004748:	1cbb      	adds	r3, r7, #2
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d036      	beq.n	80047be <VL53LX_init_and_start_range+0x486>
 8004750:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004754:	2b00      	cmp	r3, #0
 8004756:	d132      	bne.n	80047be <VL53LX_init_and_start_range+0x486>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004758:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800475c:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8004760:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8004764:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004768:	791b      	ldrb	r3, [r3, #4]
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b00      	cmp	r3, #0
 8004770:	d017      	beq.n	80047a2 <VL53LX_init_and_start_range+0x46a>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8004772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004776:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	b2da      	uxtb	r2, r3
 800477e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004782:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8004784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004788:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	b2da      	uxtb	r2, r3
 8004790:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004794:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800479a:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 800479c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047a0:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80047a2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_dynamic_config(
 80047a6:	f107 020c 	add.w	r2, r7, #12
 80047aa:	4413      	add	r3, r2
 80047ac:	461a      	mov	r2, r3
 80047ae:	2112      	movs	r1, #18
 80047b0:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80047b4:	f00b f929 	bl	800fa0a <VL53LX_i2c_encode_dynamic_config>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 80047be:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d113      	bne.n	80047ee <VL53LX_init_and_start_range+0x4b6>

		i2c_buffer_offset_bytes =
 80047c6:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80047ca:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 80047ce:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80047d2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_system_control(
 80047d6:	f107 020c 	add.w	r2, r7, #12
 80047da:	4413      	add	r3, r2
 80047dc:	461a      	mov	r2, r3
 80047de:	2105      	movs	r1, #5
 80047e0:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80047e4:	f00b f996 	bl	800fb14 <VL53LX_i2c_encode_system_control>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 80047ee:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10c      	bne.n	8004810 <VL53LX_init_and_start_range+0x4d8>
		status =
			VL53LX_WriteMulti(
 80047f6:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80047fa:	f107 020c 	add.w	r2, r7, #12
 80047fe:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 8004802:	1d38      	adds	r0, r7, #4
 8004804:	6800      	ldr	r0, [r0, #0]
 8004806:	f00c fc55 	bl	80110b4 <VL53LX_WriteMulti>
 800480a:	4603      	mov	r3, r0
 800480c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 8004810:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <VL53LX_init_and_start_range+0x4ee>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 8004818:	1d3b      	adds	r3, r7, #4
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	f003 f968 	bl	8007af0 <VL53LX_update_ll_driver_rd_state>
 8004820:	4603      	mov	r3, r0
 8004822:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53LX_ERROR_NONE)
 8004826:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <VL53LX_init_and_start_range+0x504>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 800482e:	1d3b      	adds	r3, r7, #4
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	f003 fafd 	bl	8007e30 <VL53LX_update_ll_driver_cfg_state>
 8004836:	4603      	mov	r3, r0
 8004838:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 800483c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8004840:	4618      	mov	r0, r3
 8004842:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop

0800484c <VL53LX_stop_range>:


VL53LX_Error VL53LX_stop_range(
	VL53LX_DEV     Dev)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004854:	2300      	movs	r3, #0
 8004856:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev =
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3318      	adds	r3, #24
 800485c:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004864:	60fb      	str	r3, [r7, #12]
			VL53LXDevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 800486c:	b25b      	sxtb	r3, r3
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	b25b      	sxtb	r3, r3
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8004874:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004878:	b25b      	sxtb	r3, r3
 800487a:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
			 VL53LX_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53LX_set_system_control(
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004888:	4619      	mov	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f00b f97d 	bl	800fb8a <VL53LX_set_system_control>
 8004890:	4603      	mov	r3, r0
 8004892:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53LX_init_ll_driver_state(
 80048a6:	2103      	movs	r1, #3
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f003 f8f1 	bl	8007a90 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 80048b4:	3301      	adds	r3, #1
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80048be:	4619      	mov	r1, r3
 80048c0:	4610      	mov	r0, r2
 80048c2:	f003 fcfb 	bl	80082bc <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f003 fd2d 	bl	8008326 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80048d2:	3311      	adds	r3, #17
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d102      	bne.n	80048e0 <VL53LX_stop_range+0x94>
		VL53LX_low_power_auto_data_stop_range(Dev);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f006 fddc 	bl	800b498 <VL53LX_low_power_auto_data_stop_range>

	return status;
 80048e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b0c8      	sub	sp, #288	; 0x120
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	1d3b      	adds	r3, r7, #4
 80048f4:	6018      	str	r0, [r3, #0]
 80048f6:	460a      	mov	r2, r1
 80048f8:	1cfb      	adds	r3, r7, #3
 80048fa:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004902:	1d3b      	adds	r3, r7, #4
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3318      	adds	r3, #24
 8004908:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 800490c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004910:	f203 3366 	addw	r3, r3, #870	; 0x366
 8004914:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 8004918:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800491c:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8004920:	3318      	adds	r3, #24
 8004922:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8004926:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800492a:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 800492e:	331c      	adds	r3, #28
 8004930:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 8004934:	2388      	movs	r3, #136	; 0x88
 8004936:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8004946:	1cfb      	adds	r3, r7, #3
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d008      	beq.n	8004960 <VL53LX_get_measurement_results+0x74>
 800494e:	2b02      	cmp	r3, #2
 8004950:	d10d      	bne.n	800496e <VL53LX_get_measurement_results+0x82>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8004952:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8004956:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800495a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800495e:	e00a      	b.n	8004976 <VL53LX_get_measurement_results+0x8a>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8004960:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8004964:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8004968:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800496c:	e003      	b.n	8004976 <VL53LX_get_measurement_results+0x8a>
	default:
		i2c_buffer_size_bytes =
 800496e:	232c      	movs	r3, #44	; 0x2c
 8004970:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8004974:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 8004976:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10c      	bne.n	8004998 <VL53LX_get_measurement_results+0xac>
		status =
			VL53LX_ReadMulti(
 800497e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8004982:	f107 0208 	add.w	r2, r7, #8
 8004986:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800498a:	1d38      	adds	r0, r7, #4
 800498c:	6800      	ldr	r0, [r0, #0]
 800498e:	f00c fbc7 	bl	8011120 <VL53LX_ReadMulti>
 8004992:	4603      	mov	r3, r0
 8004994:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 8004998:	1cfb      	adds	r3, r7, #3
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d917      	bls.n	80049d0 <VL53LX_get_measurement_results+0xe4>
 80049a0:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d113      	bne.n	80049d0 <VL53LX_get_measurement_results+0xe4>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80049a8:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80049ac:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 80049b0:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80049b4:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_debug_results(
 80049b8:	f107 0208 	add.w	r2, r7, #8
 80049bc:	4413      	add	r3, r2
 80049be:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80049c2:	4619      	mov	r1, r3
 80049c4:	2038      	movs	r0, #56	; 0x38
 80049c6:	f00b fa5e 	bl	800fe86 <VL53LX_i2c_decode_debug_results>
 80049ca:	4603      	mov	r3, r0
 80049cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 80049d0:	1cfb      	adds	r3, r7, #3
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d017      	beq.n	8004a08 <VL53LX_get_measurement_results+0x11c>
 80049d8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d113      	bne.n	8004a08 <VL53LX_get_measurement_results+0x11c>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80049e0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80049e4:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80049e8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80049ec:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_core_results(
 80049f0:	f107 0208 	add.w	r2, r7, #8
 80049f4:	4413      	add	r3, r2
 80049f6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80049fa:	4619      	mov	r1, r3
 80049fc:	2021      	movs	r0, #33	; 0x21
 80049fe:	f00b f9e1 	bl	800fdc4 <VL53LX_i2c_decode_core_results>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 8004a08:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d110      	bne.n	8004a32 <VL53LX_get_measurement_results+0x146>

		i2c_buffer_offset_bytes = 0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004a16:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_system_results(
 8004a1a:	f107 0208 	add.w	r2, r7, #8
 8004a1e:	4413      	add	r3, r2
 8004a20:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004a24:	4619      	mov	r1, r3
 8004a26:	202c      	movs	r0, #44	; 0x2c
 8004a28:	f00b f8d6 	bl	800fbd8 <VL53LX_i2c_decode_system_results>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8004a32:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 8004a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a44:	b0a0      	sub	sp, #128	; 0x80
 8004a46:	af06      	add	r7, sp, #24
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	607a      	str	r2, [r7, #4]
 8004a4e:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004a50:	2300      	movs	r3, #0
 8004a52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53LX_LLDriverData_t *pdev =
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3318      	adds	r3, #24
 8004a5a:	663b      	str	r3, [r7, #96]	; 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004a62:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 8004a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a66:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 8004a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a6a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004a6e:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 8004a70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a72:	332c      	adds	r3, #44	; 0x2c
 8004a74:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 8004a76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a78:	33c2      	adds	r3, #194	; 0xc2
 8004a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 8004a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a7e:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8004a82:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8004a84:	f107 0314 	add.w	r3, r7, #20
 8004a88:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8004a8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a8c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004a90:	643b      	str	r3, [r7, #64]	; 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8004a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a94:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004a98:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 8004a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a9c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004aa0:	3310      	adds	r3, #16
 8004aa2:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8004aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004aaa:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8004aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aae:	3348      	adds	r3, #72	; 0x48
 8004ab0:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 8004ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab4:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8004ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 8004aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004abc:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8004ac0:	331c      	adds	r3, #28
 8004ac2:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 8004ac4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac6:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 8290 	beq.w	8004ff4 <VL53LX_get_device_results+0x5b4>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 8004ad4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ad6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ada:	4619      	mov	r1, r3
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 fbcb 	bl	8005278 <VL53LX_get_histogram_bin_data>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 8004ae8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d118      	bne.n	8004b22 <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 8004af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af2:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d114      	bne.n	8004b22 <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 8004af8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004afa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 8004b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b0a:	4413      	add	r3, r2
 8004b0c:	1d1a      	adds	r2, r3, #4
 8004b0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f004 f976 	bl	8008e08 <VL53LX_hist_copy_and_scale_ambient_info>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 8004b22:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f040 8206 	bne.w	8004f38 <VL53LX_get_device_results+0x4f8>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8004b2c:	f107 0313 	add.w	r3, r7, #19
 8004b30:	4619      	mov	r1, r3
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f006 fdd5 	bl	800b6e2 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8004b38:	7cfb      	ldrb	r3, [r7, #19]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 8004b42:	7cfb      	ldrb	r3, [r7, #19]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 8004b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b4c:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d107      	bne.n	8004b64 <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8004b54:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	3202      	adds	r2, #2
 8004b5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8004b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b62:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8004b64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b66:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 8004b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b6c:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 8004b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b74:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	f004 f84a 	bl	8008c14 <VL53LX_calc_crosstalk_plane_offset_with_margin>
 8004b80:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8004b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b84:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8004b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b88:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8004b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b8e:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b92:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8004b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b98:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 8004b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b9c:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 8004b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ba0:	f883 2255 	strb.w	r2, [r3, #597]	; 0x255
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8004ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba6:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8004ba8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004baa:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8004bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb0:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8004bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bb4:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8004bb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bba:	f8b3 22fe 	ldrh.w	r2, [r3, #766]	; 0x2fe
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8004bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bc0:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8004bc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bc6:	f893 2331 	ldrb.w	r2, [r3, #817]	; 0x331
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8004bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bcc:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8004bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd2:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8004bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd8:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8004bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bdc:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8004be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be2:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8004be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be6:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8004be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bea:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 8004bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bee:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8004bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bf2:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 8004bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bf6:	f203 3292 	addw	r2, r3, #914	; 0x392
 8004bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bfc:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004c00:	4619      	mov	r1, r3
 8004c02:	4610      	mov	r0, r2
 8004c04:	f003 fa3a 	bl	800807c <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8004c08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c0a:	795b      	ldrb	r3, [r3, #5]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d002      	beq.n	8004c16 <VL53LX_get_device_results+0x1d6>
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d02e      	beq.n	8004c72 <VL53LX_get_device_results+0x232>
 8004c14:	e03d      	b.n	8004c92 <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8004c16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c18:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8004c1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8004c2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c2e:	f893 e3c2 	ldrb.w	lr, [r3, #962]	; 0x3c2
 8004c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c34:	f893 83c3 	ldrb.w	r8, [r3, #963]	; 0x3c3
 8004c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3a:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c40:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 8004c44:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004c46:	319c      	adds	r1, #156	; 0x9c
 8004c48:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004c4a:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 8004c4e:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 8004c52:	b2a4      	uxth	r4, r4
 8004c54:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8004c56:	351c      	adds	r5, #28
 8004c58:	9505      	str	r5, [sp, #20]
 8004c5a:	9404      	str	r4, [sp, #16]
 8004c5c:	9003      	str	r0, [sp, #12]
 8004c5e:	9102      	str	r1, [sp, #8]
 8004c60:	9201      	str	r2, [sp, #4]
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	4643      	mov	r3, r8
 8004c66:	4672      	mov	r2, lr
 8004c68:	4661      	mov	r1, ip
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f004 ff7d 	bl	8009b6a <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 8004c70:	e013      	b.n	8004c9a <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8004c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c74:	331c      	adds	r3, #28
 8004c76:	4619      	mov	r1, r3
 8004c78:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004c7a:	f7fe fa4f 	bl	800311c <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 8004c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c80:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	b21a      	sxth	r2, r3
 8004c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8e:	839a      	strh	r2, [r3, #28]
		break;
 8004c90:	e003      	b.n	8004c9a <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 8004c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c94:	2200      	movs	r2, #0
 8004c96:	839a      	strh	r2, [r3, #28]
		break;
 8004c98:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 8004c9a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f040 814c 	bne.w	8004f3c <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 8004ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca6:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 8004caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cac:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 8004cb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cb2:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8004cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cb8:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		VL53LX_calc_max_effective_spads(
 8004cbc:	b29c      	uxth	r4, r3
 8004cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cc0:	f203 236a 	addw	r3, r3, #618	; 0x26a
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	4623      	mov	r3, r4
 8004cc8:	f005 f8f4 	bl	8009eb4 <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 8004ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cce:	799b      	ldrb	r3, [r3, #6]
 8004cd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fee2 	bl	8005a9e <VL53LX_get_dmax_calibration_data>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 8004ce0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f040 812b 	bne.w	8004f40 <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 8004cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cec:	f503 7515 	add.w	r5, r3, #596	; 0x254
 8004cf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cf2:	f503 7605 	add.w	r6, r3, #532	; 0x214
 8004cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cf8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004cfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cfe:	f202 521c 	addw	r2, r2, #1308	; 0x51c
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8004d02:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004d04:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
				pdev->wArea2,
 8004d08:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004d0a:	f500 50d0 	add.w	r0, r0, #6656	; 0x1a00
		status = VL53LX_ipp_hist_process_data(
 8004d0e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004d10:	9405      	str	r4, [sp, #20]
 8004d12:	f107 0413 	add.w	r4, r7, #19
 8004d16:	9404      	str	r4, [sp, #16]
 8004d18:	9003      	str	r0, [sp, #12]
 8004d1a:	9102      	str	r1, [sp, #8]
 8004d1c:	9201      	str	r2, [sp, #4]
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	4633      	mov	r3, r6
 8004d22:	462a      	mov	r2, r5
 8004d24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f00c fbf0 	bl	801150c <VL53LX_ipp_hist_process_data>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004d32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d34:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d150      	bne.n	8004dde <VL53LX_get_device_results+0x39e>
			(histo_merge_nb > 1))
 8004d3c:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d94d      	bls.n	8004dde <VL53LX_get_device_results+0x39e>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8004d42:	2300      	movs	r3, #0
 8004d44:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004d48:	e045      	b.n	8004dd6 <VL53LX_get_device_results+0x396>
			pdata = &(presults->VL53LX_p_003[i]);
 8004d4a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004d4e:	224c      	movs	r2, #76	; 0x4c
 8004d50:	fb02 f303 	mul.w	r3, r2, r3
 8004d54:	3310      	adds	r3, #16
 8004d56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d58:	4413      	add	r3, r2
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	7cfa      	ldrb	r2, [r7, #19]
 8004d64:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	7cfa      	ldrb	r2, [r7, #19]
 8004d72:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	7cfa      	ldrb	r2, [r7, #19]
 8004d80:	fb93 f2f2 	sdiv	r2, r3, r2
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	7cfb      	ldrb	r3, [r7, #19]
 8004d90:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d9e:	461a      	mov	r2, r3
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	fb92 f3f3 	sdiv	r3, r2, r3
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004db0:	461a      	mov	r2, r3
 8004db2:	7cfb      	ldrb	r3, [r7, #19]
 8004db4:	fb92 f3f3 	sdiv	r3, r2, r3
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	7cfa      	ldrb	r2, [r7, #19]
 8004dc4:	fbb3 f2f2 	udiv	r2, r3, r2
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8004dcc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004dd6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d9b5      	bls.n	8004d4a <VL53LX_get_device_results+0x30a>
		}


		if (status != VL53LX_ERROR_NONE)
 8004dde:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f040 80ae 	bne.w	8004f44 <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 8004de8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dea:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8004dee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004df0:	f503 7171 	add.w	r1, r3, #964	; 0x3c4
 8004df4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004df6:	330e      	adds	r3, #14
 8004df8:	461a      	mov	r2, r3
 8004dfa:	f004 fe80 	bl	8009afe <VL53LX_hist_wrap_dmax>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 8004e04:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f040 809d 	bne.w	8004f48 <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8004e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8004e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e20:	4413      	add	r3, r2
 8004e22:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8004e24:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 8004e28:	4613      	mov	r3, r2
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004e34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e36:	4413      	add	r3, r2
 8004e38:	f103 0208 	add.w	r2, r3, #8
 8004e3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f004 fa10 	bl	8009264 <VL53LX_hist_phase_consistency_check>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 8004e4a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d17c      	bne.n	8004f4c <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8004e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8004e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e64:	4413      	add	r3, r2
 8004e66:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8004e68:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004e78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f103 0208 	add.w	r2, r3, #8
 8004e80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e82:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f004 fde1 	bl	8009a4e <VL53LX_hist_xmonitor_consistency_check>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 8004e92:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d15a      	bne.n	8004f50 <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 8004e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8004ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea6:	2205      	movs	r2, #5
 8004ea8:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 8004eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eac:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8004eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb6:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8004eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004ebe:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8004ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec2:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
		if (zid <
 8004ec6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d222      	bcs.n	8004f14 <VL53LX_get_device_results+0x4d4>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 8004ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			phist_info =
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ed6:	4413      	add	r3, r2
 8004ed8:	3304      	adds	r3, #4
 8004eda:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8004edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ede:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8004ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee2:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8004ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee6:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8004ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eea:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8004eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eee:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 8004ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef4:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 8004ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef8:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53LX_p_005 =
 8004efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004efe:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8004f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f02:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 8004f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f08:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8004f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 8004f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f12:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 8004f14:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d11b      	bne.n	8004f54 <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 8004f1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f1e:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
 8004f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f24:	f203 3266 	addw	r2, r3, #870	; 0x366
 8004f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f2a:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8004f2e:	3318      	adds	r3, #24
 8004f30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f32:	f005 f91c 	bl	800a16e <VL53LX_hist_copy_results_to_sys_and_core>
 8004f36:	e00e      	b.n	8004f56 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004f38:	bf00      	nop
 8004f3a:	e00c      	b.n	8004f56 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004f3c:	bf00      	nop
 8004f3e:	e00a      	b.n	8004f56 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004f40:	bf00      	nop
 8004f42:	e008      	b.n	8004f56 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004f44:	bf00      	nop
 8004f46:	e006      	b.n	8004f56 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004f48:	bf00      	nop
 8004f4a:	e004      	b.n	8004f56 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004f4c:	bf00      	nop
 8004f4e:	e002      	b.n	8004f56 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004f50:	bf00      	nop
 8004f52:	e000      	b.n	8004f56 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004f54:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 8004f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f58:	785b      	ldrb	r3, [r3, #1]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d036      	beq.n	8004fcc <VL53LX_get_device_results+0x58c>
			if (pstate->rd_device_state !=
 8004f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f60:	79db      	ldrb	r3, [r3, #7]
 8004f62:	2b06      	cmp	r3, #6
 8004f64:	d00a      	beq.n	8004f7c <VL53LX_get_device_results+0x53c>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 8004f66:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <VL53LX_get_device_results+0x53c>
					status = VL53LX_dynamic_zone_update(
 8004f6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f005 f9d0 	bl	800a316 <VL53LX_dynamic_zone_update>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004f82:	e015      	b.n	8004fb0 <VL53LX_get_device_results+0x570>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8004f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f86:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 8004f8a:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <VL53LX_get_device_results+0x556>
 8004f92:	2103      	movs	r1, #3
 8004f94:	e000      	b.n	8004f98 <VL53LX_get_device_results+0x558>
 8004f96:	2101      	movs	r1, #1
 8004f98:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004f9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f9e:	4413      	add	r3, r2
 8004fa0:	460a      	mov	r2, r1
 8004fa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004fa6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004faa:	3301      	adds	r3, #1
 8004fac:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004fb0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004fb4:	2b04      	cmp	r3, #4
 8004fb6:	d9e5      	bls.n	8004f84 <VL53LX_get_device_results+0x544>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 8004fb8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d105      	bne.n	8004fcc <VL53LX_get_device_results+0x58c>
				status = VL53LX_multizone_hist_bins_update(Dev);
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f005 fa22 	bl	800a40a <VL53LX_multizone_hist_bins_update>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 8004fcc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d105      	bne.n	8004fe0 <VL53LX_get_device_results+0x5a0>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f005 fe79 	bl	800accc <VL53LX_dynamic_xtalk_correction_corrector>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (pdev->tuning_parms.tp_hist_merge == 1)
 8004fe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fe2:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d151      	bne.n	800508e <VL53LX_get_device_results+0x64e>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8004fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	e04c      	b.n	800508e <VL53LX_get_device_results+0x64e>
	} else {

		if (status == VL53LX_ERROR_NONE)
 8004ff4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d107      	bne.n	800500c <VL53LX_get_device_results+0x5cc>
			status = VL53LX_get_measurement_results(
 8004ffc:	7afb      	ldrb	r3, [r7, #11]
 8004ffe:	4619      	mov	r1, r3
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f7ff fc73 	bl	80048ec <VL53LX_get_measurement_results>
 8005006:	4603      	mov	r3, r0
 8005008:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 800500c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10d      	bne.n	8005030 <VL53LX_get_device_results+0x5f0>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8005014:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005016:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 800501a:	4618      	mov	r0, r3
 800501c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800501e:	f203 3166 	addw	r1, r3, #870	; 0x366
 8005022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005024:	f503 5299 	add.w	r2, r3, #4896	; 0x1320
 8005028:	3218      	adds	r2, #24
 800502a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800502c:	f000 fb86 	bl	800573c <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	785b      	ldrb	r3, [r3, #1]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d12a      	bne.n	800508e <VL53LX_get_device_results+0x64e>

			if ((status == VL53LX_ERROR_NONE) &&
 8005038:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10d      	bne.n	800505c <VL53LX_get_device_results+0x61c>
				(pL->low_power_auto_range_count == 0)) {
 8005040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005042:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 8005044:	2b00      	cmp	r3, #0
 8005046:	d109      	bne.n	800505c <VL53LX_get_device_results+0x61c>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f006 fa70 	bl	800b52e <VL53LX_low_power_auto_setup_manual_calibration>
 800504e:	4603      	mov	r3, r0
 8005050:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	2201      	movs	r2, #1
 8005058:	709a      	strb	r2, [r3, #2]
 800505a:	e00a      	b.n	8005072 <VL53LX_get_device_results+0x632>
			} else if ((status == VL53LX_ERROR_NONE) &&
 800505c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005060:	2b00      	cmp	r3, #0
 8005062:	d106      	bne.n	8005072 <VL53LX_get_device_results+0x632>
				(pL->low_power_auto_range_count == 1)) {
 8005064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005066:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 8005068:	2b01      	cmp	r3, #1
 800506a:	d102      	bne.n	8005072 <VL53LX_get_device_results+0x632>
				pL->low_power_auto_range_count = 2;
 800506c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506e:	2202      	movs	r2, #2
 8005070:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 8005072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005074:	789b      	ldrb	r3, [r3, #2]
 8005076:	2bff      	cmp	r3, #255	; 0xff
 8005078:	d009      	beq.n	800508e <VL53LX_get_device_results+0x64e>
 800507a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800507e:	2b00      	cmp	r3, #0
 8005080:	d105      	bne.n	800508e <VL53LX_get_device_results+0x64e>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f006 faa5 	bl	800b5d2 <VL53LX_low_power_auto_update_DSS>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800508e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005090:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005094:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005096:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8005098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800509a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800509e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050a0:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 80050a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050a4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80050a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050aa:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 80050ac:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f040 80b0 	bne.w	8005216 <VL53LX_get_device_results+0x7d6>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 80050b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050b8:	2205      	movs	r2, #5
 80050ba:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 80050be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050c0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80050c4:	3301      	adds	r3, #1
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ca:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
		zid = pdev->ll_state.rd_zone_id;
 80050ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (zid < pres->zone_results.max_zones) {
 80050d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050da:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 80050de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80050e2:	429a      	cmp	r2, r3
 80050e4:	f080 8097 	bcs.w	8005216 <VL53LX_get_device_results+0x7d6>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 80050e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
			pobjects =
 80050ec:	4613      	mov	r3, r2
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80050f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050fa:	4413      	add	r3, r2
 80050fc:	3308      	adds	r3, #8
 80050fe:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8005100:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005102:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8005104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005106:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8005108:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800510a:	785a      	ldrb	r2, [r3, #1]
 800510c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800510e:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8005110:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005112:	789a      	ldrb	r2, [r3, #2]
 8005114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005116:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8005118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800511a:	78da      	ldrb	r2, [r3, #3]
 800511c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800511e:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 8005120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005122:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 8005126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005128:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 800512a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800512c:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 8005130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005132:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 8005134:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005136:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 800513a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800513c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8005140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005142:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 8005146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 800514c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800514e:	7c5a      	ldrb	r2, [r3, #17]
 8005150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005152:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8005154:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005156:	7c9a      	ldrb	r2, [r3, #18]
 8005158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800515a:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 800515c:	2300      	movs	r3, #0
 800515e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005162:	e052      	b.n	800520a <VL53LX_get_device_results+0x7ca>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8005164:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8005168:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 800516c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800516e:	204c      	movs	r0, #76	; 0x4c
 8005170:	fb00 f303 	mul.w	r3, r0, r3
 8005174:	440b      	add	r3, r1
 8005176:	3338      	adds	r3, #56	; 0x38
 8005178:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 800517a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800517c:	4613      	mov	r3, r2
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4403      	add	r3, r0
 8005186:	3308      	adds	r3, #8
 8005188:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 800518a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 800518e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8005192:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005194:	204c      	movs	r0, #76	; 0x4c
 8005196:	fb00 f303 	mul.w	r3, r0, r3
 800519a:	440b      	add	r3, r1
 800519c:	333c      	adds	r3, #60	; 0x3c
 800519e:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 80051a0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80051a2:	4613      	mov	r3, r2
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4403      	add	r3, r0
 80051ac:	330c      	adds	r3, #12
 80051ae:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 80051b0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 80051b4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 80051b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051ba:	204c      	movs	r0, #76	; 0x4c
 80051bc:	fb00 f303 	mul.w	r3, r0, r3
 80051c0:	440b      	add	r3, r1
 80051c2:	3354      	adds	r3, #84	; 0x54
 80051c4:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 80051c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051c8:	4613      	mov	r3, r2
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	4413      	add	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	3310      	adds	r3, #16
 80051d4:	4602      	mov	r2, r0
 80051d6:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 80051d8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].range_status =
 80051dc:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].range_status;
 80051e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051e2:	204c      	movs	r0, #76	; 0x4c
 80051e4:	fb00 f303 	mul.w	r3, r0, r3
 80051e8:	440b      	add	r3, r1
 80051ea:	335e      	adds	r3, #94	; 0x5e
 80051ec:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 80051ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051f0:	4613      	mov	r3, r2
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	4413      	add	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	3312      	adds	r3, #18
 80051fc:	4602      	mov	r2, r0
 80051fe:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8005200:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005204:	3301      	adds	r3, #1
 8005206:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800520a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800520c:	7c9b      	ldrb	r3, [r3, #18]
 800520e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8005212:	429a      	cmp	r2, r3
 8005214:	d3a6      	bcc.n	8005164 <VL53LX_get_device_results+0x724>
		}
	}



	memcpy(
 8005216:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800521a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f00f fed7 	bl	8014fd0 <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 8005222:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005226:	2b00      	cmp	r3, #0
 8005228:	d105      	bne.n	8005236 <VL53LX_get_device_results+0x7f6>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f002 fd4e 	bl	8007ccc <VL53LX_check_ll_driver_rd_state>
 8005230:	4603      	mov	r3, r0
 8005232:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8005236:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 800523a:	4618      	mov	r0, r3
 800523c:	3768      	adds	r7, #104	; 0x68
 800523e:	46bd      	mov	sp, r7
 8005240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005244 <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8005250:	2300      	movs	r3, #0
 8005252:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 8005254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d107      	bne.n	800526c <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	2203      	movs	r2, #3
 8005260:	4619      	mov	r1, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7ff f868 	bl	8004338 <VL53LX_init_and_start_range>
 8005268:	4603      	mov	r3, r0
 800526a:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800526c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b0d2      	sub	sp, #328	; 0x148
 800527c:	af00      	add	r7, sp, #0
 800527e:	1d3b      	adds	r3, r7, #4
 8005280:	6018      	str	r0, [r3, #0]
 8005282:	463b      	mov	r3, r7
 8005284:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8005286:	2300      	movs	r3, #0
 8005288:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev =
 800528c:	1d3b      	adds	r3, r7, #4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3318      	adds	r3, #24
 8005292:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8005296:	1d3b      	adds	r3, r7, #4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800529e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 80052a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052a6:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80052aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 80052ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052b2:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80052b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 80052ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052be:	f203 331e 	addw	r3, r3, #798	; 0x31e
 80052c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 80052c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052ca:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80052ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 80052d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80052d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 80052da:	f107 030c 	add.w	r3, r7, #12
 80052de:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 80052e2:	2300      	movs	r3, #0
 80052e4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c

	uint32_t   pll_period_us            = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8005300:	2300      	movs	r3, #0
 8005302:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t    i                        = 0;
 8005306:	2300      	movs	r3, #0
 8005308:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b

	int32_t    hist_merge				= 0;
 800530c:	f107 0308 	add.w	r3, r7, #8
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8005314:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10a      	bne.n	8005332 <VL53LX_get_histogram_bin_data+0xba>
		status = VL53LX_ReadMulti(
 800531c:	1d38      	adds	r0, r7, #4
 800531e:	2353      	movs	r3, #83	; 0x53
 8005320:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8005324:	2188      	movs	r1, #136	; 0x88
 8005326:	6800      	ldr	r0, [r0, #0]
 8005328:	f00b fefa 	bl	8011120 <VL53LX_ReadMulti>
 800532c:	4603      	mov	r3, r0
 800532e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 8005332:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005336:	781a      	ldrb	r2, [r3, #0]
 8005338:	463b      	mov	r3, r7
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8005340:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005344:	785a      	ldrb	r2, [r3, #1]
 8005346:	463b      	mov	r3, r7
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 800534e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005352:	789a      	ldrb	r2, [r3, #2]
 8005354:	463b      	mov	r3, r7
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 800535c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005360:	78da      	ldrb	r2, [r3, #3]
 8005362:	463b      	mov	r3, r7
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 800536a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800536e:	3304      	adds	r3, #4
 8005370:	4619      	mov	r1, r3
 8005372:	2002      	movs	r0, #2
 8005374:	f003 f9aa 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 8005378:	4603      	mov	r3, r0
 800537a:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 800537c:	463b      	mov	r3, r7
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8005384:	234e      	movs	r3, #78	; 0x4e
 8005386:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 800538a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800538e:	f107 020c 	add.w	r2, r7, #12
 8005392:	4413      	add	r3, r2
 8005394:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8005398:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800539c:	2002      	movs	r0, #2
 800539e:	f003 f995 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 80053a2:	4603      	mov	r3, r0
 80053a4:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 80053a6:	463b      	mov	r3, r7
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 80053ae:	2350      	movs	r3, #80	; 0x50
 80053b0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 80053b4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80053b8:	f107 020c 	add.w	r2, r7, #12
 80053bc:	5cd2      	ldrb	r2, [r2, r3]
 80053be:	463b      	mov	r3, r7
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 80053c6:	463b      	mov	r3, r7
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 80053ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053d2:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 80053d6:	331c      	adds	r3, #28
 80053d8:	801a      	strh	r2, [r3, #0]
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 80053da:	463b      	mov	r3, r7
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 80053e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053e6:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 80053ea:	331e      	adds	r3, #30
 80053ec:	701a      	strb	r2, [r3, #0]



	i2c_buffer_offset_bytes =
 80053ee:	2351      	movs	r3, #81	; 0x51
 80053f0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 80053f4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80053f8:	f107 020c 	add.w	r2, r7, #12
 80053fc:	5cd3      	ldrb	r3, [r2, r3]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8005404:	2352      	movs	r3, #82	; 0x52
 8005406:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 800540a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800540e:	f107 020c 	add.w	r2, r7, #12
 8005412:	5cd2      	ldrb	r2, [r2, r3]
 8005414:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8005418:	4413      	add	r3, r2
 800541a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 800541e:	234d      	movs	r3, #77	; 0x4d
 8005420:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8005424:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005428:	f107 020c 	add.w	r2, r7, #12
 800542c:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8005430:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8005432:	2306      	movs	r3, #6
 8005434:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8005438:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800543c:	f107 020c 	add.w	r2, r7, #12
 8005440:	4413      	add	r3, r2
 8005442:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8005446:	2300      	movs	r3, #0
 8005448:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800544c:	e017      	b.n	800547e <VL53LX_get_histogram_bin_data+0x206>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 800544e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005452:	2003      	movs	r0, #3
 8005454:	f003 f9d9 	bl	800880a <VL53LX_i2c_decode_uint32_t>
 8005458:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 800545a:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 800545e:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8005460:	463b      	mov	r3, r7
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3206      	adds	r2, #6
 8005466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 800546a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800546e:	3303      	adds	r3, #3
 8005470:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8005474:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005478:	3301      	adds	r3, #1
 800547a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800547e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005482:	2b17      	cmp	r3, #23
 8005484:	d9e3      	bls.n	800544e <VL53LX_get_histogram_bin_data+0x1d6>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 8005486:	f107 0208 	add.w	r2, r7, #8
 800548a:	1d3b      	adds	r3, r7, #4
 800548c:	f248 018d 	movw	r1, #32909	; 0x808d
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	f000 fb2f 	bl	8005af4 <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 8005496:	463b      	mov	r3, r7
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d118      	bne.n	80054d4 <VL53LX_get_histogram_bin_data+0x25c>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80054a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054a6:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80054aa:	3310      	adds	r3, #16
 80054ac:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80054b0:	2100      	movs	r1, #0
 80054b2:	4618      	mov	r0, r3
 80054b4:	f00f fd9a 	bl	8014fec <memset>
		pdev->bin_rec_pos = 0;
 80054b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054bc:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80054c0:	330c      	adds	r3, #12
 80054c2:	2200      	movs	r2, #0
 80054c4:	701a      	strb	r2, [r3, #0]
		pdev->pos_before_next_recom = 0;
 80054c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054ca:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80054ce:	330d      	adds	r3, #13
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]
	}

	if (hist_merge == 1)
 80054d4:	f107 0308 	add.w	r3, r7, #8
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d105      	bne.n	80054ea <VL53LX_get_histogram_bin_data+0x272>
		vl53lx_histo_merge(Dev, pdata);
 80054de:	463a      	mov	r2, r7
 80054e0:	1d3b      	adds	r3, r7, #4
 80054e2:	6811      	ldr	r1, [r2, #0]
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	f7fd ff10 	bl	800330a <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 80054ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054ee:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80054f2:	463b      	mov	r3, r7
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 80054f8:	463b      	mov	r3, r7
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2200      	movs	r2, #0
 80054fe:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8005500:	463b      	mov	r3, r7
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2218      	movs	r2, #24
 8005506:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8005508:	463b      	mov	r3, r7
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2218      	movs	r2, #24
 800550e:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8005510:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005514:	78da      	ldrb	r2, [r3, #3]
 8005516:	463b      	mov	r3, r7
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 800551e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005522:	799b      	ldrb	r3, [r3, #6]
 8005524:	b29b      	uxth	r3, r3
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 800552a:	463b      	mov	r3, r7
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 8005532:	463b      	mov	r3, r7
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 800553a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800553e:	7c1b      	ldrb	r3, [r3, #16]
 8005540:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 8005542:	4413      	add	r3, r2
 8005544:	b29a      	uxth	r2, r3
 8005546:	463b      	mov	r3, r7
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 800554e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005552:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 8005554:	463b      	mov	r3, r7
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 800555c:	463a      	mov	r2, r7
 800555e:	1d3b      	adds	r3, r7, #4
 8005560:	6811      	ldr	r1, [r2, #0]
 8005562:	6818      	ldr	r0, [r3, #0]
 8005564:	f003 fd20 	bl	8008fa8 <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8005568:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800556c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005570:	2b00      	cmp	r3, #0
 8005572:	d114      	bne.n	800559e <VL53LX_get_histogram_bin_data+0x326>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8005574:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005578:	791b      	ldrb	r3, [r3, #4]
 800557a:	b29b      	uxth	r3, r3
 800557c:	021b      	lsls	r3, r3, #8
 800557e:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8005580:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005584:	795b      	ldrb	r3, [r3, #5]
 8005586:	b29b      	uxth	r3, r3
		encoded_timeout =
 8005588:	4413      	add	r3, r2
 800558a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 800558e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005592:	799a      	ldrb	r2, [r3, #6]
 8005594:	463b      	mov	r3, r7
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800559c:	e013      	b.n	80055c6 <VL53LX_get_histogram_bin_data+0x34e>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 800559e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80055a2:	79db      	ldrb	r3, [r3, #7]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 80055aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80055ae:	7a1b      	ldrb	r3, [r3, #8]
 80055b0:	b29b      	uxth	r3, r3
		encoded_timeout =
 80055b2:	4413      	add	r3, r2
 80055b4:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 80055b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80055bc:	7a5a      	ldrb	r2, [r3, #9]
 80055be:	463b      	mov	r3, r7
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 80055c6:	463b      	mov	r3, r7
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2200      	movs	r2, #0
 80055cc:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 80055ce:	2300      	movs	r3, #0
 80055d0:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 80055d4:	e016      	b.n	8005604 <VL53LX_get_histogram_bin_data+0x38c>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 80055d6:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80055da:	463a      	mov	r2, r7
 80055dc:	6812      	ldr	r2, [r2, #0]
 80055de:	4413      	add	r3, r2
 80055e0:	7b1b      	ldrb	r3, [r3, #12]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	2b07      	cmp	r3, #7
 80055e8:	d107      	bne.n	80055fa <VL53LX_get_histogram_bin_data+0x382>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 80055ea:	463b      	mov	r3, r7
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	7adb      	ldrb	r3, [r3, #11]
 80055f0:	3304      	adds	r3, #4
 80055f2:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 80055f4:	463b      	mov	r3, r7
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 80055fa:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80055fe:	3301      	adds	r3, #1
 8005600:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8005604:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8005608:	2b05      	cmp	r3, #5
 800560a:	d9e4      	bls.n	80055d6 <VL53LX_get_histogram_bin_data+0x35e>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 800560c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005610:	4618      	mov	r0, r3
 8005612:	f003 fb6a 	bl	8008cea <VL53LX_decode_timeout>
 8005616:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8005618:	463b      	mov	r3, r7
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 8005620:	463b      	mov	r3, r7
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8005628:	4618      	mov	r0, r3
 800562a:	f006 f89a 	bl	800b762 <VL53LX_calc_pll_period_us>
 800562e:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8005632:	463b      	mov	r3, r7
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563a:	3301      	adds	r3, #1
 800563c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8005640:	463b      	mov	r3, r7
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53LX_duration_maths(
 8005648:	4619      	mov	r1, r3
 800564a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800564e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005652:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8005656:	f006 f89b 	bl	800b790 <VL53LX_duration_maths>
 800565a:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 800565c:	463b      	mov	r3, r7
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8005664:	463b      	mov	r3, r7
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2200      	movs	r2, #0
 800566a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 800566e:	463b      	mov	r3, r7
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	f006 f9a4 	bl	800b9be <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 8005676:	463b      	mov	r3, r7
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	f006 fdb0 	bl	800c1de <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 800567e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005682:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005686:	463b      	mov	r3, r7
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 800568c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005690:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8005694:	463b      	mov	r3, r7
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 800569a:	463b      	mov	r3, r7
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	789b      	ldrb	r3, [r3, #2]
 80056a0:	461a      	mov	r2, r3
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80056ae:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80056b2:	4413      	add	r3, r2
 80056b4:	3302      	adds	r3, #2
 80056b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 80056ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056be:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 80056c0:	463b      	mov	r3, r7
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 80056c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056cc:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 80056ce:	463b      	mov	r3, r7
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 80056d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056da:	2200      	movs	r2, #0
 80056dc:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 80056de:	463b      	mov	r3, r7
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80056e6:	f003 031f 	and.w	r3, r3, #31
 80056ea:	2b11      	cmp	r3, #17
 80056ec:	bf8c      	ite	hi
 80056ee:	2201      	movhi	r2, #1
 80056f0:	2200      	movls	r2, #0
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	2a00      	cmp	r2, #0
 80056f6:	d118      	bne.n	800572a <VL53LX_get_histogram_bin_data+0x4b2>
 80056f8:	2201      	movs	r2, #1
 80056fa:	409a      	lsls	r2, r3
 80056fc:	4b0e      	ldr	r3, [pc, #56]	; (8005738 <VL53LX_get_histogram_bin_data+0x4c0>)
 80056fe:	4013      	ands	r3, r2
 8005700:	2b00      	cmp	r3, #0
 8005702:	bf14      	ite	ne
 8005704:	2301      	movne	r3, #1
 8005706:	2300      	moveq	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00d      	beq.n	800572a <VL53LX_get_histogram_bin_data+0x4b2>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 800570e:	463b      	mov	r3, r7
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	b2da      	uxtb	r2, r3
 800571c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005720:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 8005722:	23fa      	movs	r3, #250	; 0xfa
 8005724:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 8005728:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800572a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800572e:	4618      	mov	r0, r3
 8005730:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	0002200e 	.word	0x0002200e

0800573c <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 800573c:	b480      	push	{r7}
 800573e:	b08b      	sub	sp, #44	; 0x2c
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 8005750:	2300      	movs	r3, #0
 8005752:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2200      	movs	r2, #0
 800575c:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	78da      	ldrb	r2, [r3, #3]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2200      	movs	r2, #0
 800576a:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2204      	movs	r2, #4
 8005770:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2201      	movs	r2, #1
 8005776:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	8a1b      	ldrh	r3, [r3, #16]
 800577c:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	8a9b      	ldrh	r3, [r3, #20]
 8005782:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	8a5b      	ldrh	r3, [r3, #18]
 8005788:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 800578a:	2300      	movs	r3, #0
 800578c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005790:	e00b      	b.n	80057aa <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 8005792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	4413      	add	r3, r2
 800579c:	2200      	movs	r2, #0
 800579e:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 80057a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057a4:	3301      	adds	r3, #1
 80057a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80057aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d9ef      	bls.n	8005792 <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	3314      	adds	r3, #20
 80057b6:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 80057b8:	2300      	movs	r3, #0
 80057ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80057be:	e0fe      	b.n	80059be <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80057c6:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	2200      	movs	r2, #0
 80057cc:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	78db      	ldrb	r3, [r3, #3]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	785b      	ldrb	r3, [r3, #1]
 80057da:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 80057de:	2b09      	cmp	r3, #9
 80057e0:	d104      	bne.n	80057ec <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	2213      	movs	r2, #19
 80057e6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80057ea:	e007      	b.n	80057fc <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	785b      	ldrb	r3, [r3, #1]
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	b2da      	uxtb	r2, r3
			pdata->range_status =
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	2200      	movs	r2, #0
 8005800:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	2200      	movs	r2, #0
 8005806:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	2200      	movs	r2, #0
 800580c:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	2200      	movs	r2, #0
 8005812:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	2200      	movs	r2, #0
 8005818:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	2200      	movs	r2, #0
 800581e:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8005820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 8005828:	2b01      	cmp	r3, #1
 800582a:	d05c      	beq.n	80058e6 <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 800582c:	e0a8      	b.n	8005980 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	789b      	ldrb	r3, [r3, #2]
 8005832:	2b07      	cmp	r3, #7
 8005834:	d103      	bne.n	800583e <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	8a7a      	ldrh	r2, [r7, #18]
 800583a:	82da      	strh	r2, [r3, #22]
 800583c:	e00b      	b.n	8005856 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	789b      	ldrb	r3, [r3, #2]
 8005842:	2b08      	cmp	r3, #8
 8005844:	d103      	bne.n	800584e <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	8aba      	ldrh	r2, [r7, #20]
 800584a:	82da      	strh	r2, [r3, #22]
 800584c:	e003      	b.n	8005856 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	8afa      	ldrh	r2, [r7, #22]
 800585a:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	895b      	ldrh	r3, [r3, #10]
 8005870:	015b      	lsls	r3, r3, #5
 8005872:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800587a:	d302      	bcc.n	8005882 <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 800587c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005880:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	b29a      	uxth	r2, r3
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8005898:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	fb02 f303 	mul.w	r3, r2, r3
 80058a2:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058aa:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	da01      	bge.n	80058b6 <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 80058b2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80058b6:	12db      	asrs	r3, r3, #11
 80058b8:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	b21a      	sxth	r2, r3
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 80058e4:	e04c      	b.n	8005980 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058fc:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	8bdb      	ldrh	r3, [r3, #30]
 800590a:	015b      	lsls	r3, r3, #5
 800590c:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005914:	d302      	bcc.n	800591c <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 8005916:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800591a:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	b29a      	uxth	r2, r3
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 8005932:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	fb02 f303 	mul.w	r3, r2, r3
 800593c:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005944:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	2b00      	cmp	r3, #0
 800594a:	da01      	bge.n	8005950 <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 800594c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005950:	12db      	asrs	r3, r3, #11
 8005952:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	b21a      	sxth	r2, r3
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 800597e:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	334c      	adds	r3, #76	; 0x4c
 80059b2:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 80059b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059b8:	3301      	adds	r3, #1
 80059ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80059be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	f67f aefc 	bls.w	80057c0 <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2200      	movs	r2, #0
 80059cc:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	785b      	ldrb	r3, [r3, #1]
 80059d2:	f003 031f 	and.w	r3, r3, #31
 80059d6:	2b11      	cmp	r3, #17
 80059d8:	bf8c      	ite	hi
 80059da:	2201      	movhi	r2, #1
 80059dc:	2200      	movls	r2, #0
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	2a00      	cmp	r2, #0
 80059e2:	d116      	bne.n	8005a12 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
 80059e4:	2201      	movs	r2, #1
 80059e6:	409a      	lsls	r2, r3
 80059e8:	4b0d      	ldr	r3, [pc, #52]	; (8005a20 <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 80059ea:	4013      	ands	r3, r2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	bf14      	ite	ne
 80059f0:	2301      	movne	r3, #1
 80059f2:	2300      	moveq	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00b      	beq.n	8005a12 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	785b      	ldrb	r3, [r3, #1]
 80059fe:	f003 031f 	and.w	r3, r3, #31
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 8005a10:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8005a12:	bf00      	nop
 8005a14:	372c      	adds	r7, #44	; 0x2c
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	0002200e 	.word	0x0002200e

08005a24 <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b087      	sub	sp, #28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	3318      	adds	r3, #24
 8005a36:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	332c      	adds	r3, #44	; 0x2c
 8005a3c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b05      	cmp	r3, #5
 8005a44:	d109      	bne.n	8005a5a <VL53LX_set_zone_dss_config+0x36>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
 8005a58:	e003      	b.n	8005a62 <VL53LX_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 8005a62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b085      	sub	sp, #20
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3318      	adds	r3, #24
 8005a86:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	78fa      	ldrb	r2, [r7, #3]
 8005a8c:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8005a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b086      	sub	sp, #24
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	607a      	str	r2, [r7, #4]
 8005aaa:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005aac:	2300      	movs	r3, #0
 8005aae:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	3318      	adds	r3, #24
 8005ab4:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8005ab6:	7afb      	ldrb	r3, [r7, #11]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d009      	beq.n	8005ad0 <VL53LX_get_dmax_calibration_data+0x32>
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d10f      	bne.n	8005ae0 <VL53LX_get_dmax_calibration_data+0x42>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 8005ac4:	220a      	movs	r2, #10
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f00f fa81 	bl	8014fd0 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 8005ace:	e00a      	b.n	8005ae6 <VL53LX_get_dmax_calibration_data+0x48>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8005ad4:	220a      	movs	r2, #10
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f00f fa79 	bl	8014fd0 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 8005ade:	e002      	b.n	8005ae6 <VL53LX_get_dmax_calibration_data+0x48>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8005ae0:	23fc      	movs	r3, #252	; 0xfc
 8005ae2:	75fb      	strb	r3, [r7, #23]
	break;
 8005ae4:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b089      	sub	sp, #36	; 0x24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	460b      	mov	r3, r1
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005b02:	2300      	movs	r3, #0
 8005b04:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	3318      	adds	r3, #24
 8005b0a:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005b12:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8005b1a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8005b1c:	897b      	ldrh	r3, [r7, #10]
 8005b1e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8005b22:	2bb9      	cmp	r3, #185	; 0xb9
 8005b24:	f200 86ca 	bhi.w	80068bc <VL53LX_get_tuning_parm+0xdc8>
 8005b28:	a201      	add	r2, pc, #4	; (adr r2, 8005b30 <VL53LX_get_tuning_parm+0x3c>)
 8005b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2e:	bf00      	nop
 8005b30:	08005e19 	.word	0x08005e19
 8005b34:	08005e29 	.word	0x08005e29
 8005b38:	08005e39 	.word	0x08005e39
 8005b3c:	08005e49 	.word	0x08005e49
 8005b40:	08005e57 	.word	0x08005e57
 8005b44:	08005e65 	.word	0x08005e65
 8005b48:	08005e73 	.word	0x08005e73
 8005b4c:	08005e81 	.word	0x08005e81
 8005b50:	08005e8f 	.word	0x08005e8f
 8005b54:	08005e9d 	.word	0x08005e9d
 8005b58:	08005eab 	.word	0x08005eab
 8005b5c:	08005eb7 	.word	0x08005eb7
 8005b60:	08005ec5 	.word	0x08005ec5
 8005b64:	08005ed3 	.word	0x08005ed3
 8005b68:	08005edf 	.word	0x08005edf
 8005b6c:	08005eed 	.word	0x08005eed
 8005b70:	08005efb 	.word	0x08005efb
 8005b74:	08005f0b 	.word	0x08005f0b
 8005b78:	08005f1b 	.word	0x08005f1b
 8005b7c:	08005f29 	.word	0x08005f29
 8005b80:	08005f39 	.word	0x08005f39
 8005b84:	08005f47 	.word	0x08005f47
 8005b88:	08005f57 	.word	0x08005f57
 8005b8c:	08005f67 	.word	0x08005f67
 8005b90:	08005f77 	.word	0x08005f77
 8005b94:	08005f87 	.word	0x08005f87
 8005b98:	08005f97 	.word	0x08005f97
 8005b9c:	08005fa7 	.word	0x08005fa7
 8005ba0:	08005fb7 	.word	0x08005fb7
 8005ba4:	08005fc7 	.word	0x08005fc7
 8005ba8:	08005fd7 	.word	0x08005fd7
 8005bac:	08005fe5 	.word	0x08005fe5
 8005bb0:	08005ff5 	.word	0x08005ff5
 8005bb4:	08006005 	.word	0x08006005
 8005bb8:	08006015 	.word	0x08006015
 8005bbc:	08006025 	.word	0x08006025
 8005bc0:	08006035 	.word	0x08006035
 8005bc4:	08006045 	.word	0x08006045
 8005bc8:	08006055 	.word	0x08006055
 8005bcc:	08006065 	.word	0x08006065
 8005bd0:	08006075 	.word	0x08006075
 8005bd4:	08006085 	.word	0x08006085
 8005bd8:	08006095 	.word	0x08006095
 8005bdc:	080060a5 	.word	0x080060a5
 8005be0:	080060b5 	.word	0x080060b5
 8005be4:	080060c5 	.word	0x080060c5
 8005be8:	080060d3 	.word	0x080060d3
 8005bec:	080060e1 	.word	0x080060e1
 8005bf0:	080060ef 	.word	0x080060ef
 8005bf4:	080060fd 	.word	0x080060fd
 8005bf8:	0800610b 	.word	0x0800610b
 8005bfc:	08006119 	.word	0x08006119
 8005c00:	08006127 	.word	0x08006127
 8005c04:	08006135 	.word	0x08006135
 8005c08:	08006143 	.word	0x08006143
 8005c0c:	08006151 	.word	0x08006151
 8005c10:	0800615f 	.word	0x0800615f
 8005c14:	0800616d 	.word	0x0800616d
 8005c18:	0800617b 	.word	0x0800617b
 8005c1c:	08006189 	.word	0x08006189
 8005c20:	08006197 	.word	0x08006197
 8005c24:	080061a5 	.word	0x080061a5
 8005c28:	080061b3 	.word	0x080061b3
 8005c2c:	080061c1 	.word	0x080061c1
 8005c30:	080061cf 	.word	0x080061cf
 8005c34:	080061dd 	.word	0x080061dd
 8005c38:	080061eb 	.word	0x080061eb
 8005c3c:	080061f9 	.word	0x080061f9
 8005c40:	08006207 	.word	0x08006207
 8005c44:	08006215 	.word	0x08006215
 8005c48:	08006223 	.word	0x08006223
 8005c4c:	08006231 	.word	0x08006231
 8005c50:	0800623f 	.word	0x0800623f
 8005c54:	0800624d 	.word	0x0800624d
 8005c58:	08006259 	.word	0x08006259
 8005c5c:	08006267 	.word	0x08006267
 8005c60:	08006275 	.word	0x08006275
 8005c64:	08006281 	.word	0x08006281
 8005c68:	0800628d 	.word	0x0800628d
 8005c6c:	08006299 	.word	0x08006299
 8005c70:	080062a5 	.word	0x080062a5
 8005c74:	080062b1 	.word	0x080062b1
 8005c78:	080062bd 	.word	0x080062bd
 8005c7c:	080062cb 	.word	0x080062cb
 8005c80:	080062d9 	.word	0x080062d9
 8005c84:	080062e7 	.word	0x080062e7
 8005c88:	080062f5 	.word	0x080062f5
 8005c8c:	08006303 	.word	0x08006303
 8005c90:	08006311 	.word	0x08006311
 8005c94:	0800631f 	.word	0x0800631f
 8005c98:	0800632d 	.word	0x0800632d
 8005c9c:	0800633b 	.word	0x0800633b
 8005ca0:	08006349 	.word	0x08006349
 8005ca4:	08006357 	.word	0x08006357
 8005ca8:	08006365 	.word	0x08006365
 8005cac:	08006373 	.word	0x08006373
 8005cb0:	08006381 	.word	0x08006381
 8005cb4:	0800638f 	.word	0x0800638f
 8005cb8:	0800639d 	.word	0x0800639d
 8005cbc:	080063ab 	.word	0x080063ab
 8005cc0:	080063b9 	.word	0x080063b9
 8005cc4:	080063c7 	.word	0x080063c7
 8005cc8:	080063d5 	.word	0x080063d5
 8005ccc:	080063e3 	.word	0x080063e3
 8005cd0:	080063f1 	.word	0x080063f1
 8005cd4:	080063ff 	.word	0x080063ff
 8005cd8:	0800640d 	.word	0x0800640d
 8005cdc:	0800641b 	.word	0x0800641b
 8005ce0:	08006429 	.word	0x08006429
 8005ce4:	08006437 	.word	0x08006437
 8005ce8:	08006445 	.word	0x08006445
 8005cec:	08006453 	.word	0x08006453
 8005cf0:	08006461 	.word	0x08006461
 8005cf4:	0800646f 	.word	0x0800646f
 8005cf8:	0800647d 	.word	0x0800647d
 8005cfc:	0800648b 	.word	0x0800648b
 8005d00:	08006499 	.word	0x08006499
 8005d04:	080064a7 	.word	0x080064a7
 8005d08:	080064b5 	.word	0x080064b5
 8005d0c:	080064c7 	.word	0x080064c7
 8005d10:	080064d9 	.word	0x080064d9
 8005d14:	080064e9 	.word	0x080064e9
 8005d18:	080064fb 	.word	0x080064fb
 8005d1c:	0800650d 	.word	0x0800650d
 8005d20:	0800651f 	.word	0x0800651f
 8005d24:	08006531 	.word	0x08006531
 8005d28:	08006543 	.word	0x08006543
 8005d2c:	08006555 	.word	0x08006555
 8005d30:	08006569 	.word	0x08006569
 8005d34:	0800657b 	.word	0x0800657b
 8005d38:	0800658d 	.word	0x0800658d
 8005d3c:	0800659f 	.word	0x0800659f
 8005d40:	080065b1 	.word	0x080065b1
 8005d44:	080065c3 	.word	0x080065c3
 8005d48:	080065d5 	.word	0x080065d5
 8005d4c:	080065e7 	.word	0x080065e7
 8005d50:	080065f9 	.word	0x080065f9
 8005d54:	0800660b 	.word	0x0800660b
 8005d58:	08006619 	.word	0x08006619
 8005d5c:	08006627 	.word	0x08006627
 8005d60:	08006635 	.word	0x08006635
 8005d64:	08006643 	.word	0x08006643
 8005d68:	08006651 	.word	0x08006651
 8005d6c:	0800665f 	.word	0x0800665f
 8005d70:	0800666d 	.word	0x0800666d
 8005d74:	0800667f 	.word	0x0800667f
 8005d78:	0800668d 	.word	0x0800668d
 8005d7c:	0800669b 	.word	0x0800669b
 8005d80:	080066a9 	.word	0x080066a9
 8005d84:	080066b7 	.word	0x080066b7
 8005d88:	080066c5 	.word	0x080066c5
 8005d8c:	080066d3 	.word	0x080066d3
 8005d90:	080066e1 	.word	0x080066e1
 8005d94:	080066ef 	.word	0x080066ef
 8005d98:	080066fd 	.word	0x080066fd
 8005d9c:	0800670b 	.word	0x0800670b
 8005da0:	08006719 	.word	0x08006719
 8005da4:	08006727 	.word	0x08006727
 8005da8:	08006735 	.word	0x08006735
 8005dac:	08006743 	.word	0x08006743
 8005db0:	08006751 	.word	0x08006751
 8005db4:	0800675f 	.word	0x0800675f
 8005db8:	0800676d 	.word	0x0800676d
 8005dbc:	0800677b 	.word	0x0800677b
 8005dc0:	08006789 	.word	0x08006789
 8005dc4:	08006797 	.word	0x08006797
 8005dc8:	080067a5 	.word	0x080067a5
 8005dcc:	080067b3 	.word	0x080067b3
 8005dd0:	080067c1 	.word	0x080067c1
 8005dd4:	080067cf 	.word	0x080067cf
 8005dd8:	080067dd 	.word	0x080067dd
 8005ddc:	080067eb 	.word	0x080067eb
 8005de0:	080067f9 	.word	0x080067f9
 8005de4:	08006807 	.word	0x08006807
 8005de8:	08006815 	.word	0x08006815
 8005dec:	08006823 	.word	0x08006823
 8005df0:	08006831 	.word	0x08006831
 8005df4:	0800683f 	.word	0x0800683f
 8005df8:	0800684d 	.word	0x0800684d
 8005dfc:	0800685b 	.word	0x0800685b
 8005e00:	08006869 	.word	0x08006869
 8005e04:	08006877 	.word	0x08006877
 8005e08:	08006885 	.word	0x08006885
 8005e0c:	08006893 	.word	0x08006893
 8005e10:	080068a1 	.word	0x080068a1
 8005e14:	080068af 	.word	0x080068af

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005e1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	601a      	str	r2, [r3, #0]
	break;
 8005e24:	f000 bd51 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 8005e2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	601a      	str	r2, [r3, #0]
	break;
 8005e34:	f000 bd49 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8005e3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	601a      	str	r2, [r3, #0]
	break;
 8005e44:	f000 bd41 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	601a      	str	r2, [r3, #0]
	break;
 8005e52:	f000 bd3a 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	601a      	str	r2, [r3, #0]
	break;
 8005e60:	f000 bd33 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	789b      	ldrb	r3, [r3, #2]
 8005e68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	601a      	str	r2, [r3, #0]
	break;
 8005e6e:	f000 bd2c 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	78db      	ldrb	r3, [r3, #3]
 8005e76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	601a      	str	r2, [r3, #0]
	break;
 8005e7c:	f000 bd25 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	791b      	ldrb	r3, [r3, #4]
 8005e84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	601a      	str	r2, [r3, #0]
	break;
 8005e8a:	f000 bd1e 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	795b      	ldrb	r3, [r3, #5]
 8005e92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	601a      	str	r2, [r3, #0]
	break;
 8005e98:	f000 bd17 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	799b      	ldrb	r3, [r3, #6]
 8005ea0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	601a      	str	r2, [r3, #0]
	break;
 8005ea6:	f000 bd10 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	601a      	str	r2, [r3, #0]
	break;
 8005eb2:	f000 bd0a 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	891b      	ldrh	r3, [r3, #8]
 8005eba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	601a      	str	r2, [r3, #0]
	break;
 8005ec0:	f000 bd03 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	8a1b      	ldrh	r3, [r3, #16]
 8005ec8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	601a      	str	r2, [r3, #0]
	break;
 8005ece:	f000 bcfc 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	601a      	str	r2, [r3, #0]
	break;
 8005eda:	f000 bcf6 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	7e1b      	ldrb	r3, [r3, #24]
 8005ee2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	601a      	str	r2, [r3, #0]
	break;
 8005ee8:	f000 bcef 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	8b5b      	ldrh	r3, [r3, #26]
 8005ef0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	601a      	str	r2, [r3, #0]
	break;
 8005ef6:	f000 bce8 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8005f00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	601a      	str	r2, [r3, #0]
	break;
 8005f06:	f000 bce0 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005f10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	601a      	str	r2, [r3, #0]
	break;
 8005f16:	f000 bcd8 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	601a      	str	r2, [r3, #0]
	break;
 8005f24:	f000 bcd1 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005f2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]
	break;
 8005f34:	f000 bcc9 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	601a      	str	r2, [r3, #0]
	break;
 8005f42:	f000 bcc2 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8005f4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	601a      	str	r2, [r3, #0]
	break;
 8005f52:	f000 bcba 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8005f5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	601a      	str	r2, [r3, #0]
	break;
 8005f62:	f000 bcb2 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8005f6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	601a      	str	r2, [r3, #0]
	break;
 8005f72:	f000 bcaa 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8005f7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	601a      	str	r2, [r3, #0]
	break;
 8005f82:	f000 bca2 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8005f8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	601a      	str	r2, [r3, #0]
	break;
 8005f92:	f000 bc9a 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8005f9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	601a      	str	r2, [r3, #0]
	break;
 8005fa2:	f000 bc92 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	f9b3 32a6 	ldrsh.w	r3, [r3, #678]	; 0x2a6
		*ptuning_parm_value = (int32_t)(
 8005fac:	461a      	mov	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	601a      	str	r2, [r3, #0]
	break;
 8005fb2:	f000 bc8a 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	f9b3 32a8 	ldrsh.w	r3, [r3, #680]	; 0x2a8
		*ptuning_parm_value = (int32_t)(
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	601a      	str	r2, [r3, #0]
	break;
 8005fc2:	f000 bc82 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8005fcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	601a      	str	r2, [r3, #0]
	break;
 8005fd2:	f000 bc7a 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	601a      	str	r2, [r3, #0]
	break;
 8005fe0:	f000 bc73 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
		*ptuning_parm_value = (int32_t)(
 8005fea:	461a      	mov	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	601a      	str	r2, [r3, #0]
	break;
 8005ff0:	f000 bc6b 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ffa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	601a      	str	r2, [r3, #0]
	break;
 8006000:	f000 bc63 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	f9b3 329e 	ldrsh.w	r3, [r3, #670]	; 0x29e
 800600a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	601a      	str	r2, [r3, #0]
	break;
 8006010:	f000 bc5b 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 800601a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	601a      	str	r2, [r3, #0]
	break;
 8006020:	f000 bc53 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800602a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	601a      	str	r2, [r3, #0]
	break;
 8006030:	f000 bc4b 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 800603a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	601a      	str	r2, [r3, #0]
	break;
 8006040:	f000 bc43 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800604a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	601a      	str	r2, [r3, #0]
	break;
 8006050:	f000 bc3b 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800605a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	601a      	str	r2, [r3, #0]
	break;
 8006060:	f000 bc33 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 800606a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	601a      	str	r2, [r3, #0]
	break;
 8006070:	f000 bc2b 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800607a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	601a      	str	r2, [r3, #0]
	break;
 8006080:	f000 bc23 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800608a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	601a      	str	r2, [r3, #0]
	break;
 8006090:	f000 bc1b 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
		*ptuning_parm_value = (int32_t)(
 800609a:	461a      	mov	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	601a      	str	r2, [r3, #0]
	break;
 80060a0:	f000 bc13 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80060aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	601a      	str	r2, [r3, #0]
	break;
 80060b0:	f000 bc0b 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
		*ptuning_parm_value = (int32_t)(
 80060ba:	461a      	mov	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	601a      	str	r2, [r3, #0]
	break;
 80060c0:	f000 bc03 	b.w	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80060ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	601a      	str	r2, [r3, #0]
	break;
 80060d0:	e3fb      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 80060d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	601a      	str	r2, [r3, #0]
	break;
 80060de:	e3f4      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 80060e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	601a      	str	r2, [r3, #0]
	break;
 80060ec:	e3ed      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 80060f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	601a      	str	r2, [r3, #0]
	break;
 80060fa:	e3e6      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 8006102:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	601a      	str	r2, [r3, #0]
	break;
 8006108:	e3df      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8006110:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	601a      	str	r2, [r3, #0]
	break;
 8006116:	e3d8      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800611e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	601a      	str	r2, [r3, #0]
	break;
 8006124:	e3d1      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	f9b3 32a0 	ldrsh.w	r3, [r3, #672]	; 0x2a0
 800612c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	601a      	str	r2, [r3, #0]
	break;
 8006132:	e3ca      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800613a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	601a      	str	r2, [r3, #0]
	break;
 8006140:	e3c3      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8006148:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	601a      	str	r2, [r3, #0]
	break;
 800614e:	e3bc      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8006156:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	601a      	str	r2, [r3, #0]
	break;
 800615c:	e3b5      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006164:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	601a      	str	r2, [r3, #0]
	break;
 800616a:	e3ae      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8006172:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	601a      	str	r2, [r3, #0]
	break;
 8006178:	e3a7      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8006180:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	601a      	str	r2, [r3, #0]
	break;
 8006186:	e3a0      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800618e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	601a      	str	r2, [r3, #0]
	break;
 8006194:	e399      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	f893 3254 	ldrb.w	r3, [r3, #596]	; 0x254
 800619c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	601a      	str	r2, [r3, #0]
	break;
 80061a2:	e392      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	f8b3 3260 	ldrh.w	r3, [r3, #608]	; 0x260
 80061aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	601a      	str	r2, [r3, #0]
	break;
 80061b0:	e38b      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f8b3 3262 	ldrh.w	r3, [r3, #610]	; 0x262
 80061b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	601a      	str	r2, [r3, #0]
	break;
 80061be:	e384      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80061c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	601a      	str	r2, [r3, #0]
	break;
 80061cc:	e37d      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	f8b3 3266 	ldrh.w	r3, [r3, #614]	; 0x266
 80061d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	601a      	str	r2, [r3, #0]
	break;
 80061da:	e376      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 80061e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	601a      	str	r2, [r3, #0]
	break;
 80061e8:	e36f      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80061f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	601a      	str	r2, [r3, #0]
	break;
 80061f6:	e368      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 80061fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	601a      	str	r2, [r3, #0]
	break;
 8006204:	e361      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 800620c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	601a      	str	r2, [r3, #0]
	break;
 8006212:	e35a      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800621a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	601a      	str	r2, [r3, #0]
	break;
 8006220:	e353      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8006228:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	601a      	str	r2, [r3, #0]
	break;
 800622e:	e34c      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 8006236:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	601a      	str	r2, [r3, #0]
	break;
 800623c:	e345      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8006244:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	601a      	str	r2, [r3, #0]
	break;
 800624a:	e33e      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	7c1b      	ldrb	r3, [r3, #16]
 8006250:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	601a      	str	r2, [r3, #0]
	break;
 8006256:	e338      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800625e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	601a      	str	r2, [r3, #0]
	break;
 8006264:	e331      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800626c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	601a      	str	r2, [r3, #0]
	break;
 8006272:	e32a      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	601a      	str	r2, [r3, #0]
	break;
 800627e:	e324      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	601a      	str	r2, [r3, #0]
	break;
 800628a:	e31e      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	8adb      	ldrh	r3, [r3, #22]
 8006290:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	601a      	str	r2, [r3, #0]
	break;
 8006296:	e318      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	8b1b      	ldrh	r3, [r3, #24]
 800629c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	601a      	str	r2, [r3, #0]
	break;
 80062a2:	e312      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	601a      	str	r2, [r3, #0]
	break;
 80062ae:	e30c      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	601a      	str	r2, [r3, #0]
	break;
 80062ba:	e306      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80062c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	601a      	str	r2, [r3, #0]
	break;
 80062c8:	e2ff      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	601a      	str	r2, [r3, #0]
	break;
 80062d6:	e2f8      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	601a      	str	r2, [r3, #0]
	break;
 80062e4:	e2f1      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	601a      	str	r2, [r3, #0]
	break;
 80062f2:	e2ea      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	f893 32c0 	ldrb.w	r3, [r3, #704]	; 0x2c0
 80062fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	601a      	str	r2, [r3, #0]
	break;
 8006300:	e2e3      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 8006308:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	601a      	str	r2, [r3, #0]
	break;
 800630e:	e2dc      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
 8006316:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	601a      	str	r2, [r3, #0]
	break;
 800631c:	e2d5      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	; 0x2c4
 8006324:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	601a      	str	r2, [r3, #0]
	break;
 800632a:	e2ce      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006332:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	601a      	str	r2, [r3, #0]
	break;
 8006338:	e2c7      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006340:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	601a      	str	r2, [r3, #0]
	break;
 8006346:	e2c0      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	f8b3 32d4 	ldrh.w	r3, [r3, #724]	; 0x2d4
 800634e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	601a      	str	r2, [r3, #0]
	break;
 8006354:	e2b9      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800635c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	601a      	str	r2, [r3, #0]
	break;
 8006362:	e2b2      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	; 0x2d6
 800636a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	601a      	str	r2, [r3, #0]
	break;
 8006370:	e2ab      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 8006378:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	601a      	str	r2, [r3, #0]
	break;
 800637e:	e2a4      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 8006386:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	601a      	str	r2, [r3, #0]
	break;
 800638c:	e29d      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8006394:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	601a      	str	r2, [r3, #0]
	break;
 800639a:	e296      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 80063a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	601a      	str	r2, [r3, #0]
	break;
 80063a8:	e28f      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 80063b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	601a      	str	r2, [r3, #0]
	break;
 80063b6:	e288      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 80063be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	601a      	str	r2, [r3, #0]
	break;
 80063c4:	e281      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 80063cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	601a      	str	r2, [r3, #0]
	break;
 80063d2:	e27a      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80063da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	601a      	str	r2, [r3, #0]
	break;
 80063e0:	e273      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80063e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	601a      	str	r2, [r3, #0]
	break;
 80063ee:	e26c      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80063f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	601a      	str	r2, [r3, #0]
	break;
 80063fc:	e265      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8006404:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	601a      	str	r2, [r3, #0]
	break;
 800640a:	e25e      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006412:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	601a      	str	r2, [r3, #0]
	break;
 8006418:	e257      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006420:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	601a      	str	r2, [r3, #0]
	break;
 8006426:	e250      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800642e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	601a      	str	r2, [r3, #0]
	break;
 8006434:	e249      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800643c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	601a      	str	r2, [r3, #0]
	break;
 8006442:	e242      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800644a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	601a      	str	r2, [r3, #0]
	break;
 8006450:	e23b      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006458:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	601a      	str	r2, [r3, #0]
	break;
 800645e:	e234      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8006466:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	601a      	str	r2, [r3, #0]
	break;
 800646c:	e22d      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8006474:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	601a      	str	r2, [r3, #0]
	break;
 800647a:	e226      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8006482:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	601a      	str	r2, [r3, #0]
	break;
 8006488:	e21f      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8006490:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	601a      	str	r2, [r3, #0]
	break;
 8006496:	e218      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800649e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	601a      	str	r2, [r3, #0]
	break;
 80064a4:	e211      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80064ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	601a      	str	r2, [r3, #0]
	break;
 80064b2:	e20a      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80064ba:	3318      	adds	r3, #24
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	601a      	str	r2, [r3, #0]
	break;
 80064c4:	e201      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80064cc:	331c      	adds	r3, #28
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	601a      	str	r2, [r3, #0]
	break;
 80064d6:	e1f8      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	601a      	str	r2, [r3, #0]
	break;
 80064e6:	e1f0      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80064ee:	3304      	adds	r3, #4
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	601a      	str	r2, [r3, #0]
	break;
 80064f8:	e1e7      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006500:	3308      	adds	r3, #8
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	601a      	str	r2, [r3, #0]
	break;
 800650a:	e1de      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006512:	330c      	adds	r3, #12
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	601a      	str	r2, [r3, #0]
	break;
 800651c:	e1d5      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006524:	3310      	adds	r3, #16
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	601a      	str	r2, [r3, #0]
	break;
 800652e:	e1cc      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006536:	3314      	adds	r3, #20
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	601a      	str	r2, [r3, #0]
	break;
 8006540:	e1c3      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006548:	331c      	adds	r3, #28
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	601a      	str	r2, [r3, #0]
	break;
 8006552:	e1ba      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800655a:	331e      	adds	r3, #30
 800655c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006560:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	601a      	str	r2, [r3, #0]
	break;
 8006566:	e1b0      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800656e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006572:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	601a      	str	r2, [r3, #0]
	break;
 8006578:	e1a7      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006580:	3302      	adds	r3, #2
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	601a      	str	r2, [r3, #0]
	break;
 800658a:	e19e      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006592:	3316      	adds	r3, #22
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	601a      	str	r2, [r3, #0]
	break;
 800659c:	e195      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80065a4:	3318      	adds	r3, #24
 80065a6:	681b      	ldr	r3, [r3, #0]
		*ptuning_parm_value = (int32_t)(
 80065a8:	461a      	mov	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	601a      	str	r2, [r3, #0]
	break;
 80065ae:	e18c      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80065b6:	3304      	adds	r3, #4
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	601a      	str	r2, [r3, #0]
	break;
 80065c0:	e183      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80065c8:	3308      	adds	r3, #8
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	601a      	str	r2, [r3, #0]
	break;
 80065d2:	e17a      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80065da:	330c      	adds	r3, #12
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	601a      	str	r2, [r3, #0]
	break;
 80065e4:	e171      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80065ec:	3310      	adds	r3, #16
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	601a      	str	r2, [r3, #0]
	break;
 80065f6:	e168      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80065fe:	3310      	adds	r3, #16
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	601a      	str	r2, [r3, #0]
	break;
 8006608:	e15f      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006610:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	601a      	str	r2, [r3, #0]
	break;
 8006616:	e158      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800661e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	601a      	str	r2, [r3, #0]
	break;
 8006624:	e151      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 800662c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	601a      	str	r2, [r3, #0]
	break;
 8006632:	e14a      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800663a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	601a      	str	r2, [r3, #0]
	break;
 8006640:	e143      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8006648:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	601a      	str	r2, [r3, #0]
	break;
 800664e:	e13c      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8006656:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	601a      	str	r2, [r3, #0]
	break;
 800665c:	e135      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8006664:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	601a      	str	r2, [r3, #0]
	break;
 800666a:	e12e      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006672:	3314      	adds	r3, #20
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	601a      	str	r2, [r3, #0]
	break;
 800667c:	e125      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	f893 3185 	ldrb.w	r3, [r3, #389]	; 0x185
 8006684:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	601a      	str	r2, [r3, #0]
	break;
 800668a:	e11e      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	f9b3 3186 	ldrsh.w	r3, [r3, #390]	; 0x186
 8006692:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	601a      	str	r2, [r3, #0]
	break;
 8006698:	e117      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	; 0x188
 80066a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	601a      	str	r2, [r3, #0]
	break;
 80066a6:	e110      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	; 0x18a
 80066ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	601a      	str	r2, [r3, #0]
	break;
 80066b4:	e109      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	; 0x18c
 80066bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	601a      	str	r2, [r3, #0]
	break;
 80066c2:	e102      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	; 0x18e
 80066ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	601a      	str	r2, [r3, #0]
	break;
 80066d0:	e0fb      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	; 0x190
 80066d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	601a      	str	r2, [r3, #0]
	break;
 80066de:	e0f4      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 80066e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	601a      	str	r2, [r3, #0]
	break;
 80066ec:	e0ed      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	; 0x194
 80066f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	601a      	str	r2, [r3, #0]
	break;
 80066fa:	e0e6      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	f9b3 3196 	ldrsh.w	r3, [r3, #406]	; 0x196
 8006702:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	601a      	str	r2, [r3, #0]
	break;
 8006708:	e0df      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	f9b3 3198 	ldrsh.w	r3, [r3, #408]	; 0x198
 8006710:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	601a      	str	r2, [r3, #0]
	break;
 8006716:	e0d8      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	; 0x19a
 800671e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	601a      	str	r2, [r3, #0]
	break;
 8006724:	e0d1      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	; 0x19c
 800672c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	601a      	str	r2, [r3, #0]
	break;
 8006732:	e0ca      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	; 0x19e
 800673a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	601a      	str	r2, [r3, #0]
	break;
 8006740:	e0c3      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	f9b3 31a0 	ldrsh.w	r3, [r3, #416]	; 0x1a0
 8006748:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	601a      	str	r2, [r3, #0]
	break;
 800674e:	e0bc      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	f9b3 31a2 	ldrsh.w	r3, [r3, #418]	; 0x1a2
 8006756:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	601a      	str	r2, [r3, #0]
	break;
 800675c:	e0b5      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	f9b3 31a4 	ldrsh.w	r3, [r3, #420]	; 0x1a4
 8006764:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	601a      	str	r2, [r3, #0]
	break;
 800676a:	e0ae      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	f9b3 31a6 	ldrsh.w	r3, [r3, #422]	; 0x1a6
 8006772:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	601a      	str	r2, [r3, #0]
	break;
 8006778:	e0a7      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	; 0x1a8
 8006780:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	601a      	str	r2, [r3, #0]
	break;
 8006786:	e0a0      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	f9b3 31aa 	ldrsh.w	r3, [r3, #426]	; 0x1aa
 800678e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	601a      	str	r2, [r3, #0]
	break;
 8006794:	e099      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	; 0x1ac
 800679c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	601a      	str	r2, [r3, #0]
	break;
 80067a2:	e092      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	f9b3 31ae 	ldrsh.w	r3, [r3, #430]	; 0x1ae
 80067aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	601a      	str	r2, [r3, #0]
	break;
 80067b0:	e08b      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	f9b3 31b0 	ldrsh.w	r3, [r3, #432]	; 0x1b0
 80067b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	601a      	str	r2, [r3, #0]
	break;
 80067be:	e084      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	; 0x1b2
 80067c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	601a      	str	r2, [r3, #0]
	break;
 80067cc:	e07d      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	f9b3 31b4 	ldrsh.w	r3, [r3, #436]	; 0x1b4
 80067d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	601a      	str	r2, [r3, #0]
	break;
 80067da:	e076      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	f9b3 31b6 	ldrsh.w	r3, [r3, #438]	; 0x1b6
 80067e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	601a      	str	r2, [r3, #0]
	break;
 80067e8:	e06f      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	f9b3 31b8 	ldrsh.w	r3, [r3, #440]	; 0x1b8
 80067f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	601a      	str	r2, [r3, #0]
	break;
 80067f6:	e068      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	f9b3 31ba 	ldrsh.w	r3, [r3, #442]	; 0x1ba
 80067fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	601a      	str	r2, [r3, #0]
	break;
 8006804:	e061      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	f9b3 31bc 	ldrsh.w	r3, [r3, #444]	; 0x1bc
 800680c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	601a      	str	r2, [r3, #0]
	break;
 8006812:	e05a      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 800681a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	601a      	str	r2, [r3, #0]
	break;
 8006820:	e053      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 8006828:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	601a      	str	r2, [r3, #0]
	break;
 800682e:	e04c      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 8006836:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	601a      	str	r2, [r3, #0]
	break;
 800683c:	e045      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 8006844:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	601a      	str	r2, [r3, #0]
	break;
 800684a:	e03e      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 8006852:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	601a      	str	r2, [r3, #0]
	break;
 8006858:	e037      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 8006860:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	601a      	str	r2, [r3, #0]
	break;
 8006866:	e030      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 800686e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	601a      	str	r2, [r3, #0]
	break;
 8006874:	e029      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 800687c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	601a      	str	r2, [r3, #0]
	break;
 8006882:	e022      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 800688a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	601a      	str	r2, [r3, #0]
	break;
 8006890:	e01b      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 8006898:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	601a      	str	r2, [r3, #0]
	break;
 800689e:	e014      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 80068a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	601a      	str	r2, [r3, #0]
	break;
 80068ac:	e00d      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 80068b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	601a      	str	r2, [r3, #0]
	break;
 80068ba:	e006      	b.n	80068ca <VL53LX_get_tuning_parm+0xdd6>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80068c2:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 80068c4:	23fc      	movs	r3, #252	; 0xfc
 80068c6:	77fb      	strb	r3, [r7, #31]
	break;
 80068c8:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80068ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3724      	adds	r7, #36	; 0x24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop

080068dc <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80068e4:	2300      	movs	r3, #0
 80068e6:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3318      	adds	r3, #24
 80068ec:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80068f4:	3314      	adds	r3, #20
 80068f6:	2201      	movs	r2, #1
 80068f8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80068fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 800690a:	b480      	push	{r7}
 800690c:	b085      	sub	sp, #20
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	3318      	adds	r3, #24
 800691a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006922:	3314      	adds	r3, #20
 8006924:	2200      	movs	r2, #0
 8006926:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006928:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006940:	2300      	movs	r3, #0
 8006942:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	3318      	adds	r3, #24
 8006948:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006950:	3315      	adds	r3, #21
 8006952:	2200      	movs	r2, #0
 8006954:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006956:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8006966:	b480      	push	{r7}
 8006968:	b085      	sub	sp, #20
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800696e:	2300      	movs	r3, #0
 8006970:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3318      	adds	r3, #24
 8006976:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800697e:	3316      	adds	r3, #22
 8006980:	2201      	movs	r2, #1
 8006982:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006984:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800699c:	2300      	movs	r3, #0
 800699e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3318      	adds	r3, #24
 80069a4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80069ac:	3316      	adds	r3, #22
 80069ae:	2200      	movs	r2, #0
 80069b0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80069b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b085      	sub	sp, #20
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3318      	adds	r3, #24
 80069d2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80069da:	3315      	adds	r3, #21
 80069dc:	2201      	movs	r2, #1
 80069de:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80069e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80069f8:	2300      	movs	r3, #0
 80069fa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2208      	movs	r2, #8
 8006a00:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	220b      	movs	r2, #11
 8006a06:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a0e:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006a16:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8006a1e:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006a26:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006a40:	2300      	movs	r3, #0
 8006a42:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2212      	movs	r2, #18
 8006a4e:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	220f      	movs	r2, #15
 8006a54:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2202      	movs	r2, #2
 8006a5a:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8006a62:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	220c      	movs	r2, #12
 8006a68:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006a84:	2300      	movs	r3, #0
 8006a86:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	895b      	ldrh	r3, [r3, #10]
 8006a8c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	895b      	ldrh	r3, [r3, #10]
 8006aaa:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2200      	movs	r2, #0
 8006ace:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	2240      	movs	r2, #64	; 0x40
 8006ad4:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10d      	bne.n	8006afa <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d108      	bne.n	8006afa <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d103      	bne.n	8006afa <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2200      	movs	r2, #0
 8006af6:	741a      	strb	r2, [r3, #16]
 8006af8:	e002      	b.n	8006b00 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2201      	movs	r2, #1
 8006afe:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 8006b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d114      	bne.n	8006b32 <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d110      	bne.n	8006b32 <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	6818      	ldr	r0, [r3, #0]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	7d9b      	ldrb	r3, [r3, #22]
 8006b24:	f001 ffa0 	bl	8008a68 <VL53LX_calc_range_ignore_threshold>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	831a      	strh	r2, [r3, #24]
 8006b30:	e002      	b.n	8006b38 <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2200      	movs	r2, #0
 8006b36:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8006b3e:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2232      	movs	r2, #50	; 0x32
 8006b44:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006b4c:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	228c      	movs	r2, #140	; 0x8c
 8006b52:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006b72:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006b7a:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2207      	movs	r2, #7
 8006b80:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006b88:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b90:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f64f 72ba 	movw	r2, #65466	; 0xffba
 8006b98:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2246      	movs	r2, #70	; 0x46
 8006b9e:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006ba6:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	228c      	movs	r2, #140	; 0x8c
 8006bac:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8006bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b085      	sub	sp, #20
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006bd0:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006bd8:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006be0:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006be8:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2208      	movs	r2, #8
 8006bee:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2228      	movs	r2, #40	; 0x28
 8006bf4:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2209      	movs	r2, #9
 8006bfa:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006c14:	2300      	movs	r3, #0
 8006c16:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006c1e:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006c26:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c2e:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006c36:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2210      	movs	r2, #16
 8006c3c:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2208      	movs	r2, #8
 8006c42:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	6039      	str	r1, [r7, #0]
 8006c5e:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006c60:	2300      	movs	r3, #0
 8006c62:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2204      	movs	r2, #4
 8006c68:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2201      	movs	r2, #1
 8006c74:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2250      	movs	r2, #80	; 0x50
 8006c86:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	2264      	movs	r2, #100	; 0x64
 8006c8c:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	f241 023d 	movw	r2, #4157	; 0x103d
 8006c94:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2210      	movs	r2, #16
 8006c9a:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2232      	movs	r2, #50	; 0x32
 8006ca0:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2264      	movs	r2, #100	; 0x64
 8006ca6:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	2201      	movs	r2, #1
 8006cac:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	22b4      	movs	r2, #180	; 0xb4
 8006cb2:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8006cc0:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2288      	movs	r2, #136	; 0x88
 8006cce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2208      	movs	r2, #8
 8006cd6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ce8:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2200      	movs	r2, #0
 8006cee:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	79fa      	ldrb	r2, [r7, #7]
 8006cf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8006cfe:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2232      	movs	r2, #50	; 0x32
 8006d04:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006d0c:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	228c      	movs	r2, #140	; 0x8c
 8006d12:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	2250      	movs	r2, #80	; 0x50
 8006d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2232      	movs	r2, #50	; 0x32
 8006d20:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 8006d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b085      	sub	sp, #20
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	221e      	movs	r2, #30
 8006d42:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	220e      	movs	r2, #14
 8006d48:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f642 7294 	movw	r2, #12180	; 0x2f94
 8006d50:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	220e      	movs	r2, #14
 8006d56:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	220a      	movs	r2, #10
 8006d5c:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2206      	movs	r2, #6
 8006d62:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	220e      	movs	r2, #14
 8006d68:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	220a      	movs	r2, #10
 8006d6e:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2206      	movs	r2, #6
 8006d74:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2209      	movs	r2, #9
 8006d7a:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2205      	movs	r2, #5
 8006d80:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2203      	movs	r2, #3
 8006d86:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2206      	movs	r2, #6
 8006d8c:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2206      	movs	r2, #6
 8006d92:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2206      	movs	r2, #6
 8006d98:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2221      	movs	r2, #33	; 0x21
 8006da4:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	223c      	movs	r2, #60	; 0x3c
 8006db6:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	223c      	movs	r2, #60	; 0x3c
 8006dbc:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	223c      	movs	r2, #60	; 0x3c
 8006dc2:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2280      	movs	r2, #128	; 0x80
 8006dc8:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2280      	movs	r2, #128	; 0x80
 8006dce:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2280      	movs	r2, #128	; 0x80
 8006dd4:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2208      	movs	r2, #8
 8006dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2210      	movs	r2, #16
 8006de2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2202      	movs	r2, #2
 8006df2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2202      	movs	r2, #2
 8006e02:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006e1c:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f640 22be 	movw	r2, #2750	; 0xabe
 8006e26:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	22fa      	movs	r2, #250	; 0xfa
 8006e2e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e38:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006e42:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8006e4c:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006e56:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8006e60:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f64f 7238 	movw	r2, #65336	; 0xff38
 8006e6a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	22c8      	movs	r2, #200	; 0xc8
 8006e72:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8006e7c:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8006e8e:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f640 32ea 	movw	r2, #3050	; 0xbea
 8006e98:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8006ea2:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f640 32ea 	movw	r2, #3050	; 0xbea
 8006eac:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8006eb6:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f641 0238 	movw	r2, #6200	; 0x1838
 8006ec0:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	22fa      	movs	r2, #250	; 0xfa
 8006ed8:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006ee2:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8006eec:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f241 1294 	movw	r2, #4500	; 0x1194
 8006ef6:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f64f 7238 	movw	r2, #65336	; 0xff38
 8006f00:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	22c8      	movs	r2, #200	; 0xc8
 8006f08:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f640 720a 	movw	r2, #3850	; 0xf0a
 8006f32:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8006f3c:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f640 720a 	movw	r2, #3850	; 0xf0a
 8006f46:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006f88:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006f90:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006f98:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006fa0:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006fa8:	639a      	str	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006fb0:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f242 3228 	movw	r2, #9000	; 0x2328
 8006fb8:	641a      	str	r2, [r3, #64]	; 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f241 7270 	movw	r2, #6000	; 0x1770
 8006fc0:	645a      	str	r2, [r3, #68]	; 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006fc8:	649a      	str	r2, [r3, #72]	; 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f242 3228 	movw	r2, #9000	; 0x2328
 8006fd0:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f241 7270 	movw	r2, #6000	; 0x1770
 8006fd8:	651a      	str	r2, [r3, #80]	; 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006fe0:	655a      	str	r2, [r3, #84]	; 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006fe8:	659a      	str	r2, [r3, #88]	; 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006ff0:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006ff8:	661a      	str	r2, [r3, #96]	; 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007000:	665a      	str	r2, [r3, #100]	; 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f24f 6218 	movw	r2, #63000	; 0xf618
 8007008:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007010:	671a      	str	r2, [r3, #112]	; 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007018:	675a      	str	r2, [r3, #116]	; 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8007020:	679a      	str	r2, [r3, #120]	; 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	669a      	str	r2, [r3, #104]	; 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800702e:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8007036:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f643 2298 	movw	r2, #15000	; 0x3a98
 800704e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2206      	movs	r2, #6
 8007056:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800705a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 800706a:	b480      	push	{r7}
 800706c:	b085      	sub	sp, #20
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007072:	2300      	movs	r3, #0
 8007074:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800707c:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2238      	movs	r2, #56	; 0x38
 8007082:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2270      	movs	r2, #112	; 0x70
 800708e:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2210      	movs	r2, #16
 8007094:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2264      	movs	r2, #100	; 0x64
 800709a:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070a2:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	220f      	movs	r2, #15
 80070a8:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2234      	movs	r2, #52	; 0x34
 80070ae:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	22c8      	movs	r2, #200	; 0xc8
 80070b4:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80070bc:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80070c4:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80070c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b087      	sub	sp, #28
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	607a      	str	r2, [r7, #4]
 80070e2:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80070e4:	2300      	movs	r3, #0
 80070e6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80070ee:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2211      	movs	r2, #17
 8007130:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2202      	movs	r2, #2
 8007136:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2202      	movs	r2, #2
 8007142:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2208      	movs	r2, #8
 8007148:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8007150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007152:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800715a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8007164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007166:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2201      	movs	r2, #1
 8007172:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	22ff      	movs	r2, #255	; 0xff
 800718a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800718c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718e:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2220      	movs	r2, #32
 80071be:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	220b      	movs	r2, #11
 80071c4:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 80071c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c8:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2202      	movs	r2, #2
 80071d2:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	220d      	movs	r2, #13
 80071d8:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 80071da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071dc:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8007200:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2238      	movs	r2, #56	; 0x38
 800720c:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	22ff      	movs	r2, #255	; 0xff
 8007212:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2200      	movs	r2, #0
 800721e:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	221a      	movs	r2, #26
 8007224:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2200      	movs	r2, #0
 800722a:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2220      	movs	r2, #32
 8007230:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2201      	movs	r2, #1
 8007236:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	22cc      	movs	r2, #204	; 0xcc
 800723c:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	220b      	movs	r2, #11
 8007242:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2201      	movs	r2, #1
 8007248:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	22f5      	movs	r2, #245	; 0xf5
 800724e:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2209      	movs	r2, #9
 8007254:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8007256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007258:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2208      	movs	r2, #8
 800726a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2278      	movs	r2, #120	; 0x78
 8007270:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2200      	movs	r2, #0
 8007276:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2200      	movs	r2, #0
 800727c:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2207      	movs	r2, #7
 8007282:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2221      	movs	r2, #33	; 0x21
 8007288:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2243      	movs	r2, #67	; 0x43
 800728e:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2210      	movs	r2, #16
 8007294:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	2232      	movs	r2, #50	; 0x32
 800729a:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2254      	movs	r2, #84	; 0x54
 80072a0:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	2207      	movs	r2, #7
 80072a6:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2221      	movs	r2, #33	; 0x21
 80072ac:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2243      	movs	r2, #67	; 0x43
 80072b2:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2210      	movs	r2, #16
 80072b8:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2202      	movs	r2, #2
 80072be:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2243      	movs	r2, #67	; 0x43
 80072c4:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2205      	movs	r2, #5
 80072ca:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2200      	movs	r2, #0
 80072d0:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2207      	movs	r2, #7
 80072d6:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2221      	movs	r2, #33	; 0x21
 80072dc:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	2243      	movs	r2, #67	; 0x43
 80072e2:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2210      	movs	r2, #16
 80072e8:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2232      	movs	r2, #50	; 0x32
 80072ee:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2254      	movs	r2, #84	; 0x54
 80072f4:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072fc:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007304:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2200      	movs	r2, #0
 800730a:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	2205      	movs	r2, #5
 8007310:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 8007312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007314:	2200      	movs	r2, #0
 8007316:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8007318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731a:	220f      	movs	r2, #15
 800731c:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 800731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007320:	220f      	movs	r2, #15
 8007322:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	2208      	movs	r2, #8
 8007328:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 800732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732c:	2208      	movs	r2, #8
 800732e:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	2201      	movs	r2, #1
 8007334:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	2200      	movs	r2, #0
 800733a:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	2200      	movs	r2, #0
 8007340:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	2200      	movs	r2, #0
 8007346:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	220b      	movs	r2, #11
 8007356:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	2209      	movs	r2, #9
 800735c:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007360:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	2201      	movs	r2, #1
 8007372:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007380:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	22c7      	movs	r2, #199	; 0xc7
 800738c:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	22ff      	movs	r2, #255	; 0xff
 8007392:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	22db      	movs	r2, #219	; 0xdb
 8007398:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	2202      	movs	r2, #2
 800739e:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	2200      	movs	r2, #0
 80073a4:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	2201      	movs	r2, #1
 80073aa:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	2201      	movs	r2, #1
 80073b0:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	2221      	movs	r2, #33	; 0x21
 80073b6:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 80073b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	371c      	adds	r7, #28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b090      	sub	sp, #64	; 0x40
 80073cc:	af0a      	add	r7, sp, #40	; 0x28
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80073d6:	2300      	movs	r3, #0
 80073d8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073dc:	9303      	str	r3, [sp, #12]
 80073de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e0:	9302      	str	r3, [sp, #8]
 80073e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e4:	9301      	str	r3, [sp, #4]
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	68b8      	ldr	r0, [r7, #8]
 80073f2:	f7ff fe70 	bl	80070d6 <VL53LX_preset_mode_standard_ranging>
 80073f6:	4603      	mov	r3, r0
 80073f8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80073fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d171      	bne.n	80074e6 <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007408:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	9308      	str	r3, [sp, #32]
 800740e:	2305      	movs	r3, #5
 8007410:	9307      	str	r3, [sp, #28]
 8007412:	2304      	movs	r3, #4
 8007414:	9306      	str	r3, [sp, #24]
 8007416:	2303      	movs	r3, #3
 8007418:	9305      	str	r3, [sp, #20]
 800741a:	2302      	movs	r3, #2
 800741c:	9304      	str	r3, [sp, #16]
 800741e:	2301      	movs	r3, #1
 8007420:	9303      	str	r3, [sp, #12]
 8007422:	2300      	movs	r3, #0
 8007424:	9302      	str	r3, [sp, #8]
 8007426:	2304      	movs	r3, #4
 8007428:	9301      	str	r3, [sp, #4]
 800742a:	2303      	movs	r3, #3
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	2302      	movs	r3, #2
 8007430:	2201      	movs	r2, #1
 8007432:	2100      	movs	r1, #0
 8007434:	2007      	movs	r0, #7
 8007436:	f000 ffab 	bl	8008390 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	3302      	adds	r3, #2
 800743e:	9308      	str	r3, [sp, #32]
 8007440:	2305      	movs	r3, #5
 8007442:	9307      	str	r3, [sp, #28]
 8007444:	2304      	movs	r3, #4
 8007446:	9306      	str	r3, [sp, #24]
 8007448:	2303      	movs	r3, #3
 800744a:	9305      	str	r3, [sp, #20]
 800744c:	2302      	movs	r3, #2
 800744e:	9304      	str	r3, [sp, #16]
 8007450:	2301      	movs	r3, #1
 8007452:	9303      	str	r3, [sp, #12]
 8007454:	2300      	movs	r3, #0
 8007456:	9302      	str	r3, [sp, #8]
 8007458:	2304      	movs	r3, #4
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	2303      	movs	r3, #3
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	2302      	movs	r3, #2
 8007462:	2201      	movs	r2, #1
 8007464:	2100      	movs	r1, #0
 8007466:	2007      	movs	r0, #7
 8007468:	f001 f822 	bl	80084b0 <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	2209      	movs	r2, #9
 8007470:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	220b      	movs	r2, #11
 8007476:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	2209      	movs	r2, #9
 800747c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	220b      	movs	r2, #11
 8007482:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	2200      	movs	r2, #0
 8007488:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	2220      	movs	r2, #32
 800748e:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	2200      	movs	r2, #0
 8007494:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	221a      	movs	r2, #26
 800749a:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	2200      	movs	r2, #0
 80074a0:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 80074a2:	6a3b      	ldr	r3, [r7, #32]
 80074a4:	2228      	movs	r2, #40	; 0x28
 80074a6:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	2200      	movs	r2, #0
 80074ac:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	2221      	movs	r2, #33	; 0x21
 80074b2:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	22f5      	movs	r2, #245	; 0xf5
 80074b8:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2208      	movs	r2, #8
 80074be:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2288      	movs	r2, #136	; 0x88
 80074c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	6a3b      	ldr	r3, [r7, #32]
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	68b9      	ldr	r1, [r7, #8]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f9e6 	bl	80078a6 <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	229b      	movs	r2, #155	; 0x9b
 80074de:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	2226      	movs	r2, #38	; 0x26
 80074e4:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80074e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3718      	adds	r7, #24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b090      	sub	sp, #64	; 0x40
 80074f6:	af0a      	add	r7, sp, #40	; 0x28
 80074f8:	60f8      	str	r0, [r7, #12]
 80074fa:	60b9      	str	r1, [r7, #8]
 80074fc:	607a      	str	r2, [r7, #4]
 80074fe:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007500:	2300      	movs	r3, #0
 8007502:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007506:	9304      	str	r3, [sp, #16]
 8007508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750a:	9303      	str	r3, [sp, #12]
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	9302      	str	r3, [sp, #8]
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	9301      	str	r3, [sp, #4]
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f7ff ff52 	bl	80073c8 <VL53LX_preset_mode_histogram_ranging>
 8007524:	4603      	mov	r3, r0
 8007526:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007528:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d178      	bne.n	8007622 <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	9308      	str	r3, [sp, #32]
 8007534:	2305      	movs	r3, #5
 8007536:	9307      	str	r3, [sp, #28]
 8007538:	2304      	movs	r3, #4
 800753a:	9306      	str	r3, [sp, #24]
 800753c:	2303      	movs	r3, #3
 800753e:	9305      	str	r3, [sp, #20]
 8007540:	2302      	movs	r3, #2
 8007542:	9304      	str	r3, [sp, #16]
 8007544:	2301      	movs	r3, #1
 8007546:	9303      	str	r3, [sp, #12]
 8007548:	2300      	movs	r3, #0
 800754a:	9302      	str	r3, [sp, #8]
 800754c:	2304      	movs	r3, #4
 800754e:	9301      	str	r3, [sp, #4]
 8007550:	2303      	movs	r3, #3
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	2302      	movs	r3, #2
 8007556:	2201      	movs	r2, #1
 8007558:	2100      	movs	r1, #0
 800755a:	2007      	movs	r0, #7
 800755c:	f000 ff18 	bl	8008390 <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007562:	3302      	adds	r3, #2
 8007564:	9308      	str	r3, [sp, #32]
 8007566:	2305      	movs	r3, #5
 8007568:	9307      	str	r3, [sp, #28]
 800756a:	2304      	movs	r3, #4
 800756c:	9306      	str	r3, [sp, #24]
 800756e:	2303      	movs	r3, #3
 8007570:	9305      	str	r3, [sp, #20]
 8007572:	2302      	movs	r3, #2
 8007574:	9304      	str	r3, [sp, #16]
 8007576:	2301      	movs	r3, #1
 8007578:	9303      	str	r3, [sp, #12]
 800757a:	2300      	movs	r3, #0
 800757c:	9302      	str	r3, [sp, #8]
 800757e:	2304      	movs	r3, #4
 8007580:	9301      	str	r3, [sp, #4]
 8007582:	2303      	movs	r3, #3
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	2302      	movs	r3, #2
 8007588:	2201      	movs	r2, #1
 800758a:	2100      	movs	r1, #0
 800758c:	2007      	movs	r0, #7
 800758e:	f000 ff8f 	bl	80084b0 <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	68b9      	ldr	r1, [r7, #8]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f982 	bl	80078a6 <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	2209      	movs	r2, #9
 80075a6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 80075a8:	6a3b      	ldr	r3, [r7, #32]
 80075aa:	220b      	movs	r2, #11
 80075ac:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	2200      	movs	r2, #0
 80075b2:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	2221      	movs	r2, #33	; 0x21
 80075b8:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	2200      	movs	r2, #0
 80075be:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	221b      	movs	r2, #27
 80075c4:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	2200      	movs	r2, #0
 80075ca:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	2229      	movs	r2, #41	; 0x29
 80075d0:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	2200      	movs	r2, #0
 80075d6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 80075d8:	6a3b      	ldr	r3, [r7, #32]
 80075da:	2222      	movs	r2, #34	; 0x22
 80075dc:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2209      	movs	r2, #9
 80075e2:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	22f5      	movs	r2, #245	; 0xf5
 80075e8:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	2209      	movs	r2, #9
 80075ee:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	220b      	movs	r2, #11
 80075f4:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 80075f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f8:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 80075fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007600:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2208      	movs	r2, #8
 800760a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2288      	movs	r2, #136	; 0x88
 8007612:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	229b      	movs	r2, #155	; 0x9b
 800761a:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	2226      	movs	r2, #38	; 0x26
 8007620:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007622:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b090      	sub	sp, #64	; 0x40
 8007632:	af0a      	add	r7, sp, #40	; 0x28
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	607a      	str	r2, [r7, #4]
 800763a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800763c:	2300      	movs	r3, #0
 800763e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007642:	9304      	str	r3, [sp, #16]
 8007644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007646:	9303      	str	r3, [sp, #12]
 8007648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764a:	9302      	str	r3, [sp, #8]
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	9301      	str	r3, [sp, #4]
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	68b9      	ldr	r1, [r7, #8]
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f7ff feb4 	bl	80073c8 <VL53LX_preset_mode_histogram_ranging>
 8007660:	4603      	mov	r3, r0
 8007662:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007664:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d178      	bne.n	800775e <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	9308      	str	r3, [sp, #32]
 8007670:	2303      	movs	r3, #3
 8007672:	9307      	str	r3, [sp, #28]
 8007674:	2302      	movs	r3, #2
 8007676:	9306      	str	r3, [sp, #24]
 8007678:	2301      	movs	r3, #1
 800767a:	9305      	str	r3, [sp, #20]
 800767c:	2302      	movs	r3, #2
 800767e:	9304      	str	r3, [sp, #16]
 8007680:	2301      	movs	r3, #1
 8007682:	9303      	str	r3, [sp, #12]
 8007684:	2300      	movs	r3, #0
 8007686:	9302      	str	r3, [sp, #8]
 8007688:	2302      	movs	r3, #2
 800768a:	9301      	str	r3, [sp, #4]
 800768c:	2302      	movs	r3, #2
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	2301      	movs	r3, #1
 8007692:	2201      	movs	r2, #1
 8007694:	2100      	movs	r1, #0
 8007696:	2007      	movs	r0, #7
 8007698:	f000 fe7a 	bl	8008390 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 800769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769e:	3302      	adds	r3, #2
 80076a0:	9308      	str	r3, [sp, #32]
 80076a2:	2303      	movs	r3, #3
 80076a4:	9307      	str	r3, [sp, #28]
 80076a6:	2302      	movs	r3, #2
 80076a8:	9306      	str	r3, [sp, #24]
 80076aa:	2301      	movs	r3, #1
 80076ac:	9305      	str	r3, [sp, #20]
 80076ae:	2302      	movs	r3, #2
 80076b0:	9304      	str	r3, [sp, #16]
 80076b2:	2301      	movs	r3, #1
 80076b4:	9303      	str	r3, [sp, #12]
 80076b6:	2300      	movs	r3, #0
 80076b8:	9302      	str	r3, [sp, #8]
 80076ba:	2302      	movs	r3, #2
 80076bc:	9301      	str	r3, [sp, #4]
 80076be:	2302      	movs	r3, #2
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	2301      	movs	r3, #1
 80076c4:	2201      	movs	r2, #1
 80076c6:	2100      	movs	r1, #0
 80076c8:	2007      	movs	r0, #7
 80076ca:	f000 fef1 	bl	80084b0 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	68b9      	ldr	r1, [r7, #8]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f8e4 	bl	80078a6 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	2205      	movs	r2, #5
 80076e2:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	2207      	movs	r2, #7
 80076e8:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	2200      	movs	r2, #0
 80076ee:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	2236      	movs	r2, #54	; 0x36
 80076f4:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	2200      	movs	r2, #0
 80076fa:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	2228      	movs	r2, #40	; 0x28
 8007700:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	2200      	movs	r2, #0
 8007706:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	2244      	movs	r2, #68	; 0x44
 800770c:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	2200      	movs	r2, #0
 8007712:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	2233      	movs	r2, #51	; 0x33
 8007718:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2205      	movs	r2, #5
 800771e:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	22f5      	movs	r2, #245	; 0xf5
 8007724:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	2205      	movs	r2, #5
 800772a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	2207      	movs	r2, #7
 8007730:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 8007732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007734:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 800773a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773c:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2208      	movs	r2, #8
 8007746:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2248      	movs	r2, #72	; 0x48
 800774e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	229b      	movs	r2, #155	; 0x9b
 8007756:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775a:	2226      	movs	r2, #38	; 0x26
 800775c:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800775e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3718      	adds	r7, #24
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b090      	sub	sp, #64	; 0x40
 800776e:	af0a      	add	r7, sp, #40	; 0x28
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	607a      	str	r2, [r7, #4]
 8007776:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007778:	2300      	movs	r3, #0
 800777a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 800777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777e:	9304      	str	r3, [sp, #16]
 8007780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007782:	9303      	str	r3, [sp, #12]
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	9302      	str	r3, [sp, #8]
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	9301      	str	r3, [sp, #4]
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	68b9      	ldr	r1, [r7, #8]
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f7ff fe16 	bl	80073c8 <VL53LX_preset_mode_histogram_ranging>
 800779c:	4603      	mov	r3, r0
 800779e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80077a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d178      	bne.n	800789a <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	9308      	str	r3, [sp, #32]
 80077ac:	2302      	movs	r3, #2
 80077ae:	9307      	str	r3, [sp, #28]
 80077b0:	2302      	movs	r3, #2
 80077b2:	9306      	str	r3, [sp, #24]
 80077b4:	2301      	movs	r3, #1
 80077b6:	9305      	str	r3, [sp, #20]
 80077b8:	2301      	movs	r3, #1
 80077ba:	9304      	str	r3, [sp, #16]
 80077bc:	2301      	movs	r3, #1
 80077be:	9303      	str	r3, [sp, #12]
 80077c0:	2300      	movs	r3, #0
 80077c2:	9302      	str	r3, [sp, #8]
 80077c4:	2301      	movs	r3, #1
 80077c6:	9301      	str	r3, [sp, #4]
 80077c8:	2301      	movs	r3, #1
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	2301      	movs	r3, #1
 80077ce:	2200      	movs	r2, #0
 80077d0:	2107      	movs	r1, #7
 80077d2:	2007      	movs	r0, #7
 80077d4:	f000 fddc 	bl	8008390 <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80077d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077da:	3302      	adds	r3, #2
 80077dc:	9308      	str	r3, [sp, #32]
 80077de:	2302      	movs	r3, #2
 80077e0:	9307      	str	r3, [sp, #28]
 80077e2:	2302      	movs	r3, #2
 80077e4:	9306      	str	r3, [sp, #24]
 80077e6:	2301      	movs	r3, #1
 80077e8:	9305      	str	r3, [sp, #20]
 80077ea:	2301      	movs	r3, #1
 80077ec:	9304      	str	r3, [sp, #16]
 80077ee:	2301      	movs	r3, #1
 80077f0:	9303      	str	r3, [sp, #12]
 80077f2:	2300      	movs	r3, #0
 80077f4:	9302      	str	r3, [sp, #8]
 80077f6:	2301      	movs	r3, #1
 80077f8:	9301      	str	r3, [sp, #4]
 80077fa:	2301      	movs	r3, #1
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	2301      	movs	r3, #1
 8007800:	2200      	movs	r2, #0
 8007802:	2107      	movs	r1, #7
 8007804:	2007      	movs	r0, #7
 8007806:	f000 fe53 	bl	80084b0 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	68b9      	ldr	r1, [r7, #8]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f846 	bl	80078a6 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	2203      	movs	r2, #3
 800781e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	2205      	movs	r2, #5
 8007824:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	2200      	movs	r2, #0
 800782a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	2252      	movs	r2, #82	; 0x52
 8007830:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	2200      	movs	r2, #0
 8007836:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	2237      	movs	r2, #55	; 0x37
 800783c:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	2200      	movs	r2, #0
 8007842:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	2266      	movs	r2, #102	; 0x66
 8007848:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	2200      	movs	r2, #0
 800784e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	2244      	movs	r2, #68	; 0x44
 8007854:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2203      	movs	r2, #3
 800785a:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	22f5      	movs	r2, #245	; 0xf5
 8007860:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	2203      	movs	r2, #3
 8007866:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	2205      	movs	r2, #5
 800786c:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 800786e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007870:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8007876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007878:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2208      	movs	r2, #8
 8007882:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2228      	movs	r2, #40	; 0x28
 800788a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	22bb      	movs	r2, #187	; 0xbb
 8007892:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	2226      	movs	r2, #38	; 0x26
 8007898:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800789a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b085      	sub	sp, #20
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	60f8      	str	r0, [r7, #12]
 80078ae:	60b9      	str	r1, [r7, #8]
 80078b0:	607a      	str	r2, [r7, #4]
 80078b2:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	79db      	ldrb	r3, [r3, #7]
 80078e8:	b29b      	uxth	r3, r3
				<< 8)
 80078ea:	021b      	lsls	r3, r3, #8
 80078ec:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	7a1b      	ldrb	r3, [r3, #8]
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	4413      	add	r3, r2
 80078f6:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	785b      	ldrb	r3, [r3, #1]
 8007930:	b29b      	uxth	r3, r3
				<< 8)
 8007932:	021b      	lsls	r3, r3, #8
 8007934:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	789b      	ldrb	r3, [r3, #2]
 800793a:	b29b      	uxth	r3, r3
 800793c:	4413      	add	r3, r2
 800793e:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	78db      	ldrb	r3, [r3, #3]
 8007948:	b29b      	uxth	r3, r3
				<< 8)
 800794a:	021b      	lsls	r3, r3, #8
 800794c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	791b      	ldrb	r3, [r3, #4]
 8007952:	b29b      	uxth	r3, r3
 8007954:	4413      	add	r3, r2
 8007956:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 8007984:	bf00      	nop
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	79db      	ldrb	r3, [r3, #7]
 80079d0:	b29b      	uxth	r3, r3
				<< 8)
 80079d2:	021b      	lsls	r3, r3, #8
 80079d4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	7a1b      	ldrb	r3, [r3, #8]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	4413      	add	r3, r2
 80079de:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	785b      	ldrb	r3, [r3, #1]
 8007a10:	b29b      	uxth	r3, r3
				<< 8)
 8007a12:	021b      	lsls	r3, r3, #8
 8007a14:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	789b      	ldrb	r3, [r3, #2]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	4413      	add	r3, r2
 8007a1e:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	78db      	ldrb	r3, [r3, #3]
 8007a28:	b29b      	uxth	r3, r3
				<< 8)
 8007a2a:	021b      	lsls	r3, r3, #8
 8007a2c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	791b      	ldrb	r3, [r3, #4]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	4413      	add	r3, r2
 8007a36:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 8007a4c:	bf00      	nop
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	3318      	adds	r3, #24
 8007a64:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007a84:	bf00      	nop
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3318      	adds	r3, #24
 8007aa0:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	332c      	adds	r3, #44	; 0x2c
 8007aa6:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	78fa      	ldrb	r2, [r7, #3]
 8007aac:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2200      	movs	r2, #0
 8007abe:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	78fa      	ldrb	r2, [r7, #3]
 8007aca:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2200      	movs	r2, #0
 8007adc:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	735a      	strb	r2, [r3, #13]

}
 8007ae4:	bf00      	nop
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 8007af8:	2300      	movs	r3, #0
 8007afa:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3318      	adds	r3, #24
 8007b00:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	332c      	adds	r3, #44	; 0x2c
 8007b06:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d115      	bne.n	8007b42 <VL53LX_update_ll_driver_rd_state+0x52>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2203      	movs	r2, #3
 8007b1a:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2202      	movs	r2, #2
 8007b32:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	735a      	strb	r2, [r3, #13]
 8007b40:	e0be      	b.n	8007cc0 <VL53LX_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	7a1b      	ldrb	r3, [r3, #8]
 8007b46:	2bff      	cmp	r3, #255	; 0xff
 8007b48:	d103      	bne.n	8007b52 <VL53LX_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2280      	movs	r2, #128	; 0x80
 8007b4e:	721a      	strb	r2, [r3, #8]
 8007b50:	e005      	b.n	8007b5e <VL53LX_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	7a1b      	ldrb	r3, [r3, #8]
 8007b56:	3301      	adds	r3, #1
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	7a19      	ldrb	r1, [r3, #8]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f103 0209 	add.w	r2, r3, #9
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	330a      	adds	r3, #10
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f002 fcf6 	bl	800a55e <VL53LX_update_internal_stream_counters>
 8007b72:	4603      	mov	r3, r0
 8007b74:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	7adb      	ldrb	r3, [r3, #11]
 8007b7a:	f083 0302 	eor.w	r3, r3, #2
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	79db      	ldrb	r3, [r3, #7]
 8007b88:	3b03      	subs	r3, #3
 8007b8a:	2b05      	cmp	r3, #5
 8007b8c:	f200 8082 	bhi.w	8007c94 <VL53LX_update_ll_driver_rd_state+0x1a4>
 8007b90:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <VL53LX_update_ll_driver_rd_state+0xa8>)
 8007b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b96:	bf00      	nop
 8007b98:	08007bb1 	.word	0x08007bb1
 8007b9c:	08007c95 	.word	0x08007c95
 8007ba0:	08007c95 	.word	0x08007c95
 8007ba4:	08007c03 	.word	0x08007c03
 8007ba8:	08007c39 	.word	0x08007c39
 8007bac:	08007c63 	.word	0x08007c63

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	f893 335e 	ldrb.w	r3, [r3, #862]	; 0x35e
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	dd03      	ble.n	8007bc6 <VL53LX_update_ll_driver_rd_state+0xd6>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2206      	movs	r2, #6
 8007bc2:	71da      	strb	r2, [r3, #7]
 8007bc4:	e00d      	b.n	8007be2 <VL53LX_update_ll_driver_rd_state+0xf2>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d303      	bcc.n	8007bdc <VL53LX_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2208      	movs	r2, #8
 8007bd8:	71da      	strb	r2, [r3, #7]
 8007bda:	e002      	b.n	8007be2 <VL53LX_update_ll_driver_rd_state+0xf2>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2207      	movs	r2, #7
 8007be0:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	735a      	strb	r2, [r3, #13]

			break;
 8007c00:	e05e      	b.n	8007cc0 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d303      	bcc.n	8007c30 <VL53LX_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2208      	movs	r2, #8
 8007c2c:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8007c2e:	e047      	b.n	8007cc0 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2207      	movs	r2, #7
 8007c34:	71da      	strb	r2, [r3, #7]
			break;
 8007c36:	e043      	b.n	8007cc0 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	7b5b      	ldrb	r3, [r3, #13]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d303      	bcc.n	8007c5a <VL53LX_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2208      	movs	r2, #8
 8007c56:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8007c58:	e032      	b.n	8007cc0 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2207      	movs	r2, #7
 8007c5e:	71da      	strb	r2, [r3, #7]
			break;
 8007c60:	e02e      	b.n	8007cc0 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	7b1b      	ldrb	r3, [r3, #12]
 8007c6c:	f083 0301 	eor.w	r3, r3, #1
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d303      	bcc.n	8007c8c <VL53LX_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2208      	movs	r2, #8
 8007c88:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 8007c8a:	e019      	b.n	8007cc0 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2207      	movs	r2, #7
 8007c90:	71da      	strb	r2, [r3, #7]
			break;
 8007c92:	e015      	b.n	8007cc0 <VL53LX_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2203      	movs	r2, #3
 8007c98:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	735a      	strb	r2, [r3, #13]
			break;
 8007cbe:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 8007cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3718      	adds	r7, #24
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b08d      	sub	sp, #52	; 0x34
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t  *pdev =
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3318      	adds	r3, #24
 8007cde:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8007ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cea:	332c      	adds	r3, #44	; 0x2c
 8007cec:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	f203 3366 	addw	r3, r3, #870	; 0x366
 8007cf4:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 8007cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007cfc:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8007d04:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 8007d06:	2300      	movs	r3, #0
 8007d08:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8007d24:	f003 031f 	and.w	r3, r3, #31
 8007d28:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	78db      	ldrb	r3, [r3, #3]
 8007d2e:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 8007d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d32:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007d36:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	bf14      	ite	ne
 8007d3e:	2301      	movne	r3, #1
 8007d40:	2300      	moveq	r3, #0
 8007d42:	b2db      	uxtb	r3, r3
	histogram_mode =
 8007d44:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8007d4a:	111b      	asrs	r3, r3, #4
 8007d4c:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8007d4e:	f003 0302 	and.w	r3, r3, #2
 8007d52:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 8007d56:	7c7b      	ldrb	r3, [r7, #17]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d008      	beq.n	8007d6e <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8007d62:	111b      	asrs	r3, r3, #4
 8007d64:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007d74:	f003 0320 	and.w	r3, r3, #32
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d04e      	beq.n	8007e1a <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	79db      	ldrb	r3, [r3, #7]
 8007d80:	2b06      	cmp	r3, #6
 8007d82:	d109      	bne.n	8007d98 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 8007d84:	7c7b      	ldrb	r3, [r7, #17]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d14a      	bne.n	8007e20 <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 8007d8a:	7cfb      	ldrb	r3, [r7, #19]
 8007d8c:	2b12      	cmp	r3, #18
 8007d8e:	d047      	beq.n	8007e20 <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8007d90:	23ef      	movs	r3, #239	; 0xef
 8007d92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007d96:	e043      	b.n	8007e20 <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	7a1b      	ldrb	r3, [r3, #8]
 8007d9c:	7cba      	ldrb	r2, [r7, #18]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d002      	beq.n	8007da8 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 8007da2:	23ee      	movs	r3, #238	; 0xee
 8007da4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	7adb      	ldrb	r3, [r3, #11]
 8007dac:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d002      	beq.n	8007dba <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8007db4:	23ed      	movs	r3, #237	; 0xed
 8007db6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	7b5b      	ldrb	r3, [r3, #13]
 8007dbe:	4619      	mov	r1, r3
		expected_stream_count =
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	440b      	add	r3, r1
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	4413      	add	r3, r2
 8007dcc:	3302      	adds	r3, #2
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	7b5b      	ldrb	r3, [r3, #13]
 8007dd6:	4619      	mov	r1, r3
		expected_gph_id =
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	440b      	add	r3, r1
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	4413      	add	r3, r2
 8007de4:	3303      	adds	r3, #3
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 8007dea:	7c3a      	ldrb	r2, [r7, #16]
 8007dec:	7cbb      	ldrb	r3, [r7, #18]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d00a      	beq.n	8007e08 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 8007df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d102      	bne.n	8007e02 <VL53LX_check_ll_driver_rd_state+0x136>
 8007dfc:	7cbb      	ldrb	r3, [r7, #18]
 8007dfe:	2bff      	cmp	r3, #255	; 0xff
 8007e00:	d002      	beq.n	8007e08 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 8007e02:	23ec      	movs	r3, #236	; 0xec
 8007e04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 8007e08:	7bfa      	ldrb	r2, [r7, #15]
 8007e0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d005      	beq.n	8007e1e <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 8007e12:	23eb      	movs	r3, #235	; 0xeb
 8007e14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007e18:	e002      	b.n	8007e20 <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 8007e1a:	bf00      	nop
 8007e1c:	e000      	b.n	8007e20 <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 8007e1e:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8007e20:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3734      	adds	r7, #52	; 0x34
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b088      	sub	sp, #32
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3318      	adds	r3, #24
 8007e40:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007e48:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	332c      	adds	r3, #44	; 0x2c
 8007e4e:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8007e56:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007e5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d11b      	bne.n	8007e9e <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	2203      	movs	r2, #3
 8007e6a:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	2200      	movs	r2, #0
 8007e76:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	2202      	movs	r2, #2
 8007e82:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	2200      	movs	r2, #0
 8007e88:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8007e90:	2300      	movs	r3, #0
 8007e92:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	773b      	strb	r3, [r7, #28]
 8007e9c:	e0b1      	b.n	8008002 <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	791b      	ldrb	r3, [r3, #4]
 8007ea2:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	799b      	ldrb	r3, [r3, #6]
 8007ea8:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	785b      	ldrb	r3, [r3, #1]
 8007eae:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	785b      	ldrb	r3, [r3, #1]
 8007eb4:	2bff      	cmp	r3, #255	; 0xff
 8007eb6:	d103      	bne.n	8007ec0 <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	2280      	movs	r2, #128	; 0x80
 8007ebc:	705a      	strb	r2, [r3, #1]
 8007ebe:	e005      	b.n	8007ecc <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	785b      	ldrb	r3, [r3, #1]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	7859      	ldrb	r1, [r3, #1]
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	1c9a      	adds	r2, r3, #2
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	3303      	adds	r3, #3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f002 fb40 	bl	800a55e <VL53LX_update_internal_stream_counters>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	791b      	ldrb	r3, [r3, #4]
 8007ee6:	f083 0302 	eor.w	r3, r3, #2
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	2b05      	cmp	r3, #5
 8007ef6:	d053      	beq.n	8007fa0 <VL53LX_update_ll_driver_cfg_state+0x170>
 8007ef8:	2b05      	cmp	r3, #5
 8007efa:	dc69      	bgt.n	8007fd0 <VL53LX_update_ll_driver_cfg_state+0x1a0>
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	d002      	beq.n	8007f06 <VL53LX_update_ll_driver_cfg_state+0xd6>
 8007f00:	2b04      	cmp	r3, #4
 8007f02:	d02d      	beq.n	8007f60 <VL53LX_update_ll_driver_cfg_state+0x130>
 8007f04:	e064      	b.n	8007fd0 <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d909      	bls.n	8007f2e <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	795b      	ldrb	r3, [r3, #5]
 8007f24:	f083 0301 	eor.w	r3, r3, #1
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2201      	movs	r2, #1
 8007f32:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d106      	bne.n	8007f4c <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	2201      	movs	r2, #1
 8007f42:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2200      	movs	r2, #0
 8007f48:	70da      	strb	r2, [r3, #3]
 8007f4a:	e005      	b.n	8007f58 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	2201      	movs	r2, #1
 8007f56:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	2204      	movs	r2, #4
 8007f5c:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 8007f5e:	e050      	b.n	8008002 <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	799b      	ldrb	r3, [r3, #6]
 8007f64:	3301      	adds	r3, #1
 8007f66:	b2da      	uxtb	r2, r3
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d940      	bls.n	8007ffc <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	795b      	ldrb	r3, [r3, #5]
 8007f84:	f083 0301 	eor.w	r3, r3, #1
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d031      	beq.n	8007ffc <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	2205      	movs	r2, #5
 8007f9c:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 8007f9e:	e02d      	b.n	8007ffc <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	799b      	ldrb	r3, [r3, #6]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d922      	bls.n	8008000 <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	795b      	ldrb	r3, [r3, #5]
 8007fc4:	f083 0301 	eor.w	r3, r3, #1
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	715a      	strb	r2, [r3, #5]
			}
			break;
 8007fce:	e017      	b.n	8008000 <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	2203      	movs	r2, #3
 8007fd4:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	2202      	movs	r2, #2
 8007fec:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	719a      	strb	r2, [r3, #6]
			break;
 8007ffa:	e002      	b.n	8008002 <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007ffc:	bf00      	nop
 8007ffe:	e000      	b.n	8008002 <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8008000:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008008:	2b00      	cmp	r3, #0
 800800a:	d11d      	bne.n	8008048 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 800800c:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800800e:	7f3b      	ldrb	r3, [r7, #28]
 8008010:	3b01      	subs	r3, #1
 8008012:	b2d8      	uxtb	r0, r3
 8008014:	68f9      	ldr	r1, [r7, #12]
 8008016:	4613      	mov	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	005b      	lsls	r3, r3, #1
 800801e:	440b      	add	r3, r1
 8008020:	3302      	adds	r3, #2
 8008022:	4602      	mov	r2, r0
 8008024:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	7b5b      	ldrb	r3, [r3, #13]
 800802a:	4619      	mov	r1, r3
 800802c:	7f7b      	ldrb	r3, [r7, #29]
 800802e:	f083 0302 	eor.w	r3, r3, #2
 8008032:	b2d8      	uxtb	r0, r3
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	460b      	mov	r3, r1
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	440b      	add	r3, r1
 800803c:	005b      	lsls	r3, r3, #1
 800803e:	4413      	add	r3, r2
 8008040:	3303      	adds	r3, #3
 8008042:	4602      	mov	r2, r0
 8008044:	701a      	strb	r2, [r3, #0]
 8008046:	e013      	b.n	8008070 <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8008048:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 800804a:	68f9      	ldr	r1, [r7, #12]
 800804c:	4613      	mov	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	440b      	add	r3, r1
 8008056:	3302      	adds	r3, #2
 8008058:	7f3a      	ldrb	r2, [r7, #28]
 800805a:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 800805c:	7fba      	ldrb	r2, [r7, #30]
 800805e:	68f9      	ldr	r1, [r7, #12]
 8008060:	4613      	mov	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	005b      	lsls	r3, r3, #1
 8008068:	440b      	add	r3, r1
 800806a:	3303      	adds	r3, #3
 800806c:	7f7a      	ldrb	r2, [r7, #29]
 800806e:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 8008070:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3720      	adds	r7, #32
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	7c1a      	ldrb	r2, [r3, #16]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	3301      	adds	r3, #1
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	7c52      	ldrb	r2, [r2, #17]
 8008096:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	3302      	adds	r3, #2
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	7c92      	ldrb	r2, [r2, #18]
 80080a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	3303      	adds	r3, #3
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	7cd2      	ldrb	r2, [r2, #19]
 80080aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	3304      	adds	r3, #4
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	7d12      	ldrb	r2, [r2, #20]
 80080b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	3305      	adds	r3, #5
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	7d52      	ldrb	r2, [r2, #21]
 80080be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	3306      	adds	r3, #6
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	7d92      	ldrb	r2, [r2, #22]
 80080c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	3307      	adds	r3, #7
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	7dd2      	ldrb	r2, [r2, #23]
 80080d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	3308      	adds	r3, #8
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	7e12      	ldrb	r2, [r2, #24]
 80080dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	3309      	adds	r3, #9
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	7e52      	ldrb	r2, [r2, #25]
 80080e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	330a      	adds	r3, #10
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	7e92      	ldrb	r2, [r2, #26]
 80080f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	330b      	adds	r3, #11
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	7ed2      	ldrb	r2, [r2, #27]
 80080fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	330c      	adds	r3, #12
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	7f12      	ldrb	r2, [r2, #28]
 8008104:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	330d      	adds	r3, #13
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	7f52      	ldrb	r2, [r2, #29]
 800810e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	330e      	adds	r3, #14
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	7f92      	ldrb	r2, [r2, #30]
 8008118:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	330f      	adds	r3, #15
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	7fd2      	ldrb	r2, [r2, #31]
 8008122:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	3310      	adds	r3, #16
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800812e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	3311      	adds	r3, #17
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800813a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	3312      	adds	r3, #18
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8008146:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	3313      	adds	r3, #19
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8008152:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	3314      	adds	r3, #20
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800815e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	3315      	adds	r3, #21
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800816a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	3316      	adds	r3, #22
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8008176:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	3317      	adds	r3, #23
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008182:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	3318      	adds	r3, #24
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800818e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	3319      	adds	r3, #25
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800819a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	331a      	adds	r3, #26
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 80081a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	331b      	adds	r3, #27
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 80081b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	331c      	adds	r3, #28
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80081be:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	331d      	adds	r3, #29
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80081ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	331e      	adds	r3, #30
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 80081d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	331f      	adds	r3, #31
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 80081e2:	701a      	strb	r2, [r3, #0]
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	22ff      	movs	r2, #255	; 0xff
 80081fc:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	22ff      	movs	r2, #255	; 0xff
 8008202:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	22ff      	movs	r2, #255	; 0xff
 8008208:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	22ff      	movs	r2, #255	; 0xff
 800820e:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008216:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800821e:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008226:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800822e:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008236:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800823e:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008246:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800824e:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008256:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800825e:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008266:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800826e:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008276:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800827e:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008286:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800828e:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008296:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800829e:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082a6:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	22ff      	movs	r2, #255	; 0xff
 80082ac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	4603      	mov	r3, r0
 80082c4:	6039      	str	r1, [r7, #0]
 80082c6:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 80082c8:	2300      	movs	r3, #0
 80082ca:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	2205      	movs	r2, #5
 80082d0:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	79fa      	ldrb	r2, [r7, #7]
 80082d6:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 80082d8:	2300      	movs	r3, #0
 80082da:	73fb      	strb	r3, [r7, #15]
 80082dc:	e017      	b.n	800830e <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 80082de:	7bfa      	ldrb	r2, [r7, #15]
 80082e0:	4613      	mov	r3, r2
 80082e2:	011b      	lsls	r3, r3, #4
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	683a      	ldr	r2, [r7, #0]
 80082ea:	4413      	add	r3, r2
 80082ec:	3304      	adds	r3, #4
 80082ee:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2203      	movs	r2, #3
 80082f4:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2203      	movs	r2, #3
 80082fa:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	2204      	movs	r2, #4
 8008300:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2200      	movs	r2, #0
 8008306:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8008308:	7bfb      	ldrb	r3, [r7, #15]
 800830a:	3301      	adds	r3, #1
 800830c:	73fb      	strb	r3, [r7, #15]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	7bfa      	ldrb	r2, [r7, #15]
 8008314:	429a      	cmp	r2, r3
 8008316:	d3e2      	bcc.n	80082de <V53L1_init_zone_results_structure+0x22>
	}
}
 8008318:	bf00      	nop
 800831a:	bf00      	nop
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53LX_DEV              Dev)
{
 8008326:	b480      	push	{r7}
 8008328:	b087      	sub	sp, #28
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverResults_t  *pres =
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008334:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53LX_MAX_USER_ZONES;
 800833a:	2305      	movs	r3, #5
 800833c:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008344:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 8008346:	2300      	movs	r3, #0
 8008348:	75fb      	strb	r3, [r7, #23]
 800834a:	e016      	b.n	800837a <V53L1_init_zone_dss_configs+0x54>
		pdata->VL53LX_p_003[z].dss_mode =
 800834c:	7dfa      	ldrb	r2, [r7, #23]
 800834e:	68b9      	ldr	r1, [r7, #8]
 8008350:	4613      	mov	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	005b      	lsls	r3, r3, #1
 8008358:	440b      	add	r3, r1
 800835a:	3304      	adds	r3, #4
 800835c:	2201      	movs	r2, #1
 800835e:	701a      	strb	r2, [r3, #0]
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53LX_p_003[z].dss_requested_effective_spad_count = 0;
 8008360:	7dfa      	ldrb	r2, [r7, #23]
 8008362:	68b9      	ldr	r1, [r7, #8]
 8008364:	4613      	mov	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	440b      	add	r3, r1
 800836e:	3306      	adds	r3, #6
 8008370:	2200      	movs	r2, #0
 8008372:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 8008374:	7dfb      	ldrb	r3, [r7, #23]
 8008376:	3301      	adds	r3, #1
 8008378:	75fb      	strb	r3, [r7, #23]
 800837a:	7dfa      	ldrb	r2, [r7, #23]
 800837c:	7bfb      	ldrb	r3, [r7, #15]
 800837e:	429a      	cmp	r2, r3
 8008380:	d3e4      	bcc.n	800834c <V53L1_init_zone_dss_configs+0x26>
	}
}
 8008382:	bf00      	nop
 8008384:	bf00      	nop
 8008386:	371c      	adds	r7, #28
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8008390:	b490      	push	{r4, r7}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	4604      	mov	r4, r0
 8008398:	4608      	mov	r0, r1
 800839a:	4611      	mov	r1, r2
 800839c:	461a      	mov	r2, r3
 800839e:	4623      	mov	r3, r4
 80083a0:	71fb      	strb	r3, [r7, #7]
 80083a2:	4603      	mov	r3, r0
 80083a4:	71bb      	strb	r3, [r7, #6]
 80083a6:	460b      	mov	r3, r1
 80083a8:	717b      	strb	r3, [r7, #5]
 80083aa:	4613      	mov	r3, r2
 80083ac:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 80083ae:	79bb      	ldrb	r3, [r7, #6]
 80083b0:	011b      	lsls	r3, r3, #4
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	79fb      	ldrb	r3, [r7, #7]
 80083b6:	4413      	add	r3, r2
 80083b8:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 80083be:	793b      	ldrb	r3, [r7, #4]
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	797b      	ldrb	r3, [r7, #5]
 80083c6:	4413      	add	r3, r2
 80083c8:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 80083ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083cc:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 80083ce:	7d3b      	ldrb	r3, [r7, #20]
 80083d0:	011b      	lsls	r3, r3, #4
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	7c3b      	ldrb	r3, [r7, #16]
 80083d6:	4413      	add	r3, r2
 80083d8:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 80083de:	7f3b      	ldrb	r3, [r7, #28]
 80083e0:	011b      	lsls	r3, r3, #4
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	7e3b      	ldrb	r3, [r7, #24]
 80083e6:	4413      	add	r3, r2
 80083e8:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 80083ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083fa:	4413      	add	r3, r2
 80083fc:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 80083fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008400:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 8008402:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008406:	011b      	lsls	r3, r3, #4
 8008408:	b2da      	uxtb	r2, r3
 800840a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800840e:	4413      	add	r3, r2
 8008410:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8008416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008418:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800841a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841c:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008420:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 8008422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008424:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842c:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800842e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008430:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 8008432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008434:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8008436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008438:	f897 2020 	ldrb.w	r2, [r7, #32]
 800843c:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800843e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008442:	011b      	lsls	r3, r3, #4
 8008444:	b2da      	uxtb	r2, r3
 8008446:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800844a:	4413      	add	r3, r2
 800844c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8008452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008454:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008458:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800845a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845c:	2200      	movs	r2, #0
 800845e:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8008468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846a:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800846c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846e:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8008470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008472:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008476:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847a:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847e:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 8008480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008482:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800848c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848e:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8008490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008496:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800849e:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	2200      	movs	r2, #0
 80084a4:	701a      	strb	r2, [r3, #0]

}
 80084a6:	bf00      	nop
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bc90      	pop	{r4, r7}
 80084ae:	4770      	bx	lr

080084b0 <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 80084b0:	b490      	push	{r4, r7}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	4604      	mov	r4, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	4611      	mov	r1, r2
 80084bc:	461a      	mov	r2, r3
 80084be:	4623      	mov	r3, r4
 80084c0:	71fb      	strb	r3, [r7, #7]
 80084c2:	4603      	mov	r3, r0
 80084c4:	71bb      	strb	r3, [r7, #6]
 80084c6:	460b      	mov	r3, r1
 80084c8:	717b      	strb	r3, [r7, #5]
 80084ca:	4613      	mov	r3, r2
 80084cc:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 80084ce:	79bb      	ldrb	r3, [r7, #6]
 80084d0:	011b      	lsls	r3, r3, #4
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	79fb      	ldrb	r3, [r7, #7]
 80084d6:	4413      	add	r3, r2
 80084d8:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 80084da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084dc:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 80084de:	793b      	ldrb	r3, [r7, #4]
 80084e0:	011b      	lsls	r3, r3, #4
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	797b      	ldrb	r3, [r7, #5]
 80084e6:	4413      	add	r3, r2
 80084e8:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 80084ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ec:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 80084ee:	7d3b      	ldrb	r3, [r7, #20]
 80084f0:	011b      	lsls	r3, r3, #4
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	7c3b      	ldrb	r3, [r7, #16]
 80084f6:	4413      	add	r3, r2
 80084f8:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 80084fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fc:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	789a      	ldrb	r2, [r3, #2]
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	78da      	ldrb	r2, [r3, #3]
 8008512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008514:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 8008516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008518:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800851e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008520:	789a      	ldrb	r2, [r3, #2]
 8008522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008524:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	78da      	ldrb	r2, [r3, #3]
 800852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852c:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	791a      	ldrb	r2, [r3, #4]
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	f897 2020 	ldrb.w	r2, [r7, #32]
 800853c:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800853e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008542:	011b      	lsls	r3, r3, #4
 8008544:	b2da      	uxtb	r2, r3
 8008546:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800854a:	4413      	add	r3, r2
 800854c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008558:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	2200      	movs	r2, #0
 800855e:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 8008560:	7f3b      	ldrb	r3, [r7, #28]
 8008562:	011b      	lsls	r3, r3, #4
 8008564:	b2da      	uxtb	r2, r3
 8008566:	7e3b      	ldrb	r3, [r7, #24]
 8008568:	4413      	add	r3, r2
 800856a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800856c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856e:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 8008570:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008574:	011b      	lsls	r3, r3, #4
 8008576:	b2da      	uxtb	r2, r3
 8008578:	f897 3020 	ldrb.w	r3, [r7, #32]
 800857c:	4413      	add	r3, r2
 800857e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 8008584:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008588:	011b      	lsls	r3, r3, #4
 800858a:	b2da      	uxtb	r2, r3
 800858c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008590:	4413      	add	r3, r2
 8008592:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008596:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 8008598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859a:	7bda      	ldrb	r2, [r3, #15]
 800859c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859e:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 80085a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a2:	7c1a      	ldrb	r2, [r3, #16]
 80085a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a6:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 80085a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085aa:	7c5a      	ldrb	r2, [r3, #17]
 80085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ae:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 80085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085b6:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 80085b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085be:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 80085c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c2:	2200      	movs	r2, #0
 80085c4:	701a      	strb	r2, [r3, #0]
}
 80085c6:	bf00      	nop
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bc90      	pop	{r4, r7}
 80085ce:	4770      	bx	lr

080085d0 <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b087      	sub	sp, #28
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	460b      	mov	r3, r1
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	220c      	movs	r2, #12
 80085f8:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 80085fa:	897b      	ldrh	r3, [r7, #10]
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_015                = 0;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 8008630:	2300      	movs	r3, #0
 8008632:	82fb      	strh	r3, [r7, #22]
 8008634:	e015      	b.n	8008662 <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 8008636:	8afa      	ldrh	r2, [r7, #22]
 8008638:	897b      	ldrh	r3, [r7, #10]
 800863a:	429a      	cmp	r2, r3
 800863c:	d207      	bcs.n	800864e <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800863e:	8afb      	ldrh	r3, [r7, #22]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	3302      	adds	r3, #2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	605a      	str	r2, [r3, #4]
 800864c:	e006      	b.n	800865c <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800864e:	8afb      	ldrh	r3, [r7, #22]
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	3302      	adds	r3, #2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	2200      	movs	r2, #0
 800865a:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 800865c:	8afb      	ldrh	r3, [r7, #22]
 800865e:	3301      	adds	r3, #1
 8008660:	82fb      	strh	r3, [r7, #22]
 8008662:	8afb      	ldrh	r3, [r7, #22]
 8008664:	2b0b      	cmp	r3, #11
 8008666:	d9e6      	bls.n	8008636 <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 8008668:	bf00      	nop
 800866a:	bf00      	nop
 800866c:	371c      	adds	r7, #28
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008676:	b480      	push	{r7}
 8008678:	b085      	sub	sp, #20
 800867a:	af00      	add	r7, sp, #0
 800867c:	4603      	mov	r3, r0
 800867e:	603a      	str	r2, [r7, #0]
 8008680:	80fb      	strh	r3, [r7, #6]
 8008682:	460b      	mov	r3, r1
 8008684:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8008686:	2300      	movs	r3, #0
 8008688:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 800868e:	88fb      	ldrh	r3, [r7, #6]
 8008690:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8008692:	2300      	movs	r3, #0
 8008694:	81fb      	strh	r3, [r7, #14]
 8008696:	e00e      	b.n	80086b6 <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008698:	88ba      	ldrh	r2, [r7, #4]
 800869a:	89fb      	ldrh	r3, [r7, #14]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	3b01      	subs	r3, #1
 80086a0:	683a      	ldr	r2, [r7, #0]
 80086a2:	4413      	add	r3, r2
 80086a4:	89ba      	ldrh	r2, [r7, #12]
 80086a6:	b2d2      	uxtb	r2, r2
 80086a8:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80086aa:	89bb      	ldrh	r3, [r7, #12]
 80086ac:	0a1b      	lsrs	r3, r3, #8
 80086ae:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 80086b0:	89fb      	ldrh	r3, [r7, #14]
 80086b2:	3301      	adds	r3, #1
 80086b4:	81fb      	strh	r3, [r7, #14]
 80086b6:	89fa      	ldrh	r2, [r7, #14]
 80086b8:	88bb      	ldrh	r3, [r7, #4]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d3ec      	bcc.n	8008698 <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 80086be:	bf00      	nop
 80086c0:	bf00      	nop
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	4603      	mov	r3, r0
 80086d4:	6039      	str	r1, [r7, #0]
 80086d6:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 80086d8:	2300      	movs	r3, #0
 80086da:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 80086dc:	e00a      	b.n	80086f4 <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 80086de:	89fb      	ldrh	r3, [r7, #14]
 80086e0:	021b      	lsls	r3, r3, #8
 80086e2:	b21a      	sxth	r2, r3
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	1c59      	adds	r1, r3, #1
 80086e8:	6039      	str	r1, [r7, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	b21b      	sxth	r3, r3
 80086ee:	4313      	orrs	r3, r2
 80086f0:	b21b      	sxth	r3, r3
 80086f2:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 80086f4:	88fb      	ldrh	r3, [r7, #6]
 80086f6:	1e5a      	subs	r2, r3, #1
 80086f8:	80fa      	strh	r2, [r7, #6]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1ef      	bne.n	80086de <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 80086fe:	89fb      	ldrh	r3, [r7, #14]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3714      	adds	r7, #20
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	4603      	mov	r3, r0
 8008714:	603a      	str	r2, [r7, #0]
 8008716:	80fb      	strh	r3, [r7, #6]
 8008718:	460b      	mov	r3, r1
 800871a:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800871c:	2300      	movs	r3, #0
 800871e:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 8008724:	88fb      	ldrh	r3, [r7, #6]
 8008726:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8008728:	2300      	movs	r3, #0
 800872a:	81fb      	strh	r3, [r7, #14]
 800872c:	e00f      	b.n	800874e <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 800872e:	88ba      	ldrh	r2, [r7, #4]
 8008730:	89fb      	ldrh	r3, [r7, #14]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	3b01      	subs	r3, #1
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	4413      	add	r3, r2
 800873a:	89ba      	ldrh	r2, [r7, #12]
 800873c:	b2d2      	uxtb	r2, r2
 800873e:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008740:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008744:	121b      	asrs	r3, r3, #8
 8008746:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8008748:	89fb      	ldrh	r3, [r7, #14]
 800874a:	3301      	adds	r3, #1
 800874c:	81fb      	strh	r3, [r7, #14]
 800874e:	89fa      	ldrh	r2, [r7, #14]
 8008750:	88bb      	ldrh	r3, [r7, #4]
 8008752:	429a      	cmp	r2, r3
 8008754:	d3eb      	bcc.n	800872e <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 8008756:	bf00      	nop
 8008758:	bf00      	nop
 800875a:	3714      	adds	r7, #20
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	4603      	mov	r3, r0
 800876c:	6039      	str	r1, [r7, #0]
 800876e:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 8008770:	2300      	movs	r3, #0
 8008772:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	b25b      	sxtb	r3, r3
 800877a:	2b00      	cmp	r3, #0
 800877c:	da0e      	bge.n	800879c <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800877e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008782:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8008784:	e00a      	b.n	800879c <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 8008786:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800878a:	021b      	lsls	r3, r3, #8
 800878c:	b21a      	sxth	r2, r3
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	1c59      	adds	r1, r3, #1
 8008792:	6039      	str	r1, [r7, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	b21b      	sxth	r3, r3
 8008798:	4313      	orrs	r3, r2
 800879a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800879c:	88fb      	ldrh	r3, [r7, #6]
 800879e:	1e5a      	subs	r2, r3, #1
 80087a0:	80fa      	strh	r2, [r7, #6]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1ef      	bne.n	8008786 <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 80087a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b087      	sub	sp, #28
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	60f8      	str	r0, [r7, #12]
 80087be:	460b      	mov	r3, r1
 80087c0:	607a      	str	r2, [r7, #4]
 80087c2:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 80087d0:	2300      	movs	r3, #0
 80087d2:	82fb      	strh	r3, [r7, #22]
 80087d4:	e00e      	b.n	80087f4 <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80087d6:	897a      	ldrh	r2, [r7, #10]
 80087d8:	8afb      	ldrh	r3, [r7, #22]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	3b01      	subs	r3, #1
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	4413      	add	r3, r2
 80087e2:	693a      	ldr	r2, [r7, #16]
 80087e4:	b2d2      	uxtb	r2, r2
 80087e6:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	0a1b      	lsrs	r3, r3, #8
 80087ec:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 80087ee:	8afb      	ldrh	r3, [r7, #22]
 80087f0:	3301      	adds	r3, #1
 80087f2:	82fb      	strh	r3, [r7, #22]
 80087f4:	8afa      	ldrh	r2, [r7, #22]
 80087f6:	897b      	ldrh	r3, [r7, #10]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d3ec      	bcc.n	80087d6 <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 80087fc:	bf00      	nop
 80087fe:	bf00      	nop
 8008800:	371c      	adds	r7, #28
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr

0800880a <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800880a:	b480      	push	{r7}
 800880c:	b085      	sub	sp, #20
 800880e:	af00      	add	r7, sp, #0
 8008810:	4603      	mov	r3, r0
 8008812:	6039      	str	r1, [r7, #0]
 8008814:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800881a:	e007      	b.n	800882c <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	021a      	lsls	r2, r3, #8
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	1c59      	adds	r1, r3, #1
 8008824:	6039      	str	r1, [r7, #0]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	4313      	orrs	r3, r2
 800882a:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800882c:	88fb      	ldrh	r3, [r7, #6]
 800882e:	1e5a      	subs	r2, r3, #1
 8008830:	80fa      	strh	r2, [r7, #6]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1f2      	bne.n	800881c <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 8008836:	68fb      	ldr	r3, [r7, #12]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	4603      	mov	r3, r0
 800884c:	6039      	str	r1, [r7, #0]
 800884e:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	b25b      	sxtb	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	da0b      	bge.n	8008876 <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800885e:	f04f 33ff 	mov.w	r3, #4294967295
 8008862:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 8008864:	e007      	b.n	8008876 <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	021a      	lsls	r2, r3, #8
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	1c59      	adds	r1, r3, #1
 800886e:	6039      	str	r1, [r7, #0]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	4313      	orrs	r3, r2
 8008874:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 8008876:	88fb      	ldrh	r3, [r7, #6]
 8008878:	1e5a      	subs	r2, r3, #1
 800887a:	80fa      	strh	r2, [r7, #6]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1f2      	bne.n	8008866 <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 8008880:	68fb      	ldr	r3, [r7, #12]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <VL53LX_start_test>:


VL53LX_Error VL53LX_start_test(
	VL53LX_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	460b      	mov	r3, r1
 8008898:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800889a:	2300      	movs	r3, #0
 800889c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE) {
 800889e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d107      	bne.n	80088b6 <VL53LX_start_test+0x28>
		status = VL53LX_WrByte(
 80088a6:	78fb      	ldrb	r3, [r7, #3]
 80088a8:	461a      	mov	r2, r3
 80088aa:	2127      	movs	r1, #39	; 0x27
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f008 fc6d 	bl	801118c <VL53LX_WrByte>
 80088b2:	4603      	mov	r3, r0
 80088b4:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 80088b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	460b      	mov	r3, r1
 80088cc:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 80088ce:	2300      	movs	r3, #0
 80088d0:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	3318      	adds	r3, #24
 80088d6:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	78fa      	ldrb	r2, [r7, #3]
 80088dc:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362

	status = VL53LX_WrByte(
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f893 3362 	ldrb.w	r3, [r3, #866]	; 0x362
 80088e6:	461a      	mov	r2, r3
 80088e8:	2185      	movs	r1, #133	; 0x85
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f008 fc4e 	bl	801118c <VL53LX_WrByte>
 80088f0:	4603      	mov	r3, r0
 80088f2:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 80088f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008908:	2300      	movs	r3, #0
 800890a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 800890c:	2101      	movs	r1, #1
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7ff ffd7 	bl	80088c2 <VL53LX_set_firmware_enable_register>
 8008914:	4603      	mov	r3, r0
 8008916:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008918:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800892c:	2300      	movs	r3, #0
 800892e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 8008930:	2100      	movs	r1, #0
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7ff ffc5 	bl	80088c2 <VL53LX_set_firmware_enable_register>
 8008938:	4603      	mov	r3, r0
 800893a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800893c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008954:	2300      	movs	r3, #0
 8008956:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3318      	adds	r3, #24
 800895c:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	78fa      	ldrb	r2, [r7, #3]
 8008962:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360

	status = VL53LX_WrByte(
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	f893 3360 	ldrb.w	r3, [r3, #864]	; 0x360
 800896c:	461a      	mov	r2, r3
 800896e:	2183      	movs	r1, #131	; 0x83
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f008 fc0b 	bl	801118c <VL53LX_WrByte>
 8008976:	4603      	mov	r3, r0
 8008978:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800897a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800898e:	2300      	movs	r3, #0
 8008990:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 8008992:	2101      	movs	r1, #1
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff ffd7 	bl	8008948 <VL53LX_set_powerforce_register>
 800899a:	4603      	mov	r3, r0
 800899c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800899e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 80089b6:	2100      	movs	r1, #0
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7ff ffc5 	bl	8008948 <VL53LX_set_powerforce_register>
 80089be:	4603      	mov	r3, r0
 80089c0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80089c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <VL53LX_clear_interrupt>:


VL53LX_Error VL53LX_clear_interrupt(
	VL53LX_DEV    Dev)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b084      	sub	sp, #16
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80089d6:	2300      	movs	r3, #0
 80089d8:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	3318      	adds	r3, #24
 80089de:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53LX_CLEAR_RANGE_INT;
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363

	status = VL53LX_WrByte(
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 80089ee:	461a      	mov	r2, r3
 80089f0:	2186      	movs	r1, #134	; 0x86
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f008 fbca 	bl	801118c <VL53LX_WrByte>
 80089f8:	4603      	mov	r3, r0
 80089fa:	73fb      	strb	r3, [r7, #15]
				VL53LX_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 80089fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	4603      	mov	r3, r0
 8008a10:	460a      	mov	r2, r1
 8008a12:	80fb      	strh	r3, [r7, #6]
 8008a14:	4613      	mov	r3, r2
 8008a16:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 8008a20:	2300      	movs	r3, #0
 8008a22:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 8008a24:	88fb      	ldrh	r3, [r7, #6]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f002 fe9b 	bl	800b762 <VL53LX_calc_pll_period_us>
 8008a2c:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 8008a2e:	797b      	ldrb	r3, [r7, #5]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f003 fa69 	bl	800bf08 <VL53LX_decode_vcsel_period>
 8008a36:	4603      	mov	r3, r0
 8008a38:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	00db      	lsls	r3, r3, #3
 8008a40:	4413      	add	r3, r2
 8008a42:	021b      	lsls	r3, r3, #8
 8008a44:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	099b      	lsrs	r3, r3, #6
 8008a4a:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 8008a4c:	7cfa      	ldrb	r2, [r7, #19]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	fb02 f303 	mul.w	r3, r2, r3
 8008a54:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	099b      	lsrs	r3, r3, #6
 8008a5a:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
	...

08008a68 <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b089      	sub	sp, #36	; 0x24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	4608      	mov	r0, r1
 8008a72:	4611      	mov	r1, r2
 8008a74:	461a      	mov	r2, r3
 8008a76:	4603      	mov	r3, r0
 8008a78:	817b      	strh	r3, [r7, #10]
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	813b      	strh	r3, [r7, #8]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8008a86:	2300      	movs	r3, #0
 8008a88:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8008a92:	2300      	movs	r3, #0
 8008a94:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	011b      	lsls	r3, r3, #4
 8008a9a:	4a23      	ldr	r2, [pc, #140]	; (8008b28 <VL53LX_calc_range_ignore_threshold+0xc0>)
 8008a9c:	fb82 1203 	smull	r1, r2, r2, r3
 8008aa0:	1192      	asrs	r2, r2, #6
 8008aa2:	17db      	asrs	r3, r3, #31
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 8008aa8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	da03      	bge.n	8008ab8 <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8008ab0:	897b      	ldrh	r3, [r7, #10]
 8008ab2:	425b      	negs	r3, r3
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 8008ab8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	da03      	bge.n	8008ac8 <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8008ac0:	893b      	ldrh	r3, [r7, #8]
 8008ac2:	425b      	negs	r3, r3
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 8008ac8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008acc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	015b      	lsls	r3, r3, #5
 8008ad4:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	4a13      	ldr	r2, [pc, #76]	; (8008b28 <VL53LX_calc_range_ignore_threshold+0xc0>)
 8008ada:	fb82 1203 	smull	r1, r2, r2, r3
 8008ade:	1192      	asrs	r2, r2, #6
 8008ae0:	17db      	asrs	r3, r3, #31
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	4413      	add	r3, r2
 8008aec:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8008aee:	79fa      	ldrb	r2, [r7, #7]
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	fb02 f303 	mul.w	r3, r2, r3
 8008af6:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	3310      	adds	r3, #16
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	da00      	bge.n	8008b02 <VL53LX_calc_range_ignore_threshold+0x9a>
 8008b00:	331f      	adds	r3, #31
 8008b02:	115b      	asrs	r3, r3, #5
 8008b04:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b0c:	db03      	blt.n	8008b16 <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8008b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b12:	83fb      	strh	r3, [r7, #30]
 8008b14:	e001      	b.n	8008b1a <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8008b1a:	8bfb      	ldrh	r3, [r7, #30]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3724      	adds	r7, #36	; 0x24
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	10624dd3 	.word	0x10624dd3

08008b2c <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d102      	bne.n	8008b46 <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 8008b40:	2300      	movs	r3, #0
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	e008      	b.n	8008b58 <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	031a      	lsls	r2, r3, #12
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	085b      	lsrs	r3, r3, #1
 8008b4e:	441a      	add	r2, r3
		timeout_mclks   =
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b56:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8008b58:	68fb      	ldr	r3, [r7, #12]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7ff ffd6 	bl	8008b2c <VL53LX_calc_timeout_mclks>
 8008b80:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 f885 	bl	8008c92 <VL53LX_encode_timeout>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8008b8c:	897b      	ldrh	r3, [r7, #10]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8008b96:	b4f0      	push	{r4, r5, r6, r7}
 8008b98:	b086      	sub	sp, #24
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 8008ba4:	f04f 0200 	mov.w	r2, #0
 8008ba8:	f04f 0300 	mov.w	r3, #0
 8008bac:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f04f 0100 	mov.w	r1, #0
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	f04f 0300 	mov.w	r3, #0
 8008bc0:	fb02 fc01 	mul.w	ip, r2, r1
 8008bc4:	fb00 f603 	mul.w	r6, r0, r3
 8008bc8:	4466      	add	r6, ip
 8008bca:	fba0 2302 	umull	r2, r3, r0, r2
 8008bce:	18f1      	adds	r1, r6, r3
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008bd6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8008bda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bde:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 8008be2:	f143 0500 	adc.w	r5, r3, #0
 8008be6:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 8008bea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008bee:	f04f 0200 	mov.w	r2, #0
 8008bf2:	f04f 0300 	mov.w	r3, #0
 8008bf6:	0b02      	lsrs	r2, r0, #12
 8008bf8:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8008bfc:	0b0b      	lsrs	r3, r1, #12
 8008bfe:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 8008c06:	697b      	ldr	r3, [r7, #20]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3718      	adds	r7, #24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bcf0      	pop	{r4, r5, r6, r7}
 8008c10:	4770      	bx	lr
	...

08008c14 <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 8008c20:	2300      	movs	r3, #0
 8008c22:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 8008c24:	2300      	movs	r3, #0
 8008c26:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 8008c28:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 8008c2c:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 8008c2e:	4413      	add	r3, r2
 8008c30:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	da02      	bge.n	8008c3e <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	e005      	b.n	8008c4a <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c44:	db01      	blt.n	8008c4a <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 8008c46:	4b05      	ldr	r3, [pc, #20]	; (8008c5c <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 8008c48:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 8008c4e:	68bb      	ldr	r3, [r7, #8]

}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	0003ffff 	.word	0x0003ffff

08008c60 <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	4603      	mov	r3, r0
 8008c68:	6039      	str	r1, [r7, #0]
 8008c6a:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8008c70:	2300      	movs	r3, #0
 8008c72:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 8008c74:	88fb      	ldrh	r3, [r7, #6]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 f837 	bl	8008cea <VL53LX_decode_timeout>
 8008c7c:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f7ff ff88 	bl	8008b96 <VL53LX_calc_timeout_us>
 8008c86:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8008c88:	68bb      	ldr	r3, [r7, #8]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b087      	sub	sp, #28
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d017      	beq.n	8008cdc <VL53LX_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008cb2:	e005      	b.n	8008cc0 <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	085b      	lsrs	r3, r3, #1
 8008cb8:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008cba:	89fb      	ldrh	r3, [r7, #14]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1f4      	bne.n	8008cb4 <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008cca:	89fb      	ldrh	r3, [r7, #14]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008cd8:	4413      	add	r3, r2
 8008cda:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008cdc:	8afb      	ldrh	r3, [r7, #22]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	371c      	adds	r7, #28
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b085      	sub	sp, #20
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008cf8:	88fb      	ldrh	r3, [r7, #6]
 8008cfa:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008cfc:	88fa      	ldrh	r2, [r7, #6]
 8008cfe:	0a12      	lsrs	r2, r2, #8
 8008d00:	b292      	uxth	r2, r2
 8008d02:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008d04:	3301      	adds	r3, #1
 8008d06:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008d08:	68fb      	ldr	r3, [r7, #12]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b088      	sub	sp, #32
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	60f8      	str	r0, [r7, #12]
 8008d1e:	60b9      	str	r1, [r7, #8]
 8008d20:	607a      	str	r2, [r7, #4]
 8008d22:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008d24:	2300      	movs	r3, #0
 8008d26:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8008d30:	2300      	movs	r3, #0
 8008d32:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8008d34:	887b      	ldrh	r3, [r7, #2]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d102      	bne.n	8008d40 <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8008d3a:	23f1      	movs	r3, #241	; 0xf1
 8008d3c:	77fb      	strb	r3, [r7, #31]
 8008d3e:	e05d      	b.n	8008dfc <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 8008d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d42:	799a      	ldrb	r2, [r3, #6]
 8008d44:	887b      	ldrh	r3, [r7, #2]
 8008d46:	4611      	mov	r1, r2
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7ff fe5d 	bl	8008a08 <VL53LX_calc_macro_period_us>
 8008d4e:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 8008d50:	6979      	ldr	r1, [r7, #20]
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f7ff feea 	bl	8008b2c <VL53LX_calc_timeout_mclks>
 8008d58:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	2bff      	cmp	r3, #255	; 0xff
 8008d5e:	d901      	bls.n	8008d64 <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8008d60:	23ff      	movs	r3, #255	; 0xff
 8008d62:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8008d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6a:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8008d6c:	6979      	ldr	r1, [r7, #20]
 8008d6e:	68b8      	ldr	r0, [r7, #8]
 8008d70:	f7ff fef9 	bl	8008b66 <VL53LX_calc_encoded_timeout>
 8008d74:	4603      	mov	r3, r0
 8008d76:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008d78:	8a7b      	ldrh	r3, [r7, #18]
 8008d7a:	0a1b      	lsrs	r3, r3, #8
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8008d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d82:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008d84:	8a7b      	ldrh	r3, [r7, #18]
 8008d86:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8008d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8a:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8008d8c:	6979      	ldr	r1, [r7, #20]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7ff fee9 	bl	8008b66 <VL53LX_calc_encoded_timeout>
 8008d94:	4603      	mov	r3, r0
 8008d96:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008d98:	8a7b      	ldrh	r3, [r7, #18]
 8008d9a:	0a1b      	lsrs	r3, r3, #8
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8008da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008da4:	8a7b      	ldrh	r3, [r7, #18]
 8008da6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8008da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008daa:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 8008dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dae:	7a5a      	ldrb	r2, [r3, #9]
 8008db0:	887b      	ldrh	r3, [r7, #2]
 8008db2:	4611      	mov	r1, r2
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7ff fe27 	bl	8008a08 <VL53LX_calc_macro_period_us>
 8008dba:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 8008dbc:	6979      	ldr	r1, [r7, #20]
 8008dbe:	68b8      	ldr	r0, [r7, #8]
 8008dc0:	f7ff fed1 	bl	8008b66 <VL53LX_calc_encoded_timeout>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008dc8:	8a7b      	ldrh	r3, [r7, #18]
 8008dca:	0a1b      	lsrs	r3, r3, #8
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8008dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd2:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008dd4:	8a7b      	ldrh	r3, [r7, #18]
 8008dd6:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8008dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dda:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 8008ddc:	6979      	ldr	r1, [r7, #20]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7ff fec1 	bl	8008b66 <VL53LX_calc_encoded_timeout>
 8008de4:	4603      	mov	r3, r0
 8008de6:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008de8:	8a7b      	ldrh	r3, [r7, #18]
 8008dea:	0a1b      	lsrs	r3, r3, #8
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8008df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008df4:	8a7b      	ldrh	r3, [r7, #18]
 8008df6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8008df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfa:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8008dfc:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3720      	adds	r7, #32
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 8008e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0c:	b08b      	sub	sp, #44	; 0x2c
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008e14:	2100      	movs	r1, #0
 8008e16:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27

	int64_t  evts              = 0;
 8008e1a:	f04f 0000 	mov.w	r0, #0
 8008e1e:	f04f 0100 	mov.w	r1, #0
 8008e22:	e9c7 0106 	strd	r0, r1, [r7, #24]
	int64_t  tmpi              = 0;
 8008e26:	f04f 0000 	mov.w	r0, #0
 8008e2a:	f04f 0100 	mov.w	r1, #0
 8008e2e:	e9c7 0104 	strd	r0, r1, [r7, #16]
	int64_t  tmpo              = 0;
 8008e32:	f04f 0000 	mov.w	r0, #0
 8008e36:	f04f 0100 	mov.w	r1, #0
 8008e3a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 8008e3e:	6879      	ldr	r1, [r7, #4]
 8008e40:	8849      	ldrh	r1, [r1, #2]
 8008e42:	2900      	cmp	r1, #0
 8008e44:	d103      	bne.n	8008e4e <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8008e46:	23f1      	movs	r3, #241	; 0xf1
 8008e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e4c:	e0a5      	b.n	8008f9a <VL53LX_hist_copy_and_scale_ambient_info+0x192>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 8008e4e:	6879      	ldr	r1, [r7, #4]
 8008e50:	7849      	ldrb	r1, [r1, #1]
 8008e52:	2900      	cmp	r1, #0
 8008e54:	f000 80a1 	beq.w	8008f9a <VL53LX_hist_copy_and_scale_ambient_info+0x192>
			podata->number_of_ambient_bins == 0) {
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	7ac9      	ldrb	r1, [r1, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 8008e5c:	2900      	cmp	r1, #0
 8008e5e:	f040 809c 	bne.w	8008f9a <VL53LX_hist_copy_and_scale_ambient_info+0x192>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	f8d1 1088 	ldr.w	r1, [r1, #136]	; 0x88
 8008e68:	4608      	mov	r0, r1
 8008e6a:	f04f 0100 	mov.w	r1, #0
 8008e6e:	f110 0a01 	adds.w	sl, r0, #1
 8008e72:	f141 0b00 	adc.w	fp, r1, #0
 8008e76:	e9c7 ab02 	strd	sl, fp, [r7, #8]
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
 8008e80:	b288      	uxth	r0, r1
 8008e82:	f04f 0100 	mov.w	r1, #0
			tmpo   *=
 8008e86:	68fe      	ldr	r6, [r7, #12]
 8008e88:	fb00 fc06 	mul.w	ip, r0, r6
 8008e8c:	68be      	ldr	r6, [r7, #8]
 8008e8e:	fb01 f606 	mul.w	r6, r1, r6
 8008e92:	44b4      	add	ip, r6
 8008e94:	68be      	ldr	r6, [r7, #8]
 8008e96:	fba6 0100 	umull	r0, r1, r6, r0
 8008e9a:	eb0c 0601 	add.w	r6, ip, r1
 8008e9e:	4631      	mov	r1, r6
 8008ea0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8008ea4:	e9c7 0102 	strd	r0, r1, [r7, #8]

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8008ea8:	6879      	ldr	r1, [r7, #4]
 8008eaa:	6889      	ldr	r1, [r1, #8]
 8008eac:	4608      	mov	r0, r1
 8008eae:	f04f 0100 	mov.w	r1, #0
 8008eb2:	1c44      	adds	r4, r0, #1
 8008eb4:	f141 0500 	adc.w	r5, r1, #0
 8008eb8:	e9c7 4504 	strd	r4, r5, [r7, #16]
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 8008ebc:	6879      	ldr	r1, [r7, #4]
 8008ebe:	8849      	ldrh	r1, [r1, #2]
 8008ec0:	b288      	uxth	r0, r1
 8008ec2:	f04f 0100 	mov.w	r1, #0
			tmpi   *=
 8008ec6:	697c      	ldr	r4, [r7, #20]
 8008ec8:	fb00 f504 	mul.w	r5, r0, r4
 8008ecc:	693c      	ldr	r4, [r7, #16]
 8008ece:	fb01 f404 	mul.w	r4, r1, r4
 8008ed2:	442c      	add	r4, r5
 8008ed4:	693d      	ldr	r5, [r7, #16]
 8008ed6:	fba5 0100 	umull	r0, r1, r5, r0
 8008eda:	440c      	add	r4, r1
 8008edc:	4621      	mov	r1, r4
 8008ede:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8008ee2:	e9c7 0104 	strd	r0, r1, [r7, #16]

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	68c9      	ldr	r1, [r1, #12]
 8008eea:	4608      	mov	r0, r1
 8008eec:	ea4f 71e0 	mov.w	r1, r0, asr #31
			evts  = tmpo *
 8008ef0:	68fc      	ldr	r4, [r7, #12]
 8008ef2:	fb00 f504 	mul.w	r5, r0, r4
 8008ef6:	68bc      	ldr	r4, [r7, #8]
 8008ef8:	fb01 f404 	mul.w	r4, r1, r4
 8008efc:	442c      	add	r4, r5
 8008efe:	68bd      	ldr	r5, [r7, #8]
 8008f00:	fba5 0100 	umull	r0, r1, r5, r0
 8008f04:	440c      	add	r4, r1
 8008f06:	4621      	mov	r1, r4
 8008f08:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8008f0c:	e9c7 0106 	strd	r0, r1, [r7, #24]
			evts += (tmpi/2);
 8008f10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008f14:	0fcc      	lsrs	r4, r1, #31
 8008f16:	f04f 0500 	mov.w	r5, #0
 8008f1a:	1822      	adds	r2, r4, r0
 8008f1c:	eb45 0301 	adc.w	r3, r5, r1
 8008f20:	f04f 0000 	mov.w	r0, #0
 8008f24:	f04f 0100 	mov.w	r1, #0
 8008f28:	0850      	lsrs	r0, r2, #1
 8008f2a:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8008f2e:	1059      	asrs	r1, r3, #1
 8008f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f34:	eb12 0800 	adds.w	r8, r2, r0
 8008f38:	eb43 0901 	adc.w	r9, r3, r1
 8008f3c:	e9c7 8906 	strd	r8, r9, [r7, #24]


			if (tmpi != 0)
 8008f40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	d009      	beq.n	8008f5c <VL53LX_hist_copy_and_scale_ambient_info+0x154>
				evts = do_division_s(evts, tmpi);
 8008f48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f4c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008f50:	f7f7 f996 	bl	8000280 <__aeabi_ldivmod>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	e9c7 2306 	strd	r2, r3, [r7, #24]

			podata->ambient_events_sum = (int32_t)evts;
 8008f5c:	69ba      	ldr	r2, [r7, #24]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53LX_p_028 =
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 +=
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	7852      	ldrb	r2, [r2, #1]
 8008f7a:	0852      	lsrs	r2, r2, #1
 8008f7c:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 8008f7e:	441a      	add	r2, r3
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 /=
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 8008f90:	fb93 f2f2 	sdiv	r2, r3, r2
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 8008f9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	372c      	adds	r7, #44	; 0x2c
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fa8 <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b087      	sub	sp, #28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	3318      	adds	r3, #24
 8008fb6:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	; 0x2fa
	amb_thresh_low  = 1024 *
 8008fca:	029b      	lsls	r3, r3, #10
 8008fcc:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
	amb_thresh_high = 1024 *
 8008fd4:	029b      	lsls	r3, r3, #10
 8008fd6:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f040 8095 	bne.w	8009112 <VL53LX_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
		pdata->bin_seq[5] =
 8008fee:	091b      	lsrs	r3, r3, #4
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
 8008ffc:	f003 030f 	and.w	r3, r3, #15
 8009000:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
		pdata->bin_seq[3] =
 800900c:	091b      	lsrs	r3, r3, #4
 800900e:	b2da      	uxtb	r2, r3
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
 800901a:	f003 030f 	and.w	r3, r3, #15
 800901e:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
		pdata->bin_seq[1] =
 800902a:	091b      	lsrs	r3, r3, #4
 800902c:	b2da      	uxtb	r2, r3
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
 8009038:	f003 030f 	and.w	r3, r3, #15
 800903c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	429a      	cmp	r2, r3
 800904c:	da2c      	bge.n	80090a8 <VL53LX_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			pdata->bin_seq[5] =
 8009054:	091b      	lsrs	r3, r3, #4
 8009056:	b2da      	uxtb	r2, r3
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			& 0x0F;
 8009062:	f003 030f 	and.w	r3, r3, #15
 8009066:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			pdata->bin_seq[3] =
 8009072:	091b      	lsrs	r3, r3, #4
 8009074:	b2da      	uxtb	r2, r3
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			& 0x0F;
 8009080:	f003 030f 	and.w	r3, r3, #15
 8009084:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			pdata->bin_seq[1] =
 8009090:	091b      	lsrs	r3, r3, #4
 8009092:	b2da      	uxtb	r2, r3
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			& 0x0F;
 800909e:	f003 030f 	and.w	r3, r3, #15
 80090a2:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	f340 80c2 	ble.w	800923a <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			pdata->bin_seq[5] =
 80090bc:	091b      	lsrs	r3, r3, #4
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			& 0x0F;
 80090ca:	f003 030f 	and.w	r3, r3, #15
 80090ce:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			pdata->bin_seq[3] =
 80090da:	091b      	lsrs	r3, r3, #4
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			& 0x0F;
 80090e8:	f003 030f 	and.w	r3, r3, #15
 80090ec:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			pdata->bin_seq[1] =
 80090f8:	091b      	lsrs	r3, r3, #4
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			& 0x0F;
 8009106:	f003 030f 	and.w	r3, r3, #15
 800910a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	731a      	strb	r2, [r3, #12]
 8009110:	e093      	b.n	800923a <VL53LX_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	f893 32f1 	ldrb.w	r3, [r3, #753]	; 0x2f1
			& 0x0F;
 8009118:	f003 030f 	and.w	r3, r3, #15
 800911c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
			& 0x0F;
 8009128:	f003 030f 	and.w	r3, r3, #15
 800912c:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
		pdata->bin_seq[3] =
 8009138:	091b      	lsrs	r3, r3, #4
 800913a:	b2da      	uxtb	r2, r3
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	f893 32ef 	ldrb.w	r3, [r3, #751]	; 0x2ef
 8009146:	f003 030f 	and.w	r3, r3, #15
 800914a:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
		pdata->bin_seq[1] =
 8009156:	091b      	lsrs	r3, r3, #4
 8009158:	b2da      	uxtb	r2, r3
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
			& 0x0F;
 8009164:	f003 030f 	and.w	r3, r3, #15
 8009168:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	429a      	cmp	r2, r3
 8009178:	da2c      	bge.n	80091d4 <VL53LX_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			pdata->bin_seq[5] =
 8009180:	091b      	lsrs	r3, r3, #4
 8009182:	b2da      	uxtb	r2, r3
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			& 0x0F;
 800918e:	f003 030f 	and.w	r3, r3, #15
 8009192:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			pdata->bin_seq[3] =
 800919e:	091b      	lsrs	r3, r3, #4
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			& 0x0F;
 80091ac:	f003 030f 	and.w	r3, r3, #15
 80091b0:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			pdata->bin_seq[1] =
 80091bc:	091b      	lsrs	r3, r3, #4
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			& 0x0F;
 80091ca:	f003 030f 	and.w	r3, r3, #15
 80091ce:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	429a      	cmp	r2, r3
 80091de:	dd2c      	ble.n	800923a <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			pdata->bin_seq[5] =
 80091e6:	091b      	lsrs	r3, r3, #4
 80091e8:	b2da      	uxtb	r2, r3
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			& 0x0F;
 80091f4:	f003 030f 	and.w	r3, r3, #15
 80091f8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			pdata->bin_seq[3] =
 8009204:	091b      	lsrs	r3, r3, #4
 8009206:	b2da      	uxtb	r2, r3
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			& 0x0F;
 8009212:	f003 030f 	and.w	r3, r3, #15
 8009216:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			pdata->bin_seq[1] =
 8009222:	091b      	lsrs	r3, r3, #4
 8009224:	b2da      	uxtb	r2, r3
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			& 0x0F;
 8009230:	f003 030f 	and.w	r3, r3, #15
 8009234:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800923a:	2300      	movs	r3, #0
 800923c:	75fb      	strb	r3, [r7, #23]
 800923e:	e007      	b.n	8009250 <VL53LX_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 8009240:	7dfb      	ldrb	r3, [r7, #23]
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	4413      	add	r3, r2
 8009246:	2201      	movs	r2, #1
 8009248:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	3301      	adds	r3, #1
 800924e:	75fb      	strb	r3, [r7, #23]
 8009250:	7dfb      	ldrb	r3, [r7, #23]
 8009252:	2b05      	cmp	r3, #5
 8009254:	d9f4      	bls.n	8009240 <VL53LX_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 8009256:	bf00      	nop
 8009258:	bf00      	nop
 800925a:	371c      	adds	r7, #28
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 8009264:	b590      	push	{r4, r7, lr}
 8009266:	b093      	sub	sp, #76	; 0x4c
 8009268:	af04      	add	r7, sp, #16
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
 8009270:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009272:	2300      	movs	r3, #0
 8009274:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_LLDriverData_t *pdev =
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	3318      	adds	r3, #24
 800927c:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800927e:	2300      	movs	r3, #0
 8009280:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 8009284:	2300      	movs	r3, #0
 8009286:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800928a:	2300      	movs	r3, #0
 800928c:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800928e:	2300      	movs	r3, #0
 8009290:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 8009292:	2300      	movs	r3, #0
 8009294:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 800929a:	2300      	movs	r3, #0
 800929c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800929e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80092a4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 80092a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092aa:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 80092ae:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 80092b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b2:	f8b3 323a 	ldrh.w	r3, [r3, #570]	; 0x23a
 80092b6:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 80092b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ba:	f893 3236 	ldrb.w	r3, [r3, #566]	; 0x236
 80092be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 80092c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092c6:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 80092c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80092ca:	021b      	lsls	r3, r3, #8
 80092cc:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	785b      	ldrb	r3, [r3, #1]
 80092d2:	2b07      	cmp	r3, #7
 80092d4:	d006      	beq.n	80092e4 <VL53LX_hist_phase_consistency_check+0x80>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 80092da:	2b08      	cmp	r3, #8
 80092dc:	d002      	beq.n	80092e4 <VL53LX_hist_phase_consistency_check+0x80>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 80092de:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80092e2:	e0ec      	b.n	80094be <VL53LX_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 80092e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d102      	bne.n	80092f0 <VL53LX_hist_phase_consistency_check+0x8c>
		return status;
 80092ea:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80092ee:	e0e6      	b.n	80094be <VL53LX_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 80092f0:	2300      	movs	r3, #0
 80092f2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80092f6:	e0d9      	b.n	80094ac <VL53LX_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 80092f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	214c      	movs	r1, #76	; 0x4c
 8009300:	fb01 f303 	mul.w	r3, r1, r3
 8009304:	4413      	add	r3, r2
 8009306:	335e      	adds	r3, #94	; 0x5e
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	2b09      	cmp	r3, #9
 800930c:	d00b      	beq.n	8009326 <VL53LX_hist_phase_consistency_check+0xc2>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 800930e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	214c      	movs	r1, #76	; 0x4c
 8009316:	fb01 f303 	mul.w	r3, r1, r3
 800931a:	4413      	add	r3, r2
 800931c:	335e      	adds	r3, #94	; 0x5e
 800931e:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8009320:	2b13      	cmp	r3, #19
 8009322:	f040 80bd 	bne.w	80094a0 <VL53LX_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	795b      	ldrb	r3, [r3, #5]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10a      	bne.n	8009344 <VL53LX_hist_phase_consistency_check+0xe0>
			prange_curr->VL53LX_p_003[lc].range_status =
 800932e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	214c      	movs	r1, #76	; 0x4c
 8009336:	fb01 f303 	mul.w	r3, r1, r3
 800933a:	4413      	add	r3, r2
 800933c:	335e      	adds	r3, #94	; 0x5e
 800933e:	2217      	movs	r2, #23
 8009340:	701a      	strb	r2, [r3, #0]
 8009342:	e009      	b.n	8009358 <VL53LX_hist_phase_consistency_check+0xf4>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 8009344:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	214c      	movs	r1, #76	; 0x4c
 800934c:	fb01 f303 	mul.w	r3, r1, r3
 8009350:	4413      	add	r3, r2
 8009352:	335e      	adds	r3, #94	; 0x5e
 8009354:	2207      	movs	r2, #7
 8009356:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 8009358:	2300      	movs	r3, #0
 800935a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800935e:	e097      	b.n	8009490 <VL53LX_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8009360:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009364:	683a      	ldr	r2, [r7, #0]
 8009366:	214c      	movs	r1, #76	; 0x4c
 8009368:	fb01 f303 	mul.w	r3, r1, r3
 800936c:	4413      	add	r3, r2
 800936e:	3354      	adds	r3, #84	; 0x54
 8009370:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 8009372:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	4613      	mov	r3, r2
 800937a:	005b      	lsls	r3, r3, #1
 800937c:	4413      	add	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4403      	add	r3, r0
 8009382:	3310      	adds	r3, #16
 8009384:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8009386:	4299      	cmp	r1, r3
 8009388:	d915      	bls.n	80093b6 <VL53LX_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 800938a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	214c      	movs	r1, #76	; 0x4c
 8009392:	fb01 f303 	mul.w	r3, r1, r3
 8009396:	4413      	add	r3, r2
 8009398:	3354      	adds	r3, #84	; 0x54
 800939a:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 800939c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	4613      	mov	r3, r2
 80093a4:	005b      	lsls	r3, r3, #1
 80093a6:	4413      	add	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4403      	add	r3, r0
 80093ac:	3310      	adds	r3, #16
 80093ae:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 80093b0:	1acb      	subs	r3, r1, r3
 80093b2:	867b      	strh	r3, [r7, #50]	; 0x32
 80093b4:	e014      	b.n	80093e0 <VL53LX_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 80093b6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80093ba:	6879      	ldr	r1, [r7, #4]
 80093bc:	4613      	mov	r3, r2
 80093be:	005b      	lsls	r3, r3, #1
 80093c0:	4413      	add	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	440b      	add	r3, r1
 80093c6:	3310      	adds	r3, #16
 80093c8:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 80093ca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	204c      	movs	r0, #76	; 0x4c
 80093d2:	fb00 f303 	mul.w	r3, r0, r3
 80093d6:	440b      	add	r3, r1
 80093d8:	3354      	adds	r3, #84	; 0x54
 80093da:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 80093e0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80093e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d24e      	bcs.n	8009486 <VL53LX_hist_phase_consistency_check+0x222>





				if (status == VL53LX_ERROR_NONE)
 80093e8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d125      	bne.n	800943c <VL53LX_hist_phase_consistency_check+0x1d8>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 80093f0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53LX_hist_events_consistency_check(
 80093f4:	4613      	mov	r3, r2
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	4413      	add	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	3308      	adds	r3, #8
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 8009402:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_events_consistency_check(
 8009406:	224c      	movs	r2, #76	; 0x4c
 8009408:	fb02 f303 	mul.w	r3, r2, r3
 800940c:	3310      	adds	r3, #16
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	4413      	add	r3, r2
 8009412:	3304      	adds	r3, #4
 8009414:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8009416:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800941a:	f107 0217 	add.w	r2, r7, #23
 800941e:	9203      	str	r2, [sp, #12]
 8009420:	f107 021c 	add.w	r2, r7, #28
 8009424:	9202      	str	r2, [sp, #8]
 8009426:	f107 0218 	add.w	r2, r7, #24
 800942a:	9201      	str	r2, [sp, #4]
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	4623      	mov	r3, r4
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	f000 f848 	bl	80094c6 <VL53LX_hist_events_consistency_check>
 8009436:	4603      	mov	r3, r0
 8009438:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 800943c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009440:	2b00      	cmp	r3, #0
 8009442:	d115      	bne.n	8009470 <VL53LX_hist_phase_consistency_check+0x20c>
					range_status ==
 8009444:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 8009446:	2b09      	cmp	r3, #9
 8009448:	d112      	bne.n	8009470 <VL53LX_hist_phase_consistency_check+0x20c>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 800944a:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 800944e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_merged_pulse_check(
 8009452:	224c      	movs	r2, #76	; 0x4c
 8009454:	fb02 f303 	mul.w	r3, r2, r3
 8009458:	3310      	adds	r3, #16
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	4413      	add	r3, r2
 800945e:	3304      	adds	r3, #4
 8009460:	f107 0217 	add.w	r2, r7, #23
 8009464:	4619      	mov	r1, r3
 8009466:	f000 faaf 	bl	80099c8 <VL53LX_hist_merged_pulse_check>
 800946a:	4603      	mov	r3, r0
 800946c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 8009470:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009474:	7df8      	ldrb	r0, [r7, #23]
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	214c      	movs	r1, #76	; 0x4c
 800947a:	fb01 f303 	mul.w	r3, r1, r3
 800947e:	4413      	add	r3, r2
 8009480:	335e      	adds	r3, #94	; 0x5e
 8009482:	4602      	mov	r2, r0
 8009484:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 8009486:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800948a:	3301      	adds	r3, #1
 800948c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	795b      	ldrb	r3, [r3, #5]
 8009494:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009498:	429a      	cmp	r2, r3
 800949a:	f4ff af61 	bcc.w	8009360 <VL53LX_hist_phase_consistency_check+0xfc>
 800949e:	e000      	b.n	80094a2 <VL53LX_hist_phase_consistency_check+0x23e>
			continue;
 80094a0:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 80094a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80094a6:	3301      	adds	r3, #1
 80094a8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	7c9b      	ldrb	r3, [r3, #18]
 80094b0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80094b4:	429a      	cmp	r2, r3
 80094b6:	f4ff af1f 	bcc.w	80092f8 <VL53LX_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 80094ba:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80094be:	4618      	mov	r0, r3
 80094c0:	373c      	adds	r7, #60	; 0x3c
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd90      	pop	{r4, r7, pc}

080094c6 <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 80094c6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094ca:	b0a8      	sub	sp, #160	; 0xa0
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80094d0:	647b      	str	r3, [r7, #68]	; 0x44
 80094d2:	4603      	mov	r3, r0
 80094d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80094d8:	460b      	mov	r3, r1
 80094da:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80094de:	2300      	movs	r3, #0
 80094e0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	int64_t   tmpp                   = 0;
 80094e4:	f04f 0200 	mov.w	r2, #0
 80094e8:	f04f 0300 	mov.w	r3, #0
 80094ec:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	int64_t   tmpc                   = 0;
 80094f0:	f04f 0200 	mov.w	r2, #0
 80094f4:	f04f 0300 	mov.w	r3, #0
 80094f8:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	int64_t   events_scaler          = 0;
 80094fc:	f04f 0200 	mov.w	r2, #0
 8009500:	f04f 0300 	mov.w	r3, #0
 8009504:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	int64_t   events_scaler_sq       = 0;
 8009508:	f04f 0200 	mov.w	r2, #0
 800950c:	f04f 0300 	mov.w	r3, #0
 8009510:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t   c_signal_events        = 0;
 8009514:	f04f 0200 	mov.w	r2, #0
 8009518:	f04f 0300 	mov.w	r3, #0
 800951c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	int64_t   c_sig_noise_sq         = 0;
 8009520:	f04f 0200 	mov.w	r2, #0
 8009524:	f04f 0300 	mov.w	r3, #0
 8009528:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t   c_amb_noise_sq         = 0;
 800952c:	f04f 0200 	mov.w	r2, #0
 8009530:	f04f 0300 	mov.w	r3, #0
 8009534:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t   p_amb_noise_sq         = 0;
 8009538:	f04f 0200 	mov.w	r2, #0
 800953c:	f04f 0300 	mov.w	r3, #0
 8009540:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	int32_t   p_signal_events        = 0;
 8009544:	2300      	movs	r3, #0
 8009546:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t  noise_sq_sum           = 0;
 8009548:	2300      	movs	r3, #0
 800954a:	653b      	str	r3, [r7, #80]	; 0x50



	if (event_sigma == 0) {
 800954c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009550:	2b00      	cmp	r3, #0
 8009552:	d106      	bne.n	8009562 <VL53LX_hist_events_consistency_check+0x9c>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8009554:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009558:	2209      	movs	r2, #9
 800955a:	701a      	strb	r2, [r3, #0]
		return status;
 800955c:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8009560:	e22d      	b.n	80099be <VL53LX_hist_events_consistency_check+0x4f8>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 8009562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	461a      	mov	r2, r3
 8009568:	f04f 0300 	mov.w	r3, #0
 800956c:	f112 0801 	adds.w	r8, r2, #1
 8009570:	f143 0900 	adc.w	r9, r3, #0
 8009574:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 8009578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800957a:	885b      	ldrh	r3, [r3, #2]
 800957c:	b29a      	uxth	r2, r3
 800957e:	f04f 0300 	mov.w	r3, #0
 8009582:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8009586:	fb02 f001 	mul.w	r0, r2, r1
 800958a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800958e:	fb03 f101 	mul.w	r1, r3, r1
 8009592:	4408      	add	r0, r1
 8009594:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8009598:	fba1 2302 	umull	r2, r3, r1, r2
 800959c:	18c1      	adds	r1, r0, r3
 800959e:	460b      	mov	r3, r1
 80095a0:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 80095a4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 80095a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	461a      	mov	r2, r3
 80095b0:	f04f 0300 	mov.w	r3, #0
 80095b4:	f112 0a01 	adds.w	sl, r2, #1
 80095b8:	f143 0b00 	adc.w	fp, r3, #0
 80095bc:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 80095c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80095c4:	8adb      	ldrh	r3, [r3, #22]
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	f04f 0300 	mov.w	r3, #0
 80095cc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80095d0:	fb02 f001 	mul.w	r0, r2, r1
 80095d4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80095d8:	fb03 f101 	mul.w	r1, r3, r1
 80095dc:	4408      	add	r0, r1
 80095de:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80095e2:	fba1 2302 	umull	r2, r3, r1, r2
 80095e6:	18c1      	adds	r1, r0, r3
 80095e8:	460b      	mov	r3, r1
 80095ea:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 80095ee:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80



	events_scaler  = tmpp * 4096;
 80095f2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80095f6:	f04f 0000 	mov.w	r0, #0
 80095fa:	f04f 0100 	mov.w	r1, #0
 80095fe:	0319      	lsls	r1, r3, #12
 8009600:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8009604:	0310      	lsls	r0, r2, #12
 8009606:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
	if (tmpc != 0) {
 800960a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800960e:	4313      	orrs	r3, r2
 8009610:	d026      	beq.n	8009660 <VL53LX_hist_events_consistency_check+0x19a>
		events_scaler += (tmpc/2);
 8009612:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009616:	0fcb      	lsrs	r3, r1, #31
 8009618:	461a      	mov	r2, r3
 800961a:	f04f 0300 	mov.w	r3, #0
 800961e:	1814      	adds	r4, r2, r0
 8009620:	eb43 0501 	adc.w	r5, r3, r1
 8009624:	f04f 0200 	mov.w	r2, #0
 8009628:	f04f 0300 	mov.w	r3, #0
 800962c:	0862      	lsrs	r2, r4, #1
 800962e:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8009632:	106b      	asrs	r3, r5, #1
 8009634:	4610      	mov	r0, r2
 8009636:	4619      	mov	r1, r3
 8009638:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800963c:	1814      	adds	r4, r2, r0
 800963e:	63bc      	str	r4, [r7, #56]	; 0x38
 8009640:	414b      	adcs	r3, r1
 8009642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009644:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8009648:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		events_scaler  = do_division_s(events_scaler, tmpc);
 800964c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009650:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009654:	f7f6 fe14 	bl	8000280 <__aeabi_ldivmod>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	}

	events_scaler_sq  = events_scaler * events_scaler;
 8009660:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009668:	fb03 f102 	mul.w	r1, r3, r2
 800966c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009670:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009674:	fb03 f302 	mul.w	r3, r3, r2
 8009678:	4419      	add	r1, r3
 800967a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800967e:	fba3 2303 	umull	r2, r3, r3, r3
 8009682:	4419      	add	r1, r3
 8009684:	460b      	mov	r3, r1
 8009686:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 800968a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	events_scaler_sq += 2048;
 800968e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009692:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009696:	6339      	str	r1, [r7, #48]	; 0x30
 8009698:	f143 0300 	adc.w	r3, r3, #0
 800969c:	637b      	str	r3, [r7, #52]	; 0x34
 800969e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80096a2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	events_scaler_sq /= 4096;
 80096a6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80096aa:	4610      	mov	r0, r2
 80096ac:	4619      	mov	r1, r3
 80096ae:	2800      	cmp	r0, #0
 80096b0:	f171 0300 	sbcs.w	r3, r1, #0
 80096b4:	da06      	bge.n	80096c4 <VL53LX_hist_events_consistency_check+0x1fe>
 80096b6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80096ba:	f04f 0300 	mov.w	r3, #0
 80096be:	1880      	adds	r0, r0, r2
 80096c0:	eb43 0101 	adc.w	r1, r3, r1
 80096c4:	f04f 0200 	mov.w	r2, #0
 80096c8:	f04f 0300 	mov.w	r3, #0
 80096cc:	0b02      	lsrs	r2, r0, #12
 80096ce:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80096d2:	130b      	asrs	r3, r1, #12
 80096d4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 80096d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80096dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096de:	461a      	mov	r2, r3
 80096e0:	f04f 0300 	mov.w	r3, #0
 80096e4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 80096e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80096ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ee:	4618      	mov	r0, r3
 80096f0:	f04f 0100 	mov.w	r1, #0
 80096f4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80096f8:	1a14      	subs	r4, r2, r0
 80096fa:	62bc      	str	r4, [r7, #40]	; 0x28
 80096fc:	eb63 0301 	sbc.w	r3, r3, r1
 8009700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009702:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8009706:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events *= (int64_t)events_scaler;
 800970a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800970c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009710:	fb02 f203 	mul.w	r2, r2, r3
 8009714:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009718:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800971a:	fb01 f303 	mul.w	r3, r1, r3
 800971e:	18d1      	adds	r1, r2, r3
 8009720:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009722:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009726:	fba2 2303 	umull	r2, r3, r2, r3
 800972a:	4419      	add	r1, r3
 800972c:	460b      	mov	r3, r1
 800972e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8009732:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events += 2048;
 8009736:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800973a:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800973e:	6239      	str	r1, [r7, #32]
 8009740:	f143 0300 	adc.w	r3, r3, #0
 8009744:	627b      	str	r3, [r7, #36]	; 0x24
 8009746:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800974a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events /= 4096;
 800974e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009752:	2a00      	cmp	r2, #0
 8009754:	f173 0100 	sbcs.w	r1, r3, #0
 8009758:	da06      	bge.n	8009768 <VL53LX_hist_events_consistency_check+0x2a2>
 800975a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800975e:	f04f 0100 	mov.w	r1, #0
 8009762:	1812      	adds	r2, r2, r0
 8009764:	eb41 0303 	adc.w	r3, r1, r3
 8009768:	f04f 0000 	mov.w	r0, #0
 800976c:	f04f 0100 	mov.w	r1, #0
 8009770:	0b10      	lsrs	r0, r2, #12
 8009772:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009776:	1319      	asrs	r1, r3, #12
 8009778:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800977c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009780:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 8009784:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978a:	461a      	mov	r2, r3
 800978c:	f04f 0300 	mov.w	r3, #0
 8009790:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009792:	fb02 f001 	mul.w	r0, r2, r1
 8009796:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009798:	fb03 f101 	mul.w	r1, r3, r1
 800979c:	4401      	add	r1, r0
 800979e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80097a0:	fba0 2302 	umull	r2, r3, r0, r2
 80097a4:	4419      	add	r1, r3
 80097a6:	460b      	mov	r3, r1
 80097a8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 80097ac:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq += 2048;
 80097b0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80097b4:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 80097b8:	61b9      	str	r1, [r7, #24]
 80097ba:	f143 0300 	adc.w	r3, r3, #0
 80097be:	61fb      	str	r3, [r7, #28]
 80097c0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80097c4:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	c_sig_noise_sq /= 4096;
 80097c8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80097cc:	2a00      	cmp	r2, #0
 80097ce:	f173 0100 	sbcs.w	r1, r3, #0
 80097d2:	da06      	bge.n	80097e2 <VL53LX_hist_events_consistency_check+0x31c>
 80097d4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80097d8:	f04f 0100 	mov.w	r1, #0
 80097dc:	1812      	adds	r2, r2, r0
 80097de:	eb41 0303 	adc.w	r3, r1, r3
 80097e2:	f04f 0000 	mov.w	r0, #0
 80097e6:	f04f 0100 	mov.w	r1, #0
 80097ea:	0b10      	lsrs	r0, r2, #12
 80097ec:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80097f0:	1319      	asrs	r1, r3, #12
 80097f2:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 80097f6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80097fa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 80097fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009804:	461a      	mov	r2, r3
 8009806:	f04f 0300 	mov.w	r3, #0
 800980a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800980c:	fb02 f001 	mul.w	r0, r2, r1
 8009810:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009812:	fb03 f101 	mul.w	r1, r3, r1
 8009816:	4401      	add	r1, r0
 8009818:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800981a:	fba0 2302 	umull	r2, r3, r0, r2
 800981e:	4419      	add	r1, r3
 8009820:	460b      	mov	r3, r1
 8009822:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8009826:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq += 2048;
 800982a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800982e:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009832:	6139      	str	r1, [r7, #16]
 8009834:	f143 0300 	adc.w	r3, r3, #0
 8009838:	617b      	str	r3, [r7, #20]
 800983a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800983e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4096;
 8009842:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009846:	2a00      	cmp	r2, #0
 8009848:	f173 0100 	sbcs.w	r1, r3, #0
 800984c:	da06      	bge.n	800985c <VL53LX_hist_events_consistency_check+0x396>
 800984e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8009852:	f04f 0100 	mov.w	r1, #0
 8009856:	1812      	adds	r2, r2, r0
 8009858:	eb41 0303 	adc.w	r3, r1, r3
 800985c:	f04f 0000 	mov.w	r0, #0
 8009860:	f04f 0100 	mov.w	r1, #0
 8009864:	0b10      	lsrs	r0, r2, #12
 8009866:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800986a:	1319      	asrs	r1, r3, #12
 800986c:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60


	c_amb_noise_sq += 2;
 8009870:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009874:	1c91      	adds	r1, r2, #2
 8009876:	60b9      	str	r1, [r7, #8]
 8009878:	f143 0300 	adc.w	r3, r3, #0
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009882:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4;
 8009886:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800988a:	2a00      	cmp	r2, #0
 800988c:	f173 0100 	sbcs.w	r1, r3, #0
 8009890:	da02      	bge.n	8009898 <VL53LX_hist_events_consistency_check+0x3d2>
 8009892:	3203      	adds	r2, #3
 8009894:	f143 0300 	adc.w	r3, r3, #0
 8009898:	f04f 0000 	mov.w	r0, #0
 800989c:	f04f 0100 	mov.w	r1, #0
 80098a0:	0890      	lsrs	r0, r2, #2
 80098a2:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80098a6:	1099      	asrs	r1, r3, #2
 80098a8:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 80098ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ae:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 80098b0:	461a      	mov	r2, r3
 80098b2:	f04f 0300 	mov.w	r3, #0
 80098b6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	p_amb_noise_sq += 2;
 80098ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80098be:	1c91      	adds	r1, r2, #2
 80098c0:	6039      	str	r1, [r7, #0]
 80098c2:	f143 0300 	adc.w	r3, r3, #0
 80098c6:	607b      	str	r3, [r7, #4]
 80098c8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80098cc:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	p_amb_noise_sq /= 4;
 80098d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80098d4:	2a00      	cmp	r2, #0
 80098d6:	f173 0100 	sbcs.w	r1, r3, #0
 80098da:	da02      	bge.n	80098e2 <VL53LX_hist_events_consistency_check+0x41c>
 80098dc:	3203      	adds	r2, #3
 80098de:	f143 0300 	adc.w	r3, r3, #0
 80098e2:	f04f 0000 	mov.w	r0, #0
 80098e6:	f04f 0100 	mov.w	r1, #0
 80098ea:	0890      	lsrs	r0, r2, #2
 80098ec:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80098f0:	1099      	asrs	r1, r3, #2
 80098f2:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 80098f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098f8:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 80098fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
		(uint32_t)prange_prev->VL53LX_p_017 +
 80098fc:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 80098fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		(uint32_t)c_sig_noise_sq +
 8009900:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 8009902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	noise_sq_sum =
 8009904:	4413      	add	r3, r2
 8009906:	653b      	str	r3, [r7, #80]	; 0x50

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 8009908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800990a:	011b      	lsls	r3, r3, #4
 800990c:	4618      	mov	r0, r3
 800990e:	f002 f822 	bl	800b956 <VL53LX_isqrt>
 8009912:	4603      	mov	r3, r0
 8009914:	461a      	mov	r2, r3
	*pevents_tolerance =
 8009916:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800991a:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800991c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009926:	fb02 f203 	mul.w	r2, r2, r3
 800992a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800992e:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 8009930:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f103 0220 	add.w	r2, r3, #32
 800993a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800993e:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 8009940:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	da00      	bge.n	800994c <VL53LX_hist_events_consistency_check+0x486>
 800994a:	333f      	adds	r3, #63	; 0x3f
 800994c:	119b      	asrs	r3, r3, #6
 800994e:	461a      	mov	r2, r3
 8009950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009954:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 8009956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	657b      	str	r3, [r7, #84]	; 0x54
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 800995c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	461a      	mov	r2, r3
 8009962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009964:	1a9b      	subs	r3, r3, r2
 8009966:	657b      	str	r3, [r7, #84]	; 0x54

	if ((int32_t)c_signal_events > p_signal_events)
 8009968:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800996a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800996c:	429a      	cmp	r2, r3
 800996e:	da06      	bge.n	800997e <VL53LX_hist_events_consistency_check+0x4b8>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 8009970:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009974:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 8009976:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800997a:	601a      	str	r2, [r3, #0]
 800997c:	e005      	b.n	800998a <VL53LX_hist_events_consistency_check+0x4c4>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800997e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009980:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009982:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 8009984:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009988:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800998a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	429a      	cmp	r2, r3
 8009998:	dd0b      	ble.n	80099b2 <VL53LX_hist_events_consistency_check+0x4ec>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 800999a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800999e:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 80099a0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d204      	bcs.n	80099b2 <VL53LX_hist_events_consistency_check+0x4ec>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 80099a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80099ac:	2214      	movs	r2, #20
 80099ae:	701a      	strb	r2, [r3, #0]
 80099b0:	e003      	b.n	80099ba <VL53LX_hist_events_consistency_check+0x4f4>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 80099b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80099b6:	2209      	movs	r2, #9
 80099b8:	701a      	strb	r2, [r3, #0]





	return status;
 80099ba:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 80099be:	4618      	mov	r0, r3
 80099c0:	37a0      	adds	r7, #160	; 0xa0
 80099c2:	46bd      	mov	sp, r7
 80099c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080099c8 <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b087      	sub	sp, #28
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	4603      	mov	r3, r0
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 80099d6:	2300      	movs	r3, #0
 80099d8:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 80099da:	2300      	movs	r3, #0
 80099dc:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80099ea:	429a      	cmp	r2, r3
 80099ec:	dd0b      	ble.n	8009a06 <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	b29b      	uxth	r3, r3
		delta_mm =
 8009a02:	82fb      	strh	r3, [r7, #22]
 8009a04:	e00a      	b.n	8009a1c <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	b29b      	uxth	r3, r3
		delta_mm =
 8009a1a:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 8009a1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	dd09      	ble.n	8009a38 <VL53LX_hist_merged_pulse_check+0x70>
 8009a24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009a28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	dd03      	ble.n	8009a38 <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2216      	movs	r2, #22
 8009a34:	701a      	strb	r2, [r3, #0]
 8009a36:	e002      	b.n	8009a3e <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2209      	movs	r2, #9
 8009a3c:	701a      	strb	r2, [r3, #0]

	return status;
 8009a3e:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	371c      	adds	r7, #28
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b08e      	sub	sp, #56	; 0x38
 8009a52:	af04      	add	r7, sp, #16
 8009a54:	60f8      	str	r0, [r7, #12]
 8009a56:	60b9      	str	r1, [r7, #8]
 8009a58:	607a      	str	r2, [r7, #4]
 8009a5a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev =
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3318      	adds	r3, #24
 8009a66:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	f893 3250 	ldrb.w	r3, [r3, #592]	; 0x250
 8009a76:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 8009a78:	6a3b      	ldr	r3, [r7, #32]
 8009a7a:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 8009a7e:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8009a86:	2b09      	cmp	r3, #9
 8009a88:	d009      	beq.n	8009a9e <VL53LX_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009a90:	2b13      	cmp	r3, #19
 8009a92:	d004      	beq.n	8009a9e <VL53LX_hist_xmonitor_consistency_check+0x50>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 8009a9a:	2b14      	cmp	r3, #20
 8009a9c:	d129      	bne.n	8009af2 <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009aa4:	2b09      	cmp	r3, #9
 8009aa6:	d009      	beq.n	8009abc <VL53LX_hist_xmonitor_consistency_check+0x6e>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009aae:	2b13      	cmp	r3, #19
 8009ab0:	d004      	beq.n	8009abc <VL53LX_hist_xmonitor_consistency_check+0x6e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 8009ab8:	2b14      	cmp	r3, #20
 8009aba:	d11a      	bne.n	8009af2 <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	2209      	movs	r2, #9
 8009ac0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	334a      	adds	r3, #74	; 0x4a
				VL53LX_hist_events_consistency_check(
 8009ace:	8bb9      	ldrh	r1, [r7, #28]
 8009ad0:	7ff8      	ldrb	r0, [r7, #31]
 8009ad2:	9303      	str	r3, [sp, #12]
 8009ad4:	f107 0318 	add.w	r3, r7, #24
 8009ad8:	9302      	str	r3, [sp, #8]
 8009ada:	f107 0314 	add.w	r3, r7, #20
 8009ade:	9301      	str	r3, [sp, #4]
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	f7ff fced 	bl	80094c6 <VL53LX_hist_events_consistency_check>
 8009aec:	4603      	mov	r3, r0
 8009aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 8009af2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3728      	adds	r7, #40	; 0x28
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b088      	sub	sp, #32
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	60f8      	str	r0, [r7, #12]
 8009b06:	60b9      	str	r1, [r7, #8]
 8009b08:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 8009b12:	2300      	movs	r3, #0
 8009b14:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d019      	beq.n	8009b5e <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009b30:	4618      	mov	r0, r3
 8009b32:	f002 f877 	bl	800bc24 <VL53LX_calc_pll_period_mm>
 8009b36:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 8009b3e:	021b      	lsls	r3, r3, #8
 8009b40:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	69ba      	ldr	r2, [r7, #24]
 8009b46:	fb02 f303 	mul.w	r3, r2, r3
 8009b4a:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8009b52:	0bdb      	lsrs	r3, r3, #15
 8009b54:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	b21a      	sxth	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 8009b5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3720      	adds	r7, #32
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 8009b6a:	b590      	push	{r4, r7, lr}
 8009b6c:	b08d      	sub	sp, #52	; 0x34
 8009b6e:	af04      	add	r7, sp, #16
 8009b70:	4604      	mov	r4, r0
 8009b72:	4608      	mov	r0, r1
 8009b74:	4611      	mov	r1, r2
 8009b76:	461a      	mov	r2, r3
 8009b78:	4623      	mov	r3, r4
 8009b7a:	80fb      	strh	r3, [r7, #6]
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	80bb      	strh	r3, [r7, #4]
 8009b80:	460b      	mov	r3, r1
 8009b82:	70fb      	strb	r3, [r7, #3]
 8009b84:	4613      	mov	r3, r2
 8009b86:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 8009b90:	2300      	movs	r3, #0
 8009b92:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 8009b94:	2300      	movs	r3, #0
 8009b96:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 8009ba8:	78b9      	ldrb	r1, [r7, #2]
 8009baa:	78f8      	ldrb	r0, [r7, #3]
 8009bac:	f107 030c 	add.w	r3, r7, #12
 8009bb0:	9303      	str	r3, [sp, #12]
 8009bb2:	f107 030e 	add.w	r3, r7, #14
 8009bb6:	9302      	str	r3, [sp, #8]
 8009bb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	23ff      	movs	r3, #255	; 0xff
 8009bc4:	22c7      	movs	r2, #199	; 0xc7
 8009bc6:	f000 fa03 	bl	8009fd0 <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 8009bca:	89fb      	ldrh	r3, [r7, #14]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d050      	beq.n	8009c72 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 8009bd0:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d04d      	beq.n	8009c72 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 8009bd6:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 8009bda:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8009bde:	78b9      	ldrb	r1, [r7, #2]
 8009be0:	78f8      	ldrb	r0, [r7, #3]
 8009be2:	f107 0308 	add.w	r3, r7, #8
 8009be6:	9303      	str	r3, [sp, #12]
 8009be8:	f107 030a 	add.w	r3, r7, #10
 8009bec:	9302      	str	r3, [sp, #8]
 8009bee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009bf2:	9301      	str	r3, [sp, #4]
 8009bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	4623      	mov	r3, r4
 8009bfa:	f000 f9e9 	bl	8009fd0 <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 8009bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c00:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 8009c02:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 8009c04:	897b      	ldrh	r3, [r7, #10]
 8009c06:	461a      	mov	r2, r3
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	fb02 f303 	mul.w	r3, r2, r3
 8009c0e:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 8009c10:	89fb      	ldrh	r3, [r7, #14]
 8009c12:	461a      	mov	r2, r3
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c1a:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 8009c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1e:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 8009c20:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 8009c22:	893b      	ldrh	r3, [r7, #8]
 8009c24:	461a      	mov	r2, r3
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	fb02 f303 	mul.w	r3, r2, r3
 8009c2c:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 8009c2e:	89bb      	ldrh	r3, [r7, #12]
 8009c30:	461a      	mov	r2, r3
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c38:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 8009c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c3e:	69ba      	ldr	r2, [r7, #24]
 8009c40:	fb02 f303 	mul.w	r3, r2, r3
 8009c44:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 8009c46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	fb02 f303 	mul.w	r3, r2, r3
 8009c50:	69fa      	ldr	r2, [r7, #28]
 8009c52:	4413      	add	r3, r2
 8009c54:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8009c56:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 8009c58:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8009c5a:	4413      	add	r3, r2
 8009c5c:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d008      	beq.n	8009c76 <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	009a      	lsls	r2, r3, #2
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8009c6e:	61fb      	str	r3, [r7, #28]
 8009c70:	e002      	b.n	8009c78 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 8009c72:	bf00      	nop
 8009c74:	e000      	b.n	8009c78 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 8009c76:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	b21a      	sxth	r2, r3
 8009c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c7e:	801a      	strh	r2, [r3, #0]

}
 8009c80:	bf00      	nop
 8009c82:	3724      	adds	r7, #36	; 0x24
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd90      	pop	{r4, r7, pc}

08009c88 <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60b9      	str	r1, [r7, #8]
 8009c90:	607a      	str	r2, [r7, #4]
 8009c92:	603b      	str	r3, [r7, #0]
 8009c94:	4603      	mov	r3, r0
 8009c96:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 8009c98:	7bfb      	ldrb	r3, [r7, #15]
 8009c9a:	08db      	lsrs	r3, r3, #3
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 8009ca2:	7bfb      	ldrb	r3, [r7, #15]
 8009ca4:	f003 0307 	and.w	r3, r3, #7
 8009ca8:	b2da      	uxtb	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	4093      	lsls	r3, r2
 8009cb8:	b2da      	uxtb	r2, r3
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	701a      	strb	r2, [r3, #0]

}
 8009cbe:	bf00      	nop
 8009cc0:	3714      	adds	r7, #20
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr

08009cca <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b083      	sub	sp, #12
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	603a      	str	r2, [r7, #0]
 8009cd4:	71fb      	strb	r3, [r7, #7]
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 8009cda:	79fb      	ldrb	r3, [r7, #7]
 8009cdc:	2b07      	cmp	r3, #7
 8009cde:	d90a      	bls.n	8009cf6 <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8009ce0:	79bb      	ldrb	r3, [r7, #6]
 8009ce2:	00db      	lsls	r3, r3, #3
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	79fb      	ldrb	r3, [r7, #7]
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	3b71      	subs	r3, #113	; 0x71
 8009cee:	b2da      	uxtb	r2, r3
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 8009cf4:	e00a      	b.n	8009d0c <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8009cf6:	79bb      	ldrb	r3, [r7, #6]
 8009cf8:	f1c3 030f 	rsb	r3, r3, #15
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	00db      	lsls	r3, r3, #3
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	79fb      	ldrb	r3, [r7, #7]
 8009d04:	4413      	add	r3, r2
 8009d06:	b2da      	uxtb	r2, r3
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	701a      	strb	r2, [r3, #0]
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	4603      	mov	r3, r0
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
 8009d24:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 8009d26:	7bfb      	ldrb	r3, [r7, #15]
 8009d28:	091b      	lsrs	r3, r3, #4
 8009d2a:	b2da      	uxtb	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
 8009d32:	f003 030f 	and.w	r3, r3, #15
 8009d36:	b2da      	uxtb	r2, r3
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	701a      	strb	r2, [r3, #0]

}
 8009d3c:	bf00      	nop
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	4603      	mov	r3, r0
 8009d50:	603a      	str	r2, [r7, #0]
 8009d52:	71fb      	strb	r3, [r7, #7]
 8009d54:	460b      	mov	r3, r1
 8009d56:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 8009d58:	79bb      	ldrb	r3, [r7, #6]
 8009d5a:	011b      	lsls	r3, r3, #4
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	79fb      	ldrb	r3, [r7, #7]
 8009d60:	4413      	add	r3, r2
 8009d62:	b2da      	uxtb	r2, r3
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	701a      	strb	r2, [r3, #0]

}
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b086      	sub	sp, #24
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60ba      	str	r2, [r7, #8]
 8009d7c:	607b      	str	r3, [r7, #4]
 8009d7e:	4603      	mov	r3, r0
 8009d80:	73fb      	strb	r3, [r7, #15]
 8009d82:	460b      	mov	r3, r1
 8009d84:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 8009d86:	2300      	movs	r3, #0
 8009d88:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 8009d96:	f107 0217 	add.w	r2, r7, #23
 8009d9a:	f107 0116 	add.w	r1, r7, #22
 8009d9e:	7bfb      	ldrb	r3, [r7, #15]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f002 f9ab 	bl	800c0fc <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 8009da6:	f107 0214 	add.w	r2, r7, #20
 8009daa:	f107 0115 	add.w	r1, r7, #21
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7ff ffb1 	bl	8009d18 <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 8009db6:	7dfb      	ldrb	r3, [r7, #23]
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	7d7b      	ldrb	r3, [r7, #21]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	0fd9      	lsrs	r1, r3, #31
 8009dc0:	440b      	add	r3, r1
 8009dc2:	105b      	asrs	r3, r3, #1
 8009dc4:	425b      	negs	r3, r3
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	4413      	add	r3, r2
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	b21a      	sxth	r2, r3
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	da02      	bge.n	8009de2 <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	2200      	movs	r2, #0
 8009de0:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	7d7b      	ldrb	r3, [r7, #21]
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	4413      	add	r3, r2
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	b21a      	sxth	r2, r3
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 8009df8:	6a3b      	ldr	r3, [r7, #32]
 8009dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dfe:	2b0f      	cmp	r3, #15
 8009e00:	dd02      	ble.n	8009e08 <VL53LX_decode_zone_limits+0x94>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 8009e02:	6a3b      	ldr	r3, [r7, #32]
 8009e04:	220f      	movs	r2, #15
 8009e06:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 8009e08:	7dbb      	ldrb	r3, [r7, #22]
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	7d3b      	ldrb	r3, [r7, #20]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	0fd9      	lsrs	r1, r3, #31
 8009e12:	440b      	add	r3, r1
 8009e14:	105b      	asrs	r3, r3, #1
 8009e16:	425b      	negs	r3, r3
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	4413      	add	r3, r2
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	b21a      	sxth	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	da02      	bge.n	8009e34 <VL53LX_decode_zone_limits+0xc0>
		*py_ll = 0;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	7d3b      	ldrb	r3, [r7, #20]
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	4413      	add	r3, r2
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	b21a      	sxth	r2, r3
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e50:	2b0f      	cmp	r3, #15
 8009e52:	dd02      	ble.n	8009e5a <VL53LX_decode_zone_limits+0xe6>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	220f      	movs	r2, #15
 8009e58:	801a      	strh	r2, [r3, #0]
}
 8009e5a:	bf00      	nop
 8009e5c:	3718      	adds	r7, #24
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 8009e62:	b480      	push	{r7}
 8009e64:	b085      	sub	sp, #20
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	4603      	mov	r3, r0
 8009e6a:	460a      	mov	r2, r1
 8009e6c:	71fb      	strb	r3, [r7, #7]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 8009e72:	2300      	movs	r3, #0
 8009e74:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 8009e76:	79fb      	ldrb	r3, [r7, #7]
 8009e78:	f003 0303 	and.w	r3, r3, #3
 8009e7c:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 8009e7e:	79bb      	ldrb	r3, [r7, #6]
 8009e80:	f003 0303 	and.w	r3, r3, #3
 8009e84:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 8009e86:	7bbb      	ldrb	r3, [r7, #14]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d104      	bne.n	8009e96 <VL53LX_is_aperture_location+0x34>
 8009e8c:	7b7b      	ldrb	r3, [r7, #13]
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d101      	bne.n	8009e96 <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 8009e92:	2301      	movs	r3, #1
 8009e94:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 8009e96:	7bbb      	ldrb	r3, [r7, #14]
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d104      	bne.n	8009ea6 <VL53LX_is_aperture_location+0x44>
 8009e9c:	7b7b      	ldrb	r3, [r7, #13]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d101      	bne.n	8009ea6 <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 8009ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 8009eb4:	b590      	push	{r4, r7, lr}
 8009eb6:	b08b      	sub	sp, #44	; 0x2c
 8009eb8:	af02      	add	r7, sp, #8
 8009eba:	603a      	str	r2, [r7, #0]
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	71fb      	strb	r3, [r7, #7]
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	71bb      	strb	r3, [r7, #6]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 8009eda:	2300      	movs	r3, #0
 8009edc:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 8009eea:	2300      	movs	r3, #0
 8009eec:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 8009ef6:	f107 0416 	add.w	r4, r7, #22
 8009efa:	f107 0218 	add.w	r2, r7, #24
 8009efe:	79b9      	ldrb	r1, [r7, #6]
 8009f00:	79f8      	ldrb	r0, [r7, #7]
 8009f02:	f107 0312 	add.w	r3, r7, #18
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	f107 0314 	add.w	r3, r7, #20
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	4623      	mov	r3, r4
 8009f10:	f7ff ff30 	bl	8009d74 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 8009f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f16:	2200      	movs	r2, #0
 8009f18:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009f1a:	8afb      	ldrh	r3, [r7, #22]
 8009f1c:	83bb      	strh	r3, [r7, #28]
 8009f1e:	e04c      	b.n	8009fba <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009f20:	8b3b      	ldrh	r3, [r7, #24]
 8009f22:	83fb      	strh	r3, [r7, #30]
 8009f24:	e03d      	b.n	8009fa2 <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 8009f26:	8bbb      	ldrh	r3, [r7, #28]
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	8bfa      	ldrh	r2, [r7, #30]
 8009f2c:	b2d1      	uxtb	r1, r2
 8009f2e:	f107 0211 	add.w	r2, r7, #17
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7ff fec9 	bl	8009cca <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009f38:	7c78      	ldrb	r0, [r7, #17]
 8009f3a:	f107 030e 	add.w	r3, r7, #14
 8009f3e:	f107 020f 	add.w	r2, r7, #15
 8009f42:	f107 0110 	add.w	r1, r7, #16
 8009f46:	f7ff fe9f 	bl	8009c88 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009f4a:	7c3b      	ldrb	r3, [r7, #16]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	4413      	add	r3, r2
 8009f52:	781a      	ldrb	r2, [r3, #0]
 8009f54:	7bbb      	ldrb	r3, [r7, #14]
 8009f56:	4013      	ands	r3, r2
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d01b      	beq.n	8009f96 <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 8009f5e:	8bbb      	ldrh	r3, [r7, #28]
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	8bfa      	ldrh	r2, [r7, #30]
 8009f64:	b2d2      	uxtb	r2, r2
 8009f66:	4611      	mov	r1, r2
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7ff ff7a 	bl	8009e62 <VL53LX_is_aperture_location>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009f72:	7efb      	ldrb	r3, [r7, #27]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d007      	beq.n	8009f88 <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 8009f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7a:	881a      	ldrh	r2, [r3, #0]
 8009f7c:	88bb      	ldrh	r3, [r7, #4]
 8009f7e:	4413      	add	r3, r2
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f84:	801a      	strh	r2, [r3, #0]
 8009f86:	e006      	b.n	8009f96 <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 8009f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8a:	881b      	ldrh	r3, [r3, #0]
 8009f8c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009f90:	b29a      	uxth	r2, r3
 8009f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f94:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009f96:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	83fb      	strh	r3, [r7, #30]
 8009fa2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009fa6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	ddbb      	ble.n	8009f26 <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009fae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	83bb      	strh	r3, [r7, #28]
 8009fba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009fbe:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	ddac      	ble.n	8009f20 <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 8009fc6:	bf00      	nop
 8009fc8:	bf00      	nop
 8009fca:	3724      	adds	r7, #36	; 0x24
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd90      	pop	{r4, r7, pc}

08009fd0 <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 8009fd0:	b590      	push	{r4, r7, lr}
 8009fd2:	b08d      	sub	sp, #52	; 0x34
 8009fd4:	af02      	add	r7, sp, #8
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	4608      	mov	r0, r1
 8009fda:	4611      	mov	r1, r2
 8009fdc:	461a      	mov	r2, r3
 8009fde:	4623      	mov	r3, r4
 8009fe0:	71fb      	strb	r3, [r7, #7]
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	71bb      	strb	r3, [r7, #6]
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	717b      	strb	r3, [r7, #5]
 8009fea:	4613      	mov	r3, r2
 8009fec:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 8009ffe:	2300      	movs	r3, #0
 800a000:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800a002:	2300      	movs	r3, #0
 800a004:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800a006:	2300      	movs	r3, #0
 800a008:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800a00a:	2300      	movs	r3, #0
 800a00c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800a00e:	2300      	movs	r3, #0
 800a010:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800a012:	2300      	movs	r3, #0
 800a014:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800a016:	2300      	movs	r3, #0
 800a018:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800a01e:	2300      	movs	r3, #0
 800a020:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800a022:	2300      	movs	r3, #0
 800a024:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800a026:	2300      	movs	r3, #0
 800a028:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800a02c:	2300      	movs	r3, #0
 800a02e:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53LX_decode_zone_limits(
 800a030:	f107 041c 	add.w	r4, r7, #28
 800a034:	f107 021e 	add.w	r2, r7, #30
 800a038:	79b9      	ldrb	r1, [r7, #6]
 800a03a:	79f8      	ldrb	r0, [r7, #7]
 800a03c:	f107 0318 	add.w	r3, r7, #24
 800a040:	9301      	str	r3, [sp, #4]
 800a042:	f107 031a 	add.w	r3, r7, #26
 800a046:	9300      	str	r3, [sp, #0]
 800a048:	4623      	mov	r3, r4
 800a04a:	f7ff fe93 	bl	8009d74 <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 800a04e:	f107 0414 	add.w	r4, r7, #20
 800a052:	f107 0216 	add.w	r2, r7, #22
 800a056:	7939      	ldrb	r1, [r7, #4]
 800a058:	7978      	ldrb	r0, [r7, #5]
 800a05a:	f107 0310 	add.w	r3, r7, #16
 800a05e:	9301      	str	r3, [sp, #4]
 800a060:	f107 0312 	add.w	r3, r7, #18
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	4623      	mov	r3, r4
 800a068:	f7ff fe84 	bl	8009d74 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800a06c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a06e:	2200      	movs	r2, #0
 800a070:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800a072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a074:	2200      	movs	r2, #0
 800a076:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a078:	8abb      	ldrh	r3, [r7, #20]
 800a07a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a07c:	e06c      	b.n	800a158 <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a07e:	8afb      	ldrh	r3, [r7, #22]
 800a080:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a082:	e05d      	b.n	800a140 <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 800a084:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a086:	b2db      	uxtb	r3, r3
 800a088:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a08a:	b2d1      	uxtb	r1, r2
 800a08c:	f107 020f 	add.w	r2, r7, #15
 800a090:	4618      	mov	r0, r3
 800a092:	f7ff fe1a 	bl	8009cca <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 800a096:	7bf8      	ldrb	r0, [r7, #15]
 800a098:	f107 030c 	add.w	r3, r7, #12
 800a09c:	f107 020d 	add.w	r2, r7, #13
 800a0a0:	f107 010e 	add.w	r1, r7, #14
 800a0a4:	f7ff fdf0 	bl	8009c88 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800a0a8:	7bbb      	ldrb	r3, [r7, #14]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ae:	4413      	add	r3, r2
 800a0b0:	781a      	ldrb	r2, [r3, #0]
 800a0b2:	7b3b      	ldrb	r3, [r7, #12]
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d03b      	beq.n	800a134 <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 800a0bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a0c2:	b2d2      	uxtb	r2, r2
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7ff fecb 	bl	8009e62 <VL53LX_is_aperture_location>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800a0d2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d002      	beq.n	800a0e0 <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800a0da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a0dc:	847b      	strh	r3, [r7, #34]	; 0x22
 800a0de:	e002      	b.n	800a0e6 <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800a0e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0e4:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800a0e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a0ea:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	db19      	blt.n	800a126 <VL53LX_calc_mm_effective_spads+0x156>
 800a0f2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a0f6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	dc13      	bgt.n	800a126 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800a0fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800a102:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a106:	429a      	cmp	r2, r3
 800a108:	db0d      	blt.n	800a126 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800a10a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a10e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a112:	429a      	cmp	r2, r3
 800a114:	dc07      	bgt.n	800a126 <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800a116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a118:	881a      	ldrh	r2, [r3, #0]
 800a11a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a11c:	4413      	add	r3, r2
 800a11e:	b29a      	uxth	r2, r3
 800a120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a122:	801a      	strh	r2, [r3, #0]
 800a124:	e006      	b.n	800a134 <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800a126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a128:	881a      	ldrh	r2, [r3, #0]
 800a12a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a12c:	4413      	add	r3, r2
 800a12e:	b29a      	uxth	r2, r3
 800a130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a132:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a134:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a138:	b29b      	uxth	r3, r3
 800a13a:	3301      	adds	r3, #1
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a140:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a144:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a148:	429a      	cmp	r2, r3
 800a14a:	dd9b      	ble.n	800a084 <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a14c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a150:	b29b      	uxth	r3, r3
 800a152:	3301      	adds	r3, #1
 800a154:	b29b      	uxth	r3, r3
 800a156:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a158:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a15c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a160:	429a      	cmp	r2, r3
 800a162:	dd8c      	ble.n	800a07e <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800a164:	bf00      	nop
 800a166:	bf00      	nop
 800a168:	372c      	adds	r7, #44	; 0x2c
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd90      	pop	{r4, r7, pc}

0800a16e <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b086      	sub	sp, #24
 800a172:	af00      	add	r7, sp, #0
 800a174:	60f8      	str	r0, [r7, #12]
 800a176:	60b9      	str	r1, [r7, #8]
 800a178:	607a      	str	r2, [r7, #4]
 800a17a:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7fe f835 	bl	80081f0 <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	7c9a      	ldrb	r2, [r3, #18]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	3314      	adds	r3, #20
 800a1b0:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	75fb      	strb	r3, [r7, #23]
 800a1b6:	e06b      	b.n	800a290 <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800a1b8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d002      	beq.n	800a1c4 <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d034      	beq.n	800a22c <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 800a1c2:	e05f      	b.n	800a284 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800a1fc:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	8a9a      	ldrh	r2, [r3, #20]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	601a      	str	r2, [r3, #0]

			break;
 800a22a:	e02b      	b.n	800a284 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800a25c:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	611a      	str	r2, [r3, #16]
			break;
 800a282:	bf00      	nop
		}

		pdata++;
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	334c      	adds	r3, #76	; 0x4c
 800a288:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800a28a:	7dfb      	ldrb	r3, [r7, #23]
 800a28c:	3301      	adds	r3, #1
 800a28e:	75fb      	strb	r3, [r7, #23]
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	7c9b      	ldrb	r3, [r3, #18]
 800a294:	7dfa      	ldrb	r2, [r7, #23]
 800a296:	429a      	cmp	r2, r3
 800a298:	d38e      	bcc.n	800a1b8 <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800a29a:	bf00      	nop
 800a29c:	bf00      	nop
 800a29e:	3718      	adds	r7, #24
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b089      	sub	sp, #36	; 0x24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	3318      	adds	r3, #24
 800a2b4:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a2bc:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800a2c4:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a2cc:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800a2ce:	4613      	mov	r3, r2
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	4413      	add	r3, r2
 800a2d4:	005b      	lsls	r3, r3, #1
 800a2d6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	4413      	add	r3, r2
 800a2de:	3302      	adds	r3, #2
 800a2e0:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800a306:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3724      	adds	r7, #36	; 0x24
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 800a316:	b480      	push	{r7}
 800a318:	b08b      	sub	sp, #44	; 0x2c
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a320:	2300      	movs	r3, #0
 800a322:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	3318      	adds	r3, #24
 800a328:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a330:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a338:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a340:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800a348:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800a34a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a34e:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 800a350:	7bfa      	ldrb	r2, [r7, #15]
 800a352:	6939      	ldr	r1, [r7, #16]
 800a354:	4613      	mov	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4413      	add	r3, r2
 800a35a:	005b      	lsls	r3, r3, #1
 800a35c:	440b      	add	r3, r1
 800a35e:	3306      	adds	r3, #6
 800a360:	2200      	movs	r2, #0
 800a362:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a36a:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800a36c:	2301      	movs	r3, #1
 800a36e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a372:	e01a      	b.n	800a3aa <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 800a374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	214c      	movs	r1, #76	; 0x4c
 800a37c:	fb01 f303 	mul.w	r3, r1, r3
 800a380:	4413      	add	r3, r2
 800a382:	334a      	adds	r3, #74	; 0x4a
 800a384:	881b      	ldrh	r3, [r3, #0]
 800a386:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a388:	429a      	cmp	r2, r3
 800a38a:	d209      	bcs.n	800a3a0 <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 800a38c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800a390:	683a      	ldr	r2, [r7, #0]
 800a392:	214c      	movs	r1, #76	; 0x4c
 800a394:	fb01 f303 	mul.w	r3, r1, r3
 800a398:	4413      	add	r3, r2
 800a39a:	334a      	adds	r3, #74	; 0x4a
 800a39c:	881b      	ldrh	r3, [r3, #0]
 800a39e:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800a3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	7c9b      	ldrb	r3, [r3, #18]
 800a3ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d3de      	bcc.n	800a374 <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 800a3b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d103      	bne.n	800a3c4 <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 800a3bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a3c0:	623b      	str	r3, [r7, #32]
 800a3c2:	e00e      	b.n	800a3e2 <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 800a3c4:	89bb      	ldrh	r3, [r7, #12]
 800a3c6:	039b      	lsls	r3, r3, #14
 800a3c8:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800a3ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a3cc:	6a3a      	ldr	r2, [r7, #32]
 800a3ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3d2:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3da:	d302      	bcc.n	800a3e2 <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 800a3dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a3e0:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800a3e2:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800a3e4:	6a3b      	ldr	r3, [r7, #32]
 800a3e6:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800a3e8:	6939      	ldr	r1, [r7, #16]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	4413      	add	r3, r2
 800a3f0:	005b      	lsls	r3, r3, #1
 800a3f2:	440b      	add	r3, r1
 800a3f4:	3306      	adds	r3, #6
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800a3fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	372c      	adds	r7, #44	; 0x2c
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr

0800a40a <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b08a      	sub	sp, #40	; 0x28
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a412:	2300      	movs	r3, #0
 800a414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	3318      	adds	r3, #24
 800a41c:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a41e:	6a3b      	ldr	r3, [r7, #32]
 800a420:	332c      	adds	r3, #44	; 0x2c
 800a422:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800a424:	6a3b      	ldr	r3, [r7, #32]
 800a426:	33c2      	adds	r3, #194	; 0xc2
 800a428:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800a42a:	6a3b      	ldr	r3, [r7, #32]
 800a42c:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800a430:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	3302      	adds	r3, #2
 800a436:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	785b      	ldrb	r3, [r3, #1]
 800a43c:	f003 0301 	and.w	r3, r3, #1
 800a440:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a442:	6a3b      	ldr	r3, [r7, #32]
 800a444:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a448:	461a      	mov	r2, r3
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	4413      	add	r3, r2
 800a44e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a452:	2b01      	cmp	r3, #1
 800a454:	d11e      	bne.n	800a494 <VL53LX_multizone_hist_bins_update+0x8a>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800a456:	7bfb      	ldrb	r3, [r7, #15]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10b      	bne.n	800a474 <VL53LX_multizone_hist_bins_update+0x6a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a474:	7bfb      	ldrb	r3, [r7, #15]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d05d      	beq.n	800a536 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	719a      	strb	r2, [r3, #6]
 800a492:	e050      	b.n	800a536 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a494:	6a3b      	ldr	r3, [r7, #32]
 800a496:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a49a:	461a      	mov	r2, r3
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	4413      	add	r3, r2
 800a4a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d11e      	bne.n	800a4e6 <VL53LX_multizone_hist_bins_update+0xdc>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800a4a8:	7bfb      	ldrb	r3, [r7, #15]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10b      	bne.n	800a4c6 <VL53LX_multizone_hist_bins_update+0xbc>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a4c6:	7bfb      	ldrb	r3, [r7, #15]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d034      	beq.n	800a536 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	719a      	strb	r2, [r3, #6]
 800a4e4:	e027      	b.n	800a536 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a4e6:	6a3b      	ldr	r3, [r7, #32]
 800a4e8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a4f6:	2b03      	cmp	r3, #3
 800a4f8:	d11d      	bne.n	800a536 <VL53LX_multizone_hist_bins_update+0x12c>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d10b      	bne.n	800a518 <VL53LX_multizone_hist_bins_update+0x10e>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a518:	7bfb      	ldrb	r3, [r7, #15]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00b      	beq.n	800a536 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800a536:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d109      	bne.n	800a552 <VL53LX_multizone_hist_bins_update+0x148>
		VL53LX_copy_hist_bins_to_static_cfg(
 800a53e:	6a3b      	ldr	r3, [r7, #32]
 800a540:	f203 21fe 	addw	r1, r3, #766	; 0x2fe
 800a544:	6a3b      	ldr	r3, [r7, #32]
 800a546:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800a54a:	461a      	mov	r2, r3
 800a54c:	6978      	ldr	r0, [r7, #20]
 800a54e:	f7fd fa1f 	bl	8007990 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800a552:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a556:	4618      	mov	r0, r3
 800a558:	3728      	adds	r7, #40	; 0x28
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800a55e:	b480      	push	{r7}
 800a560:	b089      	sub	sp, #36	; 0x24
 800a562:	af00      	add	r7, sp, #0
 800a564:	60f8      	str	r0, [r7, #12]
 800a566:	607a      	str	r2, [r7, #4]
 800a568:	603b      	str	r3, [r7, #0]
 800a56a:	460b      	mov	r3, r1
 800a56c:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a56e:	2300      	movs	r3, #0
 800a570:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	3318      	adds	r3, #24
 800a576:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a57e:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800a580:	7dfb      	ldrb	r3, [r7, #23]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d103      	bne.n	800a58e <VL53LX_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	7afa      	ldrb	r2, [r7, #11]
 800a58a:	701a      	strb	r2, [r3, #0]
 800a58c:	e01e      	b.n	800a5cc <VL53LX_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	461a      	mov	r2, r3
 800a594:	7dfb      	ldrb	r3, [r7, #23]
 800a596:	3b01      	subs	r3, #1
 800a598:	429a      	cmp	r2, r3
 800a59a:	d111      	bne.n	800a5c0 <VL53LX_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	2bff      	cmp	r3, #255	; 0xff
 800a5a2:	d103      	bne.n	800a5ac <VL53LX_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2280      	movs	r2, #128	; 0x80
 800a5a8:	701a      	strb	r2, [r3, #0]
 800a5aa:	e005      	b.n	800a5b8 <VL53LX_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	b2da      	uxtb	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	701a      	strb	r2, [r3, #0]
 800a5be:	e005      	b.n	800a5cc <VL53LX_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	b2da      	uxtb	r2, r3
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800a5cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3724      	adds	r7, #36	; 0x24
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <VL53LX_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b08a      	sub	sp, #40	; 0x28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	607a      	str	r2, [r7, #4]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	72fb      	strb	r3, [r7, #11]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	813b      	strh	r3, [r7, #8]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	3318      	adds	r3, #24
 800a5fa:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800a600:	2300      	movs	r3, #0
 800a602:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53LX_calc_macro_period_us(
 800a604:	7afa      	ldrb	r2, [r7, #11]
 800a606:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a608:	4611      	mov	r1, r2
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7fe f9fc 	bl	8008a08 <VL53LX_calc_macro_period_us>
 800a610:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800a612:	6a3b      	ldr	r3, [r7, #32]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d101      	bne.n	800a61c <VL53LX_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800a618:	2301      	movs	r3, #1
 800a61a:	623b      	str	r3, [r7, #32]


	timeout_mclks = phasecal_timeout_us << 12;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	031b      	lsls	r3, r3, #12
 800a620:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	085b      	lsrs	r3, r3, #1
 800a626:	69ba      	ldr	r2, [r7, #24]
 800a628:	4413      	add	r3, r2
 800a62a:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800a62c:	69ba      	ldr	r2, [r7, #24]
 800a62e:	6a3b      	ldr	r3, [r7, #32]
 800a630:	fbb2 f3f3 	udiv	r3, r2, r3
 800a634:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	2bff      	cmp	r3, #255	; 0xff
 800a63a:	d904      	bls.n	800a646 <VL53LX_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	22ff      	movs	r2, #255	; 0xff
 800a640:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
 800a644:	e004      	b.n	800a650 <VL53LX_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	7afa      	ldrb	r2, [r7, #11]
 800a654:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a



	if (status == VL53LX_ERROR_NONE)
 800a658:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10a      	bne.n	800a676 <VL53LX_set_ref_spad_char_config+0x9a>
		status =
			VL53LX_WrByte(
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
 800a666:	461a      	mov	r2, r3
 800a668:	214b      	movs	r1, #75	; 0x4b
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f006 fd8e 	bl	801118c <VL53LX_WrByte>
 800a670:	4603      	mov	r3, r0
 800a672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53LX_ERROR_NONE)
 800a676:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10a      	bne.n	800a694 <VL53LX_set_ref_spad_char_config+0xb8>
		status =
			VL53LX_WrByte(
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a684:	461a      	mov	r2, r3
 800a686:	2160      	movs	r1, #96	; 0x60
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f006 fd7f 	bl	801118c <VL53LX_WrByte>
 800a68e:	4603      	mov	r3, r0
 800a690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53LX_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a69a:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a6a2:	757b      	strb	r3, [r7, #21]

	if (status == VL53LX_ERROR_NONE)
 800a6a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d109      	bne.n	800a6c0 <VL53LX_set_ref_spad_char_config+0xe4>
		status =
			VL53LX_WriteMulti(
 800a6ac:	f107 0214 	add.w	r2, r7, #20
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	2178      	movs	r1, #120	; 0x78
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f006 fcfd 	bl	80110b4 <VL53LX_WriteMulti>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	893a      	ldrh	r2, [r7, #8]
 800a6c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53LX_ERROR_NONE)
 800a6c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d108      	bne.n	800a6e2 <VL53LX_set_ref_spad_char_config+0x106>
		status =
			VL53LX_WrWord(
 800a6d0:	893b      	ldrh	r3, [r7, #8]
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	211c      	movs	r1, #28
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f006 fd82 	bl	80111e0 <VL53LX_WrWord>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a6e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d108      	bne.n	800a6fc <VL53LX_set_ref_spad_char_config+0x120>
		status =
			VL53LX_WrWord(
 800a6ea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	2164      	movs	r1, #100	; 0x64
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f006 fd75 	bl	80111e0 <VL53LX_WrWord>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a6fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a700:	2b00      	cmp	r3, #0
 800a702:	d108      	bne.n	800a716 <VL53LX_set_ref_spad_char_config+0x13a>
		status =
			VL53LX_WrWord(
 800a704:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a706:	461a      	mov	r2, r3
 800a708:	2166      	movs	r1, #102	; 0x66
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f006 fd68 	bl	80111e0 <VL53LX_WrWord>
 800a710:	4603      	mov	r3, r0
 800a712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800a716:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3728      	adds	r7, #40	; 0x28
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800a722:	b5b0      	push	{r4, r5, r7, lr}
 800a724:	b090      	sub	sp, #64	; 0x40
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a72a:	2300      	movs	r3, #0
 800a72c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	3318      	adds	r3, #24
 800a734:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a73c:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_smudge_corrector_config_t *pconfig =
 800a73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a740:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a744:	3314      	adds	r3, #20
 800a746:	623b      	str	r3, [r7, #32]
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800a748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a74e:	3318      	adds	r3, #24
 800a750:	61fb      	str	r3, [r7, #28]
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800a752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a754:	61bb      	str	r3, [r7, #24]
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a75c:	617b      	str	r3, [r7, #20]

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	69db      	ldr	r3, [r3, #28]
 800a762:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53LX_p_016;
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800a76c:	4413      	add	r3, r2
 800a76e:	461a      	mov	r2, r3
 800a770:	f04f 0300 	mov.w	r3, #0
 800a774:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (peak_duration_us == 0)
 800a778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d102      	bne.n	800a784 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x62>
		peak_duration_us = 1000;
 800a77e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a782:	63fb      	str	r3, [r7, #60]	; 0x3c
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a784:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a788:	4602      	mov	r2, r0
 800a78a:	460b      	mov	r3, r1
 800a78c:	f04f 0400 	mov.w	r4, #0
 800a790:	f04f 0500 	mov.w	r5, #0
 800a794:	015d      	lsls	r5, r3, #5
 800a796:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a79a:	0154      	lsls	r4, r2, #5
 800a79c:	4622      	mov	r2, r4
 800a79e:	462b      	mov	r3, r5
 800a7a0:	1a12      	subs	r2, r2, r0
 800a7a2:	eb63 0301 	sbc.w	r3, r3, r1
 800a7a6:	f04f 0400 	mov.w	r4, #0
 800a7aa:	f04f 0500 	mov.w	r5, #0
 800a7ae:	009d      	lsls	r5, r3, #2
 800a7b0:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a7b4:	0094      	lsls	r4, r2, #2
 800a7b6:	4622      	mov	r2, r4
 800a7b8:	462b      	mov	r3, r5
 800a7ba:	1812      	adds	r2, r2, r0
 800a7bc:	eb41 0303 	adc.w	r3, r1, r3
 800a7c0:	f04f 0000 	mov.w	r0, #0
 800a7c4:	f04f 0100 	mov.w	r1, #0
 800a7c8:	00d9      	lsls	r1, r3, #3
 800a7ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a7ce:	00d0      	lsls	r0, r2, #3
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	4610      	mov	r0, r2
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7da:	461a      	mov	r2, r3
 800a7dc:	f04f 0300 	mov.w	r3, #0
 800a7e0:	f7f5 fd9e 	bl	8000320 <__aeabi_uldivmod>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a7ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	f04f 0400 	mov.w	r4, #0
 800a7f8:	f04f 0500 	mov.w	r5, #0
 800a7fc:	015d      	lsls	r5, r3, #5
 800a7fe:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a802:	0154      	lsls	r4, r2, #5
 800a804:	4622      	mov	r2, r4
 800a806:	462b      	mov	r3, r5
 800a808:	1a12      	subs	r2, r2, r0
 800a80a:	eb63 0301 	sbc.w	r3, r3, r1
 800a80e:	f04f 0400 	mov.w	r4, #0
 800a812:	f04f 0500 	mov.w	r5, #0
 800a816:	009d      	lsls	r5, r3, #2
 800a818:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a81c:	0094      	lsls	r4, r2, #2
 800a81e:	4622      	mov	r2, r4
 800a820:	462b      	mov	r3, r5
 800a822:	1812      	adds	r2, r2, r0
 800a824:	eb41 0303 	adc.w	r3, r1, r3
 800a828:	f04f 0000 	mov.w	r0, #0
 800a82c:	f04f 0100 	mov.w	r1, #0
 800a830:	00d9      	lsls	r1, r3, #3
 800a832:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a836:	00d0      	lsls	r0, r2, #3
 800a838:	4602      	mov	r2, r0
 800a83a:	460b      	mov	r3, r1
 800a83c:	4610      	mov	r0, r2
 800a83e:	4619      	mov	r1, r3
 800a840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a842:	461a      	mov	r2, r3
 800a844:	f04f 0300 	mov.w	r3, #0
 800a848:	f7f5 fd6a 	bl	8000320 <__aeabi_uldivmod>
 800a84c:	4602      	mov	r2, r0
 800a84e:	460b      	mov	r3, r1
 800a850:	e9c7 2302 	strd	r2, r3, [r7, #8]

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800a854:	6a3b      	ldr	r3, [r7, #32]
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	697a      	ldr	r2, [r7, #20]
 800a85a:	8ad2      	ldrh	r2, [r2, #22]
 800a85c:	fb02 f303 	mul.w	r3, r2, r3
 800a860:	461a      	mov	r2, r3
 800a862:	f04f 0300 	mov.w	r3, #0
 800a866:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (temp64z == 0)
 800a86a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a86e:	4313      	orrs	r3, r2
 800a870:	d105      	bne.n	800a87e <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x15c>
		temp64z = 1;
 800a872:	f04f 0201 	mov.w	r2, #1
 800a876:	f04f 0300 	mov.w	r3, #0
 800a87a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	temp64a = temp64a * 1000 * 256;
 800a87e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a882:	4602      	mov	r2, r0
 800a884:	460b      	mov	r3, r1
 800a886:	f04f 0400 	mov.w	r4, #0
 800a88a:	f04f 0500 	mov.w	r5, #0
 800a88e:	015d      	lsls	r5, r3, #5
 800a890:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a894:	0154      	lsls	r4, r2, #5
 800a896:	4622      	mov	r2, r4
 800a898:	462b      	mov	r3, r5
 800a89a:	1a12      	subs	r2, r2, r0
 800a89c:	eb63 0301 	sbc.w	r3, r3, r1
 800a8a0:	f04f 0400 	mov.w	r4, #0
 800a8a4:	f04f 0500 	mov.w	r5, #0
 800a8a8:	009d      	lsls	r5, r3, #2
 800a8aa:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a8ae:	0094      	lsls	r4, r2, #2
 800a8b0:	4622      	mov	r2, r4
 800a8b2:	462b      	mov	r3, r5
 800a8b4:	1812      	adds	r2, r2, r0
 800a8b6:	eb41 0303 	adc.w	r3, r1, r3
 800a8ba:	f04f 0000 	mov.w	r0, #0
 800a8be:	f04f 0100 	mov.w	r1, #0
 800a8c2:	02d9      	lsls	r1, r3, #11
 800a8c4:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800a8c8:	02d0      	lsls	r0, r2, #11
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800a8d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a8d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a8da:	f7f5 fd21 	bl	8000320 <__aeabi_uldivmod>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = temp64a * 1000 * 256;
 800a8e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	f04f 0400 	mov.w	r4, #0
 800a8f2:	f04f 0500 	mov.w	r5, #0
 800a8f6:	015d      	lsls	r5, r3, #5
 800a8f8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a8fc:	0154      	lsls	r4, r2, #5
 800a8fe:	4622      	mov	r2, r4
 800a900:	462b      	mov	r3, r5
 800a902:	1a12      	subs	r2, r2, r0
 800a904:	eb63 0301 	sbc.w	r3, r3, r1
 800a908:	f04f 0400 	mov.w	r4, #0
 800a90c:	f04f 0500 	mov.w	r5, #0
 800a910:	009d      	lsls	r5, r3, #2
 800a912:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a916:	0094      	lsls	r4, r2, #2
 800a918:	4622      	mov	r2, r4
 800a91a:	462b      	mov	r3, r5
 800a91c:	1812      	adds	r2, r2, r0
 800a91e:	eb41 0303 	adc.w	r3, r1, r3
 800a922:	f04f 0000 	mov.w	r0, #0
 800a926:	f04f 0100 	mov.w	r1, #0
 800a92a:	02d9      	lsls	r1, r3, #11
 800a92c:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800a930:	02d0      	lsls	r0, r2, #11
 800a932:	4602      	mov	r2, r0
 800a934:	460b      	mov	r3, r1
 800a936:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800a93a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a93e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a942:	f7f5 fced 	bl	8000320 <__aeabi_uldivmod>
 800a946:	4602      	mov	r2, r0
 800a948:	460b      	mov	r3, r1
 800a94a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pint->required_samples = (uint32_t)temp64a;
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d802      	bhi.n	800a962 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x240>
		pint->required_samples = 2;
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	2202      	movs	r2, #2
 800a960:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800a962:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a966:	4618      	mov	r0, r3
 800a968:	3740      	adds	r7, #64	; 0x40
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a970 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b096      	sub	sp, #88	; 0x58
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
 800a97c:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a97e:	2300      	movs	r3, #0
 800a980:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	3318      	adds	r3, #24
 800a988:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800a98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a98c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a990:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800a992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a994:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800a998:	331c      	adds	r3, #28
 800a99a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800a99c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d107      	bne.n	800a9b4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x44>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	889b      	ldrh	r3, [r3, #4]
 800a9a8:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	609a      	str	r2, [r3, #8]
 800a9b2:	e002      	b.n	800a9ba <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x4a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800a9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c2:	899b      	ldrh	r3, [r3, #12]
 800a9c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800a9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ca:	89db      	ldrh	r3, [r3, #14]
 800a9cc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d004      	beq.n	800a9e4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x74>
		(pconfig->scaler_calc_method == 1)) &&
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d126      	bne.n	800aa32 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800a9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e6:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d022      	beq.n	800aa32 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a9ec:	f107 0317 	add.w	r3, r7, #23
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f000 fe75 	bl	800b6e2 <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800a9f8:	7dfb      	ldrb	r3, [r7, #23]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x92>
			histo_merge_nb = 1;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800aa02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa04:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d003      	beq.n	800aa14 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa4>
			orig_xtalk_offset =
 800aa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	653b      	str	r3, [r7, #80]	; 0x50
 800aa12:	e006      	b.n	800aa22 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800aa14:	7dfb      	ldrb	r3, [r7, #23]
 800aa16:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800aa18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1a:	3202      	adds	r2, #2
 800aa1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa20:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800aa22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa24:	889b      	ldrh	r3, [r3, #4]
 800aa26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800aa2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2c:	88db      	ldrh	r3, [r3, #6]
 800aa2e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10a      	bne.n	800aa52 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
 800aa3c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d106      	bne.n	800aa52 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
		pout->gradient_zero_flag |= 0x01;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	795b      	ldrb	r3, [r3, #5]
 800aa48:	f043 0301 	orr.w	r3, r3, #1
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10a      	bne.n	800aa72 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
 800aa5c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d106      	bne.n	800aa72 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
		pout->gradient_zero_flag |= 0x02;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	795b      	ldrb	r3, [r3, #5]
 800aa68:	f043 0302 	orr.w	r3, r3, #2
 800aa6c:	b2da      	uxtb	r2, r3
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800aa72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d101      	bne.n	800aa7c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10c>
		orig_xtalk_offset = 1;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d108      	bne.n	800aa98 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x128>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa8a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa92:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800aa96:	e019      	b.n	800aacc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x15c>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800aa98:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800aa9c:	019b      	lsls	r3, r3, #6
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaa6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800aab0:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800aab2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800aab6:	019b      	lsls	r3, r3, #6
 800aab8:	461a      	mov	r2, r3
 800aaba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aabc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800aaca:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d12a      	bne.n	800ab2c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1bc>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	689b      	ldr	r3, [r3, #8]
 800aada:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800aade:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800aae2:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800aae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aae6:	119b      	asrs	r3, r3, #6
 800aae8:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800aaea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaf0:	db02      	blt.n	800aaf8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x188>
			itemp32 = 0xFFFF;
 800aaf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aaf6:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800aaf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aafa:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800ab08:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800ab0c:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800ab0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab10:	119b      	asrs	r3, r3, #6
 800ab12:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800ab14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab1a:	db02      	blt.n	800ab22 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b2>
			itemp32 = 0xFFFF;
 800ab1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab20:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800ab22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab24:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	81da      	strh	r2, [r3, #14]
 800ab2a:	e042      	b.n	800abb2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>
	} else if (pconfig->scaler_calc_method == 1) {
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d13d      	bne.n	800abb2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800ab3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800ab40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	da00      	bge.n	800ab48 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d8>
 800ab46:	330f      	adds	r3, #15
 800ab48:	111b      	asrs	r3, r3, #4
 800ab4a:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800ab4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800ab52:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ab56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab58:	4413      	add	r3, r2
 800ab5a:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800ab5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab62:	db02      	blt.n	800ab6a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1fa>
			itemp32 = 0xFFFF;
 800ab64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab68:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800ab6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab6c:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800ab76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800ab7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab7e:	4a52      	ldr	r2, [pc, #328]	; (800acc8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x358>)
 800ab80:	fb82 1203 	smull	r1, r2, r2, r3
 800ab84:	1152      	asrs	r2, r2, #5
 800ab86:	17db      	asrs	r3, r3, #31
 800ab88:	1ad3      	subs	r3, r2, r3
 800ab8a:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800ab8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800ab92:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800ab96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab98:	4413      	add	r3, r2
 800ab9a:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800ab9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aba2:	db02      	blt.n	800abaa <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23a>
			itemp32 = 0xFFFF;
 800aba4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aba8:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800abaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abac:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	785b      	ldrb	r3, [r3, #1]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d178      	bne.n	800acac <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
 800abba:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d074      	beq.n	800acac <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2201      	movs	r2, #1
 800abc6:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	62bb      	str	r3, [r7, #40]	; 0x28

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800abce:	f107 0317 	add.w	r3, r7, #23
 800abd2:	4619      	mov	r1, r3
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f000 fd84 	bl	800b6e2 <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800abda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abdc:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800abe0:	627b      	str	r3, [r7, #36]	; 0x24
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800abe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe4:	3308      	adds	r3, #8
 800abe6:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) &&
 800abe8:	7dfb      	ldrb	r3, [r7, #23]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d042      	beq.n	800ac74 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800abee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf0:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		if ((histo_merge_nb > 0) &&
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d13d      	bne.n	800ac74 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800abf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d03a      	beq.n	800ac74 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(nXtalk != 0)) {
			cXtalk =
 800abfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	623b      	str	r3, [r7, #32]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ac0a:	fb02 f203 	mul.w	r2, r2, r3
 800ac0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac14:	61fb      	str	r3, [r7, #28]
			if ((max ==  0)||
 800ac16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d004      	beq.n	800ac26 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2b6>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800ac20:	69fa      	ldr	r2, [r7, #28]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d303      	bcc.n	800ac2e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2be>
				pout->new_xtalk_applied_flag = 0;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	719a      	strb	r2, [r3, #6]
 800ac2c:	e022      	b.n	800ac74 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			else {
				incXtalk = nXtalk / max;
 800ac2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac36:	61bb      	str	r3, [r7, #24]
				cval = 0;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800ac42:	e00e      	b.n	800ac62 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2f2>
					cval += incXtalk;
 800ac44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	4413      	add	r3, r2
 800ac4a:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800ac4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ac50:	601a      	str	r2, [r3, #0]
					pcpo++;
 800ac52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac54:	3304      	adds	r3, #4
 800ac56:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800ac58:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800ac62:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800ac66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d3ea      	bcc.n	800ac44 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2d4>
				}
				*pcpo = nXtalk;
 800ac6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac72:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	799b      	ldrb	r3, [r3, #6]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d017      	beq.n	800acac <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800ac80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac82:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8c:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800ac94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac96:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	789b      	ldrb	r3, [r3, #2]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d105      	bne.n	800acac <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

			pconfig->smudge_corr_apply_enabled = 0;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800acac:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d002      	beq.n	800acba <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x34a>
		pout->smudge_corr_valid = 1;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	2201      	movs	r2, #1
 800acb8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800acba:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3758      	adds	r7, #88	; 0x58
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	66666667 	.word	0x66666667

0800accc <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 800accc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800acd0:	b09a      	sub	sp, #104	; 0x68
 800acd2:	af02      	add	r7, sp, #8
 800acd4:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800acd6:	2300      	movs	r3, #0
 800acd8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	3318      	adds	r3, #24
 800ace0:	64bb      	str	r3, [r7, #72]	; 0x48
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800ace8:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_smudge_corrector_config_t *pconfig =
 800acea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acec:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800acf0:	3314      	adds	r3, #20
 800acf2:	643b      	str	r3, [r7, #64]	; 0x40
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800acf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acf6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800acfa:	3318      	adds	r3, #24
 800acfc:	63fb      	str	r3, [r7, #60]	; 0x3c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 800acfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad00:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ad04:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800ad06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad08:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800ad0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad0c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ad10:	633b      	str	r3, [r7, #48]	; 0x30

	uint8_t	run_smudge_detection = 0;
 800ad12:	2300      	movs	r3, #0
 800ad14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t merging_complete = 0;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t	run_nodetect = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t ambient_check = 0;
 800ad24:	2300      	movs	r3, #0
 800ad26:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	int32_t itemp32 = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	65bb      	str	r3, [r7, #88]	; 0x58
	uint64_t utemp64 = 0;
 800ad2e:	f04f 0200 	mov.w	r2, #0
 800ad32:	f04f 0300 	mov.w	r3, #0
 800ad36:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint8_t continue_processing = CONT_CONTINUE;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t xtalk_offset_out = 0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t xtalk_offset_in = 0;
 800ad44:	2300      	movs	r3, #0
 800ad46:	61fb      	str	r3, [r7, #28]
	uint32_t current_xtalk = 0;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	61bb      	str	r3, [r7, #24]
	uint32_t smudge_margin_adjusted = 0;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	617b      	str	r3, [r7, #20]
	uint8_t i = 0;
 800ad50:	2300      	movs	r3, #0
 800ad52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t nodetect_index = 0;
 800ad56:	2300      	movs	r3, #0
 800ad58:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800ad5c:	f107 030b 	add.w	r3, r7, #11
 800ad60:	4619      	mov	r1, r3
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fcbd 	bl	800b6e2 <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 800ad68:	7afb      	ldrb	r3, [r7, #11]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d004      	beq.n	800ad78 <VL53LX_dynamic_xtalk_correction_corrector+0xac>
		(pdev->tuning_parms.tp_hist_merge != 1))
 800ad6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad70:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	if ((histo_merge_nb == 0) ||
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d001      	beq.n	800ad7c <VL53LX_dynamic_xtalk_correction_corrector+0xb0>
		histo_merge_nb = 1;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	72fb      	strb	r3, [r7, #11]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800ad7c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ad7e:	f000 faeb 	bl	800b358 <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800ad82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d009      	beq.n	800ad9e <VL53LX_dynamic_xtalk_correction_corrector+0xd2>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 800ad8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8e:	7afa      	ldrb	r2, [r7, #11]
 800ad90:	fb02 f303 	mul.w	r3, r2, r3
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800ad94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad96:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d901      	bls.n	800ada2 <VL53LX_dynamic_xtalk_correction_corrector+0xd6>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e000      	b.n	800ada4 <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
 800ada2:	2300      	movs	r3, #0
 800ada4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800ada8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adaa:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d105      	bne.n	800adbe <VL53LX_dynamic_xtalk_correction_corrector+0xf2>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800adb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adb4:	f893 2184 	ldrb.w	r2, [r3, #388]	; 0x184
 800adb8:	7afb      	ldrb	r3, [r7, #11]
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800adba:	429a      	cmp	r2, r3
 800adbc:	d101      	bne.n	800adc2 <VL53LX_dynamic_xtalk_correction_corrector+0xf6>
 800adbe:	2301      	movs	r3, #1
 800adc0:	e000      	b.n	800adc4 <VL53LX_dynamic_xtalk_correction_corrector+0xf8>
 800adc2:	2300      	movs	r3, #0
	merging_complete =
 800adc4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800adc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adca:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d10e      	bne.n	800adee <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pconfig->smudge_corr_enabled == 1) &&
 800add0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00a      	beq.n	800adee <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pR->xmonitor.range_status
 800add8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adda:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800adde:	2b09      	cmp	r3, #9
 800ade0:	d105      	bne.n	800adee <VL53LX_dynamic_xtalk_correction_corrector+0x122>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800ade2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d001      	beq.n	800adee <VL53LX_dynamic_xtalk_correction_corrector+0x122>
 800adea:	2301      	movs	r3, #1
 800adec:	e000      	b.n	800adf0 <VL53LX_dynamic_xtalk_correction_corrector+0x124>
 800adee:	2300      	movs	r3, #0
	run_smudge_detection =
 800adf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		merging_complete;


	if ((pR->xmonitor.range_status
 800adf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf6:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800adfa:	2b09      	cmp	r3, #9
 800adfc:	f000 809e 	beq.w	800af3c <VL53LX_dynamic_xtalk_correction_corrector+0x270>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800ae00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae02:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	f040 8099 	bne.w	800af3c <VL53LX_dynamic_xtalk_correction_corrector+0x270>

		run_nodetect = 2;
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		for (i = 0; i < pR->active_results; i++) {
 800ae10:	2300      	movs	r3, #0
 800ae12:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ae16:	e02d      	b.n	800ae74 <VL53LX_dynamic_xtalk_correction_corrector+0x1a8>
			if (pR->VL53LX_p_003[i].range_status ==
 800ae18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ae1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae1e:	214c      	movs	r1, #76	; 0x4c
 800ae20:	fb01 f303 	mul.w	r3, r1, r3
 800ae24:	4413      	add	r3, r2
 800ae26:	335e      	adds	r3, #94	; 0x5e
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	2b09      	cmp	r3, #9
 800ae2c:	d11d      	bne.n	800ae6a <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 800ae2e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ae32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae34:	214c      	movs	r1, #76	; 0x4c
 800ae36:	fb01 f303 	mul.w	r3, r1, r3
 800ae3a:	4413      	add	r3, r2
 800ae3c:	335a      	adds	r3, #90	; 0x5a
 800ae3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae42:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800ae44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae46:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	dc03      	bgt.n	800ae54 <VL53LX_dynamic_xtalk_correction_corrector+0x188>
					run_nodetect = 0;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ae52:	e00a      	b.n	800ae6a <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				} else {
					if (run_nodetect == 2) {
 800ae54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	d106      	bne.n	800ae6a <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
						run_nodetect = 1;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						nodetect_index = i;
 800ae62:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ae66:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		for (i = 0; i < pR->active_results; i++) {
 800ae6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ae6e:	3301      	adds	r3, #1
 800ae70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ae74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae76:	7c9b      	ldrb	r3, [r3, #18]
 800ae78:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d3cb      	bcc.n	800ae18 <VL53LX_dynamic_xtalk_correction_corrector+0x14c>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800ae80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d102      	bne.n	800ae8e <VL53LX_dynamic_xtalk_correction_corrector+0x1c2>

			run_nodetect = 0;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 800ae8e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
		amr =
 800ae92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae94:	214c      	movs	r1, #76	; 0x4c
 800ae96:	fb01 f303 	mul.w	r3, r1, r3
 800ae9a:	4413      	add	r3, r2
 800ae9c:	3348      	adds	r3, #72	; 0x48
 800ae9e:	881b      	ldrh	r3, [r3, #0]
 800aea0:	827b      	strh	r3, [r7, #18]

		if (run_nodetect == 1) {
 800aea2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d148      	bne.n	800af3c <VL53LX_dynamic_xtalk_correction_corrector+0x270>




			utemp64 = 1000 * ((uint64_t)amr);
 800aeaa:	8a78      	ldrh	r0, [r7, #18]
 800aeac:	f04f 0100 	mov.w	r1, #0
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	f04f 0400 	mov.w	r4, #0
 800aeb8:	f04f 0500 	mov.w	r5, #0
 800aebc:	015d      	lsls	r5, r3, #5
 800aebe:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800aec2:	0154      	lsls	r4, r2, #5
 800aec4:	4622      	mov	r2, r4
 800aec6:	462b      	mov	r3, r5
 800aec8:	1a12      	subs	r2, r2, r0
 800aeca:	eb63 0301 	sbc.w	r3, r3, r1
 800aece:	f04f 0400 	mov.w	r4, #0
 800aed2:	f04f 0500 	mov.w	r5, #0
 800aed6:	009d      	lsls	r5, r3, #2
 800aed8:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800aedc:	0094      	lsls	r4, r2, #2
 800aede:	4622      	mov	r2, r4
 800aee0:	462b      	mov	r3, r5
 800aee2:	1812      	adds	r2, r2, r0
 800aee4:	eb41 0303 	adc.w	r3, r1, r3
 800aee8:	f04f 0000 	mov.w	r0, #0
 800aeec:	f04f 0100 	mov.w	r1, #0
 800aef0:	00d9      	lsls	r1, r3, #3
 800aef2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aef6:	00d0      	lsls	r0, r2, #3
 800aef8:	4602      	mov	r2, r0
 800aefa:	460b      	mov	r3, r1
 800aefc:	e9c7 2308 	strd	r2, r3, [r7, #32]


			utemp64 = utemp64 << 9;
 800af00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800af04:	f04f 0200 	mov.w	r2, #0
 800af08:	f04f 0300 	mov.w	r3, #0
 800af0c:	024b      	lsls	r3, r1, #9
 800af0e:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800af12:	0242      	lsls	r2, r0, #9
 800af14:	e9c7 2308 	strd	r2, r3, [r7, #32]


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800af18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af1c:	461a      	mov	r2, r3
 800af1e:	f04f 0300 	mov.w	r3, #0
 800af22:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800af26:	4299      	cmp	r1, r3
 800af28:	bf08      	it	eq
 800af2a:	4290      	cmpeq	r0, r2
 800af2c:	d203      	bcs.n	800af36 <VL53LX_dynamic_xtalk_correction_corrector+0x26a>
				run_nodetect = 1;
 800af2e:	2301      	movs	r3, #1
 800af30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800af34:	e002      	b.n	800af3c <VL53LX_dynamic_xtalk_correction_corrector+0x270>
			else
				run_nodetect = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		}
	}


	if (run_smudge_detection) {
 800af3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af40:	2b00      	cmp	r3, #0
 800af42:	f000 8101 	beq.w	800b148 <VL53LX_dynamic_xtalk_correction_corrector+0x47c>

		pint->nodetect_counter = 0;
 800af46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af48:	2200      	movs	r2, #0
 800af4a:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7ff fbe8 	bl	800a722 <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800af52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af54:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800af58:	61fb      	str	r3, [r7, #28]
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800af5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	60fb      	str	r3, [r7, #12]
		current_xtalk = ((uint32_t)cco) << 2;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	61bb      	str	r3, [r7, #24]


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800af66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af68:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	617b      	str	r3, [r7, #20]


		itemp32 = xtalk_offset_in - current_xtalk +
 800af6e:	69fa      	ldr	r2, [r7, #28]
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	1ad2      	subs	r2, r2, r3
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	4413      	add	r3, r2
 800af78:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800af7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	da02      	bge.n	800af86 <VL53LX_dynamic_xtalk_correction_corrector+0x2ba>
			itemp32 = itemp32 * (-1);
 800af80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af82:	425b      	negs	r3, r3
 800af84:	65bb      	str	r3, [r7, #88]	; 0x58


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800af86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af88:	699b      	ldr	r3, [r3, #24]
 800af8a:	461a      	mov	r2, r3
 800af8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af8e:	4293      	cmp	r3, r2
 800af90:	dd0c      	ble.n	800afac <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800af92:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted)) {
 800af94:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800af96:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	da03      	bge.n	800afa6 <VL53LX_dynamic_xtalk_correction_corrector+0x2da>
				pout->single_xtalk_delta_flag = 1;
 800af9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa0:	2201      	movs	r2, #1
 800afa2:	709a      	strb	r2, [r3, #2]
 800afa4:	e002      	b.n	800afac <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800afa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa8:	2202      	movs	r2, #2
 800afaa:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800afac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	1c5a      	adds	r2, r3, #1
 800afb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afb4:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800afb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afbc:	695b      	ldr	r3, [r3, #20]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d906      	bls.n	800afd0 <VL53LX_dynamic_xtalk_correction_corrector+0x304>
			pout->sample_limit_exceeded_flag = 1;
 800afc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc4:	2201      	movs	r2, #1
 800afc6:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800afc8:	2302      	movs	r3, #2
 800afca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800afce:	e00d      	b.n	800afec <VL53LX_dynamic_xtalk_correction_corrector+0x320>
		} else {
			pint->accumulator = pint->accumulator +
 800afd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afd2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	461a      	mov	r2, r3
 800afda:	f04f 0300 	mov.w	r3, #0
 800afde:	eb10 0802 	adds.w	r8, r0, r2
 800afe2:	eb41 0903 	adc.w	r9, r1, r3
 800afe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afe8:	e9c3 8902 	strd	r8, r9, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800afec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d202      	bcs.n	800affe <VL53LX_dynamic_xtalk_correction_corrector+0x332>
			continue_processing = CONT_NEXT_LOOP;
 800aff8:	2301      	movs	r3, #1
 800affa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800affe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b000:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	461a      	mov	r2, r3
 800b00a:	f04f 0300 	mov.w	r3, #0
 800b00e:	f7f5 f987 	bl	8000320 <__aeabi_uldivmod>
 800b012:	4602      	mov	r2, r0
 800b014:	460b      	mov	r3, r1
		xtalk_offset_out =
 800b016:	4613      	mov	r3, r2
 800b018:	653b      	str	r3, [r7, #80]	; 0x50
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800b01a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b01c:	69bb      	ldr	r3, [r7, #24]
 800b01e:	1ad2      	subs	r2, r2, r3
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	4413      	add	r3, r2
 800b024:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800b026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b028:	2b00      	cmp	r3, #0
 800b02a:	da02      	bge.n	800b032 <VL53LX_dynamic_xtalk_correction_corrector+0x366>
			itemp32 = itemp32 * (-1);
 800b02c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b02e:	425b      	negs	r3, r3
 800b030:	65bb      	str	r3, [r7, #88]	; 0x58

		if (continue_processing == CONT_CONTINUE &&
 800b032:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b036:	2b00      	cmp	r3, #0
 800b038:	d112      	bne.n	800b060 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800b03a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b03c:	69db      	ldr	r3, [r3, #28]
 800b03e:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800b040:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b042:	4293      	cmp	r3, r2
 800b044:	db0c      	blt.n	800b060 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800b046:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted))
 800b048:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800b04a:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800b04c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b04e:	429a      	cmp	r2, r3
 800b050:	da03      	bge.n	800b05a <VL53LX_dynamic_xtalk_correction_corrector+0x38e>
				pout->averaged_xtalk_delta_flag = 1;
 800b052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b054:	2201      	movs	r2, #1
 800b056:	70da      	strb	r2, [r3, #3]
 800b058:	e002      	b.n	800b060 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800b05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05c:	2202      	movs	r2, #2
 800b05e:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800b060:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b064:	2b00      	cmp	r3, #0
 800b066:	d108      	bne.n	800b07a <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800b068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b06a:	69db      	ldr	r3, [r3, #28]
 800b06c:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800b06e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b070:	4293      	cmp	r3, r2
 800b072:	da02      	bge.n	800b07a <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			)

			continue_processing = CONT_RESET;
 800b074:	2302      	movs	r3, #2
 800b076:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



		pout->smudge_corr_clipped = 0;
 800b07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07c:	2200      	movs	r2, #0
 800b07e:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800b080:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b084:	2b00      	cmp	r3, #0
 800b086:	d111      	bne.n	800b0ac <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800b088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b08a:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d00d      	beq.n	800b0ac <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800b090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b092:	6a1b      	ldr	r3, [r3, #32]
 800b094:	7afa      	ldrb	r2, [r7, #11]
 800b096:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800b09a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d905      	bls.n	800b0ac <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
				pout->smudge_corr_clipped = 1;
 800b0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800b0a6:	2302      	movs	r3, #2
 800b0a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800b0ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ae:	7c1b      	ldrb	r3, [r3, #16]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d007      	beq.n	800b0c4 <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800b0b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0b6:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800b0b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d902      	bls.n	800b0c4 <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			xtalk_offset_out =
 800b0be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800b0c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0c6:	7c1b      	ldrb	r3, [r3, #16]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d107      	bne.n	800b0dc <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800b0cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ce:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800b0d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d202      	bcs.n	800b0dc <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			xtalk_offset_out =
 800b0d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800b0dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0de:	089b      	lsrs	r3, r3, #2
 800b0e0:	653b      	str	r3, [r7, #80]	; 0x50
		if (xtalk_offset_out > 0x3FFFF)
 800b0e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0e8:	d301      	bcc.n	800b0ee <VL53LX_dynamic_xtalk_correction_corrector+0x422>
			xtalk_offset_out = 0x3FFFF;
 800b0ea:	4b3f      	ldr	r3, [pc, #252]	; (800b1e8 <VL53LX_dynamic_xtalk_correction_corrector+0x51c>)
 800b0ec:	653b      	str	r3, [r7, #80]	; 0x50


		if (continue_processing == CONT_CONTINUE) {
 800b0ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d10d      	bne.n	800b112 <VL53LX_dynamic_xtalk_correction_corrector+0x446>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	9301      	str	r3, [sp, #4]
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b100:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b102:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f7ff fc33 	bl	800a970 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800b10a:	2302      	movs	r3, #2
 800b10c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b110:	e009      	b.n	800b126 <VL53LX_dynamic_xtalk_correction_corrector+0x45a>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b112:	2301      	movs	r3, #1
 800b114:	9301      	str	r3, [sp, #4]
 800b116:	2301      	movs	r3, #1
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b11e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f7ff fc25 	bl	800a970 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800b126:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d10c      	bne.n	800b148 <VL53LX_dynamic_xtalk_correction_corrector+0x47c>
			pint->accumulator = 0;
 800b12e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b130:	f04f 0200 	mov.w	r2, #0
 800b134:	f04f 0300 	mov.w	r3, #0
 800b138:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800b13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b13e:	2200      	movs	r2, #0
 800b140:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800b142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b144:	2200      	movs	r2, #0
 800b146:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800b148:	2300      	movs	r3, #0
 800b14a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (run_nodetect == 1) {
 800b14e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b152:	2b01      	cmp	r3, #1
 800b154:	d140      	bne.n	800b1d8 <VL53LX_dynamic_xtalk_correction_corrector+0x50c>

		pint->nodetect_counter += 1;
 800b156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b158:	691b      	ldr	r3, [r3, #16]
 800b15a:	1c5a      	adds	r2, r3, #1
 800b15c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b15e:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800b160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b162:	691a      	ldr	r2, [r3, #16]
 800b164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b168:	429a      	cmp	r2, r3
 800b16a:	d202      	bcs.n	800b172 <VL53LX_dynamic_xtalk_correction_corrector+0x4a6>
			continue_processing = CONT_NEXT_LOOP;
 800b16c:	2301      	movs	r3, #1
 800b16e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800b172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b176:	653b      	str	r3, [r7, #80]	; 0x50

		if (continue_processing == CONT_CONTINUE) {
 800b178:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d110      	bne.n	800b1a2 <VL53LX_dynamic_xtalk_correction_corrector+0x4d6>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b180:	2300      	movs	r3, #0
 800b182:	9301      	str	r3, [sp, #4]
 800b184:	2300      	movs	r3, #0
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b18c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f7ff fbee 	bl	800a970 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	2202      	movs	r2, #2
 800b198:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800b19a:	2302      	movs	r3, #2
 800b19c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b1a0:	e009      	b.n	800b1b6 <VL53LX_dynamic_xtalk_correction_corrector+0x4ea>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	9301      	str	r3, [sp, #4]
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	9300      	str	r3, [sp, #0]
 800b1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f7ff fbdd 	bl	800a970 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800b1b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d10c      	bne.n	800b1d8 <VL53LX_dynamic_xtalk_correction_corrector+0x50c>
			pint->accumulator = 0;
 800b1be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b1c0:	f04f 0200 	mov.w	r2, #0
 800b1c4:	f04f 0300 	mov.w	r3, #0
 800b1c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800b1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800b1d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800b1d8:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3760      	adds	r7, #96	; 0x60
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b1e6:	bf00      	nop
 800b1e8:	0003ffff 	.word	0x0003ffff

0800b1ec <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b086      	sub	sp, #24
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	3318      	adds	r3, #24
 800b1fc:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800b204:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b20c:	3314      	adds	r3, #20
 800b20e:	2201      	movs	r2, #1
 800b210:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b218:	3315      	adds	r3, #21
 800b21a:	2201      	movs	r2, #1
 800b21c:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b224:	3316      	adds	r3, #22
 800b226:	2200      	movs	r2, #0
 800b228:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b230:	3318      	adds	r3, #24
 800b232:	2200      	movs	r2, #0
 800b234:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b23c:	331c      	adds	r3, #28
 800b23e:	2264      	movs	r2, #100	; 0x64
 800b240:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b248:	2200      	movs	r2, #0
 800b24a:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b252:	3304      	adds	r3, #4
 800b254:	2200      	movs	r2, #0
 800b256:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b25e:	3308      	adds	r3, #8
 800b260:	22c8      	movs	r2, #200	; 0xc8
 800b262:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b26a:	330c      	adds	r3, #12
 800b26c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b270:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b278:	3310      	adds	r3, #16
 800b27a:	f44f 729a 	mov.w	r2, #308	; 0x134
 800b27e:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b286:	3314      	adds	r3, #20
 800b288:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b28c:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b294:	3318      	adds	r3, #24
 800b296:	2280      	movs	r2, #128	; 0x80
 800b298:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b2a0:	331c      	adds	r3, #28
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	701a      	strb	r2, [r3, #0]
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b2ac:	331e      	adds	r3, #30
 800b2ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2b2:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b2ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2be:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b2c6:	3302      	adds	r3, #2
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b2d2:	3304      	adds	r3, #4
 800b2d4:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
 800b2d8:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b2e0:	3308      	adds	r3, #8
 800b2e2:	2228      	movs	r2, #40	; 0x28
 800b2e4:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b2ec:	330c      	adds	r3, #12
 800b2ee:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800b2f2:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b2fa:	3310      	adds	r3, #16
 800b2fc:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b300:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b308:	3314      	adds	r3, #20
 800b30a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b30e:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b316:	3318      	adds	r3, #24
 800b318:	2200      	movs	r2, #0
 800b31a:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.required_samples = 0;
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b322:	331c      	adds	r3, #28
 800b324:	2200      	movs	r2, #0
 800b326:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.accumulator = 0;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	f503 519f 	add.w	r1, r3, #5088	; 0x13e0
 800b32e:	f04f 0200 	mov.w	r2, #0
 800b332:	f04f 0300 	mov.w	r3, #0
 800b336:	e9c1 2300 	strd	r2, r3, [r1]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b340:	3308      	adds	r3, #8
 800b342:	2200      	movs	r2, #0
 800b344:	601a      	str	r2, [r3, #0]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800b346:	68f8      	ldr	r0, [r7, #12]
 800b348:	f000 f806 	bl	800b358 <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800b34c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3718      	adds	r7, #24
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b360:	2300      	movs	r3, #0
 800b362:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b36a:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	2200      	movs	r2, #0
 800b370:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	2200      	movs	r2, #0
 800b376:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	2200      	movs	r2, #0
 800b37c:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	2200      	movs	r2, #0
 800b382:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	2200      	movs	r2, #0
 800b388:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	2200      	movs	r2, #0
 800b38e:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	2200      	movs	r2, #0
 800b394:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	2200      	movs	r2, #0
 800b39a:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800b3a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	3318      	adds	r3, #24
 800b3c8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800b3d0:	331c      	adds	r3, #28
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	601a      	str	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800b3dc:	2200      	movs	r2, #0
 800b3de:	801a      	strh	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800b3e6:	3302      	adds	r3, #2
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	801a      	strh	r2, [r3, #0]
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	2218      	movs	r2, #24
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f009 fdf7 	bl	8014fec <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800b3fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b40a:	b480      	push	{r7}
 800b40c:	b085      	sub	sp, #20
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b412:	2300      	movs	r3, #0
 800b414:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	3318      	adds	r3, #24
 800b41a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b422:	3310      	adds	r3, #16
 800b424:	2203      	movs	r2, #3
 800b426:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b42e:	3311      	adds	r3, #17
 800b430:	2200      	movs	r2, #0
 800b432:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b43a:	3312      	adds	r3, #18
 800b43c:	2200      	movs	r2, #0
 800b43e:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b446:	3313      	adds	r3, #19
 800b448:	2200      	movs	r2, #0
 800b44a:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b452:	3314      	adds	r3, #20
 800b454:	2200      	movs	r2, #0
 800b456:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b45e:	3315      	adds	r3, #21
 800b460:	2200      	movs	r2, #0
 800b462:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b46a:	3316      	adds	r3, #22
 800b46c:	2200      	movs	r2, #0
 800b46e:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b476:	3318      	adds	r3, #24
 800b478:	2200      	movs	r2, #0
 800b47a:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b482:	331c      	adds	r3, #28
 800b484:	2200      	movs	r2, #0
 800b486:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800b488:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3714      	adds	r7, #20
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <VL53LX_low_power_auto_data_stop_range>:

VL53LX_Error VL53LX_low_power_auto_data_stop_range(
	VL53LX_DEV                          Dev
	)
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	3318      	adds	r3, #24
 800b4a8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b4b0:	3312      	adds	r3, #18
 800b4b2:	22ff      	movs	r2, #255	; 0xff
 800b4b4:	701a      	strb	r2, [r3, #0]

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b4bc:	3316      	adds	r3, #22
 800b4be:	2200      	movs	r2, #0
 800b4c0:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b4c8:	3318      	adds	r3, #24
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b4d4:	331c      	adds	r3, #28
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	801a      	strh	r2, [r3, #0]


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b4e0:	3314      	adds	r3, #20
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d007      	beq.n	800b4f8 <VL53LX_low_power_auto_data_stop_range+0x60>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b4ee:	3314      	adds	r3, #20
 800b4f0:	781a      	ldrb	r2, [r3, #0]
		pdev->stat_nvm.vhv_config__init =
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b4fe:	3315      	adds	r3, #21
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d007      	beq.n	800b516 <VL53LX_low_power_auto_data_stop_range+0x7e>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b50c:	3315      	adds	r3, #21
 800b50e:	781a      	ldrb	r2, [r3, #0]
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	LOG_FUNCTION_END(status);

	return status;
 800b51e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3714      	adds	r7, #20
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr

0800b52e <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800b52e:	b480      	push	{r7}
 800b530:	b085      	sub	sp, #20
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	3318      	adds	r3, #24
 800b53a:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b53c:	2300      	movs	r3, #0
 800b53e:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f893 22e3 	ldrb.w	r2, [r3, #739]	; 0x2e3
	pdev->low_power_auto_data.saved_vhv_init =
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b54c:	3314      	adds	r3, #20
 800b54e:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
	pdev->low_power_auto_data.saved_vhv_timeout =
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b55c:	3315      	adds	r3, #21
 800b55e:	701a      	strb	r2, [r3, #0]


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f893 32e3 	ldrb.w	r3, [r3, #739]	; 0x2e3
 800b566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b56a:	b2da      	uxtb	r2, r3
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b578:	f003 0303 	and.w	r3, r3, #3
 800b57c:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b584:	3310      	adds	r3, #16
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b58c:	4413      	add	r3, r2
 800b58e:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2201      	movs	r2, #1
 800b59a:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 800b5a4:	331e      	adds	r3, #30
 800b5a6:	781a      	ldrb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result =
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b5ae:	3316      	adds	r3, #22
 800b5b0:	701a      	strb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b5b8:	3316      	adds	r3, #22
 800b5ba:	781a      	ldrb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

	LOG_FUNCTION_END(status);

	return status;
 800b5c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3714      	adds	r7, #20
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr

0800b5d2 <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800b5d2:	b480      	push	{r7}
 800b5d4:	b087      	sub	sp, #28
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	3318      	adds	r3, #24
 800b5de:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f203 3366 	addw	r3, r3, #870	; 0x366
 800b5e6:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	8a1b      	ldrh	r3, [r3, #16]
 800b5f0:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	891b      	ldrh	r3, [r3, #8]
 800b5f6:	4413      	add	r3, r2
	utemp32a =
 800b5f8:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b600:	d302      	bcc.n	800b608 <VL53LX_low_power_auto_update_DSS+0x36>
		utemp32a = 0xFFFF;
 800b602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b606:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	041b      	lsls	r3, r3, #16
 800b60c:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800b614:	2b00      	cmp	r3, #0
 800b616:	d102      	bne.n	800b61e <VL53LX_low_power_auto_update_DSS+0x4c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b618:	23f1      	movs	r3, #241	; 0xf1
 800b61a:	75fb      	strb	r3, [r7, #23]
 800b61c:	e03f      	b.n	800b69e <VL53LX_low_power_auto_update_DSS+0xcc>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800b624:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	fbb3 f3f2 	udiv	r3, r3, r2
 800b62c:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b634:	3318      	adds	r3, #24
 800b636:	693a      	ldr	r2, [r7, #16]
 800b638:	601a      	str	r2, [r3, #0]
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800b640:	041b      	lsls	r3, r3, #16
 800b642:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b64a:	3318      	adds	r3, #24
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d102      	bne.n	800b658 <VL53LX_low_power_auto_update_DSS+0x86>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b652:	23f1      	movs	r3, #241	; 0xf1
 800b654:	75fb      	strb	r3, [r7, #23]
 800b656:	e022      	b.n	800b69e <VL53LX_low_power_auto_update_DSS+0xcc>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b65e:	3318      	adds	r3, #24
 800b660:	681b      	ldr	r3, [r3, #0]
			utemp32a = utemp32a /
 800b662:	693a      	ldr	r2, [r7, #16]
 800b664:	fbb2 f3f3 	udiv	r3, r2, r3
 800b668:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b670:	d302      	bcc.n	800b678 <VL53LX_low_power_auto_update_DSS+0xa6>
				utemp32a = 0xFFFF;
 800b672:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b676:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b682:	331c      	adds	r3, #28
 800b684:	801a      	strh	r2, [r3, #0]


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b68c:	331c      	adds	r3, #28
 800b68e:	881a      	ldrh	r2, [r3, #0]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
			pdev->gen_cfg.dss_config__roi_mode_control =
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2202      	movs	r2, #2
 800b69a:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800b69e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6a2:	f113 0f0f 	cmn.w	r3, #15
 800b6a6:	d114      	bne.n	800b6d2 <VL53LX_low_power_auto_update_DSS+0x100>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b6ae:	331c      	adds	r3, #28
 800b6b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b6b4:	801a      	strh	r2, [r3, #0]


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b6bc:	331c      	adds	r3, #28
 800b6be:	881a      	ldrh	r2, [r3, #0]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
		pdev->gen_cfg.dss_config__roi_mode_control =
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2202      	movs	r2, #2
 800b6ca:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b6d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	371c      	adds	r7, #28
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr

0800b6e2 <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b087      	sub	sp, #28
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	3318      	adds	r3, #24
 800b6f0:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800b700:	2b07      	cmp	r3, #7
 800b702:	bf0c      	ite	eq
 800b704:	2301      	moveq	r3, #1
 800b706:	2300      	movne	r3, #0
 800b708:	b2db      	uxtb	r3, r3
 800b70a:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b70c:	2300      	movs	r3, #0
 800b70e:	75fb      	strb	r3, [r7, #23]
 800b710:	e019      	b.n	800b746 <VL53LX_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800b712:	7df9      	ldrb	r1, [r7, #23]
 800b714:	7bbb      	ldrb	r3, [r7, #14]
 800b716:	6938      	ldr	r0, [r7, #16]
 800b718:	461a      	mov	r2, r3
 800b71a:	0052      	lsls	r2, r2, #1
 800b71c:	441a      	add	r2, r3
 800b71e:	0153      	lsls	r3, r2, #5
 800b720:	461a      	mov	r2, r3
 800b722:	460b      	mov	r3, r1
 800b724:	005b      	lsls	r3, r3, #1
 800b726:	440b      	add	r3, r1
 800b728:	019b      	lsls	r3, r3, #6
 800b72a:	4413      	add	r3, r2
 800b72c:	4403      	add	r3, r0
 800b72e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800b732:	330c      	adds	r3, #12
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	dd02      	ble.n	800b740 <VL53LX_compute_histo_merge_nb+0x5e>
			sum++;
 800b73a:	7dbb      	ldrb	r3, [r7, #22]
 800b73c:	3301      	adds	r3, #1
 800b73e:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b740:	7dfb      	ldrb	r3, [r7, #23]
 800b742:	3301      	adds	r3, #1
 800b744:	75fb      	strb	r3, [r7, #23]
 800b746:	7dfb      	ldrb	r3, [r7, #23]
 800b748:	2b05      	cmp	r3, #5
 800b74a:	d9e2      	bls.n	800b712 <VL53LX_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	7dba      	ldrb	r2, [r7, #22]
 800b750:	701a      	strb	r2, [r3, #0]

	return status;
 800b752:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b756:	4618      	mov	r0, r3
 800b758:	371c      	adds	r7, #28
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr

0800b762 <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800b762:	b480      	push	{r7}
 800b764:	b085      	sub	sp, #20
 800b766:	af00      	add	r7, sp, #0
 800b768:	4603      	mov	r3, r0
 800b76a:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800b76c:	2300      	movs	r3, #0
 800b76e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800b770:	88fb      	ldrh	r3, [r7, #6]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d005      	beq.n	800b782 <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800b776:	88fb      	ldrh	r3, [r7, #6]
 800b778:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b77c:	fb92 f3f3 	sdiv	r3, r2, r3
 800b780:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800b782:	68fb      	ldr	r3, [r7, #12]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3714      	adds	r7, #20
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800b790:	b480      	push	{r7}
 800b792:	b089      	sub	sp, #36	; 0x24
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	607a      	str	r2, [r7, #4]
 800b79c:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800b79e:	f04f 0200 	mov.w	r2, #0
 800b7a2:	f04f 0300 	mov.w	r3, #0
 800b7a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	68fa      	ldr	r2, [r7, #12]
 800b7b2:	fb02 f303 	mul.w	r3, r2, r3
 800b7b6:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	0b1b      	lsrs	r3, r3, #12
 800b7bc:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	f04f 0300 	mov.w	r3, #0
 800b7c6:	e9c7 2306 	strd	r2, r3, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	fb02 f303 	mul.w	r3, r2, r3
 800b7d2:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800b7d4:	697b      	ldr	r3, [r7, #20]
 800b7d6:	091b      	lsrs	r3, r3, #4
 800b7d8:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	f04f 0300 	mov.w	r3, #0
 800b7e2:	69f9      	ldr	r1, [r7, #28]
 800b7e4:	fb02 f001 	mul.w	r0, r2, r1
 800b7e8:	69b9      	ldr	r1, [r7, #24]
 800b7ea:	fb03 f101 	mul.w	r1, r3, r1
 800b7ee:	4401      	add	r1, r0
 800b7f0:	69b8      	ldr	r0, [r7, #24]
 800b7f2:	fba0 2302 	umull	r2, r3, r0, r2
 800b7f6:	4419      	add	r1, r3
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800b7fe:	e9c7 2306 	strd	r2, r3, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800b802:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b806:	f04f 0200 	mov.w	r2, #0
 800b80a:	f04f 0300 	mov.w	r3, #0
 800b80e:	0b02      	lsrs	r2, r0, #12
 800b810:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b814:	0b0b      	lsrs	r3, r1, #12
 800b816:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800b81a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b81e:	2b01      	cmp	r3, #1
 800b820:	bf08      	it	eq
 800b822:	2a00      	cmpeq	r2, #0
 800b824:	d305      	bcc.n	800b832 <VL53LX_duration_maths+0xa2>
		tmp_long_int = 0xFFFFFFFF;
 800b826:	f04f 32ff 	mov.w	r2, #4294967295
 800b82a:	f04f 0300 	mov.w	r3, #0
 800b82e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	617b      	str	r3, [r7, #20]

	return duration_us;
 800b836:	697b      	ldr	r3, [r7, #20]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3724      	adds	r7, #36	; 0x24
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800b844:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b848:	b08e      	sub	sp, #56	; 0x38
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	60f8      	str	r0, [r7, #12]
 800b84e:	460b      	mov	r3, r1
 800b850:	607a      	str	r2, [r7, #4]
 800b852:	817b      	strh	r3, [r7, #10]
	uint64_t total_hist_counts  = 0;
 800b854:	f04f 0200 	mov.w	r2, #0
 800b858:	f04f 0300 	mov.w	r3, #0
 800b85c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint64_t xtalk_per_spad     = 0;
 800b860:	f04f 0200 	mov.w	r2, #0
 800b864:	f04f 0300 	mov.w	r3, #0
 800b868:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint32_t rate_per_spad_kcps = 0;
 800b86c:	2300      	movs	r3, #0
 800b86e:	627b      	str	r3, [r7, #36]	; 0x24





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	4618      	mov	r0, r3
 800b874:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800b878:	4602      	mov	r2, r0
 800b87a:	460b      	mov	r3, r1
 800b87c:	f04f 0400 	mov.w	r4, #0
 800b880:	f04f 0500 	mov.w	r5, #0
 800b884:	015d      	lsls	r5, r3, #5
 800b886:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800b88a:	0154      	lsls	r4, r2, #5
 800b88c:	4622      	mov	r2, r4
 800b88e:	462b      	mov	r3, r5
 800b890:	1a12      	subs	r2, r2, r0
 800b892:	eb63 0301 	sbc.w	r3, r3, r1
 800b896:	f04f 0400 	mov.w	r4, #0
 800b89a:	f04f 0500 	mov.w	r5, #0
 800b89e:	009d      	lsls	r5, r3, #2
 800b8a0:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800b8a4:	0094      	lsls	r4, r2, #2
 800b8a6:	4622      	mov	r2, r4
 800b8a8:	462b      	mov	r3, r5
 800b8aa:	1812      	adds	r2, r2, r0
 800b8ac:	eb41 0303 	adc.w	r3, r1, r3
 800b8b0:	f04f 0000 	mov.w	r0, #0
 800b8b4:	f04f 0100 	mov.w	r1, #0
 800b8b8:	02d9      	lsls	r1, r3, #11
 800b8ba:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800b8be:	02d0      	lsls	r0, r2, #11
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
			* 1000 * 256);

	if (num_spads != 0)
 800b8c8:	897b      	ldrh	r3, [r7, #10]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00a      	beq.n	800b8e4 <VL53LX_events_per_spad_maths+0xa0>
		total_hist_counts = do_division_u(
 800b8ce:	897a      	ldrh	r2, [r7, #10]
 800b8d0:	f04f 0300 	mov.w	r3, #0
 800b8d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b8d8:	f7f4 fd22 	bl	8000320 <__aeabi_uldivmod>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	460b      	mov	r3, r1
 800b8e0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d021      	beq.n	800b92e <VL53LX_events_per_spad_maths+0xea>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b8ea:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800b8ee:	f04f 0200 	mov.w	r2, #0
 800b8f2:	f04f 0300 	mov.w	r3, #0
 800b8f6:	02cb      	lsls	r3, r1, #11
 800b8f8:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b8fc:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800b8fe:	6879      	ldr	r1, [r7, #4]
 800b900:	0849      	lsrs	r1, r1, #1
 800b902:	4608      	mov	r0, r1
 800b904:	f04f 0100 	mov.w	r1, #0
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b908:	eb12 0800 	adds.w	r8, r2, r0
 800b90c:	eb43 0901 	adc.w	r9, r3, r1
 800b910:	e9c7 8904 	strd	r8, r9, [r7, #16]

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	461a      	mov	r2, r3
 800b918:	f04f 0300 	mov.w	r3, #0
 800b91c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b920:	f7f4 fcfe 	bl	8000320 <__aeabi_uldivmod>
 800b924:	4602      	mov	r2, r0
 800b926:	460b      	mov	r3, r1
 800b928:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800b92c:	e00b      	b.n	800b946 <VL53LX_events_per_spad_maths+0x102>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800b92e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800b932:	f04f 0200 	mov.w	r2, #0
 800b936:	f04f 0300 	mov.w	r3, #0
 800b93a:	02cb      	lsls	r3, r1, #11
 800b93c:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b940:	02c2      	lsls	r2, r0, #11
 800b942:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800b946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b948:	627b      	str	r3, [r7, #36]	; 0x24

	return rate_per_spad_kcps;
 800b94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3738      	adds	r7, #56	; 0x38
 800b950:	46bd      	mov	sp, r7
 800b952:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800b956 <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800b956:	b480      	push	{r7}
 800b958:	b085      	sub	sp, #20
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800b95e:	2300      	movs	r3, #0
 800b960:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b962:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b966:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800b968:	e002      	b.n	800b970 <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	089b      	lsrs	r3, r3, #2
 800b96e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b970:	68ba      	ldr	r2, [r7, #8]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	429a      	cmp	r2, r3
 800b976:	d8f8      	bhi.n	800b96a <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800b978:	e017      	b.n	800b9aa <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800b97a:	68fa      	ldr	r2, [r7, #12]
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	4413      	add	r3, r2
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	429a      	cmp	r2, r3
 800b984:	d30b      	bcc.n	800b99e <VL53LX_isqrt+0x48>
			num -= res + bit;
 800b986:	68fa      	ldr	r2, [r7, #12]
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	4413      	add	r3, r2
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	1ad3      	subs	r3, r2, r3
 800b990:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	085b      	lsrs	r3, r3, #1
 800b996:	68ba      	ldr	r2, [r7, #8]
 800b998:	4413      	add	r3, r2
 800b99a:	60fb      	str	r3, [r7, #12]
 800b99c:	e002      	b.n	800b9a4 <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	085b      	lsrs	r3, r3, #1
 800b9a2:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	089b      	lsrs	r3, r3, #2
 800b9a8:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1e4      	bne.n	800b97a <VL53LX_isqrt+0x24>
	}

	return res;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3714      	adds	r7, #20
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f000 fa97 	bl	800bf08 <VL53LX_decode_vcsel_period>
 800b9da:	4603      	mov	r3, r0
	period = 2048 *
 800b9dc:	02db      	lsls	r3, r3, #11
 800b9de:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b9f8:	02db      	lsls	r3, r3, #11
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ba06:	02db      	lsls	r3, r3, #11
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	1ad3      	subs	r3, r2, r3
 800ba0c:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d009      	beq.n	800ba28 <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	fbb3 f2f2 	udiv	r2, r3, r2
 800ba1c:	68b9      	ldr	r1, [r7, #8]
 800ba1e:	fb01 f202 	mul.w	r2, r1, r2
 800ba22:	1a9b      	subs	r3, r3, r2
 800ba24:	60fb      	str	r3, [r7, #12]
 800ba26:	e001      	b.n	800ba2c <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	b29a      	uxth	r2, r3
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800ba36:	bf00      	nop
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b084      	sub	sp, #16
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
 800ba46:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800ba50:	6838      	ldr	r0, [r7, #0]
 800ba52:	f000 fb82 	bl	800c15a <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7ff ff7a 	bl	800b956 <VL53LX_isqrt>
 800ba62:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800ba64:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	fb02 f303 	mul.w	r3, r2, r3
 800ba6e:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	3307      	adds	r3, #7
 800ba74:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	111b      	asrs	r3, r3, #4
 800ba7a:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	4413      	add	r3, r2
 800ba86:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	2200      	movs	r2, #0
 800ba94:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800ba98:	2300      	movs	r3, #0
 800ba9a:	73fb      	strb	r3, [r7, #15]
 800ba9c:	e01e      	b.n	800badc <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800ba9e:	7bfa      	ldrb	r2, [r7, #15]
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	3206      	adds	r2, #6
 800baa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	429a      	cmp	r2, r3
 800baac:	dd13      	ble.n	800bad6 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bab4:	7bf9      	ldrb	r1, [r7, #15]
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	3106      	adds	r1, #6
 800baba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800babe:	441a      	add	r2, r3
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800bacc:	3301      	adds	r3, #1
 800bace:	b2da      	uxtb	r2, r3
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
 800bad8:	3301      	adds	r3, #1
 800bada:	73fb      	strb	r3, [r7, #15]
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	7a9b      	ldrb	r3, [r3, #10]
 800bae0:	7bfa      	ldrb	r2, [r7, #15]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d3db      	bcc.n	800ba9e <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800baec:	2b00      	cmp	r3, #0
 800baee:	d01c      	beq.n	800bb2a <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53LX_p_028 =
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800bb02:	683a      	ldr	r2, [r7, #0]
 800bb04:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800bb08:	0852      	lsrs	r2, r2, #1
 800bb0a:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800bb0c:	441a      	add	r2, r3
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53LX_p_028 /=
 800bb20:	fb93 f2f2 	sdiv	r2, r3, r2
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800bb2a:	bf00      	nop
 800bb2c:	3710      	adds	r7, #16
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bb32:	b480      	push	{r7}
 800bb34:	b085      	sub	sp, #20
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800bb42:	2300      	movs	r3, #0
 800bb44:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	7b1b      	ldrb	r3, [r3, #12]
 800bb4a:	f003 0307 	and.w	r3, r3, #7
 800bb4e:	2b07      	cmp	r3, #7
 800bb50:	d13a      	bne.n	800bbc8 <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800bb52:	2300      	movs	r3, #0
 800bb54:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800bb56:	2300      	movs	r3, #0
 800bb58:	73bb      	strb	r3, [r7, #14]
 800bb5a:	e01f      	b.n	800bb9c <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800bb5c:	7bbb      	ldrb	r3, [r7, #14]
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	4413      	add	r3, r2
 800bb62:	7b1b      	ldrb	r3, [r3, #12]
 800bb64:	f003 0307 	and.w	r3, r3, #7
 800bb68:	2b07      	cmp	r3, #7
 800bb6a:	d014      	beq.n	800bb96 <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800bb6c:	7bba      	ldrb	r2, [r7, #14]
 800bb6e:	7b7b      	ldrb	r3, [r7, #13]
 800bb70:	6879      	ldr	r1, [r7, #4]
 800bb72:	440a      	add	r2, r1
 800bb74:	7b11      	ldrb	r1, [r2, #12]
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	4413      	add	r3, r2
 800bb7a:	460a      	mov	r2, r1
 800bb7c:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800bb7e:	7bba      	ldrb	r2, [r7, #14]
 800bb80:	7b7b      	ldrb	r3, [r7, #13]
 800bb82:	6879      	ldr	r1, [r7, #4]
 800bb84:	440a      	add	r2, r1
 800bb86:	7c91      	ldrb	r1, [r2, #18]
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	460a      	mov	r2, r1
 800bb8e:	749a      	strb	r2, [r3, #18]
				i++;
 800bb90:	7b7b      	ldrb	r3, [r7, #13]
 800bb92:	3301      	adds	r3, #1
 800bb94:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800bb96:	7bbb      	ldrb	r3, [r7, #14]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	73bb      	strb	r3, [r7, #14]
 800bb9c:	7bbb      	ldrb	r3, [r7, #14]
 800bb9e:	2b05      	cmp	r3, #5
 800bba0:	d9dc      	bls.n	800bb5c <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800bba2:	7b7b      	ldrb	r3, [r7, #13]
 800bba4:	73bb      	strb	r3, [r7, #14]
 800bba6:	e00c      	b.n	800bbc2 <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800bba8:	7bbb      	ldrb	r3, [r7, #14]
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	4413      	add	r3, r2
 800bbae:	2210      	movs	r2, #16
 800bbb0:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800bbb2:	7bbb      	ldrb	r3, [r7, #14]
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	2200      	movs	r2, #0
 800bbba:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800bbbc:	7bbb      	ldrb	r3, [r7, #14]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	73bb      	strb	r3, [r7, #14]
 800bbc2:	7bbb      	ldrb	r3, [r7, #14]
 800bbc4:	2b05      	cmp	r3, #5
 800bbc6:	d9ef      	bls.n	800bba8 <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	7adb      	ldrb	r3, [r3, #11]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d023      	beq.n	800bc18 <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	7adb      	ldrb	r3, [r3, #11]
 800bbd4:	73fb      	strb	r3, [r7, #15]
 800bbd6:	e00f      	b.n	800bbf8 <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800bbd8:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	7ad2      	ldrb	r2, [r2, #11]
 800bbe0:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	3106      	adds	r1, #6
 800bbe6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	3206      	adds	r2, #6
 800bbee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800bbf2:	7bfb      	ldrb	r3, [r7, #15]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	73fb      	strb	r3, [r7, #15]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800bbfc:	7bfa      	ldrb	r2, [r7, #15]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d3ea      	bcc.n	800bbd8 <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800bc0a:	1ad3      	subs	r3, r2, r3
 800bc0c:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	72da      	strb	r2, [r3, #11]
	}
}
 800bc18:	bf00      	nop
 800bc1a:	3714      	adds	r7, #20
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800bc32:	2300      	movs	r3, #0
 800bc34:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800bc36:	88fb      	ldrh	r3, [r7, #6]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7ff fd92 	bl	800b762 <VL53LX_calc_pll_period_us>
 800bc3e:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800bc44:	f249 2257 	movw	r2, #37463	; 0x9257
 800bc48:	fb02 f303 	mul.w	r3, r2, r3
 800bc4c:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bc54:	0c1b      	lsrs	r3, r3, #16
 800bc56:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800bc58:	68bb      	ldr	r3, [r7, #8]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800bc62:	b480      	push	{r7}
 800bc64:	b087      	sub	sp, #28
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
 800bc6a:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800bc70:	2307      	movs	r3, #7
 800bc72:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800bc74:	2300      	movs	r3, #0
 800bc76:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc7e:	db03      	blt.n	800bc88 <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800bc80:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800bc84:	617b      	str	r3, [r7, #20]
 800bc86:	e004      	b.n	800bc92 <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	dd01      	ble.n	800bc92 <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc98:	dd02      	ble.n	800bca0 <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800bc9a:	2303      	movs	r3, #3
 800bc9c:	613b      	str	r3, [r7, #16]
 800bc9e:	e001      	b.n	800bca4 <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800bca0:	2307      	movs	r3, #7
 800bca2:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d009      	beq.n	800bcbe <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800bcaa:	697a      	ldr	r2, [r7, #20]
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	409a      	lsls	r2, r3
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	085b      	lsrs	r3, r3, #1
 800bcb4:	441a      	add	r2, r3
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcbc:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bcc4:	dd02      	ble.n	800bccc <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	011b      	lsls	r3, r3, #4
 800bcca:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcd2:	d302      	bcc.n	800bcda <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800bcd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcd8:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800bcde:	89fb      	ldrh	r3, [r7, #14]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	371c      	adds	r7, #28
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b087      	sub	sp, #28
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	603b      	str	r3, [r7, #0]
 800bcf8:	4613      	mov	r3, r2
 800bcfa:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800bd00:	2300      	movs	r3, #0
 800bd02:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800bd04:	88fb      	ldrh	r3, [r7, #6]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d010      	beq.n	800bd2c <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	021a      	lsls	r2, r3, #8
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	fa02 f303 	lsl.w	r3, r2, r3
 800bd14:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800bd16:	88fb      	ldrh	r3, [r7, #6]
 800bd18:	085b      	lsrs	r3, r3, #1
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800bd22:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800bd24:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd28:	617b      	str	r3, [r7, #20]
 800bd2a:	e004      	b.n	800bd36 <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	fa02 f303 	lsl.w	r3, r2, r3
 800bd34:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800bd36:	697a      	ldr	r2, [r7, #20]
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d901      	bls.n	800bd42 <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800bd46:	8a7b      	ldrh	r3, [r7, #18]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	371c      	adds	r7, #28
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800bd54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd56:	b089      	sub	sp, #36	; 0x24
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	4606      	mov	r6, r0
 800bd5c:	4608      	mov	r0, r1
 800bd5e:	4611      	mov	r1, r2
 800bd60:	461a      	mov	r2, r3
 800bd62:	4633      	mov	r3, r6
 800bd64:	80fb      	strh	r3, [r7, #6]
 800bd66:	4603      	mov	r3, r0
 800bd68:	80bb      	strh	r3, [r7, #4]
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	807b      	strh	r3, [r7, #2]
 800bd6e:	4613      	mov	r3, r2
 800bd70:	707b      	strb	r3, [r7, #1]


	uint32_t    pll_period_us = 0;
 800bd72:	2300      	movs	r3, #0
 800bd74:	61bb      	str	r3, [r7, #24]
	int64_t     tmp_long_int  = 0;
 800bd76:	f04f 0200 	mov.w	r2, #0
 800bd7a:	f04f 0300 	mov.w	r3, #0
 800bd7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int32_t     range_mm      = 0;
 800bd82:	2300      	movs	r3, #0
 800bd84:	61fb      	str	r3, [r7, #28]
	int32_t     range_mm_10   = 0;
 800bd86:	2300      	movs	r3, #0
 800bd88:	60fb      	str	r3, [r7, #12]



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800bd8a:	88fb      	ldrh	r3, [r7, #6]
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7ff fce8 	bl	800b762 <VL53LX_calc_pll_period_us>
 800bd92:	61b8      	str	r0, [r7, #24]



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800bd94:	88b8      	ldrh	r0, [r7, #4]
 800bd96:	f04f 0100 	mov.w	r1, #0
 800bd9a:	887a      	ldrh	r2, [r7, #2]
 800bd9c:	f04f 0300 	mov.w	r3, #0
 800bda0:	1a84      	subs	r4, r0, r2
 800bda2:	eb61 0503 	sbc.w	r5, r1, r3
 800bda6:	e9c7 4504 	strd	r4, r5, [r7, #16]



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	461a      	mov	r2, r3
 800bdae:	f04f 0300 	mov.w	r3, #0
 800bdb2:	6979      	ldr	r1, [r7, #20]
 800bdb4:	fb02 f001 	mul.w	r0, r2, r1
 800bdb8:	6939      	ldr	r1, [r7, #16]
 800bdba:	fb03 f101 	mul.w	r1, r3, r1
 800bdbe:	4401      	add	r1, r0
 800bdc0:	6938      	ldr	r0, [r7, #16]
 800bdc2:	fba0 2302 	umull	r2, r3, r0, r2
 800bdc6:	4419      	add	r1, r3
 800bdc8:	460b      	mov	r3, r1
 800bdca:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800bdce:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800bdd2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bdd6:	2a00      	cmp	r2, #0
 800bdd8:	f173 0100 	sbcs.w	r1, r3, #0
 800bddc:	da06      	bge.n	800bdec <VL53LX_range_maths+0x98>
 800bdde:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bde2:	f04f 0100 	mov.w	r1, #0
 800bde6:	1812      	adds	r2, r2, r0
 800bde8:	eb41 0303 	adc.w	r3, r1, r3
 800bdec:	f04f 0000 	mov.w	r0, #0
 800bdf0:	f04f 0100 	mov.w	r1, #0
 800bdf4:	0a50      	lsrs	r0, r2, #9
 800bdf6:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800bdfa:	1259      	asrs	r1, r3, #9
 800bdfc:	e9c7 0104 	strd	r0, r1, [r7, #16]



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	f249 2257 	movw	r2, #37463	; 0x9257
 800be06:	fb02 f203 	mul.w	r2, r2, r3
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	2100      	movs	r1, #0
 800be0e:	fb01 f303 	mul.w	r3, r1, r3
 800be12:	18d1      	adds	r1, r2, r3
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	f249 2257 	movw	r2, #37463	; 0x9257
 800be1a:	fba3 2302 	umull	r2, r3, r3, r2
 800be1e:	4419      	add	r1, r3
 800be20:	460b      	mov	r3, r1
 800be22:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800be26:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800be2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800be2e:	2a00      	cmp	r2, #0
 800be30:	f173 0100 	sbcs.w	r1, r3, #0
 800be34:	da05      	bge.n	800be42 <VL53LX_range_maths+0xee>
 800be36:	4832      	ldr	r0, [pc, #200]	; (800bf00 <VL53LX_range_maths+0x1ac>)
 800be38:	f04f 0100 	mov.w	r1, #0
 800be3c:	1812      	adds	r2, r2, r0
 800be3e:	eb41 0303 	adc.w	r3, r1, r3
 800be42:	f04f 0000 	mov.w	r0, #0
 800be46:	f04f 0100 	mov.w	r1, #0
 800be4a:	0d90      	lsrs	r0, r2, #22
 800be4c:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800be50:	1599      	asrs	r1, r3, #22
 800be52:	e9c7 0104 	strd	r0, r1, [r7, #16]


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800be5a:	4413      	add	r3, r2
 800be5c:	61fb      	str	r3, [r7, #28]


	range_mm *= gain_factor;
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be62:	fb02 f303 	mul.w	r3, r2, r3
 800be66:	61fb      	str	r3, [r7, #28]
	range_mm += 0x0400;
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be6e:	61fb      	str	r3, [r7, #28]
	range_mm /= 0x0800;
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	2b00      	cmp	r3, #0
 800be74:	da01      	bge.n	800be7a <VL53LX_range_maths+0x126>
 800be76:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800be7a:	12db      	asrs	r3, r3, #11
 800be7c:	61fb      	str	r3, [r7, #28]


	if (fractional_bits == 0) {
 800be7e:	787b      	ldrb	r3, [r7, #1]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d130      	bne.n	800bee6 <VL53LX_range_maths+0x192>
		range_mm_10 = range_mm * 10;
 800be84:	69fa      	ldr	r2, [r7, #28]
 800be86:	4613      	mov	r3, r2
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	4413      	add	r3, r2
 800be8c:	005b      	lsls	r3, r3, #1
 800be8e:	60fb      	str	r3, [r7, #12]
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2b00      	cmp	r3, #0
 800be94:	da00      	bge.n	800be98 <VL53LX_range_maths+0x144>
 800be96:	3303      	adds	r3, #3
 800be98:	109b      	asrs	r3, r3, #2
 800be9a:	60fb      	str	r3, [r7, #12]
		if ((range_mm_10 % 10) < 5)
 800be9c:	68f9      	ldr	r1, [r7, #12]
 800be9e:	4b19      	ldr	r3, [pc, #100]	; (800bf04 <VL53LX_range_maths+0x1b0>)
 800bea0:	fb83 2301 	smull	r2, r3, r3, r1
 800bea4:	109a      	asrs	r2, r3, #2
 800bea6:	17cb      	asrs	r3, r1, #31
 800bea8:	1ad2      	subs	r2, r2, r3
 800beaa:	4613      	mov	r3, r2
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	4413      	add	r3, r2
 800beb0:	005b      	lsls	r3, r3, #1
 800beb2:	1aca      	subs	r2, r1, r3
 800beb4:	2a04      	cmp	r2, #4
 800beb6:	dc09      	bgt.n	800becc <VL53LX_range_maths+0x178>
			range_mm = (int16_t)(range_mm_10 / 10);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	4a12      	ldr	r2, [pc, #72]	; (800bf04 <VL53LX_range_maths+0x1b0>)
 800bebc:	fb82 1203 	smull	r1, r2, r2, r3
 800bec0:	1092      	asrs	r2, r2, #2
 800bec2:	17db      	asrs	r3, r3, #31
 800bec4:	1ad3      	subs	r3, r2, r3
 800bec6:	b21b      	sxth	r3, r3
 800bec8:	61fb      	str	r3, [r7, #28]
 800beca:	e014      	b.n	800bef6 <VL53LX_range_maths+0x1a2>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	4a0d      	ldr	r2, [pc, #52]	; (800bf04 <VL53LX_range_maths+0x1b0>)
 800bed0:	fb82 1203 	smull	r1, r2, r2, r3
 800bed4:	1092      	asrs	r2, r2, #2
 800bed6:	17db      	asrs	r3, r3, #31
 800bed8:	1ad3      	subs	r3, r2, r3
 800beda:	b29b      	uxth	r3, r3
 800bedc:	3301      	adds	r3, #1
 800bede:	b29b      	uxth	r3, r3
 800bee0:	b21b      	sxth	r3, r3
 800bee2:	61fb      	str	r3, [r7, #28]
 800bee4:	e007      	b.n	800bef6 <VL53LX_range_maths+0x1a2>
	} else if (fractional_bits == 1)
 800bee6:	787b      	ldrb	r3, [r7, #1]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d104      	bne.n	800bef6 <VL53LX_range_maths+0x1a2>
		range_mm = range_mm / (0x01 << 1);
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	0fda      	lsrs	r2, r3, #31
 800bef0:	4413      	add	r3, r2
 800bef2:	105b      	asrs	r3, r3, #1
 800bef4:	61fb      	str	r3, [r7, #28]

	return range_mm;
 800bef6:	69fb      	ldr	r3, [r7, #28]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3724      	adds	r7, #36	; 0x24
 800befc:	46bd      	mov	sp, r7
 800befe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf00:	003fffff 	.word	0x003fffff
 800bf04:	66666667 	.word	0x66666667

0800bf08 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b085      	sub	sp, #20
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	4603      	mov	r3, r0
 800bf10:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800bf12:	2300      	movs	r3, #0
 800bf14:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800bf16:	79fb      	ldrb	r3, [r7, #7]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	005b      	lsls	r3, r3, #1
 800bf1e:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800bf20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3714      	adds	r7, #20
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800bf2e:	b480      	push	{r7}
 800bf30:	b083      	sub	sp, #12
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53LX_p_015 =
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	781a      	ldrb	r2, [r3, #0]
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	7a5a      	ldrb	r2, [r3, #9]
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	685a      	ldr	r2, [r3, #4]
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	605a      	str	r2, [r3, #4]
}
 800bf9e:	bf00      	nop
 800bfa0:	370c      	adds	r7, #12
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr

0800bfaa <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800bfaa:	b480      	push	{r7}
 800bfac:	b087      	sub	sp, #28
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	60f8      	str	r0, [r7, #12]
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	607a      	str	r2, [r7, #4]
 800bfb6:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2203      	movs	r2, #3
 800bfc0:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2203      	movs	r2, #3
 800bfc6:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2218      	movs	r2, #24
 800bfde:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800bfe0:	897b      	ldrh	r3, [r7, #10]
 800bfe2:	b2da      	uxtb	r2, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2200      	movs	r2, #0
 800c002:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2200      	movs	r2, #0
 800c01a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2200      	movs	r2, #0
 800c032:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53LX_p_005                       = 0;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53LX_p_015                = 0;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2200      	movs	r2, #0
 800c04a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2200      	movs	r2, #0
 800c062:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2200      	movs	r2, #0
 800c06a:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53LX_p_028             = 0;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2200      	movs	r2, #0
 800c07a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c07e:	2300      	movs	r3, #0
 800c080:	82fb      	strh	r3, [r7, #22]
 800c082:	e009      	b.n	800c098 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800c084:	8afb      	ldrh	r3, [r7, #22]
 800c086:	8afa      	ldrh	r2, [r7, #22]
 800c088:	b2d1      	uxtb	r1, r2
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	4413      	add	r3, r2
 800c08e:	460a      	mov	r2, r1
 800c090:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c092:	8afb      	ldrh	r3, [r7, #22]
 800c094:	3301      	adds	r3, #1
 800c096:	82fb      	strh	r3, [r7, #22]
 800c098:	8afb      	ldrh	r3, [r7, #22]
 800c09a:	2b05      	cmp	r3, #5
 800c09c:	d9f2      	bls.n	800c084 <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c09e:	2300      	movs	r3, #0
 800c0a0:	82fb      	strh	r3, [r7, #22]
 800c0a2:	e007      	b.n	800c0b4 <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800c0a4:	8afb      	ldrh	r3, [r7, #22]
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	4413      	add	r3, r2
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c0ae:	8afb      	ldrh	r3, [r7, #22]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	82fb      	strh	r3, [r7, #22]
 800c0b4:	8afb      	ldrh	r3, [r7, #22]
 800c0b6:	2b05      	cmp	r3, #5
 800c0b8:	d9f4      	bls.n	800c0a4 <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	82fb      	strh	r3, [r7, #22]
 800c0be:	e013      	b.n	800c0e8 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800c0c0:	8afa      	ldrh	r2, [r7, #22]
 800c0c2:	897b      	ldrh	r3, [r7, #10]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d206      	bcs.n	800c0d6 <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800c0c8:	8afa      	ldrh	r2, [r7, #22]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	3206      	adds	r2, #6
 800c0ce:	68f9      	ldr	r1, [r7, #12]
 800c0d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c0d4:	e005      	b.n	800c0e2 <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800c0d6:	8afa      	ldrh	r2, [r7, #22]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	3206      	adds	r2, #6
 800c0dc:	2100      	movs	r1, #0
 800c0de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800c0e2:	8afb      	ldrh	r3, [r7, #22]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	82fb      	strh	r3, [r7, #22]
 800c0e8:	8afb      	ldrh	r3, [r7, #22]
 800c0ea:	2b17      	cmp	r3, #23
 800c0ec:	d9e8      	bls.n	800c0c0 <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800c0ee:	bf00      	nop
 800c0f0:	bf00      	nop
 800c0f2:	371c      	adds	r7, #28
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b085      	sub	sp, #20
 800c100:	af00      	add	r7, sp, #0
 800c102:	4603      	mov	r3, r0
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	607a      	str	r2, [r7, #4]
 800c108:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800c10a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	da10      	bge.n	800c134 <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800c112:	7bfb      	ldrb	r3, [r7, #15]
 800c114:	43db      	mvns	r3, r3
 800c116:	b2db      	uxtb	r3, r3
 800c118:	f003 0307 	and.w	r3, r3, #7
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	3308      	adds	r3, #8
 800c120:	b2da      	uxtb	r2, r3
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800c126:	7bfb      	ldrb	r3, [r7, #15]
 800c128:	3b80      	subs	r3, #128	; 0x80
 800c12a:	10db      	asrs	r3, r3, #3
 800c12c:	b2da      	uxtb	r2, r3
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800c132:	e00c      	b.n	800c14e <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800c134:	7bfb      	ldrb	r3, [r7, #15]
 800c136:	f003 0307 	and.w	r3, r3, #7
 800c13a:	b2da      	uxtb	r2, r3
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800c140:	7bfb      	ldrb	r3, [r7, #15]
 800c142:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800c146:	10db      	asrs	r3, r3, #3
 800c148:	b2da      	uxtb	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	701a      	strb	r2, [r3, #0]
}
 800c14e:	bf00      	nop
 800c150:	3714      	adds	r7, #20
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr

0800c15a <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c15a:	b480      	push	{r7}
 800c15c:	b085      	sub	sp, #20
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800c162:	2300      	movs	r3, #0
 800c164:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800c166:	2300      	movs	r3, #0
 800c168:	73fb      	strb	r3, [r7, #15]
 800c16a:	e02c      	b.n	800c1c6 <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800c16c:	7bfb      	ldrb	r3, [r7, #15]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d009      	beq.n	800c186 <VL53LX_hist_find_min_max_bin_values+0x2c>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c178:	7bf9      	ldrb	r1, [r7, #15]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	3106      	adds	r1, #6
 800c17e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c182:	429a      	cmp	r2, r3
 800c184:	db07      	blt.n	800c196 <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800c186:	7bfa      	ldrb	r2, [r7, #15]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	3206      	adds	r2, #6
 800c18c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800c196:	7bfb      	ldrb	r3, [r7, #15]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d009      	beq.n	800c1b0 <VL53LX_hist_find_min_max_bin_values+0x56>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c1a2:	7bf9      	ldrb	r1, [r7, #15]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	3106      	adds	r1, #6
 800c1a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	dc07      	bgt.n	800c1c0 <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800c1b0:	7bfa      	ldrb	r2, [r7, #15]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	3206      	adds	r2, #6
 800c1b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800c1c0:	7bfb      	ldrb	r3, [r7, #15]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	73fb      	strb	r3, [r7, #15]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	7a9b      	ldrb	r3, [r3, #10]
 800c1ca:	7bfa      	ldrb	r2, [r7, #15]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d3cd      	bcc.n	800c16c <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800c1d0:	bf00      	nop
 800c1d2:	bf00      	nop
 800c1d4:	3714      	adds	r7, #20
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr

0800c1de <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c1de:	b480      	push	{r7}
 800c1e0:	b085      	sub	sp, #20
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	7adb      	ldrb	r3, [r3, #11]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d03a      	beq.n	800c268 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800c204:	2300      	movs	r3, #0
 800c206:	73fb      	strb	r3, [r7, #15]
 800c208:	e00e      	b.n	800c228 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c210:	7bf9      	ldrb	r1, [r7, #15]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	3106      	adds	r1, #6
 800c216:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c21a:	441a      	add	r2, r3
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800c222:	7bfb      	ldrb	r3, [r7, #15]
 800c224:	3301      	adds	r3, #1
 800c226:	73fb      	strb	r3, [r7, #15]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	7adb      	ldrb	r3, [r3, #11]
 800c22c:	7bfa      	ldrb	r2, [r7, #15]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d3eb      	bcc.n	800c20a <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	7ad2      	ldrb	r2, [r2, #11]
 800c248:	0852      	lsrs	r2, r2, #1
 800c24a:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800c24c:	441a      	add	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800c25e:	fb93 f2f2 	sdiv	r2, r3, r2
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800c268:	bf00      	nop
 800c26a:	3714      	adds	r7, #20
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800c274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c278:	b096      	sub	sp, #88	; 0x58
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6339      	str	r1, [r7, #48]	; 0x30
 800c27e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c280:	62bb      	str	r3, [r7, #40]	; 0x28
 800c282:	4603      	mov	r3, r0
 800c284:	86fb      	strh	r3, [r7, #54]	; 0x36



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800c286:	2300      	movs	r3, #0
 800c288:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	uint32_t    pll_period_us       = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t    periods_elapsed     = 0;
 800c290:	2300      	movs	r3, #0
 800c292:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint32_t    tmp32               = 0;
 800c294:	2300      	movs	r3, #0
 800c296:	657b      	str	r3, [r7, #84]	; 0x54
	uint64_t    tmp64               = 0;
 800c298:	f04f 0200 	mov.w	r2, #0
 800c29c:	f04f 0300 	mov.w	r3, #0
 800c2a0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint32_t    amb_thres_delta     = 0;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	63bb      	str	r3, [r7, #56]	; 0x38

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800c2a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800c2ae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800c2b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800c2ba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c2bc:	2300      	movs	r3, #0
 800c2be:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800c2c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800c2c6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800c2cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53LX_p_022            = 0;
 800c2d2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800c2d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c2da:	2300      	movs	r3, #0
 800c2dc:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800c2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	f000 80ab 	beq.w	800c440 <VL53LX_f_001+0x1cc>
		(pbins->total_periods_elapsed      != 0)) {
 800c2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	f000 80a5 	beq.w	800c440 <VL53LX_f_001+0x1cc>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800c2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7ff fa30 	bl	800b762 <VL53LX_calc_pll_period_us>
 800c302:	6438      	str	r0, [r7, #64]	; 0x40



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800c304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c30a:	3301      	adds	r3, #1
 800c30c:	63fb      	str	r3, [r7, #60]	; 0x3c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800c30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c314:	2110      	movs	r1, #16
 800c316:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c318:	f7ff fa3a 	bl	800b790 <VL53LX_duration_maths>
 800c31c:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800c31e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c320:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800c322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c324:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4619      	mov	r1, r3
 800c32e:	4610      	mov	r0, r2
 800c330:	f7ff fc97 	bl	800bc62 <VL53LX_rate_maths>
 800c334:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800c336:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c338:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800c33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33c:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800c340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c342:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800c346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	461a      	mov	r2, r3
 800c34c:	f7ff fa7a 	bl	800b844 <VL53LX_events_per_spad_maths>
 800c350:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800c352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c354:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800c356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c358:	8adb      	ldrh	r3, [r3, #22]
 800c35a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c35c:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800c35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c360:	8adb      	ldrh	r3, [r3, #22]
 800c362:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c364:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800c366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c368:	695b      	ldr	r3, [r3, #20]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d068      	beq.n	800c440 <VL53LX_f_001+0x1cc>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800c36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c370:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800c372:	b29a      	uxth	r2, r3
 800c374:	f04f 0300 	mov.w	r3, #0
 800c378:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64  *= 1000;
 800c37c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800c380:	4622      	mov	r2, r4
 800c382:	462b      	mov	r3, r5
 800c384:	f04f 0000 	mov.w	r0, #0
 800c388:	f04f 0100 	mov.w	r1, #0
 800c38c:	0159      	lsls	r1, r3, #5
 800c38e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c392:	0150      	lsls	r0, r2, #5
 800c394:	4602      	mov	r2, r0
 800c396:	460b      	mov	r3, r1
 800c398:	1b12      	subs	r2, r2, r4
 800c39a:	eb63 0305 	sbc.w	r3, r3, r5
 800c39e:	f04f 0000 	mov.w	r0, #0
 800c3a2:	f04f 0100 	mov.w	r1, #0
 800c3a6:	0099      	lsls	r1, r3, #2
 800c3a8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c3ac:	0090      	lsls	r0, r2, #2
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	1912      	adds	r2, r2, r4
 800c3b4:	eb45 0303 	adc.w	r3, r5, r3
 800c3b8:	f04f 0000 	mov.w	r0, #0
 800c3bc:	f04f 0100 	mov.w	r1, #0
 800c3c0:	00d9      	lsls	r1, r3, #3
 800c3c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c3c6:	00d0      	lsls	r0, r2, #3
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64 <<= (11+1);
 800c3d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c3d4:	f04f 0000 	mov.w	r0, #0
 800c3d8:	f04f 0100 	mov.w	r1, #0
 800c3dc:	0319      	lsls	r1, r3, #12
 800c3de:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800c3e2:	0310      	lsls	r0, r2, #12
 800c3e4:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
			tmp32 = pdata->VL53LX_p_033/2;
 800c3e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3ea:	695b      	ldr	r3, [r3, #20]
 800c3ec:	085b      	lsrs	r3, r3, #1
 800c3ee:	657b      	str	r3, [r7, #84]	; 0x54
			tmp64 += (uint64_t)tmp32;
 800c3f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f04f 0100 	mov.w	r1, #0
 800c3f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c3fc:	eb12 0800 	adds.w	r8, r2, r0
 800c400:	eb43 0901 	adc.w	r9, r3, r1
 800c404:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
			tmp64 = do_division_u(tmp64,
 800c408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c40a:	695b      	ldr	r3, [r3, #20]
 800c40c:	461a      	mov	r2, r3
 800c40e:	f04f 0300 	mov.w	r3, #0
 800c412:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c416:	f7f3 ff83 	bl	8000320 <__aeabi_uldivmod>
 800c41a:	4602      	mov	r2, r0
 800c41c:	460b      	mov	r3, r1
 800c41e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800c422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c424:	8adb      	ldrh	r3, [r3, #22]
 800c426:	b298      	uxth	r0, r3
 800c428:	f04f 0100 	mov.w	r1, #0
 800c42c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c430:	428b      	cmp	r3, r1
 800c432:	bf08      	it	eq
 800c434:	4282      	cmpeq	r2, r0
 800c436:	d203      	bcs.n	800c440 <VL53LX_f_001+0x1cc>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800c438:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c43c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c43e:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800c440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c442:	881b      	ldrh	r3, [r3, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	f000 8203 	beq.w	800c850 <VL53LX_f_001+0x5dc>
		(pbins->VL53LX_p_015        != 0) &&
 800c44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800c450:	2b00      	cmp	r3, #0
 800c452:	f000 81fd 	beq.w	800c850 <VL53LX_f_001+0x5dc>
		(pcal->ref_reflectance_pc          != 0) &&
 800c456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c458:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	f000 81f8 	beq.w	800c850 <VL53LX_f_001+0x5dc>
		(pbins->total_periods_elapsed      != 0)) {
 800c460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800c466:	2b00      	cmp	r3, #0
 800c468:	f000 81f2 	beq.w	800c850 <VL53LX_f_001+0x5dc>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800c46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46e:	885b      	ldrh	r3, [r3, #2]
 800c470:	b29a      	uxth	r2, r3
 800c472:	f04f 0300 	mov.w	r3, #0
 800c476:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64 *= (1000 * 256);
 800c47a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800c47e:	4622      	mov	r2, r4
 800c480:	462b      	mov	r3, r5
 800c482:	f04f 0000 	mov.w	r0, #0
 800c486:	f04f 0100 	mov.w	r1, #0
 800c48a:	0159      	lsls	r1, r3, #5
 800c48c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c490:	0150      	lsls	r0, r2, #5
 800c492:	4602      	mov	r2, r0
 800c494:	460b      	mov	r3, r1
 800c496:	1b12      	subs	r2, r2, r4
 800c498:	eb63 0305 	sbc.w	r3, r3, r5
 800c49c:	f04f 0000 	mov.w	r0, #0
 800c4a0:	f04f 0100 	mov.w	r1, #0
 800c4a4:	0099      	lsls	r1, r3, #2
 800c4a6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c4aa:	0090      	lsls	r0, r2, #2
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	1912      	adds	r2, r2, r4
 800c4b2:	eb45 0303 	adc.w	r3, r5, r3
 800c4b6:	f04f 0000 	mov.w	r0, #0
 800c4ba:	f04f 0100 	mov.w	r1, #0
 800c4be:	02d9      	lsls	r1, r3, #11
 800c4c0:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800c4c4:	02d0      	lsls	r0, r2, #11
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp32  = pcal->ref__actual_effective_spads/2;
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d0:	881b      	ldrh	r3, [r3, #0]
 800c4d2:	085b      	lsrs	r3, r3, #1
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	657b      	str	r3, [r7, #84]	; 0x54
		tmp64 += (uint64_t)tmp32;
 800c4d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f04f 0100 	mov.w	r1, #0
 800c4e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c4e4:	eb12 0a00 	adds.w	sl, r2, r0
 800c4e8:	eb43 0b01 	adc.w	fp, r3, r1
 800c4ec:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800c4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f2:	881b      	ldrh	r3, [r3, #0]
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	f04f 0300 	mov.w	r3, #0
 800c4fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c4fe:	f7f3 ff0f 	bl	8000320 <__aeabi_uldivmod>
 800c502:	4602      	mov	r2, r0
 800c504:	460b      	mov	r3, r1
 800c506:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800c50a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c50c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c50e:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800c510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c512:	691b      	ldr	r3, [r3, #16]
 800c514:	011a      	lsls	r2, r3, #4
 800c516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c518:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c51a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	461a      	mov	r2, r3
 800c520:	f04f 0300 	mov.w	r3, #0
 800c524:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800c528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c52a:	695b      	ldr	r3, [r3, #20]
 800c52c:	461a      	mov	r2, r3
 800c52e:	f04f 0300 	mov.w	r3, #0
 800c532:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c534:	fb02 f001 	mul.w	r0, r2, r1
 800c538:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c53a:	fb03 f101 	mul.w	r1, r3, r1
 800c53e:	4401      	add	r1, r0
 800c540:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c542:	fba0 2302 	umull	r2, r3, r0, r2
 800c546:	4419      	add	r1, r3
 800c548:	460b      	mov	r3, r1
 800c54a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c54e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c552:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c554:	8b5b      	ldrh	r3, [r3, #26]
 800c556:	b29a      	uxth	r2, r3
 800c558:	f04f 0300 	mov.w	r3, #0
 800c55c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c55e:	fb02 f001 	mul.w	r0, r2, r1
 800c562:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c564:	fb03 f101 	mul.w	r1, r3, r1
 800c568:	4401      	add	r1, r0
 800c56a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c56c:	fba0 2302 	umull	r2, r3, r0, r2
 800c570:	4419      	add	r1, r3
 800c572:	460b      	mov	r3, r1
 800c574:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c578:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800c57c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c580:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800c584:	6239      	str	r1, [r7, #32]
 800c586:	f143 0300 	adc.w	r3, r3, #0
 800c58a:	627b      	str	r3, [r7, #36]	; 0x24
 800c58c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c590:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800c594:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c598:	f04f 0200 	mov.w	r2, #0
 800c59c:	f04f 0300 	mov.w	r3, #0
 800c5a0:	0cc2      	lsrs	r2, r0, #19
 800c5a2:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800c5a6:	0ccb      	lsrs	r3, r1, #19
 800c5a8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  +=  500;
 800c5ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c5b0:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800c5b4:	61b9      	str	r1, [r7, #24]
 800c5b6:	f143 0300 	adc.w	r3, r3, #0
 800c5ba:	61fb      	str	r3, [r7, #28]
 800c5bc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c5c0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64   = do_division_u(tmp64, 1000);
 800c5c4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c5c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c5cc:	f04f 0300 	mov.w	r3, #0
 800c5d0:	f7f3 fea6 	bl	8000320 <__aeabi_uldivmod>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800c5dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c5e0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c5e4:	f04f 0100 	mov.w	r1, #0
 800c5e8:	4299      	cmp	r1, r3
 800c5ea:	bf08      	it	eq
 800c5ec:	4290      	cmpeq	r0, r2
 800c5ee:	d205      	bcs.n	800c5fc <VL53LX_f_001+0x388>
			tmp64 = 0x00FFFFFF;
 800c5f0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c5f4:	f04f 0300 	mov.w	r3, #0
 800c5f8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800c5fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c600:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c602:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	461a      	mov	r2, r3
 800c608:	f04f 0300 	mov.w	r3, #0
 800c60c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800c610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	461a      	mov	r2, r3
 800c616:	f04f 0300 	mov.w	r3, #0
 800c61a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c61c:	fb02 f001 	mul.w	r0, r2, r1
 800c620:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c622:	fb03 f101 	mul.w	r1, r3, r1
 800c626:	4401      	add	r1, r0
 800c628:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c62a:	fba0 2302 	umull	r2, r3, r0, r2
 800c62e:	4419      	add	r1, r3
 800c630:	460b      	mov	r3, r1
 800c632:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c636:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c63a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c63c:	8b5b      	ldrh	r3, [r3, #26]
 800c63e:	b29a      	uxth	r2, r3
 800c640:	f04f 0300 	mov.w	r3, #0
 800c644:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c646:	fb02 f001 	mul.w	r0, r2, r1
 800c64a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c64c:	fb03 f101 	mul.w	r1, r3, r1
 800c650:	4401      	add	r1, r0
 800c652:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c654:	fba0 2302 	umull	r2, r3, r0, r2
 800c658:	4419      	add	r1, r3
 800c65a:	460b      	mov	r3, r1
 800c65c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c660:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800c664:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c668:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800c66c:	6139      	str	r1, [r7, #16]
 800c66e:	f143 0300 	adc.w	r3, r3, #0
 800c672:	617b      	str	r3, [r7, #20]
 800c674:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c678:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800c67c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c680:	f04f 0200 	mov.w	r2, #0
 800c684:	f04f 0300 	mov.w	r3, #0
 800c688:	0cc2      	lsrs	r2, r0, #19
 800c68a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800c68e:	0ccb      	lsrs	r3, r1, #19
 800c690:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48



		tmp64  *= ((uint64_t)target_reflectance *
 800c694:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 800c696:	f04f 0100 	mov.w	r1, #0
				   (uint64_t)pcal->coverglass_transmission);
 800c69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69c:	891b      	ldrh	r3, [r3, #8]
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	f04f 0300 	mov.w	r3, #0
		tmp64  *= ((uint64_t)target_reflectance *
 800c6a4:	fb02 f501 	mul.w	r5, r2, r1
 800c6a8:	fb00 f403 	mul.w	r4, r0, r3
 800c6ac:	442c      	add	r4, r5
 800c6ae:	fba0 2302 	umull	r2, r3, r0, r2
 800c6b2:	18e1      	adds	r1, r4, r3
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c6b8:	fb02 f001 	mul.w	r0, r2, r1
 800c6bc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c6be:	fb03 f101 	mul.w	r1, r3, r1
 800c6c2:	4401      	add	r1, r0
 800c6c4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c6c6:	fba0 2302 	umull	r2, r3, r0, r2
 800c6ca:	4419      	add	r1, r3
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c6d2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800c6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d8:	88db      	ldrh	r3, [r3, #6]
 800c6da:	b298      	uxth	r0, r3
 800c6dc:	f04f 0100 	mov.w	r1, #0
 800c6e0:	f04f 0200 	mov.w	r2, #0
 800c6e4:	f04f 0300 	mov.w	r3, #0
 800c6e8:	01cb      	lsls	r3, r1, #7
 800c6ea:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 800c6ee:	01c2      	lsls	r2, r0, #7
 800c6f0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c6f4:	1884      	adds	r4, r0, r2
 800c6f6:	60bc      	str	r4, [r7, #8]
 800c6f8:	eb41 0303 	adc.w	r3, r1, r3
 800c6fc:	60fb      	str	r3, [r7, #12]
 800c6fe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c702:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800c706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c708:	88db      	ldrh	r3, [r3, #6]
 800c70a:	b298      	uxth	r0, r3
 800c70c:	f04f 0100 	mov.w	r1, #0
 800c710:	f04f 0200 	mov.w	r2, #0
 800c714:	f04f 0300 	mov.w	r3, #0
 800c718:	020b      	lsls	r3, r1, #8
 800c71a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c71e:	0202      	lsls	r2, r0, #8
 800c720:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c724:	f7f3 fdfc 	bl	8000320 <__aeabi_uldivmod>
 800c728:	4602      	mov	r2, r0
 800c72a:	460b      	mov	r3, r1
 800c72c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800c730:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c734:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800c738:	6039      	str	r1, [r7, #0]
 800c73a:	f143 0300 	adc.w	r3, r3, #0
 800c73e:	607b      	str	r3, [r7, #4]
 800c740:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c744:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64, 1000);
 800c748:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c74c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c750:	f04f 0300 	mov.w	r3, #0
 800c754:	f7f3 fde4 	bl	8000320 <__aeabi_uldivmod>
 800c758:	4602      	mov	r2, r0
 800c75a:	460b      	mov	r3, r1
 800c75c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800c760:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c764:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c768:	f04f 0100 	mov.w	r1, #0
 800c76c:	4299      	cmp	r1, r3
 800c76e:	bf08      	it	eq
 800c770:	4290      	cmpeq	r0, r2
 800c772:	d205      	bcs.n	800c780 <VL53LX_f_001+0x50c>
			tmp64 = 0x00FFFFFF;
 800c774:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c778:	f04f 0300 	mov.w	r3, #0
 800c77c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800c780:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c782:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c784:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800c786:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c788:	69db      	ldr	r3, [r3, #28]
 800c78a:	021b      	lsls	r3, r3, #8
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7ff f8e2 	bl	800b956 <VL53LX_isqrt>
 800c792:	6578      	str	r0, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800c794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c796:	785b      	ldrb	r3, [r3, #1]
 800c798:	461a      	mov	r2, r3
 800c79a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c79c:	fb02 f303 	mul.w	r3, r2, r3
 800c7a0:	657b      	str	r3, [r7, #84]	; 0x54



		if (pdata->VL53LX_p_028 <
 800c7a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7a4:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800c7a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7a8:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d20f      	bcs.n	800c7ce <VL53LX_f_001+0x55a>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800c7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800c7b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7b6:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800c7b8:	1ad3      	subs	r3, r2, r3
 800c7ba:	63bb      	str	r3, [r7, #56]	; 0x38


			amb_thres_delta <<= 8;
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7be:	021b      	lsls	r3, r3, #8
 800c7c0:	63bb      	str	r3, [r7, #56]	; 0x38

			if (tmp32 < amb_thres_delta)
 800c7c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d201      	bcs.n	800c7ce <VL53LX_f_001+0x55a>
				tmp32 = amb_thres_delta;
 800c7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7cc:	657b      	str	r3, [r7, #84]	; 0x54
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800c7ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7d0:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800c7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d4:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c7d6:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7da:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c7dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c7de:	f000 f83e 	bl	800c85e <VL53LX_f_002>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800c7e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7e8:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800c7ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7ec:	6a1b      	ldr	r3, [r3, #32]
 800c7ee:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800c7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f2:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7fa:	fb02 f303 	mul.w	r3, r2, r3
 800c7fe:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 += (1 << 3);
 800c800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c802:	3308      	adds	r3, #8
 800c804:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 /= (1 << 4);
 800c806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c808:	091b      	lsrs	r3, r3, #4
 800c80a:	657b      	str	r3, [r7, #84]	; 0x54

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800c80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80e:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800c810:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800c812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c814:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c816:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81a:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c81c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c81e:	f000 f81e 	bl	800c85e <VL53LX_f_002>
 800c822:	4603      	mov	r3, r0
 800c824:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800c826:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c828:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800c82a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c82c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800c830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c832:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800c836:	429a      	cmp	r2, r3
 800c838:	da05      	bge.n	800c846 <VL53LX_f_001+0x5d2>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800c83a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c83c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800c840:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c842:	801a      	strh	r2, [r3, #0]
 800c844:	e004      	b.n	800c850 <VL53LX_f_001+0x5dc>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800c846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c848:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800c84c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c84e:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800c850:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47

}
 800c854:	4618      	mov	r0, r3
 800c856:	3758      	adds	r7, #88	; 0x58
 800c858:	46bd      	mov	sp, r7
 800c85a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c85e <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b086      	sub	sp, #24
 800c862:	af00      	add	r7, sp, #0
 800c864:	60f8      	str	r0, [r7, #12]
 800c866:	60b9      	str	r1, [r7, #8]
 800c868:	607a      	str	r2, [r7, #4]
 800c86a:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800c870:	2300      	movs	r3, #0
 800c872:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	fb03 f303 	mul.w	r3, r3, r3
 800c880:	693a      	ldr	r2, [r7, #16]
 800c882:	4413      	add	r3, r2
 800c884:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800c886:	6938      	ldr	r0, [r7, #16]
 800c888:	f7ff f865 	bl	800b956 <VL53LX_isqrt>
 800c88c:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800c88e:	693a      	ldr	r2, [r7, #16]
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	4413      	add	r3, r2
 800c894:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	011b      	lsls	r3, r3, #4
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7ff f85b 	bl	800b956 <VL53LX_isqrt>
 800c8a0:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	fb02 f303 	mul.w	r3, r2, r3
 800c8aa:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d009      	beq.n	800c8c6 <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800c8b2:	697a      	ldr	r2, [r7, #20]
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	4413      	add	r3, r2
 800c8b8:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	005b      	lsls	r3, r3, #1
 800c8be:	697a      	ldr	r2, [r7, #20]
 800c8c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8c4:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800c8c6:	697b      	ldr	r3, [r7, #20]

}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3718      	adds	r7, #24
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2218      	movs	r2, #24
 800c8e0:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	73fb      	strb	r3, [r7, #15]
 800c906:	e01f      	b.n	800c948 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800c908:	7bfb      	ldrb	r3, [r7, #15]
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	4413      	add	r3, r2
 800c90e:	2200      	movs	r2, #0
 800c910:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800c912:	7bfb      	ldrb	r3, [r7, #15]
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	4413      	add	r3, r2
 800c918:	2200      	movs	r2, #0
 800c91a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800c91e:	7bfb      	ldrb	r3, [r7, #15]
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	4413      	add	r3, r2
 800c924:	2200      	movs	r2, #0
 800c926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800c92a:	7bfa      	ldrb	r2, [r7, #15]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	322e      	adds	r2, #46	; 0x2e
 800c930:	2100      	movs	r1, #0
 800c932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800c936:	7bfa      	ldrb	r2, [r7, #15]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	3246      	adds	r2, #70	; 0x46
 800c93c:	2100      	movs	r1, #0
 800c93e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800c942:	7bfb      	ldrb	r3, [r7, #15]
 800c944:	3301      	adds	r3, #1
 800c946:	73fb      	strb	r3, [r7, #15]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	785b      	ldrb	r3, [r3, #1]
 800c94c:	7bfa      	ldrb	r2, [r7, #15]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d3da      	bcc.n	800c908 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2208      	movs	r2, #8
 800c95e:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53LX_p_046             = 0;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800c970:	461a      	mov	r2, r3
 800c972:	2118      	movs	r1, #24
 800c974:	2000      	movs	r0, #0
 800c976:	f7ff fb18 	bl	800bfaa <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800c980:	461a      	mov	r2, r3
 800c982:	2118      	movs	r1, #24
 800c984:	2000      	movs	r0, #0
 800c986:	f7ff fb10 	bl	800bfaa <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800c990:	461a      	mov	r2, r3
 800c992:	2118      	movs	r1, #24
 800c994:	2000      	movs	r0, #0
 800c996:	f7ff fb08 	bl	800bfaa <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	2118      	movs	r1, #24
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	f7ff fb00 	bl	800bfaa <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	2118      	movs	r1, #24
 800c9b4:	2000      	movs	r0, #0
 800c9b6:	f7ff faf8 	bl	800bfaa <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800c9ba:	bf00      	nop
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c9c2:	b5b0      	push	{r4, r5, r7, lr}
 800c9c4:	b08c      	sub	sp, #48	; 0x30
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	60b9      	str	r1, [r7, #8]
 800c9ca:	607a      	str	r2, [r7, #4]
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	81fb      	strh	r3, [r7, #14]
 800c9d2:	4613      	mov	r3, r2
 800c9d4:	737b      	strb	r3, [r7, #13]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  lb            = 0;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t  VL53LX_p_001            = 0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int64_t  tmp          = 0;
 800c9e8:	f04f 0200 	mov.w	r2, #0
 800c9ec:	f04f 0300 	mov.w	r3, #0
 800c9f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int32_t  amb_events   = 0;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	617b      	str	r3, [r7, #20]
	int32_t  VL53LX_p_018       = 0;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  samples      = 0;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800ca00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca02:	7a5a      	ldrb	r2, [r3, #9]
 800ca04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca06:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800ca08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca0a:	7a1a      	ldrb	r2, [r3, #8]
 800ca0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca0e:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800ca10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca12:	7a9a      	ldrb	r2, [r3, #10]
 800ca14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca16:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800ca18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca1a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800ca1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca20:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800ca22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca24:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7ff fa6d 	bl	800bf08 <VL53LX_decode_vcsel_period>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800ca32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca34:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800ca36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ca42:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800ca46:	89fa      	ldrh	r2, [r7, #14]
 800ca48:	f04f 0300 	mov.w	r3, #0
 800ca4c:	69f9      	ldr	r1, [r7, #28]
 800ca4e:	fb02 f001 	mul.w	r0, r2, r1
 800ca52:	69b9      	ldr	r1, [r7, #24]
 800ca54:	fb03 f101 	mul.w	r1, r3, r1
 800ca58:	4401      	add	r1, r0
 800ca5a:	69b8      	ldr	r0, [r7, #24]
 800ca5c:	fba0 2302 	umull	r2, r3, r0, r2
 800ca60:	4419      	add	r1, r3
 800ca62:	460b      	mov	r3, r1
 800ca64:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800ca68:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp += 2048;
 800ca6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ca70:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 800ca74:	f143 0500 	adc.w	r5, r3, #0
 800ca78:	e9c7 4506 	strd	r4, r5, [r7, #24]
	tmp = do_division_s(tmp, 4096);
 800ca7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ca80:	2a00      	cmp	r2, #0
 800ca82:	f173 0100 	sbcs.w	r1, r3, #0
 800ca86:	da06      	bge.n	800ca96 <VL53LX_f_006+0xd4>
 800ca88:	f640 70ff 	movw	r0, #4095	; 0xfff
 800ca8c:	f04f 0100 	mov.w	r1, #0
 800ca90:	1812      	adds	r2, r2, r0
 800ca92:	eb41 0303 	adc.w	r3, r1, r3
 800ca96:	f04f 0000 	mov.w	r0, #0
 800ca9a:	f04f 0100 	mov.w	r1, #0
 800ca9e:	0b10      	lsrs	r0, r2, #12
 800caa0:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800caa4:	1319      	asrs	r1, r3, #12
 800caa6:	e9c7 0106 	strd	r0, r1, [r7, #24]
	amb_events = (int32_t)tmp;
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	617b      	str	r3, [r7, #20]



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800caae:	2300      	movs	r3, #0
 800cab0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cab4:	e062      	b.n	800cb7c <VL53LX_f_006+0x1ba>

		VL53LX_p_001 = lb >> 2;
 800cab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800caba:	089b      	lsrs	r3, r3, #2
 800cabc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800cac0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cac6:	4413      	add	r3, r2
 800cac8:	7c9b      	ldrb	r3, [r3, #18]
 800caca:	613b      	str	r3, [r7, #16]

		if (samples > 0) {
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	dd4f      	ble.n	800cb72 <VL53LX_f_006+0x1b0>

			if (lb < pxtalk->VL53LX_p_021 &&
 800cad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cad4:	7a9b      	ldrb	r3, [r3, #10]
 800cad6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cada:	429a      	cmp	r2, r3
 800cadc:	d20f      	bcs.n	800cafe <VL53LX_f_006+0x13c>
 800cade:	7b7b      	ldrb	r3, [r7, #13]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d00c      	beq.n	800cafe <VL53LX_f_006+0x13c>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800cae4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800caea:	3206      	adds	r2, #6
 800caec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	441a      	add	r2, r3
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	fb02 f303 	mul.w	r3, r2, r3
 800cafa:	62bb      	str	r3, [r7, #40]	; 0x28
 800cafc:	e004      	b.n	800cb08 <VL53LX_f_006+0x146>
			else
				VL53LX_p_018 = samples *  amb_events;
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	697a      	ldr	r2, [r7, #20]
 800cb02:	fb02 f303 	mul.w	r3, r2, r3
 800cb06:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800cb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fe ff23 	bl	800b956 <VL53LX_isqrt>
 800cb10:	4603      	mov	r3, r0
 800cb12:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018 += (samples/2);
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	0fda      	lsrs	r2, r3, #31
 800cb18:	4413      	add	r3, r2
 800cb1a:	105b      	asrs	r3, r3, #1
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb20:	4413      	add	r3, r2
 800cb22:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= samples;
 800cb24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	fb92 f3f3 	sdiv	r3, r2, r3
 800cb2c:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 *= ambient_threshold_sigma;
 800cb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	fb02 f303 	mul.w	r3, r2, r3
 800cb36:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += 8;
 800cb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3a:	3308      	adds	r3, #8
 800cb3c:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= 16;
 800cb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	da00      	bge.n	800cb46 <VL53LX_f_006+0x184>
 800cb44:	330f      	adds	r3, #15
 800cb46:	111b      	asrs	r3, r3, #4
 800cb48:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += amb_events;
 800cb4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	4413      	add	r3, r2
 800cb50:	62bb      	str	r3, [r7, #40]	; 0x28

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800cb52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	da01      	bge.n	800cb5e <VL53LX_f_006+0x19c>
				VL53LX_p_018 = min_ambient_threshold_events;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	62bb      	str	r3, [r7, #40]	; 0x28

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800cb5e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cb62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb64:	3216      	adds	r2, #22
 800cb66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800cb6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb70:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800cb72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cb76:	3301      	adds	r3, #1
 800cb78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cb7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb7e:	7a9b      	ldrb	r3, [r3, #10]
 800cb80:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d396      	bcc.n	800cab6 <VL53LX_f_006+0xf4>

	}



	palgo->VL53LX_p_039 = 0;
 800cb88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800cb8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb90:	7a1b      	ldrb	r3, [r3, #8]
 800cb92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cb96:	e033      	b.n	800cc00 <VL53LX_f_006+0x23e>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800cb98:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cb9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb9e:	3206      	adds	r2, #6
 800cba0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cba4:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800cba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbaa:	3116      	adds	r1, #22
 800cbac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	dd13      	ble.n	800cbdc <VL53LX_f_006+0x21a>
			palgo->VL53LX_p_040[lb]      = 1;
 800cbb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cbb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbba:	4413      	add	r3, r2
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800cbc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cbc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbc6:	4413      	add	r3, r2
 800cbc8:	2201      	movs	r2, #1
 800cbca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53LX_p_039++;
 800cbce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbd0:	791b      	ldrb	r3, [r3, #4]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbd8:	711a      	strb	r2, [r3, #4]
 800cbda:	e00c      	b.n	800cbf6 <VL53LX_f_006+0x234>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800cbdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cbe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbe2:	4413      	add	r3, r2
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800cbe8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cbec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbee:	4413      	add	r3, r2
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800cbf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cc00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc02:	7a9b      	ldrb	r3, [r3, #10]
 800cc04:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d3c5      	bcc.n	800cb98 <VL53LX_f_006+0x1d6>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cc0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3730      	adds	r7, #48	; 0x30
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bdb0      	pop	{r4, r5, r7, pc}

0800cc18 <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cc20:	2300      	movs	r3, #0
 800cc22:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800cc24:	2300      	movs	r3, #0
 800cc26:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2200      	movs	r2, #0
 800cc34:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800cc38:	2300      	movs	r3, #0
 800cc3a:	73fb      	strb	r3, [r7, #15]
 800cc3c:	e02d      	b.n	800cc9a <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800cc3e:	7bfb      	ldrb	r3, [r7, #15]
 800cc40:	3301      	adds	r3, #1
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	78d2      	ldrb	r2, [r2, #3]
 800cc46:	fb93 f1f2 	sdiv	r1, r3, r2
 800cc4a:	fb02 f201 	mul.w	r2, r2, r1
 800cc4e:	1a9b      	subs	r3, r3, r2
 800cc50:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	789b      	ldrb	r3, [r3, #2]
 800cc56:	7bfa      	ldrb	r2, [r7, #15]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d21b      	bcs.n	800cc94 <VL53LX_f_007+0x7c>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	789b      	ldrb	r3, [r3, #2]
 800cc60:	7b3a      	ldrb	r2, [r7, #12]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d216      	bcs.n	800cc94 <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800cc66:	7bfb      	ldrb	r3, [r7, #15]
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	4413      	add	r3, r2
 800cc6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d10f      	bne.n	800cc94 <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800cc74:	7b3b      	ldrb	r3, [r7, #12]
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	4413      	add	r3, r2
 800cc7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d108      	bne.n	800cc94 <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800cc82:	7bbb      	ldrb	r3, [r7, #14]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d105      	bne.n	800cc94 <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	7bfa      	ldrb	r2, [r7, #15]
 800cc8c:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800cc90:	2301      	movs	r3, #1
 800cc92:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800cc94:	7bfb      	ldrb	r3, [r7, #15]
 800cc96:	3301      	adds	r3, #1
 800cc98:	73fb      	strb	r3, [r7, #15]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	78db      	ldrb	r3, [r3, #3]
 800cc9e:	7bfa      	ldrb	r2, [r7, #15]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d3cc      	bcc.n	800cc3e <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cca4:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3714      	adds	r7, #20
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr

0800ccb4 <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800ccd2:	73fb      	strb	r3, [r7, #15]
 800ccd4:	e05a      	b.n	800cd8c <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	78da      	ldrb	r2, [r3, #3]
 800ccda:	7bfb      	ldrb	r3, [r7, #15]
 800ccdc:	fbb3 f1f2 	udiv	r1, r3, r2
 800cce0:	fb02 f201 	mul.w	r2, r2, r1
 800cce4:	1a9b      	subs	r3, r3, r2
 800cce6:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800cce8:	7bfb      	ldrb	r3, [r7, #15]
 800ccea:	3301      	adds	r3, #1
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	78d2      	ldrb	r2, [r2, #3]
 800ccf0:	fb93 f1f2 	sdiv	r1, r3, r2
 800ccf4:	fb02 f201 	mul.w	r2, r2, r1
 800ccf8:	1a9b      	subs	r3, r3, r2
 800ccfa:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	789b      	ldrb	r3, [r3, #2]
 800cd00:	7b7a      	ldrb	r2, [r7, #13]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d23f      	bcs.n	800cd86 <VL53LX_f_008+0xd2>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	789b      	ldrb	r3, [r3, #2]
 800cd0a:	7b3a      	ldrb	r2, [r7, #12]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d23a      	bcs.n	800cd86 <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800cd10:	7b7b      	ldrb	r3, [r7, #13]
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	4413      	add	r3, r2
 800cd16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d10e      	bne.n	800cd3c <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800cd1e:	7b3b      	ldrb	r3, [r7, #12]
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	4413      	add	r3, r2
 800cd24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d107      	bne.n	800cd3c <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800cd32:	3301      	adds	r3, #1
 800cd34:	b2da      	uxtb	r2, r3
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d905      	bls.n	800cd58 <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800cd58:	7b7b      	ldrb	r3, [r7, #13]
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d009      	beq.n	800cd7a <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800cd66:	7b7b      	ldrb	r3, [r7, #13]
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800cd6e:	687a      	ldr	r2, [r7, #4]
 800cd70:	4413      	add	r3, r2
 800cd72:	460a      	mov	r2, r1
 800cd74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cd78:	e005      	b.n	800cd86 <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800cd7a:	7b7b      	ldrb	r3, [r7, #13]
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	4413      	add	r3, r2
 800cd80:	2200      	movs	r2, #0
 800cd82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800cd86:	7bfb      	ldrb	r3, [r7, #15]
 800cd88:	3301      	adds	r3, #1
 800cd8a:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800cd8c:	7bfa      	ldrb	r2, [r7, #15]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800cd94:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800cd9a:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	db9a      	blt.n	800ccd6 <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800cda0:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b087      	sub	sp, #28
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	78db      	ldrb	r3, [r3, #3]
 800cdd4:	3b01      	subs	r3, #1
 800cdd6:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800cdd8:	7cbb      	ldrb	r3, [r7, #18]
 800cdda:	085b      	lsrs	r3, r3, #1
 800cddc:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800cde4:	75fb      	strb	r3, [r7, #23]
 800cde6:	e0a2      	b.n	800cf2e <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	78da      	ldrb	r2, [r3, #3]
 800cdec:	7dfb      	ldrb	r3, [r7, #23]
 800cdee:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdf2:	fb02 f201 	mul.w	r2, r2, r1
 800cdf6:	1a9b      	subs	r3, r3, r2
 800cdf8:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800cdfa:	7dfb      	ldrb	r3, [r7, #23]
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	78d2      	ldrb	r2, [r2, #3]
 800ce02:	fb93 f1f2 	sdiv	r1, r3, r2
 800ce06:	fb02 f201 	mul.w	r2, r2, r1
 800ce0a:	1a9b      	subs	r3, r3, r2
 800ce0c:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	789b      	ldrb	r3, [r3, #2]
 800ce12:	7d7a      	ldrb	r2, [r7, #21]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	f080 8087 	bcs.w	800cf28 <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800ce1e:	7d3a      	ldrb	r2, [r7, #20]
 800ce20:	429a      	cmp	r2, r3
 800ce22:	f080 8081 	bcs.w	800cf28 <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800ce26:	7d7b      	ldrb	r3, [r7, #21]
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d12f      	bne.n	800ce94 <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800ce34:	7d3b      	ldrb	r3, [r7, #20]
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	4413      	add	r3, r2
 800ce3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d028      	beq.n	800ce94 <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800ce42:	7d3b      	ldrb	r3, [r7, #20]
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	4413      	add	r3, r2
 800ce48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ce4c:	3b01      	subs	r3, #1
 800ce4e:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800ce56:	7cfa      	ldrb	r2, [r7, #19]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d21b      	bcs.n	800ce94 <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800ce5c:	7cfa      	ldrb	r2, [r7, #19]
 800ce5e:	4613      	mov	r3, r2
 800ce60:	00db      	lsls	r3, r3, #3
 800ce62:	4413      	add	r3, r2
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	3304      	adds	r3, #4
 800ce70:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	7dfa      	ldrb	r2, [r7, #23]
 800ce76:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800ce78:	7dfb      	ldrb	r3, [r7, #23]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	b2da      	uxtb	r2, r3
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	22ff      	movs	r2, #255	; 0xff
 800ce86:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2200      	movs	r2, #0
 800ce92:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800ce94:	7d7b      	ldrb	r3, [r7, #21]
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	4413      	add	r3, r2
 800ce9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d042      	beq.n	800cf28 <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800cea2:	7d3b      	ldrb	r3, [r7, #20]
 800cea4:	687a      	ldr	r2, [r7, #4]
 800cea6:	4413      	add	r3, r2
 800cea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d13b      	bne.n	800cf28 <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800ceb0:	7d7b      	ldrb	r3, [r7, #21]
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ceba:	3b01      	subs	r3, #1
 800cebc:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800cec4:	7cfa      	ldrb	r2, [r7, #19]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d22e      	bcs.n	800cf28 <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800ceca:	7cfa      	ldrb	r2, [r7, #19]
 800cecc:	4613      	mov	r3, r2
 800cece:	00db      	lsls	r3, r3, #3
 800ced0:	4413      	add	r3, r2
 800ced2:	009b      	lsls	r3, r3, #2
 800ced4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	4413      	add	r3, r2
 800cedc:	3304      	adds	r3, #4
 800cede:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	7dfa      	ldrb	r2, [r7, #23]
 800cee4:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800cee6:	7dfb      	ldrb	r3, [r7, #23]
 800cee8:	3301      	adds	r3, #1
 800ceea:	b2da      	uxtb	r2, r3
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800cef8:	1ad3      	subs	r3, r2, r3
 800cefa:	b2db      	uxtb	r3, r3
 800cefc:	3301      	adds	r3, #1
 800cefe:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800cf0c:	1ad3      	subs	r3, r2, r3
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	3301      	adds	r3, #1
 800cf12:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	799b      	ldrb	r3, [r3, #6]
 800cf1c:	7cba      	ldrb	r2, [r7, #18]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d202      	bcs.n	800cf28 <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	7cba      	ldrb	r2, [r7, #18]
 800cf26:	719a      	strb	r2, [r3, #6]
		blb++) {
 800cf28:	7dfb      	ldrb	r3, [r7, #23]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800cf2e:	7dfa      	ldrb	r2, [r7, #23]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800cf36:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800cf3c:	440b      	add	r3, r1
	for (blb = palgo->VL53LX_p_044;
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	f6ff af52 	blt.w	800cde8 <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cf44:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	371c      	adds	r7, #28
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b090      	sub	sp, #64	; 0x40
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	6039      	str	r1, [r7, #0]
 800cf5e:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cf60:	2300      	movs	r3, #0
 800cf62:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800cf66:	f107 030c 	add.w	r3, r7, #12
 800cf6a:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 800cf72:	2301      	movs	r3, #1
 800cf74:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d965      	bls.n	800d04e <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800cf82:	e05f      	b.n	800d044 <VL53LX_f_016+0xf0>

		swapped = 0;
 800cf84:	2300      	movs	r3, #0
 800cf86:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cf90:	e051      	b.n	800d036 <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800cf92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cf96:	1e5a      	subs	r2, r3, #1
 800cf98:	4613      	mov	r3, r2
 800cf9a:	00db      	lsls	r3, r3, #3
 800cf9c:	4413      	add	r3, r2
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cfa4:	683a      	ldr	r2, [r7, #0]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	3304      	adds	r3, #4
 800cfaa:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800cfac:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800cfb0:	4613      	mov	r3, r2
 800cfb2:	00db      	lsls	r3, r3, #3
 800cfb4:	4413      	add	r3, r2
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cfbc:	683a      	ldr	r2, [r7, #0]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	3304      	adds	r3, #4
 800cfc2:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 800cfc4:	79fb      	ldrb	r3, [r7, #7]
 800cfc6:	2b02      	cmp	r3, #2
 800cfc8:	d118      	bne.n	800cffc <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800cfca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfcc:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800cfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd0:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	da2a      	bge.n	800d02c <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800cfd6:	2224      	movs	r2, #36	; 0x24
 800cfd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cfda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cfdc:	f007 fff8 	bl	8014fd0 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800cfe0:	2224      	movs	r2, #36	; 0x24
 800cfe2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cfe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfe6:	f007 fff3 	bl	8014fd0 <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800cfea:	2224      	movs	r2, #36	; 0x24
 800cfec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cfee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cff0:	f007 ffee 	bl	8014fd0 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800cff4:	2301      	movs	r3, #1
 800cff6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800cffa:	e017      	b.n	800d02c <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800cffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cffe:	699a      	ldr	r2, [r3, #24]
 800d000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d002:	699b      	ldr	r3, [r3, #24]
 800d004:	429a      	cmp	r2, r3
 800d006:	d911      	bls.n	800d02c <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800d008:	2224      	movs	r2, #36	; 0x24
 800d00a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d00c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d00e:	f007 ffdf 	bl	8014fd0 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800d012:	2224      	movs	r2, #36	; 0x24
 800d014:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d016:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d018:	f007 ffda 	bl	8014fd0 <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800d01c:	2224      	movs	r2, #36	; 0x24
 800d01e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d020:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d022:	f007 ffd5 	bl	8014fd0 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800d026:	2301      	movs	r3, #1
 800d028:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800d02c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d030:	3301      	adds	r3, #1
 800d032:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800d03c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d040:	429a      	cmp	r2, r3
 800d042:	d3a6      	bcc.n	800cf92 <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800d044:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d19b      	bne.n	800cf84 <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800d04c:	e000      	b.n	800d050 <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800d04e:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800d050:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 800d054:	4618      	mov	r0, r3
 800d056:	3740      	adds	r7, #64	; 0x40
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b087      	sub	sp, #28
 800d060:	af00      	add	r7, sp, #0
 800d062:	4603      	mov	r3, r0
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	607a      	str	r2, [r7, #4]
 800d068:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d06a:	2300      	movs	r3, #0
 800d06c:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d06e:	2300      	movs	r3, #0
 800d070:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d072:	2300      	movs	r3, #0
 800d074:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d076:	7bfa      	ldrb	r2, [r7, #15]
 800d078:	4613      	mov	r3, r2
 800d07a:	00db      	lsls	r3, r3, #3
 800d07c:	4413      	add	r3, r2
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	4413      	add	r3, r2
 800d088:	3304      	adds	r3, #4
 800d08a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	2200      	movs	r2, #0
 800d090:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	2200      	movs	r2, #0
 800d096:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	75fb      	strb	r3, [r7, #23]
 800d09e:	e01c      	b.n	800d0da <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	78da      	ldrb	r2, [r3, #3]
 800d0a4:	7dfb      	ldrb	r3, [r7, #23]
 800d0a6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0aa:	fb02 f201 	mul.w	r2, r2, r1
 800d0ae:	1a9b      	subs	r3, r3, r2
 800d0b0:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	68da      	ldr	r2, [r3, #12]
 800d0b6:	7d79      	ldrb	r1, [r7, #21]
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	3106      	adds	r1, #6
 800d0bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d0c0:	441a      	add	r2, r3
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	689a      	ldr	r2, [r3, #8]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	689b      	ldr	r3, [r3, #8]
 800d0ce:	441a      	add	r2, r3
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d0d4:	7dfb      	ldrb	r3, [r7, #23]
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	75fb      	strb	r3, [r7, #23]
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	791b      	ldrb	r3, [r3, #4]
 800d0de:	7dfa      	ldrb	r2, [r7, #23]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d9dd      	bls.n	800d0a0 <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	68da      	ldr	r2, [r3, #12]
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	689b      	ldr	r3, [r3, #8]
 800d0ec:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800d0f2:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	371c      	adds	r7, #28
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr

0800d102 <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d102:	b590      	push	{r4, r7, lr}
 800d104:	b08d      	sub	sp, #52	; 0x34
 800d106:	af02      	add	r7, sp, #8
 800d108:	60ba      	str	r2, [r7, #8]
 800d10a:	607b      	str	r3, [r7, #4]
 800d10c:	4603      	mov	r3, r0
 800d10e:	73fb      	strb	r3, [r7, #15]
 800d110:	460b      	mov	r3, r1
 800d112:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d114:	2300      	movs	r3, #0
 800d116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 800d11a:	2300      	movs	r3, #0
 800d11c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53LX_p_012 = 0;
 800d120:	2300      	movs	r3, #0
 800d122:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800d124:	2300      	movs	r3, #0
 800d126:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800d128:	2300      	movs	r3, #0
 800d12a:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 800d12c:	2300      	movs	r3, #0
 800d12e:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d130:	7bfa      	ldrb	r2, [r7, #15]
 800d132:	4613      	mov	r3, r2
 800d134:	00db      	lsls	r3, r3, #3
 800d136:	4413      	add	r3, r2
 800d138:	009b      	lsls	r3, r3, #2
 800d13a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	4413      	add	r3, r2
 800d142:	3304      	adds	r3, #4
 800d144:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	789b      	ldrb	r3, [r3, #2]
 800d14a:	2bff      	cmp	r3, #255	; 0xff
 800d14c:	d102      	bne.n	800d154 <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	2201      	movs	r2, #1
 800d152:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	789b      	ldrb	r3, [r3, #2]
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	78d2      	ldrb	r2, [r2, #3]
 800d15c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d160:	fb02 f201 	mul.w	r2, r2, r1
 800d164:	1a9b      	subs	r3, r3, r2
 800d166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53LX_p_012  = (int16_t)i;
 800d16a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d16e:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	b29a      	uxth	r2, r3
 800d176:	8c3b      	ldrh	r3, [r7, #32]
 800d178:	4413      	add	r3, r2
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800d17e:	8c3a      	ldrh	r2, [r7, #32]
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	789b      	ldrb	r3, [r3, #2]
 800d184:	b29b      	uxth	r3, r3
 800d186:	1ad3      	subs	r3, r2, r3
 800d188:	b29b      	uxth	r3, r3
 800d18a:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800d18c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d190:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	791b      	ldrb	r3, [r3, #4]
 800d196:	b29a      	uxth	r2, r3
 800d198:	8bfb      	ldrh	r3, [r7, #30]
 800d19a:	4413      	add	r3, r2
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800d1a0:	8bfa      	ldrh	r2, [r7, #30]
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	789b      	ldrb	r3, [r3, #2]
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	1ad3      	subs	r3, r2, r3
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800d1ae:	8bfa      	ldrh	r2, [r7, #30]
 800d1b0:	8c3b      	ldrh	r3, [r7, #32]
 800d1b2:	1ad3      	subs	r3, r2, r3
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 800d1b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d1bc:	2b03      	cmp	r3, #3
 800d1be:	dd01      	ble.n	800d1c4 <VL53LX_f_015+0xc2>
		window_width = 3;
 800d1c0:	2303      	movs	r3, #3
 800d1c2:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800d1c4:	8c3a      	ldrh	r2, [r7, #32]
 800d1c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1c8:	4413      	add	r3, r2
 800d1ca:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800d1cc:	b219      	sxth	r1, r3
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	78da      	ldrb	r2, [r3, #3]
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	3314      	adds	r3, #20
 800d1d6:	7bbc      	ldrb	r4, [r7, #14]
 800d1d8:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800d1dc:	9301      	str	r3, [sp, #4]
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	4623      	mov	r3, r4
 800d1e4:	f000 f846 	bl	800d274 <VL53LX_f_020>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800d1ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d114      	bne.n	800d220 <VL53LX_f_015+0x11e>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800d1f6:	8bfa      	ldrh	r2, [r7, #30]
 800d1f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1fa:	1ad3      	subs	r3, r2, r3
 800d1fc:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800d1fe:	b218      	sxth	r0, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	78da      	ldrb	r2, [r3, #3]
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	331c      	adds	r3, #28
 800d208:	7bbc      	ldrb	r4, [r7, #14]
 800d20a:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800d20e:	9301      	str	r3, [sp, #4]
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	9300      	str	r3, [sp, #0]
 800d214:	4623      	mov	r3, r4
 800d216:	f000 f82d 	bl	800d274 <VL53LX_f_020>
 800d21a:	4603      	mov	r3, r0
 800d21c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	695a      	ldr	r2, [r3, #20]
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	69db      	ldr	r3, [r3, #28]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d909      	bls.n	800d240 <VL53LX_f_015+0x13e>
		tmp_phase        = pdata->VL53LX_p_026;
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	695b      	ldr	r3, [r3, #20]
 800d230:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	69da      	ldr	r2, [r3, #28]
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	69ba      	ldr	r2, [r7, #24]
 800d23e:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	699a      	ldr	r2, [r3, #24]
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	695b      	ldr	r3, [r3, #20]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d203      	bcs.n	800d254 <VL53LX_f_015+0x152>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	699a      	ldr	r2, [r3, #24]
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	699a      	ldr	r2, [r3, #24]
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	69db      	ldr	r3, [r3, #28]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d903      	bls.n	800d268 <VL53LX_f_015+0x166>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	699a      	ldr	r2, [r3, #24]
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800d268:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	372c      	adds	r7, #44	; 0x2c
 800d270:	46bd      	mov	sp, r7
 800d272:	bd90      	pop	{r4, r7, pc}

0800d274 <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800d274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d278:	b093      	sub	sp, #76	; 0x4c
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	4616      	mov	r6, r2
 800d27e:	461a      	mov	r2, r3
 800d280:	4603      	mov	r3, r0
 800d282:	83fb      	strh	r3, [r7, #30]
 800d284:	460b      	mov	r3, r1
 800d286:	83bb      	strh	r3, [r7, #28]
 800d288:	4633      	mov	r3, r6
 800d28a:	76fb      	strb	r3, [r7, #27]
 800d28c:	4613      	mov	r3, r2
 800d28e:	76bb      	strb	r3, [r7, #26]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d290:	2300      	movs	r3, #0
 800d292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	int16_t  i            = 0;
 800d296:	2300      	movs	r3, #0
 800d298:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  lb            = 0;
 800d29c:	2300      	movs	r3, #0
 800d29e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	int64_t VL53LX_p_018        = 0;
 800d2a2:	f04f 0200 	mov.w	r2, #0
 800d2a6:	f04f 0300 	mov.w	r3, #0
 800d2aa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int64_t event_sum     = 0;
 800d2ae:	f04f 0200 	mov.w	r2, #0
 800d2b2:	f04f 0300 	mov.w	r3, #0
 800d2b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	int64_t weighted_sum  = 0;
 800d2ba:	f04f 0200 	mov.w	r2, #0
 800d2be:	f04f 0300 	mov.w	r3, #0
 800d2c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800d2c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2cc:	601a      	str	r2, [r3, #0]

	if (VL53LX_p_030 != 0)
 800d2ce:	7efb      	ldrb	r3, [r7, #27]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	f000 808b 	beq.w	800d3ec <VL53LX_f_020+0x178>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d2d6:	8bfb      	ldrh	r3, [r7, #30]
 800d2d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d2dc:	e07f      	b.n	800d3de <VL53LX_f_020+0x16a>

		if (lb < 0)
 800d2de:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	da08      	bge.n	800d2f8 <VL53LX_f_020+0x84>
			i = lb + (int16_t)VL53LX_p_030;
 800d2e6:	7efb      	ldrb	r3, [r7, #27]
 800d2e8:	b29a      	uxth	r2, r3
 800d2ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d2ee:	4413      	add	r3, r2
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d2f6:	e009      	b.n	800d30c <VL53LX_f_020+0x98>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800d2f8:	f9b7 1044 	ldrsh.w	r1, [r7, #68]	; 0x44
 800d2fc:	7efa      	ldrb	r2, [r7, #27]
 800d2fe:	fb91 f3f2 	sdiv	r3, r1, r2
 800d302:	fb02 f303 	mul.w	r3, r2, r3
 800d306:	1acb      	subs	r3, r1, r3
 800d308:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800d30c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d310:	2b00      	cmp	r3, #0
 800d312:	db5d      	blt.n	800d3d0 <VL53LX_f_020+0x15c>
 800d314:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d318:	2b17      	cmp	r3, #23
 800d31a:	dc59      	bgt.n	800d3d0 <VL53LX_f_020+0x15c>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800d31c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d320:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d322:	3306      	adds	r3, #6
 800d324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d328:	4618      	mov	r0, r3
 800d32a:	ea4f 71e0 	mov.w	r1, r0, asr #31
				(int64_t)pbins->VL53LX_p_028;
 800d32e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d330:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d334:	461a      	mov	r2, r3
 800d336:	ea4f 73e2 	mov.w	r3, r2, asr #31
			VL53LX_p_018 =
 800d33a:	1a86      	subs	r6, r0, r2
 800d33c:	613e      	str	r6, [r7, #16]
 800d33e:	eb61 0303 	sbc.w	r3, r1, r3
 800d342:	617b      	str	r3, [r7, #20]
 800d344:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d348:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800d34c:	7ebb      	ldrb	r3, [r7, #26]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00b      	beq.n	800d36a <VL53LX_f_020+0xf6>
 800d352:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d356:	2a00      	cmp	r2, #0
 800d358:	f173 0300 	sbcs.w	r3, r3, #0
 800d35c:	da05      	bge.n	800d36a <VL53LX_f_020+0xf6>
				VL53LX_p_018 = 0;
 800d35e:	f04f 0200 	mov.w	r2, #0
 800d362:	f04f 0300 	mov.w	r3, #0
 800d366:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			event_sum += VL53LX_p_018;
 800d36a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d36e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d372:	1886      	adds	r6, r0, r2
 800d374:	60be      	str	r6, [r7, #8]
 800d376:	eb41 0303 	adc.w	r3, r1, r3
 800d37a:	60fb      	str	r3, [r7, #12]
 800d37c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d380:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800d384:	f9b7 0044 	ldrsh.w	r0, [r7, #68]	; 0x44
 800d388:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d38c:	f04f 0200 	mov.w	r2, #0
 800d390:	f04f 0300 	mov.w	r3, #0
 800d394:	02cb      	lsls	r3, r1, #11
 800d396:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800d39a:	02c2      	lsls	r2, r0, #11
 800d39c:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 800d3a0:	f143 0900 	adc.w	r9, r3, #0
 800d3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a6:	fb09 f203 	mul.w	r2, r9, r3
 800d3aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ac:	fb08 f303 	mul.w	r3, r8, r3
 800d3b0:	441a      	add	r2, r3
 800d3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b4:	fba3 0108 	umull	r0, r1, r3, r8
 800d3b8:	1853      	adds	r3, r2, r1
 800d3ba:	4619      	mov	r1, r3
			weighted_sum +=
 800d3bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d3c0:	1816      	adds	r6, r2, r0
 800d3c2:	603e      	str	r6, [r7, #0]
 800d3c4:	414b      	adcs	r3, r1
 800d3c6:	607b      	str	r3, [r7, #4]
 800d3c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d3d0:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d3de:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800d3e2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	f77f af79 	ble.w	800d2de <VL53LX_f_020+0x6a>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800d3ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d3f0:	2a01      	cmp	r2, #1
 800d3f2:	f173 0300 	sbcs.w	r3, r3, #0
 800d3f6:	db33      	blt.n	800d460 <VL53LX_f_020+0x1ec>
		weighted_sum += do_division_s(event_sum, 2);
 800d3f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d3fc:	0fd9      	lsrs	r1, r3, #31
 800d3fe:	4608      	mov	r0, r1
 800d400:	f04f 0100 	mov.w	r1, #0
 800d404:	1884      	adds	r4, r0, r2
 800d406:	eb41 0503 	adc.w	r5, r1, r3
 800d40a:	f04f 0200 	mov.w	r2, #0
 800d40e:	f04f 0300 	mov.w	r3, #0
 800d412:	0862      	lsrs	r2, r4, #1
 800d414:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800d418:	106b      	asrs	r3, r5, #1
 800d41a:	4610      	mov	r0, r2
 800d41c:	4619      	mov	r1, r3
 800d41e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d422:	eb12 0a00 	adds.w	sl, r2, r0
 800d426:	eb43 0b01 	adc.w	fp, r3, r1
 800d42a:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800d42e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d432:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d436:	f7f2 ff23 	bl	8000280 <__aeabi_ldivmod>
 800d43a:	4602      	mov	r2, r0
 800d43c:	460b      	mov	r3, r1
 800d43e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		if (weighted_sum < 0)
 800d442:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d446:	2a00      	cmp	r2, #0
 800d448:	f173 0300 	sbcs.w	r3, r3, #0
 800d44c:	da05      	bge.n	800d45a <VL53LX_f_020+0x1e6>
			weighted_sum = 0;
 800d44e:	f04f 0200 	mov.w	r2, #0
 800d452:	f04f 0300 	mov.w	r3, #0
 800d456:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		*pphase = (uint32_t)weighted_sum;
 800d45a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d45c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d45e:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d460:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d464:	4618      	mov	r0, r3
 800d466:	374c      	adds	r7, #76	; 0x4c
 800d468:	46bd      	mov	sp, r7
 800d46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d46e <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b086      	sub	sp, #24
 800d472:	af00      	add	r7, sp, #0
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	607a      	str	r2, [r7, #4]
 800d478:	603b      	str	r3, [r7, #0]
 800d47a:	4603      	mov	r3, r0
 800d47c:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d47e:	2300      	movs	r3, #0
 800d480:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d482:	2300      	movs	r3, #0
 800d484:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d486:	2300      	movs	r3, #0
 800d488:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d48a:	7bfa      	ldrb	r2, [r7, #15]
 800d48c:	4613      	mov	r3, r2
 800d48e:	00db      	lsls	r3, r3, #3
 800d490:	4413      	add	r3, r2
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	4413      	add	r3, r2
 800d49c:	3304      	adds	r3, #4
 800d49e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800d4a0:	22ac      	movs	r2, #172	; 0xac
 800d4a2:	68b9      	ldr	r1, [r7, #8]
 800d4a4:	6a38      	ldr	r0, [r7, #32]
 800d4a6:	f007 fd93 	bl	8014fd0 <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d4b0:	75fb      	strb	r3, [r7, #23]
 800d4b2:	e020      	b.n	800d4f6 <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	7dfa      	ldrb	r2, [r7, #23]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d304      	bcc.n	800d4c8 <VL53LX_f_011+0x5a>
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	791b      	ldrb	r3, [r3, #4]
 800d4c2:	7dfa      	ldrb	r2, [r7, #23]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d913      	bls.n	800d4f0 <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	78da      	ldrb	r2, [r3, #3]
 800d4cc:	7dfb      	ldrb	r3, [r7, #23]
 800d4ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800d4d2:	fb02 f201 	mul.w	r2, r2, r1
 800d4d6:	1a9b      	subs	r3, r3, r2
 800d4d8:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800d4da:	6a3b      	ldr	r3, [r7, #32]
 800d4dc:	7a9b      	ldrb	r3, [r3, #10]
 800d4de:	7d7a      	ldrb	r2, [r7, #21]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d205      	bcs.n	800d4f0 <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800d4e4:	7d7a      	ldrb	r2, [r7, #21]
 800d4e6:	6a3b      	ldr	r3, [r7, #32]
 800d4e8:	3206      	adds	r2, #6
 800d4ea:	6839      	ldr	r1, [r7, #0]
 800d4ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800d4f0:	7dfb      	ldrb	r3, [r7, #23]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800d4f6:	7dfa      	ldrb	r2, [r7, #23]
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d4fe:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800d504:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800d506:	429a      	cmp	r2, r3
 800d508:	dbd4      	blt.n	800d4b4 <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d50a:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3718      	adds	r7, #24
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800d516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d51a:	b096      	sub	sp, #88	; 0x58
 800d51c:	af08      	add	r7, sp, #32
 800d51e:	4604      	mov	r4, r0
 800d520:	4608      	mov	r0, r1
 800d522:	4611      	mov	r1, r2
 800d524:	461a      	mov	r2, r3
 800d526:	4623      	mov	r3, r4
 800d528:	73fb      	strb	r3, [r7, #15]
 800d52a:	4603      	mov	r3, r0
 800d52c:	73bb      	strb	r3, [r7, #14]
 800d52e:	460b      	mov	r3, r1
 800d530:	737b      	strb	r3, [r7, #13]
 800d532:	4613      	mov	r3, r2
 800d534:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800d536:	2300      	movs	r3, #0
 800d538:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800d53c:	2300      	movs	r3, #0
 800d53e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 800d542:	2300      	movs	r3, #0
 800d544:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53LX_p_007    = 0;
 800d548:	2300      	movs	r3, #0
 800d54a:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53LX_p_032    = 0;
 800d54c:	2300      	movs	r3, #0
 800d54e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53LX_p_001    = 0;
 800d550:	2300      	movs	r3, #0
 800d552:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 800d554:	2300      	movs	r3, #0
 800d556:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 800d558:	2300      	movs	r3, #0
 800d55a:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800d55c:	2300      	movs	r3, #0
 800d55e:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800d560:	2300      	movs	r3, #0
 800d562:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800d564:	2300      	movs	r3, #0
 800d566:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800d568:	7b7b      	ldrb	r3, [r7, #13]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d106      	bne.n	800d57c <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800d56e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d574:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800d576:	f06f 030e 	mvn.w	r3, #14
 800d57a:	e06f      	b.n	800d65c <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800d57c:	7bfb      	ldrb	r3, [r7, #15]
 800d57e:	7b7a      	ldrb	r2, [r7, #13]
 800d580:	fbb3 f1f2 	udiv	r1, r3, r2
 800d584:	fb02 f201 	mul.w	r2, r2, r1
 800d588:	1a9b      	subs	r3, r3, r2
 800d58a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53LX_f_022(
 800d58e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d592:	7b39      	ldrb	r1, [r7, #12]
 800d594:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d598:	f107 0320 	add.w	r3, r7, #32
 800d59c:	9301      	str	r3, [sp, #4]
 800d59e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d5a2:	9300      	str	r3, [sp, #0]
 800d5a4:	4613      	mov	r3, r2
 800d5a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d5a8:	f000 fda8 	bl	800e0fc <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800d5ac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d5b0:	7b39      	ldrb	r1, [r7, #12]
 800d5b2:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d5b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d5ba:	9301      	str	r3, [sp, #4]
 800d5bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d5c0:	9300      	str	r3, [sp, #0]
 800d5c2:	4613      	mov	r3, r2
 800d5c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d5c6:	f000 fd99 	bl	800e0fc <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800d5ca:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00e      	beq.n	800d5f0 <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800d5d2:	f107 021c 	add.w	r2, r7, #28
 800d5d6:	7b39      	ldrb	r1, [r7, #12]
 800d5d8:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d5dc:	f107 0314 	add.w	r3, r7, #20
 800d5e0:	9301      	str	r3, [sp, #4]
 800d5e2:	f107 0318 	add.w	r3, r7, #24
 800d5e6:	9300      	str	r3, [sp, #0]
 800d5e8:	4613      	mov	r3, r2
 800d5ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d5ec:	f000 fd86 	bl	800e0fc <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f2:	469c      	mov	ip, r3
 800d5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f6:	469e      	mov	lr, r3
 800d5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fa:	4698      	mov	r8, r3
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fe:	4619      	mov	r1, r3
 800d600:	6a3b      	ldr	r3, [r7, #32]
 800d602:	461c      	mov	r4, r3
 800d604:	69bb      	ldr	r3, [r7, #24]
 800d606:	461d      	mov	r5, r3
 800d608:	69fb      	ldr	r3, [r7, #28]
 800d60a:	461e      	mov	r6, r3
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800d610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d612:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53LX_f_023(
 800d616:	607b      	str	r3, [r7, #4]
 800d618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d61a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d61e:	7bb8      	ldrb	r0, [r7, #14]
 800d620:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d622:	9207      	str	r2, [sp, #28]
 800d624:	9306      	str	r3, [sp, #24]
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	9205      	str	r2, [sp, #20]
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	9304      	str	r3, [sp, #16]
 800d62e:	9603      	str	r6, [sp, #12]
 800d630:	9502      	str	r5, [sp, #8]
 800d632:	9401      	str	r4, [sp, #4]
 800d634:	9100      	str	r1, [sp, #0]
 800d636:	4643      	mov	r3, r8
 800d638:	4672      	mov	r2, lr
 800d63a:	4661      	mov	r1, ip
 800d63c:	f002 fee6 	bl	801040c <VL53LX_f_023>
 800d640:	4603      	mov	r3, r0
 800d642:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800d646:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800d64a:	f113 0f0f 	cmn.w	r3, #15
 800d64e:	d103      	bne.n	800d658 <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800d650:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d656:	801a      	strh	r2, [r3, #0]


	return status;
 800d658:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3738      	adds	r7, #56	; 0x38
 800d660:	46bd      	mov	sp, r7
 800d662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d666 <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800d666:	b490      	push	{r4, r7}
 800d668:	b084      	sub	sp, #16
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	4604      	mov	r4, r0
 800d66e:	4608      	mov	r0, r1
 800d670:	4611      	mov	r1, r2
 800d672:	461a      	mov	r2, r3
 800d674:	4623      	mov	r3, r4
 800d676:	71fb      	strb	r3, [r7, #7]
 800d678:	4603      	mov	r3, r0
 800d67a:	71bb      	strb	r3, [r7, #6]
 800d67c:	460b      	mov	r3, r1
 800d67e:	717b      	strb	r3, [r7, #5]
 800d680:	4613      	mov	r3, r2
 800d682:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800d684:	2300      	movs	r3, #0
 800d686:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800d688:	2300      	movs	r3, #0
 800d68a:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800d68c:	6a3b      	ldr	r3, [r7, #32]
 800d68e:	79fa      	ldrb	r2, [r7, #7]
 800d690:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800d692:	6a3b      	ldr	r3, [r7, #32]
 800d694:	2200      	movs	r2, #0
 800d696:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	781a      	ldrb	r2, [r3, #0]
 800d69c:	6a3b      	ldr	r3, [r7, #32]
 800d69e:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800d6a0:	69fb      	ldr	r3, [r7, #28]
 800d6a2:	785a      	ldrb	r2, [r3, #1]
 800d6a4:	6a3b      	ldr	r3, [r7, #32]
 800d6a6:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	789a      	ldrb	r2, [r3, #2]
 800d6ac:	6a3b      	ldr	r3, [r7, #32]
 800d6ae:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	78da      	ldrb	r2, [r3, #3]
 800d6b4:	6a3b      	ldr	r3, [r7, #32]
 800d6b6:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	791a      	ldrb	r2, [r3, #4]
 800d6bc:	6a3b      	ldr	r3, [r7, #32]
 800d6be:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800d6c0:	69fb      	ldr	r3, [r7, #28]
 800d6c2:	795a      	ldrb	r2, [r3, #5]
 800d6c4:	6a3b      	ldr	r3, [r7, #32]
 800d6c6:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	791a      	ldrb	r2, [r3, #4]
 800d6cc:	69fb      	ldr	r3, [r7, #28]
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	1ad3      	subs	r3, r2, r3
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800d6d8:	6a3b      	ldr	r3, [r7, #32]
 800d6da:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800d6dc:	69bb      	ldr	r3, [r7, #24]
 800d6de:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800d6e2:	6a3b      	ldr	r3, [r7, #32]
 800d6e4:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	8c1a      	ldrh	r2, [r3, #32]
 800d6ea:	6a3b      	ldr	r3, [r7, #32]
 800d6ec:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800d6ee:	69fb      	ldr	r3, [r7, #28]
 800d6f0:	695b      	ldr	r3, [r3, #20]
 800d6f2:	b29a      	uxth	r2, r3
 800d6f4:	6a3b      	ldr	r3, [r7, #32]
 800d6f6:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	699b      	ldr	r3, [r3, #24]
 800d6fc:	b29a      	uxth	r2, r3
 800d6fe:	6a3b      	ldr	r3, [r7, #32]
 800d700:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	69db      	ldr	r3, [r3, #28]
 800d708:	b29a      	uxth	r2, r3
 800d70a:	6a3b      	ldr	r3, [r7, #32]
 800d70c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	461a      	mov	r2, r3
 800d716:	6a3b      	ldr	r3, [r7, #32]
 800d718:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	691a      	ldr	r2, [r3, #16]
 800d71e:	6a3b      	ldr	r3, [r7, #32]
 800d720:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	689b      	ldr	r3, [r3, #8]
 800d726:	461a      	mov	r2, r3
 800d728:	6a3b      	ldr	r3, [r7, #32]
 800d72a:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d732:	6a3b      	ldr	r3, [r7, #32]
 800d734:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800d736:	6a3b      	ldr	r3, [r7, #32]
 800d738:	2213      	movs	r2, #19
 800d73a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 800d73e:	887b      	ldrh	r3, [r7, #2]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d00a      	beq.n	800d75a <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800d744:	69fb      	ldr	r3, [r7, #28]
 800d746:	8c1b      	ldrh	r3, [r3, #32]
 800d748:	461a      	mov	r2, r3
 800d74a:	887b      	ldrh	r3, [r7, #2]
 800d74c:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800d74e:	429a      	cmp	r2, r3
 800d750:	d903      	bls.n	800d75a <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800d752:	6a3b      	ldr	r3, [r7, #32]
 800d754:	2206      	movs	r2, #6
 800d756:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800d75a:	79bb      	ldrb	r3, [r7, #6]
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	021b      	lsls	r3, r3, #8
 800d760:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800d762:	6a3b      	ldr	r3, [r7, #32]
 800d764:	8a9b      	ldrh	r3, [r3, #20]
 800d766:	89fa      	ldrh	r2, [r7, #14]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d205      	bcs.n	800d778 <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800d76c:	6a3b      	ldr	r3, [r7, #32]
 800d76e:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800d770:	89fb      	ldrh	r3, [r7, #14]
 800d772:	1ad3      	subs	r3, r2, r3
 800d774:	81fb      	strh	r3, [r7, #14]
 800d776:	e001      	b.n	800d77c <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800d778:	2300      	movs	r3, #0
 800d77a:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800d77c:	797b      	ldrb	r3, [r7, #5]
 800d77e:	b29b      	uxth	r3, r3
 800d780:	021b      	lsls	r3, r3, #8
 800d782:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800d784:	69bb      	ldr	r3, [r7, #24]
 800d786:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800d78a:	89bb      	ldrh	r3, [r7, #12]
 800d78c:	4413      	add	r3, r2
 800d78e:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d790:	6a3b      	ldr	r3, [r7, #32]
 800d792:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d796:	89fa      	ldrh	r2, [r7, #14]
 800d798:	429a      	cmp	r2, r3
 800d79a:	d805      	bhi.n	800d7a8 <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800d79c:	6a3b      	ldr	r3, [r7, #32]
 800d79e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d7a2:	89ba      	ldrh	r2, [r7, #12]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d203      	bcs.n	800d7b0 <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800d7a8:	6a3b      	ldr	r3, [r7, #32]
 800d7aa:	2205      	movs	r2, #5
 800d7ac:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 800d7b0:	bf00      	nop
 800d7b2:	3710      	adds	r7, #16
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bc90      	pop	{r4, r7}
 800d7b8:	4770      	bx	lr

0800d7ba <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800d7ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7bc:	b08f      	sub	sp, #60	; 0x3c
 800d7be:	af06      	add	r7, sp, #24
 800d7c0:	60f8      	str	r0, [r7, #12]
 800d7c2:	60b9      	str	r1, [r7, #8]
 800d7c4:	607a      	str	r2, [r7, #4]
 800d7c6:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800d7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7d2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d7d6:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800d7d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d7da:	f7ff f879 	bl	800c8d0 <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800d7de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7e0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 800d7e4:	22ac      	movs	r2, #172	; 0xac
 800d7e6:	6839      	ldr	r1, [r7, #0]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f007 fbf1 	bl	8014fd0 <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	781a      	ldrb	r2, [r3, #0]
 800d7f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7f4:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	785a      	ldrb	r2, [r3, #1]
 800d7fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7fc:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	789a      	ldrb	r2, [r3, #2]
 800d802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d804:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800d80c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d80e:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800d810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d812:	2200      	movs	r2, #0
 800d814:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800d816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d818:	2204      	movs	r2, #4
 800d81a:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800d81c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d81e:	2200      	movs	r2, #0
 800d820:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d822:	2300      	movs	r3, #0
 800d824:	77bb      	strb	r3, [r7, #30]
 800d826:	e008      	b.n	800d83a <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800d828:	7fbb      	ldrb	r3, [r7, #30]
 800d82a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d82c:	005b      	lsls	r3, r3, #1
 800d82e:	4413      	add	r3, r2
 800d830:	2200      	movs	r2, #0
 800d832:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d834:	7fbb      	ldrb	r3, [r7, #30]
 800d836:	3301      	adds	r3, #1
 800d838:	77bb      	strb	r3, [r7, #30]
 800d83a:	7fbb      	ldrb	r3, [r7, #30]
 800d83c:	2b04      	cmp	r3, #4
 800d83e:	d9f3      	bls.n	800d828 <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800d840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d842:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d846:	4618      	mov	r0, r3
 800d848:	f7fe f8b9 	bl	800b9be <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800d850:	461a      	mov	r2, r3
 800d852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d854:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d858:	4619      	mov	r1, r3
 800d85a:	4610      	mov	r0, r2
 800d85c:	f7fe f8ef 	bl	800ba3e <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800d860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d862:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d866:	4618      	mov	r0, r3
 800d868:	f7fe fcb9 	bl	800c1de <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800d86c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d86e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d872:	4618      	mov	r0, r3
 800d874:	f7fe f95d 	bl	800bb32 <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d009      	beq.n	800d896 <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800d882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d884:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d88a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800d88e:	461a      	mov	r2, r3
 800d890:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d892:	f000 fd7b 	bl	800e38c <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d89e:	2300      	movs	r3, #0
 800d8a0:	77bb      	strb	r3, [r7, #30]
 800d8a2:	e01e      	b.n	800d8e2 <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800d8a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d117      	bne.n	800d8dc <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800d8ac:	7fbb      	ldrb	r3, [r7, #30]
 800d8ae:	68ba      	ldr	r2, [r7, #8]
 800d8b0:	3304      	adds	r3, #4
 800d8b2:	005b      	lsls	r3, r3, #1
 800d8b4:	4413      	add	r3, r2
 800d8b6:	8898      	ldrh	r0, [r3, #4]
 800d8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ba:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800d8be:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800d8c0:	005b      	lsls	r3, r3, #1
 800d8c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d8c4:	4413      	add	r3, r2
 800d8c6:	3304      	adds	r3, #4
 800d8c8:	9301      	str	r3, [sp, #4]
 800d8ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8cc:	9300      	str	r3, [sp, #0]
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	68ba      	ldr	r2, [r7, #8]
 800d8d2:	68f9      	ldr	r1, [r7, #12]
 800d8d4:	f7fe fcce 	bl	800c274 <VL53LX_f_001>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d8dc:	7fbb      	ldrb	r3, [r7, #30]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	77bb      	strb	r3, [r7, #30]
 800d8e2:	7fbb      	ldrb	r3, [r7, #30]
 800d8e4:	2b04      	cmp	r3, #4
 800d8e6:	d9dd      	bls.n	800d8a4 <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800d8e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d11a      	bne.n	800d926 <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800d8f8:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 800d904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d906:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d90a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d90c:	f502 7252 	add.w	r2, r2, #840	; 0x348
 800d910:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d912:	9102      	str	r1, [sp, #8]
 800d914:	9201      	str	r2, [sp, #4]
 800d916:	9300      	str	r3, [sp, #0]
 800d918:	462b      	mov	r3, r5
 800d91a:	4622      	mov	r2, r4
 800d91c:	4631      	mov	r1, r6
 800d91e:	f7ff f850 	bl	800c9c2 <VL53LX_f_006>
 800d922:	4603      	mov	r3, r0
 800d924:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800d926:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d104      	bne.n	800d938 <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800d92e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d930:	f7ff f972 	bl	800cc18 <VL53LX_f_007>
 800d934:	4603      	mov	r3, r0
 800d936:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800d938:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d104      	bne.n	800d94a <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800d940:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d942:	f7ff f9b7 	bl	800ccb4 <VL53LX_f_008>
 800d946:	4603      	mov	r3, r0
 800d948:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800d94a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d104      	bne.n	800d95c <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800d952:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d954:	f7ff fa2c 	bl	800cdb0 <VL53LX_f_009>
 800d958:	4603      	mov	r3, r0
 800d95a:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d95c:	2300      	movs	r3, #0
 800d95e:	77bb      	strb	r3, [r7, #30]
 800d960:	e0a6      	b.n	800dab0 <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800d962:	7fba      	ldrb	r2, [r7, #30]
 800d964:	4613      	mov	r3, r2
 800d966:	00db      	lsls	r3, r3, #3
 800d968:	4413      	add	r3, r2
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d972:	4413      	add	r3, r2
 800d974:	3304      	adds	r3, #4
 800d976:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800d978:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d109      	bne.n	800d994 <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800d980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d982:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d986:	7fbb      	ldrb	r3, [r7, #30]
 800d988:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7ff fb66 	bl	800d05c <VL53LX_f_010>
 800d990:	4603      	mov	r3, r0
 800d992:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800d994:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d110      	bne.n	800d9be <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800d99c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d99e:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d9a2:	69bb      	ldr	r3, [r7, #24]
 800d9a4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800d9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9aa:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800d9ae:	7fb8      	ldrb	r0, [r7, #30]
 800d9b0:	9300      	str	r3, [sp, #0]
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9b6:	f7ff fd5a 	bl	800d46e <VL53LX_f_011>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800d9be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d10d      	bne.n	800d9e2 <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800d9c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9c8:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ce:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800d9d2:	7fb8      	ldrb	r0, [r7, #30]
 800d9d4:	9300      	str	r3, [sp, #0]
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9da:	f7ff fd48 	bl	800d46e <VL53LX_f_011>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800d9e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d10d      	bne.n	800da06 <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800d9ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ec:	f503 7152 	add.w	r1, r3, #840	; 0x348
 800d9f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9f2:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800d9f6:	7fb8      	ldrb	r0, [r7, #30]
 800d9f8:	9300      	str	r3, [sp, #0]
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9fe:	f7ff fd36 	bl	800d46e <VL53LX_f_011>
 800da02:	4603      	mov	r3, r0
 800da04:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800da06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d109      	bne.n	800da22 <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800da0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da10:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 800da14:	7fb8      	ldrb	r0, [r7, #30]
 800da16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da1a:	f000 f8dd 	bl	800dbd8 <VL53LX_f_026>
 800da1e:	4603      	mov	r3, r0
 800da20:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800da22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d108      	bne.n	800da3c <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	8a19      	ldrh	r1, [r3, #16]
 800da2e:	7fb8      	ldrb	r0, [r7, #30]
 800da30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800da34:	f000 f95c 	bl	800dcf0 <VL53LX_f_027>
 800da38:	4603      	mov	r3, r0
 800da3a:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800da3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d124      	bne.n	800da8e <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	789d      	ldrb	r5, [r3, #2]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	7e1e      	ldrb	r6, [r3, #24]
 800da4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da4e:	f893 c003 	ldrb.w	ip, [r3, #3]
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	f893 e006 	ldrb.w	lr, [r3, #6]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da60:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 800da64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800da66:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 800da6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800da6c:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 800da70:	697c      	ldr	r4, [r7, #20]
 800da72:	3420      	adds	r4, #32
 800da74:	9404      	str	r4, [sp, #16]
 800da76:	9003      	str	r0, [sp, #12]
 800da78:	9102      	str	r1, [sp, #8]
 800da7a:	9201      	str	r2, [sp, #4]
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	4673      	mov	r3, lr
 800da80:	4662      	mov	r2, ip
 800da82:	4631      	mov	r1, r6
 800da84:	4628      	mov	r0, r5
 800da86:	f7ff fd46 	bl	800d516 <VL53LX_f_014>
 800da8a:	4603      	mov	r3, r0
 800da8c:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800da8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d109      	bne.n	800daaa <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800da96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da98:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 800da9c:	7fb8      	ldrb	r0, [r7, #30]
 800da9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daa0:	2101      	movs	r1, #1
 800daa2:	f7ff fb2e 	bl	800d102 <VL53LX_f_015>
 800daa6:	4603      	mov	r3, r0
 800daa8:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800daaa:	7fbb      	ldrb	r3, [r7, #30]
 800daac:	3301      	adds	r3, #1
 800daae:	77bb      	strb	r3, [r7, #30]
 800dab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dab2:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800dab6:	7fba      	ldrb	r2, [r7, #30]
 800dab8:	429a      	cmp	r2, r3
 800daba:	f4ff af52 	bcc.w	800d962 <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800dabe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d107      	bne.n	800dad6 <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	785b      	ldrb	r3, [r3, #1]
 800daca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dacc:	4618      	mov	r0, r3
 800dace:	f7ff fa41 	bl	800cf54 <VL53LX_f_016>
 800dad2:	4603      	mov	r3, r0
 800dad4:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800dad6:	2300      	movs	r3, #0
 800dad8:	77bb      	strb	r3, [r7, #30]
 800dada:	e071      	b.n	800dbc0 <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800dadc:	7fba      	ldrb	r2, [r7, #30]
 800dade:	4613      	mov	r3, r2
 800dae0:	00db      	lsls	r3, r3, #3
 800dae2:	4413      	add	r3, r2
 800dae4:	009b      	lsls	r3, r3, #2
 800dae6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800daea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800daec:	4413      	add	r3, r2
 800daee:	3304      	adds	r3, #4
 800daf0:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800daf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daf4:	7c9a      	ldrb	r2, [r3, #18]
 800daf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800daf8:	7c5b      	ldrb	r3, [r3, #17]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d25c      	bcs.n	800dbb8 <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800db06:	429a      	cmp	r2, r3
 800db08:	dd57      	ble.n	800dbba <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800db0e:	2bff      	cmp	r3, #255	; 0xff
 800db10:	d053      	beq.n	800dbba <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800db12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db14:	7c9b      	ldrb	r3, [r3, #18]
 800db16:	461a      	mov	r2, r3
			prange_data =
 800db18:	234c      	movs	r3, #76	; 0x4c
 800db1a:	fb03 f302 	mul.w	r3, r3, r2
 800db1e:	3310      	adds	r3, #16
 800db20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db22:	4413      	add	r3, r2
 800db24:	3304      	adds	r3, #4
 800db26:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800db28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d115      	bne.n	800db5c <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800db30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db32:	7c98      	ldrb	r0, [r3, #18]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f893 1020 	ldrb.w	r1, [r3, #32]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	8b5d      	ldrh	r5, [r3, #26]
 800db44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db46:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800db4a:	693a      	ldr	r2, [r7, #16]
 800db4c:	9202      	str	r2, [sp, #8]
 800db4e:	697a      	ldr	r2, [r7, #20]
 800db50:	9201      	str	r2, [sp, #4]
 800db52:	9300      	str	r3, [sp, #0]
 800db54:	462b      	mov	r3, r5
 800db56:	4622      	mov	r2, r4
 800db58:	f7ff fd85 	bl	800d666 <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800db5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d115      	bne.n	800db90 <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 800db6a:	69bb      	ldr	r3, [r7, #24]
 800db6c:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800db76:	69bb      	ldr	r3, [r7, #24]
 800db78:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 800db7c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800db80:	9301      	str	r3, [sp, #4]
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	9300      	str	r3, [sp, #0]
 800db86:	4623      	mov	r3, r4
 800db88:	f000 fb11 	bl	800e1ae <VL53LX_f_018>
 800db8c:	4603      	mov	r3, r0
 800db8e:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800db90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d108      	bne.n	800dbaa <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	8bd8      	ldrh	r0, [r3, #30]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800dba2:	693a      	ldr	r2, [r7, #16]
 800dba4:	4619      	mov	r1, r3
 800dba6:	f000 fba7 	bl	800e2f8 <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800dbaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbac:	7c9b      	ldrb	r3, [r3, #18]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	b2da      	uxtb	r2, r3
 800dbb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbb4:	749a      	strb	r2, [r3, #18]
 800dbb6:	e000      	b.n	800dbba <VL53LX_f_025+0x400>
			continue;
 800dbb8:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800dbba:	7fbb      	ldrb	r3, [r7, #30]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	77bb      	strb	r3, [r7, #30]
 800dbc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbc2:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800dbc6:	7fba      	ldrb	r2, [r7, #30]
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d387      	bcc.n	800dadc <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800dbcc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3724      	adds	r7, #36	; 0x24
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dbd8 <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b08c      	sub	sp, #48	; 0x30
 800dbdc:	af02      	add	r7, sp, #8
 800dbde:	60b9      	str	r1, [r7, #8]
 800dbe0:	607a      	str	r2, [r7, #4]
 800dbe2:	603b      	str	r3, [r7, #0]
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800dbee:	7bfa      	ldrb	r2, [r7, #15]
 800dbf0:	4613      	mov	r3, r2
 800dbf2:	00db      	lsls	r3, r3, #3
 800dbf4:	4413      	add	r3, r2
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	4413      	add	r3, r2
 800dc00:	3304      	adds	r3, #4
 800dc02:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800dc04:	2300      	movs	r3, #0
 800dc06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800dc12:	2300      	movs	r3, #0
 800dc14:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800dc16:	2300      	movs	r3, #0
 800dc18:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	785a      	ldrb	r2, [r3, #1]
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	781a      	ldrb	r2, [r3, #0]
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	789a      	ldrb	r2, [r3, #2]
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800dc32:	6a3b      	ldr	r3, [r7, #32]
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc3a:	e04d      	b.n	800dcd8 <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	78da      	ldrb	r2, [r3, #3]
 800dc40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc44:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc48:	fb02 f201 	mul.w	r2, r2, r1
 800dc4c:	1a9b      	subs	r3, r3, r2
 800dc4e:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800dc50:	6a3b      	ldr	r3, [r7, #32]
 800dc52:	7999      	ldrb	r1, [r3, #6]
 800dc54:	f107 0218 	add.w	r2, r7, #24
 800dc58:	7ff8      	ldrb	r0, [r7, #31]
 800dc5a:	f107 0310 	add.w	r3, r7, #16
 800dc5e:	9301      	str	r3, [sp, #4]
 800dc60:	f107 0314 	add.w	r3, r7, #20
 800dc64:	9300      	str	r3, [sp, #0]
 800dc66:	4613      	mov	r3, r2
 800dc68:	68ba      	ldr	r2, [r7, #8]
 800dc6a:	f000 fa47 	bl	800e0fc <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800dc6e:	7ffb      	ldrb	r3, [r7, #31]
 800dc70:	69ba      	ldr	r2, [r7, #24]
 800dc72:	6839      	ldr	r1, [r7, #0]
 800dc74:	009b      	lsls	r3, r3, #2
 800dc76:	440b      	add	r3, r1
 800dc78:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800dc7a:	7ffb      	ldrb	r3, [r7, #31]
 800dc7c:	697a      	ldr	r2, [r7, #20]
 800dc7e:	6839      	ldr	r1, [r7, #0]
 800dc80:	3318      	adds	r3, #24
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	440b      	add	r3, r1
 800dc86:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800dc88:	7ffb      	ldrb	r3, [r7, #31]
 800dc8a:	693a      	ldr	r2, [r7, #16]
 800dc8c:	6839      	ldr	r1, [r7, #0]
 800dc8e:	3330      	adds	r3, #48	; 0x30
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	440b      	add	r3, r1
 800dc94:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800dc96:	69ba      	ldr	r2, [r7, #24]
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	689a      	ldr	r2, [r3, #8]
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800dca4:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800dca6:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800dca8:	6839      	ldr	r1, [r7, #0]
 800dcaa:	3348      	adds	r3, #72	; 0x48
 800dcac:	009b      	lsls	r3, r3, #2
 800dcae:	440b      	add	r3, r1
 800dcb0:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800dcb2:	697a      	ldr	r2, [r7, #20]
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	689a      	ldr	r2, [r3, #8]
 800dcbc:	69bb      	ldr	r3, [r7, #24]
 800dcbe:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800dcc0:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800dcc2:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800dcc4:	6839      	ldr	r1, [r7, #0]
 800dcc6:	3360      	adds	r3, #96	; 0x60
 800dcc8:	009b      	lsls	r3, r3, #2
 800dcca:	440b      	add	r3, r1
 800dccc:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800dcce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dcd8:	6a3b      	ldr	r3, [r7, #32]
 800dcda:	791b      	ldrb	r3, [r3, #4]
 800dcdc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d9ab      	bls.n	800dc3c <VL53LX_f_026+0x64>
	}

	return status;
 800dce4:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3728      	adds	r7, #40	; 0x28
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800dcf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcf2:	b08f      	sub	sp, #60	; 0x3c
 800dcf4:	af06      	add	r7, sp, #24
 800dcf6:	60ba      	str	r2, [r7, #8]
 800dcf8:	607b      	str	r3, [r7, #4]
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	73fb      	strb	r3, [r7, #15]
 800dcfe:	460b      	mov	r3, r1
 800dd00:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800dd02:	2300      	movs	r3, #0
 800dd04:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800dd06:	2300      	movs	r3, #0
 800dd08:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800dd0a:	7bfa      	ldrb	r2, [r7, #15]
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	00db      	lsls	r3, r3, #3
 800dd10:	4413      	add	r3, r2
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	4413      	add	r3, r2
 800dd1c:	3304      	adds	r3, #4
 800dd1e:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800dd20:	2300      	movs	r3, #0
 800dd22:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800dd24:	2300      	movs	r3, #0
 800dd26:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800dd2c:	69bb      	ldr	r3, [r7, #24]
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	77fb      	strb	r3, [r7, #31]
 800dd32:	e0b9      	b.n	800dea8 <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	78da      	ldrb	r2, [r3, #3]
 800dd38:	7ffb      	ldrb	r3, [r7, #31]
 800dd3a:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd3e:	fb02 f201 	mul.w	r2, r2, r1
 800dd42:	1a9b      	subs	r3, r3, r2
 800dd44:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800dd46:	7ffb      	ldrb	r3, [r7, #31]
 800dd48:	3301      	adds	r3, #1
 800dd4a:	687a      	ldr	r2, [r7, #4]
 800dd4c:	78d2      	ldrb	r2, [r2, #3]
 800dd4e:	fb93 f1f2 	sdiv	r1, r3, r2
 800dd52:	fb02 f201 	mul.w	r2, r2, r1
 800dd56:	1a9b      	subs	r3, r3, r2
 800dd58:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	789b      	ldrb	r3, [r3, #2]
 800dd5e:	7dfa      	ldrb	r2, [r7, #23]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	f080 809e 	bcs.w	800dea2 <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800dd6a:	7dba      	ldrb	r2, [r7, #22]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	f080 8098 	bcs.w	800dea2 <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800dd72:	7dfb      	ldrb	r3, [r7, #23]
 800dd74:	68ba      	ldr	r2, [r7, #8]
 800dd76:	3348      	adds	r3, #72	; 0x48
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	4413      	add	r3, r2
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d10e      	bne.n	800dda0 <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800dd82:	7dfb      	ldrb	r3, [r7, #23]
 800dd84:	68ba      	ldr	r2, [r7, #8]
 800dd86:	3360      	adds	r3, #96	; 0x60
 800dd88:	009b      	lsls	r3, r3, #2
 800dd8a:	4413      	add	r3, r2
 800dd8c:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d106      	bne.n	800dda0 <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800dd92:	7dfb      	ldrb	r3, [r7, #23]
 800dd94:	68ba      	ldr	r2, [r7, #8]
 800dd96:	4413      	add	r3, r2
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800dd9e:	e043      	b.n	800de28 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800dda0:	7dfb      	ldrb	r3, [r7, #23]
 800dda2:	68ba      	ldr	r2, [r7, #8]
 800dda4:	3348      	adds	r3, #72	; 0x48
 800dda6:	009b      	lsls	r3, r3, #2
 800dda8:	4413      	add	r3, r2
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	db0e      	blt.n	800ddce <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800ddb0:	7dfb      	ldrb	r3, [r7, #23]
 800ddb2:	68ba      	ldr	r2, [r7, #8]
 800ddb4:	3360      	adds	r3, #96	; 0x60
 800ddb6:	009b      	lsls	r3, r3, #2
 800ddb8:	4413      	add	r3, r2
 800ddba:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	db06      	blt.n	800ddce <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800ddc0:	7dfb      	ldrb	r3, [r7, #23]
 800ddc2:	68ba      	ldr	r2, [r7, #8]
 800ddc4:	4413      	add	r3, r2
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800ddcc:	e02c      	b.n	800de28 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800ddce:	7dfb      	ldrb	r3, [r7, #23]
 800ddd0:	68ba      	ldr	r2, [r7, #8]
 800ddd2:	3348      	adds	r3, #72	; 0x48
 800ddd4:	009b      	lsls	r3, r3, #2
 800ddd6:	4413      	add	r3, r2
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	da1e      	bge.n	800de1c <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800ddde:	7dfb      	ldrb	r3, [r7, #23]
 800dde0:	68ba      	ldr	r2, [r7, #8]
 800dde2:	3360      	adds	r3, #96	; 0x60
 800dde4:	009b      	lsls	r3, r3, #2
 800dde6:	4413      	add	r3, r2
 800dde8:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	db16      	blt.n	800de1c <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800ddee:	7dbb      	ldrb	r3, [r7, #22]
 800ddf0:	68ba      	ldr	r2, [r7, #8]
 800ddf2:	3348      	adds	r3, #72	; 0x48
 800ddf4:	009b      	lsls	r3, r3, #2
 800ddf6:	4413      	add	r3, r2
 800ddf8:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	db0e      	blt.n	800de1c <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800ddfe:	7dbb      	ldrb	r3, [r7, #22]
 800de00:	68ba      	ldr	r2, [r7, #8]
 800de02:	3360      	adds	r3, #96	; 0x60
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	4413      	add	r3, r2
 800de08:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	da06      	bge.n	800de1c <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800de0e:	7dfb      	ldrb	r3, [r7, #23]
 800de10:	68ba      	ldr	r2, [r7, #8]
 800de12:	4413      	add	r3, r2
 800de14:	2201      	movs	r2, #1
 800de16:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800de1a:	e005      	b.n	800de28 <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800de1c:	7dfb      	ldrb	r3, [r7, #23]
 800de1e:	68ba      	ldr	r2, [r7, #8]
 800de20:	4413      	add	r3, r2
 800de22:	2200      	movs	r2, #0
 800de24:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800de28:	7dfb      	ldrb	r3, [r7, #23]
 800de2a:	68ba      	ldr	r2, [r7, #8]
 800de2c:	4413      	add	r3, r2
 800de2e:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 800de32:	2b00      	cmp	r3, #0
 800de34:	d035      	beq.n	800dea2 <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800de36:	69bb      	ldr	r3, [r7, #24]
 800de38:	7ffa      	ldrb	r2, [r7, #31]
 800de3a:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800de3c:	7dfb      	ldrb	r3, [r7, #23]
 800de3e:	68ba      	ldr	r2, [r7, #8]
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	4413      	add	r3, r2
 800de44:	685c      	ldr	r4, [r3, #4]
 800de46:	7dfb      	ldrb	r3, [r7, #23]
 800de48:	68ba      	ldr	r2, [r7, #8]
 800de4a:	3318      	adds	r3, #24
 800de4c:	009b      	lsls	r3, r3, #2
 800de4e:	4413      	add	r3, r2
 800de50:	685d      	ldr	r5, [r3, #4]
 800de52:	7dfb      	ldrb	r3, [r7, #23]
 800de54:	68ba      	ldr	r2, [r7, #8]
 800de56:	3330      	adds	r3, #48	; 0x30
 800de58:	009b      	lsls	r3, r3, #2
 800de5a:	4413      	add	r3, r2
 800de5c:	685e      	ldr	r6, [r3, #4]
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	689b      	ldr	r3, [r3, #8]
 800de62:	687a      	ldr	r2, [r7, #4]
 800de64:	78d2      	ldrb	r2, [r2, #3]
 800de66:	69b9      	ldr	r1, [r7, #24]
 800de68:	3118      	adds	r1, #24
 800de6a:	7ff8      	ldrb	r0, [r7, #31]
 800de6c:	9105      	str	r1, [sp, #20]
 800de6e:	9204      	str	r2, [sp, #16]
 800de70:	9303      	str	r3, [sp, #12]
 800de72:	2300      	movs	r3, #0
 800de74:	9302      	str	r3, [sp, #8]
 800de76:	2300      	movs	r3, #0
 800de78:	9301      	str	r3, [sp, #4]
 800de7a:	2300      	movs	r3, #0
 800de7c:	9300      	str	r3, [sp, #0]
 800de7e:	4633      	mov	r3, r6
 800de80:	462a      	mov	r2, r5
 800de82:	4621      	mov	r1, r4
 800de84:	f000 f81c 	bl	800dec0 <VL53LX_f_028>
 800de88:	4603      	mov	r3, r0
 800de8a:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800de8c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800de90:	f113 0f0f 	cmn.w	r3, #15
 800de94:	d105      	bne.n	800dea2 <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800de96:	7dfb      	ldrb	r3, [r7, #23]
 800de98:	68ba      	ldr	r2, [r7, #8]
 800de9a:	4413      	add	r3, r2
 800de9c:	2200      	movs	r2, #0
 800de9e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800dea2:	7ffb      	ldrb	r3, [r7, #31]
 800dea4:	3301      	adds	r3, #1
 800dea6:	77fb      	strb	r3, [r7, #31]
 800dea8:	69bb      	ldr	r3, [r7, #24]
 800deaa:	791b      	ldrb	r3, [r3, #4]
 800deac:	7ffa      	ldrb	r2, [r7, #31]
 800deae:	429a      	cmp	r2, r3
 800deb0:	f4ff af40 	bcc.w	800dd34 <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800deb4:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3724      	adds	r7, #36	; 0x24
 800debc:	46bd      	mov	sp, r7
 800debe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dec0 <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800dec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dec4:	b09e      	sub	sp, #120	; 0x78
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	64b9      	str	r1, [r7, #72]	; 0x48
 800deca:	647a      	str	r2, [r7, #68]	; 0x44
 800decc:	643b      	str	r3, [r7, #64]	; 0x40
 800dece:	4603      	mov	r3, r0
 800ded0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800ded4:	23f1      	movs	r3, #241	; 0xf1
 800ded6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800deda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dede:	f04f 0300 	mov.w	r3, #0
 800dee2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800dee6:	f04f 0200 	mov.w	r2, #0
 800deea:	f04f 0300 	mov.w	r3, #0
 800deee:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  half_b_minus_amb = 0;
 800def2:	f04f 0200 	mov.w	r2, #0
 800def6:	f04f 0300 	mov.w	r3, #0
 800defa:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800defe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df00:	4618      	mov	r0, r3
 800df02:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800df06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800df0a:	461a      	mov	r2, r3
 800df0c:	ea4f 73e2 	mov.w	r3, r2, asr #31
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800df10:	ebb0 0802 	subs.w	r8, r0, r2
 800df14:	eb61 0903 	sbc.w	r9, r1, r3
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800df18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df1a:	461a      	mov	r2, r3
 800df1c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800df20:	ebb8 0a02 	subs.w	sl, r8, r2
 800df24:	eb69 0b03 	sbc.w	fp, r9, r3
 800df28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800df2c:	461a      	mov	r2, r3
 800df2e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800df32:	ebba 0402 	subs.w	r4, sl, r2
 800df36:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800df3a:	f04f 0200 	mov.w	r2, #0
 800df3e:	f04f 0300 	mov.w	r3, #0
 800df42:	032b      	lsls	r3, r5, #12
 800df44:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800df48:	0322      	lsls	r2, r4, #12
 800df4a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800df4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df50:	4618      	mov	r0, r3
 800df52:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800df56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800df5a:	461a      	mov	r2, r3
 800df5c:	ea4f 73e2 	mov.w	r3, r2, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800df60:	1a84      	subs	r4, r0, r2
 800df62:	63bc      	str	r4, [r7, #56]	; 0x38
 800df64:	eb61 0303 	sbc.w	r3, r1, r3
 800df68:	63fb      	str	r3, [r7, #60]	; 0x3c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800df6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800df6e:	461a      	mov	r2, r3
 800df70:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800df74:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800df78:	4621      	mov	r1, r4
 800df7a:	1a89      	subs	r1, r1, r2
 800df7c:	6339      	str	r1, [r7, #48]	; 0x30
 800df7e:	4629      	mov	r1, r5
 800df80:	eb61 0303 	sbc.w	r3, r1, r3
 800df84:	637b      	str	r3, [r7, #52]	; 0x34
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800df86:	f04f 0200 	mov.w	r2, #0
 800df8a:	f04f 0300 	mov.w	r3, #0
 800df8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800df92:	4629      	mov	r1, r5
 800df94:	030b      	lsls	r3, r1, #12
 800df96:	4621      	mov	r1, r4
 800df98:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800df9c:	4621      	mov	r1, r4
 800df9e:	030a      	lsls	r2, r1, #12
 800dfa0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	if (half_b_minus_amb != 0) {
 800dfa4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dfa8:	4313      	orrs	r3, r2
 800dfaa:	f000 809c 	beq.w	800e0e6 <VL53LX_f_028+0x226>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800dfae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800dfb2:	f04f 0000 	mov.w	r0, #0
 800dfb6:	f04f 0100 	mov.w	r1, #0
 800dfba:	0319      	lsls	r1, r3, #12
 800dfbc:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800dfc0:	0310      	lsls	r0, r2, #12
 800dfc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dfc6:	1814      	adds	r4, r2, r0
 800dfc8:	623c      	str	r4, [r7, #32]
 800dfca:	414b      	adcs	r3, r1
 800dfcc:	627b      	str	r3, [r7, #36]	; 0x24
 800dfce:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800dfd2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800dfd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dfda:	1891      	adds	r1, r2, r2
 800dfdc:	61b9      	str	r1, [r7, #24]
 800dfde:	415b      	adcs	r3, r3
 800dfe0:	61fb      	str	r3, [r7, #28]
 800dfe2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dfe6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dfea:	f7f2 f949 	bl	8000280 <__aeabi_ldivmod>
 800dfee:	4602      	mov	r2, r0
 800dff0:	460b      	mov	r3, r1
 800dff2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		mean_phase  +=  2048;
 800dff6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800dffa:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800dffe:	6139      	str	r1, [r7, #16]
 800e000:	f143 0300 	adc.w	r3, r3, #0
 800e004:	617b      	str	r3, [r7, #20]
 800e006:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e00a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase  += (4096 * (int64_t)bin);
 800e00e:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 800e012:	f04f 0100 	mov.w	r1, #0
 800e016:	f04f 0200 	mov.w	r2, #0
 800e01a:	f04f 0300 	mov.w	r3, #0
 800e01e:	030b      	lsls	r3, r1, #12
 800e020:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 800e024:	0302      	lsls	r2, r0, #12
 800e026:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e02a:	1884      	adds	r4, r0, r2
 800e02c:	60bc      	str	r4, [r7, #8]
 800e02e:	eb41 0303 	adc.w	r3, r1, r3
 800e032:	60fb      	str	r3, [r7, #12]
 800e034:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e038:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800e03c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e040:	1c51      	adds	r1, r2, #1
 800e042:	62b9      	str	r1, [r7, #40]	; 0x28
 800e044:	f143 0300 	adc.w	r3, r3, #0
 800e048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e04a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800e04e:	462b      	mov	r3, r5
 800e050:	0fdb      	lsrs	r3, r3, #31
 800e052:	461a      	mov	r2, r3
 800e054:	f04f 0300 	mov.w	r3, #0
 800e058:	4621      	mov	r1, r4
 800e05a:	1851      	adds	r1, r2, r1
 800e05c:	6039      	str	r1, [r7, #0]
 800e05e:	4629      	mov	r1, r5
 800e060:	eb43 0101 	adc.w	r1, r3, r1
 800e064:	6079      	str	r1, [r7, #4]
 800e066:	f04f 0200 	mov.w	r2, #0
 800e06a:	f04f 0300 	mov.w	r3, #0
 800e06e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e072:	4621      	mov	r1, r4
 800e074:	084a      	lsrs	r2, r1, #1
 800e076:	4629      	mov	r1, r5
 800e078:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800e07c:	4629      	mov	r1, r5
 800e07e:	104b      	asrs	r3, r1, #1
 800e080:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		if (mean_phase  < 0)
 800e084:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e088:	2a00      	cmp	r2, #0
 800e08a:	f173 0300 	sbcs.w	r3, r3, #0
 800e08e:	da05      	bge.n	800e09c <VL53LX_f_028+0x1dc>
			mean_phase = 0;
 800e090:	f04f 0200 	mov.w	r2, #0
 800e094:	f04f 0300 	mov.w	r3, #0
 800e098:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800e09c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e0a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e0a4:	f04f 0100 	mov.w	r1, #0
 800e0a8:	4290      	cmp	r0, r2
 800e0aa:	eb71 0303 	sbcs.w	r3, r1, r3
 800e0ae:	da05      	bge.n	800e0bc <VL53LX_f_028+0x1fc>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800e0b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0b4:	f04f 0300 	mov.w	r3, #0
 800e0b8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		mean_phase32 = (int32_t)mean_phase;
 800e0bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e0be:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800e0c0:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800e0c4:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800e0c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0c8:	fb93 f1f2 	sdiv	r1, r3, r2
 800e0cc:	fb02 f201 	mul.w	r2, r2, r1
 800e0d0:	1a9b      	subs	r3, r3, r2
 800e0d2:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase = mean_phase32;
 800e0d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e0dc:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		status = VL53LX_ERROR_NONE;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	}

	*pmean_phase = (uint32_t)mean_phase;
 800e0e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e0e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e0ec:	601a      	str	r2, [r3, #0]

	return status;
 800e0ee:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3778      	adds	r7, #120	; 0x78
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e0fc <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b087      	sub	sp, #28
 800e100:	af00      	add	r7, sp, #0
 800e102:	60ba      	str	r2, [r7, #8]
 800e104:	607b      	str	r3, [r7, #4]
 800e106:	4603      	mov	r3, r0
 800e108:	73fb      	strb	r3, [r7, #15]
 800e10a:	460b      	mov	r3, r1
 800e10c:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800e10e:	2300      	movs	r3, #0
 800e110:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800e112:	2300      	movs	r3, #0
 800e114:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800e11c:	7bfa      	ldrb	r2, [r7, #15]
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	3206      	adds	r2, #6
 800e122:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e126:	6a3b      	ldr	r3, [r7, #32]
 800e128:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800e12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12c:	2200      	movs	r2, #0
 800e12e:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800e130:	2300      	movs	r3, #0
 800e132:	75fb      	strb	r3, [r7, #23]
 800e134:	e02f      	b.n	800e196 <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800e136:	7bfa      	ldrb	r2, [r7, #15]
 800e138:	7dfb      	ldrb	r3, [r7, #23]
 800e13a:	4413      	add	r3, r2
 800e13c:	68ba      	ldr	r2, [r7, #8]
 800e13e:	7a92      	ldrb	r2, [r2, #10]
 800e140:	441a      	add	r2, r3
 800e142:	7bbb      	ldrb	r3, [r7, #14]
 800e144:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800e146:	68ba      	ldr	r2, [r7, #8]
 800e148:	7a92      	ldrb	r2, [r2, #10]
 800e14a:	fb93 f1f2 	sdiv	r1, r3, r2
 800e14e:	fb02 f201 	mul.w	r2, r2, r1
 800e152:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800e154:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800e156:	7dfa      	ldrb	r2, [r7, #23]
 800e158:	7bbb      	ldrb	r3, [r7, #14]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d20a      	bcs.n	800e174 <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	7db9      	ldrb	r1, [r7, #22]
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	3106      	adds	r1, #6
 800e168:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e16c:	441a      	add	r2, r3
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	601a      	str	r2, [r3, #0]
 800e172:	e00d      	b.n	800e190 <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800e174:	7dfa      	ldrb	r2, [r7, #23]
 800e176:	7bbb      	ldrb	r3, [r7, #14]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d909      	bls.n	800e190 <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800e17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	7db9      	ldrb	r1, [r7, #22]
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	3106      	adds	r1, #6
 800e186:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e18a:	441a      	add	r2, r3
 800e18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18e:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800e190:	7dfb      	ldrb	r3, [r7, #23]
 800e192:	3301      	adds	r3, #1
 800e194:	75fb      	strb	r3, [r7, #23]
 800e196:	7bbb      	ldrb	r3, [r7, #14]
 800e198:	005a      	lsls	r2, r3, #1
 800e19a:	7dfb      	ldrb	r3, [r7, #23]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	daca      	bge.n	800e136 <VL53LX_f_022+0x3a>
	}
}
 800e1a0:	bf00      	nop
 800e1a2:	bf00      	nop
 800e1a4:	371c      	adds	r7, #28
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ac:	4770      	bx	lr

0800e1ae <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800e1ae:	b580      	push	{r7, lr}
 800e1b0:	b088      	sub	sp, #32
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	60ba      	str	r2, [r7, #8]
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	81fb      	strh	r3, [r7, #14]
 800e1bc:	460b      	mov	r3, r1
 800e1be:	81bb      	strh	r3, [r7, #12]
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800e1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d6:	89fa      	ldrh	r2, [r7, #14]
 800e1d8:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800e1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1dc:	89ba      	ldrh	r2, [r7, #12]
 800e1de:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800e1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e2:	68ba      	ldr	r2, [r7, #8]
 800e1e4:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800e1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e8:	88fa      	ldrh	r2, [r7, #6]
 800e1ea:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800e1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ee:	8a5b      	ldrh	r3, [r3, #18]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d101      	bne.n	800e1f8 <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e1f4:	23f1      	movs	r3, #241	; 0xf1
 800e1f6:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800e1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fa:	699b      	ldr	r3, [r3, #24]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d101      	bne.n	800e204 <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e200:	23f1      	movs	r3, #241	; 0xf1
 800e202:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800e204:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d16f      	bne.n	800e2ec <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800e20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20e:	8a5b      	ldrh	r3, [r3, #18]
 800e210:	4618      	mov	r0, r3
 800e212:	f7fd faa6 	bl	800b762 <VL53LX_calc_pll_period_us>
 800e216:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800e218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21a:	699b      	ldr	r3, [r3, #24]
 800e21c:	3301      	adds	r3, #1
 800e21e:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800e220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e222:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800e224:	4619      	mov	r1, r3
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e22c:	6978      	ldr	r0, [r7, #20]
 800e22e:	f7fd faaf 	bl	800b790 <VL53LX_duration_maths>
 800e232:	4602      	mov	r2, r0
 800e234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e236:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800e238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23a:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800e23c:	0119      	lsls	r1, r3, #4
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e244:	6978      	ldr	r0, [r7, #20]
 800e246:	f7fd faa3 	bl	800b790 <VL53LX_duration_maths>
 800e24a:	4602      	mov	r2, r0
 800e24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24e:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800e254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e256:	69db      	ldr	r3, [r3, #28]
 800e258:	4619      	mov	r1, r3
 800e25a:	4610      	mov	r0, r2
 800e25c:	f7fd fd01 	bl	800bc62 <VL53LX_rate_maths>
 800e260:	4603      	mov	r3, r0
 800e262:	461a      	mov	r2, r3
 800e264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e266:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800e26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26e:	6a1b      	ldr	r3, [r3, #32]
 800e270:	4619      	mov	r1, r3
 800e272:	4610      	mov	r0, r2
 800e274:	f7fd fcf5 	bl	800bc62 <VL53LX_rate_maths>
 800e278:	4603      	mov	r3, r0
 800e27a:	461a      	mov	r2, r3
 800e27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27e:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800e280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800e284:	461a      	mov	r2, r3
 800e286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e288:	6a1b      	ldr	r3, [r3, #32]
 800e28a:	4619      	mov	r1, r3
 800e28c:	4610      	mov	r0, r2
 800e28e:	f7fd fce8 	bl	800bc62 <VL53LX_rate_maths>
 800e292:	4603      	mov	r3, r0
 800e294:	461a      	mov	r2, r3
 800e296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e298:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800e29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e29c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800e29e:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800e2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 800e2a4:	4413      	add	r3, r2
 800e2a6:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800e2a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d905      	bls.n	800e2bc <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800e2b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e2b4:	69ba      	ldr	r2, [r7, #24]
 800e2b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2ba:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800e2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2be:	8ada      	ldrh	r2, [r3, #22]
 800e2c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e2c4:	69b9      	ldr	r1, [r7, #24]
 800e2c6:	2006      	movs	r0, #6
 800e2c8:	f7fd fd10 	bl	800bcec <VL53LX_rate_per_spad_maths>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800e2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d2:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800e2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2da:	8ad9      	ldrh	r1, [r3, #22]
 800e2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2de:	69db      	ldr	r3, [r3, #28]
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	f7fd faaf 	bl	800b844 <VL53LX_events_per_spad_maths>
 800e2e6:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800e2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ea:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800e2ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3720      	adds	r7, #32
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800e2f8:	b590      	push	{r4, r7, lr}
 800e2fa:	b085      	sub	sp, #20
 800e2fc:	af02      	add	r7, sp, #8
 800e2fe:	4603      	mov	r3, r0
 800e300:	603a      	str	r2, [r7, #0]
 800e302:	80fb      	strh	r3, [r7, #6]
 800e304:	460b      	mov	r3, r1
 800e306:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	8a58      	ldrh	r0, [r3, #18]
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	8a9c      	ldrh	r4, [r3, #20]
 800e314:	88fb      	ldrh	r3, [r7, #6]
 800e316:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e31a:	9201      	str	r2, [sp, #4]
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	2300      	movs	r3, #0
 800e320:	4622      	mov	r2, r4
 800e322:	f7fd fd17 	bl	800bd54 <VL53LX_range_maths>
 800e326:	4603      	mov	r3, r0
 800e328:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	8a58      	ldrh	r0, [r3, #18]
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	8a9c      	ldrh	r4, [r3, #20]
 800e33e:	88fb      	ldrh	r3, [r7, #6]
 800e340:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e344:	9201      	str	r2, [sp, #4]
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	2300      	movs	r3, #0
 800e34a:	4622      	mov	r2, r4
 800e34c:	f7fd fd02 	bl	800bd54 <VL53LX_range_maths>
 800e350:	4603      	mov	r3, r0
 800e352:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	8a58      	ldrh	r0, [r3, #18]
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	8a9c      	ldrh	r4, [r3, #20]
 800e368:	88fb      	ldrh	r3, [r7, #6]
 800e36a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e36e:	9201      	str	r2, [sp, #4]
 800e370:	9300      	str	r3, [sp, #0]
 800e372:	2300      	movs	r3, #0
 800e374:	4622      	mov	r2, r4
 800e376:	f7fd fced 	bl	800bd54 <VL53LX_range_maths>
 800e37a:	4603      	mov	r3, r0
 800e37c:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 800e384:	bf00      	nop
 800e386:	370c      	adds	r7, #12
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd90      	pop	{r4, r7, pc}

0800e38c <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b086      	sub	sp, #24
 800e390:	af00      	add	r7, sp, #0
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	60b9      	str	r1, [r7, #8]
 800e396:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800e398:	2300      	movs	r3, #0
 800e39a:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800e39c:	2300      	movs	r3, #0
 800e39e:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	757b      	strb	r3, [r7, #21]





	memcpy(
 800e3a8:	22ac      	movs	r2, #172	; 0xac
 800e3aa:	68b9      	ldr	r1, [r7, #8]
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f006 fe0f 	bl	8014fd0 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	75fb      	strb	r3, [r7, #23]
 800e3b6:	e008      	b.n	800e3ca <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800e3b8:	7dfa      	ldrb	r2, [r7, #23]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	3206      	adds	r2, #6
 800e3be:	2100      	movs	r1, #0
 800e3c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800e3c4:	7dfb      	ldrb	r3, [r7, #23]
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	75fb      	strb	r3, [r7, #23]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	7a5b      	ldrb	r3, [r3, #9]
 800e3ce:	7dfa      	ldrb	r2, [r7, #23]
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d3f1      	bcc.n	800e3b8 <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800e3d4:	68f9      	ldr	r1, [r7, #12]
 800e3d6:	68b8      	ldr	r0, [r7, #8]
 800e3d8:	f000 f878 	bl	800e4cc <VL53LX_f_030>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	7a9a      	ldrb	r2, [r3, #10]
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	7a9b      	ldrb	r3, [r3, #10]
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d203      	bcs.n	800e3f4 <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	7a9b      	ldrb	r3, [r3, #10]
 800e3f0:	75bb      	strb	r3, [r7, #22]
 800e3f2:	e002      	b.n	800e3fa <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	7a9b      	ldrb	r3, [r3, #10]
 800e3f8:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	75fb      	strb	r3, [r7, #23]
 800e3fe:	e05c      	b.n	800e4ba <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800e400:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e404:	2b00      	cmp	r3, #0
 800e406:	db0f      	blt.n	800e428 <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800e408:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e40c:	461a      	mov	r2, r3
 800e40e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e412:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800e414:	68ba      	ldr	r2, [r7, #8]
 800e416:	7a92      	ldrb	r2, [r2, #10]
 800e418:	b252      	sxtb	r2, r2
 800e41a:	fb93 f1f2 	sdiv	r1, r3, r2
 800e41e:	fb02 f201 	mul.w	r2, r2, r1
 800e422:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800e424:	757b      	strb	r3, [r7, #21]
 800e426:	e013      	b.n	800e450 <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	7a9b      	ldrb	r3, [r3, #10]
 800e42c:	b25b      	sxtb	r3, r3
 800e42e:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800e430:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e434:	4619      	mov	r1, r3
 800e436:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e43a:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e43c:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800e43e:	68ba      	ldr	r2, [r7, #8]
 800e440:	7a92      	ldrb	r2, [r2, #10]
 800e442:	b252      	sxtb	r2, r2
 800e444:	fb93 f1f2 	sdiv	r1, r3, r2
 800e448:	fb02 f201 	mul.w	r2, r2, r1
 800e44c:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e44e:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800e450:	7d7b      	ldrb	r3, [r7, #21]
 800e452:	461a      	mov	r2, r3
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	3206      	adds	r2, #6
 800e458:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800e45c:	7df9      	ldrb	r1, [r7, #23]
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	3106      	adds	r1, #6
 800e462:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800e466:	429a      	cmp	r2, r3
 800e468:	dd12      	ble.n	800e490 <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800e46a:	7d7b      	ldrb	r3, [r7, #21]
 800e46c:	461a      	mov	r2, r3
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	3206      	adds	r2, #6
 800e472:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800e476:	7df9      	ldrb	r1, [r7, #23]
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	3106      	adds	r1, #6
 800e47c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800e480:	7d79      	ldrb	r1, [r7, #21]
 800e482:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800e484:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	1d82      	adds	r2, r0, #6
 800e48a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e48e:	e006      	b.n	800e49e <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800e490:	7d7b      	ldrb	r3, [r7, #21]
 800e492:	461a      	mov	r2, r3
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	3206      	adds	r2, #6
 800e498:	2100      	movs	r1, #0
 800e49a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800e49e:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e4a0:	7d7b      	ldrb	r3, [r7, #21]
 800e4a2:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	3206      	adds	r2, #6
 800e4a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	1d82      	adds	r2, r0, #6
 800e4b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800e4b4:	7dfb      	ldrb	r3, [r7, #23]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	75fb      	strb	r3, [r7, #23]
 800e4ba:	7dfa      	ldrb	r2, [r7, #23]
 800e4bc:	7dbb      	ldrb	r3, [r7, #22]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d39e      	bcc.n	800e400 <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800e4c2:	bf00      	nop
 800e4c4:	bf00      	nop
 800e4c6:	3718      	adds	r7, #24
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}

0800e4cc <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b086      	sub	sp, #24
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f7fd fd0b 	bl	800bf08 <VL53LX_decode_vcsel_period>
 800e4f2:	4603      	mov	r3, r0
	period = 2048 *
 800e4f4:	02db      	lsls	r3, r3, #11
 800e4f6:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d00a      	beq.n	800e514 <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 800e504:	68ba      	ldr	r2, [r7, #8]
 800e506:	fbb3 f2f2 	udiv	r2, r3, r2
 800e50a:	68b9      	ldr	r1, [r7, #8]
 800e50c:	fb01 f202 	mul.w	r2, r1, r2
 800e510:	1a9b      	subs	r3, r3, r2
 800e512:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800e51a:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800e51c:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e51e:	1ad3      	subs	r3, r2, r3
 800e520:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2b00      	cmp	r3, #0
 800e526:	dd09      	ble.n	800e53c <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e52e:	2b00      	cmp	r3, #0
 800e530:	da01      	bge.n	800e536 <VL53LX_f_030+0x6a>
 800e532:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800e536:	12db      	asrs	r3, r3, #11
 800e538:	75fb      	strb	r3, [r7, #23]
 800e53a:	e008      	b.n	800e54e <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e542:	2b00      	cmp	r3, #0
 800e544:	da01      	bge.n	800e54a <VL53LX_f_030+0x7e>
 800e546:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800e54a:	12db      	asrs	r3, r3, #11
 800e54c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800e54e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e552:	4618      	mov	r0, r3
 800e554:	3718      	adds	r7, #24
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}

0800e55a <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800e55a:	b580      	push	{r7, lr}
 800e55c:	b08e      	sub	sp, #56	; 0x38
 800e55e:	af00      	add	r7, sp, #0
 800e560:	6078      	str	r0, [r7, #4]
 800e562:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e564:	2300      	movs	r3, #0
 800e566:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800e56a:	2300      	movs	r3, #0
 800e56c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 800e570:	2300      	movs	r3, #0
 800e572:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 800e576:	2300      	movs	r3, #0
 800e578:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800e57a:	2300      	movs	r3, #0
 800e57c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 800e580:	2300      	movs	r3, #0
 800e582:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 800e586:	2300      	movs	r3, #0
 800e588:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800e58c:	22ac      	movs	r2, #172	; 0xac
 800e58e:	6879      	ldr	r1, [r7, #4]
 800e590:	6838      	ldr	r0, [r7, #0]
 800e592:	f006 fd1d 	bl	8014fd0 <memcpy>


	podata->VL53LX_p_021 = 0;
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	2200      	movs	r2, #0
 800e59a:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e59c:	2300      	movs	r3, #0
 800e59e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e5a2:	e00a      	b.n	800e5ba <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800e5a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e5a8:	683a      	ldr	r2, [r7, #0]
 800e5aa:	4413      	add	r3, r2
 800e5ac:	2210      	movs	r2, #16
 800e5ae:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e5b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e5b4:	3301      	adds	r3, #1
 800e5b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e5ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e5be:	2b05      	cmp	r3, #5
 800e5c0:	d9f0      	bls.n	800e5a4 <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e5c8:	e00b      	b.n	800e5e2 <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800e5ca:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	3206      	adds	r2, #6
 800e5d2:	2100      	movs	r1, #0
 800e5d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e5d8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e5dc:	3301      	adds	r3, #1
 800e5de:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	7a5b      	ldrb	r3, [r3, #9]
 800e5e6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d3ed      	bcc.n	800e5ca <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e5f4:	e014      	b.n	800e620 <VL53LX_f_031+0xc6>
		bin_initial_index[lc] = 0x00;
 800e5f6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e5fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e5fe:	4413      	add	r3, r2
 800e600:	2200      	movs	r2, #0
 800e602:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800e606:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e60a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e60e:	4413      	add	r3, r2
 800e610:	2200      	movs	r2, #0
 800e612:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e616:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e61a:	3301      	adds	r3, #1
 800e61c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e620:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e624:	2b0f      	cmp	r3, #15
 800e626:	d9e6      	bls.n	800e5f6 <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800e628:	2300      	movs	r3, #0
 800e62a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e62e:	2300      	movs	r3, #0
 800e630:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e634:	e06c      	b.n	800e710 <VL53LX_f_031+0x1b6>

		bin_cfg = pidata->bin_seq[lc];
 800e636:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e63a:	687a      	ldr	r2, [r7, #4]
 800e63c:	4413      	add	r3, r2
 800e63e:	7b1b      	ldrb	r3, [r3, #12]
 800e640:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800e644:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e648:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e64c:	4413      	add	r3, r2
 800e64e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d116      	bne.n	800e684 <VL53LX_f_031+0x12a>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800e656:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e65a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e65e:	0092      	lsls	r2, r2, #2
 800e660:	b2d2      	uxtb	r2, r2
 800e662:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e666:	440b      	add	r3, r1
 800e668:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800e66c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e670:	683a      	ldr	r2, [r7, #0]
 800e672:	4413      	add	r3, r2
 800e674:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e678:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800e67a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e67e:	3301      	adds	r3, #1
 800e680:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800e684:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e688:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e68c:	441a      	add	r2, r3
 800e68e:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800e692:	3201      	adds	r2, #1
 800e694:	b2d2      	uxtb	r2, r2
 800e696:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e69a:	440b      	add	r3, r1
 800e69c:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800e6a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e6a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e6a8:	4413      	add	r3, r2
 800e6aa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e6ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e6b8:	e021      	b.n	800e6fe <VL53LX_f_031+0x1a4>
			podata->bin_data[VL53LX_p_032+i] +=
 800e6ba:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e6be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e6c2:	441a      	add	r2, r3
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	3206      	adds	r2, #6
 800e6c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800e6cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e6d0:	009a      	lsls	r2, r3, #2
 800e6d2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e6d6:	441a      	add	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	3206      	adds	r2, #6
 800e6dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800e6e0:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 800e6e4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e6e8:	4402      	add	r2, r0
 800e6ea:	4419      	add	r1, r3
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	3206      	adds	r2, #6
 800e6f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800e6f4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e6fe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e702:	2b03      	cmp	r3, #3
 800e704:	d9d9      	bls.n	800e6ba <VL53LX_f_031+0x160>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e706:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e70a:	3301      	adds	r3, #1
 800e70c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e710:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e714:	2b05      	cmp	r3, #5
 800e716:	d98e      	bls.n	800e636 <VL53LX_f_031+0xdc>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e718:	2300      	movs	r3, #0
 800e71a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e71e:	e023      	b.n	800e768 <VL53LX_f_031+0x20e>

		bin_cfg = podata->bin_seq[lc];
 800e720:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e724:	683a      	ldr	r2, [r7, #0]
 800e726:	4413      	add	r3, r2
 800e728:	7b1b      	ldrb	r3, [r3, #12]
 800e72a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800e72e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e732:	2b0f      	cmp	r3, #15
 800e734:	d80d      	bhi.n	800e752 <VL53LX_f_031+0x1f8>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800e736:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 800e73a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 800e73e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e742:	440a      	add	r2, r1
 800e744:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800e748:	683a      	ldr	r2, [r7, #0]
 800e74a:	4413      	add	r3, r2
 800e74c:	460a      	mov	r2, r1
 800e74e:	749a      	strb	r2, [r3, #18]
 800e750:	e005      	b.n	800e75e <VL53LX_f_031+0x204>
		else
			podata->bin_rep[lc] = 0;
 800e752:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e756:	683a      	ldr	r2, [r7, #0]
 800e758:	4413      	add	r3, r2
 800e75a:	2200      	movs	r2, #0
 800e75c:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e75e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e762:	3301      	adds	r3, #1
 800e764:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e768:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e76c:	2b05      	cmp	r3, #5
 800e76e:	d9d7      	bls.n	800e720 <VL53LX_f_031+0x1c6>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800e770:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e774:	009b      	lsls	r3, r3, #2
 800e776:	b2da      	uxtb	r2, r3
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e77c:	2300      	movs	r3, #0
 800e77e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e782:	e052      	b.n	800e82a <VL53LX_f_031+0x2d0>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800e784:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e788:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e78c:	4413      	add	r3, r2
 800e78e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e792:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 800e794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e796:	2b00      	cmp	r3, #0
 800e798:	dd42      	ble.n	800e820 <VL53LX_f_031+0x2c6>

			VL53LX_p_032 = bin_initial_index[lc];
 800e79a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e79e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e7a2:	4413      	add	r3, r2
 800e7a4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e7a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e7b2:	e031      	b.n	800e818 <VL53LX_f_031+0x2be>
				podata->bin_data[VL53LX_p_032+i] +=
 800e7b4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e7b8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e7bc:	441a      	add	r2, r3
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	3206      	adds	r2, #6
 800e7c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800e7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c8:	0fda      	lsrs	r2, r3, #31
 800e7ca:	4413      	add	r3, r2
 800e7cc:	105b      	asrs	r3, r3, #1
 800e7ce:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800e7d0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e7d4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e7d8:	441a      	add	r2, r3
 800e7da:	4401      	add	r1, r0
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	3206      	adds	r2, #6
 800e7e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800e7e4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e7e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e7ec:	441a      	add	r2, r3
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	3206      	adds	r2, #6
 800e7f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e7f6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e7fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e7fe:	441a      	add	r2, r3
 800e800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e802:	fb91 f1f3 	sdiv	r1, r1, r3
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	3206      	adds	r2, #6
 800e80a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800e80e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e812:	3301      	adds	r3, #1
 800e814:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e818:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e81c:	2b03      	cmp	r3, #3
 800e81e:	d9c9      	bls.n	800e7b4 <VL53LX_f_031+0x25a>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e820:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e824:	3301      	adds	r3, #1
 800e826:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e82a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e82e:	2b0f      	cmp	r3, #15
 800e830:	d9a8      	bls.n	800e784 <VL53LX_f_031+0x22a>
		}
	}



	podata->number_of_ambient_bins = 0;
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	2200      	movs	r2, #0
 800e836:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800e838:	7bfb      	ldrb	r3, [r7, #15]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d102      	bne.n	800e844 <VL53LX_f_031+0x2ea>
		(bin_repeat_count[15] > 0))
 800e83e:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800e840:	2b00      	cmp	r3, #0
 800e842:	d002      	beq.n	800e84a <VL53LX_f_031+0x2f0>
		podata->number_of_ambient_bins = 4;
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	2204      	movs	r2, #4
 800e848:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800e84a:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3738      	adds	r7, #56	; 0x38
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800e856:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e858:	b0cb      	sub	sp, #300	; 0x12c
 800e85a:	af06      	add	r7, sp, #24
 800e85c:	f107 040c 	add.w	r4, r7, #12
 800e860:	6020      	str	r0, [r4, #0]
 800e862:	f107 0008 	add.w	r0, r7, #8
 800e866:	6001      	str	r1, [r0, #0]
 800e868:	1d39      	adds	r1, r7, #4
 800e86a:	600a      	str	r2, [r1, #0]
 800e86c:	463a      	mov	r2, r7
 800e86e:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e870:	2300      	movs	r3, #0
 800e872:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800e876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e87a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800e87e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e882:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800e886:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800e88a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800e88e:	f107 0318 	add.w	r3, r7, #24
 800e892:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800e896:	2300      	movs	r3, #0
 800e898:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800e89a:	2300      	movs	r3, #0
 800e89c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800e8be:	463b      	mov	r3, r7
 800e8c0:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800e8c4:	6818      	ldr	r0, [r3, #0]
 800e8c6:	f7ff fe48 	bl	800e55a <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800e8ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e8ce:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800e8d0:	b299      	uxth	r1, r3
 800e8d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e8d6:	3348      	adds	r3, #72	; 0x48
 800e8d8:	461a      	mov	r2, r3
 800e8da:	2000      	movs	r0, #0
 800e8dc:	f7fd fb65 	bl	800bfaa <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800e8e0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e8e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e8e8:	3348      	adds	r3, #72	; 0x48
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	4610      	mov	r0, r2
 800e8ee:	f7fd fb1e 	bl	800bf2e <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800e8f2:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d12d      	bne.n	800e956 <VL53LX_hist_process_data+0x100>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800e8fa:	1d3b      	adds	r3, r7, #4
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800e902:	2b00      	cmp	r3, #0
 800e904:	d027      	beq.n	800e956 <VL53LX_hist_process_data+0x100>
		status =
		VL53LX_f_032(
 800e906:	1d3b      	adds	r3, r7, #4
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800e90c:	1d3b      	adds	r3, r7, #4
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 800e914:	1d3b      	adds	r3, r7, #4
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 800e91c:	463b      	mov	r3, r7
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800e924:	463a      	mov	r2, r7
 800e926:	6812      	ldr	r2, [r2, #0]
 800e928:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 800e92c:	4639      	mov	r1, r7
 800e92e:	6809      	ldr	r1, [r1, #0]
 800e930:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 800e934:	f107 0014 	add.w	r0, r7, #20
 800e938:	9004      	str	r0, [sp, #16]
 800e93a:	9103      	str	r1, [sp, #12]
 800e93c:	9202      	str	r2, [sp, #8]
 800e93e:	9301      	str	r3, [sp, #4]
 800e940:	2300      	movs	r3, #0
 800e942:	9300      	str	r3, [sp, #0]
 800e944:	2300      	movs	r3, #0
 800e946:	4632      	mov	r2, r6
 800e948:	4629      	mov	r1, r5
 800e94a:	4620      	mov	r0, r4
 800e94c:	f002 f8bf 	bl	8010ace <VL53LX_f_032>
 800e950:	4603      	mov	r3, r0
 800e952:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800e956:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d112      	bne.n	800e984 <VL53LX_hist_process_data+0x12e>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800e95e:	1d3b      	adds	r3, r7, #4
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800e966:	2b00      	cmp	r3, #0
 800e968:	d00c      	beq.n	800e984 <VL53LX_hist_process_data+0x12e>
		status =
			VL53LX_f_033(
 800e96a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800e96e:	697a      	ldr	r2, [r7, #20]
 800e970:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e974:	3348      	adds	r3, #72	; 0x48
 800e976:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800e97a:	f002 faab 	bl	8010ed4 <VL53LX_f_033>
 800e97e:	4603      	mov	r3, r0
 800e980:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800e984:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e988:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 800e98c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e990:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 800e994:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e998:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53LX_p_004 =
 800e99c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e9a0:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800e9a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 800e9ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 800e9b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e9bc:	2200      	movs	r2, #0
 800e9be:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 800e9c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800e9d2:	1d3b      	adds	r3, r7, #4
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d002      	beq.n	800e9e4 <VL53LX_hist_process_data+0x18e>
		xtalk_enable = 1;
 800e9de:	2301      	movs	r3, #1
 800e9e0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800e9ea:	e0ef      	b.n	800ebcc <VL53LX_hist_process_data+0x376>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800e9ec:	1d3b      	adds	r3, r7, #4
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800e9f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53LX_f_025(
 800e9f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e9fc:	3348      	adds	r3, #72	; 0x48
 800e9fe:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800ea02:	7814      	ldrb	r4, [r2, #0]
 800ea04:	1d3a      	adds	r2, r7, #4
 800ea06:	f107 0108 	add.w	r1, r7, #8
 800ea0a:	f107 000c 	add.w	r0, r7, #12
 800ea0e:	9405      	str	r4, [sp, #20]
 800ea10:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800ea14:	9404      	str	r4, [sp, #16]
 800ea16:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 800ea1a:	9403      	str	r4, [sp, #12]
 800ea1c:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800ea20:	9402      	str	r4, [sp, #8]
 800ea22:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800ea26:	9401      	str	r4, [sp, #4]
 800ea28:	9300      	str	r3, [sp, #0]
 800ea2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ea2e:	6812      	ldr	r2, [r2, #0]
 800ea30:	6809      	ldr	r1, [r1, #0]
 800ea32:	6800      	ldr	r0, [r0, #0]
 800ea34:	f7fe fec1 	bl	800d7ba <VL53LX_f_025>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800ea3e:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	f040 80bc 	bne.w	800ebc0 <VL53LX_hist_process_data+0x36a>
 800ea48:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	f040 80b7 	bne.w	800ebc0 <VL53LX_hist_process_data+0x36a>
			continue;



		if (presults->active_results == 0) {
 800ea52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ea56:	7c9b      	ldrb	r3, [r3, #18]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d110      	bne.n	800ea7e <VL53LX_hist_process_data+0x228>
			pdata = &(presults->VL53LX_p_003[0]);
 800ea5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ea60:	3314      	adds	r3, #20
 800ea62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 800ea66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ea6a:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 800ea6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ea70:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 800ea72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ea76:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 800ea78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ea7c:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800ea7e:	1d3b      	adds	r3, r7, #4
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800ea84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800ea88:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	461a      	mov	r2, r3
 800ea90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ea94:	fb02 f303 	mul.w	r3, r2, r3
 800ea98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 800ea9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eaa0:	011b      	lsls	r3, r3, #4
 800eaa2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800eaac:	e07f      	b.n	800ebae <VL53LX_hist_process_data+0x358>

			pdata = &(presults->VL53LX_p_003[t]);
 800eaae:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800eab2:	224c      	movs	r2, #76	; 0x4c
 800eab4:	fb02 f303 	mul.w	r3, r2, r3
 800eab8:	3310      	adds	r3, #16
 800eaba:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800eabe:	4413      	add	r3, r2
 800eac0:	3304      	adds	r3, #4
 800eac2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 800eac6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eaca:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800eace:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ead2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800ead6:	429a      	cmp	r2, r3
 800ead8:	dd0e      	ble.n	800eaf8 <VL53LX_hist_process_data+0x2a2>
				delta_mm =
					pdata->max_range_mm -
 800eada:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eade:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800eae2:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 800eae4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eae8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800eaec:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800eaee:	1ad3      	subs	r3, r2, r3
 800eaf0:	b29b      	uxth	r3, r3
				delta_mm =
 800eaf2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800eaf6:	e00d      	b.n	800eb14 <VL53LX_hist_process_data+0x2be>
			else
				delta_mm =
					pdata->min_range_mm -
 800eaf8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eafc:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800eb00:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 800eb02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eb06:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800eb0a:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 800eb0c:	1ad3      	subs	r3, r2, r3
 800eb0e:	b29b      	uxth	r3, r3
				delta_mm =
 800eb10:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800eb14:	1d3b      	adds	r3, r7, #4
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 800eb1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800eb1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	461a      	mov	r2, r3
 800eb26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800eb2a:	fb02 f303 	mul.w	r3, r2, r3
 800eb2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 800eb32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800eb36:	015b      	lsls	r3, r3, #5
 800eb38:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 800eb3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eb40:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800eb44:	1d3b      	adds	r3, r7, #4
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	dd29      	ble.n	800eba4 <VL53LX_hist_process_data+0x34e>
			pdata->median_range_mm  <
 800eb50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eb54:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800eb58:	1d3b      	adds	r3, r7, #4
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800eb60:	429a      	cmp	r2, r3
 800eb62:	da1f      	bge.n	800eba4 <VL53LX_hist_process_data+0x34e>
			pdata->VL53LX_p_009 <
 800eb64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eb68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800eb6a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d918      	bls.n	800eba4 <VL53LX_hist_process_data+0x34e>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800eb72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800eb76:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800eb78:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 800eb7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d910      	bls.n	800eba4 <VL53LX_hist_process_data+0x34e>
			delta_mm <
 800eb82:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800eb86:	1d3a      	adds	r2, r7, #4
 800eb88:	6812      	ldr	r2, [r2, #0]
 800eb8a:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	da09      	bge.n	800eba4 <VL53LX_hist_process_data+0x34e>



				memcpy(
					&(presults->xmonitor),
 800eb90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800eb94:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 800eb98:	224c      	movs	r2, #76	; 0x4c
 800eb9a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f006 fa16 	bl	8014fd0 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 800eba4:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800eba8:	3301      	adds	r3, #1
 800ebaa:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800ebae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ebb2:	7c9b      	ldrb	r3, [r3, #18]
 800ebb4:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	f4ff af78 	bcc.w	800eaae <VL53LX_hist_process_data+0x258>
 800ebbe:	e000      	b.n	800ebc2 <VL53LX_hist_process_data+0x36c>
			continue;
 800ebc0:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800ebc2:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800ebc6:	3301      	adds	r3, #1
 800ebc8:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800ebcc:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800ebd0:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	f67f af09 	bls.w	800e9ec <VL53LX_hist_process_data+0x196>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800ebda:	1d3b      	adds	r3, r7, #4
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800ebe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 800ebe6:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ebf4 <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b086      	sub	sp, #24
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	607a      	str	r2, [r7, #4]
 800ec00:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ec02:	2300      	movs	r3, #0
 800ec04:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 800ec06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d104      	bne.n	800ec18 <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 800ec0e:	68f8      	ldr	r0, [r7, #12]
 800ec10:	f7f9 fe88 	bl	8008924 <VL53LX_disable_firmware>
 800ec14:	4603      	mov	r3, r0
 800ec16:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 800ec18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d104      	bne.n	800ec2a <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 800ec20:	68f8      	ldr	r0, [r7, #12]
 800ec22:	f7f9 feb0 	bl	8008986 <VL53LX_enable_powerforce>
 800ec26:	4603      	mov	r3, r0
 800ec28:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 800ec2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d105      	bne.n	800ec3e <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 800ec32:	21fa      	movs	r1, #250	; 0xfa
 800ec34:	68f8      	ldr	r0, [r7, #12]
 800ec36:	f002 fb9d 	bl	8011374 <VL53LX_WaitUs>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 800ec3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d107      	bne.n	800ec56 <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 800ec46:	2201      	movs	r2, #1
 800ec48:	f240 7181 	movw	r1, #1921	; 0x781
 800ec4c:	68f8      	ldr	r0, [r7, #12]
 800ec4e:	f002 fa9d 	bl	801118c <VL53LX_WrByte>
 800ec52:	4603      	mov	r3, r0
 800ec54:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800ec56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d107      	bne.n	800ec6e <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 800ec5e:	2205      	movs	r2, #5
 800ec60:	f240 6183 	movw	r1, #1667	; 0x683
 800ec64:	68f8      	ldr	r0, [r7, #12]
 800ec66:	f002 fa91 	bl	801118c <VL53LX_WrByte>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 800ec6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d105      	bne.n	800ec82 <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 800ec76:	6879      	ldr	r1, [r7, #4]
 800ec78:	68f8      	ldr	r0, [r7, #12]
 800ec7a:	f002 fb7b 	bl	8011374 <VL53LX_WaitUs>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 800ec82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d107      	bne.n	800ec9a <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800ec90:	68f8      	ldr	r0, [r7, #12]
 800ec92:	f002 fa7b 	bl	801118c <VL53LX_WrByte>
 800ec96:	4603      	mov	r3, r0
 800ec98:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 800ec9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d108      	bne.n	800ecb4 <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 800eca2:	897b      	ldrh	r3, [r7, #10]
 800eca4:	461a      	mov	r2, r3
 800eca6:	f240 7184 	movw	r1, #1924	; 0x784
 800ecaa:	68f8      	ldr	r0, [r7, #12]
 800ecac:	f002 fa98 	bl	80111e0 <VL53LX_WrWord>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 800ecb4:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3718      	adds	r7, #24
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}

0800ecc0 <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b086      	sub	sp, #24
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	60f8      	str	r0, [r7, #12]
 800ecc8:	607b      	str	r3, [r7, #4]
 800ecca:	460b      	mov	r3, r1
 800eccc:	72fb      	strb	r3, [r7, #11]
 800ecce:	4613      	mov	r3, r2
 800ecd0:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800ecda:	7afb      	ldrb	r3, [r7, #11]
 800ecdc:	75bb      	strb	r3, [r7, #22]
 800ecde:	e041      	b.n	800ed64 <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 800ece0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d108      	bne.n	800ecfa <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 800ece8:	7dbb      	ldrb	r3, [r7, #22]
 800ecea:	461a      	mov	r2, r3
 800ecec:	f240 7194 	movw	r1, #1940	; 0x794
 800ecf0:	68f8      	ldr	r0, [r7, #12]
 800ecf2:	f002 fa4b 	bl	801118c <VL53LX_WrByte>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 800ecfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d107      	bne.n	800ed12 <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 800ed02:	2200      	movs	r2, #0
 800ed04:	f240 7183 	movw	r1, #1923	; 0x783
 800ed08:	68f8      	ldr	r0, [r7, #12]
 800ed0a:	f002 fa3f 	bl	801118c <VL53LX_WrByte>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 800ed12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d105      	bne.n	800ed26 <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 800ed1a:	2105      	movs	r1, #5
 800ed1c:	68f8      	ldr	r0, [r7, #12]
 800ed1e:	f002 fb29 	bl	8011374 <VL53LX_WaitUs>
 800ed22:	4603      	mov	r3, r0
 800ed24:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 800ed26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d107      	bne.n	800ed3e <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 800ed2e:	2201      	movs	r2, #1
 800ed30:	f240 7183 	movw	r1, #1923	; 0x783
 800ed34:	68f8      	ldr	r0, [r7, #12]
 800ed36:	f002 fa29 	bl	801118c <VL53LX_WrByte>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 800ed3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d108      	bne.n	800ed58 <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 800ed46:	2304      	movs	r3, #4
 800ed48:	687a      	ldr	r2, [r7, #4]
 800ed4a:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 800ed4e:	68f8      	ldr	r0, [r7, #12]
 800ed50:	f002 f9e6 	bl	8011120 <VL53LX_ReadMulti>
 800ed54:	4603      	mov	r3, r0
 800ed56:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	3304      	adds	r3, #4
 800ed5c:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800ed5e:	7dbb      	ldrb	r3, [r7, #22]
 800ed60:	3301      	adds	r3, #1
 800ed62:	75bb      	strb	r3, [r7, #22]
 800ed64:	7dba      	ldrb	r2, [r7, #22]
 800ed66:	7af9      	ldrb	r1, [r7, #11]
 800ed68:	7abb      	ldrb	r3, [r7, #10]
 800ed6a:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	dbb7      	blt.n	800ece0 <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 800ed70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3718      	adds	r7, #24
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b084      	sub	sp, #16
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ed84:	2300      	movs	r3, #0
 800ed86:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800ed88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d107      	bne.n	800eda0 <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 800ed90:	2201      	movs	r2, #1
 800ed92:	f240 7183 	movw	r1, #1923	; 0x783
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f002 f9f8 	bl	801118c <VL53LX_WrByte>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800eda0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d107      	bne.n	800edb8 <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 800eda8:	2200      	movs	r2, #0
 800edaa:	f240 7181 	movw	r1, #1921	; 0x781
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f002 f9ec 	bl	801118c <VL53LX_WrByte>
 800edb4:	4603      	mov	r3, r0
 800edb6:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 800edb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d104      	bne.n	800edca <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f7f9 fdf2 	bl	80089aa <VL53LX_disable_powerforce>
 800edc6:	4603      	mov	r3, r0
 800edc8:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 800edca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d104      	bne.n	800eddc <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f7f9 fd94 	bl	8008900 <VL53LX_enable_firmware>
 800edd8:	4603      	mov	r3, r0
 800edda:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800eddc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3710      	adds	r7, #16
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 800ede8:	b480      	push	{r7}
 800edea:	b087      	sub	sp, #28
 800edec:	af00      	add	r7, sp, #0
 800edee:	4603      	mov	r3, r0
 800edf0:	60b9      	str	r1, [r7, #8]
 800edf2:	607a      	str	r2, [r7, #4]
 800edf4:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800edf6:	2300      	movs	r3, #0
 800edf8:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 800edfa:	2300      	movs	r3, #0
 800edfc:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800edfe:	89fb      	ldrh	r3, [r7, #14]
 800ee00:	2b03      	cmp	r3, #3
 800ee02:	d802      	bhi.n	800ee0a <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ee04:	f06f 0308 	mvn.w	r3, #8
 800ee08:	e018      	b.n	800ee3c <VL53LX_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 800ee0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee0e:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	3302      	adds	r3, #2
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	8afa      	ldrh	r2, [r7, #22]
 800ee1a:	1ad3      	subs	r3, r2, r3
 800ee1c:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 800ee1e:	8afb      	ldrh	r3, [r7, #22]
 800ee20:	2bff      	cmp	r3, #255	; 0xff
 800ee22:	d901      	bls.n	800ee28 <VL53LX_nvm_decode_optical_centre+0x40>
		tmp = 0;
 800ee24:	2300      	movs	r3, #0
 800ee26:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 800ee28:	8afb      	ldrh	r3, [r7, #22]
 800ee2a:	b2da      	uxtb	r2, r3
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	78da      	ldrb	r2, [r3, #3]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	705a      	strb	r2, [r3, #1]

	return status;
 800ee38:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	371c      	adds	r7, #28
 800ee40:	46bd      	mov	sp, r7
 800ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee46:	4770      	bx	lr

0800ee48 <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 800ee48:	b590      	push	{r4, r7, lr}
 800ee4a:	b087      	sub	sp, #28
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	4603      	mov	r3, r0
 800ee50:	60b9      	str	r1, [r7, #8]
 800ee52:	607a      	str	r2, [r7, #4]
 800ee54:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ee56:	2300      	movs	r3, #0
 800ee58:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800ee62:	89fb      	ldrh	r3, [r7, #14]
 800ee64:	2b37      	cmp	r3, #55	; 0x37
 800ee66:	d802      	bhi.n	800ee6e <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ee68:	f06f 0308 	mvn.w	r3, #8
 800ee6c:	e03e      	b.n	800eeec <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800ee6e:	68b9      	ldr	r1, [r7, #8]
 800ee70:	2002      	movs	r0, #2
 800ee72:	f7f9 fc2b 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800ee76:	4603      	mov	r3, r0
 800ee78:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	3302      	adds	r3, #2
 800ee82:	4619      	mov	r1, r3
 800ee84:	2002      	movs	r0, #2
 800ee86:	f7f9 fc21 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 800ee96:	099b      	lsrs	r3, r3, #6
 800ee98:	b29a      	uxth	r2, r3
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2219      	movs	r2, #25
 800eea2:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2205      	movs	r2, #5
 800eea8:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2205      	movs	r2, #5
 800eeae:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	3304      	adds	r3, #4
 800eeb4:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	74fb      	strb	r3, [r7, #19]
 800eeba:	e012      	b.n	800eee2 <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 800eebc:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 800eebe:	6979      	ldr	r1, [r7, #20]
 800eec0:	2002      	movs	r0, #2
 800eec2:	f7f9 fc03 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800eec6:	4603      	mov	r3, r0
 800eec8:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 800eeca:	687a      	ldr	r2, [r7, #4]
 800eecc:	1d23      	adds	r3, r4, #4
 800eece:	005b      	lsls	r3, r3, #1
 800eed0:	4413      	add	r3, r2
 800eed2:	460a      	mov	r2, r1
 800eed4:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	3302      	adds	r3, #2
 800eeda:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800eedc:	7cfb      	ldrb	r3, [r7, #19]
 800eede:	3301      	adds	r3, #1
 800eee0:	74fb      	strb	r3, [r7, #19]
 800eee2:	7cfb      	ldrb	r3, [r7, #19]
 800eee4:	2b18      	cmp	r3, #24
 800eee6:	d9e9      	bls.n	800eebc <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 800eee8:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	371c      	adds	r7, #28
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd90      	pop	{r4, r7, pc}

0800eef4 <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b086      	sub	sp, #24
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	4603      	mov	r3, r0
 800eefc:	60b9      	str	r1, [r7, #8]
 800eefe:	607a      	str	r2, [r7, #4]
 800ef00:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ef02:	2300      	movs	r3, #0
 800ef04:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800ef06:	89fb      	ldrh	r3, [r7, #14]
 800ef08:	2b07      	cmp	r3, #7
 800ef0a:	d802      	bhi.n	800ef12 <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ef0c:	f06f 0308 	mvn.w	r3, #8
 800ef10:	e027      	b.n	800ef62 <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800ef12:	68b9      	ldr	r1, [r7, #8]
 800ef14:	2002      	movs	r0, #2
 800ef16:	f7f9 fbd9 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	3302      	adds	r3, #2
 800ef26:	4619      	mov	r1, r3
 800ef28:	2002      	movs	r0, #2
 800ef2a:	f7f9 fbcf 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	3304      	adds	r3, #4
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	2002      	movs	r0, #2
 800ef3e:	f7f9 fbc5 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800ef42:	4603      	mov	r3, r0
 800ef44:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	3306      	adds	r3, #6
 800ef4e:	4619      	mov	r1, r3
 800ef50:	2002      	movs	r0, #2
 800ef52:	f7f9 fbbb 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800ef56:	4603      	mov	r3, r0
 800ef58:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	80da      	strh	r2, [r3, #6]

	return status;
 800ef5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3718      	adds	r7, #24
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}

0800ef6a <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 800ef6a:	b580      	push	{r7, lr}
 800ef6c:	b086      	sub	sp, #24
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	4603      	mov	r3, r0
 800ef72:	60b9      	str	r1, [r7, #8]
 800ef74:	607a      	str	r2, [r7, #4]
 800ef76:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800ef7c:	89fb      	ldrh	r3, [r7, #14]
 800ef7e:	2b0f      	cmp	r3, #15
 800ef80:	d802      	bhi.n	800ef88 <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ef82:	f06f 0308 	mvn.w	r3, #8
 800ef86:	e04d      	b.n	800f024 <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800ef88:	68b9      	ldr	r1, [r7, #8]
 800ef8a:	2002      	movs	r0, #2
 800ef8c:	f7f9 fb9e 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800ef90:	4603      	mov	r3, r0
 800ef92:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	789a      	ldrb	r2, [r3, #2]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	78da      	ldrb	r2, [r3, #3]
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	3304      	adds	r3, #4
 800efac:	4619      	mov	r1, r3
 800efae:	2002      	movs	r0, #2
 800efb0:	f7f9 fb8c 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800efb4:	4603      	mov	r3, r0
 800efb6:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	3306      	adds	r3, #6
 800efc0:	4619      	mov	r1, r3
 800efc2:	2002      	movs	r0, #2
 800efc4:	f7f9 fb82 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800efc8:	4603      	mov	r3, r0
 800efca:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	3308      	adds	r3, #8
 800efd4:	4619      	mov	r1, r3
 800efd6:	2002      	movs	r0, #2
 800efd8:	f7f9 fb78 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800efdc:	4603      	mov	r3, r0
 800efde:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 800efe4:	68bb      	ldr	r3, [r7, #8]
 800efe6:	330a      	adds	r3, #10
 800efe8:	4619      	mov	r1, r3
 800efea:	2002      	movs	r0, #2
 800efec:	f7f9 fb6e 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800eff0:	4603      	mov	r3, r0
 800eff2:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	330c      	adds	r3, #12
 800effc:	4619      	mov	r1, r3
 800effe:	2002      	movs	r0, #2
 800f000:	f7f9 fb64 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800f004:	4603      	mov	r3, r0
 800f006:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	330e      	adds	r3, #14
 800f010:	4619      	mov	r1, r3
 800f012:	2002      	movs	r0, #2
 800f014:	f7f9 fb5a 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800f018:	4603      	mov	r3, r0
 800f01a:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	81da      	strh	r2, [r3, #14]

	return status;
 800f020:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f024:	4618      	mov	r0, r3
 800f026:	3718      	adds	r7, #24
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}

0800f02c <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b086      	sub	sp, #24
 800f030:	af00      	add	r7, sp, #0
 800f032:	60f8      	str	r0, [r7, #12]
 800f034:	607b      	str	r3, [r7, #4]
 800f036:	460b      	mov	r3, r1
 800f038:	72fb      	strb	r3, [r7, #11]
 800f03a:	4613      	mov	r3, r2
 800f03c:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f03e:	2300      	movs	r3, #0
 800f040:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800f042:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d106      	bne.n	800f058 <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 800f04a:	2232      	movs	r2, #50	; 0x32
 800f04c:	2104      	movs	r1, #4
 800f04e:	68f8      	ldr	r0, [r7, #12]
 800f050:	f7ff fdd0 	bl	800ebf4 <VL53LX_nvm_enable>
 800f054:	4603      	mov	r3, r0
 800f056:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 800f058:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d107      	bne.n	800f070 <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 800f060:	7aba      	ldrb	r2, [r7, #10]
 800f062:	7af9      	ldrb	r1, [r7, #11]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	68f8      	ldr	r0, [r7, #12]
 800f068:	f7ff fe2a 	bl	800ecc0 <VL53LX_nvm_read>
 800f06c:	4603      	mov	r3, r0
 800f06e:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 800f070:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d104      	bne.n	800f082 <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 800f078:	68f8      	ldr	r0, [r7, #12]
 800f07a:	f7ff fe7f 	bl	800ed7c <VL53LX_nvm_disable>
 800f07e:	4603      	mov	r3, r0
 800f080:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 800f082:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f086:	4618      	mov	r0, r3
 800f088:	3718      	adds	r7, #24
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}

0800f08e <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 800f08e:	b580      	push	{r7, lr}
 800f090:	b084      	sub	sp, #16
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
 800f096:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f098:	2300      	movs	r3, #0
 800f09a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f09c:	f107 0308 	add.w	r3, r7, #8
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	212e      	movs	r1, #46	; 0x2e
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f7ff ffc1 	bl	800f02c <VL53LX_read_nvm_raw_data>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f0ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d108      	bne.n	800f0c8 <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 800f0b6:	f107 0308 	add.w	r3, r7, #8
 800f0ba:	683a      	ldr	r2, [r7, #0]
 800f0bc:	4619      	mov	r1, r3
 800f0be:	2004      	movs	r0, #4
 800f0c0:	f7ff fe92 	bl	800ede8 <VL53LX_nvm_decode_optical_centre>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 800f0c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3710      	adds	r7, #16
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b092      	sub	sp, #72	; 0x48
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f0e4:	f107 030c 	add.w	r3, r7, #12
 800f0e8:	220e      	movs	r2, #14
 800f0ea:	2157      	movs	r1, #87	; 0x57
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7ff ff9d 	bl	800f02c <VL53LX_read_nvm_raw_data>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f0f8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d109      	bne.n	800f114 <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 800f100:	f107 030c 	add.w	r3, r7, #12
 800f104:	683a      	ldr	r2, [r7, #0]
 800f106:	4619      	mov	r1, r3
 800f108:	2038      	movs	r0, #56	; 0x38
 800f10a:	f7ff fe9d 	bl	800ee48 <VL53LX_nvm_decode_cal_peak_rate_map>
 800f10e:	4603      	mov	r3, r0
 800f110:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800f114:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3748      	adds	r7, #72	; 0x48
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b086      	sub	sp, #24
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f12a:	2300      	movs	r3, #0
 800f12c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f12e:	f107 030c 	add.w	r3, r7, #12
 800f132:	2202      	movs	r2, #2
 800f134:	2165      	movs	r1, #101	; 0x65
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f7ff ff78 	bl	800f02c <VL53LX_read_nvm_raw_data>
 800f13c:	4603      	mov	r3, r0
 800f13e:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f140:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d108      	bne.n	800f15a <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 800f148:	f107 030c 	add.w	r3, r7, #12
 800f14c:	683a      	ldr	r2, [r7, #0]
 800f14e:	4619      	mov	r1, r3
 800f150:	2008      	movs	r0, #8
 800f152:	f7ff fecf 	bl	800eef4 <VL53LX_nvm_decode_additional_offset_cal_data>
 800f156:	4603      	mov	r3, r0
 800f158:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800f15a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f15e:	4618      	mov	r0, r3
 800f160:	3718      	adds	r7, #24
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}

0800f166 <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 800f166:	b580      	push	{r7, lr}
 800f168:	b08a      	sub	sp, #40	; 0x28
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	60f8      	str	r0, [r7, #12]
 800f16e:	460b      	mov	r3, r1
 800f170:	607a      	str	r2, [r7, #4]
 800f172:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f174:	2300      	movs	r3, #0
 800f176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 800f17a:	897b      	ldrh	r3, [r7, #10]
 800f17c:	089b      	lsrs	r3, r3, #2
 800f17e:	b29b      	uxth	r3, r3
 800f180:	b2d9      	uxtb	r1, r3
 800f182:	f107 0314 	add.w	r3, r7, #20
 800f186:	2204      	movs	r2, #4
 800f188:	68f8      	ldr	r0, [r7, #12]
 800f18a:	f7ff ff4f 	bl	800f02c <VL53LX_read_nvm_raw_data>
 800f18e:	4603      	mov	r3, r0
 800f190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f194:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d109      	bne.n	800f1b0 <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 800f19c:	f107 0314 	add.w	r3, r7, #20
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	2010      	movs	r0, #16
 800f1a6:	f7ff fee0 	bl	800ef6a <VL53LX_nvm_decode_fmt_range_results_data>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 800f1b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3728      	adds	r7, #40	; 0x28
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}

0800f1bc <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b086      	sub	sp, #24
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	460b      	mov	r3, r1
 800f1c6:	607a      	str	r2, [r7, #4]
 800f1c8:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f1ce:	897b      	ldrh	r3, [r7, #10]
 800f1d0:	2b0a      	cmp	r3, #10
 800f1d2:	d802      	bhi.n	800f1da <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f1d4:	f06f 0309 	mvn.w	r3, #9
 800f1d8:	e047      	b.n	800f26a <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1e2:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f1f0:	f002 020f 	and.w	r2, r2, #15
 800f1f4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f1f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f200:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f204:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f206:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f210:	f002 0203 	and.w	r2, r2, #3
 800f214:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f216:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f220:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f224:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f226:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	88d8      	ldrh	r0, [r3, #6]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	3305      	adds	r3, #5
 800f230:	461a      	mov	r2, r3
 800f232:	2102      	movs	r1, #2
 800f234:	f7f9 fa1f 	bl	8008676 <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800f23c:	68fa      	ldr	r2, [r7, #12]
 800f23e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f240:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800f246:	68fa      	ldr	r2, [r7, #12]
 800f248:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f24a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800f254:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f258:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f25a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800f260:	68fa      	ldr	r2, [r7, #12]
 800f262:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800f264:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f266:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3718      	adds	r7, #24
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}

0800f272 <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f272:	b580      	push	{r7, lr}
 800f274:	b086      	sub	sp, #24
 800f276:	af00      	add	r7, sp, #0
 800f278:	4603      	mov	r3, r0
 800f27a:	60b9      	str	r1, [r7, #8]
 800f27c:	607a      	str	r2, [r7, #4]
 800f27e:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f280:	2300      	movs	r3, #0
 800f282:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f284:	89fb      	ldrh	r3, [r7, #14]
 800f286:	2b0a      	cmp	r3, #10
 800f288:	d802      	bhi.n	800f290 <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f28a:	f06f 0309 	mvn.w	r3, #9
 800f28e:	e046      	b.n	800f31e <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f298:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	3301      	adds	r3, #1
 800f2a2:	781b      	ldrb	r3, [r3, #0]
 800f2a4:	f003 030f 	and.w	r3, r3, #15
 800f2a8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	3302      	adds	r3, #2
 800f2b2:	781b      	ldrb	r3, [r3, #0]
 800f2b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2b8:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	3303      	adds	r3, #3
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	f003 0303 	and.w	r3, r3, #3
 800f2c8:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	3304      	adds	r3, #4
 800f2d2:	781b      	ldrb	r3, [r3, #0]
 800f2d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2d8:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	3305      	adds	r3, #5
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	2002      	movs	r0, #2
 800f2e6:	f7f9 f9f1 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	79da      	ldrb	r2, [r3, #7]
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	7a1a      	ldrb	r2, [r3, #8]
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	3309      	adds	r3, #9
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f30c:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	7a9a      	ldrb	r2, [r3, #10]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800f31a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3718      	adds	r7, #24
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}

0800f326 <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f326:	b580      	push	{r7, lr}
 800f328:	b086      	sub	sp, #24
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
 800f32e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f330:	2300      	movs	r3, #0
 800f332:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f334:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d108      	bne.n	800f34e <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 800f33c:	f107 020c 	add.w	r2, r7, #12
 800f340:	230b      	movs	r3, #11
 800f342:	2101      	movs	r1, #1
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f001 feeb 	bl	8011120 <VL53LX_ReadMulti>
 800f34a:	4603      	mov	r3, r0
 800f34c:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f34e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d108      	bne.n	800f368 <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 800f356:	f107 030c 	add.w	r3, r7, #12
 800f35a:	683a      	ldr	r2, [r7, #0]
 800f35c:	4619      	mov	r1, r3
 800f35e:	200b      	movs	r0, #11
 800f360:	f7ff ff87 	bl	800f272 <VL53LX_i2c_decode_static_nvm_managed>
 800f364:	4603      	mov	r3, r0
 800f366:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f368:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3718      	adds	r7, #24
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b086      	sub	sp, #24
 800f378:	af00      	add	r7, sp, #0
 800f37a:	60f8      	str	r0, [r7, #12]
 800f37c:	460b      	mov	r3, r1
 800f37e:	607a      	str	r2, [r7, #4]
 800f380:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f382:	2300      	movs	r3, #0
 800f384:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f386:	897b      	ldrh	r3, [r7, #10]
 800f388:	2b16      	cmp	r3, #22
 800f38a:	d802      	bhi.n	800f392 <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f38c:	f06f 0309 	mvn.w	r3, #9
 800f390:	e076      	b.n	800f480 <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800f39e:	68fa      	ldr	r2, [r7, #12]
 800f3a0:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f3a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800f3a8:	68fa      	ldr	r2, [r7, #12]
 800f3aa:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f3ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800f3b2:	68fa      	ldr	r2, [r7, #12]
 800f3b4:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800f3b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800f3bc:	68fa      	ldr	r2, [r7, #12]
 800f3be:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f3c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f3ca:	f002 020f 	and.w	r2, r2, #15
 800f3ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f3d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800f3d6:	68fa      	ldr	r2, [r7, #12]
 800f3d8:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800f3da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f3e4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f3e8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f3ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800f3f4:	f002 0203 	and.w	r2, r2, #3
 800f3f8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f3fa:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	8958      	ldrh	r0, [r3, #10]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	3309      	adds	r3, #9
 800f404:	461a      	mov	r2, r3
 800f406:	2102      	movs	r1, #2
 800f408:	f7f9 f935 	bl	8008676 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	330b      	adds	r3, #11
 800f416:	461a      	mov	r2, r3
 800f418:	2102      	movs	r1, #2
 800f41a:	f7f9 f977 	bl	800870c <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	330d      	adds	r3, #13
 800f428:	461a      	mov	r2, r3
 800f42a:	2102      	movs	r1, #2
 800f42c:	f7f9 f96e 	bl	800870c <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	8a18      	ldrh	r0, [r3, #16]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	330f      	adds	r3, #15
 800f438:	461a      	mov	r2, r3
 800f43a:	2102      	movs	r1, #2
 800f43c:	f7f9 f91b 	bl	8008676 <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 800f446:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f44a:	b218      	sxth	r0, r3
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	3311      	adds	r3, #17
 800f450:	461a      	mov	r2, r3
 800f452:	2102      	movs	r1, #2
 800f454:	f7f9 f95a 	bl	800870c <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	3313      	adds	r3, #19
 800f462:	461a      	mov	r2, r3
 800f464:	2102      	movs	r1, #2
 800f466:	f7f9 f951 	bl	800870c <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	3315      	adds	r3, #21
 800f474:	461a      	mov	r2, r3
 800f476:	2102      	movs	r1, #2
 800f478:	f7f9 f948 	bl	800870c <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800f47c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f480:	4618      	mov	r0, r3
 800f482:	3718      	adds	r7, #24
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}

0800f488 <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b086      	sub	sp, #24
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	4603      	mov	r3, r0
 800f490:	60b9      	str	r1, [r7, #8]
 800f492:	607a      	str	r2, [r7, #4]
 800f494:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f496:	2300      	movs	r3, #0
 800f498:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f49a:	89fb      	ldrh	r3, [r7, #14]
 800f49c:	2b16      	cmp	r3, #22
 800f49e:	d802      	bhi.n	800f4a6 <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f4a0:	f06f 0309 	mvn.w	r3, #9
 800f4a4:	e079      	b.n	800f59a <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	785a      	ldrb	r2, [r3, #1]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	789a      	ldrb	r2, [r3, #2]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	78da      	ldrb	r2, [r3, #3]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	791a      	ldrb	r2, [r3, #4]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	3305      	adds	r3, #5
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	f003 030f 	and.w	r3, r3, #15
 800f4d8:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	799a      	ldrb	r2, [r3, #6]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	3307      	adds	r3, #7
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f4f0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	3308      	adds	r3, #8
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	f003 0303 	and.w	r3, r3, #3
 800f500:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	3309      	adds	r3, #9
 800f50a:	4619      	mov	r1, r3
 800f50c:	2002      	movs	r0, #2
 800f50e:	f7f9 f8dd 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800f512:	4603      	mov	r3, r0
 800f514:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	330b      	adds	r3, #11
 800f51e:	4619      	mov	r1, r3
 800f520:	2002      	movs	r0, #2
 800f522:	f7f9 f91f 	bl	8008764 <VL53LX_i2c_decode_int16_t>
 800f526:	4603      	mov	r3, r0
 800f528:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	330d      	adds	r3, #13
 800f532:	4619      	mov	r1, r3
 800f534:	2002      	movs	r0, #2
 800f536:	f7f9 f915 	bl	8008764 <VL53LX_i2c_decode_int16_t>
 800f53a:	4603      	mov	r3, r0
 800f53c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	330f      	adds	r3, #15
 800f546:	4619      	mov	r1, r3
 800f548:	2002      	movs	r0, #2
 800f54a:	f7f9 f8bf 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800f54e:	4603      	mov	r3, r0
 800f550:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	3311      	adds	r3, #17
 800f55a:	4619      	mov	r1, r3
 800f55c:	2002      	movs	r0, #2
 800f55e:	f7f9 f901 	bl	8008764 <VL53LX_i2c_decode_int16_t>
 800f562:	4603      	mov	r3, r0
 800f564:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f568:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	3313      	adds	r3, #19
 800f572:	4619      	mov	r1, r3
 800f574:	2002      	movs	r0, #2
 800f576:	f7f9 f8f5 	bl	8008764 <VL53LX_i2c_decode_int16_t>
 800f57a:	4603      	mov	r3, r0
 800f57c:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	3315      	adds	r3, #21
 800f586:	4619      	mov	r1, r3
 800f588:	2002      	movs	r0, #2
 800f58a:	f7f9 f8eb 	bl	8008764 <VL53LX_i2c_decode_int16_t>
 800f58e:	4603      	mov	r3, r0
 800f590:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800f596:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3718      	adds	r7, #24
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}

0800f5a2 <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f5a2:	b580      	push	{r7, lr}
 800f5a4:	b08a      	sub	sp, #40	; 0x28
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
 800f5aa:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f5b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d109      	bne.n	800f5ce <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 800f5ba:	f107 020c 	add.w	r2, r7, #12
 800f5be:	2317      	movs	r3, #23
 800f5c0:	210d      	movs	r1, #13
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f001 fdac 	bl	8011120 <VL53LX_ReadMulti>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f5ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d109      	bne.n	800f5ea <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 800f5d6:	f107 030c 	add.w	r3, r7, #12
 800f5da:	683a      	ldr	r2, [r7, #0]
 800f5dc:	4619      	mov	r1, r3
 800f5de:	2017      	movs	r0, #23
 800f5e0:	f7ff ff52 	bl	800f488 <VL53LX_i2c_decode_customer_nvm_managed>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 800f5ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d11c      	bne.n	800f62c <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	8a5b      	ldrh	r3, [r3, #18]
 800f5f6:	84bb      	strh	r3, [r7, #36]	; 0x24
		offset = offset / 4;
 800f5f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	da00      	bge.n	800f602 <VL53LX_get_customer_nvm_managed+0x60>
 800f600:	3303      	adds	r3, #3
 800f602:	109b      	asrs	r3, r3, #2
 800f604:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (offset >= 1024)
 800f606:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f60a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f60e:	db04      	blt.n	800f61a <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 800f610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f612:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800f616:	b29b      	uxth	r3, r3
 800f618:	84bb      	strh	r3, [r7, #36]	; 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	2200      	movs	r2, #0
 800f61e:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f624:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f62a:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f62c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f630:	4618      	mov	r0, r3
 800f632:	3728      	adds	r7, #40	; 0x28
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}

0800f638 <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b086      	sub	sp, #24
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	60f8      	str	r0, [r7, #12]
 800f640:	460b      	mov	r3, r1
 800f642:	607a      	str	r2, [r7, #4]
 800f644:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f646:	2300      	movs	r3, #0
 800f648:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 800f64a:	897b      	ldrh	r3, [r7, #10]
 800f64c:	2b1f      	cmp	r3, #31
 800f64e:	d802      	bhi.n	800f656 <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f650:	f06f 0309 	mvn.w	r3, #9
 800f654:	e0cf      	b.n	800f7f6 <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	881b      	ldrh	r3, [r3, #0]
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	2102      	movs	r1, #2
 800f65e:	4618      	mov	r0, r3
 800f660:	f7f9 f809 	bl	8008676 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800f66c:	f002 0201 	and.w	r2, r2, #1
 800f670:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f672:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800f67c:	f002 020f 	and.w	r2, r2, #15
 800f680:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f682:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800f68c:	f002 020f 	and.w	r2, r2, #15
 800f690:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f692:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800f69c:	f002 021f 	and.w	r2, r2, #31
 800f6a0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f6a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f6ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f6b0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f6b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800f6bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f6c0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f6c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800f6cc:	f002 0201 	and.w	r2, r2, #1
 800f6d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f6d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800f6d8:	68fa      	ldr	r2, [r7, #12]
 800f6da:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800f6dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f6e6:	f002 0201 	and.w	r2, r2, #1
 800f6ea:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f6ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f6f6:	f002 0203 	and.w	r2, r2, #3
 800f6fa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f6fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f706:	f002 021f 	and.w	r2, r2, #31
 800f70a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f70c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800f716:	f002 0203 	and.w	r2, r2, #3
 800f71a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f71c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800f726:	f002 0203 	and.w	r2, r2, #3
 800f72a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800f72c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f736:	f002 0207 	and.w	r2, r2, #7
 800f73a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800f73c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f746:	f002 021f 	and.w	r2, r2, #31
 800f74a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800f74c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f756:	f002 0201 	and.w	r2, r2, #1
 800f75a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f75c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800f762:	68fa      	ldr	r2, [r7, #12]
 800f764:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f766:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800f76c:	68fa      	ldr	r2, [r7, #12]
 800f76e:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f770:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800f776:	68fa      	ldr	r2, [r7, #12]
 800f778:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f77a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800f780:	68fa      	ldr	r2, [r7, #12]
 800f782:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f784:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800f78a:	68fa      	ldr	r2, [r7, #12]
 800f78c:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800f78e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800f794:	68fa      	ldr	r2, [r7, #12]
 800f796:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800f798:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	8b18      	ldrh	r0, [r3, #24]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	3318      	adds	r3, #24
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	2102      	movs	r1, #2
 800f7a6:	f7f8 ff66 	bl	8008676 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800f7ae:	68fa      	ldr	r2, [r7, #12]
 800f7b0:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800f7b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800f7b8:	68fa      	ldr	r2, [r7, #12]
 800f7ba:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800f7bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800f7c6:	f002 020f 	and.w	r2, r2, #15
 800f7ca:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800f7cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800f7d2:	68fa      	ldr	r2, [r7, #12]
 800f7d4:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800f7d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800f7e0:	f002 020f 	and.w	r2, r2, #15
 800f7e4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800f7e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800f7ec:	68fa      	ldr	r2, [r7, #12]
 800f7ee:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800f7f0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f7f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3718      	adds	r7, #24
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}

0800f7fe <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f7fe:	b580      	push	{r7, lr}
 800f800:	b086      	sub	sp, #24
 800f802:	af00      	add	r7, sp, #0
 800f804:	60f8      	str	r0, [r7, #12]
 800f806:	460b      	mov	r3, r1
 800f808:	607a      	str	r2, [r7, #4]
 800f80a:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f80c:	2300      	movs	r3, #0
 800f80e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 800f810:	897b      	ldrh	r3, [r7, #10]
 800f812:	2b15      	cmp	r3, #21
 800f814:	d802      	bhi.n	800f81c <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f816:	f06f 0309 	mvn.w	r3, #9
 800f81a:	e070      	b.n	800f8fe <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800f828:	68fa      	ldr	r2, [r7, #12]
 800f82a:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f82c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800f832:	68fa      	ldr	r2, [r7, #12]
 800f834:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f836:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800f840:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f844:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f846:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 800f84c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f850:	b298      	uxth	r0, r3
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	3304      	adds	r3, #4
 800f856:	461a      	mov	r2, r3
 800f858:	2102      	movs	r1, #2
 800f85a:	f7f8 ff0c 	bl	8008676 <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800f866:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f86a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f86c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800f872:	68fa      	ldr	r2, [r7, #12]
 800f874:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800f876:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800f87c:	68fa      	ldr	r2, [r7, #12]
 800f87e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f880:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800f88a:	f002 0201 	and.w	r2, r2, #1
 800f88e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f890:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800f89a:	f002 0207 	and.w	r2, r2, #7
 800f89e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f8a0:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	8998      	ldrh	r0, [r3, #12]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	330c      	adds	r3, #12
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	2102      	movs	r1, #2
 800f8ae:	f7f8 fee2 	bl	8008676 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	89d8      	ldrh	r0, [r3, #14]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	330e      	adds	r3, #14
 800f8ba:	461a      	mov	r2, r3
 800f8bc:	2102      	movs	r1, #2
 800f8be:	f7f8 feda 	bl	8008676 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	8a18      	ldrh	r0, [r3, #16]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	3310      	adds	r3, #16
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	2102      	movs	r1, #2
 800f8ce:	f7f8 fed2 	bl	8008676 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800f8d6:	68fa      	ldr	r2, [r7, #12]
 800f8d8:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f8da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800f8e0:	68fa      	ldr	r2, [r7, #12]
 800f8e2:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f8e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800f8ea:	68fa      	ldr	r2, [r7, #12]
 800f8ec:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f8ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800f8f4:	68fa      	ldr	r2, [r7, #12]
 800f8f6:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f8f8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f8fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3718      	adds	r7, #24
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}

0800f906 <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f906:	b580      	push	{r7, lr}
 800f908:	b086      	sub	sp, #24
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	60f8      	str	r0, [r7, #12]
 800f90e:	460b      	mov	r3, r1
 800f910:	607a      	str	r2, [r7, #4]
 800f912:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f914:	2300      	movs	r3, #0
 800f916:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 800f918:	897b      	ldrh	r3, [r7, #10]
 800f91a:	2b16      	cmp	r3, #22
 800f91c:	d802      	bhi.n	800f924 <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f91e:	f06f 0309 	mvn.w	r3, #9
 800f922:	e06e      	b.n	800fa02 <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	f003 030f 	and.w	r3, r3, #15
 800f92c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800f936:	68fa      	ldr	r2, [r7, #12]
 800f938:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f93a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800f944:	f002 020f 	and.w	r2, r2, #15
 800f948:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f94a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800f950:	68fa      	ldr	r2, [r7, #12]
 800f952:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800f954:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800f95e:	f002 020f 	and.w	r2, r2, #15
 800f962:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f964:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800f96a:	68fa      	ldr	r2, [r7, #12]
 800f96c:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800f96e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800f978:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f97c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f97e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800f988:	f002 020f 	and.w	r2, r2, #15
 800f98c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f98e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800f994:	68fa      	ldr	r2, [r7, #12]
 800f996:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f998:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800f9a2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f9a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f9a8:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	8958      	ldrh	r0, [r3, #10]
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	330a      	adds	r3, #10
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	2102      	movs	r1, #2
 800f9b6:	f7f8 fe5e 	bl	8008676 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	8998      	ldrh	r0, [r3, #12]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	330c      	adds	r3, #12
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	2102      	movs	r1, #2
 800f9c6:	f7f8 fe56 	bl	8008676 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800f9ce:	68fa      	ldr	r2, [r7, #12]
 800f9d0:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800f9d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800f9d8:	68fa      	ldr	r2, [r7, #12]
 800f9da:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800f9dc:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	6918      	ldr	r0, [r3, #16]
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	3312      	adds	r3, #18
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	2104      	movs	r1, #4
 800f9ea:	f7f8 fee4 	bl	80087b6 <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800f9f6:	f002 0201 	and.w	r2, r2, #1
 800f9fa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800f9fc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f9fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	3718      	adds	r7, #24
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}

0800fa0a <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fa0a:	b580      	push	{r7, lr}
 800fa0c:	b086      	sub	sp, #24
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	60f8      	str	r0, [r7, #12]
 800fa12:	460b      	mov	r3, r1
 800fa14:	607a      	str	r2, [r7, #4]
 800fa16:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 800fa1c:	897b      	ldrh	r3, [r7, #10]
 800fa1e:	2b11      	cmp	r3, #17
 800fa20:	d802      	bhi.n	800fa28 <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fa22:	f06f 0309 	mvn.w	r3, #9
 800fa26:	e071      	b.n	800fb0c <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	f003 0303 	and.w	r3, r3, #3
 800fa30:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	8858      	ldrh	r0, [r3, #2]
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	461a      	mov	r2, r3
 800fa40:	2102      	movs	r1, #2
 800fa42:	f7f8 fe18 	bl	8008676 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	8898      	ldrh	r0, [r3, #4]
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	3303      	adds	r3, #3
 800fa4e:	461a      	mov	r2, r3
 800fa50:	2102      	movs	r1, #2
 800fa52:	f7f8 fe10 	bl	8008676 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800fa5e:	f002 0201 	and.w	r2, r2, #1
 800fa62:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800fa64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800fa6e:	f002 0207 	and.w	r2, r2, #7
 800fa72:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800fa74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800fa7a:	68fa      	ldr	r2, [r7, #12]
 800fa7c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800fa7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800fa84:	68fa      	ldr	r2, [r7, #12]
 800fa86:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800fa88:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800fa92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fa96:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800fa98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800faa2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800faa6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800faa8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800fab2:	f002 0203 	and.w	r2, r2, #3
 800fab6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800fab8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800fac2:	f002 0203 	and.w	r2, r2, #3
 800fac6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800fac8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800fad2:	f002 020f 	and.w	r2, r2, #15
 800fad6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800fad8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800fade:	68fa      	ldr	r2, [r7, #12]
 800fae0:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800fae2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800fae8:	68fa      	ldr	r2, [r7, #12]
 800faea:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800faec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800faf2:	68fa      	ldr	r2, [r7, #12]
 800faf4:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800faf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800fb00:	f002 0203 	and.w	r2, r2, #3
 800fb04:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800fb06:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fb08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3718      	adds	r7, #24
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}

0800fb14 <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fb14:	b480      	push	{r7}
 800fb16:	b087      	sub	sp, #28
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	60f8      	str	r0, [r7, #12]
 800fb1c:	460b      	mov	r3, r1
 800fb1e:	607a      	str	r2, [r7, #4]
 800fb20:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fb22:	2300      	movs	r3, #0
 800fb24:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 800fb26:	897b      	ldrh	r3, [r7, #10]
 800fb28:	2b04      	cmp	r3, #4
 800fb2a:	d802      	bhi.n	800fb32 <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fb2c:	f06f 0309 	mvn.w	r3, #9
 800fb30:	e025      	b.n	800fb7e <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	f003 0301 	and.w	r3, r3, #1
 800fb3a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800fb48:	f002 0201 	and.w	r2, r2, #1
 800fb4c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800fb4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800fb58:	f002 0201 	and.w	r2, r2, #1
 800fb5c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800fb5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800fb68:	f002 0203 	and.w	r2, r2, #3
 800fb6c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800fb6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800fb74:	68fa      	ldr	r2, [r7, #12]
 800fb76:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800fb78:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fb7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	371c      	adds	r7, #28
 800fb82:	46bd      	mov	sp, r7
 800fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb88:	4770      	bx	lr

0800fb8a <VL53LX_set_system_control>:


VL53LX_Error VL53LX_set_system_control(
	VL53LX_DEV                 Dev,
	VL53LX_system_control_t   *pdata)
{
 800fb8a:	b580      	push	{r7, lr}
 800fb8c:	b084      	sub	sp, #16
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
 800fb92:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fb94:	2300      	movs	r3, #0
 800fb96:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800fb98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d108      	bne.n	800fbb2 <VL53LX_set_system_control+0x28>
		status = VL53LX_i2c_encode_system_control(
 800fba0:	f107 0308 	add.w	r3, r7, #8
 800fba4:	461a      	mov	r2, r3
 800fba6:	2105      	movs	r1, #5
 800fba8:	6838      	ldr	r0, [r7, #0]
 800fbaa:	f7ff ffb3 	bl	800fb14 <VL53LX_i2c_encode_system_control>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 800fbb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d108      	bne.n	800fbcc <VL53LX_set_system_control+0x42>
		status = VL53LX_WriteMulti(
 800fbba:	f107 0208 	add.w	r2, r7, #8
 800fbbe:	2305      	movs	r3, #5
 800fbc0:	2183      	movs	r1, #131	; 0x83
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f001 fa76 	bl	80110b4 <VL53LX_WriteMulti>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800fbcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3710      	adds	r7, #16
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b086      	sub	sp, #24
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	4603      	mov	r3, r0
 800fbe0:	60b9      	str	r1, [r7, #8]
 800fbe2:	607a      	str	r2, [r7, #4]
 800fbe4:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 800fbea:	89fb      	ldrh	r3, [r7, #14]
 800fbec:	2b2b      	cmp	r3, #43	; 0x2b
 800fbee:	d802      	bhi.n	800fbf6 <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fbf0:	f06f 0309 	mvn.w	r3, #9
 800fbf4:	e0e2      	b.n	800fdbc <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	781b      	ldrb	r3, [r3, #0]
 800fbfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fbfe:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	785a      	ldrb	r2, [r3, #1]
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	3302      	adds	r3, #2
 800fc10:	781b      	ldrb	r3, [r3, #0]
 800fc12:	f003 030f 	and.w	r3, r3, #15
 800fc16:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	78da      	ldrb	r2, [r3, #3]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	3304      	adds	r3, #4
 800fc28:	4619      	mov	r1, r3
 800fc2a:	2002      	movs	r0, #2
 800fc2c:	f7f8 fd4e 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fc30:	4603      	mov	r3, r0
 800fc32:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	3306      	adds	r3, #6
 800fc3c:	4619      	mov	r1, r3
 800fc3e:	2002      	movs	r0, #2
 800fc40:	f7f8 fd44 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fc44:	4603      	mov	r3, r0
 800fc46:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	3308      	adds	r3, #8
 800fc50:	4619      	mov	r1, r3
 800fc52:	2002      	movs	r0, #2
 800fc54:	f7f8 fd3a 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	330a      	adds	r3, #10
 800fc64:	4619      	mov	r1, r3
 800fc66:	2002      	movs	r0, #2
 800fc68:	f7f8 fd30 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 800fc74:	68bb      	ldr	r3, [r7, #8]
 800fc76:	330c      	adds	r3, #12
 800fc78:	4619      	mov	r1, r3
 800fc7a:	2002      	movs	r0, #2
 800fc7c:	f7f8 fd26 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fc80:	4603      	mov	r3, r0
 800fc82:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	330e      	adds	r3, #14
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	2002      	movs	r0, #2
 800fc90:	f7f8 fd1c 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fc94:	4603      	mov	r3, r0
 800fc96:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	3310      	adds	r3, #16
 800fca0:	4619      	mov	r1, r3
 800fca2:	2002      	movs	r0, #2
 800fca4:	f7f8 fd12 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	3312      	adds	r3, #18
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	2002      	movs	r0, #2
 800fcb8:	f7f8 fd08 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	3314      	adds	r3, #20
 800fcc8:	4619      	mov	r1, r3
 800fcca:	2002      	movs	r0, #2
 800fccc:	f7f8 fcfe 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	3316      	adds	r3, #22
 800fcdc:	4619      	mov	r1, r3
 800fcde:	2002      	movs	r0, #2
 800fce0:	f7f8 fcf4 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fce4:	4603      	mov	r3, r0
 800fce6:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	3318      	adds	r3, #24
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	2002      	movs	r0, #2
 800fcf4:	f7f8 fcea 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	331a      	adds	r3, #26
 800fd04:	4619      	mov	r1, r3
 800fd06:	2002      	movs	r0, #2
 800fd08:	f7f8 fce0 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	331c      	adds	r3, #28
 800fd18:	4619      	mov	r1, r3
 800fd1a:	2002      	movs	r0, #2
 800fd1c:	f7f8 fcd6 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fd20:	4603      	mov	r3, r0
 800fd22:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	331e      	adds	r3, #30
 800fd2c:	4619      	mov	r1, r3
 800fd2e:	2002      	movs	r0, #2
 800fd30:	f7f8 fccc 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fd34:	4603      	mov	r3, r0
 800fd36:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	3320      	adds	r3, #32
 800fd40:	4619      	mov	r1, r3
 800fd42:	2002      	movs	r0, #2
 800fd44:	f7f8 fcc2 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	3322      	adds	r3, #34	; 0x22
 800fd54:	4619      	mov	r1, r3
 800fd56:	2002      	movs	r0, #2
 800fd58:	f7f8 fcb8 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	3324      	adds	r3, #36	; 0x24
 800fd68:	4619      	mov	r1, r3
 800fd6a:	2002      	movs	r0, #2
 800fd6c:	f7f8 fcae 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fd70:	4603      	mov	r3, r0
 800fd72:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	3326      	adds	r3, #38	; 0x26
 800fd7c:	4619      	mov	r1, r3
 800fd7e:	2002      	movs	r0, #2
 800fd80:	f7f8 fca4 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fd84:	4603      	mov	r3, r0
 800fd86:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	3328      	adds	r3, #40	; 0x28
 800fd90:	4619      	mov	r1, r3
 800fd92:	2002      	movs	r0, #2
 800fd94:	f7f8 fc9a 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800fdb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3718      	adds	r7, #24
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}

0800fdc4 <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b086      	sub	sp, #24
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	4603      	mov	r3, r0
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	607a      	str	r2, [r7, #4]
 800fdd0:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 800fdd6:	89fb      	ldrh	r3, [r7, #14]
 800fdd8:	2b20      	cmp	r3, #32
 800fdda:	d802      	bhi.n	800fde2 <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fddc:	f06f 0309 	mvn.w	r3, #9
 800fde0:	e04d      	b.n	800fe7e <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 800fde2:	68b9      	ldr	r1, [r7, #8]
 800fde4:	2004      	movs	r0, #4
 800fde6:	f7f8 fd10 	bl	800880a <VL53LX_i2c_decode_uint32_t>
 800fdea:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	3304      	adds	r3, #4
 800fdf4:	4619      	mov	r1, r3
 800fdf6:	2004      	movs	r0, #4
 800fdf8:	f7f8 fd07 	bl	800880a <VL53LX_i2c_decode_uint32_t>
 800fdfc:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	3308      	adds	r3, #8
 800fe06:	4619      	mov	r1, r3
 800fe08:	2004      	movs	r0, #4
 800fe0a:	f7f8 fd1b 	bl	8008844 <VL53LX_i2c_decode_int32_t>
 800fe0e:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	330c      	adds	r3, #12
 800fe18:	4619      	mov	r1, r3
 800fe1a:	2004      	movs	r0, #4
 800fe1c:	f7f8 fcf5 	bl	800880a <VL53LX_i2c_decode_uint32_t>
 800fe20:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	3310      	adds	r3, #16
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	2004      	movs	r0, #4
 800fe2e:	f7f8 fcec 	bl	800880a <VL53LX_i2c_decode_uint32_t>
 800fe32:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	3314      	adds	r3, #20
 800fe3c:	4619      	mov	r1, r3
 800fe3e:	2004      	movs	r0, #4
 800fe40:	f7f8 fce3 	bl	800880a <VL53LX_i2c_decode_uint32_t>
 800fe44:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	3318      	adds	r3, #24
 800fe4e:	4619      	mov	r1, r3
 800fe50:	2004      	movs	r0, #4
 800fe52:	f7f8 fcf7 	bl	8008844 <VL53LX_i2c_decode_int32_t>
 800fe56:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 800fe5c:	68bb      	ldr	r3, [r7, #8]
 800fe5e:	331c      	adds	r3, #28
 800fe60:	4619      	mov	r1, r3
 800fe62:	2004      	movs	r0, #4
 800fe64:	f7f8 fcd1 	bl	800880a <VL53LX_i2c_decode_uint32_t>
 800fe68:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	f893 2020 	ldrb.w	r2, [r3, #32]
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800fe7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3718      	adds	r7, #24
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}

0800fe86 <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 800fe86:	b580      	push	{r7, lr}
 800fe88:	b086      	sub	sp, #24
 800fe8a:	af00      	add	r7, sp, #0
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	60b9      	str	r1, [r7, #8]
 800fe90:	607a      	str	r2, [r7, #4]
 800fe92:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fe94:	2300      	movs	r3, #0
 800fe96:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 800fe98:	89fb      	ldrh	r3, [r7, #14]
 800fe9a:	2b37      	cmp	r3, #55	; 0x37
 800fe9c:	d802      	bhi.n	800fea4 <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fe9e:	f06f 0309 	mvn.w	r3, #9
 800fea2:	e15e      	b.n	8010162 <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 800fea4:	68b9      	ldr	r1, [r7, #8]
 800fea6:	2002      	movs	r0, #2
 800fea8:	f7f8 fc10 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800feac:	4603      	mov	r3, r0
 800feae:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	3302      	adds	r3, #2
 800feb8:	781b      	ldrb	r3, [r3, #0]
 800feba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800febe:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	3303      	adds	r3, #3
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fece:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	3304      	adds	r3, #4
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	f003 0303 	and.w	r3, r3, #3
 800fede:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	3305      	adds	r3, #5
 800fee8:	781b      	ldrb	r3, [r3, #0]
 800feea:	f003 0301 	and.w	r3, r3, #1
 800feee:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	3306      	adds	r3, #6
 800fef8:	781b      	ldrb	r3, [r3, #0]
 800fefa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fefe:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	3307      	adds	r3, #7
 800ff08:	781b      	ldrb	r3, [r3, #0]
 800ff0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff0e:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	3308      	adds	r3, #8
 800ff18:	4619      	mov	r1, r3
 800ff1a:	2002      	movs	r0, #2
 800ff1c:	f7f8 fbd6 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800ff20:	4603      	mov	r3, r0
 800ff22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ff26:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	330a      	adds	r3, #10
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	f003 0303 	and.w	r3, r3, #3
 800ff36:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	330b      	adds	r3, #11
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	f003 0303 	and.w	r3, r3, #3
 800ff46:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	330c      	adds	r3, #12
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	f003 030f 	and.w	r3, r3, #15
 800ff56:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	330d      	adds	r3, #13
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	f003 0307 	and.w	r3, r3, #7
 800ff66:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	330e      	adds	r3, #14
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	f003 0301 	and.w	r3, r3, #1
 800ff76:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	330f      	adds	r3, #15
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	f003 0303 	and.w	r3, r3, #3
 800ff86:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	7c1a      	ldrb	r2, [r3, #16]
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	7c5a      	ldrb	r2, [r3, #17]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	3312      	adds	r3, #18
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	2002      	movs	r0, #2
 800ffa4:	f7f8 fb92 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ffae:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	3316      	adds	r3, #22
 800ffb8:	4619      	mov	r1, r3
 800ffba:	2002      	movs	r0, #2
 800ffbc:	f7f8 fb86 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	3318      	adds	r3, #24
 800ffcc:	4619      	mov	r1, r3
 800ffce:	2002      	movs	r0, #2
 800ffd0:	f7f8 fb7c 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	331a      	adds	r3, #26
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	f003 0301 	and.w	r3, r3, #1
 800ffe6:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	331b      	adds	r3, #27
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	f003 0307 	and.w	r3, r3, #7
 800fff6:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800fffc:	68bb      	ldr	r3, [r7, #8]
 800fffe:	7f1a      	ldrb	r2, [r3, #28]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	7f5a      	ldrb	r2, [r3, #29]
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	331e      	adds	r3, #30
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010016:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	331f      	adds	r3, #31
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010026:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	3320      	adds	r3, #32
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	f003 0303 	and.w	r3, r3, #3
 8010036:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	3321      	adds	r3, #33	; 0x21
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	f003 030f 	and.w	r3, r3, #15
 8010046:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	3325      	adds	r3, #37	; 0x25
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	f003 0301 	and.w	r3, r3, #1
 801007a:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	3326      	adds	r3, #38	; 0x26
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	f003 0303 	and.w	r3, r3, #3
 801008c:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	3327      	adds	r3, #39	; 0x27
 8010098:	781b      	ldrb	r3, [r3, #0]
 801009a:	f003 031f 	and.w	r3, r3, #31
 801009e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	3328      	adds	r3, #40	; 0x28
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	f003 031f 	and.w	r3, r3, #31
 80100b0:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	3329      	adds	r3, #41	; 0x29
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	f003 031f 	and.w	r3, r3, #31
 80100c2:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	332a      	adds	r3, #42	; 0x2a
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	f003 0301 	and.w	r3, r3, #1
 80100d4:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	332b      	adds	r3, #43	; 0x2b
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	f003 0301 	and.w	r3, r3, #1
 80100e6:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	332c      	adds	r3, #44	; 0x2c
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	f003 0303 	and.w	r3, r3, #3
 80100f8:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	332d      	adds	r3, #45	; 0x2d
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801010a:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	332e      	adds	r3, #46	; 0x2e
 8010116:	4619      	mov	r1, r3
 8010118:	2004      	movs	r0, #4
 801011a:	f7f8 fb76 	bl	800880a <VL53LX_i2c_decode_uint32_t>
 801011e:	4603      	mov	r3, r0
 8010120:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	3332      	adds	r3, #50	; 0x32
 801012c:	4619      	mov	r1, r3
 801012e:	2004      	movs	r0, #4
 8010130:	f7f8 fb6b 	bl	800880a <VL53LX_i2c_decode_uint32_t>
 8010134:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	3336      	adds	r3, #54	; 0x36
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	f003 0301 	and.w	r3, r3, #1
 8010144:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	3337      	adds	r3, #55	; 0x37
 8010150:	781b      	ldrb	r3, [r3, #0]
 8010152:	f003 0301 	and.w	r3, r3, #1
 8010156:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 801015e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010162:	4618      	mov	r0, r3
 8010164:	3718      	adds	r7, #24
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}

0801016a <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 801016a:	b580      	push	{r7, lr}
 801016c:	b086      	sub	sp, #24
 801016e:	af00      	add	r7, sp, #0
 8010170:	4603      	mov	r3, r0
 8010172:	60b9      	str	r1, [r7, #8]
 8010174:	607a      	str	r2, [r7, #4]
 8010176:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010178:	2300      	movs	r3, #0
 801017a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 801017c:	89fb      	ldrh	r3, [r7, #14]
 801017e:	2b30      	cmp	r3, #48	; 0x30
 8010180:	d802      	bhi.n	8010188 <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010182:	f06f 0309 	mvn.w	r3, #9
 8010186:	e112      	b.n	80103ae <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	785a      	ldrb	r2, [r3, #1]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	789a      	ldrb	r2, [r3, #2]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	3303      	adds	r3, #3
 80101a4:	4619      	mov	r1, r3
 80101a6:	2002      	movs	r0, #2
 80101a8:	f7f8 fa90 	bl	80086cc <VL53LX_i2c_decode_uint16_t>
 80101ac:	4603      	mov	r3, r0
 80101ae:	461a      	mov	r2, r3
	pdata->identification__module_id =
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	3305      	adds	r3, #5
 80101b8:	781b      	ldrb	r3, [r3, #0]
 80101ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101be:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	3306      	adds	r3, #6
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	f003 0307 	and.w	r3, r3, #7
 80101ce:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	3307      	adds	r3, #7
 80101d8:	781b      	ldrb	r3, [r3, #0]
 80101da:	f003 0307 	and.w	r3, r3, #7
 80101de:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	3308      	adds	r3, #8
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80101ee:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	3309      	adds	r3, #9
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80101fe:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	330a      	adds	r3, #10
 8010208:	781b      	ldrb	r3, [r3, #0]
 801020a:	f003 0301 	and.w	r3, r3, #1
 801020e:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	330b      	adds	r3, #11
 8010218:	781b      	ldrb	r3, [r3, #0]
 801021a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801021e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	330c      	adds	r3, #12
 8010228:	781b      	ldrb	r3, [r3, #0]
 801022a:	f003 0301 	and.w	r3, r3, #1
 801022e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	330d      	adds	r3, #13
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801023e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	330e      	adds	r3, #14
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801024e:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	7bda      	ldrb	r2, [r3, #15]
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	7c1a      	ldrb	r2, [r3, #16]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	7c5a      	ldrb	r2, [r3, #17]
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	7c9a      	ldrb	r2, [r3, #18]
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	7cda      	ldrb	r2, [r3, #19]
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	7d1a      	ldrb	r2, [r3, #20]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	7d5a      	ldrb	r2, [r3, #21]
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	7d9a      	ldrb	r2, [r3, #22]
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	7dda      	ldrb	r2, [r3, #23]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	7e1a      	ldrb	r2, [r3, #24]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	7e5a      	ldrb	r2, [r3, #25]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	7e9a      	ldrb	r2, [r3, #26]
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	7eda      	ldrb	r2, [r3, #27]
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	7f1a      	ldrb	r2, [r3, #28]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	7f5a      	ldrb	r2, [r3, #29]
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	7f9a      	ldrb	r2, [r3, #30]
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	7fda      	ldrb	r2, [r3, #31]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	f893 2020 	ldrb.w	r2, [r3, #32]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80103aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3718      	adds	r7, #24
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}

080103b6 <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 80103b6:	b580      	push	{r7, lr}
 80103b8:	b090      	sub	sp, #64	; 0x40
 80103ba:	af00      	add	r7, sp, #0
 80103bc:	6078      	str	r0, [r7, #4]
 80103be:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80103c0:	2300      	movs	r3, #0
 80103c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80103c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d10a      	bne.n	80103e4 <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 80103ce:	f107 020c 	add.w	r2, r7, #12
 80103d2:	2331      	movs	r3, #49	; 0x31
 80103d4:	f240 110f 	movw	r1, #271	; 0x10f
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f000 fea1 	bl	8011120 <VL53LX_ReadMulti>
 80103de:	4603      	mov	r3, r0
 80103e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 80103e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d109      	bne.n	8010400 <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 80103ec:	f107 030c 	add.w	r3, r7, #12
 80103f0:	683a      	ldr	r2, [r7, #0]
 80103f2:	4619      	mov	r1, r3
 80103f4:	2031      	movs	r0, #49	; 0x31
 80103f6:	f7ff feb8 	bl	801016a <VL53LX_i2c_decode_nvm_copy_data>
 80103fa:	4603      	mov	r3, r0
 80103fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8010400:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8010404:	4618      	mov	r0, r3
 8010406:	3740      	adds	r7, #64	; 0x40
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}

0801040c <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 801040c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010410:	b0a1      	sub	sp, #132	; 0x84
 8010412:	af00      	add	r7, sp, #0
 8010414:	64b9      	str	r1, [r7, #72]	; 0x48
 8010416:	647a      	str	r2, [r7, #68]	; 0x44
 8010418:	643b      	str	r3, [r7, #64]	; 0x40
 801041a:	4603      	mov	r3, r0
 801041c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8010420:	23f1      	movs	r3, #241	; 0xf1
 8010422:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint32_t sigma_int  = VL53LX_D_002;
 8010426:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801042a:	657b      	str	r3, [r7, #84]	; 0x54

	uint32_t pll_period_mm  = 0;
 801042c:	2300      	movs	r3, #0
 801042e:	653b      	str	r3, [r7, #80]	; 0x50

	uint64_t tmp0        = 0;
 8010430:	f04f 0200 	mov.w	r2, #0
 8010434:	f04f 0300 	mov.w	r3, #0
 8010438:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	uint64_t tmp1        = 0;
 801043c:	f04f 0200 	mov.w	r2, #0
 8010440:	f04f 0300 	mov.w	r3, #0
 8010444:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	uint64_t b_minus_amb = 0;
 8010448:	f04f 0200 	mov.w	r2, #0
 801044c:	f04f 0300 	mov.w	r3, #0
 8010450:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t VL53LX_p_055   = 0;
 8010454:	f04f 0200 	mov.w	r2, #0
 8010458:	f04f 0300 	mov.w	r3, #0
 801045c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	*psigma_est  = VL53LX_D_002;
 8010460:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010468:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 801046a:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 801046e:	2b00      	cmp	r3, #0
 8010470:	f000 8259 	beq.w	8010926 <VL53LX_f_023+0x51a>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 8010474:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8010478:	4618      	mov	r0, r3
 801047a:	f7fb fbd3 	bl	800bc24 <VL53LX_calc_pll_period_mm>
 801047e:	6538      	str	r0, [r7, #80]	; 0x50



		if (VL53LX_p_028 > VL53LX_p_032)
 8010480:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010486:	429a      	cmp	r2, r3
 8010488:	d90f      	bls.n	80104aa <VL53LX_f_023+0x9e>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 801048a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801048e:	4618      	mov	r0, r3
 8010490:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_032;
 8010494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010496:	461a      	mov	r2, r3
 8010498:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 801049c:	ebb0 0a02 	subs.w	sl, r0, r2
 80104a0:	eb61 0b03 	sbc.w	fp, r1, r3
 80104a4:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 80104a8:	e00e      	b.n	80104c8 <VL53LX_f_023+0xbc>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 80104aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104ac:	4618      	mov	r0, r3
 80104ae:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_028;
 80104b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80104b6:	461a      	mov	r2, r3
 80104b8:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 80104bc:	ebb0 0802 	subs.w	r8, r0, r2
 80104c0:	eb61 0903 	sbc.w	r9, r1, r3
 80104c4:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60



		if (VL53LX_p_007 > VL53LX_p_001)
 80104c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80104ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d911      	bls.n	80104f4 <VL53LX_f_023+0xe8>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 80104d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104d2:	4618      	mov	r0, r3
 80104d4:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_001;
 80104d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104da:	461a      	mov	r2, r3
 80104dc:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 80104e0:	1a86      	subs	r6, r0, r2
 80104e2:	62be      	str	r6, [r7, #40]	; 0x28
 80104e4:	eb61 0303 	sbc.w	r3, r1, r3
 80104e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80104ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80104ee:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80104f2:	e010      	b.n	8010516 <VL53LX_f_023+0x10a>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 80104f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104f6:	4618      	mov	r0, r3
 80104f8:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_007;
 80104fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104fe:	461a      	mov	r2, r3
 8010500:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8010504:	1a86      	subs	r6, r0, r2
 8010506:	623e      	str	r6, [r7, #32]
 8010508:	eb61 0303 	sbc.w	r3, r1, r3
 801050c:	627b      	str	r3, [r7, #36]	; 0x24
 801050e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010512:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58



		if (b_minus_amb != 0) {
 8010516:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801051a:	4313      	orrs	r3, r2
 801051c:	f000 8203 	beq.w	8010926 <VL53LX_f_023+0x51a>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 8010520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010522:	4618      	mov	r0, r3
 8010524:	f04f 0100 	mov.w	r1, #0
 8010528:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801052c:	461a      	mov	r2, r3
 801052e:	f04f 0300 	mov.w	r3, #0
 8010532:	1884      	adds	r4, r0, r2
 8010534:	eb41 0503 	adc.w	r5, r1, r3
					(uint64_t)VL53LX_p_028;
 8010538:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801053c:	461a      	mov	r2, r3
 801053e:	f04f 0300 	mov.w	r3, #0
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 8010542:	18a1      	adds	r1, r4, r2
 8010544:	61b9      	str	r1, [r7, #24]
 8010546:	eb45 0303 	adc.w	r3, r5, r3
 801054a:	61fb      	str	r3, [r7, #28]
 801054c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010550:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > VL53LX_D_003)
 8010554:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010558:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801055c:	f04f 0100 	mov.w	r1, #0
 8010560:	4299      	cmp	r1, r3
 8010562:	bf08      	it	eq
 8010564:	4290      	cmpeq	r0, r2
 8010566:	d205      	bcs.n	8010574 <VL53LX_f_023+0x168>
				tmp0 = VL53LX_D_003;
 8010568:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801056c:	f04f 0300 	mov.w	r3, #0
 8010570:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 8010574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010576:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010578:	fb02 f203 	mul.w	r2, r2, r3
 801057c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801057e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010580:	fb01 f303 	mul.w	r3, r1, r3
 8010584:	18d1      	adds	r1, r2, r3
 8010586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010588:	fba3 2303 	umull	r2, r3, r3, r3
 801058c:	4419      	add	r1, r3
 801058e:	460b      	mov	r3, r1
 8010590:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8010594:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 << 8;
 8010598:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801059c:	f04f 0200 	mov.w	r2, #0
 80105a0:	f04f 0300 	mov.w	r3, #0
 80105a4:	020b      	lsls	r3, r1, #8
 80105a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80105aa:	0202      	lsls	r2, r0, #8
 80105ac:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > VL53LX_D_004)
 80105b0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80105b4:	f04f 30ff 	mov.w	r0, #4294967295
 80105b8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80105bc:	4299      	cmp	r1, r3
 80105be:	bf08      	it	eq
 80105c0:	4290      	cmpeq	r0, r2
 80105c2:	d205      	bcs.n	80105d0 <VL53LX_f_023+0x1c4>
				tmp1 = VL53LX_D_004;
 80105c4:	f04f 32ff 	mov.w	r2, #4294967295
 80105c8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80105cc:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp1 = do_division_u(tmp1, b_minus_amb);
 80105d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80105d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80105d8:	f7ef fea2 	bl	8000320 <__aeabi_uldivmod>
 80105dc:	4602      	mov	r2, r0
 80105de:	460b      	mov	r3, r1
 80105e0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = do_division_u(tmp1, b_minus_amb);
 80105e4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80105e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80105ec:	f7ef fe98 	bl	8000320 <__aeabi_uldivmod>
 80105f0:	4602      	mov	r2, r0
 80105f2:	460b      	mov	r3, r1
 80105f4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_005)
 80105f8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80105fc:	2b80      	cmp	r3, #128	; 0x80
 80105fe:	bf08      	it	eq
 8010600:	2a00      	cmpeq	r2, #0
 8010602:	d305      	bcc.n	8010610 <VL53LX_f_023+0x204>
				tmp1 = (uint64_t)VL53LX_D_005;
 8010604:	f04f 32ff 	mov.w	r2, #4294967295
 8010608:	f04f 037f 	mov.w	r3, #127	; 0x7f
 801060c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 * tmp0;
 8010610:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010612:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010614:	fb02 f203 	mul.w	r2, r2, r3
 8010618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801061a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801061c:	fb01 f303 	mul.w	r3, r1, r3
 8010620:	18d1      	adds	r1, r2, r3
 8010622:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010624:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010626:	fba2 2303 	umull	r2, r3, r2, r3
 801062a:	4419      	add	r1, r3
 801062c:	460b      	mov	r3, r1
 801062e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010632:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801063a:	4618      	mov	r0, r3
 801063c:	f04f 0100 	mov.w	r1, #0
 8010640:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010644:	461a      	mov	r2, r3
 8010646:	f04f 0300 	mov.w	r3, #0
 801064a:	1884      	adds	r4, r0, r2
 801064c:	63bc      	str	r4, [r7, #56]	; 0x38
 801064e:	eb41 0303 	adc.w	r3, r1, r3
 8010652:	63fb      	str	r3, [r7, #60]	; 0x3c
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8010654:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010658:	461a      	mov	r2, r3
 801065a:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801065e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8010662:	4621      	mov	r1, r4
 8010664:	1889      	adds	r1, r1, r2
 8010666:	6339      	str	r1, [r7, #48]	; 0x30
 8010668:	4629      	mov	r1, r5
 801066a:	eb43 0101 	adc.w	r1, r3, r1
 801066e:	6379      	str	r1, [r7, #52]	; 0x34
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8010670:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010674:	461a      	mov	r2, r3
 8010676:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801067a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801067e:	4621      	mov	r1, r4
 8010680:	1889      	adds	r1, r1, r2
 8010682:	6139      	str	r1, [r7, #16]
 8010684:	4629      	mov	r1, r5
 8010686:	eb43 0101 	adc.w	r1, r3, r1
 801068a:	6179      	str	r1, [r7, #20]
 801068c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010690:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_003)
 8010694:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010698:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801069c:	f04f 0100 	mov.w	r1, #0
 80106a0:	4299      	cmp	r1, r3
 80106a2:	bf08      	it	eq
 80106a4:	4290      	cmpeq	r0, r2
 80106a6:	d205      	bcs.n	80106b4 <VL53LX_f_023+0x2a8>
				tmp1 = (uint64_t)VL53LX_D_003;
 80106a8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80106ac:	f04f 0300 	mov.w	r3, #0
 80106b0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			tmp1 = tmp1 << 8;
 80106b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80106b8:	f04f 0200 	mov.w	r2, #0
 80106bc:	f04f 0300 	mov.w	r3, #0
 80106c0:	020b      	lsls	r3, r1, #8
 80106c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80106c6:	0202      	lsls	r2, r0, #8
 80106c8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 + tmp0;
 80106cc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80106d0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80106d4:	1884      	adds	r4, r0, r2
 80106d6:	60bc      	str	r4, [r7, #8]
 80106d8:	eb41 0303 	adc.w	r3, r1, r3
 80106dc:	60fb      	str	r3, [r7, #12]
 80106de:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80106e2:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > (uint64_t)VL53LX_D_006)
 80106e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80106ea:	2a00      	cmp	r2, #0
 80106ec:	f173 0300 	sbcs.w	r3, r3, #0
 80106f0:	da05      	bge.n	80106fe <VL53LX_f_023+0x2f2>
				tmp0 = (uint64_t)VL53LX_D_006;
 80106f2:	f04f 32ff 	mov.w	r2, #4294967295
 80106f6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80106fa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 80106fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010702:	2b01      	cmp	r3, #1
 8010704:	bf08      	it	eq
 8010706:	2a00      	cmpeq	r2, #0
 8010708:	d31e      	bcc.n	8010748 <VL53LX_f_023+0x33c>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 801070a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801070e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010712:	f7ef fe05 	bl	8000320 <__aeabi_uldivmod>
 8010716:	4602      	mov	r2, r0
 8010718:	460b      	mov	r3, r1
 801071a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 801071e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010720:	461a      	mov	r2, r3
 8010722:	f04f 0300 	mov.w	r3, #0
 8010726:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010728:	fb02 f001 	mul.w	r0, r2, r1
 801072c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801072e:	fb03 f101 	mul.w	r1, r3, r1
 8010732:	4401      	add	r1, r0
 8010734:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010736:	fba0 2302 	umull	r2, r3, r0, r2
 801073a:	4419      	add	r1, r3
 801073c:	460b      	mov	r3, r1
 801073e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010742:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010746:	e01d      	b.n	8010784 <VL53LX_f_023+0x378>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801074a:	461a      	mov	r2, r3
 801074c:	f04f 0300 	mov.w	r3, #0
 8010750:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010752:	fb02 f001 	mul.w	r0, r2, r1
 8010756:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010758:	fb03 f101 	mul.w	r1, r3, r1
 801075c:	4401      	add	r1, r0
 801075e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010760:	fba0 2302 	umull	r2, r3, r0, r2
 8010764:	4419      	add	r1, r3
 8010766:	460b      	mov	r3, r1
 8010768:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 801076c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010770:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010774:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010778:	f7ef fdd2 	bl	8000320 <__aeabi_uldivmod>
 801077c:	4602      	mov	r2, r0
 801077e:	460b      	mov	r3, r1
 8010780:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010784:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010788:	2a00      	cmp	r2, #0
 801078a:	f173 0300 	sbcs.w	r3, r3, #0
 801078e:	da05      	bge.n	801079c <VL53LX_f_023+0x390>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010790:	f04f 32ff 	mov.w	r2, #4294967295
 8010794:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010798:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 801079c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80107a0:	2b01      	cmp	r3, #1
 80107a2:	bf08      	it	eq
 80107a4:	2a00      	cmpeq	r2, #0
 80107a6:	d32a      	bcc.n	80107fe <VL53LX_f_023+0x3f2>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80107a8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80107ac:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80107b0:	f7ef fdb6 	bl	8000320 <__aeabi_uldivmod>
 80107b4:	4602      	mov	r2, r0
 80107b6:	460b      	mov	r3, r1
 80107b8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 80107bc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80107c0:	f04f 0200 	mov.w	r2, #0
 80107c4:	f04f 0300 	mov.w	r3, #0
 80107c8:	0882      	lsrs	r2, r0, #2
 80107ca:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80107ce:	088b      	lsrs	r3, r1, #2
 80107d0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 80107d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107d6:	461a      	mov	r2, r3
 80107d8:	f04f 0300 	mov.w	r3, #0
 80107dc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80107de:	fb02 f001 	mul.w	r0, r2, r1
 80107e2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80107e4:	fb03 f101 	mul.w	r1, r3, r1
 80107e8:	4401      	add	r1, r0
 80107ea:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80107ec:	fba0 2302 	umull	r2, r3, r0, r2
 80107f0:	4419      	add	r1, r3
 80107f2:	460b      	mov	r3, r1
 80107f4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80107f8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80107fc:	e029      	b.n	8010852 <VL53LX_f_023+0x446>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 80107fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010800:	461a      	mov	r2, r3
 8010802:	f04f 0300 	mov.w	r3, #0
 8010806:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010808:	fb02 f001 	mul.w	r0, r2, r1
 801080c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801080e:	fb03 f101 	mul.w	r1, r3, r1
 8010812:	4401      	add	r1, r0
 8010814:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010816:	fba0 2302 	umull	r2, r3, r0, r2
 801081a:	4419      	add	r1, r3
 801081c:	460b      	mov	r3, r1
 801081e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010822:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010826:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801082a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801082e:	f7ef fd77 	bl	8000320 <__aeabi_uldivmod>
 8010832:	4602      	mov	r2, r0
 8010834:	460b      	mov	r3, r1
 8010836:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 801083a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801083e:	f04f 0200 	mov.w	r2, #0
 8010842:	f04f 0300 	mov.w	r3, #0
 8010846:	0882      	lsrs	r2, r0, #2
 8010848:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 801084c:	088b      	lsrs	r3, r1, #2
 801084e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010852:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010856:	2a00      	cmp	r2, #0
 8010858:	f173 0300 	sbcs.w	r3, r3, #0
 801085c:	da05      	bge.n	801086a <VL53LX_f_023+0x45e>
				tmp0 = (uint64_t)VL53LX_D_006;
 801085e:	f04f 32ff 	mov.w	r2, #4294967295
 8010862:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010866:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp0 = tmp0 >> 2;
 801086a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801086e:	f04f 0200 	mov.w	r2, #0
 8010872:	f04f 0300 	mov.w	r3, #0
 8010876:	0882      	lsrs	r2, r0, #2
 8010878:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 801087c:	088b      	lsrs	r3, r1, #2
 801087e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010882:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010886:	2b01      	cmp	r3, #1
 8010888:	bf08      	it	eq
 801088a:	2a00      	cmpeq	r2, #0
 801088c:	d305      	bcc.n	801089a <VL53LX_f_023+0x48e>
				tmp0 = (uint64_t)VL53LX_D_007;
 801088e:	f04f 32ff 	mov.w	r2, #4294967295
 8010892:	f04f 0300 	mov.w	r3, #0
 8010896:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 801089a:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 801089e:	f04f 0100 	mov.w	r1, #0
 80108a2:	f04f 0200 	mov.w	r2, #0
 80108a6:	f04f 0300 	mov.w	r3, #0
 80108aa:	01cb      	lsls	r3, r1, #7
 80108ac:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 80108b0:	01c2      	lsls	r2, r0, #7
 80108b2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 * tmp1;
 80108b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80108ba:	fb02 f203 	mul.w	r2, r2, r3
 80108be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80108c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80108c2:	fb01 f303 	mul.w	r3, r1, r3
 80108c6:	18d1      	adds	r1, r2, r3
 80108c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80108ca:	fba3 2303 	umull	r2, r3, r3, r3
 80108ce:	4419      	add	r1, r3
 80108d0:	460b      	mov	r3, r1
 80108d2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 80108d6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp0 = tmp0 + tmp1;
 80108da:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80108de:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80108e2:	1884      	adds	r4, r0, r2
 80108e4:	603c      	str	r4, [r7, #0]
 80108e6:	eb41 0303 	adc.w	r3, r1, r3
 80108ea:	607b      	str	r3, [r7, #4]
 80108ec:	e9d7 3400 	ldrd	r3, r4, [r7]
 80108f0:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 80108f4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80108f8:	2b01      	cmp	r3, #1
 80108fa:	bf08      	it	eq
 80108fc:	2a00      	cmpeq	r2, #0
 80108fe:	d305      	bcc.n	801090c <VL53LX_f_023+0x500>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010900:	f04f 32ff 	mov.w	r2, #4294967295
 8010904:	f04f 0300 	mov.w	r3, #0
 8010908:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 801090c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801090e:	4618      	mov	r0, r3
 8010910:	f7fb f821 	bl	800b956 <VL53LX_isqrt>
 8010914:	6578      	str	r0, [r7, #84]	; 0x54

			*psigma_est = (uint16_t)sigma_int;
 8010916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010918:	b29a      	uxth	r2, r3
 801091a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801091e:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 8010920:	2300      	movs	r3, #0
 8010922:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}

	}

	return status;
 8010926:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 801092a:	4618      	mov	r0, r3
 801092c:	3784      	adds	r7, #132	; 0x84
 801092e:	46bd      	mov	sp, r7
 8010930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010934 <VL53LX_wait_for_test_completion>:
}


VL53LX_Error VL53LX_wait_for_test_completion(
	VL53LX_DEV     Dev)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b086      	sub	sp, #24
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 801093c:	2300      	movs	r3, #0
 801093e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	3318      	adds	r3, #24
 8010944:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8010946:	2300      	movs	r3, #0
 8010948:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53LX_WAIT_METHOD_BLOCKING) {
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	781b      	ldrb	r3, [r3, #0]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d107      	bne.n	8010962 <VL53LX_wait_for_test_completion+0x2e>



		status =
			VL53LX_poll_for_range_completion(
 8010952:	f64e 2160 	movw	r1, #60000	; 0xea60
 8010956:	6878      	ldr	r0, [r7, #4]
 8010958:	f000 f88b 	bl	8010a72 <VL53LX_poll_for_range_completion>
 801095c:	4603      	mov	r3, r0
 801095e:	75fb      	strb	r3, [r7, #23]
 8010960:	e01b      	b.n	801099a <VL53LX_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8010962:	2300      	movs	r3, #0
 8010964:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8010966:	e011      	b.n	801098c <VL53LX_wait_for_test_completion+0x58>
			status = VL53LX_is_new_data_ready(
 8010968:	f107 030f 	add.w	r3, r7, #15
 801096c:	4619      	mov	r1, r3
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f000 f819 	bl	80109a6 <VL53LX_is_new_data_ready>
 8010974:	4603      	mov	r3, r0
 8010976:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53LX_ERROR_NONE) {
 8010978:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d105      	bne.n	801098c <VL53LX_wait_for_test_completion+0x58>
				status = VL53LX_WaitMs(
 8010980:	2101      	movs	r1, #1
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f000 fce6 	bl	8011354 <VL53LX_WaitMs>
 8010988:	4603      	mov	r3, r0
 801098a:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 801098c:	7bfb      	ldrb	r3, [r7, #15]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d103      	bne.n	801099a <VL53LX_wait_for_test_completion+0x66>
 8010992:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d0e6      	beq.n	8010968 <VL53LX_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801099a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3718      	adds	r7, #24
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}

080109a6 <VL53LX_is_new_data_ready>:


VL53LX_Error VL53LX_is_new_data_ready(
	VL53LX_DEV     Dev,
	uint8_t       *pready)
{
 80109a6:	b580      	push	{r7, lr}
 80109a8:	b086      	sub	sp, #24
 80109aa:	af00      	add	r7, sp, #0
 80109ac:	6078      	str	r0, [r7, #4]
 80109ae:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80109b0:	2300      	movs	r3, #0
 80109b2:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	3318      	adds	r3, #24
 80109b8:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 80109ba:	2300      	movs	r3, #0
 80109bc:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 80109be:	2300      	movs	r3, #0
 80109c0:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 80109c2:	2300      	movs	r3, #0
 80109c4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 80109cc:	f003 0310 	and.w	r3, r3, #16
 80109d0:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 80109d2:	7bfb      	ldrb	r3, [r7, #15]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d102      	bne.n	80109de <VL53LX_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 80109d8:	2301      	movs	r3, #1
 80109da:	75fb      	strb	r3, [r7, #23]
 80109dc:	e001      	b.n	80109e2 <VL53LX_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 80109de:	2300      	movs	r3, #0
 80109e0:	75fb      	strb	r3, [r7, #23]



	status = VL53LX_RdByte(
 80109e2:	f107 030e 	add.w	r3, r7, #14
 80109e6:	461a      	mov	r2, r3
 80109e8:	2131      	movs	r1, #49	; 0x31
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f000 fc2a 	bl	8011244 <VL53LX_RdByte>
 80109f0:	4603      	mov	r3, r0
 80109f2:	75bb      	strb	r3, [r7, #22]
					VL53LX_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 80109f4:	7bbb      	ldrb	r3, [r7, #14]
 80109f6:	f003 0201 	and.w	r2, r3, #1
 80109fa:	7dfb      	ldrb	r3, [r7, #23]
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d103      	bne.n	8010a08 <VL53LX_is_new_data_ready+0x62>
		*pready = 0x01;
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	2201      	movs	r2, #1
 8010a04:	701a      	strb	r2, [r3, #0]
 8010a06:	e002      	b.n	8010a0e <VL53LX_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8010a0e:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3718      	adds	r7, #24
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}

08010a1a <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 8010a1a:	b580      	push	{r7, lr}
 8010a1c:	b086      	sub	sp, #24
 8010a1e:	af02      	add	r7, sp, #8
 8010a20:	6078      	str	r0, [r7, #4]
 8010a22:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8010a24:	2300      	movs	r3, #0
 8010a26:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 8010a28:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f000 fca1 	bl	8011374 <VL53LX_WaitUs>
 8010a32:	4603      	mov	r3, r0
 8010a34:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 8010a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d10b      	bne.n	8010a56 <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 8010a3e:	2301      	movs	r3, #1
 8010a40:	9301      	str	r3, [sp, #4]
 8010a42:	2301      	movs	r3, #1
 8010a44:	9300      	str	r3, [sp, #0]
 8010a46:	2301      	movs	r3, #1
 8010a48:	22e5      	movs	r2, #229	; 0xe5
 8010a4a:	6839      	ldr	r1, [r7, #0]
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f000 fca9 	bl	80113a4 <VL53LX_WaitValueMaskEx>
 8010a52:	4603      	mov	r3, r0
 8010a54:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 8010a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d103      	bne.n	8010a66 <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 8010a5e:	2103      	movs	r1, #3
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f7f7 f815 	bl	8007a90 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8010a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3710      	adds	r7, #16
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}

08010a72 <VL53LX_poll_for_range_completion>:


VL53LX_Error VL53LX_poll_for_range_completion(
	VL53LX_DEV     Dev,
	uint32_t       timeout_ms)
{
 8010a72:	b580      	push	{r7, lr}
 8010a74:	b088      	sub	sp, #32
 8010a76:	af02      	add	r7, sp, #8
 8010a78:	6078      	str	r0, [r7, #4]
 8010a7a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	3318      	adds	r3, #24
 8010a84:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8010a86:	2300      	movs	r3, #0
 8010a88:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 8010a94:	f003 0310 	and.w	r3, r3, #16
 8010a98:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8010a9a:	7bfb      	ldrb	r3, [r7, #15]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d102      	bne.n	8010aa6 <VL53LX_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	75fb      	strb	r3, [r7, #23]
 8010aa4:	e001      	b.n	8010aaa <VL53LX_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	75fb      	strb	r3, [r7, #23]

	status =
		VL53LX_WaitValueMaskEx(
 8010aaa:	7dfb      	ldrb	r3, [r7, #23]
 8010aac:	2201      	movs	r2, #1
 8010aae:	9201      	str	r2, [sp, #4]
 8010ab0:	2201      	movs	r2, #1
 8010ab2:	9200      	str	r2, [sp, #0]
 8010ab4:	2231      	movs	r2, #49	; 0x31
 8010ab6:	6839      	ldr	r1, [r7, #0]
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f000 fc73 	bl	80113a4 <VL53LX_WaitValueMaskEx>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53LX_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8010ac2:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	3718      	adds	r7, #24
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}

08010ace <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8010ace:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010ad2:	b0a2      	sub	sp, #136	; 0x88
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010ad8:	4618      	mov	r0, r3
 8010ada:	460b      	mov	r3, r1
 8010adc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8010ae0:	4613      	mov	r3, r2
 8010ae2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010aec:	2300      	movs	r3, #0
 8010aee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	uint8_t row = 0;
 8010af2:	2300      	movs	r3, #0
 8010af4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t col = 0;
 8010af8:	2300      	movs	r3, #0
 8010afa:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65



	int16_t  bound_l_x = 0;
 8010afe:	2300      	movs	r3, #0
 8010b00:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	int16_t  bound_r_x = 0;
 8010b04:	2300      	movs	r3, #0
 8010b06:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	int16_t  bound_u_y = 0;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	int16_t  bound_d_y = 0;
 8010b10:	2300      	movs	r3, #0
 8010b12:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

	int64_t xtalk_rate_ll = 0;
 8010b16:	f04f 0200 	mov.w	r2, #0
 8010b1a:	f04f 0300 	mov.w	r3, #0
 8010b1e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t xtalk_rate_ur = 0;
 8010b22:	f04f 0200 	mov.w	r2, #0
 8010b26:	f04f 0300 	mov.w	r3, #0
 8010b2a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	int64_t xtalk_avg = 0;
 8010b2e:	f04f 0200 	mov.w	r2, #0
 8010b32:	f04f 0300 	mov.w	r3, #0
 8010b36:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	if (status == VL53LX_ERROR_NONE) {
 8010b3a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d108      	bne.n	8010b54 <VL53LX_f_032+0x86>
		VL53LX_decode_row_col(
 8010b42:	f107 0265 	add.w	r2, r7, #101	; 0x65
 8010b46:	f107 0166 	add.w	r1, r7, #102	; 0x66
 8010b4a:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7fb fad4 	bl	800c0fc <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 8010b54:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d165      	bne.n	8010c28 <VL53LX_f_032+0x15a>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8010b5c:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010b60:	091b      	lsrs	r3, r3, #4
 8010b62:	b2db      	uxtb	r3, r3
 8010b64:	f003 0301 	and.w	r3, r3, #1
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d00e      	beq.n	8010b8a <VL53LX_f_032+0xbc>
			bound_l_x = (int16_t) col -
 8010b6c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8010b70:	b29a      	uxth	r2, r3
 8010b72:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010b76:	095b      	lsrs	r3, r3, #5
 8010b78:	b2db      	uxtb	r3, r3
 8010b7a:	b29b      	uxth	r3, r3
 8010b7c:	1ad3      	subs	r3, r2, r3
 8010b7e:	b29b      	uxth	r3, r3
 8010b80:	3b01      	subs	r3, #1
 8010b82:	b29b      	uxth	r3, r3
 8010b84:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8010b88:	e00b      	b.n	8010ba2 <VL53LX_f_032+0xd4>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8010b8a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8010b8e:	b29a      	uxth	r2, r3
 8010b90:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010b94:	095b      	lsrs	r3, r3, #5
 8010b96:	b2db      	uxtb	r3, r3
 8010b98:	b29b      	uxth	r3, r3
 8010b9a:	1ad3      	subs	r3, r2, r3
 8010b9c:	b29b      	uxth	r3, r3
 8010b9e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8010ba2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8010ba6:	b29a      	uxth	r2, r3
 8010ba8:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010bac:	095b      	lsrs	r3, r3, #5
 8010bae:	b2db      	uxtb	r3, r3
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	4413      	add	r3, r2
 8010bb4:	b29b      	uxth	r3, r3
 8010bb6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8010bba:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010bbe:	f003 0301 	and.w	r3, r3, #1
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d011      	beq.n	8010bea <VL53LX_f_032+0x11c>
			bound_d_y = (int16_t) row -
 8010bc6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8010bca:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8010bcc:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010bd0:	f003 020f 	and.w	r2, r3, #15
 8010bd4:	0fd3      	lsrs	r3, r2, #31
 8010bd6:	4413      	add	r3, r2
 8010bd8:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	1acb      	subs	r3, r1, r3
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	3b01      	subs	r3, #1
 8010be2:	b29b      	uxth	r3, r3
 8010be4:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8010be8:	e00f      	b.n	8010c0a <VL53LX_f_032+0x13c>
		else
			bound_d_y = (int16_t) row -
 8010bea:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8010bee:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8010bf0:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010bf4:	f003 020f 	and.w	r2, r3, #15
 8010bf8:	0fd3      	lsrs	r3, r2, #31
 8010bfa:	4413      	add	r3, r2
 8010bfc:	105b      	asrs	r3, r3, #1
 8010bfe:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8010c00:	b29b      	uxth	r3, r3
 8010c02:	440b      	add	r3, r1
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

		bound_u_y = (int16_t) row +
 8010c0a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8010c0e:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8010c10:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010c14:	f003 020f 	and.w	r2, r3, #15
 8010c18:	0fd3      	lsrs	r3, r2, #31
 8010c1a:	4413      	add	r3, r2
 8010c1c:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8010c1e:	b29b      	uxth	r3, r3
 8010c20:	440b      	add	r3, r1
 8010c22:	b29b      	uxth	r3, r3
 8010c24:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8010c28:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d133      	bne.n	8010c98 <VL53LX_f_032+0x1ca>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8010c30:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010c34:	b29a      	uxth	r2, r3
 8010c36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8010c3a:	4413      	add	r3, r2
 8010c3c:	b29b      	uxth	r3, r3
 8010c3e:	005b      	lsls	r3, r3, #1
 8010c40:	b29b      	uxth	r3, r3
 8010c42:	3b0f      	subs	r3, #15
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8010c4a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010c4e:	b29a      	uxth	r2, r3
 8010c50:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8010c54:	4413      	add	r3, r2
 8010c56:	b29b      	uxth	r3, r3
 8010c58:	005b      	lsls	r3, r3, #1
 8010c5a:	b29b      	uxth	r3, r3
 8010c5c:	3b0f      	subs	r3, #15
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8010c64:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 8010c68:	b29a      	uxth	r2, r3
 8010c6a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8010c6e:	4413      	add	r3, r2
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	005b      	lsls	r3, r3, #1
 8010c74:	b29b      	uxth	r3, r3
 8010c76:	3b0f      	subs	r3, #15
 8010c78:	b29b      	uxth	r3, r3
 8010c7a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8010c7e:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 8010c82:	b29a      	uxth	r2, r3
 8010c84:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8010c88:	4413      	add	r3, r2
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	005b      	lsls	r3, r3, #1
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	3b0f      	subs	r3, #15
 8010c92:	b29b      	uxth	r3, r3
 8010c94:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8010c98:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	f040 80cb 	bne.w	8010e38 <VL53LX_f_032+0x36a>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010ca2:	f9b7 0086 	ldrsh.w	r0, [r7, #134]	; 0x86
 8010ca6:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010caa:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8010cae:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010cb2:	fb02 f501 	mul.w	r5, r2, r1
 8010cb6:	fb00 f403 	mul.w	r4, r0, r3
 8010cba:	442c      	add	r4, r5
 8010cbc:	fba0 8902 	umull	r8, r9, r0, r2
 8010cc0:	eb04 0309 	add.w	r3, r4, r9
 8010cc4:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010cc6:	f9b7 0080 	ldrsh.w	r0, [r7, #128]	; 0x80
 8010cca:	ea4f 71e0 	mov.w	r1, r0, asr #31
					((int64_t)ygradient));
 8010cce:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8010cd2:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010cd6:	fb02 f501 	mul.w	r5, r2, r1
 8010cda:	fb00 f403 	mul.w	r4, r0, r3
 8010cde:	442c      	add	r4, r5
 8010ce0:	fba0 2302 	umull	r2, r3, r0, r2
 8010ce4:	18e1      	adds	r1, r4, r3
 8010ce6:	460b      	mov	r3, r1
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010ce8:	eb18 0102 	adds.w	r1, r8, r2
 8010cec:	6339      	str	r1, [r7, #48]	; 0x30
 8010cee:	eb49 0303 	adc.w	r3, r9, r3
 8010cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8010cf4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8010cf8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8010cfc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010d00:	f112 0a01 	adds.w	sl, r2, #1
 8010d04:	f143 0b00 	adc.w	fp, r3, #0
 8010d08:	ea4f 73db 	mov.w	r3, fp, lsr #31
 8010d0c:	461a      	mov	r2, r3
 8010d0e:	f04f 0300 	mov.w	r3, #0
 8010d12:	eb12 010a 	adds.w	r1, r2, sl
 8010d16:	62b9      	str	r1, [r7, #40]	; 0x28
 8010d18:	eb43 030b 	adc.w	r3, r3, fp
 8010d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d1e:	f04f 0200 	mov.w	r2, #0
 8010d22:	f04f 0300 	mov.w	r3, #0
 8010d26:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8010d2a:	4621      	mov	r1, r4
 8010d2c:	084a      	lsrs	r2, r1, #1
 8010d2e:	4629      	mov	r1, r5
 8010d30:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010d34:	4629      	mov	r1, r5
 8010d36:	104b      	asrs	r3, r1, #1
 8010d38:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8010d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010d3e:	461a      	mov	r2, r3
 8010d40:	f04f 0300 	mov.w	r3, #0
 8010d44:	f04f 0000 	mov.w	r0, #0
 8010d48:	f04f 0100 	mov.w	r1, #0
 8010d4c:	0099      	lsls	r1, r3, #2
 8010d4e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8010d52:	0090      	lsls	r0, r2, #2
 8010d54:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010d58:	1814      	adds	r4, r2, r0
 8010d5a:	623c      	str	r4, [r7, #32]
 8010d5c:	414b      	adcs	r3, r1
 8010d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8010d60:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010d64:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8010d68:	f9b7 0084 	ldrsh.w	r0, [r7, #132]	; 0x84
 8010d6c:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8010d70:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8010d74:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8010d78:	fb02 f501 	mul.w	r5, r2, r1
 8010d7c:	fb00 f403 	mul.w	r4, r0, r3
 8010d80:	442c      	add	r4, r5
 8010d82:	fba0 8902 	umull	r8, r9, r0, r2
 8010d86:	eb04 0309 	add.w	r3, r4, r9
 8010d8a:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8010d8c:	f9b7 0082 	ldrsh.w	r0, [r7, #130]	; 0x82
 8010d90:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)ygradient));
 8010d94:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8010d98:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8010d9c:	fb02 f501 	mul.w	r5, r2, r1
 8010da0:	fb00 f403 	mul.w	r4, r0, r3
 8010da4:	442c      	add	r4, r5
 8010da6:	fba0 2302 	umull	r2, r3, r0, r2
 8010daa:	18e1      	adds	r1, r4, r3
 8010dac:	460b      	mov	r3, r1
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8010dae:	eb18 0102 	adds.w	r1, r8, r2
 8010db2:	61b9      	str	r1, [r7, #24]
 8010db4:	eb49 0303 	adc.w	r3, r9, r3
 8010db8:	61fb      	str	r3, [r7, #28]
 8010dba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010dbe:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8010dc2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010dc6:	1c51      	adds	r1, r2, #1
 8010dc8:	64b9      	str	r1, [r7, #72]	; 0x48
 8010dca:	f143 0300 	adc.w	r3, r3, #0
 8010dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010dd0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8010dd4:	462b      	mov	r3, r5
 8010dd6:	0fdb      	lsrs	r3, r3, #31
 8010dd8:	461a      	mov	r2, r3
 8010dda:	f04f 0300 	mov.w	r3, #0
 8010dde:	4621      	mov	r1, r4
 8010de0:	1851      	adds	r1, r2, r1
 8010de2:	6139      	str	r1, [r7, #16]
 8010de4:	4629      	mov	r1, r5
 8010de6:	eb43 0101 	adc.w	r1, r3, r1
 8010dea:	6179      	str	r1, [r7, #20]
 8010dec:	f04f 0200 	mov.w	r2, #0
 8010df0:	f04f 0300 	mov.w	r3, #0
 8010df4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010df8:	4621      	mov	r1, r4
 8010dfa:	084a      	lsrs	r2, r1, #1
 8010dfc:	4629      	mov	r1, r5
 8010dfe:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010e02:	4629      	mov	r1, r5
 8010e04:	104b      	asrs	r3, r1, #1
 8010e06:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8010e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f04f 0100 	mov.w	r1, #0
 8010e12:	f04f 0200 	mov.w	r2, #0
 8010e16:	f04f 0300 	mov.w	r3, #0
 8010e1a:	008b      	lsls	r3, r1, #2
 8010e1c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010e20:	0082      	lsls	r2, r0, #2
 8010e22:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010e26:	1884      	adds	r4, r0, r2
 8010e28:	60bc      	str	r4, [r7, #8]
 8010e2a:	eb41 0303 	adc.w	r3, r1, r3
 8010e2e:	60fb      	str	r3, [r7, #12]
 8010e30:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010e34:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 8010e38:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d12e      	bne.n	8010e9e <VL53LX_f_032+0x3d0>
		xtalk_avg = do_division_s(
 8010e40:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8010e44:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010e48:	1884      	adds	r4, r0, r2
 8010e4a:	643c      	str	r4, [r7, #64]	; 0x40
 8010e4c:	eb41 0303 	adc.w	r3, r1, r3
 8010e50:	647b      	str	r3, [r7, #68]	; 0x44
 8010e52:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8010e56:	460b      	mov	r3, r1
 8010e58:	3301      	adds	r3, #1
 8010e5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8010e5c:	4613      	mov	r3, r2
 8010e5e:	f143 0300 	adc.w	r3, r3, #0
 8010e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e64:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8010e68:	462b      	mov	r3, r5
 8010e6a:	0fdb      	lsrs	r3, r3, #31
 8010e6c:	461a      	mov	r2, r3
 8010e6e:	f04f 0300 	mov.w	r3, #0
 8010e72:	4621      	mov	r1, r4
 8010e74:	1851      	adds	r1, r2, r1
 8010e76:	6039      	str	r1, [r7, #0]
 8010e78:	4629      	mov	r1, r5
 8010e7a:	eb43 0101 	adc.w	r1, r3, r1
 8010e7e:	6079      	str	r1, [r7, #4]
 8010e80:	f04f 0200 	mov.w	r2, #0
 8010e84:	f04f 0300 	mov.w	r3, #0
 8010e88:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010e8c:	4621      	mov	r1, r4
 8010e8e:	084a      	lsrs	r2, r1, #1
 8010e90:	4629      	mov	r1, r5
 8010e92:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010e96:	4629      	mov	r1, r5
 8010e98:	104b      	asrs	r3, r1, #1
 8010e9a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 8010e9e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d10b      	bne.n	8010ebe <VL53LX_f_032+0x3f0>
		if (xtalk_avg < 0)
 8010ea6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010eaa:	2a00      	cmp	r2, #0
 8010eac:	f173 0300 	sbcs.w	r3, r3, #0
 8010eb0:	da05      	bge.n	8010ebe <VL53LX_f_032+0x3f0>
			xtalk_avg = 0;
 8010eb2:	f04f 0200 	mov.w	r2, #0
 8010eb6:	f04f 0300 	mov.w	r3, #0
 8010eba:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8010ebe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010ec0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010ec4:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8010ec6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	3788      	adds	r7, #136	; 0x88
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010ed4 <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8010ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ed8:	b08d      	sub	sp, #52	; 0x34
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	60f8      	str	r0, [r7, #12]
 8010ede:	60b9      	str	r1, [r7, #8]
 8010ee0:	607a      	str	r2, [r7, #4]
 8010ee2:	603b      	str	r3, [r7, #0]


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	uint64_t xtalk_events_per_spad = 0;
 8010eea:	f04f 0200 	mov.w	r2, #0
 8010eee:	f04f 0300 	mov.w	r3, #0
 8010ef2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint64_t xtalk_total_events = 0;
 8010ef6:	f04f 0200 	mov.w	r2, #0
 8010efa:	f04f 0300 	mov.w	r3, #0
 8010efe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t xtalk_temp_bin = 0;
 8010f02:	f04f 0200 	mov.w	r2, #0
 8010f06:	f04f 0300 	mov.w	r3, #0
 8010f0a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t  i = 0;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	4618      	mov	r0, r3
 8010f18:	f04f 0100 	mov.w	r1, #0
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f22:	461a      	mov	r2, r3
 8010f24:	f04f 0300 	mov.w	r3, #0
 8010f28:	fb02 fc01 	mul.w	ip, r2, r1
 8010f2c:	fb00 f603 	mul.w	r6, r0, r3
 8010f30:	4466      	add	r6, ip
 8010f32:	fba0 2302 	umull	r2, r3, r0, r2
 8010f36:	18f1      	adds	r1, r6, r3
 8010f38:	460b      	mov	r3, r1
 8010f3a:	f512 7afa 	adds.w	sl, r2, #500	; 0x1f4
 8010f3e:	f143 0b00 	adc.w	fp, r3, #0
 8010f42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010f46:	f04f 0300 	mov.w	r3, #0
 8010f4a:	4650      	mov	r0, sl
 8010f4c:	4659      	mov	r1, fp
 8010f4e:	f7ef f9e7 	bl	8000320 <__aeabi_uldivmod>
 8010f52:	4602      	mov	r2, r0
 8010f54:	460b      	mov	r3, r1
 8010f56:	e9c7 2306 	strd	r2, r3, [r7, #24]




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8010f60:	b29a      	uxth	r2, r3
 8010f62:	f04f 0300 	mov.w	r3, #0
	xtalk_total_events = xtalk_events_per_spad *
 8010f66:	69f9      	ldr	r1, [r7, #28]
 8010f68:	fb02 f001 	mul.w	r0, r2, r1
 8010f6c:	69b9      	ldr	r1, [r7, #24]
 8010f6e:	fb03 f101 	mul.w	r1, r3, r1
 8010f72:	4401      	add	r1, r0
 8010f74:	69b8      	ldr	r0, [r7, #24]
 8010f76:	fba0 2302 	umull	r2, r3, r0, r2
 8010f7a:	4419      	add	r1, r3
 8010f7c:	460b      	mov	r3, r1
 8010f7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8010f82:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8010f86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8010f8a:	f04f 0200 	mov.w	r2, #0
 8010f8e:	f04f 0300 	mov.w	r3, #0
 8010f92:	0a02      	lsrs	r2, r0, #8
 8010f94:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010f98:	0a0b      	lsrs	r3, r1, #8
 8010f9a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8010f9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010fa2:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 8010fa6:	f143 0900 	adc.w	r9, r3, #0
 8010faa:	f04f 0200 	mov.w	r2, #0
 8010fae:	f04f 0300 	mov.w	r3, #0
 8010fb2:	ea4f 22d8 	mov.w	r2, r8, lsr #11
 8010fb6:	ea42 5249 	orr.w	r2, r2, r9, lsl #21
 8010fba:	ea4f 23d9 	mov.w	r3, r9, lsr #11
 8010fbe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (xtalk_total_events > 0xFFFFFFFF)
 8010fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010fc6:	2b01      	cmp	r3, #1
 8010fc8:	bf08      	it	eq
 8010fca:	2a00      	cmpeq	r2, #0
 8010fcc:	d305      	bcc.n	8010fda <VL53LX_f_033+0x106>
		xtalk_total_events = 0xFFFFFFFF;
 8010fce:	f04f 32ff 	mov.w	r2, #4294967295
 8010fd2:	f04f 0300 	mov.w	r3, #0
 8010fd6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8010fda:	2300      	movs	r3, #0
 8010fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010fe0:	e035      	b.n	801104e <VL53LX_f_033+0x17a>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8010fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fe6:	68ba      	ldr	r2, [r7, #8]
 8010fe8:	3302      	adds	r3, #2
 8010fea:	009b      	lsls	r3, r3, #2
 8010fec:	4413      	add	r3, r2
 8010fee:	685b      	ldr	r3, [r3, #4]
 8010ff0:	461a      	mov	r2, r3
 8010ff2:	f04f 0300 	mov.w	r3, #0
 8010ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ff8:	fb02 f001 	mul.w	r0, r2, r1
 8010ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010ffe:	fb03 f101 	mul.w	r1, r3, r1
 8011002:	4401      	add	r1, r0
 8011004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011006:	fba0 2302 	umull	r2, r3, r0, r2
 801100a:	4419      	add	r1, r3
 801100c:	460b      	mov	r3, r1
 801100e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8011012:	e9c7 2304 	strd	r2, r3, [r7, #16]
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8011016:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801101a:	f512 7400 	adds.w	r4, r2, #512	; 0x200
 801101e:	f143 0500 	adc.w	r5, r3, #0
 8011022:	f04f 0200 	mov.w	r2, #0
 8011026:	f04f 0300 	mov.w	r3, #0
 801102a:	0aa2      	lsrs	r2, r4, #10
 801102c:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
 8011030:	0aab      	lsrs	r3, r5, #10
 8011032:	e9c7 2304 	strd	r2, r3, [r7, #16]

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8011036:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801103a:	6939      	ldr	r1, [r7, #16]
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	3206      	adds	r2, #6
 8011040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8011044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011048:	3301      	adds	r3, #1
 801104a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801104e:	68bb      	ldr	r3, [r7, #8]
 8011050:	7a9b      	ldrb	r3, [r3, #10]
 8011052:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011056:	429a      	cmp	r2, r3
 8011058:	d3c3      	bcc.n	8010fe2 <VL53LX_f_033+0x10e>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 801105a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 801105e:	4618      	mov	r0, r3
 8011060:	3734      	adds	r7, #52	; 0x34
 8011062:	46bd      	mov	sp, r7
 8011064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011068 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8011068:	b580      	push	{r7, lr}
 801106a:	b084      	sub	sp, #16
 801106c:	af00      	add	r7, sp, #0
 801106e:	60f8      	str	r0, [r7, #12]
 8011070:	60b9      	str	r1, [r7, #8]
 8011072:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	68db      	ldr	r3, [r3, #12]
 8011078:	68fa      	ldr	r2, [r7, #12]
 801107a:	8910      	ldrh	r0, [r2, #8]
 801107c:	687a      	ldr	r2, [r7, #4]
 801107e:	b292      	uxth	r2, r2
 8011080:	68b9      	ldr	r1, [r7, #8]
 8011082:	4798      	blx	r3
 8011084:	4603      	mov	r3, r0
}
 8011086:	4618      	mov	r0, r3
 8011088:	3710      	adds	r7, #16
 801108a:	46bd      	mov	sp, r7
 801108c:	bd80      	pop	{r7, pc}

0801108e <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 801108e:	b580      	push	{r7, lr}
 8011090:	b084      	sub	sp, #16
 8011092:	af00      	add	r7, sp, #0
 8011094:	60f8      	str	r0, [r7, #12]
 8011096:	60b9      	str	r1, [r7, #8]
 8011098:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	691b      	ldr	r3, [r3, #16]
 801109e:	68fa      	ldr	r2, [r7, #12]
 80110a0:	8910      	ldrh	r0, [r2, #8]
 80110a2:	687a      	ldr	r2, [r7, #4]
 80110a4:	b292      	uxth	r2, r2
 80110a6:	68b9      	ldr	r1, [r7, #8]
 80110a8:	4798      	blx	r3
 80110aa:	4603      	mov	r3, r0
}
 80110ac:	4618      	mov	r0, r3
 80110ae:	3710      	adds	r7, #16
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}

080110b4 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b086      	sub	sp, #24
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	60f8      	str	r0, [r7, #12]
 80110bc:	607a      	str	r2, [r7, #4]
 80110be:	603b      	str	r3, [r7, #0]
 80110c0:	460b      	mov	r3, r1
 80110c2:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80110c4:	2300      	movs	r3, #0
 80110c6:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	2bff      	cmp	r3, #255	; 0xff
 80110cc:	d902      	bls.n	80110d4 <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 80110ce:	f06f 0303 	mvn.w	r3, #3
 80110d2:	e01d      	b.n	8011110 <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 80110d4:	897b      	ldrh	r3, [r7, #10]
 80110d6:	0a1b      	lsrs	r3, r3, #8
 80110d8:	b29b      	uxth	r3, r3
 80110da:	b2da      	uxtb	r2, r3
 80110dc:	4b0e      	ldr	r3, [pc, #56]	; (8011118 <VL53LX_WriteMulti+0x64>)
 80110de:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80110e0:	897b      	ldrh	r3, [r7, #10]
 80110e2:	b2da      	uxtb	r2, r3
 80110e4:	4b0c      	ldr	r3, [pc, #48]	; (8011118 <VL53LX_WriteMulti+0x64>)
 80110e6:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 80110e8:	683a      	ldr	r2, [r7, #0]
 80110ea:	6879      	ldr	r1, [r7, #4]
 80110ec:	480b      	ldr	r0, [pc, #44]	; (801111c <VL53LX_WriteMulti+0x68>)
 80110ee:	f003 ff6f 	bl	8014fd0 <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	3302      	adds	r3, #2
 80110f6:	461a      	mov	r2, r3
 80110f8:	4907      	ldr	r1, [pc, #28]	; (8011118 <VL53LX_WriteMulti+0x64>)
 80110fa:	68f8      	ldr	r0, [r7, #12]
 80110fc:	f7ff ffb4 	bl	8011068 <_I2CWrite>
 8011100:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011102:	693b      	ldr	r3, [r7, #16]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d001      	beq.n	801110c <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011108:	23f3      	movs	r3, #243	; 0xf3
 801110a:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 801110c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011110:	4618      	mov	r0, r3
 8011112:	3718      	adds	r7, #24
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}
 8011118:	20007278 	.word	0x20007278
 801111c:	2000727a 	.word	0x2000727a

08011120 <VL53LX_ReadMulti>:

VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011120:	b580      	push	{r7, lr}
 8011122:	b086      	sub	sp, #24
 8011124:	af00      	add	r7, sp, #0
 8011126:	60f8      	str	r0, [r7, #12]
 8011128:	607a      	str	r2, [r7, #4]
 801112a:	603b      	str	r3, [r7, #0]
 801112c:	460b      	mov	r3, r1
 801112e:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011130:	2300      	movs	r3, #0
 8011132:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011134:	897b      	ldrh	r3, [r7, #10]
 8011136:	0a1b      	lsrs	r3, r3, #8
 8011138:	b29b      	uxth	r3, r3
 801113a:	b2da      	uxtb	r2, r3
 801113c:	4b12      	ldr	r3, [pc, #72]	; (8011188 <VL53LX_ReadMulti+0x68>)
 801113e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011140:	897b      	ldrh	r3, [r7, #10]
 8011142:	b2da      	uxtb	r2, r3
 8011144:	4b10      	ldr	r3, [pc, #64]	; (8011188 <VL53LX_ReadMulti+0x68>)
 8011146:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8011148:	2202      	movs	r2, #2
 801114a:	490f      	ldr	r1, [pc, #60]	; (8011188 <VL53LX_ReadMulti+0x68>)
 801114c:	68f8      	ldr	r0, [r7, #12]
 801114e:	f7ff ff8b 	bl	8011068 <_I2CWrite>
 8011152:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011154:	693b      	ldr	r3, [r7, #16]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d002      	beq.n	8011160 <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801115a:	23f3      	movs	r3, #243	; 0xf3
 801115c:	75fb      	strb	r3, [r7, #23]
        goto done;
 801115e:	e00c      	b.n	801117a <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8011160:	683a      	ldr	r2, [r7, #0]
 8011162:	6879      	ldr	r1, [r7, #4]
 8011164:	68f8      	ldr	r0, [r7, #12]
 8011166:	f7ff ff92 	bl	801108e <_I2CRead>
 801116a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d002      	beq.n	8011178 <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011172:	23f3      	movs	r3, #243	; 0xf3
 8011174:	75fb      	strb	r3, [r7, #23]
 8011176:	e000      	b.n	801117a <VL53LX_ReadMulti+0x5a>
    }
done:
 8011178:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 801117a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801117e:	4618      	mov	r0, r3
 8011180:	3718      	adds	r7, #24
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}
 8011186:	bf00      	nop
 8011188:	20007278 	.word	0x20007278

0801118c <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 801118c:	b580      	push	{r7, lr}
 801118e:	b084      	sub	sp, #16
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	460b      	mov	r3, r1
 8011196:	807b      	strh	r3, [r7, #2]
 8011198:	4613      	mov	r3, r2
 801119a:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 801119c:	2300      	movs	r3, #0
 801119e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80111a0:	887b      	ldrh	r3, [r7, #2]
 80111a2:	0a1b      	lsrs	r3, r3, #8
 80111a4:	b29b      	uxth	r3, r3
 80111a6:	b2da      	uxtb	r2, r3
 80111a8:	4b0c      	ldr	r3, [pc, #48]	; (80111dc <VL53LX_WrByte+0x50>)
 80111aa:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80111ac:	887b      	ldrh	r3, [r7, #2]
 80111ae:	b2da      	uxtb	r2, r3
 80111b0:	4b0a      	ldr	r3, [pc, #40]	; (80111dc <VL53LX_WrByte+0x50>)
 80111b2:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 80111b4:	4a09      	ldr	r2, [pc, #36]	; (80111dc <VL53LX_WrByte+0x50>)
 80111b6:	787b      	ldrb	r3, [r7, #1]
 80111b8:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80111ba:	2203      	movs	r2, #3
 80111bc:	4907      	ldr	r1, [pc, #28]	; (80111dc <VL53LX_WrByte+0x50>)
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f7ff ff52 	bl	8011068 <_I2CWrite>
 80111c4:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d001      	beq.n	80111d0 <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80111cc:	23f3      	movs	r3, #243	; 0xf3
 80111ce:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 80111d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3710      	adds	r7, #16
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}
 80111dc:	20007278 	.word	0x20007278

080111e0 <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b084      	sub	sp, #16
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	460b      	mov	r3, r1
 80111ea:	807b      	strh	r3, [r7, #2]
 80111ec:	4613      	mov	r3, r2
 80111ee:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80111f0:	2300      	movs	r3, #0
 80111f2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80111f4:	887b      	ldrh	r3, [r7, #2]
 80111f6:	0a1b      	lsrs	r3, r3, #8
 80111f8:	b29b      	uxth	r3, r3
 80111fa:	b2da      	uxtb	r2, r3
 80111fc:	4b10      	ldr	r3, [pc, #64]	; (8011240 <VL53LX_WrWord+0x60>)
 80111fe:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011200:	887b      	ldrh	r3, [r7, #2]
 8011202:	b2da      	uxtb	r2, r3
 8011204:	4b0e      	ldr	r3, [pc, #56]	; (8011240 <VL53LX_WrWord+0x60>)
 8011206:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8011208:	883b      	ldrh	r3, [r7, #0]
 801120a:	0a1b      	lsrs	r3, r3, #8
 801120c:	b29b      	uxth	r3, r3
 801120e:	b2da      	uxtb	r2, r3
 8011210:	4b0b      	ldr	r3, [pc, #44]	; (8011240 <VL53LX_WrWord+0x60>)
 8011212:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8011214:	883b      	ldrh	r3, [r7, #0]
 8011216:	b2da      	uxtb	r2, r3
 8011218:	4b09      	ldr	r3, [pc, #36]	; (8011240 <VL53LX_WrWord+0x60>)
 801121a:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 801121c:	2204      	movs	r2, #4
 801121e:	4908      	ldr	r1, [pc, #32]	; (8011240 <VL53LX_WrWord+0x60>)
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f7ff ff21 	bl	8011068 <_I2CWrite>
 8011226:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d001      	beq.n	8011232 <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801122e:	23f3      	movs	r3, #243	; 0xf3
 8011230:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8011232:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011236:	4618      	mov	r0, r3
 8011238:	3710      	adds	r7, #16
 801123a:	46bd      	mov	sp, r7
 801123c:	bd80      	pop	{r7, pc}
 801123e:	bf00      	nop
 8011240:	20007278 	.word	0x20007278

08011244 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 8011244:	b580      	push	{r7, lr}
 8011246:	b086      	sub	sp, #24
 8011248:	af00      	add	r7, sp, #0
 801124a:	60f8      	str	r0, [r7, #12]
 801124c:	460b      	mov	r3, r1
 801124e:	607a      	str	r2, [r7, #4]
 8011250:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011252:	2300      	movs	r3, #0
 8011254:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8011256:	897b      	ldrh	r3, [r7, #10]
 8011258:	0a1b      	lsrs	r3, r3, #8
 801125a:	b29b      	uxth	r3, r3
 801125c:	b2da      	uxtb	r2, r3
 801125e:	4b12      	ldr	r3, [pc, #72]	; (80112a8 <VL53LX_RdByte+0x64>)
 8011260:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8011262:	897b      	ldrh	r3, [r7, #10]
 8011264:	b2da      	uxtb	r2, r3
 8011266:	4b10      	ldr	r3, [pc, #64]	; (80112a8 <VL53LX_RdByte+0x64>)
 8011268:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 801126a:	2202      	movs	r2, #2
 801126c:	490e      	ldr	r1, [pc, #56]	; (80112a8 <VL53LX_RdByte+0x64>)
 801126e:	68f8      	ldr	r0, [r7, #12]
 8011270:	f7ff fefa 	bl	8011068 <_I2CWrite>
 8011274:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8011276:	693b      	ldr	r3, [r7, #16]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d002      	beq.n	8011282 <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801127c:	23f3      	movs	r3, #243	; 0xf3
 801127e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011280:	e00c      	b.n	801129c <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8011282:	2201      	movs	r2, #1
 8011284:	6879      	ldr	r1, [r7, #4]
 8011286:	68f8      	ldr	r0, [r7, #12]
 8011288:	f7ff ff01 	bl	801108e <_I2CRead>
 801128c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801128e:	693b      	ldr	r3, [r7, #16]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d002      	beq.n	801129a <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011294:	23f3      	movs	r3, #243	; 0xf3
 8011296:	75fb      	strb	r3, [r7, #23]
 8011298:	e000      	b.n	801129c <VL53LX_RdByte+0x58>
    }
done:
 801129a:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 801129c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	3718      	adds	r7, #24
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}
 80112a8:	20007278 	.word	0x20007278

080112ac <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b086      	sub	sp, #24
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	60f8      	str	r0, [r7, #12]
 80112b4:	460b      	mov	r3, r1
 80112b6:	607a      	str	r2, [r7, #4]
 80112b8:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80112ba:	2300      	movs	r3, #0
 80112bc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80112be:	897b      	ldrh	r3, [r7, #10]
 80112c0:	0a1b      	lsrs	r3, r3, #8
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	b2da      	uxtb	r2, r3
 80112c6:	4b18      	ldr	r3, [pc, #96]	; (8011328 <VL53LX_RdWord+0x7c>)
 80112c8:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80112ca:	897b      	ldrh	r3, [r7, #10]
 80112cc:	b2da      	uxtb	r2, r3
 80112ce:	4b16      	ldr	r3, [pc, #88]	; (8011328 <VL53LX_RdWord+0x7c>)
 80112d0:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80112d2:	2202      	movs	r2, #2
 80112d4:	4914      	ldr	r1, [pc, #80]	; (8011328 <VL53LX_RdWord+0x7c>)
 80112d6:	68f8      	ldr	r0, [r7, #12]
 80112d8:	f7ff fec6 	bl	8011068 <_I2CWrite>
 80112dc:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80112de:	693b      	ldr	r3, [r7, #16]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d002      	beq.n	80112ea <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80112e4:	23f3      	movs	r3, #243	; 0xf3
 80112e6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80112e8:	e017      	b.n	801131a <VL53LX_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80112ea:	2202      	movs	r2, #2
 80112ec:	490e      	ldr	r1, [pc, #56]	; (8011328 <VL53LX_RdWord+0x7c>)
 80112ee:	68f8      	ldr	r0, [r7, #12]
 80112f0:	f7ff fecd 	bl	801108e <_I2CRead>
 80112f4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80112f6:	693b      	ldr	r3, [r7, #16]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d002      	beq.n	8011302 <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80112fc:	23f3      	movs	r3, #243	; 0xf3
 80112fe:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011300:	e00b      	b.n	801131a <VL53LX_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8011302:	4b09      	ldr	r3, [pc, #36]	; (8011328 <VL53LX_RdWord+0x7c>)
 8011304:	781b      	ldrb	r3, [r3, #0]
 8011306:	b29b      	uxth	r3, r3
 8011308:	021b      	lsls	r3, r3, #8
 801130a:	b29a      	uxth	r2, r3
 801130c:	4b06      	ldr	r3, [pc, #24]	; (8011328 <VL53LX_RdWord+0x7c>)
 801130e:	785b      	ldrb	r3, [r3, #1]
 8011310:	b29b      	uxth	r3, r3
 8011312:	4413      	add	r3, r2
 8011314:	b29a      	uxth	r2, r3
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 801131a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801131e:	4618      	mov	r0, r3
 8011320:	3718      	adds	r7, #24
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}
 8011326:	bf00      	nop
 8011328:	20007278 	.word	0x20007278

0801132c <VL53LX_GetTickCount>:
    VL53LX_PutI2cBus();
    return Status;
}

VL53LX_Error VL53LX_GetTickCount(VL53LX_DEV Dev, uint32_t *ptick_count_ms)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b084      	sub	sp, #16
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
 8011334:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 8011336:	2300      	movs	r3, #0
 8011338:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	695b      	ldr	r3, [r3, #20]
 801133e:	4798      	blx	r3
 8011340:	4603      	mov	r3, r0
 8011342:	461a      	mov	r2, r3
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8011348:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801134c:	4618      	mov	r0, r3
 801134e:	3710      	adds	r7, #16
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}

08011354 <VL53LX_WaitMs>:
	
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitMs(VL53LX_DEV Dev, int32_t wait_ms){
 8011354:	b580      	push	{r7, lr}
 8011356:	b082      	sub	sp, #8
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_ms);
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	4619      	mov	r1, r3
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f000 f8b8 	bl	80114d8 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8011368:	2300      	movs	r3, #0
}
 801136a:	4618      	mov	r0, r3
 801136c:	3708      	adds	r7, #8
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}
	...

08011374 <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_DEV Dev, int32_t wait_us){
 8011374:	b580      	push	{r7, lr}
 8011376:	b082      	sub	sp, #8
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
 801137c:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_us/1000);
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	4a07      	ldr	r2, [pc, #28]	; (80113a0 <VL53LX_WaitUs+0x2c>)
 8011382:	fb82 1203 	smull	r1, r2, r2, r3
 8011386:	1192      	asrs	r2, r2, #6
 8011388:	17db      	asrs	r3, r3, #31
 801138a:	1ad3      	subs	r3, r2, r3
 801138c:	4619      	mov	r1, r3
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f000 f8a2 	bl	80114d8 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8011394:	2300      	movs	r3, #0
}
 8011396:	4618      	mov	r0, r3
 8011398:	3708      	adds	r7, #8
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}
 801139e:	bf00      	nop
 80113a0:	10624dd3 	.word	0x10624dd3

080113a4 <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 80113a4:	b590      	push	{r4, r7, lr}
 80113a6:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80113aa:	af00      	add	r7, sp, #0
 80113ac:	f107 040c 	add.w	r4, r7, #12
 80113b0:	6020      	str	r0, [r4, #0]
 80113b2:	f107 0008 	add.w	r0, r7, #8
 80113b6:	6001      	str	r1, [r0, #0]
 80113b8:	4619      	mov	r1, r3
 80113ba:	1dbb      	adds	r3, r7, #6
 80113bc:	801a      	strh	r2, [r3, #0]
 80113be:	1d7b      	adds	r3, r7, #5
 80113c0:	460a      	mov	r2, r1
 80113c2:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 80113c4:	2300      	movs	r3, #0
 80113c6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 80113ca:	2300      	movs	r3, #0
 80113cc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 80113d0:	2300      	movs	r3, #0
 80113d2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 80113d6:	2300      	movs	r3, #0
 80113d8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 80113dc:	2300      	movs	r3, #0
 80113de:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 80113e2:	2300      	movs	r3, #0
 80113e4:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 80113e8:	f107 0310 	add.w	r3, r7, #16
 80113ec:	f240 12ff 	movw	r2, #511	; 0x1ff
 80113f0:	4938      	ldr	r1, [pc, #224]	; (80114d4 <VL53LX_WaitValueMaskEx+0x130>)
 80113f2:	4618      	mov	r0, r3
 80113f4:	f003 fe90 	bl	8015118 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(Dev, &start_time_ms);
 80113f8:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80113fc:	f107 030c 	add.w	r3, r7, #12
 8011400:	4611      	mov	r1, r2
 8011402:	6818      	ldr	r0, [r3, #0]
 8011404:	f7ff ff92 	bl	801132c <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 8011408:	e042      	b.n	8011490 <VL53LX_WaitValueMaskEx+0xec>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 801140a:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 801140e:	2b00      	cmp	r3, #0
 8011410:	d10b      	bne.n	801142a <VL53LX_WaitValueMaskEx+0x86>
			status = VL53LX_RdByte(
 8011412:	f207 2213 	addw	r2, r7, #531	; 0x213
 8011416:	1dbb      	adds	r3, r7, #6
 8011418:	8819      	ldrh	r1, [r3, #0]
 801141a:	f107 030c 	add.w	r3, r7, #12
 801141e:	6818      	ldr	r0, [r3, #0]
 8011420:	f7ff ff10 	bl	8011244 <VL53LX_RdByte>
 8011424:	4603      	mov	r3, r0
 8011426:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 801142a:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 801142e:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8011432:	4013      	ands	r3, r2
 8011434:	b2db      	uxtb	r3, r3
 8011436:	1d7a      	adds	r2, r7, #5
 8011438:	7812      	ldrb	r2, [r2, #0]
 801143a:	429a      	cmp	r2, r3
 801143c:	d102      	bne.n	8011444 <VL53LX_WaitValueMaskEx+0xa0>
			found = 1;
 801143e:	2301      	movs	r3, #1
 8011440:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 8011444:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011448:	2b00      	cmp	r3, #0
 801144a:	d112      	bne.n	8011472 <VL53LX_WaitValueMaskEx+0xce>
 801144c:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8011450:	2b00      	cmp	r3, #0
 8011452:	d10e      	bne.n	8011472 <VL53LX_WaitValueMaskEx+0xce>
			found == 0 &&
 8011454:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8011458:	2b00      	cmp	r3, #0
 801145a:	d00a      	beq.n	8011472 <VL53LX_WaitValueMaskEx+0xce>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 801145c:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8011460:	f107 030c 	add.w	r3, r7, #12
 8011464:	4611      	mov	r1, r2
 8011466:	6818      	ldr	r0, [r3, #0]
 8011468:	f7ff ff74 	bl	8011354 <VL53LX_WaitMs>
 801146c:	4603      	mov	r3, r0
 801146e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(Dev, &current_time_ms);
 8011472:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8011476:	f107 030c 	add.w	r3, r7, #12
 801147a:	4611      	mov	r1, r2
 801147c:	6818      	ldr	r0, [r3, #0]
 801147e:	f7ff ff55 	bl	801132c <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8011482:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8011486:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801148a:	1ad3      	subs	r3, r2, r3
 801148c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53LX_ERROR_NONE) &&
 8011490:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011494:	2b00      	cmp	r3, #0
 8011496:	d10a      	bne.n	80114ae <VL53LX_WaitValueMaskEx+0x10a>
 8011498:	f107 0308 	add.w	r3, r7, #8
 801149c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d203      	bcs.n	80114ae <VL53LX_WaitValueMaskEx+0x10a>
		   (polling_time_ms < timeout_ms) &&
 80114a6:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d0ad      	beq.n	801140a <VL53LX_WaitValueMaskEx+0x66>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 80114ae:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d106      	bne.n	80114c4 <VL53LX_WaitValueMaskEx+0x120>
 80114b6:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d102      	bne.n	80114c4 <VL53LX_WaitValueMaskEx+0x120>
		status = VL53LX_ERROR_TIME_OUT;
 80114be:	23f9      	movs	r3, #249	; 0xf9
 80114c0:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 80114c4:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 80114c8:	4618      	mov	r0, r3
 80114ca:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd90      	pop	{r4, r7, pc}
 80114d2:	bf00      	nop
 80114d4:	08016198 	.word	0x08016198

080114d8 <VL53LX_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53LX_Error
  */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b084      	sub	sp, #16
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	695b      	ldr	r3, [r3, #20]
 80114e6:	4798      	blx	r3
 80114e8:	4603      	mov	r3, r0
 80114ea:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 80114ec:	bf00      	nop
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	695b      	ldr	r3, [r3, #20]
 80114f2:	4798      	blx	r3
 80114f4:	4603      	mov	r3, r0
 80114f6:	461a      	mov	r2, r3
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	1ad3      	subs	r3, r2, r3
 80114fc:	683a      	ldr	r2, [r7, #0]
 80114fe:	429a      	cmp	r2, r3
 8011500:	d8f5      	bhi.n	80114ee <VL53LX_Delay+0x16>
  {
  }

  return VL53LX_ERROR_NONE;
 8011502:	2300      	movs	r3, #0
}
 8011504:	4618      	mov	r0, r3
 8011506:	3710      	adds	r7, #16
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}

0801150c <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b08c      	sub	sp, #48	; 0x30
 8011510:	af06      	add	r7, sp, #24
 8011512:	60f8      	str	r0, [r7, #12]
 8011514:	60b9      	str	r1, [r7, #8]
 8011516:	607a      	str	r2, [r7, #4]
 8011518:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 801151a:	2300      	movs	r3, #0
 801151c:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 801151e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011520:	9304      	str	r3, [sp, #16]
 8011522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011524:	9303      	str	r3, [sp, #12]
 8011526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011528:	9302      	str	r3, [sp, #8]
 801152a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801152c:	9301      	str	r3, [sp, #4]
 801152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011530:	9300      	str	r3, [sp, #0]
 8011532:	6a3b      	ldr	r3, [r7, #32]
 8011534:	683a      	ldr	r2, [r7, #0]
 8011536:	6879      	ldr	r1, [r7, #4]
 8011538:	68b8      	ldr	r0, [r7, #8]
 801153a:	f7fd f98c 	bl	800e856 <VL53LX_hist_process_data>
 801153e:	4603      	mov	r3, r0
 8011540:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8011542:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011546:	4618      	mov	r0, r3
 8011548:	3718      	adds	r7, #24
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}

0801154e <VL53L3CX_RegisterBusIO>:
  * @param pObj    vl53l3cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_RegisterBusIO(VL53L3CX_Object_t *pObj, VL53L3CX_IO_t *pIO)
{
 801154e:	b580      	push	{r7, lr}
 8011550:	b084      	sub	sp, #16
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
 8011556:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d103      	bne.n	8011566 <VL53L3CX_RegisterBusIO+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 801155e:	f06f 0301 	mvn.w	r3, #1
 8011562:	60fb      	str	r3, [r7, #12]
 8011564:	e023      	b.n	80115ae <VL53L3CX_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	681a      	ldr	r2, [r3, #0]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	685a      	ldr	r2, [r3, #4]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	891a      	ldrh	r2, [r3, #8]
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	68da      	ldr	r2, [r3, #12]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	691a      	ldr	r2, [r3, #16]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	695a      	ldr	r2, [r3, #20]
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d004      	beq.n	80115a8 <VL53L3CX_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	4798      	blx	r3
 80115a4:	60f8      	str	r0, [r7, #12]
 80115a6:	e002      	b.n	80115ae <VL53L3CX_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L3CX_ERROR;
 80115a8:	f04f 33ff 	mov.w	r3, #4294967295
 80115ac:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80115ae:	68fb      	ldr	r3, [r7, #12]
}
 80115b0:	4618      	mov	r0, r3
 80115b2:	3710      	adds	r7, #16
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}

080115b8 <VL53L3CX_Init>:
  * @brief Initializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Init(VL53L3CX_Object_t *pObj)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b084      	sub	sp, #16
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80115c6:	3328      	adds	r3, #40	; 0x28
 80115c8:	781b      	ldrb	r3, [r3, #0]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d003      	beq.n	80115d6 <VL53L3CX_Init+0x1e>
  {
    ret =  VL53L3CX_ERROR;
 80115ce:	f04f 33ff 	mov.w	r3, #4294967295
 80115d2:	60fb      	str	r3, [r7, #12]
 80115d4:	e043      	b.n	801165e <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_WaitDeviceBooted(pObj) != VL53LX_ERROR_NONE)
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f7f0 fcb8 	bl	8001f4c <VL53LX_WaitDeviceBooted>
 80115dc:	4603      	mov	r3, r0
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d003      	beq.n	80115ea <VL53L3CX_Init+0x32>
  {
    ret =  VL53L3CX_ERROR;
 80115e2:	f04f 33ff 	mov.w	r3, #4294967295
 80115e6:	60fb      	str	r3, [r7, #12]
 80115e8:	e039      	b.n	801165e <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_DataInit(pObj) != VL53LX_ERROR_NONE)
 80115ea:	6878      	ldr	r0, [r7, #4]
 80115ec:	f7f0 fc53 	bl	8001e96 <VL53LX_DataInit>
 80115f0:	4603      	mov	r3, r0
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d003      	beq.n	80115fe <VL53L3CX_Init+0x46>
  {
    ret = VL53L3CX_ERROR;
 80115f6:	f04f 33ff 	mov.w	r3, #4294967295
 80115fa:	60fb      	str	r3, [r7, #12]
 80115fc:	e02f      	b.n	801165e <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_PerformRefSpadManagement(pObj) != VL53LX_ERROR_NONE)
 80115fe:	6878      	ldr	r0, [r7, #4]
 8011600:	f7f1 fb46 	bl	8002c90 <VL53LX_PerformRefSpadManagement>
 8011604:	4603      	mov	r3, r0
 8011606:	2b00      	cmp	r3, #0
 8011608:	d003      	beq.n	8011612 <VL53L3CX_Init+0x5a>
  {
    ret = VL53L3CX_ERROR;
 801160a:	f04f 33ff 	mov.w	r3, #4294967295
 801160e:	60fb      	str	r3, [r7, #12]
 8011610:	e025      	b.n	801165e <VL53L3CX_Init+0xa6>
  }
  else
  {
    pObj->IsRanging = 0;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011618:	3329      	adds	r3, #41	; 0x29
 801161a:	2200      	movs	r2, #0
 801161c:	701a      	strb	r2, [r3, #0]
    pObj->IsBlocking = 0;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011624:	332a      	adds	r3, #42	; 0x2a
 8011626:	2200      	movs	r2, #0
 8011628:	701a      	strb	r2, [r3, #0]
    pObj->IsContinuous = 0;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011630:	332b      	adds	r3, #43	; 0x2b
 8011632:	2200      	movs	r2, #0
 8011634:	701a      	strb	r2, [r3, #0]
    pObj->IsAmbientEnabled = 0;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801163c:	332c      	adds	r3, #44	; 0x2c
 801163e:	2200      	movs	r2, #0
 8011640:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = 0;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011648:	332d      	adds	r3, #45	; 0x2d
 801164a:	2200      	movs	r2, #0
 801164c:	701a      	strb	r2, [r3, #0]
    pObj->IsInitialized = 1;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011654:	3328      	adds	r3, #40	; 0x28
 8011656:	2201      	movs	r2, #1
 8011658:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 801165a:	2300      	movs	r3, #0
 801165c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801165e:	68fb      	ldr	r3, [r7, #12]
}
 8011660:	4618      	mov	r0, r3
 8011662:	3710      	adds	r7, #16
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}

08011668 <VL53L3CX_DeInit>:
  * @brief Deinitializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_DeInit(VL53L3CX_Object_t *pObj)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b084      	sub	sp, #16
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L3CX_ERROR;
 8011670:	f04f 33ff 	mov.w	r3, #4294967295
 8011674:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801167c:	3328      	adds	r3, #40	; 0x28
 801167e:	781b      	ldrb	r3, [r3, #0]
 8011680:	2b01      	cmp	r3, #1
 8011682:	d111      	bne.n	80116a8 <VL53L3CX_DeInit+0x40>
  {
    /* De-initialize the vl53l3cx interface */
    if (pObj->IO.DeInit() != 0)
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	4798      	blx	r3
 801168a:	4603      	mov	r3, r0
 801168c:	2b00      	cmp	r3, #0
 801168e:	d003      	beq.n	8011698 <VL53L3CX_DeInit+0x30>
    {
      ret = VL53L3CX_ERROR;
 8011690:	f04f 33ff 	mov.w	r3, #4294967295
 8011694:	60fb      	str	r3, [r7, #12]
 8011696:	e007      	b.n	80116a8 <VL53L3CX_DeInit+0x40>
    }
    else
    {
      ret = VL53L3CX_OK;
 8011698:	2300      	movs	r3, #0
 801169a:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80116a2:	3328      	adds	r3, #40	; 0x28
 80116a4:	2200      	movs	r2, #0
 80116a6:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80116a8:	68fb      	ldr	r3, [r7, #12]
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3710      	adds	r7, #16
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}

080116b2 <VL53L3CX_ReadID>:
  * @param pObj    vl53l3cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ReadID(VL53L3CX_Object_t *pObj, uint32_t *pId)
{
 80116b2:	b580      	push	{r7, lr}
 80116b4:	b084      	sub	sp, #16
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6078      	str	r0, [r7, #4]
 80116ba:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d002      	beq.n	80116c8 <VL53L3CX_ReadID+0x16>
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d103      	bne.n	80116d0 <VL53L3CX_ReadID+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80116c8:	f06f 0301 	mvn.w	r3, #1
 80116cc:	60fb      	str	r3, [r7, #12]
 80116ce:	e00a      	b.n	80116e6 <VL53L3CX_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	2200      	movs	r2, #0
 80116d4:	601a      	str	r2, [r3, #0]
    ret = VL53LX_RdWord(pObj, VL53L3CX_ID_REG, (uint16_t *) pId);
 80116d6:	683a      	ldr	r2, [r7, #0]
 80116d8:	f240 110f 	movw	r1, #271	; 0x10f
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	f7ff fde5 	bl	80112ac <VL53LX_RdWord>
 80116e2:	4603      	mov	r3, r0
 80116e4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80116e6:	68fb      	ldr	r3, [r7, #12]
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	3710      	adds	r7, #16
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}

080116f0 <VL53L3CX_GetCapabilities>:
  * @param pObj    vl53l3cx context object.
  * @param pCap    Pointer to the vl53l3cx capabilities.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetCapabilities(VL53L3CX_Object_t *pObj, VL53L3CX_Capabilities_t *pCap)
{
 80116f0:	b480      	push	{r7}
 80116f2:	b085      	sub	sp, #20
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d002      	beq.n	8011706 <VL53L3CX_GetCapabilities+0x16>
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d103      	bne.n	801170e <VL53L3CX_GetCapabilities+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011706:	f06f 0301 	mvn.w	r3, #1
 801170a:	60fb      	str	r3, [r7, #12]
 801170c:	e00d      	b.n	801172a <VL53L3CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	2201      	movs	r2, #1
 8011712:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L3CX_NB_TARGET_PER_ZONE;
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	2204      	movs	r2, #4
 8011718:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	2201      	movs	r2, #1
 801171e:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	2200      	movs	r2, #0
 8011724:	60da      	str	r2, [r3, #12]

    ret = VL53L3CX_OK;
 8011726:	2300      	movs	r3, #0
 8011728:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801172a:	68fb      	ldr	r3, [r7, #12]
}
 801172c:	4618      	mov	r0, r3
 801172e:	3714      	adds	r7, #20
 8011730:	46bd      	mov	sp, r7
 8011732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011736:	4770      	bx	lr

08011738 <VL53L3CX_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L3CX the profile corresponds to the distance modes.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigProfile(VL53L3CX_Object_t *pObj, VL53L3CX_ProfileConfig_t *pConfig)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b084      	sub	sp, #16
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
 8011740:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d009      	beq.n	801175c <VL53L3CX_ConfigProfile+0x24>
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d006      	beq.n	801175c <VL53L3CX_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L3CX_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 8011754:	7afb      	ldrb	r3, [r7, #11]
 8011756:	2b01      	cmp	r3, #1
 8011758:	d103      	bne.n	8011762 <VL53L3CX_ConfigProfile+0x2a>
 801175a:	e00c      	b.n	8011776 <VL53L3CX_ConfigProfile+0x3e>
    return VL53L3CX_INVALID_PARAM;
 801175c:	f06f 0301 	mvn.w	r3, #1
 8011760:	e043      	b.n	80117ea <VL53L3CX_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 8011762:	7afb      	ldrb	r3, [r7, #11]
 8011764:	2b02      	cmp	r3, #2
 8011766:	d006      	beq.n	8011776 <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_MEDIUM) &&
 8011768:	7afb      	ldrb	r3, [r7, #11]
 801176a:	2b03      	cmp	r3, #3
 801176c:	d003      	beq.n	8011776 <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_LONG))
  {
    ret = VL53L3CX_INVALID_PARAM;
 801176e:	f06f 0301 	mvn.w	r3, #1
 8011772:	60fb      	str	r3, [r7, #12]
 8011774:	e038      	b.n	80117e8 <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetDistanceMode(pObj, ranging_profile) != VL53LX_ERROR_NONE)
 8011776:	7afb      	ldrb	r3, [r7, #11]
 8011778:	4619      	mov	r1, r3
 801177a:	6878      	ldr	r0, [r7, #4]
 801177c:	f7f0 fcc9 	bl	8002112 <VL53LX_SetDistanceMode>
 8011780:	4603      	mov	r3, r0
 8011782:	2b00      	cmp	r3, #0
 8011784:	d003      	beq.n	801178e <VL53L3CX_ConfigProfile+0x56>
  {
    ret = VL53L3CX_ERROR;
 8011786:	f04f 33ff 	mov.w	r3, #4294967295
 801178a:	60fb      	str	r3, [r7, #12]
 801178c:	e02c      	b.n	80117e8 <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53LX_ERROR_NONE)
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	685b      	ldr	r3, [r3, #4]
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
 8011792:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011796:	fb02 f303 	mul.w	r3, r2, r3
 801179a:	4619      	mov	r1, r3
 801179c:	6878      	ldr	r0, [r7, #4]
 801179e:	f7f0 fd1f 	bl	80021e0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 80117a2:	4603      	mov	r3, r0
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d003      	beq.n	80117b0 <VL53L3CX_ConfigProfile+0x78>
  {
    ret = VL53L3CX_ERROR;
 80117a8:	f04f 33ff 	mov.w	r3, #4294967295
 80117ac:	60fb      	str	r3, [r7, #12]
 80117ae:	e01b      	b.n	80117e8 <VL53L3CX_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	68db      	ldr	r3, [r3, #12]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	bf14      	ite	ne
 80117b8:	2301      	movne	r3, #1
 80117ba:	2300      	moveq	r3, #0
 80117bc:	b2db      	uxtb	r3, r3
 80117be:	461a      	mov	r2, r3
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117c6:	332c      	adds	r3, #44	; 0x2c
 80117c8:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	691b      	ldr	r3, [r3, #16]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	bf14      	ite	ne
 80117d2:	2301      	movne	r3, #1
 80117d4:	2300      	moveq	r3, #0
 80117d6:	b2db      	uxtb	r3, r3
 80117d8:	461a      	mov	r2, r3
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117e0:	332d      	adds	r3, #45	; 0x2d
 80117e2:	701a      	strb	r2, [r3, #0]

    ret = VL53L3CX_OK;
 80117e4:	2300      	movs	r3, #0
 80117e6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80117e8:	68fb      	ldr	r3, [r7, #12]
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3710      	adds	r7, #16
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}

080117f2 <VL53L3CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigROI(VL53L3CX_Object_t *pObj, VL53L3CX_ROIConfig_t *pROIConfig)
{
 80117f2:	b580      	push	{r7, lr}
 80117f4:	b084      	sub	sp, #16
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	6078      	str	r0, [r7, #4]
 80117fa:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53LX_UserRoi_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d002      	beq.n	8011808 <VL53L3CX_ConfigROI+0x16>
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d103      	bne.n	8011810 <VL53L3CX_ConfigROI+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011808:	f06f 0301 	mvn.w	r3, #1
 801180c:	60fb      	str	r3, [r7, #12]
 801180e:	e01a      	b.n	8011846 <VL53L3CX_ConfigROI+0x54>
  }
  else
  {
    roi_settings.BotRightX = pROIConfig->BotRightX;
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	789b      	ldrb	r3, [r3, #2]
 8011814:	72bb      	strb	r3, [r7, #10]
    roi_settings.BotRightY = pROIConfig->BotRightY;
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	78db      	ldrb	r3, [r3, #3]
 801181a:	72fb      	strb	r3, [r7, #11]
    roi_settings.TopLeftX = pROIConfig->TopLeftX;
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	723b      	strb	r3, [r7, #8]
    roi_settings.TopLeftY = pROIConfig->TopLeftY;
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	785b      	ldrb	r3, [r3, #1]
 8011826:	727b      	strb	r3, [r7, #9]

    if (VL53LX_SetUserROI(pObj, &roi_settings) != VL53LX_ERROR_NONE)
 8011828:	f107 0308 	add.w	r3, r7, #8
 801182c:	4619      	mov	r1, r3
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f7f0 fd4e 	bl	80022d0 <VL53LX_SetUserROI>
 8011834:	4603      	mov	r3, r0
 8011836:	2b00      	cmp	r3, #0
 8011838:	d003      	beq.n	8011842 <VL53L3CX_ConfigROI+0x50>
    {
      ret = VL53L3CX_ERROR;
 801183a:	f04f 33ff 	mov.w	r3, #4294967295
 801183e:	60fb      	str	r3, [r7, #12]
 8011840:	e001      	b.n	8011846 <VL53L3CX_ConfigROI+0x54>
    }
    else
    {
      ret = VL53L3CX_OK;
 8011842:	2300      	movs	r3, #0
 8011844:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011846:	68fb      	ldr	r3, [r7, #12]
}
 8011848:	4618      	mov	r0, r3
 801184a:	3710      	adds	r7, #16
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}

08011850 <VL53L3CX_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigIT(VL53L3CX_Object_t *pObj, VL53L3CX_ITConfig_t *pITConfig)
{
 8011850:	b480      	push	{r7}
 8011852:	b083      	sub	sp, #12
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L3CX_NOT_IMPLEMENTED;
 801185a:	f06f 0303 	mvn.w	r3, #3
}
 801185e:	4618      	mov	r0, r3
 8011860:	370c      	adds	r7, #12
 8011862:	46bd      	mov	sp, r7
 8011864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011868:	4770      	bx	lr

0801186a <VL53L3CX_GetDistance>:
  * @param pObj    vl53l3cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetDistance(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 801186a:	b580      	push	{r7, lr}
 801186c:	b084      	sub	sp, #16
 801186e:	af00      	add	r7, sp, #0
 8011870:	6078      	str	r0, [r7, #4]
 8011872:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d002      	beq.n	8011880 <VL53L3CX_GetDistance+0x16>
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d103      	bne.n	8011888 <VL53L3CX_GetDistance+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011880:	f06f 0301 	mvn.w	r3, #1
 8011884:	60fb      	str	r3, [r7, #12]
 8011886:	e01d      	b.n	80118c4 <VL53L3CX_GetDistance+0x5a>
  }
  else if (pObj->IsRanging == 0U)
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801188e:	3329      	adds	r3, #41	; 0x29
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d103      	bne.n	801189e <VL53L3CX_GetDistance+0x34>
  {
    ret = VL53L3CX_ERROR;
 8011896:	f04f 33ff 	mov.w	r3, #4294967295
 801189a:	60fb      	str	r3, [r7, #12]
 801189c:	e012      	b.n	80118c4 <VL53L3CX_GetDistance+0x5a>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80118a4:	332a      	adds	r3, #42	; 0x2a
 80118a6:	781b      	ldrb	r3, [r3, #0]
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	d106      	bne.n	80118ba <VL53L3CX_GetDistance+0x50>
    {
      ret = vl53l3cx_poll_for_measurement(pObj, V53L3CX_POLL_TIMEOUT);
 80118ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f000 f92b 	bl	8011b0c <vl53l3cx_poll_for_measurement>
 80118b6:	60f8      	str	r0, [r7, #12]
 80118b8:	e004      	b.n	80118c4 <VL53L3CX_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l3cx_poll_for_measurement(pObj, 0U);
 80118ba:	2100      	movs	r1, #0
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f000 f925 	bl	8011b0c <vl53l3cx_poll_for_measurement>
 80118c2:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L3CX_OK)
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d119      	bne.n	80118fe <VL53L3CX_GetDistance+0x94>
  {
    /* retrieve measurements and fill result structure */
    if (vl53l3cx_get_result(pObj, pResult) != VL53L3CX_OK)
 80118ca:	6839      	ldr	r1, [r7, #0]
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	f000 f94b 	bl	8011b68 <vl53l3cx_get_result>
 80118d2:	4603      	mov	r3, r0
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d003      	beq.n	80118e0 <VL53L3CX_GetDistance+0x76>
    {
      ret = VL53L3CX_ERROR;
 80118d8:	f04f 33ff 	mov.w	r3, #4294967295
 80118dc:	60fb      	str	r3, [r7, #12]
 80118de:	e00e      	b.n	80118fe <VL53L3CX_GetDistance+0x94>
    }
    else if (pObj->IsContinuous == 1U)
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80118e6:	332b      	adds	r3, #43	; 0x2b
 80118e8:	781b      	ldrb	r3, [r3, #0]
 80118ea:	2b01      	cmp	r3, #1
 80118ec:	d105      	bne.n	80118fa <VL53L3CX_GetDistance+0x90>
    {
      /* trigger new measurement if device configured in continuous mode */
      ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f7f0 fdbe 	bl	8002470 <VL53LX_ClearInterruptAndStartMeasurement>
 80118f4:	4603      	mov	r3, r0
 80118f6:	60fb      	str	r3, [r7, #12]
 80118f8:	e001      	b.n	80118fe <VL53L3CX_GetDistance+0x94>
    }
    else
    {
      ret = VL53L3CX_OK;
 80118fa:	2300      	movs	r3, #0
 80118fc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80118fe:	68fb      	ldr	r3, [r7, #12]
}
 8011900:	4618      	mov	r0, r3
 8011902:	3710      	adds	r7, #16
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}

08011908 <VL53L3CX_Start>:
  * @param pObj    vl53l3cx context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Start(VL53L3CX_Object_t *pObj, uint32_t Mode)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b084      	sub	sp, #16
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d103      	bne.n	8011920 <VL53L3CX_Start+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011918:	f06f 0301 	mvn.w	r3, #1
 801191c:	60fb      	str	r3, [r7, #12]
 801191e:	e068      	b.n	80119f2 <VL53L3CX_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011926:	3329      	adds	r3, #41	; 0x29
 8011928:	781b      	ldrb	r3, [r3, #0]
 801192a:	2b01      	cmp	r3, #1
 801192c:	d103      	bne.n	8011936 <VL53L3CX_Start+0x2e>
  {
    ret = VL53L3CX_ERROR;
 801192e:	f04f 33ff 	mov.w	r3, #4294967295
 8011932:	60fb      	str	r3, [r7, #12]
 8011934:	e05d      	b.n	80119f2 <VL53L3CX_Start+0xea>
  }
  else if (VL53LX_StartMeasurement(pObj) == VL53LX_ERROR_NONE)
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	f7f0 fd38 	bl	80023ac <VL53LX_StartMeasurement>
 801193c:	4603      	mov	r3, r0
 801193e:	2b00      	cmp	r3, #0
 8011940:	d154      	bne.n	80119ec <VL53L3CX_Start+0xe4>
  {
    pObj->IsRanging = 1;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011948:	3329      	adds	r3, #41	; 0x29
 801194a:	2201      	movs	r2, #1
 801194c:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 801194e:	2300      	movs	r3, #0
 8011950:	60fb      	str	r3, [r7, #12]
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	3b01      	subs	r3, #1
 8011956:	2b03      	cmp	r3, #3
 8011958:	d83e      	bhi.n	80119d8 <VL53L3CX_Start+0xd0>
 801195a:	a201      	add	r2, pc, #4	; (adr r2, 8011960 <VL53L3CX_Start+0x58>)
 801195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011960:	08011971 	.word	0x08011971
 8011964:	0801198b 	.word	0x0801198b
 8011968:	080119a5 	.word	0x080119a5
 801196c:	080119bf 	.word	0x080119bf

    switch (Mode)
    {
    case VL53L3CX_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011976:	332b      	adds	r3, #43	; 0x2b
 8011978:	2201      	movs	r2, #1
 801197a:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011982:	332a      	adds	r3, #42	; 0x2a
 8011984:	2201      	movs	r2, #1
 8011986:	701a      	strb	r2, [r3, #0]
      break;
 8011988:	e033      	b.n	80119f2 <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011990:	332b      	adds	r3, #43	; 0x2b
 8011992:	2200      	movs	r2, #0
 8011994:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801199c:	332a      	adds	r3, #42	; 0x2a
 801199e:	2201      	movs	r2, #1
 80119a0:	701a      	strb	r2, [r3, #0]
      break;
 80119a2:	e026      	b.n	80119f2 <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80119aa:	332b      	adds	r3, #43	; 0x2b
 80119ac:	2201      	movs	r2, #1
 80119ae:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80119b6:	332a      	adds	r3, #42	; 0x2a
 80119b8:	2200      	movs	r2, #0
 80119ba:	701a      	strb	r2, [r3, #0]
      break;
 80119bc:	e019      	b.n	80119f2 <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80119c4:	332b      	adds	r3, #43	; 0x2b
 80119c6:	2200      	movs	r2, #0
 80119c8:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80119d0:	332a      	adds	r3, #42	; 0x2a
 80119d2:	2200      	movs	r2, #0
 80119d4:	701a      	strb	r2, [r3, #0]
      break;
 80119d6:	e00c      	b.n	80119f2 <VL53L3CX_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80119de:	3329      	adds	r3, #41	; 0x29
 80119e0:	2200      	movs	r2, #0
 80119e2:	701a      	strb	r2, [r3, #0]
      ret = VL53L3CX_INVALID_PARAM;
 80119e4:	f06f 0301 	mvn.w	r3, #1
 80119e8:	60fb      	str	r3, [r7, #12]
      break;
 80119ea:	e002      	b.n	80119f2 <VL53L3CX_Start+0xea>
    }
  }
  else
  {
    ret = VL53L3CX_ERROR;
 80119ec:	f04f 33ff 	mov.w	r3, #4294967295
 80119f0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80119f2:	68fb      	ldr	r3, [r7, #12]
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	3710      	adds	r7, #16
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd80      	pop	{r7, pc}

080119fc <VL53L3CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Stop(VL53L3CX_Object_t *pObj)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b084      	sub	sp, #16
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d103      	bne.n	8011a12 <VL53L3CX_Stop+0x16>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011a0a:	f06f 0301 	mvn.w	r3, #1
 8011a0e:	60fb      	str	r3, [r7, #12]
 8011a10:	e01c      	b.n	8011a4c <VL53L3CX_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011a18:	3329      	adds	r3, #41	; 0x29
 8011a1a:	781b      	ldrb	r3, [r3, #0]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d103      	bne.n	8011a28 <VL53L3CX_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L3CX_ERROR;
 8011a20:	f04f 33ff 	mov.w	r3, #4294967295
 8011a24:	60fb      	str	r3, [r7, #12]
 8011a26:	e011      	b.n	8011a4c <VL53L3CX_Stop+0x50>
  }
  else if (VL53LX_StopMeasurement(pObj) == VL53LX_ERROR_NONE)
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f7f0 fd0d 	bl	8002448 <VL53LX_StopMeasurement>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d108      	bne.n	8011a46 <VL53L3CX_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011a3a:	3329      	adds	r3, #41	; 0x29
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8011a40:	2300      	movs	r3, #0
 8011a42:	60fb      	str	r3, [r7, #12]
 8011a44:	e002      	b.n	8011a4c <VL53L3CX_Stop+0x50>
  }
  else
  {
    ret = VL53L3CX_ERROR;
 8011a46:	f04f 33ff 	mov.w	r3, #4294967295
 8011a4a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3710      	adds	r7, #16
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}

08011a56 <VL53L3CX_SetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param Address     New I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetAddress(VL53L3CX_Object_t *pObj, uint32_t Address)
{
 8011a56:	b580      	push	{r7, lr}
 8011a58:	b084      	sub	sp, #16
 8011a5a:	af00      	add	r7, sp, #0
 8011a5c:	6078      	str	r0, [r7, #4]
 8011a5e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d103      	bne.n	8011a6e <VL53L3CX_SetAddress+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011a66:	f06f 0301 	mvn.w	r3, #1
 8011a6a:	60fb      	str	r3, [r7, #12]
 8011a6c:	e012      	b.n	8011a94 <VL53L3CX_SetAddress+0x3e>
  }
  else if (VL53LX_SetDeviceAddress(pObj, (uint8_t)Address) != VL53LX_ERROR_NONE)
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	b2db      	uxtb	r3, r3
 8011a72:	4619      	mov	r1, r3
 8011a74:	6878      	ldr	r0, [r7, #4]
 8011a76:	f7f0 f9e7 	bl	8001e48 <VL53LX_SetDeviceAddress>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d003      	beq.n	8011a88 <VL53L3CX_SetAddress+0x32>
  {
    ret = VL53L3CX_ERROR;
 8011a80:	f04f 33ff 	mov.w	r3, #4294967295
 8011a84:	60fb      	str	r3, [r7, #12]
 8011a86:	e005      	b.n	8011a94 <VL53L3CX_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8011a88:	683b      	ldr	r3, [r7, #0]
 8011a8a:	b29a      	uxth	r2, r3
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	811a      	strh	r2, [r3, #8]
    ret = VL53L3CX_OK;
 8011a90:	2300      	movs	r3, #0
 8011a92:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011a94:	68fb      	ldr	r3, [r7, #12]
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3710      	adds	r7, #16
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}

08011a9e <VL53L3CX_GetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetAddress(VL53L3CX_Object_t *pObj, uint32_t *pAddress)
{
 8011a9e:	b480      	push	{r7}
 8011aa0:	b085      	sub	sp, #20
 8011aa2:	af00      	add	r7, sp, #0
 8011aa4:	6078      	str	r0, [r7, #4]
 8011aa6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d002      	beq.n	8011ab4 <VL53L3CX_GetAddress+0x16>
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d103      	bne.n	8011abc <VL53L3CX_GetAddress+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011ab4:	f06f 0301 	mvn.w	r3, #1
 8011ab8:	60fb      	str	r3, [r7, #12]
 8011aba:	e006      	b.n	8011aca <VL53L3CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	891b      	ldrh	r3, [r3, #8]
 8011ac0:	461a      	mov	r2, r3
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	601a      	str	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011aca:	68fb      	ldr	r3, [r7, #12]
}
 8011acc:	4618      	mov	r0, r3
 8011ace:	3714      	adds	r7, #20
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad6:	4770      	bx	lr

08011ad8 <VL53L3CX_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetPowerMode(VL53L3CX_Object_t *pObj, uint32_t PowerMode)
{
 8011ad8:	b480      	push	{r7}
 8011ada:	b083      	sub	sp, #12
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
 8011ae0:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L3CX_NOT_IMPLEMENTED;
 8011ae2:	f06f 0303 	mvn.w	r3, #3
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	370c      	adds	r7, #12
 8011aea:	46bd      	mov	sp, r7
 8011aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af0:	4770      	bx	lr

08011af2 <VL53L3CX_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetPowerMode(VL53L3CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8011af2:	b480      	push	{r7}
 8011af4:	b083      	sub	sp, #12
 8011af6:	af00      	add	r7, sp, #0
 8011af8:	6078      	str	r0, [r7, #4]
 8011afa:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L3CX_NOT_IMPLEMENTED;
 8011afc:	f06f 0303 	mvn.w	r3, #3
}
 8011b00:	4618      	mov	r0, r3
 8011b02:	370c      	adds	r7, #12
 8011b04:	46bd      	mov	sp, r7
 8011b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0a:	4770      	bx	lr

08011b0c <vl53l3cx_poll_for_measurement>:
/** @defgroup VL53L3CX_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l3cx_poll_for_measurement(VL53L3CX_Object_t *pObj, uint32_t Timeout)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b084      	sub	sp, #16
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8011b16:	2300      	movs	r3, #0
 8011b18:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d102      	bne.n	8011b26 <vl53l3cx_poll_for_measurement+0x1a>
  {
    return VL53L3CX_INVALID_PARAM;
 8011b20:	f06f 0301 	mvn.w	r3, #1
 8011b24:	e01b      	b.n	8011b5e <vl53l3cx_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	695b      	ldr	r3, [r3, #20]
 8011b2a:	4798      	blx	r3
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53LX_GetMeasurementDataReady(pObj, &NewDataReady);
 8011b30:	f107 030b 	add.w	r3, r7, #11
 8011b34:	4619      	mov	r1, r3
 8011b36:	6878      	ldr	r0, [r7, #4]
 8011b38:	f7f0 fcb0 	bl	800249c <VL53LX_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8011b3c:	7afb      	ldrb	r3, [r7, #11]
 8011b3e:	2b01      	cmp	r3, #1
 8011b40:	d101      	bne.n	8011b46 <vl53l3cx_poll_for_measurement+0x3a>
    {
      return VL53L3CX_OK;
 8011b42:	2300      	movs	r3, #0
 8011b44:	e00b      	b.n	8011b5e <vl53l3cx_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	695b      	ldr	r3, [r3, #20]
 8011b4a:	4798      	blx	r3
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	461a      	mov	r2, r3
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	1ad3      	subs	r3, r2, r3
 8011b54:	683a      	ldr	r2, [r7, #0]
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d8ea      	bhi.n	8011b30 <vl53l3cx_poll_for_measurement+0x24>

  return VL53L3CX_TIMEOUT;
 8011b5a:	f06f 0302 	mvn.w	r3, #2
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3710      	adds	r7, #16
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}
	...

08011b68 <vl53l3cx_get_result>:

static int32_t vl53l3cx_get_result(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 8011b68:	b590      	push	{r4, r7, lr}
 8011b6a:	b09f      	sub	sp, #124	; 0x7c
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53LX_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d002      	beq.n	8011b7e <vl53l3cx_get_result+0x16>
 8011b78:	683b      	ldr	r3, [r7, #0]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d103      	bne.n	8011b86 <vl53l3cx_get_result+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011b7e:	f06f 0301 	mvn.w	r3, #1
 8011b82:	677b      	str	r3, [r7, #116]	; 0x74
 8011b84:	e126      	b.n	8011dd4 <vl53l3cx_get_result+0x26c>
  }
  else if (VL53LX_GetMultiRangingData(pObj, &data) != VL53LX_ERROR_NONE)
 8011b86:	f107 0308 	add.w	r3, r7, #8
 8011b8a:	4619      	mov	r1, r3
 8011b8c:	6878      	ldr	r0, [r7, #4]
 8011b8e:	f7f1 f858 	bl	8002c42 <VL53LX_GetMultiRangingData>
 8011b92:	4603      	mov	r3, r0
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d003      	beq.n	8011ba0 <vl53l3cx_get_result+0x38>
  {
    ret = VL53L3CX_ERROR;
 8011b98:	f04f 33ff 	mov.w	r3, #4294967295
 8011b9c:	677b      	str	r3, [r7, #116]	; 0x74
 8011b9e:	e119      	b.n	8011dd4 <vl53l3cx_get_result+0x26c>
  }
  else
  {
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8011ba6:	e10b      	b.n	8011dc0 <vl53l3cx_get_result+0x258>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8011ba8:	7b7b      	ldrb	r3, [r7, #13]
 8011baa:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011bae:	4618      	mov	r0, r3
 8011bb0:	6839      	ldr	r1, [r7, #0]
 8011bb2:	4613      	mov	r3, r2
 8011bb4:	011b      	lsls	r3, r3, #4
 8011bb6:	4413      	add	r3, r2
 8011bb8:	009b      	lsls	r3, r3, #2
 8011bba:	440b      	add	r3, r1
 8011bbc:	3304      	adds	r3, #4
 8011bbe:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8011bc6:	e0f0      	b.n	8011daa <vl53l3cx_get_result+0x242>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8011bc8:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011bcc:	4613      	mov	r3, r2
 8011bce:	009b      	lsls	r3, r3, #2
 8011bd0:	4413      	add	r3, r2
 8011bd2:	009b      	lsls	r3, r3, #2
 8011bd4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011bd8:	4413      	add	r3, r2
 8011bda:	3b58      	subs	r3, #88	; 0x58
 8011bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	da0d      	bge.n	8011c00 <vl53l3cx_get_result+0x98>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8011be4:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011be8:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011bec:	6839      	ldr	r1, [r7, #0]
 8011bee:	4613      	mov	r3, r2
 8011bf0:	011b      	lsls	r3, r3, #4
 8011bf2:	4413      	add	r3, r2
 8011bf4:	4403      	add	r3, r0
 8011bf6:	009b      	lsls	r3, r3, #2
 8011bf8:	440b      	add	r3, r1
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	609a      	str	r2, [r3, #8]
 8011bfe:	e018      	b.n	8011c32 <vl53l3cx_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8011c00:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011c04:	4613      	mov	r3, r2
 8011c06:	009b      	lsls	r3, r3, #2
 8011c08:	4413      	add	r3, r2
 8011c0a:	009b      	lsls	r3, r3, #2
 8011c0c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011c10:	4413      	add	r3, r2
 8011c12:	3b58      	subs	r3, #88	; 0x58
 8011c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c18:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011c1c:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011c20:	461c      	mov	r4, r3
 8011c22:	6839      	ldr	r1, [r7, #0]
 8011c24:	4613      	mov	r3, r2
 8011c26:	011b      	lsls	r3, r3, #4
 8011c28:	4413      	add	r3, r2
 8011c2a:	4403      	add	r3, r0
 8011c2c:	009b      	lsls	r3, r3, #2
 8011c2e:	440b      	add	r3, r1
 8011c30:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011c38:	332c      	adds	r3, #44	; 0x2c
 8011c3a:	781b      	ldrb	r3, [r3, #0]
 8011c3c:	2b01      	cmp	r3, #1
 8011c3e:	d137      	bne.n	8011cb0 <vl53l3cx_get_result+0x148>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8011c40:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011c44:	4613      	mov	r3, r2
 8011c46:	009b      	lsls	r3, r3, #2
 8011c48:	4413      	add	r3, r2
 8011c4a:	009b      	lsls	r3, r3, #2
 8011c4c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011c50:	4413      	add	r3, r2
 8011c52:	3b60      	subs	r3, #96	; 0x60
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	ee07 3a90 	vmov	s15, r3
 8011c5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011c5e:	eddf 6a60 	vldr	s13, [pc, #384]	; 8011de0 <vl53l3cx_get_result+0x278>
 8011c62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011c66:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8011de4 <vl53l3cx_get_result+0x27c>
 8011c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011c6e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8011c72:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011c76:	0a1b      	lsrs	r3, r3, #8
 8011c78:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 8011c7c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8011c80:	ee07 3a90 	vmov	s15, r3
 8011c84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011c88:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011c8c:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011c90:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8011c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011c98:	6839      	ldr	r1, [r7, #0]
 8011c9a:	4613      	mov	r3, r2
 8011c9c:	011b      	lsls	r3, r3, #4
 8011c9e:	4413      	add	r3, r2
 8011ca0:	4403      	add	r3, r0
 8011ca2:	3308      	adds	r3, #8
 8011ca4:	009b      	lsls	r3, r3, #2
 8011ca6:	440b      	add	r3, r1
 8011ca8:	3308      	adds	r3, #8
 8011caa:	edc3 7a00 	vstr	s15, [r3]
 8011cae:	e00f      	b.n	8011cd0 <vl53l3cx_get_result+0x168>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8011cb0:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011cb4:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011cb8:	6839      	ldr	r1, [r7, #0]
 8011cba:	4613      	mov	r3, r2
 8011cbc:	011b      	lsls	r3, r3, #4
 8011cbe:	4413      	add	r3, r2
 8011cc0:	4403      	add	r3, r0
 8011cc2:	3308      	adds	r3, #8
 8011cc4:	009b      	lsls	r3, r3, #2
 8011cc6:	440b      	add	r3, r1
 8011cc8:	3308      	adds	r3, #8
 8011cca:	f04f 0200 	mov.w	r2, #0
 8011cce:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011cd6:	332d      	adds	r3, #45	; 0x2d
 8011cd8:	781b      	ldrb	r3, [r3, #0]
 8011cda:	2b01      	cmp	r3, #1
 8011cdc:	d137      	bne.n	8011d4e <vl53l3cx_get_result+0x1e6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8011cde:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011ce2:	4613      	mov	r3, r2
 8011ce4:	009b      	lsls	r3, r3, #2
 8011ce6:	4413      	add	r3, r2
 8011ce8:	009b      	lsls	r3, r3, #2
 8011cea:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011cee:	4413      	add	r3, r2
 8011cf0:	3b64      	subs	r3, #100	; 0x64
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	ee07 3a90 	vmov	s15, r3
 8011cf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011cfc:	eddf 6a38 	vldr	s13, [pc, #224]	; 8011de0 <vl53l3cx_get_result+0x278>
 8011d00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011d04:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8011de4 <vl53l3cx_get_result+0x27c>
 8011d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011d0c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8011d10:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011d14:	0a1b      	lsrs	r3, r3, #8
 8011d16:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 8011d1a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8011d1e:	ee07 3a90 	vmov	s15, r3
 8011d22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011d26:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011d2a:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011d2e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8011d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011d36:	6839      	ldr	r1, [r7, #0]
 8011d38:	4613      	mov	r3, r2
 8011d3a:	011b      	lsls	r3, r3, #4
 8011d3c:	4413      	add	r3, r2
 8011d3e:	4403      	add	r3, r0
 8011d40:	330c      	adds	r3, #12
 8011d42:	009b      	lsls	r3, r3, #2
 8011d44:	440b      	add	r3, r1
 8011d46:	3308      	adds	r3, #8
 8011d48:	edc3 7a00 	vstr	s15, [r3]
 8011d4c:	e00f      	b.n	8011d6e <vl53l3cx_get_result+0x206>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8011d4e:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011d52:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011d56:	6839      	ldr	r1, [r7, #0]
 8011d58:	4613      	mov	r3, r2
 8011d5a:	011b      	lsls	r3, r3, #4
 8011d5c:	4413      	add	r3, r2
 8011d5e:	4403      	add	r3, r0
 8011d60:	330c      	adds	r3, #12
 8011d62:	009b      	lsls	r3, r3, #2
 8011d64:	440b      	add	r3, r1
 8011d66:	3308      	adds	r3, #8
 8011d68:	f04f 0200 	mov.w	r2, #0
 8011d6c:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 8011d6e:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011d72:	4613      	mov	r3, r2
 8011d74:	009b      	lsls	r3, r3, #2
 8011d76:	4413      	add	r3, r2
 8011d78:	009b      	lsls	r3, r3, #2
 8011d7a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011d7e:	4413      	add	r3, r2
 8011d80:	3b56      	subs	r3, #86	; 0x56
 8011d82:	781b      	ldrb	r3, [r3, #0]
 8011d84:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011d88:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011d8c:	461c      	mov	r4, r3
 8011d8e:	6839      	ldr	r1, [r7, #0]
 8011d90:	4613      	mov	r3, r2
 8011d92:	011b      	lsls	r3, r3, #4
 8011d94:	4413      	add	r3, r2
 8011d96:	4403      	add	r3, r0
 8011d98:	3304      	adds	r3, #4
 8011d9a:	009b      	lsls	r3, r3, #2
 8011d9c:	440b      	add	r3, r1
 8011d9e:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8011da0:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8011da4:	3301      	adds	r3, #1
 8011da6:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8011daa:	7b7b      	ldrb	r3, [r7, #13]
 8011dac:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011db0:	429a      	cmp	r2, r3
 8011db2:	f4ff af09 	bcc.w	8011bc8 <vl53l3cx_get_result+0x60>
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 8011db6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8011dba:	3301      	adds	r3, #1
 8011dbc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8011dc0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	f43f aeef 	beq.w	8011ba8 <vl53l3cx_get_result+0x40>
      }
    }

    pResult->NumberOfZones = VL53L3CX_MAX_NB_ZONES;
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	2201      	movs	r2, #1
 8011dce:	601a      	str	r2, [r3, #0]

    ret = VL53L3CX_OK;
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	677b      	str	r3, [r7, #116]	; 0x74
  }

  return ret;
 8011dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	377c      	adds	r7, #124	; 0x7c
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd90      	pop	{r4, r7, pc}
 8011dde:	bf00      	nop
 8011de0:	47800000 	.word	0x47800000
 8011de4:	447a0000 	.word	0x447a0000

08011de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8011dec:	4b0e      	ldr	r3, [pc, #56]	; (8011e28 <HAL_Init+0x40>)
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	4a0d      	ldr	r2, [pc, #52]	; (8011e28 <HAL_Init+0x40>)
 8011df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8011df8:	4b0b      	ldr	r3, [pc, #44]	; (8011e28 <HAL_Init+0x40>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	4a0a      	ldr	r2, [pc, #40]	; (8011e28 <HAL_Init+0x40>)
 8011dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011e04:	4b08      	ldr	r3, [pc, #32]	; (8011e28 <HAL_Init+0x40>)
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	4a07      	ldr	r2, [pc, #28]	; (8011e28 <HAL_Init+0x40>)
 8011e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011e10:	2003      	movs	r0, #3
 8011e12:	f000 f931 	bl	8012078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8011e16:	2000      	movs	r0, #0
 8011e18:	f000 f808 	bl	8011e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8011e1c:	f7ef f860 	bl	8000ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011e20:	2300      	movs	r3, #0
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	bd80      	pop	{r7, pc}
 8011e26:	bf00      	nop
 8011e28:	40023c00 	.word	0x40023c00

08011e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b082      	sub	sp, #8
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8011e34:	4b12      	ldr	r3, [pc, #72]	; (8011e80 <HAL_InitTick+0x54>)
 8011e36:	681a      	ldr	r2, [r3, #0]
 8011e38:	4b12      	ldr	r3, [pc, #72]	; (8011e84 <HAL_InitTick+0x58>)
 8011e3a:	781b      	ldrb	r3, [r3, #0]
 8011e3c:	4619      	mov	r1, r3
 8011e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f000 f93b 	bl	80120c6 <HAL_SYSTICK_Config>
 8011e50:	4603      	mov	r3, r0
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d001      	beq.n	8011e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8011e56:	2301      	movs	r3, #1
 8011e58:	e00e      	b.n	8011e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	2b0f      	cmp	r3, #15
 8011e5e:	d80a      	bhi.n	8011e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011e60:	2200      	movs	r2, #0
 8011e62:	6879      	ldr	r1, [r7, #4]
 8011e64:	f04f 30ff 	mov.w	r0, #4294967295
 8011e68:	f000 f911 	bl	801208e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8011e6c:	4a06      	ldr	r2, [pc, #24]	; (8011e88 <HAL_InitTick+0x5c>)
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8011e72:	2300      	movs	r3, #0
 8011e74:	e000      	b.n	8011e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8011e76:	2301      	movs	r3, #1
}
 8011e78:	4618      	mov	r0, r3
 8011e7a:	3708      	adds	r7, #8
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}
 8011e80:	20000018 	.word	0x20000018
 8011e84:	20000084 	.word	0x20000084
 8011e88:	20000080 	.word	0x20000080

08011e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011e90:	4b06      	ldr	r3, [pc, #24]	; (8011eac <HAL_IncTick+0x20>)
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	461a      	mov	r2, r3
 8011e96:	4b06      	ldr	r3, [pc, #24]	; (8011eb0 <HAL_IncTick+0x24>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	4413      	add	r3, r2
 8011e9c:	4a04      	ldr	r2, [pc, #16]	; (8011eb0 <HAL_IncTick+0x24>)
 8011e9e:	6013      	str	r3, [r2, #0]
}
 8011ea0:	bf00      	nop
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea8:	4770      	bx	lr
 8011eaa:	bf00      	nop
 8011eac:	20000084 	.word	0x20000084
 8011eb0:	20007478 	.word	0x20007478

08011eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011eb4:	b480      	push	{r7}
 8011eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8011eb8:	4b03      	ldr	r3, [pc, #12]	; (8011ec8 <HAL_GetTick+0x14>)
 8011eba:	681b      	ldr	r3, [r3, #0]
}
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec4:	4770      	bx	lr
 8011ec6:	bf00      	nop
 8011ec8:	20007478 	.word	0x20007478

08011ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b084      	sub	sp, #16
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011ed4:	f7ff ffee 	bl	8011eb4 <HAL_GetTick>
 8011ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ee4:	d005      	beq.n	8011ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8011ee6:	4b0a      	ldr	r3, [pc, #40]	; (8011f10 <HAL_Delay+0x44>)
 8011ee8:	781b      	ldrb	r3, [r3, #0]
 8011eea:	461a      	mov	r2, r3
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	4413      	add	r3, r2
 8011ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8011ef2:	bf00      	nop
 8011ef4:	f7ff ffde 	bl	8011eb4 <HAL_GetTick>
 8011ef8:	4602      	mov	r2, r0
 8011efa:	68bb      	ldr	r3, [r7, #8]
 8011efc:	1ad3      	subs	r3, r2, r3
 8011efe:	68fa      	ldr	r2, [r7, #12]
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d8f7      	bhi.n	8011ef4 <HAL_Delay+0x28>
  {
  }
}
 8011f04:	bf00      	nop
 8011f06:	bf00      	nop
 8011f08:	3710      	adds	r7, #16
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}
 8011f0e:	bf00      	nop
 8011f10:	20000084 	.word	0x20000084

08011f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011f14:	b480      	push	{r7}
 8011f16:	b085      	sub	sp, #20
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f003 0307 	and.w	r3, r3, #7
 8011f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011f24:	4b0c      	ldr	r3, [pc, #48]	; (8011f58 <__NVIC_SetPriorityGrouping+0x44>)
 8011f26:	68db      	ldr	r3, [r3, #12]
 8011f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011f2a:	68ba      	ldr	r2, [r7, #8]
 8011f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011f30:	4013      	ands	r3, r2
 8011f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011f46:	4a04      	ldr	r2, [pc, #16]	; (8011f58 <__NVIC_SetPriorityGrouping+0x44>)
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	60d3      	str	r3, [r2, #12]
}
 8011f4c:	bf00      	nop
 8011f4e:	3714      	adds	r7, #20
 8011f50:	46bd      	mov	sp, r7
 8011f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f56:	4770      	bx	lr
 8011f58:	e000ed00 	.word	0xe000ed00

08011f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011f5c:	b480      	push	{r7}
 8011f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011f60:	4b04      	ldr	r3, [pc, #16]	; (8011f74 <__NVIC_GetPriorityGrouping+0x18>)
 8011f62:	68db      	ldr	r3, [r3, #12]
 8011f64:	0a1b      	lsrs	r3, r3, #8
 8011f66:	f003 0307 	and.w	r3, r3, #7
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f72:	4770      	bx	lr
 8011f74:	e000ed00 	.word	0xe000ed00

08011f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011f78:	b480      	push	{r7}
 8011f7a:	b083      	sub	sp, #12
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	4603      	mov	r3, r0
 8011f80:	6039      	str	r1, [r7, #0]
 8011f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	db0a      	blt.n	8011fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	b2da      	uxtb	r2, r3
 8011f90:	490c      	ldr	r1, [pc, #48]	; (8011fc4 <__NVIC_SetPriority+0x4c>)
 8011f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f96:	0112      	lsls	r2, r2, #4
 8011f98:	b2d2      	uxtb	r2, r2
 8011f9a:	440b      	add	r3, r1
 8011f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011fa0:	e00a      	b.n	8011fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	b2da      	uxtb	r2, r3
 8011fa6:	4908      	ldr	r1, [pc, #32]	; (8011fc8 <__NVIC_SetPriority+0x50>)
 8011fa8:	79fb      	ldrb	r3, [r7, #7]
 8011faa:	f003 030f 	and.w	r3, r3, #15
 8011fae:	3b04      	subs	r3, #4
 8011fb0:	0112      	lsls	r2, r2, #4
 8011fb2:	b2d2      	uxtb	r2, r2
 8011fb4:	440b      	add	r3, r1
 8011fb6:	761a      	strb	r2, [r3, #24]
}
 8011fb8:	bf00      	nop
 8011fba:	370c      	adds	r7, #12
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc2:	4770      	bx	lr
 8011fc4:	e000e100 	.word	0xe000e100
 8011fc8:	e000ed00 	.word	0xe000ed00

08011fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011fcc:	b480      	push	{r7}
 8011fce:	b089      	sub	sp, #36	; 0x24
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	60f8      	str	r0, [r7, #12]
 8011fd4:	60b9      	str	r1, [r7, #8]
 8011fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	f003 0307 	and.w	r3, r3, #7
 8011fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011fe0:	69fb      	ldr	r3, [r7, #28]
 8011fe2:	f1c3 0307 	rsb	r3, r3, #7
 8011fe6:	2b04      	cmp	r3, #4
 8011fe8:	bf28      	it	cs
 8011fea:	2304      	movcs	r3, #4
 8011fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011fee:	69fb      	ldr	r3, [r7, #28]
 8011ff0:	3304      	adds	r3, #4
 8011ff2:	2b06      	cmp	r3, #6
 8011ff4:	d902      	bls.n	8011ffc <NVIC_EncodePriority+0x30>
 8011ff6:	69fb      	ldr	r3, [r7, #28]
 8011ff8:	3b03      	subs	r3, #3
 8011ffa:	e000      	b.n	8011ffe <NVIC_EncodePriority+0x32>
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012000:	f04f 32ff 	mov.w	r2, #4294967295
 8012004:	69bb      	ldr	r3, [r7, #24]
 8012006:	fa02 f303 	lsl.w	r3, r2, r3
 801200a:	43da      	mvns	r2, r3
 801200c:	68bb      	ldr	r3, [r7, #8]
 801200e:	401a      	ands	r2, r3
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012014:	f04f 31ff 	mov.w	r1, #4294967295
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	fa01 f303 	lsl.w	r3, r1, r3
 801201e:	43d9      	mvns	r1, r3
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012024:	4313      	orrs	r3, r2
         );
}
 8012026:	4618      	mov	r0, r3
 8012028:	3724      	adds	r7, #36	; 0x24
 801202a:	46bd      	mov	sp, r7
 801202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012030:	4770      	bx	lr
	...

08012034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b082      	sub	sp, #8
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	3b01      	subs	r3, #1
 8012040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012044:	d301      	bcc.n	801204a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8012046:	2301      	movs	r3, #1
 8012048:	e00f      	b.n	801206a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801204a:	4a0a      	ldr	r2, [pc, #40]	; (8012074 <SysTick_Config+0x40>)
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	3b01      	subs	r3, #1
 8012050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8012052:	210f      	movs	r1, #15
 8012054:	f04f 30ff 	mov.w	r0, #4294967295
 8012058:	f7ff ff8e 	bl	8011f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801205c:	4b05      	ldr	r3, [pc, #20]	; (8012074 <SysTick_Config+0x40>)
 801205e:	2200      	movs	r2, #0
 8012060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8012062:	4b04      	ldr	r3, [pc, #16]	; (8012074 <SysTick_Config+0x40>)
 8012064:	2207      	movs	r2, #7
 8012066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8012068:	2300      	movs	r3, #0
}
 801206a:	4618      	mov	r0, r3
 801206c:	3708      	adds	r7, #8
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}
 8012072:	bf00      	nop
 8012074:	e000e010 	.word	0xe000e010

08012078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f7ff ff47 	bl	8011f14 <__NVIC_SetPriorityGrouping>
}
 8012086:	bf00      	nop
 8012088:	3708      	adds	r7, #8
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}

0801208e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801208e:	b580      	push	{r7, lr}
 8012090:	b086      	sub	sp, #24
 8012092:	af00      	add	r7, sp, #0
 8012094:	4603      	mov	r3, r0
 8012096:	60b9      	str	r1, [r7, #8]
 8012098:	607a      	str	r2, [r7, #4]
 801209a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801209c:	2300      	movs	r3, #0
 801209e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80120a0:	f7ff ff5c 	bl	8011f5c <__NVIC_GetPriorityGrouping>
 80120a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80120a6:	687a      	ldr	r2, [r7, #4]
 80120a8:	68b9      	ldr	r1, [r7, #8]
 80120aa:	6978      	ldr	r0, [r7, #20]
 80120ac:	f7ff ff8e 	bl	8011fcc <NVIC_EncodePriority>
 80120b0:	4602      	mov	r2, r0
 80120b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120b6:	4611      	mov	r1, r2
 80120b8:	4618      	mov	r0, r3
 80120ba:	f7ff ff5d 	bl	8011f78 <__NVIC_SetPriority>
}
 80120be:	bf00      	nop
 80120c0:	3718      	adds	r7, #24
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}

080120c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80120c6:	b580      	push	{r7, lr}
 80120c8:	b082      	sub	sp, #8
 80120ca:	af00      	add	r7, sp, #0
 80120cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f7ff ffb0 	bl	8012034 <SysTick_Config>
 80120d4:	4603      	mov	r3, r0
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	3708      	adds	r7, #8
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}
	...

080120e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80120e0:	b480      	push	{r7}
 80120e2:	b089      	sub	sp, #36	; 0x24
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80120ea:	2300      	movs	r3, #0
 80120ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80120ee:	2300      	movs	r3, #0
 80120f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80120f2:	2300      	movs	r3, #0
 80120f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80120f6:	2300      	movs	r3, #0
 80120f8:	61fb      	str	r3, [r7, #28]
 80120fa:	e159      	b.n	80123b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80120fc:	2201      	movs	r2, #1
 80120fe:	69fb      	ldr	r3, [r7, #28]
 8012100:	fa02 f303 	lsl.w	r3, r2, r3
 8012104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	697a      	ldr	r2, [r7, #20]
 801210c:	4013      	ands	r3, r2
 801210e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8012110:	693a      	ldr	r2, [r7, #16]
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	429a      	cmp	r2, r3
 8012116:	f040 8148 	bne.w	80123aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	685b      	ldr	r3, [r3, #4]
 801211e:	f003 0303 	and.w	r3, r3, #3
 8012122:	2b01      	cmp	r3, #1
 8012124:	d005      	beq.n	8012132 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	685b      	ldr	r3, [r3, #4]
 801212a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801212e:	2b02      	cmp	r3, #2
 8012130:	d130      	bne.n	8012194 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	689b      	ldr	r3, [r3, #8]
 8012136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012138:	69fb      	ldr	r3, [r7, #28]
 801213a:	005b      	lsls	r3, r3, #1
 801213c:	2203      	movs	r2, #3
 801213e:	fa02 f303 	lsl.w	r3, r2, r3
 8012142:	43db      	mvns	r3, r3
 8012144:	69ba      	ldr	r2, [r7, #24]
 8012146:	4013      	ands	r3, r2
 8012148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801214a:	683b      	ldr	r3, [r7, #0]
 801214c:	68da      	ldr	r2, [r3, #12]
 801214e:	69fb      	ldr	r3, [r7, #28]
 8012150:	005b      	lsls	r3, r3, #1
 8012152:	fa02 f303 	lsl.w	r3, r2, r3
 8012156:	69ba      	ldr	r2, [r7, #24]
 8012158:	4313      	orrs	r3, r2
 801215a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	69ba      	ldr	r2, [r7, #24]
 8012160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	685b      	ldr	r3, [r3, #4]
 8012166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012168:	2201      	movs	r2, #1
 801216a:	69fb      	ldr	r3, [r7, #28]
 801216c:	fa02 f303 	lsl.w	r3, r2, r3
 8012170:	43db      	mvns	r3, r3
 8012172:	69ba      	ldr	r2, [r7, #24]
 8012174:	4013      	ands	r3, r2
 8012176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	685b      	ldr	r3, [r3, #4]
 801217c:	091b      	lsrs	r3, r3, #4
 801217e:	f003 0201 	and.w	r2, r3, #1
 8012182:	69fb      	ldr	r3, [r7, #28]
 8012184:	fa02 f303 	lsl.w	r3, r2, r3
 8012188:	69ba      	ldr	r2, [r7, #24]
 801218a:	4313      	orrs	r3, r2
 801218c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	69ba      	ldr	r2, [r7, #24]
 8012192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	685b      	ldr	r3, [r3, #4]
 8012198:	f003 0303 	and.w	r3, r3, #3
 801219c:	2b03      	cmp	r3, #3
 801219e:	d017      	beq.n	80121d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	68db      	ldr	r3, [r3, #12]
 80121a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80121a6:	69fb      	ldr	r3, [r7, #28]
 80121a8:	005b      	lsls	r3, r3, #1
 80121aa:	2203      	movs	r2, #3
 80121ac:	fa02 f303 	lsl.w	r3, r2, r3
 80121b0:	43db      	mvns	r3, r3
 80121b2:	69ba      	ldr	r2, [r7, #24]
 80121b4:	4013      	ands	r3, r2
 80121b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	689a      	ldr	r2, [r3, #8]
 80121bc:	69fb      	ldr	r3, [r7, #28]
 80121be:	005b      	lsls	r3, r3, #1
 80121c0:	fa02 f303 	lsl.w	r3, r2, r3
 80121c4:	69ba      	ldr	r2, [r7, #24]
 80121c6:	4313      	orrs	r3, r2
 80121c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	69ba      	ldr	r2, [r7, #24]
 80121ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	685b      	ldr	r3, [r3, #4]
 80121d4:	f003 0303 	and.w	r3, r3, #3
 80121d8:	2b02      	cmp	r3, #2
 80121da:	d123      	bne.n	8012224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80121dc:	69fb      	ldr	r3, [r7, #28]
 80121de:	08da      	lsrs	r2, r3, #3
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	3208      	adds	r2, #8
 80121e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80121ea:	69fb      	ldr	r3, [r7, #28]
 80121ec:	f003 0307 	and.w	r3, r3, #7
 80121f0:	009b      	lsls	r3, r3, #2
 80121f2:	220f      	movs	r2, #15
 80121f4:	fa02 f303 	lsl.w	r3, r2, r3
 80121f8:	43db      	mvns	r3, r3
 80121fa:	69ba      	ldr	r2, [r7, #24]
 80121fc:	4013      	ands	r3, r2
 80121fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012200:	683b      	ldr	r3, [r7, #0]
 8012202:	691a      	ldr	r2, [r3, #16]
 8012204:	69fb      	ldr	r3, [r7, #28]
 8012206:	f003 0307 	and.w	r3, r3, #7
 801220a:	009b      	lsls	r3, r3, #2
 801220c:	fa02 f303 	lsl.w	r3, r2, r3
 8012210:	69ba      	ldr	r2, [r7, #24]
 8012212:	4313      	orrs	r3, r2
 8012214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012216:	69fb      	ldr	r3, [r7, #28]
 8012218:	08da      	lsrs	r2, r3, #3
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	3208      	adds	r2, #8
 801221e:	69b9      	ldr	r1, [r7, #24]
 8012220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801222a:	69fb      	ldr	r3, [r7, #28]
 801222c:	005b      	lsls	r3, r3, #1
 801222e:	2203      	movs	r2, #3
 8012230:	fa02 f303 	lsl.w	r3, r2, r3
 8012234:	43db      	mvns	r3, r3
 8012236:	69ba      	ldr	r2, [r7, #24]
 8012238:	4013      	ands	r3, r2
 801223a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	685b      	ldr	r3, [r3, #4]
 8012240:	f003 0203 	and.w	r2, r3, #3
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	005b      	lsls	r3, r3, #1
 8012248:	fa02 f303 	lsl.w	r3, r2, r3
 801224c:	69ba      	ldr	r2, [r7, #24]
 801224e:	4313      	orrs	r3, r2
 8012250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	69ba      	ldr	r2, [r7, #24]
 8012256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	685b      	ldr	r3, [r3, #4]
 801225c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012260:	2b00      	cmp	r3, #0
 8012262:	f000 80a2 	beq.w	80123aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012266:	2300      	movs	r3, #0
 8012268:	60fb      	str	r3, [r7, #12]
 801226a:	4b57      	ldr	r3, [pc, #348]	; (80123c8 <HAL_GPIO_Init+0x2e8>)
 801226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801226e:	4a56      	ldr	r2, [pc, #344]	; (80123c8 <HAL_GPIO_Init+0x2e8>)
 8012270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012274:	6453      	str	r3, [r2, #68]	; 0x44
 8012276:	4b54      	ldr	r3, [pc, #336]	; (80123c8 <HAL_GPIO_Init+0x2e8>)
 8012278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801227a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801227e:	60fb      	str	r3, [r7, #12]
 8012280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012282:	4a52      	ldr	r2, [pc, #328]	; (80123cc <HAL_GPIO_Init+0x2ec>)
 8012284:	69fb      	ldr	r3, [r7, #28]
 8012286:	089b      	lsrs	r3, r3, #2
 8012288:	3302      	adds	r3, #2
 801228a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012290:	69fb      	ldr	r3, [r7, #28]
 8012292:	f003 0303 	and.w	r3, r3, #3
 8012296:	009b      	lsls	r3, r3, #2
 8012298:	220f      	movs	r2, #15
 801229a:	fa02 f303 	lsl.w	r3, r2, r3
 801229e:	43db      	mvns	r3, r3
 80122a0:	69ba      	ldr	r2, [r7, #24]
 80122a2:	4013      	ands	r3, r2
 80122a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	4a49      	ldr	r2, [pc, #292]	; (80123d0 <HAL_GPIO_Init+0x2f0>)
 80122aa:	4293      	cmp	r3, r2
 80122ac:	d019      	beq.n	80122e2 <HAL_GPIO_Init+0x202>
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	4a48      	ldr	r2, [pc, #288]	; (80123d4 <HAL_GPIO_Init+0x2f4>)
 80122b2:	4293      	cmp	r3, r2
 80122b4:	d013      	beq.n	80122de <HAL_GPIO_Init+0x1fe>
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	4a47      	ldr	r2, [pc, #284]	; (80123d8 <HAL_GPIO_Init+0x2f8>)
 80122ba:	4293      	cmp	r3, r2
 80122bc:	d00d      	beq.n	80122da <HAL_GPIO_Init+0x1fa>
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	4a46      	ldr	r2, [pc, #280]	; (80123dc <HAL_GPIO_Init+0x2fc>)
 80122c2:	4293      	cmp	r3, r2
 80122c4:	d007      	beq.n	80122d6 <HAL_GPIO_Init+0x1f6>
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	4a45      	ldr	r2, [pc, #276]	; (80123e0 <HAL_GPIO_Init+0x300>)
 80122ca:	4293      	cmp	r3, r2
 80122cc:	d101      	bne.n	80122d2 <HAL_GPIO_Init+0x1f2>
 80122ce:	2304      	movs	r3, #4
 80122d0:	e008      	b.n	80122e4 <HAL_GPIO_Init+0x204>
 80122d2:	2307      	movs	r3, #7
 80122d4:	e006      	b.n	80122e4 <HAL_GPIO_Init+0x204>
 80122d6:	2303      	movs	r3, #3
 80122d8:	e004      	b.n	80122e4 <HAL_GPIO_Init+0x204>
 80122da:	2302      	movs	r3, #2
 80122dc:	e002      	b.n	80122e4 <HAL_GPIO_Init+0x204>
 80122de:	2301      	movs	r3, #1
 80122e0:	e000      	b.n	80122e4 <HAL_GPIO_Init+0x204>
 80122e2:	2300      	movs	r3, #0
 80122e4:	69fa      	ldr	r2, [r7, #28]
 80122e6:	f002 0203 	and.w	r2, r2, #3
 80122ea:	0092      	lsls	r2, r2, #2
 80122ec:	4093      	lsls	r3, r2
 80122ee:	69ba      	ldr	r2, [r7, #24]
 80122f0:	4313      	orrs	r3, r2
 80122f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80122f4:	4935      	ldr	r1, [pc, #212]	; (80123cc <HAL_GPIO_Init+0x2ec>)
 80122f6:	69fb      	ldr	r3, [r7, #28]
 80122f8:	089b      	lsrs	r3, r3, #2
 80122fa:	3302      	adds	r3, #2
 80122fc:	69ba      	ldr	r2, [r7, #24]
 80122fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012302:	4b38      	ldr	r3, [pc, #224]	; (80123e4 <HAL_GPIO_Init+0x304>)
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012308:	693b      	ldr	r3, [r7, #16]
 801230a:	43db      	mvns	r3, r3
 801230c:	69ba      	ldr	r2, [r7, #24]
 801230e:	4013      	ands	r3, r2
 8012310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	685b      	ldr	r3, [r3, #4]
 8012316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801231a:	2b00      	cmp	r3, #0
 801231c:	d003      	beq.n	8012326 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801231e:	69ba      	ldr	r2, [r7, #24]
 8012320:	693b      	ldr	r3, [r7, #16]
 8012322:	4313      	orrs	r3, r2
 8012324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8012326:	4a2f      	ldr	r2, [pc, #188]	; (80123e4 <HAL_GPIO_Init+0x304>)
 8012328:	69bb      	ldr	r3, [r7, #24]
 801232a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 801232c:	4b2d      	ldr	r3, [pc, #180]	; (80123e4 <HAL_GPIO_Init+0x304>)
 801232e:	685b      	ldr	r3, [r3, #4]
 8012330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	43db      	mvns	r3, r3
 8012336:	69ba      	ldr	r2, [r7, #24]
 8012338:	4013      	ands	r3, r2
 801233a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	685b      	ldr	r3, [r3, #4]
 8012340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012344:	2b00      	cmp	r3, #0
 8012346:	d003      	beq.n	8012350 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8012348:	69ba      	ldr	r2, [r7, #24]
 801234a:	693b      	ldr	r3, [r7, #16]
 801234c:	4313      	orrs	r3, r2
 801234e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012350:	4a24      	ldr	r2, [pc, #144]	; (80123e4 <HAL_GPIO_Init+0x304>)
 8012352:	69bb      	ldr	r3, [r7, #24]
 8012354:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8012356:	4b23      	ldr	r3, [pc, #140]	; (80123e4 <HAL_GPIO_Init+0x304>)
 8012358:	689b      	ldr	r3, [r3, #8]
 801235a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801235c:	693b      	ldr	r3, [r7, #16]
 801235e:	43db      	mvns	r3, r3
 8012360:	69ba      	ldr	r2, [r7, #24]
 8012362:	4013      	ands	r3, r2
 8012364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	685b      	ldr	r3, [r3, #4]
 801236a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801236e:	2b00      	cmp	r3, #0
 8012370:	d003      	beq.n	801237a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8012372:	69ba      	ldr	r2, [r7, #24]
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	4313      	orrs	r3, r2
 8012378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801237a:	4a1a      	ldr	r2, [pc, #104]	; (80123e4 <HAL_GPIO_Init+0x304>)
 801237c:	69bb      	ldr	r3, [r7, #24]
 801237e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012380:	4b18      	ldr	r3, [pc, #96]	; (80123e4 <HAL_GPIO_Init+0x304>)
 8012382:	68db      	ldr	r3, [r3, #12]
 8012384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012386:	693b      	ldr	r3, [r7, #16]
 8012388:	43db      	mvns	r3, r3
 801238a:	69ba      	ldr	r2, [r7, #24]
 801238c:	4013      	ands	r3, r2
 801238e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	685b      	ldr	r3, [r3, #4]
 8012394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012398:	2b00      	cmp	r3, #0
 801239a:	d003      	beq.n	80123a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801239c:	69ba      	ldr	r2, [r7, #24]
 801239e:	693b      	ldr	r3, [r7, #16]
 80123a0:	4313      	orrs	r3, r2
 80123a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80123a4:	4a0f      	ldr	r2, [pc, #60]	; (80123e4 <HAL_GPIO_Init+0x304>)
 80123a6:	69bb      	ldr	r3, [r7, #24]
 80123a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80123aa:	69fb      	ldr	r3, [r7, #28]
 80123ac:	3301      	adds	r3, #1
 80123ae:	61fb      	str	r3, [r7, #28]
 80123b0:	69fb      	ldr	r3, [r7, #28]
 80123b2:	2b0f      	cmp	r3, #15
 80123b4:	f67f aea2 	bls.w	80120fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80123b8:	bf00      	nop
 80123ba:	bf00      	nop
 80123bc:	3724      	adds	r7, #36	; 0x24
 80123be:	46bd      	mov	sp, r7
 80123c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c4:	4770      	bx	lr
 80123c6:	bf00      	nop
 80123c8:	40023800 	.word	0x40023800
 80123cc:	40013800 	.word	0x40013800
 80123d0:	40020000 	.word	0x40020000
 80123d4:	40020400 	.word	0x40020400
 80123d8:	40020800 	.word	0x40020800
 80123dc:	40020c00 	.word	0x40020c00
 80123e0:	40021000 	.word	0x40021000
 80123e4:	40013c00 	.word	0x40013c00

080123e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80123e8:	b480      	push	{r7}
 80123ea:	b087      	sub	sp, #28
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
 80123f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80123f2:	2300      	movs	r3, #0
 80123f4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80123f6:	2300      	movs	r3, #0
 80123f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80123fa:	2300      	movs	r3, #0
 80123fc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80123fe:	2300      	movs	r3, #0
 8012400:	617b      	str	r3, [r7, #20]
 8012402:	e0bb      	b.n	801257c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012404:	2201      	movs	r2, #1
 8012406:	697b      	ldr	r3, [r7, #20]
 8012408:	fa02 f303 	lsl.w	r3, r2, r3
 801240c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801240e:	683a      	ldr	r2, [r7, #0]
 8012410:	693b      	ldr	r3, [r7, #16]
 8012412:	4013      	ands	r3, r2
 8012414:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8012416:	68fa      	ldr	r2, [r7, #12]
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	429a      	cmp	r2, r3
 801241c:	f040 80ab 	bne.w	8012576 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8012420:	4a5c      	ldr	r2, [pc, #368]	; (8012594 <HAL_GPIO_DeInit+0x1ac>)
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	089b      	lsrs	r3, r3, #2
 8012426:	3302      	adds	r3, #2
 8012428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801242c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	f003 0303 	and.w	r3, r3, #3
 8012434:	009b      	lsls	r3, r3, #2
 8012436:	220f      	movs	r2, #15
 8012438:	fa02 f303 	lsl.w	r3, r2, r3
 801243c:	68ba      	ldr	r2, [r7, #8]
 801243e:	4013      	ands	r3, r2
 8012440:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	4a54      	ldr	r2, [pc, #336]	; (8012598 <HAL_GPIO_DeInit+0x1b0>)
 8012446:	4293      	cmp	r3, r2
 8012448:	d019      	beq.n	801247e <HAL_GPIO_DeInit+0x96>
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	4a53      	ldr	r2, [pc, #332]	; (801259c <HAL_GPIO_DeInit+0x1b4>)
 801244e:	4293      	cmp	r3, r2
 8012450:	d013      	beq.n	801247a <HAL_GPIO_DeInit+0x92>
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	4a52      	ldr	r2, [pc, #328]	; (80125a0 <HAL_GPIO_DeInit+0x1b8>)
 8012456:	4293      	cmp	r3, r2
 8012458:	d00d      	beq.n	8012476 <HAL_GPIO_DeInit+0x8e>
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	4a51      	ldr	r2, [pc, #324]	; (80125a4 <HAL_GPIO_DeInit+0x1bc>)
 801245e:	4293      	cmp	r3, r2
 8012460:	d007      	beq.n	8012472 <HAL_GPIO_DeInit+0x8a>
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	4a50      	ldr	r2, [pc, #320]	; (80125a8 <HAL_GPIO_DeInit+0x1c0>)
 8012466:	4293      	cmp	r3, r2
 8012468:	d101      	bne.n	801246e <HAL_GPIO_DeInit+0x86>
 801246a:	2304      	movs	r3, #4
 801246c:	e008      	b.n	8012480 <HAL_GPIO_DeInit+0x98>
 801246e:	2307      	movs	r3, #7
 8012470:	e006      	b.n	8012480 <HAL_GPIO_DeInit+0x98>
 8012472:	2303      	movs	r3, #3
 8012474:	e004      	b.n	8012480 <HAL_GPIO_DeInit+0x98>
 8012476:	2302      	movs	r3, #2
 8012478:	e002      	b.n	8012480 <HAL_GPIO_DeInit+0x98>
 801247a:	2301      	movs	r3, #1
 801247c:	e000      	b.n	8012480 <HAL_GPIO_DeInit+0x98>
 801247e:	2300      	movs	r3, #0
 8012480:	697a      	ldr	r2, [r7, #20]
 8012482:	f002 0203 	and.w	r2, r2, #3
 8012486:	0092      	lsls	r2, r2, #2
 8012488:	4093      	lsls	r3, r2
 801248a:	68ba      	ldr	r2, [r7, #8]
 801248c:	429a      	cmp	r2, r3
 801248e:	d132      	bne.n	80124f6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8012490:	4b46      	ldr	r3, [pc, #280]	; (80125ac <HAL_GPIO_DeInit+0x1c4>)
 8012492:	681a      	ldr	r2, [r3, #0]
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	43db      	mvns	r3, r3
 8012498:	4944      	ldr	r1, [pc, #272]	; (80125ac <HAL_GPIO_DeInit+0x1c4>)
 801249a:	4013      	ands	r3, r2
 801249c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801249e:	4b43      	ldr	r3, [pc, #268]	; (80125ac <HAL_GPIO_DeInit+0x1c4>)
 80124a0:	685a      	ldr	r2, [r3, #4]
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	43db      	mvns	r3, r3
 80124a6:	4941      	ldr	r1, [pc, #260]	; (80125ac <HAL_GPIO_DeInit+0x1c4>)
 80124a8:	4013      	ands	r3, r2
 80124aa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80124ac:	4b3f      	ldr	r3, [pc, #252]	; (80125ac <HAL_GPIO_DeInit+0x1c4>)
 80124ae:	689a      	ldr	r2, [r3, #8]
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	43db      	mvns	r3, r3
 80124b4:	493d      	ldr	r1, [pc, #244]	; (80125ac <HAL_GPIO_DeInit+0x1c4>)
 80124b6:	4013      	ands	r3, r2
 80124b8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80124ba:	4b3c      	ldr	r3, [pc, #240]	; (80125ac <HAL_GPIO_DeInit+0x1c4>)
 80124bc:	68da      	ldr	r2, [r3, #12]
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	43db      	mvns	r3, r3
 80124c2:	493a      	ldr	r1, [pc, #232]	; (80125ac <HAL_GPIO_DeInit+0x1c4>)
 80124c4:	4013      	ands	r3, r2
 80124c6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80124c8:	697b      	ldr	r3, [r7, #20]
 80124ca:	f003 0303 	and.w	r3, r3, #3
 80124ce:	009b      	lsls	r3, r3, #2
 80124d0:	220f      	movs	r2, #15
 80124d2:	fa02 f303 	lsl.w	r3, r2, r3
 80124d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80124d8:	4a2e      	ldr	r2, [pc, #184]	; (8012594 <HAL_GPIO_DeInit+0x1ac>)
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	089b      	lsrs	r3, r3, #2
 80124de:	3302      	adds	r3, #2
 80124e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	43da      	mvns	r2, r3
 80124e8:	482a      	ldr	r0, [pc, #168]	; (8012594 <HAL_GPIO_DeInit+0x1ac>)
 80124ea:	697b      	ldr	r3, [r7, #20]
 80124ec:	089b      	lsrs	r3, r3, #2
 80124ee:	400a      	ands	r2, r1
 80124f0:	3302      	adds	r3, #2
 80124f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681a      	ldr	r2, [r3, #0]
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	005b      	lsls	r3, r3, #1
 80124fe:	2103      	movs	r1, #3
 8012500:	fa01 f303 	lsl.w	r3, r1, r3
 8012504:	43db      	mvns	r3, r3
 8012506:	401a      	ands	r2, r3
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	08da      	lsrs	r2, r3, #3
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	3208      	adds	r2, #8
 8012514:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012518:	697b      	ldr	r3, [r7, #20]
 801251a:	f003 0307 	and.w	r3, r3, #7
 801251e:	009b      	lsls	r3, r3, #2
 8012520:	220f      	movs	r2, #15
 8012522:	fa02 f303 	lsl.w	r3, r2, r3
 8012526:	43db      	mvns	r3, r3
 8012528:	697a      	ldr	r2, [r7, #20]
 801252a:	08d2      	lsrs	r2, r2, #3
 801252c:	4019      	ands	r1, r3
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	3208      	adds	r2, #8
 8012532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	68da      	ldr	r2, [r3, #12]
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	005b      	lsls	r3, r3, #1
 801253e:	2103      	movs	r1, #3
 8012540:	fa01 f303 	lsl.w	r3, r1, r3
 8012544:	43db      	mvns	r3, r3
 8012546:	401a      	ands	r2, r3
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	685a      	ldr	r2, [r3, #4]
 8012550:	2101      	movs	r1, #1
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	fa01 f303 	lsl.w	r3, r1, r3
 8012558:	43db      	mvns	r3, r3
 801255a:	401a      	ands	r2, r3
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	689a      	ldr	r2, [r3, #8]
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	005b      	lsls	r3, r3, #1
 8012568:	2103      	movs	r1, #3
 801256a:	fa01 f303 	lsl.w	r3, r1, r3
 801256e:	43db      	mvns	r3, r3
 8012570:	401a      	ands	r2, r3
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	3301      	adds	r3, #1
 801257a:	617b      	str	r3, [r7, #20]
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	2b0f      	cmp	r3, #15
 8012580:	f67f af40 	bls.w	8012404 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8012584:	bf00      	nop
 8012586:	bf00      	nop
 8012588:	371c      	adds	r7, #28
 801258a:	46bd      	mov	sp, r7
 801258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012590:	4770      	bx	lr
 8012592:	bf00      	nop
 8012594:	40013800 	.word	0x40013800
 8012598:	40020000 	.word	0x40020000
 801259c:	40020400 	.word	0x40020400
 80125a0:	40020800 	.word	0x40020800
 80125a4:	40020c00 	.word	0x40020c00
 80125a8:	40021000 	.word	0x40021000
 80125ac:	40013c00 	.word	0x40013c00

080125b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80125b0:	b480      	push	{r7}
 80125b2:	b085      	sub	sp, #20
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	460b      	mov	r3, r1
 80125ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	691a      	ldr	r2, [r3, #16]
 80125c0:	887b      	ldrh	r3, [r7, #2]
 80125c2:	4013      	ands	r3, r2
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d002      	beq.n	80125ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80125c8:	2301      	movs	r3, #1
 80125ca:	73fb      	strb	r3, [r7, #15]
 80125cc:	e001      	b.n	80125d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80125ce:	2300      	movs	r3, #0
 80125d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80125d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80125d4:	4618      	mov	r0, r3
 80125d6:	3714      	adds	r7, #20
 80125d8:	46bd      	mov	sp, r7
 80125da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125de:	4770      	bx	lr

080125e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80125e0:	b480      	push	{r7}
 80125e2:	b083      	sub	sp, #12
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
 80125e8:	460b      	mov	r3, r1
 80125ea:	807b      	strh	r3, [r7, #2]
 80125ec:	4613      	mov	r3, r2
 80125ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80125f0:	787b      	ldrb	r3, [r7, #1]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d003      	beq.n	80125fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80125f6:	887a      	ldrh	r2, [r7, #2]
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80125fc:	e003      	b.n	8012606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80125fe:	887b      	ldrh	r3, [r7, #2]
 8012600:	041a      	lsls	r2, r3, #16
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	619a      	str	r2, [r3, #24]
}
 8012606:	bf00      	nop
 8012608:	370c      	adds	r7, #12
 801260a:	46bd      	mov	sp, r7
 801260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012610:	4770      	bx	lr
	...

08012614 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b084      	sub	sp, #16
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d101      	bne.n	8012626 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8012622:	2301      	movs	r3, #1
 8012624:	e12b      	b.n	801287e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801262c:	b2db      	uxtb	r3, r3
 801262e:	2b00      	cmp	r3, #0
 8012630:	d106      	bne.n	8012640 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2200      	movs	r2, #0
 8012636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f000 f95d 	bl	80128fa <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2224      	movs	r2, #36	; 0x24
 8012644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	681a      	ldr	r2, [r3, #0]
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	f022 0201 	bic.w	r2, r2, #1
 8012656:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	681a      	ldr	r2, [r3, #0]
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012666:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	681a      	ldr	r2, [r3, #0]
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012676:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8012678:	f001 fc0c 	bl	8013e94 <HAL_RCC_GetPCLK1Freq>
 801267c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	685b      	ldr	r3, [r3, #4]
 8012682:	4a81      	ldr	r2, [pc, #516]	; (8012888 <HAL_I2C_Init+0x274>)
 8012684:	4293      	cmp	r3, r2
 8012686:	d807      	bhi.n	8012698 <HAL_I2C_Init+0x84>
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	4a80      	ldr	r2, [pc, #512]	; (801288c <HAL_I2C_Init+0x278>)
 801268c:	4293      	cmp	r3, r2
 801268e:	bf94      	ite	ls
 8012690:	2301      	movls	r3, #1
 8012692:	2300      	movhi	r3, #0
 8012694:	b2db      	uxtb	r3, r3
 8012696:	e006      	b.n	80126a6 <HAL_I2C_Init+0x92>
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	4a7d      	ldr	r2, [pc, #500]	; (8012890 <HAL_I2C_Init+0x27c>)
 801269c:	4293      	cmp	r3, r2
 801269e:	bf94      	ite	ls
 80126a0:	2301      	movls	r3, #1
 80126a2:	2300      	movhi	r3, #0
 80126a4:	b2db      	uxtb	r3, r3
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d001      	beq.n	80126ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80126aa:	2301      	movs	r3, #1
 80126ac:	e0e7      	b.n	801287e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	4a78      	ldr	r2, [pc, #480]	; (8012894 <HAL_I2C_Init+0x280>)
 80126b2:	fba2 2303 	umull	r2, r3, r2, r3
 80126b6:	0c9b      	lsrs	r3, r3, #18
 80126b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	685b      	ldr	r3, [r3, #4]
 80126c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	68ba      	ldr	r2, [r7, #8]
 80126ca:	430a      	orrs	r2, r1
 80126cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	6a1b      	ldr	r3, [r3, #32]
 80126d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	685b      	ldr	r3, [r3, #4]
 80126dc:	4a6a      	ldr	r2, [pc, #424]	; (8012888 <HAL_I2C_Init+0x274>)
 80126de:	4293      	cmp	r3, r2
 80126e0:	d802      	bhi.n	80126e8 <HAL_I2C_Init+0xd4>
 80126e2:	68bb      	ldr	r3, [r7, #8]
 80126e4:	3301      	adds	r3, #1
 80126e6:	e009      	b.n	80126fc <HAL_I2C_Init+0xe8>
 80126e8:	68bb      	ldr	r3, [r7, #8]
 80126ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80126ee:	fb02 f303 	mul.w	r3, r2, r3
 80126f2:	4a69      	ldr	r2, [pc, #420]	; (8012898 <HAL_I2C_Init+0x284>)
 80126f4:	fba2 2303 	umull	r2, r3, r2, r3
 80126f8:	099b      	lsrs	r3, r3, #6
 80126fa:	3301      	adds	r3, #1
 80126fc:	687a      	ldr	r2, [r7, #4]
 80126fe:	6812      	ldr	r2, [r2, #0]
 8012700:	430b      	orrs	r3, r1
 8012702:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	69db      	ldr	r3, [r3, #28]
 801270a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801270e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	685b      	ldr	r3, [r3, #4]
 8012716:	495c      	ldr	r1, [pc, #368]	; (8012888 <HAL_I2C_Init+0x274>)
 8012718:	428b      	cmp	r3, r1
 801271a:	d819      	bhi.n	8012750 <HAL_I2C_Init+0x13c>
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	1e59      	subs	r1, r3, #1
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	005b      	lsls	r3, r3, #1
 8012726:	fbb1 f3f3 	udiv	r3, r1, r3
 801272a:	1c59      	adds	r1, r3, #1
 801272c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8012730:	400b      	ands	r3, r1
 8012732:	2b00      	cmp	r3, #0
 8012734:	d00a      	beq.n	801274c <HAL_I2C_Init+0x138>
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	1e59      	subs	r1, r3, #1
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	685b      	ldr	r3, [r3, #4]
 801273e:	005b      	lsls	r3, r3, #1
 8012740:	fbb1 f3f3 	udiv	r3, r1, r3
 8012744:	3301      	adds	r3, #1
 8012746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801274a:	e051      	b.n	80127f0 <HAL_I2C_Init+0x1dc>
 801274c:	2304      	movs	r3, #4
 801274e:	e04f      	b.n	80127f0 <HAL_I2C_Init+0x1dc>
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	689b      	ldr	r3, [r3, #8]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d111      	bne.n	801277c <HAL_I2C_Init+0x168>
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	1e58      	subs	r0, r3, #1
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	6859      	ldr	r1, [r3, #4]
 8012760:	460b      	mov	r3, r1
 8012762:	005b      	lsls	r3, r3, #1
 8012764:	440b      	add	r3, r1
 8012766:	fbb0 f3f3 	udiv	r3, r0, r3
 801276a:	3301      	adds	r3, #1
 801276c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012770:	2b00      	cmp	r3, #0
 8012772:	bf0c      	ite	eq
 8012774:	2301      	moveq	r3, #1
 8012776:	2300      	movne	r3, #0
 8012778:	b2db      	uxtb	r3, r3
 801277a:	e012      	b.n	80127a2 <HAL_I2C_Init+0x18e>
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	1e58      	subs	r0, r3, #1
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	6859      	ldr	r1, [r3, #4]
 8012784:	460b      	mov	r3, r1
 8012786:	009b      	lsls	r3, r3, #2
 8012788:	440b      	add	r3, r1
 801278a:	0099      	lsls	r1, r3, #2
 801278c:	440b      	add	r3, r1
 801278e:	fbb0 f3f3 	udiv	r3, r0, r3
 8012792:	3301      	adds	r3, #1
 8012794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012798:	2b00      	cmp	r3, #0
 801279a:	bf0c      	ite	eq
 801279c:	2301      	moveq	r3, #1
 801279e:	2300      	movne	r3, #0
 80127a0:	b2db      	uxtb	r3, r3
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d001      	beq.n	80127aa <HAL_I2C_Init+0x196>
 80127a6:	2301      	movs	r3, #1
 80127a8:	e022      	b.n	80127f0 <HAL_I2C_Init+0x1dc>
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	689b      	ldr	r3, [r3, #8]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d10e      	bne.n	80127d0 <HAL_I2C_Init+0x1bc>
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	1e58      	subs	r0, r3, #1
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	6859      	ldr	r1, [r3, #4]
 80127ba:	460b      	mov	r3, r1
 80127bc:	005b      	lsls	r3, r3, #1
 80127be:	440b      	add	r3, r1
 80127c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80127c4:	3301      	adds	r3, #1
 80127c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80127ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80127ce:	e00f      	b.n	80127f0 <HAL_I2C_Init+0x1dc>
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	1e58      	subs	r0, r3, #1
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	6859      	ldr	r1, [r3, #4]
 80127d8:	460b      	mov	r3, r1
 80127da:	009b      	lsls	r3, r3, #2
 80127dc:	440b      	add	r3, r1
 80127de:	0099      	lsls	r1, r3, #2
 80127e0:	440b      	add	r3, r1
 80127e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80127e6:	3301      	adds	r3, #1
 80127e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80127ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80127f0:	6879      	ldr	r1, [r7, #4]
 80127f2:	6809      	ldr	r1, [r1, #0]
 80127f4:	4313      	orrs	r3, r2
 80127f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	69da      	ldr	r2, [r3, #28]
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6a1b      	ldr	r3, [r3, #32]
 801280a:	431a      	orrs	r2, r3
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	430a      	orrs	r2, r1
 8012812:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	689b      	ldr	r3, [r3, #8]
 801281a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801281e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012822:	687a      	ldr	r2, [r7, #4]
 8012824:	6911      	ldr	r1, [r2, #16]
 8012826:	687a      	ldr	r2, [r7, #4]
 8012828:	68d2      	ldr	r2, [r2, #12]
 801282a:	4311      	orrs	r1, r2
 801282c:	687a      	ldr	r2, [r7, #4]
 801282e:	6812      	ldr	r2, [r2, #0]
 8012830:	430b      	orrs	r3, r1
 8012832:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	68db      	ldr	r3, [r3, #12]
 801283a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	695a      	ldr	r2, [r3, #20]
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	699b      	ldr	r3, [r3, #24]
 8012846:	431a      	orrs	r2, r3
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	430a      	orrs	r2, r1
 801284e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	681a      	ldr	r2, [r3, #0]
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	f042 0201 	orr.w	r2, r2, #1
 801285e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2200      	movs	r2, #0
 8012864:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	2220      	movs	r2, #32
 801286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	2200      	movs	r2, #0
 8012872:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2200      	movs	r2, #0
 8012878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801287c:	2300      	movs	r3, #0
}
 801287e:	4618      	mov	r0, r3
 8012880:	3710      	adds	r7, #16
 8012882:	46bd      	mov	sp, r7
 8012884:	bd80      	pop	{r7, pc}
 8012886:	bf00      	nop
 8012888:	000186a0 	.word	0x000186a0
 801288c:	001e847f 	.word	0x001e847f
 8012890:	003d08ff 	.word	0x003d08ff
 8012894:	431bde83 	.word	0x431bde83
 8012898:	10624dd3 	.word	0x10624dd3

0801289c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b082      	sub	sp, #8
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d101      	bne.n	80128ae <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80128aa:	2301      	movs	r3, #1
 80128ac:	e021      	b.n	80128f2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	2224      	movs	r2, #36	; 0x24
 80128b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	681a      	ldr	r2, [r3, #0]
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	f022 0201 	bic.w	r2, r2, #1
 80128c4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f000 f821 	bl	801290e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2200      	movs	r2, #0
 80128d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	2200      	movs	r2, #0
 80128d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2200      	movs	r2, #0
 80128de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2200      	movs	r2, #0
 80128e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2200      	movs	r2, #0
 80128ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80128f0:	2300      	movs	r3, #0
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	3708      	adds	r7, #8
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd80      	pop	{r7, pc}

080128fa <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80128fa:	b480      	push	{r7}
 80128fc:	b083      	sub	sp, #12
 80128fe:	af00      	add	r7, sp, #0
 8012900:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8012902:	bf00      	nop
 8012904:	370c      	adds	r7, #12
 8012906:	46bd      	mov	sp, r7
 8012908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290c:	4770      	bx	lr

0801290e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 801290e:	b480      	push	{r7}
 8012910:	b083      	sub	sp, #12
 8012912:	af00      	add	r7, sp, #0
 8012914:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8012916:	bf00      	nop
 8012918:	370c      	adds	r7, #12
 801291a:	46bd      	mov	sp, r7
 801291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012920:	4770      	bx	lr
	...

08012924 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b088      	sub	sp, #32
 8012928:	af02      	add	r7, sp, #8
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	607a      	str	r2, [r7, #4]
 801292e:	461a      	mov	r2, r3
 8012930:	460b      	mov	r3, r1
 8012932:	817b      	strh	r3, [r7, #10]
 8012934:	4613      	mov	r3, r2
 8012936:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8012938:	f7ff fabc 	bl	8011eb4 <HAL_GetTick>
 801293c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012944:	b2db      	uxtb	r3, r3
 8012946:	2b20      	cmp	r3, #32
 8012948:	f040 80e0 	bne.w	8012b0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	9300      	str	r3, [sp, #0]
 8012950:	2319      	movs	r3, #25
 8012952:	2201      	movs	r2, #1
 8012954:	4970      	ldr	r1, [pc, #448]	; (8012b18 <HAL_I2C_Master_Transmit+0x1f4>)
 8012956:	68f8      	ldr	r0, [r7, #12]
 8012958:	f000 fc72 	bl	8013240 <I2C_WaitOnFlagUntilTimeout>
 801295c:	4603      	mov	r3, r0
 801295e:	2b00      	cmp	r3, #0
 8012960:	d001      	beq.n	8012966 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8012962:	2302      	movs	r3, #2
 8012964:	e0d3      	b.n	8012b0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801296c:	2b01      	cmp	r3, #1
 801296e:	d101      	bne.n	8012974 <HAL_I2C_Master_Transmit+0x50>
 8012970:	2302      	movs	r3, #2
 8012972:	e0cc      	b.n	8012b0e <HAL_I2C_Master_Transmit+0x1ea>
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	2201      	movs	r2, #1
 8012978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	f003 0301 	and.w	r3, r3, #1
 8012986:	2b01      	cmp	r3, #1
 8012988:	d007      	beq.n	801299a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	681a      	ldr	r2, [r3, #0]
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	f042 0201 	orr.w	r2, r2, #1
 8012998:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	681a      	ldr	r2, [r3, #0]
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80129a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	2221      	movs	r2, #33	; 0x21
 80129ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	2210      	movs	r2, #16
 80129b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	2200      	movs	r2, #0
 80129be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	687a      	ldr	r2, [r7, #4]
 80129c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	893a      	ldrh	r2, [r7, #8]
 80129ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80129d0:	b29a      	uxth	r2, r3
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	4a50      	ldr	r2, [pc, #320]	; (8012b1c <HAL_I2C_Master_Transmit+0x1f8>)
 80129da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80129dc:	8979      	ldrh	r1, [r7, #10]
 80129de:	697b      	ldr	r3, [r7, #20]
 80129e0:	6a3a      	ldr	r2, [r7, #32]
 80129e2:	68f8      	ldr	r0, [r7, #12]
 80129e4:	f000 fadc 	bl	8012fa0 <I2C_MasterRequestWrite>
 80129e8:	4603      	mov	r3, r0
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d001      	beq.n	80129f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80129ee:	2301      	movs	r3, #1
 80129f0:	e08d      	b.n	8012b0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80129f2:	2300      	movs	r3, #0
 80129f4:	613b      	str	r3, [r7, #16]
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	695b      	ldr	r3, [r3, #20]
 80129fc:	613b      	str	r3, [r7, #16]
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	699b      	ldr	r3, [r3, #24]
 8012a04:	613b      	str	r3, [r7, #16]
 8012a06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8012a08:	e066      	b.n	8012ad8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012a0a:	697a      	ldr	r2, [r7, #20]
 8012a0c:	6a39      	ldr	r1, [r7, #32]
 8012a0e:	68f8      	ldr	r0, [r7, #12]
 8012a10:	f000 fcec 	bl	80133ec <I2C_WaitOnTXEFlagUntilTimeout>
 8012a14:	4603      	mov	r3, r0
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d00d      	beq.n	8012a36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a1e:	2b04      	cmp	r3, #4
 8012a20:	d107      	bne.n	8012a32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	681a      	ldr	r2, [r3, #0]
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012a30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8012a32:	2301      	movs	r3, #1
 8012a34:	e06b      	b.n	8012b0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a3a:	781a      	ldrb	r2, [r3, #0]
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a46:	1c5a      	adds	r2, r3, #1
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012a50:	b29b      	uxth	r3, r3
 8012a52:	3b01      	subs	r3, #1
 8012a54:	b29a      	uxth	r2, r3
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a5e:	3b01      	subs	r3, #1
 8012a60:	b29a      	uxth	r2, r3
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	695b      	ldr	r3, [r3, #20]
 8012a6c:	f003 0304 	and.w	r3, r3, #4
 8012a70:	2b04      	cmp	r3, #4
 8012a72:	d11b      	bne.n	8012aac <HAL_I2C_Master_Transmit+0x188>
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d017      	beq.n	8012aac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a80:	781a      	ldrb	r2, [r3, #0]
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a8c:	1c5a      	adds	r2, r3, #1
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012a96:	b29b      	uxth	r3, r3
 8012a98:	3b01      	subs	r3, #1
 8012a9a:	b29a      	uxth	r2, r3
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012aa4:	3b01      	subs	r3, #1
 8012aa6:	b29a      	uxth	r2, r3
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012aac:	697a      	ldr	r2, [r7, #20]
 8012aae:	6a39      	ldr	r1, [r7, #32]
 8012ab0:	68f8      	ldr	r0, [r7, #12]
 8012ab2:	f000 fcdc 	bl	801346e <I2C_WaitOnBTFFlagUntilTimeout>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d00d      	beq.n	8012ad8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ac0:	2b04      	cmp	r3, #4
 8012ac2:	d107      	bne.n	8012ad4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	681a      	ldr	r2, [r3, #0]
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012ad2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8012ad4:	2301      	movs	r3, #1
 8012ad6:	e01a      	b.n	8012b0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d194      	bne.n	8012a0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	681a      	ldr	r2, [r3, #0]
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	2220      	movs	r2, #32
 8012af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	2200      	movs	r2, #0
 8012afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	2200      	movs	r2, #0
 8012b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8012b08:	2300      	movs	r3, #0
 8012b0a:	e000      	b.n	8012b0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8012b0c:	2302      	movs	r3, #2
  }
}
 8012b0e:	4618      	mov	r0, r3
 8012b10:	3718      	adds	r7, #24
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd80      	pop	{r7, pc}
 8012b16:	bf00      	nop
 8012b18:	00100002 	.word	0x00100002
 8012b1c:	ffff0000 	.word	0xffff0000

08012b20 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b08c      	sub	sp, #48	; 0x30
 8012b24:	af02      	add	r7, sp, #8
 8012b26:	60f8      	str	r0, [r7, #12]
 8012b28:	607a      	str	r2, [r7, #4]
 8012b2a:	461a      	mov	r2, r3
 8012b2c:	460b      	mov	r3, r1
 8012b2e:	817b      	strh	r3, [r7, #10]
 8012b30:	4613      	mov	r3, r2
 8012b32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8012b34:	f7ff f9be 	bl	8011eb4 <HAL_GetTick>
 8012b38:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012b40:	b2db      	uxtb	r3, r3
 8012b42:	2b20      	cmp	r3, #32
 8012b44:	f040 820b 	bne.w	8012f5e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8012b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b4a:	9300      	str	r3, [sp, #0]
 8012b4c:	2319      	movs	r3, #25
 8012b4e:	2201      	movs	r2, #1
 8012b50:	497c      	ldr	r1, [pc, #496]	; (8012d44 <HAL_I2C_Master_Receive+0x224>)
 8012b52:	68f8      	ldr	r0, [r7, #12]
 8012b54:	f000 fb74 	bl	8013240 <I2C_WaitOnFlagUntilTimeout>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d001      	beq.n	8012b62 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8012b5e:	2302      	movs	r3, #2
 8012b60:	e1fe      	b.n	8012f60 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012b68:	2b01      	cmp	r3, #1
 8012b6a:	d101      	bne.n	8012b70 <HAL_I2C_Master_Receive+0x50>
 8012b6c:	2302      	movs	r3, #2
 8012b6e:	e1f7      	b.n	8012f60 <HAL_I2C_Master_Receive+0x440>
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	2201      	movs	r2, #1
 8012b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	f003 0301 	and.w	r3, r3, #1
 8012b82:	2b01      	cmp	r3, #1
 8012b84:	d007      	beq.n	8012b96 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	681a      	ldr	r2, [r3, #0]
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	f042 0201 	orr.w	r2, r2, #1
 8012b94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	681a      	ldr	r2, [r3, #0]
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012ba4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	2222      	movs	r2, #34	; 0x22
 8012baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	2210      	movs	r2, #16
 8012bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	687a      	ldr	r2, [r7, #4]
 8012bc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	893a      	ldrh	r2, [r7, #8]
 8012bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012bcc:	b29a      	uxth	r2, r3
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	4a5c      	ldr	r2, [pc, #368]	; (8012d48 <HAL_I2C_Master_Receive+0x228>)
 8012bd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8012bd8:	8979      	ldrh	r1, [r7, #10]
 8012bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012bde:	68f8      	ldr	r0, [r7, #12]
 8012be0:	f000 fa60 	bl	80130a4 <I2C_MasterRequestRead>
 8012be4:	4603      	mov	r3, r0
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d001      	beq.n	8012bee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8012bea:	2301      	movs	r3, #1
 8012bec:	e1b8      	b.n	8012f60 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d113      	bne.n	8012c1e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	623b      	str	r3, [r7, #32]
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	695b      	ldr	r3, [r3, #20]
 8012c00:	623b      	str	r3, [r7, #32]
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	699b      	ldr	r3, [r3, #24]
 8012c08:	623b      	str	r3, [r7, #32]
 8012c0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	681a      	ldr	r2, [r3, #0]
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012c1a:	601a      	str	r2, [r3, #0]
 8012c1c:	e18c      	b.n	8012f38 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c22:	2b01      	cmp	r3, #1
 8012c24:	d11b      	bne.n	8012c5e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	681a      	ldr	r2, [r3, #0]
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012c34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012c36:	2300      	movs	r3, #0
 8012c38:	61fb      	str	r3, [r7, #28]
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	695b      	ldr	r3, [r3, #20]
 8012c40:	61fb      	str	r3, [r7, #28]
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	699b      	ldr	r3, [r3, #24]
 8012c48:	61fb      	str	r3, [r7, #28]
 8012c4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	681a      	ldr	r2, [r3, #0]
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012c5a:	601a      	str	r2, [r3, #0]
 8012c5c:	e16c      	b.n	8012f38 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c62:	2b02      	cmp	r3, #2
 8012c64:	d11b      	bne.n	8012c9e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	681a      	ldr	r2, [r3, #0]
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012c74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	681a      	ldr	r2, [r3, #0]
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012c84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012c86:	2300      	movs	r3, #0
 8012c88:	61bb      	str	r3, [r7, #24]
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	695b      	ldr	r3, [r3, #20]
 8012c90:	61bb      	str	r3, [r7, #24]
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	699b      	ldr	r3, [r3, #24]
 8012c98:	61bb      	str	r3, [r7, #24]
 8012c9a:	69bb      	ldr	r3, [r7, #24]
 8012c9c:	e14c      	b.n	8012f38 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	681a      	ldr	r2, [r3, #0]
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012cac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012cae:	2300      	movs	r3, #0
 8012cb0:	617b      	str	r3, [r7, #20]
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	695b      	ldr	r3, [r3, #20]
 8012cb8:	617b      	str	r3, [r7, #20]
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	699b      	ldr	r3, [r3, #24]
 8012cc0:	617b      	str	r3, [r7, #20]
 8012cc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8012cc4:	e138      	b.n	8012f38 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012cca:	2b03      	cmp	r3, #3
 8012ccc:	f200 80f1 	bhi.w	8012eb2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012cd4:	2b01      	cmp	r3, #1
 8012cd6:	d123      	bne.n	8012d20 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012cdc:	68f8      	ldr	r0, [r7, #12]
 8012cde:	f000 fc07 	bl	80134f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d001      	beq.n	8012cec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8012ce8:	2301      	movs	r3, #1
 8012cea:	e139      	b.n	8012f60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	691a      	ldr	r2, [r3, #16]
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cf6:	b2d2      	uxtb	r2, r2
 8012cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cfe:	1c5a      	adds	r2, r3, #1
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d08:	3b01      	subs	r3, #1
 8012d0a:	b29a      	uxth	r2, r3
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d14:	b29b      	uxth	r3, r3
 8012d16:	3b01      	subs	r3, #1
 8012d18:	b29a      	uxth	r2, r3
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012d1e:	e10b      	b.n	8012f38 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d24:	2b02      	cmp	r3, #2
 8012d26:	d14e      	bne.n	8012dc6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d2a:	9300      	str	r3, [sp, #0]
 8012d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d2e:	2200      	movs	r2, #0
 8012d30:	4906      	ldr	r1, [pc, #24]	; (8012d4c <HAL_I2C_Master_Receive+0x22c>)
 8012d32:	68f8      	ldr	r0, [r7, #12]
 8012d34:	f000 fa84 	bl	8013240 <I2C_WaitOnFlagUntilTimeout>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d008      	beq.n	8012d50 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8012d3e:	2301      	movs	r3, #1
 8012d40:	e10e      	b.n	8012f60 <HAL_I2C_Master_Receive+0x440>
 8012d42:	bf00      	nop
 8012d44:	00100002 	.word	0x00100002
 8012d48:	ffff0000 	.word	0xffff0000
 8012d4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	681a      	ldr	r2, [r3, #0]
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	691a      	ldr	r2, [r3, #16]
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d6a:	b2d2      	uxtb	r2, r2
 8012d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d72:	1c5a      	adds	r2, r3, #1
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d7c:	3b01      	subs	r3, #1
 8012d7e:	b29a      	uxth	r2, r3
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d88:	b29b      	uxth	r3, r3
 8012d8a:	3b01      	subs	r3, #1
 8012d8c:	b29a      	uxth	r2, r3
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	691a      	ldr	r2, [r3, #16]
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d9c:	b2d2      	uxtb	r2, r2
 8012d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012da4:	1c5a      	adds	r2, r3, #1
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012dae:	3b01      	subs	r3, #1
 8012db0:	b29a      	uxth	r2, r3
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012dba:	b29b      	uxth	r3, r3
 8012dbc:	3b01      	subs	r3, #1
 8012dbe:	b29a      	uxth	r2, r3
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012dc4:	e0b8      	b.n	8012f38 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dc8:	9300      	str	r3, [sp, #0]
 8012dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dcc:	2200      	movs	r2, #0
 8012dce:	4966      	ldr	r1, [pc, #408]	; (8012f68 <HAL_I2C_Master_Receive+0x448>)
 8012dd0:	68f8      	ldr	r0, [r7, #12]
 8012dd2:	f000 fa35 	bl	8013240 <I2C_WaitOnFlagUntilTimeout>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d001      	beq.n	8012de0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8012ddc:	2301      	movs	r3, #1
 8012dde:	e0bf      	b.n	8012f60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	681a      	ldr	r2, [r3, #0]
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012dee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	691a      	ldr	r2, [r3, #16]
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dfa:	b2d2      	uxtb	r2, r2
 8012dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e02:	1c5a      	adds	r2, r3, #1
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e0c:	3b01      	subs	r3, #1
 8012e0e:	b29a      	uxth	r2, r3
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012e18:	b29b      	uxth	r3, r3
 8012e1a:	3b01      	subs	r3, #1
 8012e1c:	b29a      	uxth	r2, r3
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e24:	9300      	str	r3, [sp, #0]
 8012e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e28:	2200      	movs	r2, #0
 8012e2a:	494f      	ldr	r1, [pc, #316]	; (8012f68 <HAL_I2C_Master_Receive+0x448>)
 8012e2c:	68f8      	ldr	r0, [r7, #12]
 8012e2e:	f000 fa07 	bl	8013240 <I2C_WaitOnFlagUntilTimeout>
 8012e32:	4603      	mov	r3, r0
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d001      	beq.n	8012e3c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8012e38:	2301      	movs	r3, #1
 8012e3a:	e091      	b.n	8012f60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	681a      	ldr	r2, [r3, #0]
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012e4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	691a      	ldr	r2, [r3, #16]
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e56:	b2d2      	uxtb	r2, r2
 8012e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e5e:	1c5a      	adds	r2, r3, #1
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e68:	3b01      	subs	r3, #1
 8012e6a:	b29a      	uxth	r2, r3
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012e74:	b29b      	uxth	r3, r3
 8012e76:	3b01      	subs	r3, #1
 8012e78:	b29a      	uxth	r2, r3
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	691a      	ldr	r2, [r3, #16]
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e88:	b2d2      	uxtb	r2, r2
 8012e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e90:	1c5a      	adds	r2, r3, #1
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e9a:	3b01      	subs	r3, #1
 8012e9c:	b29a      	uxth	r2, r3
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012ea6:	b29b      	uxth	r3, r3
 8012ea8:	3b01      	subs	r3, #1
 8012eaa:	b29a      	uxth	r2, r3
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012eb0:	e042      	b.n	8012f38 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012eb6:	68f8      	ldr	r0, [r7, #12]
 8012eb8:	f000 fb1a 	bl	80134f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d001      	beq.n	8012ec6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8012ec2:	2301      	movs	r3, #1
 8012ec4:	e04c      	b.n	8012f60 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	691a      	ldr	r2, [r3, #16]
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ed0:	b2d2      	uxtb	r2, r2
 8012ed2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ed8:	1c5a      	adds	r2, r3, #1
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ee2:	3b01      	subs	r3, #1
 8012ee4:	b29a      	uxth	r2, r3
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012eee:	b29b      	uxth	r3, r3
 8012ef0:	3b01      	subs	r3, #1
 8012ef2:	b29a      	uxth	r2, r3
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	695b      	ldr	r3, [r3, #20]
 8012efe:	f003 0304 	and.w	r3, r3, #4
 8012f02:	2b04      	cmp	r3, #4
 8012f04:	d118      	bne.n	8012f38 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	691a      	ldr	r2, [r3, #16]
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f10:	b2d2      	uxtb	r2, r2
 8012f12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f18:	1c5a      	adds	r2, r3, #1
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f22:	3b01      	subs	r3, #1
 8012f24:	b29a      	uxth	r2, r3
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012f2e:	b29b      	uxth	r3, r3
 8012f30:	3b01      	subs	r3, #1
 8012f32:	b29a      	uxth	r2, r3
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	f47f aec2 	bne.w	8012cc6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	2220      	movs	r2, #32
 8012f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	2200      	movs	r2, #0
 8012f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	e000      	b.n	8012f60 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8012f5e:	2302      	movs	r3, #2
  }
}
 8012f60:	4618      	mov	r0, r3
 8012f62:	3728      	adds	r7, #40	; 0x28
 8012f64:	46bd      	mov	sp, r7
 8012f66:	bd80      	pop	{r7, pc}
 8012f68:	00010004 	.word	0x00010004

08012f6c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8012f6c:	b480      	push	{r7}
 8012f6e:	b083      	sub	sp, #12
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012f7a:	b2db      	uxtb	r3, r3
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	370c      	adds	r7, #12
 8012f80:	46bd      	mov	sp, r7
 8012f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f86:	4770      	bx	lr

08012f88 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8012f88:	b480      	push	{r7}
 8012f8a:	b083      	sub	sp, #12
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8012f94:	4618      	mov	r0, r3
 8012f96:	370c      	adds	r7, #12
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9e:	4770      	bx	lr

08012fa0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b088      	sub	sp, #32
 8012fa4:	af02      	add	r7, sp, #8
 8012fa6:	60f8      	str	r0, [r7, #12]
 8012fa8:	607a      	str	r2, [r7, #4]
 8012faa:	603b      	str	r3, [r7, #0]
 8012fac:	460b      	mov	r3, r1
 8012fae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	2b08      	cmp	r3, #8
 8012fba:	d006      	beq.n	8012fca <I2C_MasterRequestWrite+0x2a>
 8012fbc:	697b      	ldr	r3, [r7, #20]
 8012fbe:	2b01      	cmp	r3, #1
 8012fc0:	d003      	beq.n	8012fca <I2C_MasterRequestWrite+0x2a>
 8012fc2:	697b      	ldr	r3, [r7, #20]
 8012fc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012fc8:	d108      	bne.n	8012fdc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	681a      	ldr	r2, [r3, #0]
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012fd8:	601a      	str	r2, [r3, #0]
 8012fda:	e00b      	b.n	8012ff4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fe0:	2b12      	cmp	r3, #18
 8012fe2:	d107      	bne.n	8012ff4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	681a      	ldr	r2, [r3, #0]
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012ff2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	9300      	str	r3, [sp, #0]
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013000:	68f8      	ldr	r0, [r7, #12]
 8013002:	f000 f91d 	bl	8013240 <I2C_WaitOnFlagUntilTimeout>
 8013006:	4603      	mov	r3, r0
 8013008:	2b00      	cmp	r3, #0
 801300a:	d00d      	beq.n	8013028 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801301a:	d103      	bne.n	8013024 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013022:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8013024:	2303      	movs	r3, #3
 8013026:	e035      	b.n	8013094 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	691b      	ldr	r3, [r3, #16]
 801302c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013030:	d108      	bne.n	8013044 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8013032:	897b      	ldrh	r3, [r7, #10]
 8013034:	b2db      	uxtb	r3, r3
 8013036:	461a      	mov	r2, r3
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8013040:	611a      	str	r2, [r3, #16]
 8013042:	e01b      	b.n	801307c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8013044:	897b      	ldrh	r3, [r7, #10]
 8013046:	11db      	asrs	r3, r3, #7
 8013048:	b2db      	uxtb	r3, r3
 801304a:	f003 0306 	and.w	r3, r3, #6
 801304e:	b2db      	uxtb	r3, r3
 8013050:	f063 030f 	orn	r3, r3, #15
 8013054:	b2da      	uxtb	r2, r3
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801305c:	683b      	ldr	r3, [r7, #0]
 801305e:	687a      	ldr	r2, [r7, #4]
 8013060:	490e      	ldr	r1, [pc, #56]	; (801309c <I2C_MasterRequestWrite+0xfc>)
 8013062:	68f8      	ldr	r0, [r7, #12]
 8013064:	f000 f943 	bl	80132ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8013068:	4603      	mov	r3, r0
 801306a:	2b00      	cmp	r3, #0
 801306c:	d001      	beq.n	8013072 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 801306e:	2301      	movs	r3, #1
 8013070:	e010      	b.n	8013094 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8013072:	897b      	ldrh	r3, [r7, #10]
 8013074:	b2da      	uxtb	r2, r3
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	687a      	ldr	r2, [r7, #4]
 8013080:	4907      	ldr	r1, [pc, #28]	; (80130a0 <I2C_MasterRequestWrite+0x100>)
 8013082:	68f8      	ldr	r0, [r7, #12]
 8013084:	f000 f933 	bl	80132ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8013088:	4603      	mov	r3, r0
 801308a:	2b00      	cmp	r3, #0
 801308c:	d001      	beq.n	8013092 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 801308e:	2301      	movs	r3, #1
 8013090:	e000      	b.n	8013094 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8013092:	2300      	movs	r3, #0
}
 8013094:	4618      	mov	r0, r3
 8013096:	3718      	adds	r7, #24
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}
 801309c:	00010008 	.word	0x00010008
 80130a0:	00010002 	.word	0x00010002

080130a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b088      	sub	sp, #32
 80130a8:	af02      	add	r7, sp, #8
 80130aa:	60f8      	str	r0, [r7, #12]
 80130ac:	607a      	str	r2, [r7, #4]
 80130ae:	603b      	str	r3, [r7, #0]
 80130b0:	460b      	mov	r3, r1
 80130b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	681a      	ldr	r2, [r3, #0]
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80130c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	2b08      	cmp	r3, #8
 80130ce:	d006      	beq.n	80130de <I2C_MasterRequestRead+0x3a>
 80130d0:	697b      	ldr	r3, [r7, #20]
 80130d2:	2b01      	cmp	r3, #1
 80130d4:	d003      	beq.n	80130de <I2C_MasterRequestRead+0x3a>
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80130dc:	d108      	bne.n	80130f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	681a      	ldr	r2, [r3, #0]
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80130ec:	601a      	str	r2, [r3, #0]
 80130ee:	e00b      	b.n	8013108 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130f4:	2b11      	cmp	r3, #17
 80130f6:	d107      	bne.n	8013108 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	681a      	ldr	r2, [r3, #0]
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013106:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8013108:	683b      	ldr	r3, [r7, #0]
 801310a:	9300      	str	r3, [sp, #0]
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2200      	movs	r2, #0
 8013110:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013114:	68f8      	ldr	r0, [r7, #12]
 8013116:	f000 f893 	bl	8013240 <I2C_WaitOnFlagUntilTimeout>
 801311a:	4603      	mov	r3, r0
 801311c:	2b00      	cmp	r3, #0
 801311e:	d00d      	beq.n	801313c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801312a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801312e:	d103      	bne.n	8013138 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013136:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8013138:	2303      	movs	r3, #3
 801313a:	e079      	b.n	8013230 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	691b      	ldr	r3, [r3, #16]
 8013140:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013144:	d108      	bne.n	8013158 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8013146:	897b      	ldrh	r3, [r7, #10]
 8013148:	b2db      	uxtb	r3, r3
 801314a:	f043 0301 	orr.w	r3, r3, #1
 801314e:	b2da      	uxtb	r2, r3
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	611a      	str	r2, [r3, #16]
 8013156:	e05f      	b.n	8013218 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8013158:	897b      	ldrh	r3, [r7, #10]
 801315a:	11db      	asrs	r3, r3, #7
 801315c:	b2db      	uxtb	r3, r3
 801315e:	f003 0306 	and.w	r3, r3, #6
 8013162:	b2db      	uxtb	r3, r3
 8013164:	f063 030f 	orn	r3, r3, #15
 8013168:	b2da      	uxtb	r2, r3
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	687a      	ldr	r2, [r7, #4]
 8013174:	4930      	ldr	r1, [pc, #192]	; (8013238 <I2C_MasterRequestRead+0x194>)
 8013176:	68f8      	ldr	r0, [r7, #12]
 8013178:	f000 f8b9 	bl	80132ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801317c:	4603      	mov	r3, r0
 801317e:	2b00      	cmp	r3, #0
 8013180:	d001      	beq.n	8013186 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8013182:	2301      	movs	r3, #1
 8013184:	e054      	b.n	8013230 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8013186:	897b      	ldrh	r3, [r7, #10]
 8013188:	b2da      	uxtb	r2, r3
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013190:	683b      	ldr	r3, [r7, #0]
 8013192:	687a      	ldr	r2, [r7, #4]
 8013194:	4929      	ldr	r1, [pc, #164]	; (801323c <I2C_MasterRequestRead+0x198>)
 8013196:	68f8      	ldr	r0, [r7, #12]
 8013198:	f000 f8a9 	bl	80132ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801319c:	4603      	mov	r3, r0
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d001      	beq.n	80131a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80131a2:	2301      	movs	r3, #1
 80131a4:	e044      	b.n	8013230 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80131a6:	2300      	movs	r3, #0
 80131a8:	613b      	str	r3, [r7, #16]
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	695b      	ldr	r3, [r3, #20]
 80131b0:	613b      	str	r3, [r7, #16]
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	699b      	ldr	r3, [r3, #24]
 80131b8:	613b      	str	r3, [r7, #16]
 80131ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	681a      	ldr	r2, [r3, #0]
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80131ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	9300      	str	r3, [sp, #0]
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2200      	movs	r2, #0
 80131d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80131d8:	68f8      	ldr	r0, [r7, #12]
 80131da:	f000 f831 	bl	8013240 <I2C_WaitOnFlagUntilTimeout>
 80131de:	4603      	mov	r3, r0
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d00d      	beq.n	8013200 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80131ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80131f2:	d103      	bne.n	80131fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80131fa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80131fc:	2303      	movs	r3, #3
 80131fe:	e017      	b.n	8013230 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8013200:	897b      	ldrh	r3, [r7, #10]
 8013202:	11db      	asrs	r3, r3, #7
 8013204:	b2db      	uxtb	r3, r3
 8013206:	f003 0306 	and.w	r3, r3, #6
 801320a:	b2db      	uxtb	r3, r3
 801320c:	f063 030e 	orn	r3, r3, #14
 8013210:	b2da      	uxtb	r2, r3
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	687a      	ldr	r2, [r7, #4]
 801321c:	4907      	ldr	r1, [pc, #28]	; (801323c <I2C_MasterRequestRead+0x198>)
 801321e:	68f8      	ldr	r0, [r7, #12]
 8013220:	f000 f865 	bl	80132ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8013224:	4603      	mov	r3, r0
 8013226:	2b00      	cmp	r3, #0
 8013228:	d001      	beq.n	801322e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 801322a:	2301      	movs	r3, #1
 801322c:	e000      	b.n	8013230 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 801322e:	2300      	movs	r3, #0
}
 8013230:	4618      	mov	r0, r3
 8013232:	3718      	adds	r7, #24
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}
 8013238:	00010008 	.word	0x00010008
 801323c:	00010002 	.word	0x00010002

08013240 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b084      	sub	sp, #16
 8013244:	af00      	add	r7, sp, #0
 8013246:	60f8      	str	r0, [r7, #12]
 8013248:	60b9      	str	r1, [r7, #8]
 801324a:	603b      	str	r3, [r7, #0]
 801324c:	4613      	mov	r3, r2
 801324e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8013250:	e025      	b.n	801329e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013258:	d021      	beq.n	801329e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801325a:	f7fe fe2b 	bl	8011eb4 <HAL_GetTick>
 801325e:	4602      	mov	r2, r0
 8013260:	69bb      	ldr	r3, [r7, #24]
 8013262:	1ad3      	subs	r3, r2, r3
 8013264:	683a      	ldr	r2, [r7, #0]
 8013266:	429a      	cmp	r2, r3
 8013268:	d302      	bcc.n	8013270 <I2C_WaitOnFlagUntilTimeout+0x30>
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d116      	bne.n	801329e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	2200      	movs	r2, #0
 8013274:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2220      	movs	r2, #32
 801327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	2200      	movs	r2, #0
 8013282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801328a:	f043 0220 	orr.w	r2, r3, #32
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	2200      	movs	r2, #0
 8013296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801329a:	2301      	movs	r3, #1
 801329c:	e023      	b.n	80132e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	0c1b      	lsrs	r3, r3, #16
 80132a2:	b2db      	uxtb	r3, r3
 80132a4:	2b01      	cmp	r3, #1
 80132a6:	d10d      	bne.n	80132c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	695b      	ldr	r3, [r3, #20]
 80132ae:	43da      	mvns	r2, r3
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	4013      	ands	r3, r2
 80132b4:	b29b      	uxth	r3, r3
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	bf0c      	ite	eq
 80132ba:	2301      	moveq	r3, #1
 80132bc:	2300      	movne	r3, #0
 80132be:	b2db      	uxtb	r3, r3
 80132c0:	461a      	mov	r2, r3
 80132c2:	e00c      	b.n	80132de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	699b      	ldr	r3, [r3, #24]
 80132ca:	43da      	mvns	r2, r3
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	4013      	ands	r3, r2
 80132d0:	b29b      	uxth	r3, r3
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	bf0c      	ite	eq
 80132d6:	2301      	moveq	r3, #1
 80132d8:	2300      	movne	r3, #0
 80132da:	b2db      	uxtb	r3, r3
 80132dc:	461a      	mov	r2, r3
 80132de:	79fb      	ldrb	r3, [r7, #7]
 80132e0:	429a      	cmp	r2, r3
 80132e2:	d0b6      	beq.n	8013252 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80132e4:	2300      	movs	r3, #0
}
 80132e6:	4618      	mov	r0, r3
 80132e8:	3710      	adds	r7, #16
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}

080132ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80132ee:	b580      	push	{r7, lr}
 80132f0:	b084      	sub	sp, #16
 80132f2:	af00      	add	r7, sp, #0
 80132f4:	60f8      	str	r0, [r7, #12]
 80132f6:	60b9      	str	r1, [r7, #8]
 80132f8:	607a      	str	r2, [r7, #4]
 80132fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80132fc:	e051      	b.n	80133a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	695b      	ldr	r3, [r3, #20]
 8013304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801330c:	d123      	bne.n	8013356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	681a      	ldr	r2, [r3, #0]
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801331c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013326:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	2200      	movs	r2, #0
 801332c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	2220      	movs	r2, #32
 8013332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	2200      	movs	r2, #0
 801333a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013342:	f043 0204 	orr.w	r2, r3, #4
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	2200      	movs	r2, #0
 801334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8013352:	2301      	movs	r3, #1
 8013354:	e046      	b.n	80133e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f1b3 3fff 	cmp.w	r3, #4294967295
 801335c:	d021      	beq.n	80133a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801335e:	f7fe fda9 	bl	8011eb4 <HAL_GetTick>
 8013362:	4602      	mov	r2, r0
 8013364:	683b      	ldr	r3, [r7, #0]
 8013366:	1ad3      	subs	r3, r2, r3
 8013368:	687a      	ldr	r2, [r7, #4]
 801336a:	429a      	cmp	r2, r3
 801336c:	d302      	bcc.n	8013374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d116      	bne.n	80133a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	2200      	movs	r2, #0
 8013378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	2220      	movs	r2, #32
 801337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	2200      	movs	r2, #0
 8013386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801338e:	f043 0220 	orr.w	r2, r3, #32
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	2200      	movs	r2, #0
 801339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801339e:	2301      	movs	r3, #1
 80133a0:	e020      	b.n	80133e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	0c1b      	lsrs	r3, r3, #16
 80133a6:	b2db      	uxtb	r3, r3
 80133a8:	2b01      	cmp	r3, #1
 80133aa:	d10c      	bne.n	80133c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	695b      	ldr	r3, [r3, #20]
 80133b2:	43da      	mvns	r2, r3
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	4013      	ands	r3, r2
 80133b8:	b29b      	uxth	r3, r3
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	bf14      	ite	ne
 80133be:	2301      	movne	r3, #1
 80133c0:	2300      	moveq	r3, #0
 80133c2:	b2db      	uxtb	r3, r3
 80133c4:	e00b      	b.n	80133de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	699b      	ldr	r3, [r3, #24]
 80133cc:	43da      	mvns	r2, r3
 80133ce:	68bb      	ldr	r3, [r7, #8]
 80133d0:	4013      	ands	r3, r2
 80133d2:	b29b      	uxth	r3, r3
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	bf14      	ite	ne
 80133d8:	2301      	movne	r3, #1
 80133da:	2300      	moveq	r3, #0
 80133dc:	b2db      	uxtb	r3, r3
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d18d      	bne.n	80132fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80133e2:	2300      	movs	r3, #0
}
 80133e4:	4618      	mov	r0, r3
 80133e6:	3710      	adds	r7, #16
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}

080133ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b084      	sub	sp, #16
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	60f8      	str	r0, [r7, #12]
 80133f4:	60b9      	str	r1, [r7, #8]
 80133f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80133f8:	e02d      	b.n	8013456 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80133fa:	68f8      	ldr	r0, [r7, #12]
 80133fc:	f000 f8ce 	bl	801359c <I2C_IsAcknowledgeFailed>
 8013400:	4603      	mov	r3, r0
 8013402:	2b00      	cmp	r3, #0
 8013404:	d001      	beq.n	801340a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8013406:	2301      	movs	r3, #1
 8013408:	e02d      	b.n	8013466 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013410:	d021      	beq.n	8013456 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013412:	f7fe fd4f 	bl	8011eb4 <HAL_GetTick>
 8013416:	4602      	mov	r2, r0
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	1ad3      	subs	r3, r2, r3
 801341c:	68ba      	ldr	r2, [r7, #8]
 801341e:	429a      	cmp	r2, r3
 8013420:	d302      	bcc.n	8013428 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8013422:	68bb      	ldr	r3, [r7, #8]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d116      	bne.n	8013456 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	2200      	movs	r2, #0
 801342c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	2220      	movs	r2, #32
 8013432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	2200      	movs	r2, #0
 801343a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013442:	f043 0220 	orr.w	r2, r3, #32
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	2200      	movs	r2, #0
 801344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013452:	2301      	movs	r3, #1
 8013454:	e007      	b.n	8013466 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	695b      	ldr	r3, [r3, #20]
 801345c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013460:	2b80      	cmp	r3, #128	; 0x80
 8013462:	d1ca      	bne.n	80133fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013464:	2300      	movs	r3, #0
}
 8013466:	4618      	mov	r0, r3
 8013468:	3710      	adds	r7, #16
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}

0801346e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801346e:	b580      	push	{r7, lr}
 8013470:	b084      	sub	sp, #16
 8013472:	af00      	add	r7, sp, #0
 8013474:	60f8      	str	r0, [r7, #12]
 8013476:	60b9      	str	r1, [r7, #8]
 8013478:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801347a:	e02d      	b.n	80134d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801347c:	68f8      	ldr	r0, [r7, #12]
 801347e:	f000 f88d 	bl	801359c <I2C_IsAcknowledgeFailed>
 8013482:	4603      	mov	r3, r0
 8013484:	2b00      	cmp	r3, #0
 8013486:	d001      	beq.n	801348c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8013488:	2301      	movs	r3, #1
 801348a:	e02d      	b.n	80134e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801348c:	68bb      	ldr	r3, [r7, #8]
 801348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013492:	d021      	beq.n	80134d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013494:	f7fe fd0e 	bl	8011eb4 <HAL_GetTick>
 8013498:	4602      	mov	r2, r0
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	1ad3      	subs	r3, r2, r3
 801349e:	68ba      	ldr	r2, [r7, #8]
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d302      	bcc.n	80134aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80134a4:	68bb      	ldr	r3, [r7, #8]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d116      	bne.n	80134d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	2200      	movs	r2, #0
 80134ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	2220      	movs	r2, #32
 80134b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	2200      	movs	r2, #0
 80134bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134c4:	f043 0220 	orr.w	r2, r3, #32
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	2200      	movs	r2, #0
 80134d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80134d4:	2301      	movs	r3, #1
 80134d6:	e007      	b.n	80134e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	695b      	ldr	r3, [r3, #20]
 80134de:	f003 0304 	and.w	r3, r3, #4
 80134e2:	2b04      	cmp	r3, #4
 80134e4:	d1ca      	bne.n	801347c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80134e6:	2300      	movs	r3, #0
}
 80134e8:	4618      	mov	r0, r3
 80134ea:	3710      	adds	r7, #16
 80134ec:	46bd      	mov	sp, r7
 80134ee:	bd80      	pop	{r7, pc}

080134f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b084      	sub	sp, #16
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	60f8      	str	r0, [r7, #12]
 80134f8:	60b9      	str	r1, [r7, #8]
 80134fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80134fc:	e042      	b.n	8013584 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	695b      	ldr	r3, [r3, #20]
 8013504:	f003 0310 	and.w	r3, r3, #16
 8013508:	2b10      	cmp	r3, #16
 801350a:	d119      	bne.n	8013540 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	f06f 0210 	mvn.w	r2, #16
 8013514:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	2200      	movs	r2, #0
 801351a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	2220      	movs	r2, #32
 8013520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	2200      	movs	r2, #0
 8013528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	2200      	movs	r2, #0
 8013538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801353c:	2301      	movs	r3, #1
 801353e:	e029      	b.n	8013594 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013540:	f7fe fcb8 	bl	8011eb4 <HAL_GetTick>
 8013544:	4602      	mov	r2, r0
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	1ad3      	subs	r3, r2, r3
 801354a:	68ba      	ldr	r2, [r7, #8]
 801354c:	429a      	cmp	r2, r3
 801354e:	d302      	bcc.n	8013556 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d116      	bne.n	8013584 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	2200      	movs	r2, #0
 801355a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	2220      	movs	r2, #32
 8013560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	2200      	movs	r2, #0
 8013568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013570:	f043 0220 	orr.w	r2, r3, #32
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	2200      	movs	r2, #0
 801357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8013580:	2301      	movs	r3, #1
 8013582:	e007      	b.n	8013594 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	695b      	ldr	r3, [r3, #20]
 801358a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801358e:	2b40      	cmp	r3, #64	; 0x40
 8013590:	d1b5      	bne.n	80134fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8013592:	2300      	movs	r3, #0
}
 8013594:	4618      	mov	r0, r3
 8013596:	3710      	adds	r7, #16
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}

0801359c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801359c:	b480      	push	{r7}
 801359e:	b083      	sub	sp, #12
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	695b      	ldr	r3, [r3, #20]
 80135aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80135ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80135b2:	d11b      	bne.n	80135ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80135bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	2200      	movs	r2, #0
 80135c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	2220      	movs	r2, #32
 80135c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	2200      	movs	r2, #0
 80135d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135d8:	f043 0204 	orr.w	r2, r3, #4
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	2200      	movs	r2, #0
 80135e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80135e8:	2301      	movs	r3, #1
 80135ea:	e000      	b.n	80135ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80135ec:	2300      	movs	r3, #0
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	370c      	adds	r7, #12
 80135f2:	46bd      	mov	sp, r7
 80135f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f8:	4770      	bx	lr
	...

080135fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b086      	sub	sp, #24
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d101      	bne.n	801360e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801360a:	2301      	movs	r3, #1
 801360c:	e264      	b.n	8013ad8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	f003 0301 	and.w	r3, r3, #1
 8013616:	2b00      	cmp	r3, #0
 8013618:	d075      	beq.n	8013706 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801361a:	4ba3      	ldr	r3, [pc, #652]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 801361c:	689b      	ldr	r3, [r3, #8]
 801361e:	f003 030c 	and.w	r3, r3, #12
 8013622:	2b04      	cmp	r3, #4
 8013624:	d00c      	beq.n	8013640 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013626:	4ba0      	ldr	r3, [pc, #640]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 8013628:	689b      	ldr	r3, [r3, #8]
 801362a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801362e:	2b08      	cmp	r3, #8
 8013630:	d112      	bne.n	8013658 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013632:	4b9d      	ldr	r3, [pc, #628]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 8013634:	685b      	ldr	r3, [r3, #4]
 8013636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801363a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801363e:	d10b      	bne.n	8013658 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013640:	4b99      	ldr	r3, [pc, #612]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013648:	2b00      	cmp	r3, #0
 801364a:	d05b      	beq.n	8013704 <HAL_RCC_OscConfig+0x108>
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	685b      	ldr	r3, [r3, #4]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d157      	bne.n	8013704 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8013654:	2301      	movs	r3, #1
 8013656:	e23f      	b.n	8013ad8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	685b      	ldr	r3, [r3, #4]
 801365c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013660:	d106      	bne.n	8013670 <HAL_RCC_OscConfig+0x74>
 8013662:	4b91      	ldr	r3, [pc, #580]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	4a90      	ldr	r2, [pc, #576]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 8013668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801366c:	6013      	str	r3, [r2, #0]
 801366e:	e01d      	b.n	80136ac <HAL_RCC_OscConfig+0xb0>
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	685b      	ldr	r3, [r3, #4]
 8013674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013678:	d10c      	bne.n	8013694 <HAL_RCC_OscConfig+0x98>
 801367a:	4b8b      	ldr	r3, [pc, #556]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	4a8a      	ldr	r2, [pc, #552]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 8013680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013684:	6013      	str	r3, [r2, #0]
 8013686:	4b88      	ldr	r3, [pc, #544]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	4a87      	ldr	r2, [pc, #540]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 801368c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013690:	6013      	str	r3, [r2, #0]
 8013692:	e00b      	b.n	80136ac <HAL_RCC_OscConfig+0xb0>
 8013694:	4b84      	ldr	r3, [pc, #528]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	4a83      	ldr	r2, [pc, #524]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 801369a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801369e:	6013      	str	r3, [r2, #0]
 80136a0:	4b81      	ldr	r3, [pc, #516]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	4a80      	ldr	r2, [pc, #512]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 80136a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80136aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d013      	beq.n	80136dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80136b4:	f7fe fbfe 	bl	8011eb4 <HAL_GetTick>
 80136b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80136ba:	e008      	b.n	80136ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80136bc:	f7fe fbfa 	bl	8011eb4 <HAL_GetTick>
 80136c0:	4602      	mov	r2, r0
 80136c2:	693b      	ldr	r3, [r7, #16]
 80136c4:	1ad3      	subs	r3, r2, r3
 80136c6:	2b64      	cmp	r3, #100	; 0x64
 80136c8:	d901      	bls.n	80136ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80136ca:	2303      	movs	r3, #3
 80136cc:	e204      	b.n	8013ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80136ce:	4b76      	ldr	r3, [pc, #472]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d0f0      	beq.n	80136bc <HAL_RCC_OscConfig+0xc0>
 80136da:	e014      	b.n	8013706 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80136dc:	f7fe fbea 	bl	8011eb4 <HAL_GetTick>
 80136e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80136e2:	e008      	b.n	80136f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80136e4:	f7fe fbe6 	bl	8011eb4 <HAL_GetTick>
 80136e8:	4602      	mov	r2, r0
 80136ea:	693b      	ldr	r3, [r7, #16]
 80136ec:	1ad3      	subs	r3, r2, r3
 80136ee:	2b64      	cmp	r3, #100	; 0x64
 80136f0:	d901      	bls.n	80136f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80136f2:	2303      	movs	r3, #3
 80136f4:	e1f0      	b.n	8013ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80136f6:	4b6c      	ldr	r3, [pc, #432]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d1f0      	bne.n	80136e4 <HAL_RCC_OscConfig+0xe8>
 8013702:	e000      	b.n	8013706 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	f003 0302 	and.w	r3, r3, #2
 801370e:	2b00      	cmp	r3, #0
 8013710:	d063      	beq.n	80137da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013712:	4b65      	ldr	r3, [pc, #404]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 8013714:	689b      	ldr	r3, [r3, #8]
 8013716:	f003 030c 	and.w	r3, r3, #12
 801371a:	2b00      	cmp	r3, #0
 801371c:	d00b      	beq.n	8013736 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801371e:	4b62      	ldr	r3, [pc, #392]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 8013720:	689b      	ldr	r3, [r3, #8]
 8013722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013726:	2b08      	cmp	r3, #8
 8013728:	d11c      	bne.n	8013764 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801372a:	4b5f      	ldr	r3, [pc, #380]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013732:	2b00      	cmp	r3, #0
 8013734:	d116      	bne.n	8013764 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013736:	4b5c      	ldr	r3, [pc, #368]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	f003 0302 	and.w	r3, r3, #2
 801373e:	2b00      	cmp	r3, #0
 8013740:	d005      	beq.n	801374e <HAL_RCC_OscConfig+0x152>
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	68db      	ldr	r3, [r3, #12]
 8013746:	2b01      	cmp	r3, #1
 8013748:	d001      	beq.n	801374e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801374a:	2301      	movs	r3, #1
 801374c:	e1c4      	b.n	8013ad8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801374e:	4b56      	ldr	r3, [pc, #344]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	691b      	ldr	r3, [r3, #16]
 801375a:	00db      	lsls	r3, r3, #3
 801375c:	4952      	ldr	r1, [pc, #328]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 801375e:	4313      	orrs	r3, r2
 8013760:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013762:	e03a      	b.n	80137da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	68db      	ldr	r3, [r3, #12]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d020      	beq.n	80137ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801376c:	4b4f      	ldr	r3, [pc, #316]	; (80138ac <HAL_RCC_OscConfig+0x2b0>)
 801376e:	2201      	movs	r2, #1
 8013770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013772:	f7fe fb9f 	bl	8011eb4 <HAL_GetTick>
 8013776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013778:	e008      	b.n	801378c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801377a:	f7fe fb9b 	bl	8011eb4 <HAL_GetTick>
 801377e:	4602      	mov	r2, r0
 8013780:	693b      	ldr	r3, [r7, #16]
 8013782:	1ad3      	subs	r3, r2, r3
 8013784:	2b02      	cmp	r3, #2
 8013786:	d901      	bls.n	801378c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013788:	2303      	movs	r3, #3
 801378a:	e1a5      	b.n	8013ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801378c:	4b46      	ldr	r3, [pc, #280]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	f003 0302 	and.w	r3, r3, #2
 8013794:	2b00      	cmp	r3, #0
 8013796:	d0f0      	beq.n	801377a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013798:	4b43      	ldr	r3, [pc, #268]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	691b      	ldr	r3, [r3, #16]
 80137a4:	00db      	lsls	r3, r3, #3
 80137a6:	4940      	ldr	r1, [pc, #256]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 80137a8:	4313      	orrs	r3, r2
 80137aa:	600b      	str	r3, [r1, #0]
 80137ac:	e015      	b.n	80137da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80137ae:	4b3f      	ldr	r3, [pc, #252]	; (80138ac <HAL_RCC_OscConfig+0x2b0>)
 80137b0:	2200      	movs	r2, #0
 80137b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80137b4:	f7fe fb7e 	bl	8011eb4 <HAL_GetTick>
 80137b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80137ba:	e008      	b.n	80137ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80137bc:	f7fe fb7a 	bl	8011eb4 <HAL_GetTick>
 80137c0:	4602      	mov	r2, r0
 80137c2:	693b      	ldr	r3, [r7, #16]
 80137c4:	1ad3      	subs	r3, r2, r3
 80137c6:	2b02      	cmp	r3, #2
 80137c8:	d901      	bls.n	80137ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80137ca:	2303      	movs	r3, #3
 80137cc:	e184      	b.n	8013ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80137ce:	4b36      	ldr	r3, [pc, #216]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	f003 0302 	and.w	r3, r3, #2
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d1f0      	bne.n	80137bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	f003 0308 	and.w	r3, r3, #8
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d030      	beq.n	8013848 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	695b      	ldr	r3, [r3, #20]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d016      	beq.n	801381c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80137ee:	4b30      	ldr	r3, [pc, #192]	; (80138b0 <HAL_RCC_OscConfig+0x2b4>)
 80137f0:	2201      	movs	r2, #1
 80137f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80137f4:	f7fe fb5e 	bl	8011eb4 <HAL_GetTick>
 80137f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80137fa:	e008      	b.n	801380e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80137fc:	f7fe fb5a 	bl	8011eb4 <HAL_GetTick>
 8013800:	4602      	mov	r2, r0
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	1ad3      	subs	r3, r2, r3
 8013806:	2b02      	cmp	r3, #2
 8013808:	d901      	bls.n	801380e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801380a:	2303      	movs	r3, #3
 801380c:	e164      	b.n	8013ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801380e:	4b26      	ldr	r3, [pc, #152]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 8013810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013812:	f003 0302 	and.w	r3, r3, #2
 8013816:	2b00      	cmp	r3, #0
 8013818:	d0f0      	beq.n	80137fc <HAL_RCC_OscConfig+0x200>
 801381a:	e015      	b.n	8013848 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801381c:	4b24      	ldr	r3, [pc, #144]	; (80138b0 <HAL_RCC_OscConfig+0x2b4>)
 801381e:	2200      	movs	r2, #0
 8013820:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013822:	f7fe fb47 	bl	8011eb4 <HAL_GetTick>
 8013826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013828:	e008      	b.n	801383c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801382a:	f7fe fb43 	bl	8011eb4 <HAL_GetTick>
 801382e:	4602      	mov	r2, r0
 8013830:	693b      	ldr	r3, [r7, #16]
 8013832:	1ad3      	subs	r3, r2, r3
 8013834:	2b02      	cmp	r3, #2
 8013836:	d901      	bls.n	801383c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8013838:	2303      	movs	r3, #3
 801383a:	e14d      	b.n	8013ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801383c:	4b1a      	ldr	r3, [pc, #104]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 801383e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013840:	f003 0302 	and.w	r3, r3, #2
 8013844:	2b00      	cmp	r3, #0
 8013846:	d1f0      	bne.n	801382a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	f003 0304 	and.w	r3, r3, #4
 8013850:	2b00      	cmp	r3, #0
 8013852:	f000 80a0 	beq.w	8013996 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013856:	2300      	movs	r3, #0
 8013858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801385a:	4b13      	ldr	r3, [pc, #76]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 801385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801385e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013862:	2b00      	cmp	r3, #0
 8013864:	d10f      	bne.n	8013886 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013866:	2300      	movs	r3, #0
 8013868:	60bb      	str	r3, [r7, #8]
 801386a:	4b0f      	ldr	r3, [pc, #60]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 801386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801386e:	4a0e      	ldr	r2, [pc, #56]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 8013870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013874:	6413      	str	r3, [r2, #64]	; 0x40
 8013876:	4b0c      	ldr	r3, [pc, #48]	; (80138a8 <HAL_RCC_OscConfig+0x2ac>)
 8013878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801387a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801387e:	60bb      	str	r3, [r7, #8]
 8013880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013882:	2301      	movs	r3, #1
 8013884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013886:	4b0b      	ldr	r3, [pc, #44]	; (80138b4 <HAL_RCC_OscConfig+0x2b8>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801388e:	2b00      	cmp	r3, #0
 8013890:	d121      	bne.n	80138d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013892:	4b08      	ldr	r3, [pc, #32]	; (80138b4 <HAL_RCC_OscConfig+0x2b8>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	4a07      	ldr	r2, [pc, #28]	; (80138b4 <HAL_RCC_OscConfig+0x2b8>)
 8013898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801389c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801389e:	f7fe fb09 	bl	8011eb4 <HAL_GetTick>
 80138a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80138a4:	e011      	b.n	80138ca <HAL_RCC_OscConfig+0x2ce>
 80138a6:	bf00      	nop
 80138a8:	40023800 	.word	0x40023800
 80138ac:	42470000 	.word	0x42470000
 80138b0:	42470e80 	.word	0x42470e80
 80138b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80138b8:	f7fe fafc 	bl	8011eb4 <HAL_GetTick>
 80138bc:	4602      	mov	r2, r0
 80138be:	693b      	ldr	r3, [r7, #16]
 80138c0:	1ad3      	subs	r3, r2, r3
 80138c2:	2b02      	cmp	r3, #2
 80138c4:	d901      	bls.n	80138ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80138c6:	2303      	movs	r3, #3
 80138c8:	e106      	b.n	8013ad8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80138ca:	4b85      	ldr	r3, [pc, #532]	; (8013ae0 <HAL_RCC_OscConfig+0x4e4>)
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d0f0      	beq.n	80138b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	689b      	ldr	r3, [r3, #8]
 80138da:	2b01      	cmp	r3, #1
 80138dc:	d106      	bne.n	80138ec <HAL_RCC_OscConfig+0x2f0>
 80138de:	4b81      	ldr	r3, [pc, #516]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 80138e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138e2:	4a80      	ldr	r2, [pc, #512]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 80138e4:	f043 0301 	orr.w	r3, r3, #1
 80138e8:	6713      	str	r3, [r2, #112]	; 0x70
 80138ea:	e01c      	b.n	8013926 <HAL_RCC_OscConfig+0x32a>
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	689b      	ldr	r3, [r3, #8]
 80138f0:	2b05      	cmp	r3, #5
 80138f2:	d10c      	bne.n	801390e <HAL_RCC_OscConfig+0x312>
 80138f4:	4b7b      	ldr	r3, [pc, #492]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 80138f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138f8:	4a7a      	ldr	r2, [pc, #488]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 80138fa:	f043 0304 	orr.w	r3, r3, #4
 80138fe:	6713      	str	r3, [r2, #112]	; 0x70
 8013900:	4b78      	ldr	r3, [pc, #480]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 8013902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013904:	4a77      	ldr	r2, [pc, #476]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 8013906:	f043 0301 	orr.w	r3, r3, #1
 801390a:	6713      	str	r3, [r2, #112]	; 0x70
 801390c:	e00b      	b.n	8013926 <HAL_RCC_OscConfig+0x32a>
 801390e:	4b75      	ldr	r3, [pc, #468]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 8013910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013912:	4a74      	ldr	r2, [pc, #464]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 8013914:	f023 0301 	bic.w	r3, r3, #1
 8013918:	6713      	str	r3, [r2, #112]	; 0x70
 801391a:	4b72      	ldr	r3, [pc, #456]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 801391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801391e:	4a71      	ldr	r2, [pc, #452]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 8013920:	f023 0304 	bic.w	r3, r3, #4
 8013924:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	689b      	ldr	r3, [r3, #8]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d015      	beq.n	801395a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801392e:	f7fe fac1 	bl	8011eb4 <HAL_GetTick>
 8013932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013934:	e00a      	b.n	801394c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013936:	f7fe fabd 	bl	8011eb4 <HAL_GetTick>
 801393a:	4602      	mov	r2, r0
 801393c:	693b      	ldr	r3, [r7, #16]
 801393e:	1ad3      	subs	r3, r2, r3
 8013940:	f241 3288 	movw	r2, #5000	; 0x1388
 8013944:	4293      	cmp	r3, r2
 8013946:	d901      	bls.n	801394c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8013948:	2303      	movs	r3, #3
 801394a:	e0c5      	b.n	8013ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801394c:	4b65      	ldr	r3, [pc, #404]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 801394e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013950:	f003 0302 	and.w	r3, r3, #2
 8013954:	2b00      	cmp	r3, #0
 8013956:	d0ee      	beq.n	8013936 <HAL_RCC_OscConfig+0x33a>
 8013958:	e014      	b.n	8013984 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801395a:	f7fe faab 	bl	8011eb4 <HAL_GetTick>
 801395e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013960:	e00a      	b.n	8013978 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013962:	f7fe faa7 	bl	8011eb4 <HAL_GetTick>
 8013966:	4602      	mov	r2, r0
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	1ad3      	subs	r3, r2, r3
 801396c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013970:	4293      	cmp	r3, r2
 8013972:	d901      	bls.n	8013978 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8013974:	2303      	movs	r3, #3
 8013976:	e0af      	b.n	8013ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013978:	4b5a      	ldr	r3, [pc, #360]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 801397a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801397c:	f003 0302 	and.w	r3, r3, #2
 8013980:	2b00      	cmp	r3, #0
 8013982:	d1ee      	bne.n	8013962 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013984:	7dfb      	ldrb	r3, [r7, #23]
 8013986:	2b01      	cmp	r3, #1
 8013988:	d105      	bne.n	8013996 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801398a:	4b56      	ldr	r3, [pc, #344]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 801398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801398e:	4a55      	ldr	r2, [pc, #340]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 8013990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013994:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	699b      	ldr	r3, [r3, #24]
 801399a:	2b00      	cmp	r3, #0
 801399c:	f000 809b 	beq.w	8013ad6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80139a0:	4b50      	ldr	r3, [pc, #320]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 80139a2:	689b      	ldr	r3, [r3, #8]
 80139a4:	f003 030c 	and.w	r3, r3, #12
 80139a8:	2b08      	cmp	r3, #8
 80139aa:	d05c      	beq.n	8013a66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	699b      	ldr	r3, [r3, #24]
 80139b0:	2b02      	cmp	r3, #2
 80139b2:	d141      	bne.n	8013a38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80139b4:	4b4c      	ldr	r3, [pc, #304]	; (8013ae8 <HAL_RCC_OscConfig+0x4ec>)
 80139b6:	2200      	movs	r2, #0
 80139b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80139ba:	f7fe fa7b 	bl	8011eb4 <HAL_GetTick>
 80139be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80139c0:	e008      	b.n	80139d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80139c2:	f7fe fa77 	bl	8011eb4 <HAL_GetTick>
 80139c6:	4602      	mov	r2, r0
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	1ad3      	subs	r3, r2, r3
 80139cc:	2b02      	cmp	r3, #2
 80139ce:	d901      	bls.n	80139d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80139d0:	2303      	movs	r3, #3
 80139d2:	e081      	b.n	8013ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80139d4:	4b43      	ldr	r3, [pc, #268]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d1f0      	bne.n	80139c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	69da      	ldr	r2, [r3, #28]
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	6a1b      	ldr	r3, [r3, #32]
 80139e8:	431a      	orrs	r2, r3
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139ee:	019b      	lsls	r3, r3, #6
 80139f0:	431a      	orrs	r2, r3
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139f6:	085b      	lsrs	r3, r3, #1
 80139f8:	3b01      	subs	r3, #1
 80139fa:	041b      	lsls	r3, r3, #16
 80139fc:	431a      	orrs	r2, r3
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a02:	061b      	lsls	r3, r3, #24
 8013a04:	4937      	ldr	r1, [pc, #220]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 8013a06:	4313      	orrs	r3, r2
 8013a08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013a0a:	4b37      	ldr	r3, [pc, #220]	; (8013ae8 <HAL_RCC_OscConfig+0x4ec>)
 8013a0c:	2201      	movs	r2, #1
 8013a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013a10:	f7fe fa50 	bl	8011eb4 <HAL_GetTick>
 8013a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013a16:	e008      	b.n	8013a2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013a18:	f7fe fa4c 	bl	8011eb4 <HAL_GetTick>
 8013a1c:	4602      	mov	r2, r0
 8013a1e:	693b      	ldr	r3, [r7, #16]
 8013a20:	1ad3      	subs	r3, r2, r3
 8013a22:	2b02      	cmp	r3, #2
 8013a24:	d901      	bls.n	8013a2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8013a26:	2303      	movs	r3, #3
 8013a28:	e056      	b.n	8013ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013a2a:	4b2e      	ldr	r3, [pc, #184]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d0f0      	beq.n	8013a18 <HAL_RCC_OscConfig+0x41c>
 8013a36:	e04e      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013a38:	4b2b      	ldr	r3, [pc, #172]	; (8013ae8 <HAL_RCC_OscConfig+0x4ec>)
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013a3e:	f7fe fa39 	bl	8011eb4 <HAL_GetTick>
 8013a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013a44:	e008      	b.n	8013a58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013a46:	f7fe fa35 	bl	8011eb4 <HAL_GetTick>
 8013a4a:	4602      	mov	r2, r0
 8013a4c:	693b      	ldr	r3, [r7, #16]
 8013a4e:	1ad3      	subs	r3, r2, r3
 8013a50:	2b02      	cmp	r3, #2
 8013a52:	d901      	bls.n	8013a58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8013a54:	2303      	movs	r3, #3
 8013a56:	e03f      	b.n	8013ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013a58:	4b22      	ldr	r3, [pc, #136]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d1f0      	bne.n	8013a46 <HAL_RCC_OscConfig+0x44a>
 8013a64:	e037      	b.n	8013ad6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	699b      	ldr	r3, [r3, #24]
 8013a6a:	2b01      	cmp	r3, #1
 8013a6c:	d101      	bne.n	8013a72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8013a6e:	2301      	movs	r3, #1
 8013a70:	e032      	b.n	8013ad8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013a72:	4b1c      	ldr	r3, [pc, #112]	; (8013ae4 <HAL_RCC_OscConfig+0x4e8>)
 8013a74:	685b      	ldr	r3, [r3, #4]
 8013a76:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	699b      	ldr	r3, [r3, #24]
 8013a7c:	2b01      	cmp	r3, #1
 8013a7e:	d028      	beq.n	8013ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013a8a:	429a      	cmp	r2, r3
 8013a8c:	d121      	bne.n	8013ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013a98:	429a      	cmp	r2, r3
 8013a9a:	d11a      	bne.n	8013ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013a9c:	68fa      	ldr	r2, [r7, #12]
 8013a9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013aa2:	4013      	ands	r3, r2
 8013aa4:	687a      	ldr	r2, [r7, #4]
 8013aa6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013aa8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013aaa:	4293      	cmp	r3, r2
 8013aac:	d111      	bne.n	8013ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ab8:	085b      	lsrs	r3, r3, #1
 8013aba:	3b01      	subs	r3, #1
 8013abc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013abe:	429a      	cmp	r2, r3
 8013ac0:	d107      	bne.n	8013ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013acc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013ace:	429a      	cmp	r2, r3
 8013ad0:	d001      	beq.n	8013ad6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	e000      	b.n	8013ad8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8013ad6:	2300      	movs	r3, #0
}
 8013ad8:	4618      	mov	r0, r3
 8013ada:	3718      	adds	r7, #24
 8013adc:	46bd      	mov	sp, r7
 8013ade:	bd80      	pop	{r7, pc}
 8013ae0:	40007000 	.word	0x40007000
 8013ae4:	40023800 	.word	0x40023800
 8013ae8:	42470060 	.word	0x42470060

08013aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b084      	sub	sp, #16
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
 8013af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d101      	bne.n	8013b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013afc:	2301      	movs	r3, #1
 8013afe:	e0cc      	b.n	8013c9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013b00:	4b68      	ldr	r3, [pc, #416]	; (8013ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	f003 0307 	and.w	r3, r3, #7
 8013b08:	683a      	ldr	r2, [r7, #0]
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d90c      	bls.n	8013b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013b0e:	4b65      	ldr	r3, [pc, #404]	; (8013ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8013b10:	683a      	ldr	r2, [r7, #0]
 8013b12:	b2d2      	uxtb	r2, r2
 8013b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013b16:	4b63      	ldr	r3, [pc, #396]	; (8013ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	f003 0307 	and.w	r3, r3, #7
 8013b1e:	683a      	ldr	r2, [r7, #0]
 8013b20:	429a      	cmp	r2, r3
 8013b22:	d001      	beq.n	8013b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8013b24:	2301      	movs	r3, #1
 8013b26:	e0b8      	b.n	8013c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	f003 0302 	and.w	r3, r3, #2
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d020      	beq.n	8013b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	f003 0304 	and.w	r3, r3, #4
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d005      	beq.n	8013b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013b40:	4b59      	ldr	r3, [pc, #356]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b42:	689b      	ldr	r3, [r3, #8]
 8013b44:	4a58      	ldr	r2, [pc, #352]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8013b4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	f003 0308 	and.w	r3, r3, #8
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d005      	beq.n	8013b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013b58:	4b53      	ldr	r3, [pc, #332]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b5a:	689b      	ldr	r3, [r3, #8]
 8013b5c:	4a52      	ldr	r2, [pc, #328]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8013b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013b64:	4b50      	ldr	r3, [pc, #320]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b66:	689b      	ldr	r3, [r3, #8]
 8013b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	689b      	ldr	r3, [r3, #8]
 8013b70:	494d      	ldr	r1, [pc, #308]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b72:	4313      	orrs	r3, r2
 8013b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	f003 0301 	and.w	r3, r3, #1
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d044      	beq.n	8013c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	685b      	ldr	r3, [r3, #4]
 8013b86:	2b01      	cmp	r3, #1
 8013b88:	d107      	bne.n	8013b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013b8a:	4b47      	ldr	r3, [pc, #284]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d119      	bne.n	8013bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013b96:	2301      	movs	r3, #1
 8013b98:	e07f      	b.n	8013c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	685b      	ldr	r3, [r3, #4]
 8013b9e:	2b02      	cmp	r3, #2
 8013ba0:	d003      	beq.n	8013baa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8013ba6:	2b03      	cmp	r3, #3
 8013ba8:	d107      	bne.n	8013bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013baa:	4b3f      	ldr	r3, [pc, #252]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d109      	bne.n	8013bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013bb6:	2301      	movs	r3, #1
 8013bb8:	e06f      	b.n	8013c9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013bba:	4b3b      	ldr	r3, [pc, #236]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	f003 0302 	and.w	r3, r3, #2
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d101      	bne.n	8013bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	e067      	b.n	8013c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013bca:	4b37      	ldr	r3, [pc, #220]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013bcc:	689b      	ldr	r3, [r3, #8]
 8013bce:	f023 0203 	bic.w	r2, r3, #3
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	685b      	ldr	r3, [r3, #4]
 8013bd6:	4934      	ldr	r1, [pc, #208]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013bd8:	4313      	orrs	r3, r2
 8013bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013bdc:	f7fe f96a 	bl	8011eb4 <HAL_GetTick>
 8013be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013be2:	e00a      	b.n	8013bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013be4:	f7fe f966 	bl	8011eb4 <HAL_GetTick>
 8013be8:	4602      	mov	r2, r0
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	1ad3      	subs	r3, r2, r3
 8013bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8013bf2:	4293      	cmp	r3, r2
 8013bf4:	d901      	bls.n	8013bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8013bf6:	2303      	movs	r3, #3
 8013bf8:	e04f      	b.n	8013c9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013bfa:	4b2b      	ldr	r3, [pc, #172]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013bfc:	689b      	ldr	r3, [r3, #8]
 8013bfe:	f003 020c 	and.w	r2, r3, #12
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	685b      	ldr	r3, [r3, #4]
 8013c06:	009b      	lsls	r3, r3, #2
 8013c08:	429a      	cmp	r2, r3
 8013c0a:	d1eb      	bne.n	8013be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013c0c:	4b25      	ldr	r3, [pc, #148]	; (8013ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	f003 0307 	and.w	r3, r3, #7
 8013c14:	683a      	ldr	r2, [r7, #0]
 8013c16:	429a      	cmp	r2, r3
 8013c18:	d20c      	bcs.n	8013c34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013c1a:	4b22      	ldr	r3, [pc, #136]	; (8013ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8013c1c:	683a      	ldr	r2, [r7, #0]
 8013c1e:	b2d2      	uxtb	r2, r2
 8013c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013c22:	4b20      	ldr	r3, [pc, #128]	; (8013ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	f003 0307 	and.w	r3, r3, #7
 8013c2a:	683a      	ldr	r2, [r7, #0]
 8013c2c:	429a      	cmp	r2, r3
 8013c2e:	d001      	beq.n	8013c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013c30:	2301      	movs	r3, #1
 8013c32:	e032      	b.n	8013c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	f003 0304 	and.w	r3, r3, #4
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d008      	beq.n	8013c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013c40:	4b19      	ldr	r3, [pc, #100]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013c42:	689b      	ldr	r3, [r3, #8]
 8013c44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	68db      	ldr	r3, [r3, #12]
 8013c4c:	4916      	ldr	r1, [pc, #88]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013c4e:	4313      	orrs	r3, r2
 8013c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	f003 0308 	and.w	r3, r3, #8
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d009      	beq.n	8013c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013c5e:	4b12      	ldr	r3, [pc, #72]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013c60:	689b      	ldr	r3, [r3, #8]
 8013c62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	691b      	ldr	r3, [r3, #16]
 8013c6a:	00db      	lsls	r3, r3, #3
 8013c6c:	490e      	ldr	r1, [pc, #56]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013c6e:	4313      	orrs	r3, r2
 8013c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013c72:	f000 f821 	bl	8013cb8 <HAL_RCC_GetSysClockFreq>
 8013c76:	4602      	mov	r2, r0
 8013c78:	4b0b      	ldr	r3, [pc, #44]	; (8013ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8013c7a:	689b      	ldr	r3, [r3, #8]
 8013c7c:	091b      	lsrs	r3, r3, #4
 8013c7e:	f003 030f 	and.w	r3, r3, #15
 8013c82:	490a      	ldr	r1, [pc, #40]	; (8013cac <HAL_RCC_ClockConfig+0x1c0>)
 8013c84:	5ccb      	ldrb	r3, [r1, r3]
 8013c86:	fa22 f303 	lsr.w	r3, r2, r3
 8013c8a:	4a09      	ldr	r2, [pc, #36]	; (8013cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8013c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8013c8e:	4b09      	ldr	r3, [pc, #36]	; (8013cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7fe f8ca 	bl	8011e2c <HAL_InitTick>

  return HAL_OK;
 8013c98:	2300      	movs	r3, #0
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	3710      	adds	r7, #16
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}
 8013ca2:	bf00      	nop
 8013ca4:	40023c00 	.word	0x40023c00
 8013ca8:	40023800 	.word	0x40023800
 8013cac:	0801619c 	.word	0x0801619c
 8013cb0:	20000018 	.word	0x20000018
 8013cb4:	20000080 	.word	0x20000080

08013cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013cb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8013cbc:	b084      	sub	sp, #16
 8013cbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	607b      	str	r3, [r7, #4]
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	60fb      	str	r3, [r7, #12]
 8013cc8:	2300      	movs	r3, #0
 8013cca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8013ccc:	2300      	movs	r3, #0
 8013cce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013cd0:	4b67      	ldr	r3, [pc, #412]	; (8013e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013cd2:	689b      	ldr	r3, [r3, #8]
 8013cd4:	f003 030c 	and.w	r3, r3, #12
 8013cd8:	2b08      	cmp	r3, #8
 8013cda:	d00d      	beq.n	8013cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8013cdc:	2b08      	cmp	r3, #8
 8013cde:	f200 80bd 	bhi.w	8013e5c <HAL_RCC_GetSysClockFreq+0x1a4>
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d002      	beq.n	8013cec <HAL_RCC_GetSysClockFreq+0x34>
 8013ce6:	2b04      	cmp	r3, #4
 8013ce8:	d003      	beq.n	8013cf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8013cea:	e0b7      	b.n	8013e5c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013cec:	4b61      	ldr	r3, [pc, #388]	; (8013e74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8013cee:	60bb      	str	r3, [r7, #8]
       break;
 8013cf0:	e0b7      	b.n	8013e62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013cf2:	4b61      	ldr	r3, [pc, #388]	; (8013e78 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8013cf4:	60bb      	str	r3, [r7, #8]
      break;
 8013cf6:	e0b4      	b.n	8013e62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013cf8:	4b5d      	ldr	r3, [pc, #372]	; (8013e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013cfa:	685b      	ldr	r3, [r3, #4]
 8013cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013d00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013d02:	4b5b      	ldr	r3, [pc, #364]	; (8013e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013d04:	685b      	ldr	r3, [r3, #4]
 8013d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d04d      	beq.n	8013daa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013d0e:	4b58      	ldr	r3, [pc, #352]	; (8013e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013d10:	685b      	ldr	r3, [r3, #4]
 8013d12:	099b      	lsrs	r3, r3, #6
 8013d14:	461a      	mov	r2, r3
 8013d16:	f04f 0300 	mov.w	r3, #0
 8013d1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013d1e:	f04f 0100 	mov.w	r1, #0
 8013d22:	ea02 0800 	and.w	r8, r2, r0
 8013d26:	ea03 0901 	and.w	r9, r3, r1
 8013d2a:	4640      	mov	r0, r8
 8013d2c:	4649      	mov	r1, r9
 8013d2e:	f04f 0200 	mov.w	r2, #0
 8013d32:	f04f 0300 	mov.w	r3, #0
 8013d36:	014b      	lsls	r3, r1, #5
 8013d38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8013d3c:	0142      	lsls	r2, r0, #5
 8013d3e:	4610      	mov	r0, r2
 8013d40:	4619      	mov	r1, r3
 8013d42:	ebb0 0008 	subs.w	r0, r0, r8
 8013d46:	eb61 0109 	sbc.w	r1, r1, r9
 8013d4a:	f04f 0200 	mov.w	r2, #0
 8013d4e:	f04f 0300 	mov.w	r3, #0
 8013d52:	018b      	lsls	r3, r1, #6
 8013d54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8013d58:	0182      	lsls	r2, r0, #6
 8013d5a:	1a12      	subs	r2, r2, r0
 8013d5c:	eb63 0301 	sbc.w	r3, r3, r1
 8013d60:	f04f 0000 	mov.w	r0, #0
 8013d64:	f04f 0100 	mov.w	r1, #0
 8013d68:	00d9      	lsls	r1, r3, #3
 8013d6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013d6e:	00d0      	lsls	r0, r2, #3
 8013d70:	4602      	mov	r2, r0
 8013d72:	460b      	mov	r3, r1
 8013d74:	eb12 0208 	adds.w	r2, r2, r8
 8013d78:	eb43 0309 	adc.w	r3, r3, r9
 8013d7c:	f04f 0000 	mov.w	r0, #0
 8013d80:	f04f 0100 	mov.w	r1, #0
 8013d84:	0259      	lsls	r1, r3, #9
 8013d86:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8013d8a:	0250      	lsls	r0, r2, #9
 8013d8c:	4602      	mov	r2, r0
 8013d8e:	460b      	mov	r3, r1
 8013d90:	4610      	mov	r0, r2
 8013d92:	4619      	mov	r1, r3
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	461a      	mov	r2, r3
 8013d98:	f04f 0300 	mov.w	r3, #0
 8013d9c:	f7ec fac0 	bl	8000320 <__aeabi_uldivmod>
 8013da0:	4602      	mov	r2, r0
 8013da2:	460b      	mov	r3, r1
 8013da4:	4613      	mov	r3, r2
 8013da6:	60fb      	str	r3, [r7, #12]
 8013da8:	e04a      	b.n	8013e40 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013daa:	4b31      	ldr	r3, [pc, #196]	; (8013e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013dac:	685b      	ldr	r3, [r3, #4]
 8013dae:	099b      	lsrs	r3, r3, #6
 8013db0:	461a      	mov	r2, r3
 8013db2:	f04f 0300 	mov.w	r3, #0
 8013db6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013dba:	f04f 0100 	mov.w	r1, #0
 8013dbe:	ea02 0400 	and.w	r4, r2, r0
 8013dc2:	ea03 0501 	and.w	r5, r3, r1
 8013dc6:	4620      	mov	r0, r4
 8013dc8:	4629      	mov	r1, r5
 8013dca:	f04f 0200 	mov.w	r2, #0
 8013dce:	f04f 0300 	mov.w	r3, #0
 8013dd2:	014b      	lsls	r3, r1, #5
 8013dd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8013dd8:	0142      	lsls	r2, r0, #5
 8013dda:	4610      	mov	r0, r2
 8013ddc:	4619      	mov	r1, r3
 8013dde:	1b00      	subs	r0, r0, r4
 8013de0:	eb61 0105 	sbc.w	r1, r1, r5
 8013de4:	f04f 0200 	mov.w	r2, #0
 8013de8:	f04f 0300 	mov.w	r3, #0
 8013dec:	018b      	lsls	r3, r1, #6
 8013dee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8013df2:	0182      	lsls	r2, r0, #6
 8013df4:	1a12      	subs	r2, r2, r0
 8013df6:	eb63 0301 	sbc.w	r3, r3, r1
 8013dfa:	f04f 0000 	mov.w	r0, #0
 8013dfe:	f04f 0100 	mov.w	r1, #0
 8013e02:	00d9      	lsls	r1, r3, #3
 8013e04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013e08:	00d0      	lsls	r0, r2, #3
 8013e0a:	4602      	mov	r2, r0
 8013e0c:	460b      	mov	r3, r1
 8013e0e:	1912      	adds	r2, r2, r4
 8013e10:	eb45 0303 	adc.w	r3, r5, r3
 8013e14:	f04f 0000 	mov.w	r0, #0
 8013e18:	f04f 0100 	mov.w	r1, #0
 8013e1c:	0299      	lsls	r1, r3, #10
 8013e1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8013e22:	0290      	lsls	r0, r2, #10
 8013e24:	4602      	mov	r2, r0
 8013e26:	460b      	mov	r3, r1
 8013e28:	4610      	mov	r0, r2
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	461a      	mov	r2, r3
 8013e30:	f04f 0300 	mov.w	r3, #0
 8013e34:	f7ec fa74 	bl	8000320 <__aeabi_uldivmod>
 8013e38:	4602      	mov	r2, r0
 8013e3a:	460b      	mov	r3, r1
 8013e3c:	4613      	mov	r3, r2
 8013e3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013e40:	4b0b      	ldr	r3, [pc, #44]	; (8013e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013e42:	685b      	ldr	r3, [r3, #4]
 8013e44:	0c1b      	lsrs	r3, r3, #16
 8013e46:	f003 0303 	and.w	r3, r3, #3
 8013e4a:	3301      	adds	r3, #1
 8013e4c:	005b      	lsls	r3, r3, #1
 8013e4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8013e50:	68fa      	ldr	r2, [r7, #12]
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e58:	60bb      	str	r3, [r7, #8]
      break;
 8013e5a:	e002      	b.n	8013e62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013e5c:	4b05      	ldr	r3, [pc, #20]	; (8013e74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8013e5e:	60bb      	str	r3, [r7, #8]
      break;
 8013e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013e62:	68bb      	ldr	r3, [r7, #8]
}
 8013e64:	4618      	mov	r0, r3
 8013e66:	3710      	adds	r7, #16
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8013e6e:	bf00      	nop
 8013e70:	40023800 	.word	0x40023800
 8013e74:	00f42400 	.word	0x00f42400
 8013e78:	007a1200 	.word	0x007a1200

08013e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013e7c:	b480      	push	{r7}
 8013e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013e80:	4b03      	ldr	r3, [pc, #12]	; (8013e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8013e82:	681b      	ldr	r3, [r3, #0]
}
 8013e84:	4618      	mov	r0, r3
 8013e86:	46bd      	mov	sp, r7
 8013e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8c:	4770      	bx	lr
 8013e8e:	bf00      	nop
 8013e90:	20000018 	.word	0x20000018

08013e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013e98:	f7ff fff0 	bl	8013e7c <HAL_RCC_GetHCLKFreq>
 8013e9c:	4602      	mov	r2, r0
 8013e9e:	4b05      	ldr	r3, [pc, #20]	; (8013eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013ea0:	689b      	ldr	r3, [r3, #8]
 8013ea2:	0a9b      	lsrs	r3, r3, #10
 8013ea4:	f003 0307 	and.w	r3, r3, #7
 8013ea8:	4903      	ldr	r1, [pc, #12]	; (8013eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013eaa:	5ccb      	ldrb	r3, [r1, r3]
 8013eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	bd80      	pop	{r7, pc}
 8013eb4:	40023800 	.word	0x40023800
 8013eb8:	080161ac 	.word	0x080161ac

08013ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8013ec0:	f7ff ffdc 	bl	8013e7c <HAL_RCC_GetHCLKFreq>
 8013ec4:	4602      	mov	r2, r0
 8013ec6:	4b05      	ldr	r3, [pc, #20]	; (8013edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8013ec8:	689b      	ldr	r3, [r3, #8]
 8013eca:	0b5b      	lsrs	r3, r3, #13
 8013ecc:	f003 0307 	and.w	r3, r3, #7
 8013ed0:	4903      	ldr	r1, [pc, #12]	; (8013ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013ed2:	5ccb      	ldrb	r3, [r1, r3]
 8013ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013ed8:	4618      	mov	r0, r3
 8013eda:	bd80      	pop	{r7, pc}
 8013edc:	40023800 	.word	0x40023800
 8013ee0:	080161ac 	.word	0x080161ac

08013ee4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b082      	sub	sp, #8
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d101      	bne.n	8013ef6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013ef2:	2301      	movs	r3, #1
 8013ef4:	e041      	b.n	8013f7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013efc:	b2db      	uxtb	r3, r3
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d106      	bne.n	8013f10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	2200      	movs	r2, #0
 8013f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013f0a:	6878      	ldr	r0, [r7, #4]
 8013f0c:	f7ed f810 	bl	8000f30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	2202      	movs	r2, #2
 8013f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	681a      	ldr	r2, [r3, #0]
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	3304      	adds	r3, #4
 8013f20:	4619      	mov	r1, r3
 8013f22:	4610      	mov	r0, r2
 8013f24:	f000 fa04 	bl	8014330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	2201      	movs	r2, #1
 8013f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2201      	movs	r2, #1
 8013f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2201      	movs	r2, #1
 8013f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	2201      	movs	r2, #1
 8013f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	2201      	movs	r2, #1
 8013f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	2201      	movs	r2, #1
 8013f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	2201      	movs	r2, #1
 8013f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	2201      	movs	r2, #1
 8013f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2201      	movs	r2, #1
 8013f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2201      	movs	r2, #1
 8013f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013f78:	2300      	movs	r3, #0
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	3708      	adds	r7, #8
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd80      	pop	{r7, pc}
	...

08013f84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b084      	sub	sp, #16
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
 8013f8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8013f8e:	683b      	ldr	r3, [r7, #0]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d109      	bne.n	8013fa8 <HAL_TIM_PWM_Start+0x24>
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013f9a:	b2db      	uxtb	r3, r3
 8013f9c:	2b01      	cmp	r3, #1
 8013f9e:	bf14      	ite	ne
 8013fa0:	2301      	movne	r3, #1
 8013fa2:	2300      	moveq	r3, #0
 8013fa4:	b2db      	uxtb	r3, r3
 8013fa6:	e022      	b.n	8013fee <HAL_TIM_PWM_Start+0x6a>
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	2b04      	cmp	r3, #4
 8013fac:	d109      	bne.n	8013fc2 <HAL_TIM_PWM_Start+0x3e>
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013fb4:	b2db      	uxtb	r3, r3
 8013fb6:	2b01      	cmp	r3, #1
 8013fb8:	bf14      	ite	ne
 8013fba:	2301      	movne	r3, #1
 8013fbc:	2300      	moveq	r3, #0
 8013fbe:	b2db      	uxtb	r3, r3
 8013fc0:	e015      	b.n	8013fee <HAL_TIM_PWM_Start+0x6a>
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	2b08      	cmp	r3, #8
 8013fc6:	d109      	bne.n	8013fdc <HAL_TIM_PWM_Start+0x58>
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013fce:	b2db      	uxtb	r3, r3
 8013fd0:	2b01      	cmp	r3, #1
 8013fd2:	bf14      	ite	ne
 8013fd4:	2301      	movne	r3, #1
 8013fd6:	2300      	moveq	r3, #0
 8013fd8:	b2db      	uxtb	r3, r3
 8013fda:	e008      	b.n	8013fee <HAL_TIM_PWM_Start+0x6a>
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013fe2:	b2db      	uxtb	r3, r3
 8013fe4:	2b01      	cmp	r3, #1
 8013fe6:	bf14      	ite	ne
 8013fe8:	2301      	movne	r3, #1
 8013fea:	2300      	moveq	r3, #0
 8013fec:	b2db      	uxtb	r3, r3
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d001      	beq.n	8013ff6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8013ff2:	2301      	movs	r3, #1
 8013ff4:	e068      	b.n	80140c8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013ff6:	683b      	ldr	r3, [r7, #0]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d104      	bne.n	8014006 <HAL_TIM_PWM_Start+0x82>
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	2202      	movs	r2, #2
 8014000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014004:	e013      	b.n	801402e <HAL_TIM_PWM_Start+0xaa>
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	2b04      	cmp	r3, #4
 801400a:	d104      	bne.n	8014016 <HAL_TIM_PWM_Start+0x92>
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	2202      	movs	r2, #2
 8014010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014014:	e00b      	b.n	801402e <HAL_TIM_PWM_Start+0xaa>
 8014016:	683b      	ldr	r3, [r7, #0]
 8014018:	2b08      	cmp	r3, #8
 801401a:	d104      	bne.n	8014026 <HAL_TIM_PWM_Start+0xa2>
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	2202      	movs	r2, #2
 8014020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014024:	e003      	b.n	801402e <HAL_TIM_PWM_Start+0xaa>
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	2202      	movs	r2, #2
 801402a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	2201      	movs	r2, #1
 8014034:	6839      	ldr	r1, [r7, #0]
 8014036:	4618      	mov	r0, r3
 8014038:	f000 fb86 	bl	8014748 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	4a23      	ldr	r2, [pc, #140]	; (80140d0 <HAL_TIM_PWM_Start+0x14c>)
 8014042:	4293      	cmp	r3, r2
 8014044:	d107      	bne.n	8014056 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014054:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	4a1d      	ldr	r2, [pc, #116]	; (80140d0 <HAL_TIM_PWM_Start+0x14c>)
 801405c:	4293      	cmp	r3, r2
 801405e:	d018      	beq.n	8014092 <HAL_TIM_PWM_Start+0x10e>
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014068:	d013      	beq.n	8014092 <HAL_TIM_PWM_Start+0x10e>
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	4a19      	ldr	r2, [pc, #100]	; (80140d4 <HAL_TIM_PWM_Start+0x150>)
 8014070:	4293      	cmp	r3, r2
 8014072:	d00e      	beq.n	8014092 <HAL_TIM_PWM_Start+0x10e>
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	4a17      	ldr	r2, [pc, #92]	; (80140d8 <HAL_TIM_PWM_Start+0x154>)
 801407a:	4293      	cmp	r3, r2
 801407c:	d009      	beq.n	8014092 <HAL_TIM_PWM_Start+0x10e>
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	4a16      	ldr	r2, [pc, #88]	; (80140dc <HAL_TIM_PWM_Start+0x158>)
 8014084:	4293      	cmp	r3, r2
 8014086:	d004      	beq.n	8014092 <HAL_TIM_PWM_Start+0x10e>
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	4a14      	ldr	r2, [pc, #80]	; (80140e0 <HAL_TIM_PWM_Start+0x15c>)
 801408e:	4293      	cmp	r3, r2
 8014090:	d111      	bne.n	80140b6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	689b      	ldr	r3, [r3, #8]
 8014098:	f003 0307 	and.w	r3, r3, #7
 801409c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	2b06      	cmp	r3, #6
 80140a2:	d010      	beq.n	80140c6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	681a      	ldr	r2, [r3, #0]
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	f042 0201 	orr.w	r2, r2, #1
 80140b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80140b4:	e007      	b.n	80140c6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	681a      	ldr	r2, [r3, #0]
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	f042 0201 	orr.w	r2, r2, #1
 80140c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80140c6:	2300      	movs	r3, #0
}
 80140c8:	4618      	mov	r0, r3
 80140ca:	3710      	adds	r7, #16
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}
 80140d0:	40010000 	.word	0x40010000
 80140d4:	40000400 	.word	0x40000400
 80140d8:	40000800 	.word	0x40000800
 80140dc:	40000c00 	.word	0x40000c00
 80140e0:	40014000 	.word	0x40014000

080140e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b082      	sub	sp, #8
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
 80140ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	2200      	movs	r2, #0
 80140f4:	6839      	ldr	r1, [r7, #0]
 80140f6:	4618      	mov	r0, r3
 80140f8:	f000 fb26 	bl	8014748 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	4a29      	ldr	r2, [pc, #164]	; (80141a8 <HAL_TIM_PWM_Stop+0xc4>)
 8014102:	4293      	cmp	r3, r2
 8014104:	d117      	bne.n	8014136 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	6a1a      	ldr	r2, [r3, #32]
 801410c:	f241 1311 	movw	r3, #4369	; 0x1111
 8014110:	4013      	ands	r3, r2
 8014112:	2b00      	cmp	r3, #0
 8014114:	d10f      	bne.n	8014136 <HAL_TIM_PWM_Stop+0x52>
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	6a1a      	ldr	r2, [r3, #32]
 801411c:	f240 4344 	movw	r3, #1092	; 0x444
 8014120:	4013      	ands	r3, r2
 8014122:	2b00      	cmp	r3, #0
 8014124:	d107      	bne.n	8014136 <HAL_TIM_PWM_Stop+0x52>
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014134:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	6a1a      	ldr	r2, [r3, #32]
 801413c:	f241 1311 	movw	r3, #4369	; 0x1111
 8014140:	4013      	ands	r3, r2
 8014142:	2b00      	cmp	r3, #0
 8014144:	d10f      	bne.n	8014166 <HAL_TIM_PWM_Stop+0x82>
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	6a1a      	ldr	r2, [r3, #32]
 801414c:	f240 4344 	movw	r3, #1092	; 0x444
 8014150:	4013      	ands	r3, r2
 8014152:	2b00      	cmp	r3, #0
 8014154:	d107      	bne.n	8014166 <HAL_TIM_PWM_Stop+0x82>
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	681a      	ldr	r2, [r3, #0]
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	f022 0201 	bic.w	r2, r2, #1
 8014164:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8014166:	683b      	ldr	r3, [r7, #0]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d104      	bne.n	8014176 <HAL_TIM_PWM_Stop+0x92>
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	2201      	movs	r2, #1
 8014170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014174:	e013      	b.n	801419e <HAL_TIM_PWM_Stop+0xba>
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	2b04      	cmp	r3, #4
 801417a:	d104      	bne.n	8014186 <HAL_TIM_PWM_Stop+0xa2>
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2201      	movs	r2, #1
 8014180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014184:	e00b      	b.n	801419e <HAL_TIM_PWM_Stop+0xba>
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	2b08      	cmp	r3, #8
 801418a:	d104      	bne.n	8014196 <HAL_TIM_PWM_Stop+0xb2>
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	2201      	movs	r2, #1
 8014190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014194:	e003      	b.n	801419e <HAL_TIM_PWM_Stop+0xba>
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	2201      	movs	r2, #1
 801419a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 801419e:	2300      	movs	r3, #0
}
 80141a0:	4618      	mov	r0, r3
 80141a2:	3708      	adds	r7, #8
 80141a4:	46bd      	mov	sp, r7
 80141a6:	bd80      	pop	{r7, pc}
 80141a8:	40010000 	.word	0x40010000

080141ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b086      	sub	sp, #24
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	60f8      	str	r0, [r7, #12]
 80141b4:	60b9      	str	r1, [r7, #8]
 80141b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80141b8:	2300      	movs	r3, #0
 80141ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80141c2:	2b01      	cmp	r3, #1
 80141c4:	d101      	bne.n	80141ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80141c6:	2302      	movs	r3, #2
 80141c8:	e0ae      	b.n	8014328 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	2201      	movs	r2, #1
 80141ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	2b0c      	cmp	r3, #12
 80141d6:	f200 809f 	bhi.w	8014318 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80141da:	a201      	add	r2, pc, #4	; (adr r2, 80141e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80141dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141e0:	08014215 	.word	0x08014215
 80141e4:	08014319 	.word	0x08014319
 80141e8:	08014319 	.word	0x08014319
 80141ec:	08014319 	.word	0x08014319
 80141f0:	08014255 	.word	0x08014255
 80141f4:	08014319 	.word	0x08014319
 80141f8:	08014319 	.word	0x08014319
 80141fc:	08014319 	.word	0x08014319
 8014200:	08014297 	.word	0x08014297
 8014204:	08014319 	.word	0x08014319
 8014208:	08014319 	.word	0x08014319
 801420c:	08014319 	.word	0x08014319
 8014210:	080142d7 	.word	0x080142d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	68b9      	ldr	r1, [r7, #8]
 801421a:	4618      	mov	r0, r3
 801421c:	f000 f908 	bl	8014430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	699a      	ldr	r2, [r3, #24]
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	f042 0208 	orr.w	r2, r2, #8
 801422e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	699a      	ldr	r2, [r3, #24]
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	f022 0204 	bic.w	r2, r2, #4
 801423e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	6999      	ldr	r1, [r3, #24]
 8014246:	68bb      	ldr	r3, [r7, #8]
 8014248:	691a      	ldr	r2, [r3, #16]
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	430a      	orrs	r2, r1
 8014250:	619a      	str	r2, [r3, #24]
      break;
 8014252:	e064      	b.n	801431e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	68b9      	ldr	r1, [r7, #8]
 801425a:	4618      	mov	r0, r3
 801425c:	f000 f94e 	bl	80144fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	699a      	ldr	r2, [r3, #24]
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801426e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	699a      	ldr	r2, [r3, #24]
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801427e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	6999      	ldr	r1, [r3, #24]
 8014286:	68bb      	ldr	r3, [r7, #8]
 8014288:	691b      	ldr	r3, [r3, #16]
 801428a:	021a      	lsls	r2, r3, #8
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	430a      	orrs	r2, r1
 8014292:	619a      	str	r2, [r3, #24]
      break;
 8014294:	e043      	b.n	801431e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	68b9      	ldr	r1, [r7, #8]
 801429c:	4618      	mov	r0, r3
 801429e:	f000 f999 	bl	80145d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	69da      	ldr	r2, [r3, #28]
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	f042 0208 	orr.w	r2, r2, #8
 80142b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	69da      	ldr	r2, [r3, #28]
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	f022 0204 	bic.w	r2, r2, #4
 80142c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	69d9      	ldr	r1, [r3, #28]
 80142c8:	68bb      	ldr	r3, [r7, #8]
 80142ca:	691a      	ldr	r2, [r3, #16]
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	430a      	orrs	r2, r1
 80142d2:	61da      	str	r2, [r3, #28]
      break;
 80142d4:	e023      	b.n	801431e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	68b9      	ldr	r1, [r7, #8]
 80142dc:	4618      	mov	r0, r3
 80142de:	f000 f9e3 	bl	80146a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	69da      	ldr	r2, [r3, #28]
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80142f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	69da      	ldr	r2, [r3, #28]
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	69d9      	ldr	r1, [r3, #28]
 8014308:	68bb      	ldr	r3, [r7, #8]
 801430a:	691b      	ldr	r3, [r3, #16]
 801430c:	021a      	lsls	r2, r3, #8
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	430a      	orrs	r2, r1
 8014314:	61da      	str	r2, [r3, #28]
      break;
 8014316:	e002      	b.n	801431e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8014318:	2301      	movs	r3, #1
 801431a:	75fb      	strb	r3, [r7, #23]
      break;
 801431c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	2200      	movs	r2, #0
 8014322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014326:	7dfb      	ldrb	r3, [r7, #23]
}
 8014328:	4618      	mov	r0, r3
 801432a:	3718      	adds	r7, #24
 801432c:	46bd      	mov	sp, r7
 801432e:	bd80      	pop	{r7, pc}

08014330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8014330:	b480      	push	{r7}
 8014332:	b085      	sub	sp, #20
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
 8014338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	4a34      	ldr	r2, [pc, #208]	; (8014414 <TIM_Base_SetConfig+0xe4>)
 8014344:	4293      	cmp	r3, r2
 8014346:	d00f      	beq.n	8014368 <TIM_Base_SetConfig+0x38>
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801434e:	d00b      	beq.n	8014368 <TIM_Base_SetConfig+0x38>
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	4a31      	ldr	r2, [pc, #196]	; (8014418 <TIM_Base_SetConfig+0xe8>)
 8014354:	4293      	cmp	r3, r2
 8014356:	d007      	beq.n	8014368 <TIM_Base_SetConfig+0x38>
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	4a30      	ldr	r2, [pc, #192]	; (801441c <TIM_Base_SetConfig+0xec>)
 801435c:	4293      	cmp	r3, r2
 801435e:	d003      	beq.n	8014368 <TIM_Base_SetConfig+0x38>
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	4a2f      	ldr	r2, [pc, #188]	; (8014420 <TIM_Base_SetConfig+0xf0>)
 8014364:	4293      	cmp	r3, r2
 8014366:	d108      	bne.n	801437a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801436e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	685b      	ldr	r3, [r3, #4]
 8014374:	68fa      	ldr	r2, [r7, #12]
 8014376:	4313      	orrs	r3, r2
 8014378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	4a25      	ldr	r2, [pc, #148]	; (8014414 <TIM_Base_SetConfig+0xe4>)
 801437e:	4293      	cmp	r3, r2
 8014380:	d01b      	beq.n	80143ba <TIM_Base_SetConfig+0x8a>
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014388:	d017      	beq.n	80143ba <TIM_Base_SetConfig+0x8a>
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	4a22      	ldr	r2, [pc, #136]	; (8014418 <TIM_Base_SetConfig+0xe8>)
 801438e:	4293      	cmp	r3, r2
 8014390:	d013      	beq.n	80143ba <TIM_Base_SetConfig+0x8a>
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	4a21      	ldr	r2, [pc, #132]	; (801441c <TIM_Base_SetConfig+0xec>)
 8014396:	4293      	cmp	r3, r2
 8014398:	d00f      	beq.n	80143ba <TIM_Base_SetConfig+0x8a>
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	4a20      	ldr	r2, [pc, #128]	; (8014420 <TIM_Base_SetConfig+0xf0>)
 801439e:	4293      	cmp	r3, r2
 80143a0:	d00b      	beq.n	80143ba <TIM_Base_SetConfig+0x8a>
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	4a1f      	ldr	r2, [pc, #124]	; (8014424 <TIM_Base_SetConfig+0xf4>)
 80143a6:	4293      	cmp	r3, r2
 80143a8:	d007      	beq.n	80143ba <TIM_Base_SetConfig+0x8a>
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	4a1e      	ldr	r2, [pc, #120]	; (8014428 <TIM_Base_SetConfig+0xf8>)
 80143ae:	4293      	cmp	r3, r2
 80143b0:	d003      	beq.n	80143ba <TIM_Base_SetConfig+0x8a>
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	4a1d      	ldr	r2, [pc, #116]	; (801442c <TIM_Base_SetConfig+0xfc>)
 80143b6:	4293      	cmp	r3, r2
 80143b8:	d108      	bne.n	80143cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80143c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	68db      	ldr	r3, [r3, #12]
 80143c6:	68fa      	ldr	r2, [r7, #12]
 80143c8:	4313      	orrs	r3, r2
 80143ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	695b      	ldr	r3, [r3, #20]
 80143d6:	4313      	orrs	r3, r2
 80143d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	68fa      	ldr	r2, [r7, #12]
 80143de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	689a      	ldr	r2, [r3, #8]
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	681a      	ldr	r2, [r3, #0]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	4a08      	ldr	r2, [pc, #32]	; (8014414 <TIM_Base_SetConfig+0xe4>)
 80143f4:	4293      	cmp	r3, r2
 80143f6:	d103      	bne.n	8014400 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	691a      	ldr	r2, [r3, #16]
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	2201      	movs	r2, #1
 8014404:	615a      	str	r2, [r3, #20]
}
 8014406:	bf00      	nop
 8014408:	3714      	adds	r7, #20
 801440a:	46bd      	mov	sp, r7
 801440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014410:	4770      	bx	lr
 8014412:	bf00      	nop
 8014414:	40010000 	.word	0x40010000
 8014418:	40000400 	.word	0x40000400
 801441c:	40000800 	.word	0x40000800
 8014420:	40000c00 	.word	0x40000c00
 8014424:	40014000 	.word	0x40014000
 8014428:	40014400 	.word	0x40014400
 801442c:	40014800 	.word	0x40014800

08014430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014430:	b480      	push	{r7}
 8014432:	b087      	sub	sp, #28
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
 8014438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	6a1b      	ldr	r3, [r3, #32]
 801443e:	f023 0201 	bic.w	r2, r3, #1
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	6a1b      	ldr	r3, [r3, #32]
 801444a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	685b      	ldr	r3, [r3, #4]
 8014450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	699b      	ldr	r3, [r3, #24]
 8014456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801445e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	f023 0303 	bic.w	r3, r3, #3
 8014466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014468:	683b      	ldr	r3, [r7, #0]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	68fa      	ldr	r2, [r7, #12]
 801446e:	4313      	orrs	r3, r2
 8014470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	f023 0302 	bic.w	r3, r3, #2
 8014478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801447a:	683b      	ldr	r3, [r7, #0]
 801447c:	689b      	ldr	r3, [r3, #8]
 801447e:	697a      	ldr	r2, [r7, #20]
 8014480:	4313      	orrs	r3, r2
 8014482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	4a1c      	ldr	r2, [pc, #112]	; (80144f8 <TIM_OC1_SetConfig+0xc8>)
 8014488:	4293      	cmp	r3, r2
 801448a:	d10c      	bne.n	80144a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801448c:	697b      	ldr	r3, [r7, #20]
 801448e:	f023 0308 	bic.w	r3, r3, #8
 8014492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014494:	683b      	ldr	r3, [r7, #0]
 8014496:	68db      	ldr	r3, [r3, #12]
 8014498:	697a      	ldr	r2, [r7, #20]
 801449a:	4313      	orrs	r3, r2
 801449c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801449e:	697b      	ldr	r3, [r7, #20]
 80144a0:	f023 0304 	bic.w	r3, r3, #4
 80144a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	4a13      	ldr	r2, [pc, #76]	; (80144f8 <TIM_OC1_SetConfig+0xc8>)
 80144aa:	4293      	cmp	r3, r2
 80144ac:	d111      	bne.n	80144d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80144b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80144bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80144be:	683b      	ldr	r3, [r7, #0]
 80144c0:	695b      	ldr	r3, [r3, #20]
 80144c2:	693a      	ldr	r2, [r7, #16]
 80144c4:	4313      	orrs	r3, r2
 80144c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80144c8:	683b      	ldr	r3, [r7, #0]
 80144ca:	699b      	ldr	r3, [r3, #24]
 80144cc:	693a      	ldr	r2, [r7, #16]
 80144ce:	4313      	orrs	r3, r2
 80144d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	693a      	ldr	r2, [r7, #16]
 80144d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	68fa      	ldr	r2, [r7, #12]
 80144dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80144de:	683b      	ldr	r3, [r7, #0]
 80144e0:	685a      	ldr	r2, [r3, #4]
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	697a      	ldr	r2, [r7, #20]
 80144ea:	621a      	str	r2, [r3, #32]
}
 80144ec:	bf00      	nop
 80144ee:	371c      	adds	r7, #28
 80144f0:	46bd      	mov	sp, r7
 80144f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f6:	4770      	bx	lr
 80144f8:	40010000 	.word	0x40010000

080144fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80144fc:	b480      	push	{r7}
 80144fe:	b087      	sub	sp, #28
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
 8014504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	6a1b      	ldr	r3, [r3, #32]
 801450a:	f023 0210 	bic.w	r2, r3, #16
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	6a1b      	ldr	r3, [r3, #32]
 8014516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	685b      	ldr	r3, [r3, #4]
 801451c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	699b      	ldr	r3, [r3, #24]
 8014522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801452a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014534:	683b      	ldr	r3, [r7, #0]
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	021b      	lsls	r3, r3, #8
 801453a:	68fa      	ldr	r2, [r7, #12]
 801453c:	4313      	orrs	r3, r2
 801453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	f023 0320 	bic.w	r3, r3, #32
 8014546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	689b      	ldr	r3, [r3, #8]
 801454c:	011b      	lsls	r3, r3, #4
 801454e:	697a      	ldr	r2, [r7, #20]
 8014550:	4313      	orrs	r3, r2
 8014552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	4a1e      	ldr	r2, [pc, #120]	; (80145d0 <TIM_OC2_SetConfig+0xd4>)
 8014558:	4293      	cmp	r3, r2
 801455a:	d10d      	bne.n	8014578 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801455c:	697b      	ldr	r3, [r7, #20]
 801455e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	68db      	ldr	r3, [r3, #12]
 8014568:	011b      	lsls	r3, r3, #4
 801456a:	697a      	ldr	r2, [r7, #20]
 801456c:	4313      	orrs	r3, r2
 801456e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014570:	697b      	ldr	r3, [r7, #20]
 8014572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014576:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	4a15      	ldr	r2, [pc, #84]	; (80145d0 <TIM_OC2_SetConfig+0xd4>)
 801457c:	4293      	cmp	r3, r2
 801457e:	d113      	bne.n	80145a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014580:	693b      	ldr	r3, [r7, #16]
 8014582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014586:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014588:	693b      	ldr	r3, [r7, #16]
 801458a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801458e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	695b      	ldr	r3, [r3, #20]
 8014594:	009b      	lsls	r3, r3, #2
 8014596:	693a      	ldr	r2, [r7, #16]
 8014598:	4313      	orrs	r3, r2
 801459a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801459c:	683b      	ldr	r3, [r7, #0]
 801459e:	699b      	ldr	r3, [r3, #24]
 80145a0:	009b      	lsls	r3, r3, #2
 80145a2:	693a      	ldr	r2, [r7, #16]
 80145a4:	4313      	orrs	r3, r2
 80145a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	693a      	ldr	r2, [r7, #16]
 80145ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	68fa      	ldr	r2, [r7, #12]
 80145b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80145b4:	683b      	ldr	r3, [r7, #0]
 80145b6:	685a      	ldr	r2, [r3, #4]
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	697a      	ldr	r2, [r7, #20]
 80145c0:	621a      	str	r2, [r3, #32]
}
 80145c2:	bf00      	nop
 80145c4:	371c      	adds	r7, #28
 80145c6:	46bd      	mov	sp, r7
 80145c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145cc:	4770      	bx	lr
 80145ce:	bf00      	nop
 80145d0:	40010000 	.word	0x40010000

080145d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80145d4:	b480      	push	{r7}
 80145d6:	b087      	sub	sp, #28
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
 80145dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	6a1b      	ldr	r3, [r3, #32]
 80145e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	6a1b      	ldr	r3, [r3, #32]
 80145ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	685b      	ldr	r3, [r3, #4]
 80145f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	69db      	ldr	r3, [r3, #28]
 80145fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	f023 0303 	bic.w	r3, r3, #3
 801460a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801460c:	683b      	ldr	r3, [r7, #0]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	68fa      	ldr	r2, [r7, #12]
 8014612:	4313      	orrs	r3, r2
 8014614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014616:	697b      	ldr	r3, [r7, #20]
 8014618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801461c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	689b      	ldr	r3, [r3, #8]
 8014622:	021b      	lsls	r3, r3, #8
 8014624:	697a      	ldr	r2, [r7, #20]
 8014626:	4313      	orrs	r3, r2
 8014628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	4a1d      	ldr	r2, [pc, #116]	; (80146a4 <TIM_OC3_SetConfig+0xd0>)
 801462e:	4293      	cmp	r3, r2
 8014630:	d10d      	bne.n	801464e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014632:	697b      	ldr	r3, [r7, #20]
 8014634:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014638:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	68db      	ldr	r3, [r3, #12]
 801463e:	021b      	lsls	r3, r3, #8
 8014640:	697a      	ldr	r2, [r7, #20]
 8014642:	4313      	orrs	r3, r2
 8014644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014646:	697b      	ldr	r3, [r7, #20]
 8014648:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801464c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	4a14      	ldr	r2, [pc, #80]	; (80146a4 <TIM_OC3_SetConfig+0xd0>)
 8014652:	4293      	cmp	r3, r2
 8014654:	d113      	bne.n	801467e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014656:	693b      	ldr	r3, [r7, #16]
 8014658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801465c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801465e:	693b      	ldr	r3, [r7, #16]
 8014660:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014666:	683b      	ldr	r3, [r7, #0]
 8014668:	695b      	ldr	r3, [r3, #20]
 801466a:	011b      	lsls	r3, r3, #4
 801466c:	693a      	ldr	r2, [r7, #16]
 801466e:	4313      	orrs	r3, r2
 8014670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	699b      	ldr	r3, [r3, #24]
 8014676:	011b      	lsls	r3, r3, #4
 8014678:	693a      	ldr	r2, [r7, #16]
 801467a:	4313      	orrs	r3, r2
 801467c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	693a      	ldr	r2, [r7, #16]
 8014682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	68fa      	ldr	r2, [r7, #12]
 8014688:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801468a:	683b      	ldr	r3, [r7, #0]
 801468c:	685a      	ldr	r2, [r3, #4]
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	697a      	ldr	r2, [r7, #20]
 8014696:	621a      	str	r2, [r3, #32]
}
 8014698:	bf00      	nop
 801469a:	371c      	adds	r7, #28
 801469c:	46bd      	mov	sp, r7
 801469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a2:	4770      	bx	lr
 80146a4:	40010000 	.word	0x40010000

080146a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80146a8:	b480      	push	{r7}
 80146aa:	b087      	sub	sp, #28
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
 80146b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	6a1b      	ldr	r3, [r3, #32]
 80146b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	6a1b      	ldr	r3, [r3, #32]
 80146c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	685b      	ldr	r3, [r3, #4]
 80146c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	69db      	ldr	r3, [r3, #28]
 80146ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80146d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80146de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80146e0:	683b      	ldr	r3, [r7, #0]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	021b      	lsls	r3, r3, #8
 80146e6:	68fa      	ldr	r2, [r7, #12]
 80146e8:	4313      	orrs	r3, r2
 80146ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80146ec:	693b      	ldr	r3, [r7, #16]
 80146ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80146f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80146f4:	683b      	ldr	r3, [r7, #0]
 80146f6:	689b      	ldr	r3, [r3, #8]
 80146f8:	031b      	lsls	r3, r3, #12
 80146fa:	693a      	ldr	r2, [r7, #16]
 80146fc:	4313      	orrs	r3, r2
 80146fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	4a10      	ldr	r2, [pc, #64]	; (8014744 <TIM_OC4_SetConfig+0x9c>)
 8014704:	4293      	cmp	r3, r2
 8014706:	d109      	bne.n	801471c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014708:	697b      	ldr	r3, [r7, #20]
 801470a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801470e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014710:	683b      	ldr	r3, [r7, #0]
 8014712:	695b      	ldr	r3, [r3, #20]
 8014714:	019b      	lsls	r3, r3, #6
 8014716:	697a      	ldr	r2, [r7, #20]
 8014718:	4313      	orrs	r3, r2
 801471a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	697a      	ldr	r2, [r7, #20]
 8014720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	68fa      	ldr	r2, [r7, #12]
 8014726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014728:	683b      	ldr	r3, [r7, #0]
 801472a:	685a      	ldr	r2, [r3, #4]
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	693a      	ldr	r2, [r7, #16]
 8014734:	621a      	str	r2, [r3, #32]
}
 8014736:	bf00      	nop
 8014738:	371c      	adds	r7, #28
 801473a:	46bd      	mov	sp, r7
 801473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014740:	4770      	bx	lr
 8014742:	bf00      	nop
 8014744:	40010000 	.word	0x40010000

08014748 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014748:	b480      	push	{r7}
 801474a:	b087      	sub	sp, #28
 801474c:	af00      	add	r7, sp, #0
 801474e:	60f8      	str	r0, [r7, #12]
 8014750:	60b9      	str	r1, [r7, #8]
 8014752:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8014754:	68bb      	ldr	r3, [r7, #8]
 8014756:	f003 031f 	and.w	r3, r3, #31
 801475a:	2201      	movs	r2, #1
 801475c:	fa02 f303 	lsl.w	r3, r2, r3
 8014760:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	6a1a      	ldr	r2, [r3, #32]
 8014766:	697b      	ldr	r3, [r7, #20]
 8014768:	43db      	mvns	r3, r3
 801476a:	401a      	ands	r2, r3
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	6a1a      	ldr	r2, [r3, #32]
 8014774:	68bb      	ldr	r3, [r7, #8]
 8014776:	f003 031f 	and.w	r3, r3, #31
 801477a:	6879      	ldr	r1, [r7, #4]
 801477c:	fa01 f303 	lsl.w	r3, r1, r3
 8014780:	431a      	orrs	r2, r3
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	621a      	str	r2, [r3, #32]
}
 8014786:	bf00      	nop
 8014788:	371c      	adds	r7, #28
 801478a:	46bd      	mov	sp, r7
 801478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014790:	4770      	bx	lr
	...

08014794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014794:	b480      	push	{r7}
 8014796:	b085      	sub	sp, #20
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
 801479c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80147a4:	2b01      	cmp	r3, #1
 80147a6:	d101      	bne.n	80147ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80147a8:	2302      	movs	r3, #2
 80147aa:	e050      	b.n	801484e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	2201      	movs	r2, #1
 80147b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2202      	movs	r2, #2
 80147b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	685b      	ldr	r3, [r3, #4]
 80147c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	689b      	ldr	r3, [r3, #8]
 80147ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80147d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	68fa      	ldr	r2, [r7, #12]
 80147da:	4313      	orrs	r3, r2
 80147dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	68fa      	ldr	r2, [r7, #12]
 80147e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	4a1c      	ldr	r2, [pc, #112]	; (801485c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80147ec:	4293      	cmp	r3, r2
 80147ee:	d018      	beq.n	8014822 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80147f8:	d013      	beq.n	8014822 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	4a18      	ldr	r2, [pc, #96]	; (8014860 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8014800:	4293      	cmp	r3, r2
 8014802:	d00e      	beq.n	8014822 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	4a16      	ldr	r2, [pc, #88]	; (8014864 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801480a:	4293      	cmp	r3, r2
 801480c:	d009      	beq.n	8014822 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	4a15      	ldr	r2, [pc, #84]	; (8014868 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8014814:	4293      	cmp	r3, r2
 8014816:	d004      	beq.n	8014822 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	4a13      	ldr	r2, [pc, #76]	; (801486c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801481e:	4293      	cmp	r3, r2
 8014820:	d10c      	bne.n	801483c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014822:	68bb      	ldr	r3, [r7, #8]
 8014824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014828:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801482a:	683b      	ldr	r3, [r7, #0]
 801482c:	685b      	ldr	r3, [r3, #4]
 801482e:	68ba      	ldr	r2, [r7, #8]
 8014830:	4313      	orrs	r3, r2
 8014832:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	68ba      	ldr	r2, [r7, #8]
 801483a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	2201      	movs	r2, #1
 8014840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	2200      	movs	r2, #0
 8014848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801484c:	2300      	movs	r3, #0
}
 801484e:	4618      	mov	r0, r3
 8014850:	3714      	adds	r7, #20
 8014852:	46bd      	mov	sp, r7
 8014854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014858:	4770      	bx	lr
 801485a:	bf00      	nop
 801485c:	40010000 	.word	0x40010000
 8014860:	40000400 	.word	0x40000400
 8014864:	40000800 	.word	0x40000800
 8014868:	40000c00 	.word	0x40000c00
 801486c:	40014000 	.word	0x40014000

08014870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b082      	sub	sp, #8
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d101      	bne.n	8014882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801487e:	2301      	movs	r3, #1
 8014880:	e03f      	b.n	8014902 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014888:	b2db      	uxtb	r3, r3
 801488a:	2b00      	cmp	r3, #0
 801488c:	d106      	bne.n	801489c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	2200      	movs	r2, #0
 8014892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f7ec fba6 	bl	8000fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	2224      	movs	r2, #36	; 0x24
 80148a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	68da      	ldr	r2, [r3, #12]
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80148b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80148b4:	6878      	ldr	r0, [r7, #4]
 80148b6:	f000 f999 	bl	8014bec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	691a      	ldr	r2, [r3, #16]
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80148c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	695a      	ldr	r2, [r3, #20]
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80148d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	68da      	ldr	r2, [r3, #12]
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80148e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	2200      	movs	r2, #0
 80148ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	2220      	movs	r2, #32
 80148f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2220      	movs	r2, #32
 80148fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8014900:	2300      	movs	r3, #0
}
 8014902:	4618      	mov	r0, r3
 8014904:	3708      	adds	r7, #8
 8014906:	46bd      	mov	sp, r7
 8014908:	bd80      	pop	{r7, pc}

0801490a <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 801490a:	b580      	push	{r7, lr}
 801490c:	b084      	sub	sp, #16
 801490e:	af00      	add	r7, sp, #0
 8014910:	60f8      	str	r0, [r7, #12]
 8014912:	460b      	mov	r3, r1
 8014914:	607a      	str	r2, [r7, #4]
 8014916:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d101      	bne.n	8014922 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 801491e:	2301      	movs	r3, #1
 8014920:	e05f      	b.n	80149e2 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014928:	b2db      	uxtb	r3, r3
 801492a:	2b00      	cmp	r3, #0
 801492c:	d106      	bne.n	801493c <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	2200      	movs	r2, #0
 8014932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014936:	68f8      	ldr	r0, [r7, #12]
 8014938:	f7ec fb56 	bl	8000fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	2224      	movs	r2, #36	; 0x24
 8014940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	68da      	ldr	r2, [r3, #12]
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014954:	68f8      	ldr	r0, [r7, #12]
 8014956:	f000 f949 	bl	8014bec <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	691a      	ldr	r2, [r3, #16]
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	695a      	ldr	r2, [r3, #20]
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014978:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	691a      	ldr	r2, [r3, #16]
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	f022 020f 	bic.w	r2, r2, #15
 8014988:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	6919      	ldr	r1, [r3, #16]
 8014990:	7afa      	ldrb	r2, [r7, #11]
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	430a      	orrs	r2, r1
 8014998:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	68da      	ldr	r2, [r3, #12]
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80149a8:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	68d9      	ldr	r1, [r3, #12]
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	687a      	ldr	r2, [r7, #4]
 80149b6:	430a      	orrs	r2, r1
 80149b8:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	68da      	ldr	r2, [r3, #12]
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80149c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	2200      	movs	r2, #0
 80149ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	2220      	movs	r2, #32
 80149d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	2220      	movs	r2, #32
 80149dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80149e0:	2300      	movs	r3, #0
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3710      	adds	r7, #16
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}

080149ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80149ea:	b580      	push	{r7, lr}
 80149ec:	b08a      	sub	sp, #40	; 0x28
 80149ee:	af02      	add	r7, sp, #8
 80149f0:	60f8      	str	r0, [r7, #12]
 80149f2:	60b9      	str	r1, [r7, #8]
 80149f4:	603b      	str	r3, [r7, #0]
 80149f6:	4613      	mov	r3, r2
 80149f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80149fa:	2300      	movs	r3, #0
 80149fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014a04:	b2db      	uxtb	r3, r3
 8014a06:	2b20      	cmp	r3, #32
 8014a08:	d17c      	bne.n	8014b04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8014a0a:	68bb      	ldr	r3, [r7, #8]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d002      	beq.n	8014a16 <HAL_UART_Transmit+0x2c>
 8014a10:	88fb      	ldrh	r3, [r7, #6]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d101      	bne.n	8014a1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8014a16:	2301      	movs	r3, #1
 8014a18:	e075      	b.n	8014b06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014a20:	2b01      	cmp	r3, #1
 8014a22:	d101      	bne.n	8014a28 <HAL_UART_Transmit+0x3e>
 8014a24:	2302      	movs	r3, #2
 8014a26:	e06e      	b.n	8014b06 <HAL_UART_Transmit+0x11c>
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	2201      	movs	r2, #1
 8014a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	2200      	movs	r2, #0
 8014a34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	2221      	movs	r2, #33	; 0x21
 8014a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014a3e:	f7fd fa39 	bl	8011eb4 <HAL_GetTick>
 8014a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	88fa      	ldrh	r2, [r7, #6]
 8014a48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	88fa      	ldrh	r2, [r7, #6]
 8014a4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	689b      	ldr	r3, [r3, #8]
 8014a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014a58:	d108      	bne.n	8014a6c <HAL_UART_Transmit+0x82>
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	691b      	ldr	r3, [r3, #16]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d104      	bne.n	8014a6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8014a62:	2300      	movs	r3, #0
 8014a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014a66:	68bb      	ldr	r3, [r7, #8]
 8014a68:	61bb      	str	r3, [r7, #24]
 8014a6a:	e003      	b.n	8014a74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8014a6c:	68bb      	ldr	r3, [r7, #8]
 8014a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014a70:	2300      	movs	r3, #0
 8014a72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	2200      	movs	r2, #0
 8014a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8014a7c:	e02a      	b.n	8014ad4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014a7e:	683b      	ldr	r3, [r7, #0]
 8014a80:	9300      	str	r3, [sp, #0]
 8014a82:	697b      	ldr	r3, [r7, #20]
 8014a84:	2200      	movs	r2, #0
 8014a86:	2180      	movs	r1, #128	; 0x80
 8014a88:	68f8      	ldr	r0, [r7, #12]
 8014a8a:	f000 f840 	bl	8014b0e <UART_WaitOnFlagUntilTimeout>
 8014a8e:	4603      	mov	r3, r0
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d001      	beq.n	8014a98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8014a94:	2303      	movs	r3, #3
 8014a96:	e036      	b.n	8014b06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8014a98:	69fb      	ldr	r3, [r7, #28]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d10b      	bne.n	8014ab6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8014a9e:	69bb      	ldr	r3, [r7, #24]
 8014aa0:	881b      	ldrh	r3, [r3, #0]
 8014aa2:	461a      	mov	r2, r3
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014aac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8014aae:	69bb      	ldr	r3, [r7, #24]
 8014ab0:	3302      	adds	r3, #2
 8014ab2:	61bb      	str	r3, [r7, #24]
 8014ab4:	e007      	b.n	8014ac6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8014ab6:	69fb      	ldr	r3, [r7, #28]
 8014ab8:	781a      	ldrb	r2, [r3, #0]
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8014ac0:	69fb      	ldr	r3, [r7, #28]
 8014ac2:	3301      	adds	r3, #1
 8014ac4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014aca:	b29b      	uxth	r3, r3
 8014acc:	3b01      	subs	r3, #1
 8014ace:	b29a      	uxth	r2, r3
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014ad8:	b29b      	uxth	r3, r3
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d1cf      	bne.n	8014a7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014ade:	683b      	ldr	r3, [r7, #0]
 8014ae0:	9300      	str	r3, [sp, #0]
 8014ae2:	697b      	ldr	r3, [r7, #20]
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	2140      	movs	r1, #64	; 0x40
 8014ae8:	68f8      	ldr	r0, [r7, #12]
 8014aea:	f000 f810 	bl	8014b0e <UART_WaitOnFlagUntilTimeout>
 8014aee:	4603      	mov	r3, r0
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d001      	beq.n	8014af8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8014af4:	2303      	movs	r3, #3
 8014af6:	e006      	b.n	8014b06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	2220      	movs	r2, #32
 8014afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8014b00:	2300      	movs	r3, #0
 8014b02:	e000      	b.n	8014b06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8014b04:	2302      	movs	r3, #2
  }
}
 8014b06:	4618      	mov	r0, r3
 8014b08:	3720      	adds	r7, #32
 8014b0a:	46bd      	mov	sp, r7
 8014b0c:	bd80      	pop	{r7, pc}

08014b0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8014b0e:	b580      	push	{r7, lr}
 8014b10:	b090      	sub	sp, #64	; 0x40
 8014b12:	af00      	add	r7, sp, #0
 8014b14:	60f8      	str	r0, [r7, #12]
 8014b16:	60b9      	str	r1, [r7, #8]
 8014b18:	603b      	str	r3, [r7, #0]
 8014b1a:	4613      	mov	r3, r2
 8014b1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014b1e:	e050      	b.n	8014bc2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b26:	d04c      	beq.n	8014bc2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8014b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d007      	beq.n	8014b3e <UART_WaitOnFlagUntilTimeout+0x30>
 8014b2e:	f7fd f9c1 	bl	8011eb4 <HAL_GetTick>
 8014b32:	4602      	mov	r2, r0
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	1ad3      	subs	r3, r2, r3
 8014b38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014b3a:	429a      	cmp	r2, r3
 8014b3c:	d241      	bcs.n	8014bc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	330c      	adds	r3, #12
 8014b44:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b48:	e853 3f00 	ldrex	r3, [r3]
 8014b4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	330c      	adds	r3, #12
 8014b5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014b5e:	637a      	str	r2, [r7, #52]	; 0x34
 8014b60:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014b64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b66:	e841 2300 	strex	r3, r2, [r1]
 8014b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d1e5      	bne.n	8014b3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	3314      	adds	r3, #20
 8014b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b7a:	697b      	ldr	r3, [r7, #20]
 8014b7c:	e853 3f00 	ldrex	r3, [r3]
 8014b80:	613b      	str	r3, [r7, #16]
   return(result);
 8014b82:	693b      	ldr	r3, [r7, #16]
 8014b84:	f023 0301 	bic.w	r3, r3, #1
 8014b88:	63bb      	str	r3, [r7, #56]	; 0x38
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	3314      	adds	r3, #20
 8014b90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b92:	623a      	str	r2, [r7, #32]
 8014b94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b96:	69f9      	ldr	r1, [r7, #28]
 8014b98:	6a3a      	ldr	r2, [r7, #32]
 8014b9a:	e841 2300 	strex	r3, r2, [r1]
 8014b9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8014ba0:	69bb      	ldr	r3, [r7, #24]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d1e5      	bne.n	8014b72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	2220      	movs	r2, #32
 8014baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	2220      	movs	r2, #32
 8014bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	2200      	movs	r2, #0
 8014bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8014bbe:	2303      	movs	r3, #3
 8014bc0:	e00f      	b.n	8014be2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	681a      	ldr	r2, [r3, #0]
 8014bc8:	68bb      	ldr	r3, [r7, #8]
 8014bca:	4013      	ands	r3, r2
 8014bcc:	68ba      	ldr	r2, [r7, #8]
 8014bce:	429a      	cmp	r2, r3
 8014bd0:	bf0c      	ite	eq
 8014bd2:	2301      	moveq	r3, #1
 8014bd4:	2300      	movne	r3, #0
 8014bd6:	b2db      	uxtb	r3, r3
 8014bd8:	461a      	mov	r2, r3
 8014bda:	79fb      	ldrb	r3, [r7, #7]
 8014bdc:	429a      	cmp	r2, r3
 8014bde:	d09f      	beq.n	8014b20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8014be0:	2300      	movs	r3, #0
}
 8014be2:	4618      	mov	r0, r3
 8014be4:	3740      	adds	r7, #64	; 0x40
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}
	...

08014bec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bf0:	b09f      	sub	sp, #124	; 0x7c
 8014bf2:	af00      	add	r7, sp, #0
 8014bf4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	691b      	ldr	r3, [r3, #16]
 8014bfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8014c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c02:	68d9      	ldr	r1, [r3, #12]
 8014c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c06:	681a      	ldr	r2, [r3, #0]
 8014c08:	ea40 0301 	orr.w	r3, r0, r1
 8014c0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8014c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c10:	689a      	ldr	r2, [r3, #8]
 8014c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c14:	691b      	ldr	r3, [r3, #16]
 8014c16:	431a      	orrs	r2, r3
 8014c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c1a:	695b      	ldr	r3, [r3, #20]
 8014c1c:	431a      	orrs	r2, r3
 8014c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c20:	69db      	ldr	r3, [r3, #28]
 8014c22:	4313      	orrs	r3, r2
 8014c24:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8014c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	68db      	ldr	r3, [r3, #12]
 8014c2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8014c30:	f021 010c 	bic.w	r1, r1, #12
 8014c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c36:	681a      	ldr	r2, [r3, #0]
 8014c38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014c3a:	430b      	orrs	r3, r1
 8014c3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8014c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	695b      	ldr	r3, [r3, #20]
 8014c44:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8014c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c4a:	6999      	ldr	r1, [r3, #24]
 8014c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c4e:	681a      	ldr	r2, [r3, #0]
 8014c50:	ea40 0301 	orr.w	r3, r0, r1
 8014c54:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c58:	681a      	ldr	r2, [r3, #0]
 8014c5a:	4bc5      	ldr	r3, [pc, #788]	; (8014f70 <UART_SetConfig+0x384>)
 8014c5c:	429a      	cmp	r2, r3
 8014c5e:	d004      	beq.n	8014c6a <UART_SetConfig+0x7e>
 8014c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c62:	681a      	ldr	r2, [r3, #0]
 8014c64:	4bc3      	ldr	r3, [pc, #780]	; (8014f74 <UART_SetConfig+0x388>)
 8014c66:	429a      	cmp	r2, r3
 8014c68:	d103      	bne.n	8014c72 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8014c6a:	f7ff f927 	bl	8013ebc <HAL_RCC_GetPCLK2Freq>
 8014c6e:	6778      	str	r0, [r7, #116]	; 0x74
 8014c70:	e002      	b.n	8014c78 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8014c72:	f7ff f90f 	bl	8013e94 <HAL_RCC_GetPCLK1Freq>
 8014c76:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014c7a:	69db      	ldr	r3, [r3, #28]
 8014c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014c80:	f040 80b6 	bne.w	8014df0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014c86:	461c      	mov	r4, r3
 8014c88:	f04f 0500 	mov.w	r5, #0
 8014c8c:	4622      	mov	r2, r4
 8014c8e:	462b      	mov	r3, r5
 8014c90:	1891      	adds	r1, r2, r2
 8014c92:	6439      	str	r1, [r7, #64]	; 0x40
 8014c94:	415b      	adcs	r3, r3
 8014c96:	647b      	str	r3, [r7, #68]	; 0x44
 8014c98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8014c9c:	1912      	adds	r2, r2, r4
 8014c9e:	eb45 0303 	adc.w	r3, r5, r3
 8014ca2:	f04f 0000 	mov.w	r0, #0
 8014ca6:	f04f 0100 	mov.w	r1, #0
 8014caa:	00d9      	lsls	r1, r3, #3
 8014cac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014cb0:	00d0      	lsls	r0, r2, #3
 8014cb2:	4602      	mov	r2, r0
 8014cb4:	460b      	mov	r3, r1
 8014cb6:	1911      	adds	r1, r2, r4
 8014cb8:	6639      	str	r1, [r7, #96]	; 0x60
 8014cba:	416b      	adcs	r3, r5
 8014cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8014cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014cc0:	685b      	ldr	r3, [r3, #4]
 8014cc2:	461a      	mov	r2, r3
 8014cc4:	f04f 0300 	mov.w	r3, #0
 8014cc8:	1891      	adds	r1, r2, r2
 8014cca:	63b9      	str	r1, [r7, #56]	; 0x38
 8014ccc:	415b      	adcs	r3, r3
 8014cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014cd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8014cd4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8014cd8:	f7eb fb22 	bl	8000320 <__aeabi_uldivmod>
 8014cdc:	4602      	mov	r2, r0
 8014cde:	460b      	mov	r3, r1
 8014ce0:	4ba5      	ldr	r3, [pc, #660]	; (8014f78 <UART_SetConfig+0x38c>)
 8014ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8014ce6:	095b      	lsrs	r3, r3, #5
 8014ce8:	011e      	lsls	r6, r3, #4
 8014cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014cec:	461c      	mov	r4, r3
 8014cee:	f04f 0500 	mov.w	r5, #0
 8014cf2:	4622      	mov	r2, r4
 8014cf4:	462b      	mov	r3, r5
 8014cf6:	1891      	adds	r1, r2, r2
 8014cf8:	6339      	str	r1, [r7, #48]	; 0x30
 8014cfa:	415b      	adcs	r3, r3
 8014cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8014cfe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8014d02:	1912      	adds	r2, r2, r4
 8014d04:	eb45 0303 	adc.w	r3, r5, r3
 8014d08:	f04f 0000 	mov.w	r0, #0
 8014d0c:	f04f 0100 	mov.w	r1, #0
 8014d10:	00d9      	lsls	r1, r3, #3
 8014d12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014d16:	00d0      	lsls	r0, r2, #3
 8014d18:	4602      	mov	r2, r0
 8014d1a:	460b      	mov	r3, r1
 8014d1c:	1911      	adds	r1, r2, r4
 8014d1e:	65b9      	str	r1, [r7, #88]	; 0x58
 8014d20:	416b      	adcs	r3, r5
 8014d22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014d26:	685b      	ldr	r3, [r3, #4]
 8014d28:	461a      	mov	r2, r3
 8014d2a:	f04f 0300 	mov.w	r3, #0
 8014d2e:	1891      	adds	r1, r2, r2
 8014d30:	62b9      	str	r1, [r7, #40]	; 0x28
 8014d32:	415b      	adcs	r3, r3
 8014d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014d36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8014d3a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8014d3e:	f7eb faef 	bl	8000320 <__aeabi_uldivmod>
 8014d42:	4602      	mov	r2, r0
 8014d44:	460b      	mov	r3, r1
 8014d46:	4b8c      	ldr	r3, [pc, #560]	; (8014f78 <UART_SetConfig+0x38c>)
 8014d48:	fba3 1302 	umull	r1, r3, r3, r2
 8014d4c:	095b      	lsrs	r3, r3, #5
 8014d4e:	2164      	movs	r1, #100	; 0x64
 8014d50:	fb01 f303 	mul.w	r3, r1, r3
 8014d54:	1ad3      	subs	r3, r2, r3
 8014d56:	00db      	lsls	r3, r3, #3
 8014d58:	3332      	adds	r3, #50	; 0x32
 8014d5a:	4a87      	ldr	r2, [pc, #540]	; (8014f78 <UART_SetConfig+0x38c>)
 8014d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8014d60:	095b      	lsrs	r3, r3, #5
 8014d62:	005b      	lsls	r3, r3, #1
 8014d64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014d68:	441e      	add	r6, r3
 8014d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	f04f 0100 	mov.w	r1, #0
 8014d72:	4602      	mov	r2, r0
 8014d74:	460b      	mov	r3, r1
 8014d76:	1894      	adds	r4, r2, r2
 8014d78:	623c      	str	r4, [r7, #32]
 8014d7a:	415b      	adcs	r3, r3
 8014d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8014d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014d82:	1812      	adds	r2, r2, r0
 8014d84:	eb41 0303 	adc.w	r3, r1, r3
 8014d88:	f04f 0400 	mov.w	r4, #0
 8014d8c:	f04f 0500 	mov.w	r5, #0
 8014d90:	00dd      	lsls	r5, r3, #3
 8014d92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014d96:	00d4      	lsls	r4, r2, #3
 8014d98:	4622      	mov	r2, r4
 8014d9a:	462b      	mov	r3, r5
 8014d9c:	1814      	adds	r4, r2, r0
 8014d9e:	653c      	str	r4, [r7, #80]	; 0x50
 8014da0:	414b      	adcs	r3, r1
 8014da2:	657b      	str	r3, [r7, #84]	; 0x54
 8014da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014da6:	685b      	ldr	r3, [r3, #4]
 8014da8:	461a      	mov	r2, r3
 8014daa:	f04f 0300 	mov.w	r3, #0
 8014dae:	1891      	adds	r1, r2, r2
 8014db0:	61b9      	str	r1, [r7, #24]
 8014db2:	415b      	adcs	r3, r3
 8014db4:	61fb      	str	r3, [r7, #28]
 8014db6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014dba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8014dbe:	f7eb faaf 	bl	8000320 <__aeabi_uldivmod>
 8014dc2:	4602      	mov	r2, r0
 8014dc4:	460b      	mov	r3, r1
 8014dc6:	4b6c      	ldr	r3, [pc, #432]	; (8014f78 <UART_SetConfig+0x38c>)
 8014dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8014dcc:	095b      	lsrs	r3, r3, #5
 8014dce:	2164      	movs	r1, #100	; 0x64
 8014dd0:	fb01 f303 	mul.w	r3, r1, r3
 8014dd4:	1ad3      	subs	r3, r2, r3
 8014dd6:	00db      	lsls	r3, r3, #3
 8014dd8:	3332      	adds	r3, #50	; 0x32
 8014dda:	4a67      	ldr	r2, [pc, #412]	; (8014f78 <UART_SetConfig+0x38c>)
 8014ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8014de0:	095b      	lsrs	r3, r3, #5
 8014de2:	f003 0207 	and.w	r2, r3, #7
 8014de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	4432      	add	r2, r6
 8014dec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8014dee:	e0b9      	b.n	8014f64 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014df2:	461c      	mov	r4, r3
 8014df4:	f04f 0500 	mov.w	r5, #0
 8014df8:	4622      	mov	r2, r4
 8014dfa:	462b      	mov	r3, r5
 8014dfc:	1891      	adds	r1, r2, r2
 8014dfe:	6139      	str	r1, [r7, #16]
 8014e00:	415b      	adcs	r3, r3
 8014e02:	617b      	str	r3, [r7, #20]
 8014e04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014e08:	1912      	adds	r2, r2, r4
 8014e0a:	eb45 0303 	adc.w	r3, r5, r3
 8014e0e:	f04f 0000 	mov.w	r0, #0
 8014e12:	f04f 0100 	mov.w	r1, #0
 8014e16:	00d9      	lsls	r1, r3, #3
 8014e18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014e1c:	00d0      	lsls	r0, r2, #3
 8014e1e:	4602      	mov	r2, r0
 8014e20:	460b      	mov	r3, r1
 8014e22:	eb12 0804 	adds.w	r8, r2, r4
 8014e26:	eb43 0905 	adc.w	r9, r3, r5
 8014e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e2c:	685b      	ldr	r3, [r3, #4]
 8014e2e:	4618      	mov	r0, r3
 8014e30:	f04f 0100 	mov.w	r1, #0
 8014e34:	f04f 0200 	mov.w	r2, #0
 8014e38:	f04f 0300 	mov.w	r3, #0
 8014e3c:	008b      	lsls	r3, r1, #2
 8014e3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014e42:	0082      	lsls	r2, r0, #2
 8014e44:	4640      	mov	r0, r8
 8014e46:	4649      	mov	r1, r9
 8014e48:	f7eb fa6a 	bl	8000320 <__aeabi_uldivmod>
 8014e4c:	4602      	mov	r2, r0
 8014e4e:	460b      	mov	r3, r1
 8014e50:	4b49      	ldr	r3, [pc, #292]	; (8014f78 <UART_SetConfig+0x38c>)
 8014e52:	fba3 2302 	umull	r2, r3, r3, r2
 8014e56:	095b      	lsrs	r3, r3, #5
 8014e58:	011e      	lsls	r6, r3, #4
 8014e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f04f 0100 	mov.w	r1, #0
 8014e62:	4602      	mov	r2, r0
 8014e64:	460b      	mov	r3, r1
 8014e66:	1894      	adds	r4, r2, r2
 8014e68:	60bc      	str	r4, [r7, #8]
 8014e6a:	415b      	adcs	r3, r3
 8014e6c:	60fb      	str	r3, [r7, #12]
 8014e6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014e72:	1812      	adds	r2, r2, r0
 8014e74:	eb41 0303 	adc.w	r3, r1, r3
 8014e78:	f04f 0400 	mov.w	r4, #0
 8014e7c:	f04f 0500 	mov.w	r5, #0
 8014e80:	00dd      	lsls	r5, r3, #3
 8014e82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014e86:	00d4      	lsls	r4, r2, #3
 8014e88:	4622      	mov	r2, r4
 8014e8a:	462b      	mov	r3, r5
 8014e8c:	1814      	adds	r4, r2, r0
 8014e8e:	64bc      	str	r4, [r7, #72]	; 0x48
 8014e90:	414b      	adcs	r3, r1
 8014e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014e96:	685b      	ldr	r3, [r3, #4]
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f04f 0100 	mov.w	r1, #0
 8014e9e:	f04f 0200 	mov.w	r2, #0
 8014ea2:	f04f 0300 	mov.w	r3, #0
 8014ea6:	008b      	lsls	r3, r1, #2
 8014ea8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014eac:	0082      	lsls	r2, r0, #2
 8014eae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8014eb2:	f7eb fa35 	bl	8000320 <__aeabi_uldivmod>
 8014eb6:	4602      	mov	r2, r0
 8014eb8:	460b      	mov	r3, r1
 8014eba:	4b2f      	ldr	r3, [pc, #188]	; (8014f78 <UART_SetConfig+0x38c>)
 8014ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8014ec0:	095b      	lsrs	r3, r3, #5
 8014ec2:	2164      	movs	r1, #100	; 0x64
 8014ec4:	fb01 f303 	mul.w	r3, r1, r3
 8014ec8:	1ad3      	subs	r3, r2, r3
 8014eca:	011b      	lsls	r3, r3, #4
 8014ecc:	3332      	adds	r3, #50	; 0x32
 8014ece:	4a2a      	ldr	r2, [pc, #168]	; (8014f78 <UART_SetConfig+0x38c>)
 8014ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8014ed4:	095b      	lsrs	r3, r3, #5
 8014ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014eda:	441e      	add	r6, r3
 8014edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014ede:	4618      	mov	r0, r3
 8014ee0:	f04f 0100 	mov.w	r1, #0
 8014ee4:	4602      	mov	r2, r0
 8014ee6:	460b      	mov	r3, r1
 8014ee8:	1894      	adds	r4, r2, r2
 8014eea:	603c      	str	r4, [r7, #0]
 8014eec:	415b      	adcs	r3, r3
 8014eee:	607b      	str	r3, [r7, #4]
 8014ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014ef4:	1812      	adds	r2, r2, r0
 8014ef6:	eb41 0303 	adc.w	r3, r1, r3
 8014efa:	f04f 0400 	mov.w	r4, #0
 8014efe:	f04f 0500 	mov.w	r5, #0
 8014f02:	00dd      	lsls	r5, r3, #3
 8014f04:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014f08:	00d4      	lsls	r4, r2, #3
 8014f0a:	4622      	mov	r2, r4
 8014f0c:	462b      	mov	r3, r5
 8014f0e:	eb12 0a00 	adds.w	sl, r2, r0
 8014f12:	eb43 0b01 	adc.w	fp, r3, r1
 8014f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014f18:	685b      	ldr	r3, [r3, #4]
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f04f 0100 	mov.w	r1, #0
 8014f20:	f04f 0200 	mov.w	r2, #0
 8014f24:	f04f 0300 	mov.w	r3, #0
 8014f28:	008b      	lsls	r3, r1, #2
 8014f2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014f2e:	0082      	lsls	r2, r0, #2
 8014f30:	4650      	mov	r0, sl
 8014f32:	4659      	mov	r1, fp
 8014f34:	f7eb f9f4 	bl	8000320 <__aeabi_uldivmod>
 8014f38:	4602      	mov	r2, r0
 8014f3a:	460b      	mov	r3, r1
 8014f3c:	4b0e      	ldr	r3, [pc, #56]	; (8014f78 <UART_SetConfig+0x38c>)
 8014f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8014f42:	095b      	lsrs	r3, r3, #5
 8014f44:	2164      	movs	r1, #100	; 0x64
 8014f46:	fb01 f303 	mul.w	r3, r1, r3
 8014f4a:	1ad3      	subs	r3, r2, r3
 8014f4c:	011b      	lsls	r3, r3, #4
 8014f4e:	3332      	adds	r3, #50	; 0x32
 8014f50:	4a09      	ldr	r2, [pc, #36]	; (8014f78 <UART_SetConfig+0x38c>)
 8014f52:	fba2 2303 	umull	r2, r3, r2, r3
 8014f56:	095b      	lsrs	r3, r3, #5
 8014f58:	f003 020f 	and.w	r2, r3, #15
 8014f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	4432      	add	r2, r6
 8014f62:	609a      	str	r2, [r3, #8]
}
 8014f64:	bf00      	nop
 8014f66:	377c      	adds	r7, #124	; 0x7c
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f6e:	bf00      	nop
 8014f70:	40011000 	.word	0x40011000
 8014f74:	40011400 	.word	0x40011400
 8014f78:	51eb851f 	.word	0x51eb851f

08014f7c <__errno>:
 8014f7c:	4b01      	ldr	r3, [pc, #4]	; (8014f84 <__errno+0x8>)
 8014f7e:	6818      	ldr	r0, [r3, #0]
 8014f80:	4770      	bx	lr
 8014f82:	bf00      	nop
 8014f84:	20000088 	.word	0x20000088

08014f88 <__libc_init_array>:
 8014f88:	b570      	push	{r4, r5, r6, lr}
 8014f8a:	4d0d      	ldr	r5, [pc, #52]	; (8014fc0 <__libc_init_array+0x38>)
 8014f8c:	4c0d      	ldr	r4, [pc, #52]	; (8014fc4 <__libc_init_array+0x3c>)
 8014f8e:	1b64      	subs	r4, r4, r5
 8014f90:	10a4      	asrs	r4, r4, #2
 8014f92:	2600      	movs	r6, #0
 8014f94:	42a6      	cmp	r6, r4
 8014f96:	d109      	bne.n	8014fac <__libc_init_array+0x24>
 8014f98:	4d0b      	ldr	r5, [pc, #44]	; (8014fc8 <__libc_init_array+0x40>)
 8014f9a:	4c0c      	ldr	r4, [pc, #48]	; (8014fcc <__libc_init_array+0x44>)
 8014f9c:	f001 f80e 	bl	8015fbc <_init>
 8014fa0:	1b64      	subs	r4, r4, r5
 8014fa2:	10a4      	asrs	r4, r4, #2
 8014fa4:	2600      	movs	r6, #0
 8014fa6:	42a6      	cmp	r6, r4
 8014fa8:	d105      	bne.n	8014fb6 <__libc_init_array+0x2e>
 8014faa:	bd70      	pop	{r4, r5, r6, pc}
 8014fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8014fb0:	4798      	blx	r3
 8014fb2:	3601      	adds	r6, #1
 8014fb4:	e7ee      	b.n	8014f94 <__libc_init_array+0xc>
 8014fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8014fba:	4798      	blx	r3
 8014fbc:	3601      	adds	r6, #1
 8014fbe:	e7f2      	b.n	8014fa6 <__libc_init_array+0x1e>
 8014fc0:	08016254 	.word	0x08016254
 8014fc4:	08016254 	.word	0x08016254
 8014fc8:	08016254 	.word	0x08016254
 8014fcc:	08016258 	.word	0x08016258

08014fd0 <memcpy>:
 8014fd0:	440a      	add	r2, r1
 8014fd2:	4291      	cmp	r1, r2
 8014fd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8014fd8:	d100      	bne.n	8014fdc <memcpy+0xc>
 8014fda:	4770      	bx	lr
 8014fdc:	b510      	push	{r4, lr}
 8014fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014fe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014fe6:	4291      	cmp	r1, r2
 8014fe8:	d1f9      	bne.n	8014fde <memcpy+0xe>
 8014fea:	bd10      	pop	{r4, pc}

08014fec <memset>:
 8014fec:	4402      	add	r2, r0
 8014fee:	4603      	mov	r3, r0
 8014ff0:	4293      	cmp	r3, r2
 8014ff2:	d100      	bne.n	8014ff6 <memset+0xa>
 8014ff4:	4770      	bx	lr
 8014ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8014ffa:	e7f9      	b.n	8014ff0 <memset+0x4>

08014ffc <iprintf>:
 8014ffc:	b40f      	push	{r0, r1, r2, r3}
 8014ffe:	4b0a      	ldr	r3, [pc, #40]	; (8015028 <iprintf+0x2c>)
 8015000:	b513      	push	{r0, r1, r4, lr}
 8015002:	681c      	ldr	r4, [r3, #0]
 8015004:	b124      	cbz	r4, 8015010 <iprintf+0x14>
 8015006:	69a3      	ldr	r3, [r4, #24]
 8015008:	b913      	cbnz	r3, 8015010 <iprintf+0x14>
 801500a:	4620      	mov	r0, r4
 801500c:	f000 fa72 	bl	80154f4 <__sinit>
 8015010:	ab05      	add	r3, sp, #20
 8015012:	9a04      	ldr	r2, [sp, #16]
 8015014:	68a1      	ldr	r1, [r4, #8]
 8015016:	9301      	str	r3, [sp, #4]
 8015018:	4620      	mov	r0, r4
 801501a:	f000 fc43 	bl	80158a4 <_vfiprintf_r>
 801501e:	b002      	add	sp, #8
 8015020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015024:	b004      	add	sp, #16
 8015026:	4770      	bx	lr
 8015028:	20000088 	.word	0x20000088

0801502c <_puts_r>:
 801502c:	b570      	push	{r4, r5, r6, lr}
 801502e:	460e      	mov	r6, r1
 8015030:	4605      	mov	r5, r0
 8015032:	b118      	cbz	r0, 801503c <_puts_r+0x10>
 8015034:	6983      	ldr	r3, [r0, #24]
 8015036:	b90b      	cbnz	r3, 801503c <_puts_r+0x10>
 8015038:	f000 fa5c 	bl	80154f4 <__sinit>
 801503c:	69ab      	ldr	r3, [r5, #24]
 801503e:	68ac      	ldr	r4, [r5, #8]
 8015040:	b913      	cbnz	r3, 8015048 <_puts_r+0x1c>
 8015042:	4628      	mov	r0, r5
 8015044:	f000 fa56 	bl	80154f4 <__sinit>
 8015048:	4b2c      	ldr	r3, [pc, #176]	; (80150fc <_puts_r+0xd0>)
 801504a:	429c      	cmp	r4, r3
 801504c:	d120      	bne.n	8015090 <_puts_r+0x64>
 801504e:	686c      	ldr	r4, [r5, #4]
 8015050:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015052:	07db      	lsls	r3, r3, #31
 8015054:	d405      	bmi.n	8015062 <_puts_r+0x36>
 8015056:	89a3      	ldrh	r3, [r4, #12]
 8015058:	0598      	lsls	r0, r3, #22
 801505a:	d402      	bmi.n	8015062 <_puts_r+0x36>
 801505c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801505e:	f000 fae7 	bl	8015630 <__retarget_lock_acquire_recursive>
 8015062:	89a3      	ldrh	r3, [r4, #12]
 8015064:	0719      	lsls	r1, r3, #28
 8015066:	d51d      	bpl.n	80150a4 <_puts_r+0x78>
 8015068:	6923      	ldr	r3, [r4, #16]
 801506a:	b1db      	cbz	r3, 80150a4 <_puts_r+0x78>
 801506c:	3e01      	subs	r6, #1
 801506e:	68a3      	ldr	r3, [r4, #8]
 8015070:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015074:	3b01      	subs	r3, #1
 8015076:	60a3      	str	r3, [r4, #8]
 8015078:	bb39      	cbnz	r1, 80150ca <_puts_r+0x9e>
 801507a:	2b00      	cmp	r3, #0
 801507c:	da38      	bge.n	80150f0 <_puts_r+0xc4>
 801507e:	4622      	mov	r2, r4
 8015080:	210a      	movs	r1, #10
 8015082:	4628      	mov	r0, r5
 8015084:	f000 f85c 	bl	8015140 <__swbuf_r>
 8015088:	3001      	adds	r0, #1
 801508a:	d011      	beq.n	80150b0 <_puts_r+0x84>
 801508c:	250a      	movs	r5, #10
 801508e:	e011      	b.n	80150b4 <_puts_r+0x88>
 8015090:	4b1b      	ldr	r3, [pc, #108]	; (8015100 <_puts_r+0xd4>)
 8015092:	429c      	cmp	r4, r3
 8015094:	d101      	bne.n	801509a <_puts_r+0x6e>
 8015096:	68ac      	ldr	r4, [r5, #8]
 8015098:	e7da      	b.n	8015050 <_puts_r+0x24>
 801509a:	4b1a      	ldr	r3, [pc, #104]	; (8015104 <_puts_r+0xd8>)
 801509c:	429c      	cmp	r4, r3
 801509e:	bf08      	it	eq
 80150a0:	68ec      	ldreq	r4, [r5, #12]
 80150a2:	e7d5      	b.n	8015050 <_puts_r+0x24>
 80150a4:	4621      	mov	r1, r4
 80150a6:	4628      	mov	r0, r5
 80150a8:	f000 f89c 	bl	80151e4 <__swsetup_r>
 80150ac:	2800      	cmp	r0, #0
 80150ae:	d0dd      	beq.n	801506c <_puts_r+0x40>
 80150b0:	f04f 35ff 	mov.w	r5, #4294967295
 80150b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80150b6:	07da      	lsls	r2, r3, #31
 80150b8:	d405      	bmi.n	80150c6 <_puts_r+0x9a>
 80150ba:	89a3      	ldrh	r3, [r4, #12]
 80150bc:	059b      	lsls	r3, r3, #22
 80150be:	d402      	bmi.n	80150c6 <_puts_r+0x9a>
 80150c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80150c2:	f000 fab6 	bl	8015632 <__retarget_lock_release_recursive>
 80150c6:	4628      	mov	r0, r5
 80150c8:	bd70      	pop	{r4, r5, r6, pc}
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	da04      	bge.n	80150d8 <_puts_r+0xac>
 80150ce:	69a2      	ldr	r2, [r4, #24]
 80150d0:	429a      	cmp	r2, r3
 80150d2:	dc06      	bgt.n	80150e2 <_puts_r+0xb6>
 80150d4:	290a      	cmp	r1, #10
 80150d6:	d004      	beq.n	80150e2 <_puts_r+0xb6>
 80150d8:	6823      	ldr	r3, [r4, #0]
 80150da:	1c5a      	adds	r2, r3, #1
 80150dc:	6022      	str	r2, [r4, #0]
 80150de:	7019      	strb	r1, [r3, #0]
 80150e0:	e7c5      	b.n	801506e <_puts_r+0x42>
 80150e2:	4622      	mov	r2, r4
 80150e4:	4628      	mov	r0, r5
 80150e6:	f000 f82b 	bl	8015140 <__swbuf_r>
 80150ea:	3001      	adds	r0, #1
 80150ec:	d1bf      	bne.n	801506e <_puts_r+0x42>
 80150ee:	e7df      	b.n	80150b0 <_puts_r+0x84>
 80150f0:	6823      	ldr	r3, [r4, #0]
 80150f2:	250a      	movs	r5, #10
 80150f4:	1c5a      	adds	r2, r3, #1
 80150f6:	6022      	str	r2, [r4, #0]
 80150f8:	701d      	strb	r5, [r3, #0]
 80150fa:	e7db      	b.n	80150b4 <_puts_r+0x88>
 80150fc:	080161d8 	.word	0x080161d8
 8015100:	080161f8 	.word	0x080161f8
 8015104:	080161b8 	.word	0x080161b8

08015108 <puts>:
 8015108:	4b02      	ldr	r3, [pc, #8]	; (8015114 <puts+0xc>)
 801510a:	4601      	mov	r1, r0
 801510c:	6818      	ldr	r0, [r3, #0]
 801510e:	f7ff bf8d 	b.w	801502c <_puts_r>
 8015112:	bf00      	nop
 8015114:	20000088 	.word	0x20000088

08015118 <strncpy>:
 8015118:	b510      	push	{r4, lr}
 801511a:	3901      	subs	r1, #1
 801511c:	4603      	mov	r3, r0
 801511e:	b132      	cbz	r2, 801512e <strncpy+0x16>
 8015120:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015124:	f803 4b01 	strb.w	r4, [r3], #1
 8015128:	3a01      	subs	r2, #1
 801512a:	2c00      	cmp	r4, #0
 801512c:	d1f7      	bne.n	801511e <strncpy+0x6>
 801512e:	441a      	add	r2, r3
 8015130:	2100      	movs	r1, #0
 8015132:	4293      	cmp	r3, r2
 8015134:	d100      	bne.n	8015138 <strncpy+0x20>
 8015136:	bd10      	pop	{r4, pc}
 8015138:	f803 1b01 	strb.w	r1, [r3], #1
 801513c:	e7f9      	b.n	8015132 <strncpy+0x1a>
	...

08015140 <__swbuf_r>:
 8015140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015142:	460e      	mov	r6, r1
 8015144:	4614      	mov	r4, r2
 8015146:	4605      	mov	r5, r0
 8015148:	b118      	cbz	r0, 8015152 <__swbuf_r+0x12>
 801514a:	6983      	ldr	r3, [r0, #24]
 801514c:	b90b      	cbnz	r3, 8015152 <__swbuf_r+0x12>
 801514e:	f000 f9d1 	bl	80154f4 <__sinit>
 8015152:	4b21      	ldr	r3, [pc, #132]	; (80151d8 <__swbuf_r+0x98>)
 8015154:	429c      	cmp	r4, r3
 8015156:	d12b      	bne.n	80151b0 <__swbuf_r+0x70>
 8015158:	686c      	ldr	r4, [r5, #4]
 801515a:	69a3      	ldr	r3, [r4, #24]
 801515c:	60a3      	str	r3, [r4, #8]
 801515e:	89a3      	ldrh	r3, [r4, #12]
 8015160:	071a      	lsls	r2, r3, #28
 8015162:	d52f      	bpl.n	80151c4 <__swbuf_r+0x84>
 8015164:	6923      	ldr	r3, [r4, #16]
 8015166:	b36b      	cbz	r3, 80151c4 <__swbuf_r+0x84>
 8015168:	6923      	ldr	r3, [r4, #16]
 801516a:	6820      	ldr	r0, [r4, #0]
 801516c:	1ac0      	subs	r0, r0, r3
 801516e:	6963      	ldr	r3, [r4, #20]
 8015170:	b2f6      	uxtb	r6, r6
 8015172:	4283      	cmp	r3, r0
 8015174:	4637      	mov	r7, r6
 8015176:	dc04      	bgt.n	8015182 <__swbuf_r+0x42>
 8015178:	4621      	mov	r1, r4
 801517a:	4628      	mov	r0, r5
 801517c:	f000 f926 	bl	80153cc <_fflush_r>
 8015180:	bb30      	cbnz	r0, 80151d0 <__swbuf_r+0x90>
 8015182:	68a3      	ldr	r3, [r4, #8]
 8015184:	3b01      	subs	r3, #1
 8015186:	60a3      	str	r3, [r4, #8]
 8015188:	6823      	ldr	r3, [r4, #0]
 801518a:	1c5a      	adds	r2, r3, #1
 801518c:	6022      	str	r2, [r4, #0]
 801518e:	701e      	strb	r6, [r3, #0]
 8015190:	6963      	ldr	r3, [r4, #20]
 8015192:	3001      	adds	r0, #1
 8015194:	4283      	cmp	r3, r0
 8015196:	d004      	beq.n	80151a2 <__swbuf_r+0x62>
 8015198:	89a3      	ldrh	r3, [r4, #12]
 801519a:	07db      	lsls	r3, r3, #31
 801519c:	d506      	bpl.n	80151ac <__swbuf_r+0x6c>
 801519e:	2e0a      	cmp	r6, #10
 80151a0:	d104      	bne.n	80151ac <__swbuf_r+0x6c>
 80151a2:	4621      	mov	r1, r4
 80151a4:	4628      	mov	r0, r5
 80151a6:	f000 f911 	bl	80153cc <_fflush_r>
 80151aa:	b988      	cbnz	r0, 80151d0 <__swbuf_r+0x90>
 80151ac:	4638      	mov	r0, r7
 80151ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151b0:	4b0a      	ldr	r3, [pc, #40]	; (80151dc <__swbuf_r+0x9c>)
 80151b2:	429c      	cmp	r4, r3
 80151b4:	d101      	bne.n	80151ba <__swbuf_r+0x7a>
 80151b6:	68ac      	ldr	r4, [r5, #8]
 80151b8:	e7cf      	b.n	801515a <__swbuf_r+0x1a>
 80151ba:	4b09      	ldr	r3, [pc, #36]	; (80151e0 <__swbuf_r+0xa0>)
 80151bc:	429c      	cmp	r4, r3
 80151be:	bf08      	it	eq
 80151c0:	68ec      	ldreq	r4, [r5, #12]
 80151c2:	e7ca      	b.n	801515a <__swbuf_r+0x1a>
 80151c4:	4621      	mov	r1, r4
 80151c6:	4628      	mov	r0, r5
 80151c8:	f000 f80c 	bl	80151e4 <__swsetup_r>
 80151cc:	2800      	cmp	r0, #0
 80151ce:	d0cb      	beq.n	8015168 <__swbuf_r+0x28>
 80151d0:	f04f 37ff 	mov.w	r7, #4294967295
 80151d4:	e7ea      	b.n	80151ac <__swbuf_r+0x6c>
 80151d6:	bf00      	nop
 80151d8:	080161d8 	.word	0x080161d8
 80151dc:	080161f8 	.word	0x080161f8
 80151e0:	080161b8 	.word	0x080161b8

080151e4 <__swsetup_r>:
 80151e4:	4b32      	ldr	r3, [pc, #200]	; (80152b0 <__swsetup_r+0xcc>)
 80151e6:	b570      	push	{r4, r5, r6, lr}
 80151e8:	681d      	ldr	r5, [r3, #0]
 80151ea:	4606      	mov	r6, r0
 80151ec:	460c      	mov	r4, r1
 80151ee:	b125      	cbz	r5, 80151fa <__swsetup_r+0x16>
 80151f0:	69ab      	ldr	r3, [r5, #24]
 80151f2:	b913      	cbnz	r3, 80151fa <__swsetup_r+0x16>
 80151f4:	4628      	mov	r0, r5
 80151f6:	f000 f97d 	bl	80154f4 <__sinit>
 80151fa:	4b2e      	ldr	r3, [pc, #184]	; (80152b4 <__swsetup_r+0xd0>)
 80151fc:	429c      	cmp	r4, r3
 80151fe:	d10f      	bne.n	8015220 <__swsetup_r+0x3c>
 8015200:	686c      	ldr	r4, [r5, #4]
 8015202:	89a3      	ldrh	r3, [r4, #12]
 8015204:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015208:	0719      	lsls	r1, r3, #28
 801520a:	d42c      	bmi.n	8015266 <__swsetup_r+0x82>
 801520c:	06dd      	lsls	r5, r3, #27
 801520e:	d411      	bmi.n	8015234 <__swsetup_r+0x50>
 8015210:	2309      	movs	r3, #9
 8015212:	6033      	str	r3, [r6, #0]
 8015214:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015218:	81a3      	strh	r3, [r4, #12]
 801521a:	f04f 30ff 	mov.w	r0, #4294967295
 801521e:	e03e      	b.n	801529e <__swsetup_r+0xba>
 8015220:	4b25      	ldr	r3, [pc, #148]	; (80152b8 <__swsetup_r+0xd4>)
 8015222:	429c      	cmp	r4, r3
 8015224:	d101      	bne.n	801522a <__swsetup_r+0x46>
 8015226:	68ac      	ldr	r4, [r5, #8]
 8015228:	e7eb      	b.n	8015202 <__swsetup_r+0x1e>
 801522a:	4b24      	ldr	r3, [pc, #144]	; (80152bc <__swsetup_r+0xd8>)
 801522c:	429c      	cmp	r4, r3
 801522e:	bf08      	it	eq
 8015230:	68ec      	ldreq	r4, [r5, #12]
 8015232:	e7e6      	b.n	8015202 <__swsetup_r+0x1e>
 8015234:	0758      	lsls	r0, r3, #29
 8015236:	d512      	bpl.n	801525e <__swsetup_r+0x7a>
 8015238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801523a:	b141      	cbz	r1, 801524e <__swsetup_r+0x6a>
 801523c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015240:	4299      	cmp	r1, r3
 8015242:	d002      	beq.n	801524a <__swsetup_r+0x66>
 8015244:	4630      	mov	r0, r6
 8015246:	f000 fa59 	bl	80156fc <_free_r>
 801524a:	2300      	movs	r3, #0
 801524c:	6363      	str	r3, [r4, #52]	; 0x34
 801524e:	89a3      	ldrh	r3, [r4, #12]
 8015250:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015254:	81a3      	strh	r3, [r4, #12]
 8015256:	2300      	movs	r3, #0
 8015258:	6063      	str	r3, [r4, #4]
 801525a:	6923      	ldr	r3, [r4, #16]
 801525c:	6023      	str	r3, [r4, #0]
 801525e:	89a3      	ldrh	r3, [r4, #12]
 8015260:	f043 0308 	orr.w	r3, r3, #8
 8015264:	81a3      	strh	r3, [r4, #12]
 8015266:	6923      	ldr	r3, [r4, #16]
 8015268:	b94b      	cbnz	r3, 801527e <__swsetup_r+0x9a>
 801526a:	89a3      	ldrh	r3, [r4, #12]
 801526c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015274:	d003      	beq.n	801527e <__swsetup_r+0x9a>
 8015276:	4621      	mov	r1, r4
 8015278:	4630      	mov	r0, r6
 801527a:	f000 f9ff 	bl	801567c <__smakebuf_r>
 801527e:	89a0      	ldrh	r0, [r4, #12]
 8015280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015284:	f010 0301 	ands.w	r3, r0, #1
 8015288:	d00a      	beq.n	80152a0 <__swsetup_r+0xbc>
 801528a:	2300      	movs	r3, #0
 801528c:	60a3      	str	r3, [r4, #8]
 801528e:	6963      	ldr	r3, [r4, #20]
 8015290:	425b      	negs	r3, r3
 8015292:	61a3      	str	r3, [r4, #24]
 8015294:	6923      	ldr	r3, [r4, #16]
 8015296:	b943      	cbnz	r3, 80152aa <__swsetup_r+0xc6>
 8015298:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801529c:	d1ba      	bne.n	8015214 <__swsetup_r+0x30>
 801529e:	bd70      	pop	{r4, r5, r6, pc}
 80152a0:	0781      	lsls	r1, r0, #30
 80152a2:	bf58      	it	pl
 80152a4:	6963      	ldrpl	r3, [r4, #20]
 80152a6:	60a3      	str	r3, [r4, #8]
 80152a8:	e7f4      	b.n	8015294 <__swsetup_r+0xb0>
 80152aa:	2000      	movs	r0, #0
 80152ac:	e7f7      	b.n	801529e <__swsetup_r+0xba>
 80152ae:	bf00      	nop
 80152b0:	20000088 	.word	0x20000088
 80152b4:	080161d8 	.word	0x080161d8
 80152b8:	080161f8 	.word	0x080161f8
 80152bc:	080161b8 	.word	0x080161b8

080152c0 <__sflush_r>:
 80152c0:	898a      	ldrh	r2, [r1, #12]
 80152c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152c6:	4605      	mov	r5, r0
 80152c8:	0710      	lsls	r0, r2, #28
 80152ca:	460c      	mov	r4, r1
 80152cc:	d458      	bmi.n	8015380 <__sflush_r+0xc0>
 80152ce:	684b      	ldr	r3, [r1, #4]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	dc05      	bgt.n	80152e0 <__sflush_r+0x20>
 80152d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	dc02      	bgt.n	80152e0 <__sflush_r+0x20>
 80152da:	2000      	movs	r0, #0
 80152dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80152e2:	2e00      	cmp	r6, #0
 80152e4:	d0f9      	beq.n	80152da <__sflush_r+0x1a>
 80152e6:	2300      	movs	r3, #0
 80152e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80152ec:	682f      	ldr	r7, [r5, #0]
 80152ee:	602b      	str	r3, [r5, #0]
 80152f0:	d032      	beq.n	8015358 <__sflush_r+0x98>
 80152f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80152f4:	89a3      	ldrh	r3, [r4, #12]
 80152f6:	075a      	lsls	r2, r3, #29
 80152f8:	d505      	bpl.n	8015306 <__sflush_r+0x46>
 80152fa:	6863      	ldr	r3, [r4, #4]
 80152fc:	1ac0      	subs	r0, r0, r3
 80152fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015300:	b10b      	cbz	r3, 8015306 <__sflush_r+0x46>
 8015302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015304:	1ac0      	subs	r0, r0, r3
 8015306:	2300      	movs	r3, #0
 8015308:	4602      	mov	r2, r0
 801530a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801530c:	6a21      	ldr	r1, [r4, #32]
 801530e:	4628      	mov	r0, r5
 8015310:	47b0      	blx	r6
 8015312:	1c43      	adds	r3, r0, #1
 8015314:	89a3      	ldrh	r3, [r4, #12]
 8015316:	d106      	bne.n	8015326 <__sflush_r+0x66>
 8015318:	6829      	ldr	r1, [r5, #0]
 801531a:	291d      	cmp	r1, #29
 801531c:	d82c      	bhi.n	8015378 <__sflush_r+0xb8>
 801531e:	4a2a      	ldr	r2, [pc, #168]	; (80153c8 <__sflush_r+0x108>)
 8015320:	40ca      	lsrs	r2, r1
 8015322:	07d6      	lsls	r6, r2, #31
 8015324:	d528      	bpl.n	8015378 <__sflush_r+0xb8>
 8015326:	2200      	movs	r2, #0
 8015328:	6062      	str	r2, [r4, #4]
 801532a:	04d9      	lsls	r1, r3, #19
 801532c:	6922      	ldr	r2, [r4, #16]
 801532e:	6022      	str	r2, [r4, #0]
 8015330:	d504      	bpl.n	801533c <__sflush_r+0x7c>
 8015332:	1c42      	adds	r2, r0, #1
 8015334:	d101      	bne.n	801533a <__sflush_r+0x7a>
 8015336:	682b      	ldr	r3, [r5, #0]
 8015338:	b903      	cbnz	r3, 801533c <__sflush_r+0x7c>
 801533a:	6560      	str	r0, [r4, #84]	; 0x54
 801533c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801533e:	602f      	str	r7, [r5, #0]
 8015340:	2900      	cmp	r1, #0
 8015342:	d0ca      	beq.n	80152da <__sflush_r+0x1a>
 8015344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015348:	4299      	cmp	r1, r3
 801534a:	d002      	beq.n	8015352 <__sflush_r+0x92>
 801534c:	4628      	mov	r0, r5
 801534e:	f000 f9d5 	bl	80156fc <_free_r>
 8015352:	2000      	movs	r0, #0
 8015354:	6360      	str	r0, [r4, #52]	; 0x34
 8015356:	e7c1      	b.n	80152dc <__sflush_r+0x1c>
 8015358:	6a21      	ldr	r1, [r4, #32]
 801535a:	2301      	movs	r3, #1
 801535c:	4628      	mov	r0, r5
 801535e:	47b0      	blx	r6
 8015360:	1c41      	adds	r1, r0, #1
 8015362:	d1c7      	bne.n	80152f4 <__sflush_r+0x34>
 8015364:	682b      	ldr	r3, [r5, #0]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d0c4      	beq.n	80152f4 <__sflush_r+0x34>
 801536a:	2b1d      	cmp	r3, #29
 801536c:	d001      	beq.n	8015372 <__sflush_r+0xb2>
 801536e:	2b16      	cmp	r3, #22
 8015370:	d101      	bne.n	8015376 <__sflush_r+0xb6>
 8015372:	602f      	str	r7, [r5, #0]
 8015374:	e7b1      	b.n	80152da <__sflush_r+0x1a>
 8015376:	89a3      	ldrh	r3, [r4, #12]
 8015378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801537c:	81a3      	strh	r3, [r4, #12]
 801537e:	e7ad      	b.n	80152dc <__sflush_r+0x1c>
 8015380:	690f      	ldr	r7, [r1, #16]
 8015382:	2f00      	cmp	r7, #0
 8015384:	d0a9      	beq.n	80152da <__sflush_r+0x1a>
 8015386:	0793      	lsls	r3, r2, #30
 8015388:	680e      	ldr	r6, [r1, #0]
 801538a:	bf08      	it	eq
 801538c:	694b      	ldreq	r3, [r1, #20]
 801538e:	600f      	str	r7, [r1, #0]
 8015390:	bf18      	it	ne
 8015392:	2300      	movne	r3, #0
 8015394:	eba6 0807 	sub.w	r8, r6, r7
 8015398:	608b      	str	r3, [r1, #8]
 801539a:	f1b8 0f00 	cmp.w	r8, #0
 801539e:	dd9c      	ble.n	80152da <__sflush_r+0x1a>
 80153a0:	6a21      	ldr	r1, [r4, #32]
 80153a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80153a4:	4643      	mov	r3, r8
 80153a6:	463a      	mov	r2, r7
 80153a8:	4628      	mov	r0, r5
 80153aa:	47b0      	blx	r6
 80153ac:	2800      	cmp	r0, #0
 80153ae:	dc06      	bgt.n	80153be <__sflush_r+0xfe>
 80153b0:	89a3      	ldrh	r3, [r4, #12]
 80153b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153b6:	81a3      	strh	r3, [r4, #12]
 80153b8:	f04f 30ff 	mov.w	r0, #4294967295
 80153bc:	e78e      	b.n	80152dc <__sflush_r+0x1c>
 80153be:	4407      	add	r7, r0
 80153c0:	eba8 0800 	sub.w	r8, r8, r0
 80153c4:	e7e9      	b.n	801539a <__sflush_r+0xda>
 80153c6:	bf00      	nop
 80153c8:	20400001 	.word	0x20400001

080153cc <_fflush_r>:
 80153cc:	b538      	push	{r3, r4, r5, lr}
 80153ce:	690b      	ldr	r3, [r1, #16]
 80153d0:	4605      	mov	r5, r0
 80153d2:	460c      	mov	r4, r1
 80153d4:	b913      	cbnz	r3, 80153dc <_fflush_r+0x10>
 80153d6:	2500      	movs	r5, #0
 80153d8:	4628      	mov	r0, r5
 80153da:	bd38      	pop	{r3, r4, r5, pc}
 80153dc:	b118      	cbz	r0, 80153e6 <_fflush_r+0x1a>
 80153de:	6983      	ldr	r3, [r0, #24]
 80153e0:	b90b      	cbnz	r3, 80153e6 <_fflush_r+0x1a>
 80153e2:	f000 f887 	bl	80154f4 <__sinit>
 80153e6:	4b14      	ldr	r3, [pc, #80]	; (8015438 <_fflush_r+0x6c>)
 80153e8:	429c      	cmp	r4, r3
 80153ea:	d11b      	bne.n	8015424 <_fflush_r+0x58>
 80153ec:	686c      	ldr	r4, [r5, #4]
 80153ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d0ef      	beq.n	80153d6 <_fflush_r+0xa>
 80153f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80153f8:	07d0      	lsls	r0, r2, #31
 80153fa:	d404      	bmi.n	8015406 <_fflush_r+0x3a>
 80153fc:	0599      	lsls	r1, r3, #22
 80153fe:	d402      	bmi.n	8015406 <_fflush_r+0x3a>
 8015400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015402:	f000 f915 	bl	8015630 <__retarget_lock_acquire_recursive>
 8015406:	4628      	mov	r0, r5
 8015408:	4621      	mov	r1, r4
 801540a:	f7ff ff59 	bl	80152c0 <__sflush_r>
 801540e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015410:	07da      	lsls	r2, r3, #31
 8015412:	4605      	mov	r5, r0
 8015414:	d4e0      	bmi.n	80153d8 <_fflush_r+0xc>
 8015416:	89a3      	ldrh	r3, [r4, #12]
 8015418:	059b      	lsls	r3, r3, #22
 801541a:	d4dd      	bmi.n	80153d8 <_fflush_r+0xc>
 801541c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801541e:	f000 f908 	bl	8015632 <__retarget_lock_release_recursive>
 8015422:	e7d9      	b.n	80153d8 <_fflush_r+0xc>
 8015424:	4b05      	ldr	r3, [pc, #20]	; (801543c <_fflush_r+0x70>)
 8015426:	429c      	cmp	r4, r3
 8015428:	d101      	bne.n	801542e <_fflush_r+0x62>
 801542a:	68ac      	ldr	r4, [r5, #8]
 801542c:	e7df      	b.n	80153ee <_fflush_r+0x22>
 801542e:	4b04      	ldr	r3, [pc, #16]	; (8015440 <_fflush_r+0x74>)
 8015430:	429c      	cmp	r4, r3
 8015432:	bf08      	it	eq
 8015434:	68ec      	ldreq	r4, [r5, #12]
 8015436:	e7da      	b.n	80153ee <_fflush_r+0x22>
 8015438:	080161d8 	.word	0x080161d8
 801543c:	080161f8 	.word	0x080161f8
 8015440:	080161b8 	.word	0x080161b8

08015444 <std>:
 8015444:	2300      	movs	r3, #0
 8015446:	b510      	push	{r4, lr}
 8015448:	4604      	mov	r4, r0
 801544a:	e9c0 3300 	strd	r3, r3, [r0]
 801544e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015452:	6083      	str	r3, [r0, #8]
 8015454:	8181      	strh	r1, [r0, #12]
 8015456:	6643      	str	r3, [r0, #100]	; 0x64
 8015458:	81c2      	strh	r2, [r0, #14]
 801545a:	6183      	str	r3, [r0, #24]
 801545c:	4619      	mov	r1, r3
 801545e:	2208      	movs	r2, #8
 8015460:	305c      	adds	r0, #92	; 0x5c
 8015462:	f7ff fdc3 	bl	8014fec <memset>
 8015466:	4b05      	ldr	r3, [pc, #20]	; (801547c <std+0x38>)
 8015468:	6263      	str	r3, [r4, #36]	; 0x24
 801546a:	4b05      	ldr	r3, [pc, #20]	; (8015480 <std+0x3c>)
 801546c:	62a3      	str	r3, [r4, #40]	; 0x28
 801546e:	4b05      	ldr	r3, [pc, #20]	; (8015484 <std+0x40>)
 8015470:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015472:	4b05      	ldr	r3, [pc, #20]	; (8015488 <std+0x44>)
 8015474:	6224      	str	r4, [r4, #32]
 8015476:	6323      	str	r3, [r4, #48]	; 0x30
 8015478:	bd10      	pop	{r4, pc}
 801547a:	bf00      	nop
 801547c:	08015e4d 	.word	0x08015e4d
 8015480:	08015e6f 	.word	0x08015e6f
 8015484:	08015ea7 	.word	0x08015ea7
 8015488:	08015ecb 	.word	0x08015ecb

0801548c <_cleanup_r>:
 801548c:	4901      	ldr	r1, [pc, #4]	; (8015494 <_cleanup_r+0x8>)
 801548e:	f000 b8af 	b.w	80155f0 <_fwalk_reent>
 8015492:	bf00      	nop
 8015494:	080153cd 	.word	0x080153cd

08015498 <__sfmoreglue>:
 8015498:	b570      	push	{r4, r5, r6, lr}
 801549a:	1e4a      	subs	r2, r1, #1
 801549c:	2568      	movs	r5, #104	; 0x68
 801549e:	4355      	muls	r5, r2
 80154a0:	460e      	mov	r6, r1
 80154a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80154a6:	f000 f979 	bl	801579c <_malloc_r>
 80154aa:	4604      	mov	r4, r0
 80154ac:	b140      	cbz	r0, 80154c0 <__sfmoreglue+0x28>
 80154ae:	2100      	movs	r1, #0
 80154b0:	e9c0 1600 	strd	r1, r6, [r0]
 80154b4:	300c      	adds	r0, #12
 80154b6:	60a0      	str	r0, [r4, #8]
 80154b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80154bc:	f7ff fd96 	bl	8014fec <memset>
 80154c0:	4620      	mov	r0, r4
 80154c2:	bd70      	pop	{r4, r5, r6, pc}

080154c4 <__sfp_lock_acquire>:
 80154c4:	4801      	ldr	r0, [pc, #4]	; (80154cc <__sfp_lock_acquire+0x8>)
 80154c6:	f000 b8b3 	b.w	8015630 <__retarget_lock_acquire_recursive>
 80154ca:	bf00      	nop
 80154cc:	20007484 	.word	0x20007484

080154d0 <__sfp_lock_release>:
 80154d0:	4801      	ldr	r0, [pc, #4]	; (80154d8 <__sfp_lock_release+0x8>)
 80154d2:	f000 b8ae 	b.w	8015632 <__retarget_lock_release_recursive>
 80154d6:	bf00      	nop
 80154d8:	20007484 	.word	0x20007484

080154dc <__sinit_lock_acquire>:
 80154dc:	4801      	ldr	r0, [pc, #4]	; (80154e4 <__sinit_lock_acquire+0x8>)
 80154de:	f000 b8a7 	b.w	8015630 <__retarget_lock_acquire_recursive>
 80154e2:	bf00      	nop
 80154e4:	2000747f 	.word	0x2000747f

080154e8 <__sinit_lock_release>:
 80154e8:	4801      	ldr	r0, [pc, #4]	; (80154f0 <__sinit_lock_release+0x8>)
 80154ea:	f000 b8a2 	b.w	8015632 <__retarget_lock_release_recursive>
 80154ee:	bf00      	nop
 80154f0:	2000747f 	.word	0x2000747f

080154f4 <__sinit>:
 80154f4:	b510      	push	{r4, lr}
 80154f6:	4604      	mov	r4, r0
 80154f8:	f7ff fff0 	bl	80154dc <__sinit_lock_acquire>
 80154fc:	69a3      	ldr	r3, [r4, #24]
 80154fe:	b11b      	cbz	r3, 8015508 <__sinit+0x14>
 8015500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015504:	f7ff bff0 	b.w	80154e8 <__sinit_lock_release>
 8015508:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801550c:	6523      	str	r3, [r4, #80]	; 0x50
 801550e:	4b13      	ldr	r3, [pc, #76]	; (801555c <__sinit+0x68>)
 8015510:	4a13      	ldr	r2, [pc, #76]	; (8015560 <__sinit+0x6c>)
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	62a2      	str	r2, [r4, #40]	; 0x28
 8015516:	42a3      	cmp	r3, r4
 8015518:	bf04      	itt	eq
 801551a:	2301      	moveq	r3, #1
 801551c:	61a3      	streq	r3, [r4, #24]
 801551e:	4620      	mov	r0, r4
 8015520:	f000 f820 	bl	8015564 <__sfp>
 8015524:	6060      	str	r0, [r4, #4]
 8015526:	4620      	mov	r0, r4
 8015528:	f000 f81c 	bl	8015564 <__sfp>
 801552c:	60a0      	str	r0, [r4, #8]
 801552e:	4620      	mov	r0, r4
 8015530:	f000 f818 	bl	8015564 <__sfp>
 8015534:	2200      	movs	r2, #0
 8015536:	60e0      	str	r0, [r4, #12]
 8015538:	2104      	movs	r1, #4
 801553a:	6860      	ldr	r0, [r4, #4]
 801553c:	f7ff ff82 	bl	8015444 <std>
 8015540:	68a0      	ldr	r0, [r4, #8]
 8015542:	2201      	movs	r2, #1
 8015544:	2109      	movs	r1, #9
 8015546:	f7ff ff7d 	bl	8015444 <std>
 801554a:	68e0      	ldr	r0, [r4, #12]
 801554c:	2202      	movs	r2, #2
 801554e:	2112      	movs	r1, #18
 8015550:	f7ff ff78 	bl	8015444 <std>
 8015554:	2301      	movs	r3, #1
 8015556:	61a3      	str	r3, [r4, #24]
 8015558:	e7d2      	b.n	8015500 <__sinit+0xc>
 801555a:	bf00      	nop
 801555c:	080161b4 	.word	0x080161b4
 8015560:	0801548d 	.word	0x0801548d

08015564 <__sfp>:
 8015564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015566:	4607      	mov	r7, r0
 8015568:	f7ff ffac 	bl	80154c4 <__sfp_lock_acquire>
 801556c:	4b1e      	ldr	r3, [pc, #120]	; (80155e8 <__sfp+0x84>)
 801556e:	681e      	ldr	r6, [r3, #0]
 8015570:	69b3      	ldr	r3, [r6, #24]
 8015572:	b913      	cbnz	r3, 801557a <__sfp+0x16>
 8015574:	4630      	mov	r0, r6
 8015576:	f7ff ffbd 	bl	80154f4 <__sinit>
 801557a:	3648      	adds	r6, #72	; 0x48
 801557c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015580:	3b01      	subs	r3, #1
 8015582:	d503      	bpl.n	801558c <__sfp+0x28>
 8015584:	6833      	ldr	r3, [r6, #0]
 8015586:	b30b      	cbz	r3, 80155cc <__sfp+0x68>
 8015588:	6836      	ldr	r6, [r6, #0]
 801558a:	e7f7      	b.n	801557c <__sfp+0x18>
 801558c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015590:	b9d5      	cbnz	r5, 80155c8 <__sfp+0x64>
 8015592:	4b16      	ldr	r3, [pc, #88]	; (80155ec <__sfp+0x88>)
 8015594:	60e3      	str	r3, [r4, #12]
 8015596:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801559a:	6665      	str	r5, [r4, #100]	; 0x64
 801559c:	f000 f847 	bl	801562e <__retarget_lock_init_recursive>
 80155a0:	f7ff ff96 	bl	80154d0 <__sfp_lock_release>
 80155a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80155a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80155ac:	6025      	str	r5, [r4, #0]
 80155ae:	61a5      	str	r5, [r4, #24]
 80155b0:	2208      	movs	r2, #8
 80155b2:	4629      	mov	r1, r5
 80155b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80155b8:	f7ff fd18 	bl	8014fec <memset>
 80155bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80155c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80155c4:	4620      	mov	r0, r4
 80155c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155c8:	3468      	adds	r4, #104	; 0x68
 80155ca:	e7d9      	b.n	8015580 <__sfp+0x1c>
 80155cc:	2104      	movs	r1, #4
 80155ce:	4638      	mov	r0, r7
 80155d0:	f7ff ff62 	bl	8015498 <__sfmoreglue>
 80155d4:	4604      	mov	r4, r0
 80155d6:	6030      	str	r0, [r6, #0]
 80155d8:	2800      	cmp	r0, #0
 80155da:	d1d5      	bne.n	8015588 <__sfp+0x24>
 80155dc:	f7ff ff78 	bl	80154d0 <__sfp_lock_release>
 80155e0:	230c      	movs	r3, #12
 80155e2:	603b      	str	r3, [r7, #0]
 80155e4:	e7ee      	b.n	80155c4 <__sfp+0x60>
 80155e6:	bf00      	nop
 80155e8:	080161b4 	.word	0x080161b4
 80155ec:	ffff0001 	.word	0xffff0001

080155f0 <_fwalk_reent>:
 80155f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155f4:	4606      	mov	r6, r0
 80155f6:	4688      	mov	r8, r1
 80155f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80155fc:	2700      	movs	r7, #0
 80155fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015602:	f1b9 0901 	subs.w	r9, r9, #1
 8015606:	d505      	bpl.n	8015614 <_fwalk_reent+0x24>
 8015608:	6824      	ldr	r4, [r4, #0]
 801560a:	2c00      	cmp	r4, #0
 801560c:	d1f7      	bne.n	80155fe <_fwalk_reent+0xe>
 801560e:	4638      	mov	r0, r7
 8015610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015614:	89ab      	ldrh	r3, [r5, #12]
 8015616:	2b01      	cmp	r3, #1
 8015618:	d907      	bls.n	801562a <_fwalk_reent+0x3a>
 801561a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801561e:	3301      	adds	r3, #1
 8015620:	d003      	beq.n	801562a <_fwalk_reent+0x3a>
 8015622:	4629      	mov	r1, r5
 8015624:	4630      	mov	r0, r6
 8015626:	47c0      	blx	r8
 8015628:	4307      	orrs	r7, r0
 801562a:	3568      	adds	r5, #104	; 0x68
 801562c:	e7e9      	b.n	8015602 <_fwalk_reent+0x12>

0801562e <__retarget_lock_init_recursive>:
 801562e:	4770      	bx	lr

08015630 <__retarget_lock_acquire_recursive>:
 8015630:	4770      	bx	lr

08015632 <__retarget_lock_release_recursive>:
 8015632:	4770      	bx	lr

08015634 <__swhatbuf_r>:
 8015634:	b570      	push	{r4, r5, r6, lr}
 8015636:	460e      	mov	r6, r1
 8015638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801563c:	2900      	cmp	r1, #0
 801563e:	b096      	sub	sp, #88	; 0x58
 8015640:	4614      	mov	r4, r2
 8015642:	461d      	mov	r5, r3
 8015644:	da07      	bge.n	8015656 <__swhatbuf_r+0x22>
 8015646:	2300      	movs	r3, #0
 8015648:	602b      	str	r3, [r5, #0]
 801564a:	89b3      	ldrh	r3, [r6, #12]
 801564c:	061a      	lsls	r2, r3, #24
 801564e:	d410      	bmi.n	8015672 <__swhatbuf_r+0x3e>
 8015650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015654:	e00e      	b.n	8015674 <__swhatbuf_r+0x40>
 8015656:	466a      	mov	r2, sp
 8015658:	f000 fc5e 	bl	8015f18 <_fstat_r>
 801565c:	2800      	cmp	r0, #0
 801565e:	dbf2      	blt.n	8015646 <__swhatbuf_r+0x12>
 8015660:	9a01      	ldr	r2, [sp, #4]
 8015662:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015666:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801566a:	425a      	negs	r2, r3
 801566c:	415a      	adcs	r2, r3
 801566e:	602a      	str	r2, [r5, #0]
 8015670:	e7ee      	b.n	8015650 <__swhatbuf_r+0x1c>
 8015672:	2340      	movs	r3, #64	; 0x40
 8015674:	2000      	movs	r0, #0
 8015676:	6023      	str	r3, [r4, #0]
 8015678:	b016      	add	sp, #88	; 0x58
 801567a:	bd70      	pop	{r4, r5, r6, pc}

0801567c <__smakebuf_r>:
 801567c:	898b      	ldrh	r3, [r1, #12]
 801567e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015680:	079d      	lsls	r5, r3, #30
 8015682:	4606      	mov	r6, r0
 8015684:	460c      	mov	r4, r1
 8015686:	d507      	bpl.n	8015698 <__smakebuf_r+0x1c>
 8015688:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801568c:	6023      	str	r3, [r4, #0]
 801568e:	6123      	str	r3, [r4, #16]
 8015690:	2301      	movs	r3, #1
 8015692:	6163      	str	r3, [r4, #20]
 8015694:	b002      	add	sp, #8
 8015696:	bd70      	pop	{r4, r5, r6, pc}
 8015698:	ab01      	add	r3, sp, #4
 801569a:	466a      	mov	r2, sp
 801569c:	f7ff ffca 	bl	8015634 <__swhatbuf_r>
 80156a0:	9900      	ldr	r1, [sp, #0]
 80156a2:	4605      	mov	r5, r0
 80156a4:	4630      	mov	r0, r6
 80156a6:	f000 f879 	bl	801579c <_malloc_r>
 80156aa:	b948      	cbnz	r0, 80156c0 <__smakebuf_r+0x44>
 80156ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156b0:	059a      	lsls	r2, r3, #22
 80156b2:	d4ef      	bmi.n	8015694 <__smakebuf_r+0x18>
 80156b4:	f023 0303 	bic.w	r3, r3, #3
 80156b8:	f043 0302 	orr.w	r3, r3, #2
 80156bc:	81a3      	strh	r3, [r4, #12]
 80156be:	e7e3      	b.n	8015688 <__smakebuf_r+0xc>
 80156c0:	4b0d      	ldr	r3, [pc, #52]	; (80156f8 <__smakebuf_r+0x7c>)
 80156c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80156c4:	89a3      	ldrh	r3, [r4, #12]
 80156c6:	6020      	str	r0, [r4, #0]
 80156c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80156cc:	81a3      	strh	r3, [r4, #12]
 80156ce:	9b00      	ldr	r3, [sp, #0]
 80156d0:	6163      	str	r3, [r4, #20]
 80156d2:	9b01      	ldr	r3, [sp, #4]
 80156d4:	6120      	str	r0, [r4, #16]
 80156d6:	b15b      	cbz	r3, 80156f0 <__smakebuf_r+0x74>
 80156d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80156dc:	4630      	mov	r0, r6
 80156de:	f000 fc2d 	bl	8015f3c <_isatty_r>
 80156e2:	b128      	cbz	r0, 80156f0 <__smakebuf_r+0x74>
 80156e4:	89a3      	ldrh	r3, [r4, #12]
 80156e6:	f023 0303 	bic.w	r3, r3, #3
 80156ea:	f043 0301 	orr.w	r3, r3, #1
 80156ee:	81a3      	strh	r3, [r4, #12]
 80156f0:	89a0      	ldrh	r0, [r4, #12]
 80156f2:	4305      	orrs	r5, r0
 80156f4:	81a5      	strh	r5, [r4, #12]
 80156f6:	e7cd      	b.n	8015694 <__smakebuf_r+0x18>
 80156f8:	0801548d 	.word	0x0801548d

080156fc <_free_r>:
 80156fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80156fe:	2900      	cmp	r1, #0
 8015700:	d048      	beq.n	8015794 <_free_r+0x98>
 8015702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015706:	9001      	str	r0, [sp, #4]
 8015708:	2b00      	cmp	r3, #0
 801570a:	f1a1 0404 	sub.w	r4, r1, #4
 801570e:	bfb8      	it	lt
 8015710:	18e4      	addlt	r4, r4, r3
 8015712:	f000 fc35 	bl	8015f80 <__malloc_lock>
 8015716:	4a20      	ldr	r2, [pc, #128]	; (8015798 <_free_r+0x9c>)
 8015718:	9801      	ldr	r0, [sp, #4]
 801571a:	6813      	ldr	r3, [r2, #0]
 801571c:	4615      	mov	r5, r2
 801571e:	b933      	cbnz	r3, 801572e <_free_r+0x32>
 8015720:	6063      	str	r3, [r4, #4]
 8015722:	6014      	str	r4, [r2, #0]
 8015724:	b003      	add	sp, #12
 8015726:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801572a:	f000 bc2f 	b.w	8015f8c <__malloc_unlock>
 801572e:	42a3      	cmp	r3, r4
 8015730:	d90b      	bls.n	801574a <_free_r+0x4e>
 8015732:	6821      	ldr	r1, [r4, #0]
 8015734:	1862      	adds	r2, r4, r1
 8015736:	4293      	cmp	r3, r2
 8015738:	bf04      	itt	eq
 801573a:	681a      	ldreq	r2, [r3, #0]
 801573c:	685b      	ldreq	r3, [r3, #4]
 801573e:	6063      	str	r3, [r4, #4]
 8015740:	bf04      	itt	eq
 8015742:	1852      	addeq	r2, r2, r1
 8015744:	6022      	streq	r2, [r4, #0]
 8015746:	602c      	str	r4, [r5, #0]
 8015748:	e7ec      	b.n	8015724 <_free_r+0x28>
 801574a:	461a      	mov	r2, r3
 801574c:	685b      	ldr	r3, [r3, #4]
 801574e:	b10b      	cbz	r3, 8015754 <_free_r+0x58>
 8015750:	42a3      	cmp	r3, r4
 8015752:	d9fa      	bls.n	801574a <_free_r+0x4e>
 8015754:	6811      	ldr	r1, [r2, #0]
 8015756:	1855      	adds	r5, r2, r1
 8015758:	42a5      	cmp	r5, r4
 801575a:	d10b      	bne.n	8015774 <_free_r+0x78>
 801575c:	6824      	ldr	r4, [r4, #0]
 801575e:	4421      	add	r1, r4
 8015760:	1854      	adds	r4, r2, r1
 8015762:	42a3      	cmp	r3, r4
 8015764:	6011      	str	r1, [r2, #0]
 8015766:	d1dd      	bne.n	8015724 <_free_r+0x28>
 8015768:	681c      	ldr	r4, [r3, #0]
 801576a:	685b      	ldr	r3, [r3, #4]
 801576c:	6053      	str	r3, [r2, #4]
 801576e:	4421      	add	r1, r4
 8015770:	6011      	str	r1, [r2, #0]
 8015772:	e7d7      	b.n	8015724 <_free_r+0x28>
 8015774:	d902      	bls.n	801577c <_free_r+0x80>
 8015776:	230c      	movs	r3, #12
 8015778:	6003      	str	r3, [r0, #0]
 801577a:	e7d3      	b.n	8015724 <_free_r+0x28>
 801577c:	6825      	ldr	r5, [r4, #0]
 801577e:	1961      	adds	r1, r4, r5
 8015780:	428b      	cmp	r3, r1
 8015782:	bf04      	itt	eq
 8015784:	6819      	ldreq	r1, [r3, #0]
 8015786:	685b      	ldreq	r3, [r3, #4]
 8015788:	6063      	str	r3, [r4, #4]
 801578a:	bf04      	itt	eq
 801578c:	1949      	addeq	r1, r1, r5
 801578e:	6021      	streq	r1, [r4, #0]
 8015790:	6054      	str	r4, [r2, #4]
 8015792:	e7c7      	b.n	8015724 <_free_r+0x28>
 8015794:	b003      	add	sp, #12
 8015796:	bd30      	pop	{r4, r5, pc}
 8015798:	20007030 	.word	0x20007030

0801579c <_malloc_r>:
 801579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801579e:	1ccd      	adds	r5, r1, #3
 80157a0:	f025 0503 	bic.w	r5, r5, #3
 80157a4:	3508      	adds	r5, #8
 80157a6:	2d0c      	cmp	r5, #12
 80157a8:	bf38      	it	cc
 80157aa:	250c      	movcc	r5, #12
 80157ac:	2d00      	cmp	r5, #0
 80157ae:	4606      	mov	r6, r0
 80157b0:	db01      	blt.n	80157b6 <_malloc_r+0x1a>
 80157b2:	42a9      	cmp	r1, r5
 80157b4:	d903      	bls.n	80157be <_malloc_r+0x22>
 80157b6:	230c      	movs	r3, #12
 80157b8:	6033      	str	r3, [r6, #0]
 80157ba:	2000      	movs	r0, #0
 80157bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157be:	f000 fbdf 	bl	8015f80 <__malloc_lock>
 80157c2:	4921      	ldr	r1, [pc, #132]	; (8015848 <_malloc_r+0xac>)
 80157c4:	680a      	ldr	r2, [r1, #0]
 80157c6:	4614      	mov	r4, r2
 80157c8:	b99c      	cbnz	r4, 80157f2 <_malloc_r+0x56>
 80157ca:	4f20      	ldr	r7, [pc, #128]	; (801584c <_malloc_r+0xb0>)
 80157cc:	683b      	ldr	r3, [r7, #0]
 80157ce:	b923      	cbnz	r3, 80157da <_malloc_r+0x3e>
 80157d0:	4621      	mov	r1, r4
 80157d2:	4630      	mov	r0, r6
 80157d4:	f000 fb2a 	bl	8015e2c <_sbrk_r>
 80157d8:	6038      	str	r0, [r7, #0]
 80157da:	4629      	mov	r1, r5
 80157dc:	4630      	mov	r0, r6
 80157de:	f000 fb25 	bl	8015e2c <_sbrk_r>
 80157e2:	1c43      	adds	r3, r0, #1
 80157e4:	d123      	bne.n	801582e <_malloc_r+0x92>
 80157e6:	230c      	movs	r3, #12
 80157e8:	6033      	str	r3, [r6, #0]
 80157ea:	4630      	mov	r0, r6
 80157ec:	f000 fbce 	bl	8015f8c <__malloc_unlock>
 80157f0:	e7e3      	b.n	80157ba <_malloc_r+0x1e>
 80157f2:	6823      	ldr	r3, [r4, #0]
 80157f4:	1b5b      	subs	r3, r3, r5
 80157f6:	d417      	bmi.n	8015828 <_malloc_r+0x8c>
 80157f8:	2b0b      	cmp	r3, #11
 80157fa:	d903      	bls.n	8015804 <_malloc_r+0x68>
 80157fc:	6023      	str	r3, [r4, #0]
 80157fe:	441c      	add	r4, r3
 8015800:	6025      	str	r5, [r4, #0]
 8015802:	e004      	b.n	801580e <_malloc_r+0x72>
 8015804:	6863      	ldr	r3, [r4, #4]
 8015806:	42a2      	cmp	r2, r4
 8015808:	bf0c      	ite	eq
 801580a:	600b      	streq	r3, [r1, #0]
 801580c:	6053      	strne	r3, [r2, #4]
 801580e:	4630      	mov	r0, r6
 8015810:	f000 fbbc 	bl	8015f8c <__malloc_unlock>
 8015814:	f104 000b 	add.w	r0, r4, #11
 8015818:	1d23      	adds	r3, r4, #4
 801581a:	f020 0007 	bic.w	r0, r0, #7
 801581e:	1ac2      	subs	r2, r0, r3
 8015820:	d0cc      	beq.n	80157bc <_malloc_r+0x20>
 8015822:	1a1b      	subs	r3, r3, r0
 8015824:	50a3      	str	r3, [r4, r2]
 8015826:	e7c9      	b.n	80157bc <_malloc_r+0x20>
 8015828:	4622      	mov	r2, r4
 801582a:	6864      	ldr	r4, [r4, #4]
 801582c:	e7cc      	b.n	80157c8 <_malloc_r+0x2c>
 801582e:	1cc4      	adds	r4, r0, #3
 8015830:	f024 0403 	bic.w	r4, r4, #3
 8015834:	42a0      	cmp	r0, r4
 8015836:	d0e3      	beq.n	8015800 <_malloc_r+0x64>
 8015838:	1a21      	subs	r1, r4, r0
 801583a:	4630      	mov	r0, r6
 801583c:	f000 faf6 	bl	8015e2c <_sbrk_r>
 8015840:	3001      	adds	r0, #1
 8015842:	d1dd      	bne.n	8015800 <_malloc_r+0x64>
 8015844:	e7cf      	b.n	80157e6 <_malloc_r+0x4a>
 8015846:	bf00      	nop
 8015848:	20007030 	.word	0x20007030
 801584c:	20007034 	.word	0x20007034

08015850 <__sfputc_r>:
 8015850:	6893      	ldr	r3, [r2, #8]
 8015852:	3b01      	subs	r3, #1
 8015854:	2b00      	cmp	r3, #0
 8015856:	b410      	push	{r4}
 8015858:	6093      	str	r3, [r2, #8]
 801585a:	da08      	bge.n	801586e <__sfputc_r+0x1e>
 801585c:	6994      	ldr	r4, [r2, #24]
 801585e:	42a3      	cmp	r3, r4
 8015860:	db01      	blt.n	8015866 <__sfputc_r+0x16>
 8015862:	290a      	cmp	r1, #10
 8015864:	d103      	bne.n	801586e <__sfputc_r+0x1e>
 8015866:	f85d 4b04 	ldr.w	r4, [sp], #4
 801586a:	f7ff bc69 	b.w	8015140 <__swbuf_r>
 801586e:	6813      	ldr	r3, [r2, #0]
 8015870:	1c58      	adds	r0, r3, #1
 8015872:	6010      	str	r0, [r2, #0]
 8015874:	7019      	strb	r1, [r3, #0]
 8015876:	4608      	mov	r0, r1
 8015878:	f85d 4b04 	ldr.w	r4, [sp], #4
 801587c:	4770      	bx	lr

0801587e <__sfputs_r>:
 801587e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015880:	4606      	mov	r6, r0
 8015882:	460f      	mov	r7, r1
 8015884:	4614      	mov	r4, r2
 8015886:	18d5      	adds	r5, r2, r3
 8015888:	42ac      	cmp	r4, r5
 801588a:	d101      	bne.n	8015890 <__sfputs_r+0x12>
 801588c:	2000      	movs	r0, #0
 801588e:	e007      	b.n	80158a0 <__sfputs_r+0x22>
 8015890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015894:	463a      	mov	r2, r7
 8015896:	4630      	mov	r0, r6
 8015898:	f7ff ffda 	bl	8015850 <__sfputc_r>
 801589c:	1c43      	adds	r3, r0, #1
 801589e:	d1f3      	bne.n	8015888 <__sfputs_r+0xa>
 80158a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080158a4 <_vfiprintf_r>:
 80158a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158a8:	460d      	mov	r5, r1
 80158aa:	b09d      	sub	sp, #116	; 0x74
 80158ac:	4614      	mov	r4, r2
 80158ae:	4698      	mov	r8, r3
 80158b0:	4606      	mov	r6, r0
 80158b2:	b118      	cbz	r0, 80158bc <_vfiprintf_r+0x18>
 80158b4:	6983      	ldr	r3, [r0, #24]
 80158b6:	b90b      	cbnz	r3, 80158bc <_vfiprintf_r+0x18>
 80158b8:	f7ff fe1c 	bl	80154f4 <__sinit>
 80158bc:	4b89      	ldr	r3, [pc, #548]	; (8015ae4 <_vfiprintf_r+0x240>)
 80158be:	429d      	cmp	r5, r3
 80158c0:	d11b      	bne.n	80158fa <_vfiprintf_r+0x56>
 80158c2:	6875      	ldr	r5, [r6, #4]
 80158c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80158c6:	07d9      	lsls	r1, r3, #31
 80158c8:	d405      	bmi.n	80158d6 <_vfiprintf_r+0x32>
 80158ca:	89ab      	ldrh	r3, [r5, #12]
 80158cc:	059a      	lsls	r2, r3, #22
 80158ce:	d402      	bmi.n	80158d6 <_vfiprintf_r+0x32>
 80158d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80158d2:	f7ff fead 	bl	8015630 <__retarget_lock_acquire_recursive>
 80158d6:	89ab      	ldrh	r3, [r5, #12]
 80158d8:	071b      	lsls	r3, r3, #28
 80158da:	d501      	bpl.n	80158e0 <_vfiprintf_r+0x3c>
 80158dc:	692b      	ldr	r3, [r5, #16]
 80158de:	b9eb      	cbnz	r3, 801591c <_vfiprintf_r+0x78>
 80158e0:	4629      	mov	r1, r5
 80158e2:	4630      	mov	r0, r6
 80158e4:	f7ff fc7e 	bl	80151e4 <__swsetup_r>
 80158e8:	b1c0      	cbz	r0, 801591c <_vfiprintf_r+0x78>
 80158ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80158ec:	07dc      	lsls	r4, r3, #31
 80158ee:	d50e      	bpl.n	801590e <_vfiprintf_r+0x6a>
 80158f0:	f04f 30ff 	mov.w	r0, #4294967295
 80158f4:	b01d      	add	sp, #116	; 0x74
 80158f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158fa:	4b7b      	ldr	r3, [pc, #492]	; (8015ae8 <_vfiprintf_r+0x244>)
 80158fc:	429d      	cmp	r5, r3
 80158fe:	d101      	bne.n	8015904 <_vfiprintf_r+0x60>
 8015900:	68b5      	ldr	r5, [r6, #8]
 8015902:	e7df      	b.n	80158c4 <_vfiprintf_r+0x20>
 8015904:	4b79      	ldr	r3, [pc, #484]	; (8015aec <_vfiprintf_r+0x248>)
 8015906:	429d      	cmp	r5, r3
 8015908:	bf08      	it	eq
 801590a:	68f5      	ldreq	r5, [r6, #12]
 801590c:	e7da      	b.n	80158c4 <_vfiprintf_r+0x20>
 801590e:	89ab      	ldrh	r3, [r5, #12]
 8015910:	0598      	lsls	r0, r3, #22
 8015912:	d4ed      	bmi.n	80158f0 <_vfiprintf_r+0x4c>
 8015914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015916:	f7ff fe8c 	bl	8015632 <__retarget_lock_release_recursive>
 801591a:	e7e9      	b.n	80158f0 <_vfiprintf_r+0x4c>
 801591c:	2300      	movs	r3, #0
 801591e:	9309      	str	r3, [sp, #36]	; 0x24
 8015920:	2320      	movs	r3, #32
 8015922:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015926:	f8cd 800c 	str.w	r8, [sp, #12]
 801592a:	2330      	movs	r3, #48	; 0x30
 801592c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015af0 <_vfiprintf_r+0x24c>
 8015930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015934:	f04f 0901 	mov.w	r9, #1
 8015938:	4623      	mov	r3, r4
 801593a:	469a      	mov	sl, r3
 801593c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015940:	b10a      	cbz	r2, 8015946 <_vfiprintf_r+0xa2>
 8015942:	2a25      	cmp	r2, #37	; 0x25
 8015944:	d1f9      	bne.n	801593a <_vfiprintf_r+0x96>
 8015946:	ebba 0b04 	subs.w	fp, sl, r4
 801594a:	d00b      	beq.n	8015964 <_vfiprintf_r+0xc0>
 801594c:	465b      	mov	r3, fp
 801594e:	4622      	mov	r2, r4
 8015950:	4629      	mov	r1, r5
 8015952:	4630      	mov	r0, r6
 8015954:	f7ff ff93 	bl	801587e <__sfputs_r>
 8015958:	3001      	adds	r0, #1
 801595a:	f000 80aa 	beq.w	8015ab2 <_vfiprintf_r+0x20e>
 801595e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015960:	445a      	add	r2, fp
 8015962:	9209      	str	r2, [sp, #36]	; 0x24
 8015964:	f89a 3000 	ldrb.w	r3, [sl]
 8015968:	2b00      	cmp	r3, #0
 801596a:	f000 80a2 	beq.w	8015ab2 <_vfiprintf_r+0x20e>
 801596e:	2300      	movs	r3, #0
 8015970:	f04f 32ff 	mov.w	r2, #4294967295
 8015974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015978:	f10a 0a01 	add.w	sl, sl, #1
 801597c:	9304      	str	r3, [sp, #16]
 801597e:	9307      	str	r3, [sp, #28]
 8015980:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015984:	931a      	str	r3, [sp, #104]	; 0x68
 8015986:	4654      	mov	r4, sl
 8015988:	2205      	movs	r2, #5
 801598a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801598e:	4858      	ldr	r0, [pc, #352]	; (8015af0 <_vfiprintf_r+0x24c>)
 8015990:	f7ea fc26 	bl	80001e0 <memchr>
 8015994:	9a04      	ldr	r2, [sp, #16]
 8015996:	b9d8      	cbnz	r0, 80159d0 <_vfiprintf_r+0x12c>
 8015998:	06d1      	lsls	r1, r2, #27
 801599a:	bf44      	itt	mi
 801599c:	2320      	movmi	r3, #32
 801599e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80159a2:	0713      	lsls	r3, r2, #28
 80159a4:	bf44      	itt	mi
 80159a6:	232b      	movmi	r3, #43	; 0x2b
 80159a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80159ac:	f89a 3000 	ldrb.w	r3, [sl]
 80159b0:	2b2a      	cmp	r3, #42	; 0x2a
 80159b2:	d015      	beq.n	80159e0 <_vfiprintf_r+0x13c>
 80159b4:	9a07      	ldr	r2, [sp, #28]
 80159b6:	4654      	mov	r4, sl
 80159b8:	2000      	movs	r0, #0
 80159ba:	f04f 0c0a 	mov.w	ip, #10
 80159be:	4621      	mov	r1, r4
 80159c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80159c4:	3b30      	subs	r3, #48	; 0x30
 80159c6:	2b09      	cmp	r3, #9
 80159c8:	d94e      	bls.n	8015a68 <_vfiprintf_r+0x1c4>
 80159ca:	b1b0      	cbz	r0, 80159fa <_vfiprintf_r+0x156>
 80159cc:	9207      	str	r2, [sp, #28]
 80159ce:	e014      	b.n	80159fa <_vfiprintf_r+0x156>
 80159d0:	eba0 0308 	sub.w	r3, r0, r8
 80159d4:	fa09 f303 	lsl.w	r3, r9, r3
 80159d8:	4313      	orrs	r3, r2
 80159da:	9304      	str	r3, [sp, #16]
 80159dc:	46a2      	mov	sl, r4
 80159de:	e7d2      	b.n	8015986 <_vfiprintf_r+0xe2>
 80159e0:	9b03      	ldr	r3, [sp, #12]
 80159e2:	1d19      	adds	r1, r3, #4
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	9103      	str	r1, [sp, #12]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	bfbb      	ittet	lt
 80159ec:	425b      	neglt	r3, r3
 80159ee:	f042 0202 	orrlt.w	r2, r2, #2
 80159f2:	9307      	strge	r3, [sp, #28]
 80159f4:	9307      	strlt	r3, [sp, #28]
 80159f6:	bfb8      	it	lt
 80159f8:	9204      	strlt	r2, [sp, #16]
 80159fa:	7823      	ldrb	r3, [r4, #0]
 80159fc:	2b2e      	cmp	r3, #46	; 0x2e
 80159fe:	d10c      	bne.n	8015a1a <_vfiprintf_r+0x176>
 8015a00:	7863      	ldrb	r3, [r4, #1]
 8015a02:	2b2a      	cmp	r3, #42	; 0x2a
 8015a04:	d135      	bne.n	8015a72 <_vfiprintf_r+0x1ce>
 8015a06:	9b03      	ldr	r3, [sp, #12]
 8015a08:	1d1a      	adds	r2, r3, #4
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	9203      	str	r2, [sp, #12]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	bfb8      	it	lt
 8015a12:	f04f 33ff 	movlt.w	r3, #4294967295
 8015a16:	3402      	adds	r4, #2
 8015a18:	9305      	str	r3, [sp, #20]
 8015a1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015b00 <_vfiprintf_r+0x25c>
 8015a1e:	7821      	ldrb	r1, [r4, #0]
 8015a20:	2203      	movs	r2, #3
 8015a22:	4650      	mov	r0, sl
 8015a24:	f7ea fbdc 	bl	80001e0 <memchr>
 8015a28:	b140      	cbz	r0, 8015a3c <_vfiprintf_r+0x198>
 8015a2a:	2340      	movs	r3, #64	; 0x40
 8015a2c:	eba0 000a 	sub.w	r0, r0, sl
 8015a30:	fa03 f000 	lsl.w	r0, r3, r0
 8015a34:	9b04      	ldr	r3, [sp, #16]
 8015a36:	4303      	orrs	r3, r0
 8015a38:	3401      	adds	r4, #1
 8015a3a:	9304      	str	r3, [sp, #16]
 8015a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a40:	482c      	ldr	r0, [pc, #176]	; (8015af4 <_vfiprintf_r+0x250>)
 8015a42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015a46:	2206      	movs	r2, #6
 8015a48:	f7ea fbca 	bl	80001e0 <memchr>
 8015a4c:	2800      	cmp	r0, #0
 8015a4e:	d03f      	beq.n	8015ad0 <_vfiprintf_r+0x22c>
 8015a50:	4b29      	ldr	r3, [pc, #164]	; (8015af8 <_vfiprintf_r+0x254>)
 8015a52:	bb1b      	cbnz	r3, 8015a9c <_vfiprintf_r+0x1f8>
 8015a54:	9b03      	ldr	r3, [sp, #12]
 8015a56:	3307      	adds	r3, #7
 8015a58:	f023 0307 	bic.w	r3, r3, #7
 8015a5c:	3308      	adds	r3, #8
 8015a5e:	9303      	str	r3, [sp, #12]
 8015a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a62:	443b      	add	r3, r7
 8015a64:	9309      	str	r3, [sp, #36]	; 0x24
 8015a66:	e767      	b.n	8015938 <_vfiprintf_r+0x94>
 8015a68:	fb0c 3202 	mla	r2, ip, r2, r3
 8015a6c:	460c      	mov	r4, r1
 8015a6e:	2001      	movs	r0, #1
 8015a70:	e7a5      	b.n	80159be <_vfiprintf_r+0x11a>
 8015a72:	2300      	movs	r3, #0
 8015a74:	3401      	adds	r4, #1
 8015a76:	9305      	str	r3, [sp, #20]
 8015a78:	4619      	mov	r1, r3
 8015a7a:	f04f 0c0a 	mov.w	ip, #10
 8015a7e:	4620      	mov	r0, r4
 8015a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015a84:	3a30      	subs	r2, #48	; 0x30
 8015a86:	2a09      	cmp	r2, #9
 8015a88:	d903      	bls.n	8015a92 <_vfiprintf_r+0x1ee>
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d0c5      	beq.n	8015a1a <_vfiprintf_r+0x176>
 8015a8e:	9105      	str	r1, [sp, #20]
 8015a90:	e7c3      	b.n	8015a1a <_vfiprintf_r+0x176>
 8015a92:	fb0c 2101 	mla	r1, ip, r1, r2
 8015a96:	4604      	mov	r4, r0
 8015a98:	2301      	movs	r3, #1
 8015a9a:	e7f0      	b.n	8015a7e <_vfiprintf_r+0x1da>
 8015a9c:	ab03      	add	r3, sp, #12
 8015a9e:	9300      	str	r3, [sp, #0]
 8015aa0:	462a      	mov	r2, r5
 8015aa2:	4b16      	ldr	r3, [pc, #88]	; (8015afc <_vfiprintf_r+0x258>)
 8015aa4:	a904      	add	r1, sp, #16
 8015aa6:	4630      	mov	r0, r6
 8015aa8:	f3af 8000 	nop.w
 8015aac:	4607      	mov	r7, r0
 8015aae:	1c78      	adds	r0, r7, #1
 8015ab0:	d1d6      	bne.n	8015a60 <_vfiprintf_r+0x1bc>
 8015ab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015ab4:	07d9      	lsls	r1, r3, #31
 8015ab6:	d405      	bmi.n	8015ac4 <_vfiprintf_r+0x220>
 8015ab8:	89ab      	ldrh	r3, [r5, #12]
 8015aba:	059a      	lsls	r2, r3, #22
 8015abc:	d402      	bmi.n	8015ac4 <_vfiprintf_r+0x220>
 8015abe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015ac0:	f7ff fdb7 	bl	8015632 <__retarget_lock_release_recursive>
 8015ac4:	89ab      	ldrh	r3, [r5, #12]
 8015ac6:	065b      	lsls	r3, r3, #25
 8015ac8:	f53f af12 	bmi.w	80158f0 <_vfiprintf_r+0x4c>
 8015acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015ace:	e711      	b.n	80158f4 <_vfiprintf_r+0x50>
 8015ad0:	ab03      	add	r3, sp, #12
 8015ad2:	9300      	str	r3, [sp, #0]
 8015ad4:	462a      	mov	r2, r5
 8015ad6:	4b09      	ldr	r3, [pc, #36]	; (8015afc <_vfiprintf_r+0x258>)
 8015ad8:	a904      	add	r1, sp, #16
 8015ada:	4630      	mov	r0, r6
 8015adc:	f000 f880 	bl	8015be0 <_printf_i>
 8015ae0:	e7e4      	b.n	8015aac <_vfiprintf_r+0x208>
 8015ae2:	bf00      	nop
 8015ae4:	080161d8 	.word	0x080161d8
 8015ae8:	080161f8 	.word	0x080161f8
 8015aec:	080161b8 	.word	0x080161b8
 8015af0:	08016218 	.word	0x08016218
 8015af4:	08016222 	.word	0x08016222
 8015af8:	00000000 	.word	0x00000000
 8015afc:	0801587f 	.word	0x0801587f
 8015b00:	0801621e 	.word	0x0801621e

08015b04 <_printf_common>:
 8015b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b08:	4616      	mov	r6, r2
 8015b0a:	4699      	mov	r9, r3
 8015b0c:	688a      	ldr	r2, [r1, #8]
 8015b0e:	690b      	ldr	r3, [r1, #16]
 8015b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015b14:	4293      	cmp	r3, r2
 8015b16:	bfb8      	it	lt
 8015b18:	4613      	movlt	r3, r2
 8015b1a:	6033      	str	r3, [r6, #0]
 8015b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015b20:	4607      	mov	r7, r0
 8015b22:	460c      	mov	r4, r1
 8015b24:	b10a      	cbz	r2, 8015b2a <_printf_common+0x26>
 8015b26:	3301      	adds	r3, #1
 8015b28:	6033      	str	r3, [r6, #0]
 8015b2a:	6823      	ldr	r3, [r4, #0]
 8015b2c:	0699      	lsls	r1, r3, #26
 8015b2e:	bf42      	ittt	mi
 8015b30:	6833      	ldrmi	r3, [r6, #0]
 8015b32:	3302      	addmi	r3, #2
 8015b34:	6033      	strmi	r3, [r6, #0]
 8015b36:	6825      	ldr	r5, [r4, #0]
 8015b38:	f015 0506 	ands.w	r5, r5, #6
 8015b3c:	d106      	bne.n	8015b4c <_printf_common+0x48>
 8015b3e:	f104 0a19 	add.w	sl, r4, #25
 8015b42:	68e3      	ldr	r3, [r4, #12]
 8015b44:	6832      	ldr	r2, [r6, #0]
 8015b46:	1a9b      	subs	r3, r3, r2
 8015b48:	42ab      	cmp	r3, r5
 8015b4a:	dc26      	bgt.n	8015b9a <_printf_common+0x96>
 8015b4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015b50:	1e13      	subs	r3, r2, #0
 8015b52:	6822      	ldr	r2, [r4, #0]
 8015b54:	bf18      	it	ne
 8015b56:	2301      	movne	r3, #1
 8015b58:	0692      	lsls	r2, r2, #26
 8015b5a:	d42b      	bmi.n	8015bb4 <_printf_common+0xb0>
 8015b5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015b60:	4649      	mov	r1, r9
 8015b62:	4638      	mov	r0, r7
 8015b64:	47c0      	blx	r8
 8015b66:	3001      	adds	r0, #1
 8015b68:	d01e      	beq.n	8015ba8 <_printf_common+0xa4>
 8015b6a:	6823      	ldr	r3, [r4, #0]
 8015b6c:	68e5      	ldr	r5, [r4, #12]
 8015b6e:	6832      	ldr	r2, [r6, #0]
 8015b70:	f003 0306 	and.w	r3, r3, #6
 8015b74:	2b04      	cmp	r3, #4
 8015b76:	bf08      	it	eq
 8015b78:	1aad      	subeq	r5, r5, r2
 8015b7a:	68a3      	ldr	r3, [r4, #8]
 8015b7c:	6922      	ldr	r2, [r4, #16]
 8015b7e:	bf0c      	ite	eq
 8015b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015b84:	2500      	movne	r5, #0
 8015b86:	4293      	cmp	r3, r2
 8015b88:	bfc4      	itt	gt
 8015b8a:	1a9b      	subgt	r3, r3, r2
 8015b8c:	18ed      	addgt	r5, r5, r3
 8015b8e:	2600      	movs	r6, #0
 8015b90:	341a      	adds	r4, #26
 8015b92:	42b5      	cmp	r5, r6
 8015b94:	d11a      	bne.n	8015bcc <_printf_common+0xc8>
 8015b96:	2000      	movs	r0, #0
 8015b98:	e008      	b.n	8015bac <_printf_common+0xa8>
 8015b9a:	2301      	movs	r3, #1
 8015b9c:	4652      	mov	r2, sl
 8015b9e:	4649      	mov	r1, r9
 8015ba0:	4638      	mov	r0, r7
 8015ba2:	47c0      	blx	r8
 8015ba4:	3001      	adds	r0, #1
 8015ba6:	d103      	bne.n	8015bb0 <_printf_common+0xac>
 8015ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8015bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bb0:	3501      	adds	r5, #1
 8015bb2:	e7c6      	b.n	8015b42 <_printf_common+0x3e>
 8015bb4:	18e1      	adds	r1, r4, r3
 8015bb6:	1c5a      	adds	r2, r3, #1
 8015bb8:	2030      	movs	r0, #48	; 0x30
 8015bba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015bbe:	4422      	add	r2, r4
 8015bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015bc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015bc8:	3302      	adds	r3, #2
 8015bca:	e7c7      	b.n	8015b5c <_printf_common+0x58>
 8015bcc:	2301      	movs	r3, #1
 8015bce:	4622      	mov	r2, r4
 8015bd0:	4649      	mov	r1, r9
 8015bd2:	4638      	mov	r0, r7
 8015bd4:	47c0      	blx	r8
 8015bd6:	3001      	adds	r0, #1
 8015bd8:	d0e6      	beq.n	8015ba8 <_printf_common+0xa4>
 8015bda:	3601      	adds	r6, #1
 8015bdc:	e7d9      	b.n	8015b92 <_printf_common+0x8e>
	...

08015be0 <_printf_i>:
 8015be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015be4:	460c      	mov	r4, r1
 8015be6:	4691      	mov	r9, r2
 8015be8:	7e27      	ldrb	r7, [r4, #24]
 8015bea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015bec:	2f78      	cmp	r7, #120	; 0x78
 8015bee:	4680      	mov	r8, r0
 8015bf0:	469a      	mov	sl, r3
 8015bf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015bf6:	d807      	bhi.n	8015c08 <_printf_i+0x28>
 8015bf8:	2f62      	cmp	r7, #98	; 0x62
 8015bfa:	d80a      	bhi.n	8015c12 <_printf_i+0x32>
 8015bfc:	2f00      	cmp	r7, #0
 8015bfe:	f000 80d8 	beq.w	8015db2 <_printf_i+0x1d2>
 8015c02:	2f58      	cmp	r7, #88	; 0x58
 8015c04:	f000 80a3 	beq.w	8015d4e <_printf_i+0x16e>
 8015c08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015c0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015c10:	e03a      	b.n	8015c88 <_printf_i+0xa8>
 8015c12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015c16:	2b15      	cmp	r3, #21
 8015c18:	d8f6      	bhi.n	8015c08 <_printf_i+0x28>
 8015c1a:	a001      	add	r0, pc, #4	; (adr r0, 8015c20 <_printf_i+0x40>)
 8015c1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015c20:	08015c79 	.word	0x08015c79
 8015c24:	08015c8d 	.word	0x08015c8d
 8015c28:	08015c09 	.word	0x08015c09
 8015c2c:	08015c09 	.word	0x08015c09
 8015c30:	08015c09 	.word	0x08015c09
 8015c34:	08015c09 	.word	0x08015c09
 8015c38:	08015c8d 	.word	0x08015c8d
 8015c3c:	08015c09 	.word	0x08015c09
 8015c40:	08015c09 	.word	0x08015c09
 8015c44:	08015c09 	.word	0x08015c09
 8015c48:	08015c09 	.word	0x08015c09
 8015c4c:	08015d99 	.word	0x08015d99
 8015c50:	08015cbd 	.word	0x08015cbd
 8015c54:	08015d7b 	.word	0x08015d7b
 8015c58:	08015c09 	.word	0x08015c09
 8015c5c:	08015c09 	.word	0x08015c09
 8015c60:	08015dbb 	.word	0x08015dbb
 8015c64:	08015c09 	.word	0x08015c09
 8015c68:	08015cbd 	.word	0x08015cbd
 8015c6c:	08015c09 	.word	0x08015c09
 8015c70:	08015c09 	.word	0x08015c09
 8015c74:	08015d83 	.word	0x08015d83
 8015c78:	680b      	ldr	r3, [r1, #0]
 8015c7a:	1d1a      	adds	r2, r3, #4
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	600a      	str	r2, [r1, #0]
 8015c80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015c88:	2301      	movs	r3, #1
 8015c8a:	e0a3      	b.n	8015dd4 <_printf_i+0x1f4>
 8015c8c:	6825      	ldr	r5, [r4, #0]
 8015c8e:	6808      	ldr	r0, [r1, #0]
 8015c90:	062e      	lsls	r6, r5, #24
 8015c92:	f100 0304 	add.w	r3, r0, #4
 8015c96:	d50a      	bpl.n	8015cae <_printf_i+0xce>
 8015c98:	6805      	ldr	r5, [r0, #0]
 8015c9a:	600b      	str	r3, [r1, #0]
 8015c9c:	2d00      	cmp	r5, #0
 8015c9e:	da03      	bge.n	8015ca8 <_printf_i+0xc8>
 8015ca0:	232d      	movs	r3, #45	; 0x2d
 8015ca2:	426d      	negs	r5, r5
 8015ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ca8:	485e      	ldr	r0, [pc, #376]	; (8015e24 <_printf_i+0x244>)
 8015caa:	230a      	movs	r3, #10
 8015cac:	e019      	b.n	8015ce2 <_printf_i+0x102>
 8015cae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015cb2:	6805      	ldr	r5, [r0, #0]
 8015cb4:	600b      	str	r3, [r1, #0]
 8015cb6:	bf18      	it	ne
 8015cb8:	b22d      	sxthne	r5, r5
 8015cba:	e7ef      	b.n	8015c9c <_printf_i+0xbc>
 8015cbc:	680b      	ldr	r3, [r1, #0]
 8015cbe:	6825      	ldr	r5, [r4, #0]
 8015cc0:	1d18      	adds	r0, r3, #4
 8015cc2:	6008      	str	r0, [r1, #0]
 8015cc4:	0628      	lsls	r0, r5, #24
 8015cc6:	d501      	bpl.n	8015ccc <_printf_i+0xec>
 8015cc8:	681d      	ldr	r5, [r3, #0]
 8015cca:	e002      	b.n	8015cd2 <_printf_i+0xf2>
 8015ccc:	0669      	lsls	r1, r5, #25
 8015cce:	d5fb      	bpl.n	8015cc8 <_printf_i+0xe8>
 8015cd0:	881d      	ldrh	r5, [r3, #0]
 8015cd2:	4854      	ldr	r0, [pc, #336]	; (8015e24 <_printf_i+0x244>)
 8015cd4:	2f6f      	cmp	r7, #111	; 0x6f
 8015cd6:	bf0c      	ite	eq
 8015cd8:	2308      	moveq	r3, #8
 8015cda:	230a      	movne	r3, #10
 8015cdc:	2100      	movs	r1, #0
 8015cde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015ce2:	6866      	ldr	r6, [r4, #4]
 8015ce4:	60a6      	str	r6, [r4, #8]
 8015ce6:	2e00      	cmp	r6, #0
 8015ce8:	bfa2      	ittt	ge
 8015cea:	6821      	ldrge	r1, [r4, #0]
 8015cec:	f021 0104 	bicge.w	r1, r1, #4
 8015cf0:	6021      	strge	r1, [r4, #0]
 8015cf2:	b90d      	cbnz	r5, 8015cf8 <_printf_i+0x118>
 8015cf4:	2e00      	cmp	r6, #0
 8015cf6:	d04d      	beq.n	8015d94 <_printf_i+0x1b4>
 8015cf8:	4616      	mov	r6, r2
 8015cfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8015cfe:	fb03 5711 	mls	r7, r3, r1, r5
 8015d02:	5dc7      	ldrb	r7, [r0, r7]
 8015d04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015d08:	462f      	mov	r7, r5
 8015d0a:	42bb      	cmp	r3, r7
 8015d0c:	460d      	mov	r5, r1
 8015d0e:	d9f4      	bls.n	8015cfa <_printf_i+0x11a>
 8015d10:	2b08      	cmp	r3, #8
 8015d12:	d10b      	bne.n	8015d2c <_printf_i+0x14c>
 8015d14:	6823      	ldr	r3, [r4, #0]
 8015d16:	07df      	lsls	r7, r3, #31
 8015d18:	d508      	bpl.n	8015d2c <_printf_i+0x14c>
 8015d1a:	6923      	ldr	r3, [r4, #16]
 8015d1c:	6861      	ldr	r1, [r4, #4]
 8015d1e:	4299      	cmp	r1, r3
 8015d20:	bfde      	ittt	le
 8015d22:	2330      	movle	r3, #48	; 0x30
 8015d24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015d28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015d2c:	1b92      	subs	r2, r2, r6
 8015d2e:	6122      	str	r2, [r4, #16]
 8015d30:	f8cd a000 	str.w	sl, [sp]
 8015d34:	464b      	mov	r3, r9
 8015d36:	aa03      	add	r2, sp, #12
 8015d38:	4621      	mov	r1, r4
 8015d3a:	4640      	mov	r0, r8
 8015d3c:	f7ff fee2 	bl	8015b04 <_printf_common>
 8015d40:	3001      	adds	r0, #1
 8015d42:	d14c      	bne.n	8015dde <_printf_i+0x1fe>
 8015d44:	f04f 30ff 	mov.w	r0, #4294967295
 8015d48:	b004      	add	sp, #16
 8015d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d4e:	4835      	ldr	r0, [pc, #212]	; (8015e24 <_printf_i+0x244>)
 8015d50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015d54:	6823      	ldr	r3, [r4, #0]
 8015d56:	680e      	ldr	r6, [r1, #0]
 8015d58:	061f      	lsls	r7, r3, #24
 8015d5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8015d5e:	600e      	str	r6, [r1, #0]
 8015d60:	d514      	bpl.n	8015d8c <_printf_i+0x1ac>
 8015d62:	07d9      	lsls	r1, r3, #31
 8015d64:	bf44      	itt	mi
 8015d66:	f043 0320 	orrmi.w	r3, r3, #32
 8015d6a:	6023      	strmi	r3, [r4, #0]
 8015d6c:	b91d      	cbnz	r5, 8015d76 <_printf_i+0x196>
 8015d6e:	6823      	ldr	r3, [r4, #0]
 8015d70:	f023 0320 	bic.w	r3, r3, #32
 8015d74:	6023      	str	r3, [r4, #0]
 8015d76:	2310      	movs	r3, #16
 8015d78:	e7b0      	b.n	8015cdc <_printf_i+0xfc>
 8015d7a:	6823      	ldr	r3, [r4, #0]
 8015d7c:	f043 0320 	orr.w	r3, r3, #32
 8015d80:	6023      	str	r3, [r4, #0]
 8015d82:	2378      	movs	r3, #120	; 0x78
 8015d84:	4828      	ldr	r0, [pc, #160]	; (8015e28 <_printf_i+0x248>)
 8015d86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015d8a:	e7e3      	b.n	8015d54 <_printf_i+0x174>
 8015d8c:	065e      	lsls	r6, r3, #25
 8015d8e:	bf48      	it	mi
 8015d90:	b2ad      	uxthmi	r5, r5
 8015d92:	e7e6      	b.n	8015d62 <_printf_i+0x182>
 8015d94:	4616      	mov	r6, r2
 8015d96:	e7bb      	b.n	8015d10 <_printf_i+0x130>
 8015d98:	680b      	ldr	r3, [r1, #0]
 8015d9a:	6826      	ldr	r6, [r4, #0]
 8015d9c:	6960      	ldr	r0, [r4, #20]
 8015d9e:	1d1d      	adds	r5, r3, #4
 8015da0:	600d      	str	r5, [r1, #0]
 8015da2:	0635      	lsls	r5, r6, #24
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	d501      	bpl.n	8015dac <_printf_i+0x1cc>
 8015da8:	6018      	str	r0, [r3, #0]
 8015daa:	e002      	b.n	8015db2 <_printf_i+0x1d2>
 8015dac:	0671      	lsls	r1, r6, #25
 8015dae:	d5fb      	bpl.n	8015da8 <_printf_i+0x1c8>
 8015db0:	8018      	strh	r0, [r3, #0]
 8015db2:	2300      	movs	r3, #0
 8015db4:	6123      	str	r3, [r4, #16]
 8015db6:	4616      	mov	r6, r2
 8015db8:	e7ba      	b.n	8015d30 <_printf_i+0x150>
 8015dba:	680b      	ldr	r3, [r1, #0]
 8015dbc:	1d1a      	adds	r2, r3, #4
 8015dbe:	600a      	str	r2, [r1, #0]
 8015dc0:	681e      	ldr	r6, [r3, #0]
 8015dc2:	6862      	ldr	r2, [r4, #4]
 8015dc4:	2100      	movs	r1, #0
 8015dc6:	4630      	mov	r0, r6
 8015dc8:	f7ea fa0a 	bl	80001e0 <memchr>
 8015dcc:	b108      	cbz	r0, 8015dd2 <_printf_i+0x1f2>
 8015dce:	1b80      	subs	r0, r0, r6
 8015dd0:	6060      	str	r0, [r4, #4]
 8015dd2:	6863      	ldr	r3, [r4, #4]
 8015dd4:	6123      	str	r3, [r4, #16]
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ddc:	e7a8      	b.n	8015d30 <_printf_i+0x150>
 8015dde:	6923      	ldr	r3, [r4, #16]
 8015de0:	4632      	mov	r2, r6
 8015de2:	4649      	mov	r1, r9
 8015de4:	4640      	mov	r0, r8
 8015de6:	47d0      	blx	sl
 8015de8:	3001      	adds	r0, #1
 8015dea:	d0ab      	beq.n	8015d44 <_printf_i+0x164>
 8015dec:	6823      	ldr	r3, [r4, #0]
 8015dee:	079b      	lsls	r3, r3, #30
 8015df0:	d413      	bmi.n	8015e1a <_printf_i+0x23a>
 8015df2:	68e0      	ldr	r0, [r4, #12]
 8015df4:	9b03      	ldr	r3, [sp, #12]
 8015df6:	4298      	cmp	r0, r3
 8015df8:	bfb8      	it	lt
 8015dfa:	4618      	movlt	r0, r3
 8015dfc:	e7a4      	b.n	8015d48 <_printf_i+0x168>
 8015dfe:	2301      	movs	r3, #1
 8015e00:	4632      	mov	r2, r6
 8015e02:	4649      	mov	r1, r9
 8015e04:	4640      	mov	r0, r8
 8015e06:	47d0      	blx	sl
 8015e08:	3001      	adds	r0, #1
 8015e0a:	d09b      	beq.n	8015d44 <_printf_i+0x164>
 8015e0c:	3501      	adds	r5, #1
 8015e0e:	68e3      	ldr	r3, [r4, #12]
 8015e10:	9903      	ldr	r1, [sp, #12]
 8015e12:	1a5b      	subs	r3, r3, r1
 8015e14:	42ab      	cmp	r3, r5
 8015e16:	dcf2      	bgt.n	8015dfe <_printf_i+0x21e>
 8015e18:	e7eb      	b.n	8015df2 <_printf_i+0x212>
 8015e1a:	2500      	movs	r5, #0
 8015e1c:	f104 0619 	add.w	r6, r4, #25
 8015e20:	e7f5      	b.n	8015e0e <_printf_i+0x22e>
 8015e22:	bf00      	nop
 8015e24:	08016229 	.word	0x08016229
 8015e28:	0801623a 	.word	0x0801623a

08015e2c <_sbrk_r>:
 8015e2c:	b538      	push	{r3, r4, r5, lr}
 8015e2e:	4d06      	ldr	r5, [pc, #24]	; (8015e48 <_sbrk_r+0x1c>)
 8015e30:	2300      	movs	r3, #0
 8015e32:	4604      	mov	r4, r0
 8015e34:	4608      	mov	r0, r1
 8015e36:	602b      	str	r3, [r5, #0]
 8015e38:	f7eb fbd6 	bl	80015e8 <_sbrk>
 8015e3c:	1c43      	adds	r3, r0, #1
 8015e3e:	d102      	bne.n	8015e46 <_sbrk_r+0x1a>
 8015e40:	682b      	ldr	r3, [r5, #0]
 8015e42:	b103      	cbz	r3, 8015e46 <_sbrk_r+0x1a>
 8015e44:	6023      	str	r3, [r4, #0]
 8015e46:	bd38      	pop	{r3, r4, r5, pc}
 8015e48:	20007488 	.word	0x20007488

08015e4c <__sread>:
 8015e4c:	b510      	push	{r4, lr}
 8015e4e:	460c      	mov	r4, r1
 8015e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e54:	f000 f8a0 	bl	8015f98 <_read_r>
 8015e58:	2800      	cmp	r0, #0
 8015e5a:	bfab      	itete	ge
 8015e5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015e5e:	89a3      	ldrhlt	r3, [r4, #12]
 8015e60:	181b      	addge	r3, r3, r0
 8015e62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015e66:	bfac      	ite	ge
 8015e68:	6563      	strge	r3, [r4, #84]	; 0x54
 8015e6a:	81a3      	strhlt	r3, [r4, #12]
 8015e6c:	bd10      	pop	{r4, pc}

08015e6e <__swrite>:
 8015e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e72:	461f      	mov	r7, r3
 8015e74:	898b      	ldrh	r3, [r1, #12]
 8015e76:	05db      	lsls	r3, r3, #23
 8015e78:	4605      	mov	r5, r0
 8015e7a:	460c      	mov	r4, r1
 8015e7c:	4616      	mov	r6, r2
 8015e7e:	d505      	bpl.n	8015e8c <__swrite+0x1e>
 8015e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e84:	2302      	movs	r3, #2
 8015e86:	2200      	movs	r2, #0
 8015e88:	f000 f868 	bl	8015f5c <_lseek_r>
 8015e8c:	89a3      	ldrh	r3, [r4, #12]
 8015e8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015e96:	81a3      	strh	r3, [r4, #12]
 8015e98:	4632      	mov	r2, r6
 8015e9a:	463b      	mov	r3, r7
 8015e9c:	4628      	mov	r0, r5
 8015e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ea2:	f000 b817 	b.w	8015ed4 <_write_r>

08015ea6 <__sseek>:
 8015ea6:	b510      	push	{r4, lr}
 8015ea8:	460c      	mov	r4, r1
 8015eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015eae:	f000 f855 	bl	8015f5c <_lseek_r>
 8015eb2:	1c43      	adds	r3, r0, #1
 8015eb4:	89a3      	ldrh	r3, [r4, #12]
 8015eb6:	bf15      	itete	ne
 8015eb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8015eba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015ebe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015ec2:	81a3      	strheq	r3, [r4, #12]
 8015ec4:	bf18      	it	ne
 8015ec6:	81a3      	strhne	r3, [r4, #12]
 8015ec8:	bd10      	pop	{r4, pc}

08015eca <__sclose>:
 8015eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ece:	f000 b813 	b.w	8015ef8 <_close_r>
	...

08015ed4 <_write_r>:
 8015ed4:	b538      	push	{r3, r4, r5, lr}
 8015ed6:	4d07      	ldr	r5, [pc, #28]	; (8015ef4 <_write_r+0x20>)
 8015ed8:	4604      	mov	r4, r0
 8015eda:	4608      	mov	r0, r1
 8015edc:	4611      	mov	r1, r2
 8015ede:	2200      	movs	r2, #0
 8015ee0:	602a      	str	r2, [r5, #0]
 8015ee2:	461a      	mov	r2, r3
 8015ee4:	f7eb fb2f 	bl	8001546 <_write>
 8015ee8:	1c43      	adds	r3, r0, #1
 8015eea:	d102      	bne.n	8015ef2 <_write_r+0x1e>
 8015eec:	682b      	ldr	r3, [r5, #0]
 8015eee:	b103      	cbz	r3, 8015ef2 <_write_r+0x1e>
 8015ef0:	6023      	str	r3, [r4, #0]
 8015ef2:	bd38      	pop	{r3, r4, r5, pc}
 8015ef4:	20007488 	.word	0x20007488

08015ef8 <_close_r>:
 8015ef8:	b538      	push	{r3, r4, r5, lr}
 8015efa:	4d06      	ldr	r5, [pc, #24]	; (8015f14 <_close_r+0x1c>)
 8015efc:	2300      	movs	r3, #0
 8015efe:	4604      	mov	r4, r0
 8015f00:	4608      	mov	r0, r1
 8015f02:	602b      	str	r3, [r5, #0]
 8015f04:	f7eb fb3b 	bl	800157e <_close>
 8015f08:	1c43      	adds	r3, r0, #1
 8015f0a:	d102      	bne.n	8015f12 <_close_r+0x1a>
 8015f0c:	682b      	ldr	r3, [r5, #0]
 8015f0e:	b103      	cbz	r3, 8015f12 <_close_r+0x1a>
 8015f10:	6023      	str	r3, [r4, #0]
 8015f12:	bd38      	pop	{r3, r4, r5, pc}
 8015f14:	20007488 	.word	0x20007488

08015f18 <_fstat_r>:
 8015f18:	b538      	push	{r3, r4, r5, lr}
 8015f1a:	4d07      	ldr	r5, [pc, #28]	; (8015f38 <_fstat_r+0x20>)
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	4604      	mov	r4, r0
 8015f20:	4608      	mov	r0, r1
 8015f22:	4611      	mov	r1, r2
 8015f24:	602b      	str	r3, [r5, #0]
 8015f26:	f7eb fb36 	bl	8001596 <_fstat>
 8015f2a:	1c43      	adds	r3, r0, #1
 8015f2c:	d102      	bne.n	8015f34 <_fstat_r+0x1c>
 8015f2e:	682b      	ldr	r3, [r5, #0]
 8015f30:	b103      	cbz	r3, 8015f34 <_fstat_r+0x1c>
 8015f32:	6023      	str	r3, [r4, #0]
 8015f34:	bd38      	pop	{r3, r4, r5, pc}
 8015f36:	bf00      	nop
 8015f38:	20007488 	.word	0x20007488

08015f3c <_isatty_r>:
 8015f3c:	b538      	push	{r3, r4, r5, lr}
 8015f3e:	4d06      	ldr	r5, [pc, #24]	; (8015f58 <_isatty_r+0x1c>)
 8015f40:	2300      	movs	r3, #0
 8015f42:	4604      	mov	r4, r0
 8015f44:	4608      	mov	r0, r1
 8015f46:	602b      	str	r3, [r5, #0]
 8015f48:	f7eb fb35 	bl	80015b6 <_isatty>
 8015f4c:	1c43      	adds	r3, r0, #1
 8015f4e:	d102      	bne.n	8015f56 <_isatty_r+0x1a>
 8015f50:	682b      	ldr	r3, [r5, #0]
 8015f52:	b103      	cbz	r3, 8015f56 <_isatty_r+0x1a>
 8015f54:	6023      	str	r3, [r4, #0]
 8015f56:	bd38      	pop	{r3, r4, r5, pc}
 8015f58:	20007488 	.word	0x20007488

08015f5c <_lseek_r>:
 8015f5c:	b538      	push	{r3, r4, r5, lr}
 8015f5e:	4d07      	ldr	r5, [pc, #28]	; (8015f7c <_lseek_r+0x20>)
 8015f60:	4604      	mov	r4, r0
 8015f62:	4608      	mov	r0, r1
 8015f64:	4611      	mov	r1, r2
 8015f66:	2200      	movs	r2, #0
 8015f68:	602a      	str	r2, [r5, #0]
 8015f6a:	461a      	mov	r2, r3
 8015f6c:	f7eb fb2e 	bl	80015cc <_lseek>
 8015f70:	1c43      	adds	r3, r0, #1
 8015f72:	d102      	bne.n	8015f7a <_lseek_r+0x1e>
 8015f74:	682b      	ldr	r3, [r5, #0]
 8015f76:	b103      	cbz	r3, 8015f7a <_lseek_r+0x1e>
 8015f78:	6023      	str	r3, [r4, #0]
 8015f7a:	bd38      	pop	{r3, r4, r5, pc}
 8015f7c:	20007488 	.word	0x20007488

08015f80 <__malloc_lock>:
 8015f80:	4801      	ldr	r0, [pc, #4]	; (8015f88 <__malloc_lock+0x8>)
 8015f82:	f7ff bb55 	b.w	8015630 <__retarget_lock_acquire_recursive>
 8015f86:	bf00      	nop
 8015f88:	20007480 	.word	0x20007480

08015f8c <__malloc_unlock>:
 8015f8c:	4801      	ldr	r0, [pc, #4]	; (8015f94 <__malloc_unlock+0x8>)
 8015f8e:	f7ff bb50 	b.w	8015632 <__retarget_lock_release_recursive>
 8015f92:	bf00      	nop
 8015f94:	20007480 	.word	0x20007480

08015f98 <_read_r>:
 8015f98:	b538      	push	{r3, r4, r5, lr}
 8015f9a:	4d07      	ldr	r5, [pc, #28]	; (8015fb8 <_read_r+0x20>)
 8015f9c:	4604      	mov	r4, r0
 8015f9e:	4608      	mov	r0, r1
 8015fa0:	4611      	mov	r1, r2
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	602a      	str	r2, [r5, #0]
 8015fa6:	461a      	mov	r2, r3
 8015fa8:	f7eb fab0 	bl	800150c <_read>
 8015fac:	1c43      	adds	r3, r0, #1
 8015fae:	d102      	bne.n	8015fb6 <_read_r+0x1e>
 8015fb0:	682b      	ldr	r3, [r5, #0]
 8015fb2:	b103      	cbz	r3, 8015fb6 <_read_r+0x1e>
 8015fb4:	6023      	str	r3, [r4, #0]
 8015fb6:	bd38      	pop	{r3, r4, r5, pc}
 8015fb8:	20007488 	.word	0x20007488

08015fbc <_init>:
 8015fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fbe:	bf00      	nop
 8015fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fc2:	bc08      	pop	{r3}
 8015fc4:	469e      	mov	lr, r3
 8015fc6:	4770      	bx	lr

08015fc8 <_fini>:
 8015fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fca:	bf00      	nop
 8015fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fce:	bc08      	pop	{r3}
 8015fd0:	469e      	mov	lr, r3
 8015fd2:	4770      	bx	lr
