
singleGestureControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015a58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08015bf8  08015bf8  00025bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015e70  08015e70  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08015e70  08015e70  00025e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015e78  08015e78  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015e78  08015e78  00025e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015e7c  08015e7c  00025e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08015e80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007310  200000f0  08015f6c  000300f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007400  08015f6c  00037400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00066b67  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d3a  00000000  00000000  00096c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  0009c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001858  00000000  00000000  0009e408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002094a  00000000  00000000  0009fc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026122  00000000  00000000  000c05aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7cb3  00000000  00000000  000e66cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019e37f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077c8  00000000  00000000  0019e3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015be0 	.word	0x08015be0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	08015be0 	.word	0x08015be0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_ldivmod>:
 8000a6c:	b97b      	cbnz	r3, 8000a8e <__aeabi_ldivmod+0x22>
 8000a6e:	b972      	cbnz	r2, 8000a8e <__aeabi_ldivmod+0x22>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bfbe      	ittt	lt
 8000a74:	2000      	movlt	r0, #0
 8000a76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a7a:	e006      	blt.n	8000a8a <__aeabi_ldivmod+0x1e>
 8000a7c:	bf08      	it	eq
 8000a7e:	2800      	cmpeq	r0, #0
 8000a80:	bf1c      	itt	ne
 8000a82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a86:	f04f 30ff 	movne.w	r0, #4294967295
 8000a8a:	f000 b9b9 	b.w	8000e00 <__aeabi_idiv0>
 8000a8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a96:	2900      	cmp	r1, #0
 8000a98:	db09      	blt.n	8000aae <__aeabi_ldivmod+0x42>
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	db1a      	blt.n	8000ad4 <__aeabi_ldivmod+0x68>
 8000a9e:	f000 f84d 	bl	8000b3c <__udivmoddi4>
 8000aa2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aaa:	b004      	add	sp, #16
 8000aac:	4770      	bx	lr
 8000aae:	4240      	negs	r0, r0
 8000ab0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db1b      	blt.n	8000af0 <__aeabi_ldivmod+0x84>
 8000ab8:	f000 f840 	bl	8000b3c <__udivmoddi4>
 8000abc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac4:	b004      	add	sp, #16
 8000ac6:	4240      	negs	r0, r0
 8000ac8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000acc:	4252      	negs	r2, r2
 8000ace:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ad2:	4770      	bx	lr
 8000ad4:	4252      	negs	r2, r2
 8000ad6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ada:	f000 f82f 	bl	8000b3c <__udivmoddi4>
 8000ade:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae6:	b004      	add	sp, #16
 8000ae8:	4240      	negs	r0, r0
 8000aea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aee:	4770      	bx	lr
 8000af0:	4252      	negs	r2, r2
 8000af2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000af6:	f000 f821 	bl	8000b3c <__udivmoddi4>
 8000afa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b02:	b004      	add	sp, #16
 8000b04:	4252      	negs	r2, r2
 8000b06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b96e 	b.w	8000e00 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468c      	mov	ip, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f040 8083 	bne.w	8000c52 <__udivmoddi4+0x116>
 8000b4c:	428a      	cmp	r2, r1
 8000b4e:	4617      	mov	r7, r2
 8000b50:	d947      	bls.n	8000be2 <__udivmoddi4+0xa6>
 8000b52:	fab2 f282 	clz	r2, r2
 8000b56:	b142      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b58:	f1c2 0020 	rsb	r0, r2, #32
 8000b5c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b60:	4091      	lsls	r1, r2
 8000b62:	4097      	lsls	r7, r2
 8000b64:	ea40 0c01 	orr.w	ip, r0, r1
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbbc f6f8 	udiv	r6, ip, r8
 8000b74:	fa1f fe87 	uxth.w	lr, r7
 8000b78:	fb08 c116 	mls	r1, r8, r6, ip
 8000b7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b80:	fb06 f10e 	mul.w	r1, r6, lr
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b8e:	f080 8119 	bcs.w	8000dc4 <__udivmoddi4+0x288>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8116 	bls.w	8000dc4 <__udivmoddi4+0x288>
 8000b98:	3e02      	subs	r6, #2
 8000b9a:	443b      	add	r3, r7
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb0:	45a6      	cmp	lr, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	193c      	adds	r4, r7, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8105 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000bbe:	45a6      	cmp	lr, r4
 8000bc0:	f240 8102 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	443c      	add	r4, r7
 8000bc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bcc:	eba4 040e 	sub.w	r4, r4, lr
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	b11d      	cbz	r5, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bdc:	4631      	mov	r1, r6
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	b902      	cbnz	r2, 8000be6 <__udivmoddi4+0xaa>
 8000be4:	deff      	udf	#255	; 0xff
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	2a00      	cmp	r2, #0
 8000bec:	d150      	bne.n	8000c90 <__udivmoddi4+0x154>
 8000bee:	1bcb      	subs	r3, r1, r7
 8000bf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf4:	fa1f f887 	uxth.w	r8, r7
 8000bf8:	2601      	movs	r6, #1
 8000bfa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bfe:	0c21      	lsrs	r1, r4, #16
 8000c00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c08:	fb08 f30c 	mul.w	r3, r8, ip
 8000c0c:	428b      	cmp	r3, r1
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000c10:	1879      	adds	r1, r7, r1
 8000c12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0xe2>
 8000c18:	428b      	cmp	r3, r1
 8000c1a:	f200 80e9 	bhi.w	8000df0 <__udivmoddi4+0x2b4>
 8000c1e:	4684      	mov	ip, r0
 8000c20:	1ac9      	subs	r1, r1, r3
 8000c22:	b2a3      	uxth	r3, r4
 8000c24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c30:	fb08 f800 	mul.w	r8, r8, r0
 8000c34:	45a0      	cmp	r8, r4
 8000c36:	d907      	bls.n	8000c48 <__udivmoddi4+0x10c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x10a>
 8000c40:	45a0      	cmp	r8, r4
 8000c42:	f200 80d9 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c46:	4618      	mov	r0, r3
 8000c48:	eba4 0408 	sub.w	r4, r4, r8
 8000c4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c50:	e7bf      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x12e>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	f000 80b1 	beq.w	8000dbe <__udivmoddi4+0x282>
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c62:	4630      	mov	r0, r6
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f683 	clz	r6, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d14a      	bne.n	8000d08 <__udivmoddi4+0x1cc>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0x140>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80b8 	bhi.w	8000dec <__udivmoddi4+0x2b0>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	468c      	mov	ip, r1
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d0a8      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c8e:	e7a5      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f603 	lsr.w	r6, r0, r3
 8000c98:	4097      	lsls	r7, r2
 8000c9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca2:	40d9      	lsrs	r1, r3
 8000ca4:	4330      	orrs	r0, r6
 8000ca6:	0c03      	lsrs	r3, r0, #16
 8000ca8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cac:	fa1f f887 	uxth.w	r8, r7
 8000cb0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb8:	fb06 f108 	mul.w	r1, r6, r8
 8000cbc:	4299      	cmp	r1, r3
 8000cbe:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x19c>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cca:	f080 808d 	bcs.w	8000de8 <__udivmoddi4+0x2ac>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 808a 	bls.w	8000de8 <__udivmoddi4+0x2ac>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b281      	uxth	r1, r0
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce8:	fb00 f308 	mul.w	r3, r0, r8
 8000cec:	428b      	cmp	r3, r1
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x1c4>
 8000cf0:	1879      	adds	r1, r7, r1
 8000cf2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf6:	d273      	bcs.n	8000de0 <__udivmoddi4+0x2a4>
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d971      	bls.n	8000de0 <__udivmoddi4+0x2a4>
 8000cfc:	3802      	subs	r0, #2
 8000cfe:	4439      	add	r1, r7
 8000d00:	1acb      	subs	r3, r1, r3
 8000d02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d06:	e778      	b.n	8000bfa <__udivmoddi4+0xbe>
 8000d08:	f1c6 0c20 	rsb	ip, r6, #32
 8000d0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d14:	431c      	orrs	r4, r3
 8000d16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d26:	431f      	orrs	r7, r3
 8000d28:	0c3b      	lsrs	r3, r7, #16
 8000d2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2e:	fa1f f884 	uxth.w	r8, r4
 8000d32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d3e:	458a      	cmp	sl, r1
 8000d40:	fa02 f206 	lsl.w	r2, r2, r6
 8000d44:	fa00 f306 	lsl.w	r3, r0, r6
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x220>
 8000d4a:	1861      	adds	r1, r4, r1
 8000d4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d50:	d248      	bcs.n	8000de4 <__udivmoddi4+0x2a8>
 8000d52:	458a      	cmp	sl, r1
 8000d54:	d946      	bls.n	8000de4 <__udivmoddi4+0x2a8>
 8000d56:	f1a9 0902 	sub.w	r9, r9, #2
 8000d5a:	4421      	add	r1, r4
 8000d5c:	eba1 010a 	sub.w	r1, r1, sl
 8000d60:	b2bf      	uxth	r7, r7
 8000d62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d6e:	fb00 f808 	mul.w	r8, r0, r8
 8000d72:	45b8      	cmp	r8, r7
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x24a>
 8000d76:	19e7      	adds	r7, r4, r7
 8000d78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7c:	d22e      	bcs.n	8000ddc <__udivmoddi4+0x2a0>
 8000d7e:	45b8      	cmp	r8, r7
 8000d80:	d92c      	bls.n	8000ddc <__udivmoddi4+0x2a0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4427      	add	r7, r4
 8000d86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d8a:	eba7 0708 	sub.w	r7, r7, r8
 8000d8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d92:	454f      	cmp	r7, r9
 8000d94:	46c6      	mov	lr, r8
 8000d96:	4649      	mov	r1, r9
 8000d98:	d31a      	bcc.n	8000dd0 <__udivmoddi4+0x294>
 8000d9a:	d017      	beq.n	8000dcc <__udivmoddi4+0x290>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x27a>
 8000d9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000da2:	eb67 0701 	sbc.w	r7, r7, r1
 8000da6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000daa:	40f2      	lsrs	r2, r6
 8000dac:	ea4c 0202 	orr.w	r2, ip, r2
 8000db0:	40f7      	lsrs	r7, r6
 8000db2:	e9c5 2700 	strd	r2, r7, [r5]
 8000db6:	2600      	movs	r6, #0
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	462e      	mov	r6, r5
 8000dc0:	4628      	mov	r0, r5
 8000dc2:	e70b      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	e6e9      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6fd      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dcc:	4543      	cmp	r3, r8
 8000dce:	d2e5      	bcs.n	8000d9c <__udivmoddi4+0x260>
 8000dd0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dd4:	eb69 0104 	sbc.w	r1, r9, r4
 8000dd8:	3801      	subs	r0, #1
 8000dda:	e7df      	b.n	8000d9c <__udivmoddi4+0x260>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e7d2      	b.n	8000d86 <__udivmoddi4+0x24a>
 8000de0:	4660      	mov	r0, ip
 8000de2:	e78d      	b.n	8000d00 <__udivmoddi4+0x1c4>
 8000de4:	4681      	mov	r9, r0
 8000de6:	e7b9      	b.n	8000d5c <__udivmoddi4+0x220>
 8000de8:	4666      	mov	r6, ip
 8000dea:	e775      	b.n	8000cd8 <__udivmoddi4+0x19c>
 8000dec:	4630      	mov	r0, r6
 8000dee:	e74a      	b.n	8000c86 <__udivmoddi4+0x14a>
 8000df0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df4:	4439      	add	r1, r7
 8000df6:	e713      	b.n	8000c20 <__udivmoddi4+0xe4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	443c      	add	r4, r7
 8000dfc:	e724      	b.n	8000c48 <__udivmoddi4+0x10c>
 8000dfe:	bf00      	nop

08000e00 <__aeabi_idiv0>:
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <MX_TOF_Init>:
static void getResult(uint8_t sensor, RANGING_SENSOR_Result_t * result);
static long getDistance(uint8_t sensor, RANGING_SENSOR_Result_t * result);
static void objectPresent();

void MX_TOF_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L3A2_MultiSensorRanging_Init();
 8000e08:	f000 f9e8 	bl	80011dc <MX_53L3A2_MultiSensorRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e12:	b08d      	sub	sp, #52	; 0x34
 8000e14:	af06      	add	r7, sp, #24
	  //Enkel de 1ste sensor (Center) opstarten
	  /*	Hier zeggen we welk profiel we willen gebruiken
	   * 	bv.
	   *
	   */
	start_sensor(VL53L3A2_DEV_CENTER);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f000 fa44 	bl	80012a4 <start_sensor>

  //MX_53L3A2_MultiSensorRanging_Process();

  /* USER CODE BEGIN TOF_Process_PostTreatment */
	while(1){
		HAL_Delay(5);
 8000e1c:	2005      	movs	r0, #5
 8000e1e:	f011 fb9d 	bl	801255c <HAL_Delay>
		getResult(VL53L3A2_DEV_CENTER, Result);
 8000e22:	4964      	ldr	r1, [pc, #400]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000e24:	2001      	movs	r0, #1
 8000e26:	f000 faa5 	bl	8001374 <getResult>


		long int temp1 = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
		int divider = 4;
 8000e2e:	2304      	movs	r3, #4
 8000e30:	60fb      	str	r3, [r7, #12]
		for(int x = 0; x < divider; x++){
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	e011      	b.n	8000e5c <MX_TOF_Process+0x4c>
			getResult(VL53L3A2_DEV_CENTER, Result);
 8000e38:	495e      	ldr	r1, [pc, #376]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f000 fa9a 	bl	8001374 <getResult>
			temp1 += getDistance(VL53L3A2_DEV_CENTER, Result);
 8000e40:	495c      	ldr	r1, [pc, #368]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000e42:	2001      	movs	r0, #1
 8000e44:	f000 faac 	bl	80013a0 <getDistance>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	617b      	str	r3, [r7, #20]
			HAL_Delay(2);
 8000e50:	2002      	movs	r0, #2
 8000e52:	f011 fb83 	bl	801255c <HAL_Delay>
		for(int x = 0; x < divider; x++){
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dbe9      	blt.n	8000e38 <MX_TOF_Process+0x28>
		}
		dis1 = (int)(temp1/(double)divider);
 8000e64:	6978      	ldr	r0, [r7, #20]
 8000e66:	f7ff fb5d 	bl	8000524 <__aeabi_i2d>
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	460d      	mov	r5, r1
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f7ff fb58 	bl	8000524 <__aeabi_i2d>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4620      	mov	r0, r4
 8000e7a:	4629      	mov	r1, r5
 8000e7c:	f7ff fce6 	bl	800084c <__aeabi_ddiv>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	4610      	mov	r0, r2
 8000e86:	4619      	mov	r1, r3
 8000e88:	f7ff fdc8 	bl	8000a1c <__aeabi_d2iz>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4a4a      	ldr	r2, [pc, #296]	; (8000fb8 <MX_TOF_Process+0x1a8>)
 8000e90:	6013      	str	r3, [r2, #0]

		if(ObjectPresent)
 8000e92:	4b4a      	ldr	r3, [pc, #296]	; (8000fbc <MX_TOF_Process+0x1ac>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d015      	beq.n	8000ec6 <MX_TOF_Process+0xb6>
		{
			getResult(VL53L3A2_DEV_LEFT, Result);
 8000e9a:	4946      	ldr	r1, [pc, #280]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f000 fa69 	bl	8001374 <getResult>
			dis0 = getDistance(VL53L3A2_DEV_LEFT, Result);
 8000ea2:	4944      	ldr	r1, [pc, #272]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f000 fa7b 	bl	80013a0 <getDistance>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4a44      	ldr	r2, [pc, #272]	; (8000fc0 <MX_TOF_Process+0x1b0>)
 8000eae:	6013      	str	r3, [r2, #0]

			getResult(VL53L3A2_DEV_RIGHT, Result);
 8000eb0:	4940      	ldr	r1, [pc, #256]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	f000 fa5e 	bl	8001374 <getResult>
			dis2 = getDistance(VL53L3A2_DEV_RIGHT, Result);
 8000eb8:	493e      	ldr	r1, [pc, #248]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000eba:	2002      	movs	r0, #2
 8000ebc:	f000 fa70 	bl	80013a0 <getDistance>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4a40      	ldr	r2, [pc, #256]	; (8000fc4 <MX_TOF_Process+0x1b4>)
 8000ec4:	6013      	str	r3, [r2, #0]
		}
		//Bug van 1ste meeting dat deze fout is (Een te hoge waarden)
		if(dis1 >= 17760520)
 8000ec6:	4b3c      	ldr	r3, [pc, #240]	; (8000fb8 <MX_TOF_Process+0x1a8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a3f      	ldr	r2, [pc, #252]	; (8000fc8 <MX_TOF_Process+0x1b8>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	dd0b      	ble.n	8000ee8 <MX_TOF_Process+0xd8>
		{
			HAL_Delay(4);
 8000ed0:	2004      	movs	r0, #4
 8000ed2:	f011 fb43 	bl	801255c <HAL_Delay>
			getResult(VL53L3A2_DEV_CENTER, Result);
 8000ed6:	4937      	ldr	r1, [pc, #220]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f000 fa4b 	bl	8001374 <getResult>
			dis1 = (long)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Distance[0];
 8000ede:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <MX_TOF_Process+0x1a8>)
 8000ee6:	601a      	str	r2, [r3, #0]
		}

		//ObjectPresent();
		objectPresent();
 8000ee8:	f000 f878 	bl	8000fdc <objectPresent>

		  //Ticks
		  // long x = HAL_GetTick();
		  //printf("Ticks: %ld ", x);

		if(!ObjectPresent){
 8000eec:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <MX_TOF_Process+0x1ac>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	f083 0301 	eor.w	r3, r3, #1
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d010      	beq.n	8000f1c <MX_TOF_Process+0x10c>
			uint8_t obj1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].NumberOfTargets;
 8000efa:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	717b      	strb	r3, [r7, #5]
			uint8_t sta1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Status[0];
 8000f00:	4b2c      	ldr	r3, [pc, #176]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f04:	713b      	strb	r3, [r7, #4]
#if DEBUGGING
			printf("center: %5d obj: %1d sta: %2d",dis1,obj1,sta1);
 8000f06:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <MX_TOF_Process+0x1a8>)
 8000f08:	6819      	ldr	r1, [r3, #0]
 8000f0a:	797a      	ldrb	r2, [r7, #5]
 8000f0c:	793b      	ldrb	r3, [r7, #4]
 8000f0e:	482f      	ldr	r0, [pc, #188]	; (8000fcc <MX_TOF_Process+0x1bc>)
 8000f10:	f013 fe86 	bl	8014c20 <iprintf>
			printf("\r\n");
 8000f14:	482e      	ldr	r0, [pc, #184]	; (8000fd0 <MX_TOF_Process+0x1c0>)
 8000f16:	f013 ff09 	bl	8014d2c <puts>
 8000f1a:	e03b      	b.n	8000f94 <MX_TOF_Process+0x184>
#endif
		}
		else{
			uint8_t obj0 = (uint8_t)Result[VL53L3A2_DEV_LEFT].ZoneResult[0].NumberOfTargets;
 8000f1c:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	72fb      	strb	r3, [r7, #11]
			uint8_t obj1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].NumberOfTargets;
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	72bb      	strb	r3, [r7, #10]
			uint8_t obj2 = (uint8_t)Result[VL53L3A2_DEV_RIGHT].ZoneResult[0].NumberOfTargets;
 8000f28:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f2e:	727b      	strb	r3, [r7, #9]

			uint8_t sta0 = (uint8_t)Result[VL53L3A2_DEV_LEFT].ZoneResult[0].Status[0];
 8000f30:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	723b      	strb	r3, [r7, #8]
			uint8_t sta1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Status[0];
 8000f36:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3a:	71fb      	strb	r3, [r7, #7]
			uint8_t sta2 = (uint8_t)Result[VL53L3A2_DEV_RIGHT].ZoneResult[0].Status[0];
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <MX_TOF_Process+0x1a4>)
 8000f3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f42:	71bb      	strb	r3, [r7, #6]

#if DEBUGGING
			if(sta0 == sta1 == sta2 == 0){
 8000f44:	7a3a      	ldrb	r2, [r7, #8]
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	bf0c      	ite	eq
 8000f4c:	2301      	moveq	r3, #1
 8000f4e:	2300      	movne	r3, #0
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	461a      	mov	r2, r3
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d01c      	beq.n	8000f94 <MX_TOF_Process+0x184>
			printf("left: %5d obj: %1d sta: %2d \t center: %5d obj: %1d sta: %2d \t right: %5d obj: %d sta: %2d",dis0,obj0,sta0,dis1,obj1,sta1,dis2,obj2,sta2);
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_TOF_Process+0x1b0>)
 8000f5c:	681e      	ldr	r6, [r3, #0]
 8000f5e:	f897 c00b 	ldrb.w	ip, [r7, #11]
 8000f62:	f897 e008 	ldrb.w	lr, [r7, #8]
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_TOF_Process+0x1a8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	7aba      	ldrb	r2, [r7, #10]
 8000f6c:	79f9      	ldrb	r1, [r7, #7]
 8000f6e:	4815      	ldr	r0, [pc, #84]	; (8000fc4 <MX_TOF_Process+0x1b4>)
 8000f70:	6800      	ldr	r0, [r0, #0]
 8000f72:	7a7c      	ldrb	r4, [r7, #9]
 8000f74:	79bd      	ldrb	r5, [r7, #6]
 8000f76:	9505      	str	r5, [sp, #20]
 8000f78:	9404      	str	r4, [sp, #16]
 8000f7a:	9003      	str	r0, [sp, #12]
 8000f7c:	9102      	str	r1, [sp, #8]
 8000f7e:	9201      	str	r2, [sp, #4]
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	4673      	mov	r3, lr
 8000f84:	4662      	mov	r2, ip
 8000f86:	4631      	mov	r1, r6
 8000f88:	4812      	ldr	r0, [pc, #72]	; (8000fd4 <MX_TOF_Process+0x1c4>)
 8000f8a:	f013 fe49 	bl	8014c20 <iprintf>
			printf("\r\n");
 8000f8e:	4810      	ldr	r0, [pc, #64]	; (8000fd0 <MX_TOF_Process+0x1c0>)
 8000f90:	f013 fecc 	bl	8014d2c <puts>
			}
#endif
		}

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, ObjectPresent);
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_TOF_Process+0x1ac>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	2120      	movs	r1, #32
 8000f9c:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <MX_TOF_Process+0x1c8>)
 8000f9e:	f011 fe67 	bl	8012c70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_O_GPIO_Port, L_O_Pin, ObjectPresent);
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_TOF_Process+0x1ac>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	2180      	movs	r1, #128	; 0x80
 8000faa:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <MX_TOF_Process+0x1c8>)
 8000fac:	f011 fe60 	bl	8012c70 <HAL_GPIO_WritePin>
	while(1){
 8000fb0:	e734      	b.n	8000e1c <MX_TOF_Process+0xc>
 8000fb2:	bf00      	nop
 8000fb4:	20007038 	.word	0x20007038
 8000fb8:	20000118 	.word	0x20000118
 8000fbc:	20000125 	.word	0x20000125
 8000fc0:	20000114 	.word	0x20000114
 8000fc4:	2000011c 	.word	0x2000011c
 8000fc8:	010f0107 	.word	0x010f0107
 8000fcc:	08015c10 	.word	0x08015c10
 8000fd0:	08015c30 	.word	0x08015c30
 8000fd4:	08015c34 	.word	0x08015c34
 8000fd8:	40020000 	.word	0x40020000

08000fdc <objectPresent>:

	  }
  /* USER CODE END TOF_Process_PostTreatment */
}

void objectPresent(){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	  /*	als dist1 onder de 1000 mm komt voor 3 seconden, dan is er een object.
			   * 	+ er mag geen foutcode 12 zijn
			   */
			if((dis1 <= maxDistanceObject) && (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Status[0] == 0	 && !ObjectPresent){
 8000fe0:	4b71      	ldr	r3, [pc, #452]	; (80011a8 <objectPresent+0x1cc>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b71      	ldr	r3, [pc, #452]	; (80011ac <objectPresent+0x1d0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dc56      	bgt.n	800109a <objectPresent+0xbe>
 8000fec:	4b70      	ldr	r3, [pc, #448]	; (80011b0 <objectPresent+0x1d4>)
 8000fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d151      	bne.n	800109a <objectPresent+0xbe>
 8000ff6:	4b6f      	ldr	r3, [pc, #444]	; (80011b4 <objectPresent+0x1d8>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	f083 0301 	eor.w	r3, r3, #1
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d04a      	beq.n	800109a <objectPresent+0xbe>
				if(!timerMeasurementSet){
 8001004:	4b6c      	ldr	r3, [pc, #432]	; (80011b8 <objectPresent+0x1dc>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	f083 0301 	eor.w	r3, r3, #1
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d017      	beq.n	8001042 <objectPresent+0x66>
					timerMeasurementSet = true;
 8001012:	4b69      	ldr	r3, [pc, #420]	; (80011b8 <objectPresent+0x1dc>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
					timerMeasurment = HAL_GetTick();
 8001018:	f011 fa94 	bl	8012544 <HAL_GetTick>
 800101c:	ee07 0a90 	vmov	s15, r0
 8001020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001024:	4b65      	ldr	r3, [pc, #404]	; (80011bc <objectPresent+0x1e0>)
 8001026:	edc3 7a00 	vstr	s15, [r3]

#if DEBUGGING
					printf("Timer object %d ", timerMeasurementSet);
 800102a:	4b63      	ldr	r3, [pc, #396]	; (80011b8 <objectPresent+0x1dc>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	4619      	mov	r1, r3
 8001030:	4863      	ldr	r0, [pc, #396]	; (80011c0 <objectPresent+0x1e4>)
 8001032:	f013 fdf5 	bl	8014c20 <iprintf>
					printf("Timer object is set");
 8001036:	4863      	ldr	r0, [pc, #396]	; (80011c4 <objectPresent+0x1e8>)
 8001038:	f013 fdf2 	bl	8014c20 <iprintf>
					printf("\r\n");
 800103c:	4862      	ldr	r0, [pc, #392]	; (80011c8 <objectPresent+0x1ec>)
 800103e:	f013 fe75 	bl	8014d2c <puts>
#endif
				}
				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 8001042:	f011 fa7f 	bl	8012544 <HAL_GetTick>
 8001046:	ee07 0a90 	vmov	s15, r0
 800104a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800104e:	4b5b      	ldr	r3, [pc, #364]	; (80011bc <objectPresent+0x1e0>)
 8001050:	edd3 7a00 	vldr	s15, [r3]
 8001054:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001058:	4b5c      	ldr	r3, [pc, #368]	; (80011cc <objectPresent+0x1f0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001064:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106c:	db2c      	blt.n	80010c8 <objectPresent+0xec>
				{
					timerMeasurementSet = false;
 800106e:	4b52      	ldr	r3, [pc, #328]	; (80011b8 <objectPresent+0x1dc>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]

					//Persoon naderd en staat dicht genoeg
					//Start andere sensoren ook op
					ObjectPresent = true;
 8001074:	4b4f      	ldr	r3, [pc, #316]	; (80011b4 <objectPresent+0x1d8>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
					start_sensor(VL53L3A2_DEV_LEFT);
 800107a:	2000      	movs	r0, #0
 800107c:	f000 f912 	bl	80012a4 <start_sensor>
					start_sensor(VL53L3A2_DEV_RIGHT);
 8001080:	2002      	movs	r0, #2
 8001082:	f000 f90f 	bl	80012a4 <start_sensor>

#if DEBUGGING
					printf("Object %d", ObjectPresent);
 8001086:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <objectPresent+0x1d8>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4619      	mov	r1, r3
 800108c:	4850      	ldr	r0, [pc, #320]	; (80011d0 <objectPresent+0x1f4>)
 800108e:	f013 fdc7 	bl	8014c20 <iprintf>
					printf("\r\n");
 8001092:	484d      	ldr	r0, [pc, #308]	; (80011c8 <objectPresent+0x1ec>)
 8001094:	f013 fe4a 	bl	8014d2c <puts>
				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 8001098:	e016      	b.n	80010c8 <objectPresent+0xec>
#endif
				}
			}
			else
			{
				if(timerMeasurementSet && !ObjectPresent){
 800109a:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <objectPresent+0x1dc>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d012      	beq.n	80010c8 <objectPresent+0xec>
 80010a2:	4b44      	ldr	r3, [pc, #272]	; (80011b4 <objectPresent+0x1d8>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	f083 0301 	eor.w	r3, r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00b      	beq.n	80010c8 <objectPresent+0xec>
					timerMeasurementSet = false;
 80010b0:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <objectPresent+0x1dc>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
#if DEBUGGING
					printf("Timer object %d ", timerMeasurementSet);
 80010b6:	4b40      	ldr	r3, [pc, #256]	; (80011b8 <objectPresent+0x1dc>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	4619      	mov	r1, r3
 80010bc:	4840      	ldr	r0, [pc, #256]	; (80011c0 <objectPresent+0x1e4>)
 80010be:	f013 fdaf 	bl	8014c20 <iprintf>
					printf("\r\n");
 80010c2:	4841      	ldr	r0, [pc, #260]	; (80011c8 <objectPresent+0x1ec>)
 80010c4:	f013 fe32 	bl	8014d2c <puts>
#endif
				}
			}


			if( (dis1 >= maxDistanceObject) && ObjectPresent){
 80010c8:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <objectPresent+0x1cc>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b37      	ldr	r3, [pc, #220]	; (80011ac <objectPresent+0x1d0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	db51      	blt.n	8001178 <objectPresent+0x19c>
 80010d4:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <objectPresent+0x1d8>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d04d      	beq.n	8001178 <objectPresent+0x19c>

				if(timerMeasurementSet == false){
 80010dc:	4b36      	ldr	r3, [pc, #216]	; (80011b8 <objectPresent+0x1dc>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	f083 0301 	eor.w	r3, r3, #1
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d017      	beq.n	800111a <objectPresent+0x13e>
					timerMeasurementSet = true;
 80010ea:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <objectPresent+0x1dc>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
					timerMeasurment = HAL_GetTick();
 80010f0:	f011 fa28 	bl	8012544 <HAL_GetTick>
 80010f4:	ee07 0a90 	vmov	s15, r0
 80010f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010fc:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <objectPresent+0x1e0>)
 80010fe:	edc3 7a00 	vstr	s15, [r3]
#if DEBUGGING
					printf("Timer no object %d ", timerMeasurementSet);
 8001102:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <objectPresent+0x1dc>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	4832      	ldr	r0, [pc, #200]	; (80011d4 <objectPresent+0x1f8>)
 800110a:	f013 fd89 	bl	8014c20 <iprintf>
					printf("Timer no object is set");
 800110e:	4832      	ldr	r0, [pc, #200]	; (80011d8 <objectPresent+0x1fc>)
 8001110:	f013 fd86 	bl	8014c20 <iprintf>
					printf("\r\n");
 8001114:	482c      	ldr	r0, [pc, #176]	; (80011c8 <objectPresent+0x1ec>)
 8001116:	f013 fe09 	bl	8014d2c <puts>
#endif
				}

				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 800111a:	f011 fa13 	bl	8012544 <HAL_GetTick>
 800111e:	ee07 0a90 	vmov	s15, r0
 8001122:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <objectPresent+0x1e0>)
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <objectPresent+0x1f0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001144:	db2d      	blt.n	80011a2 <objectPresent+0x1c6>
				{
					timerMeasurementSet = false;
 8001146:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <objectPresent+0x1dc>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]

					ObjectPresent = false;
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <objectPresent+0x1d8>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
					stop_sensor(VL53L3A2_DEV_LEFT);
 8001152:	2000      	movs	r0, #0
 8001154:	f000 f8e6 	bl	8001324 <stop_sensor>
					stop_sensor(VL53L3A2_DEV_RIGHT);
 8001158:	2002      	movs	r0, #2
 800115a:	f000 f8e3 	bl	8001324 <stop_sensor>
					HAL_Delay(2);
 800115e:	2002      	movs	r0, #2
 8001160:	f011 f9fc 	bl	801255c <HAL_Delay>
#if DEBUGGING
					printf("Object %d", ObjectPresent);
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <objectPresent+0x1d8>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	4819      	ldr	r0, [pc, #100]	; (80011d0 <objectPresent+0x1f4>)
 800116c:	f013 fd58 	bl	8014c20 <iprintf>
					printf("\r\n");
 8001170:	4815      	ldr	r0, [pc, #84]	; (80011c8 <objectPresent+0x1ec>)
 8001172:	f013 fddb 	bl	8014d2c <puts>
				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 8001176:	e014      	b.n	80011a2 <objectPresent+0x1c6>
#endif
				}
			}
			else
			{
				if(timerMeasurementSet && ObjectPresent){
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <objectPresent+0x1dc>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d010      	beq.n	80011a2 <objectPresent+0x1c6>
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <objectPresent+0x1d8>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00c      	beq.n	80011a2 <objectPresent+0x1c6>
					timerMeasurementSet = false;
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <objectPresent+0x1dc>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
#if DEBUGGING
					printf("Timer no object %d ", timerMeasurementSet);
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <objectPresent+0x1dc>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	4619      	mov	r1, r3
 8001194:	480f      	ldr	r0, [pc, #60]	; (80011d4 <objectPresent+0x1f8>)
 8001196:	f013 fd43 	bl	8014c20 <iprintf>
					printf("\r\n");
 800119a:	480b      	ldr	r0, [pc, #44]	; (80011c8 <objectPresent+0x1ec>)
 800119c:	f013 fdc6 	bl	8014d2c <puts>
#endif
				}
			}
}
 80011a0:	e7ff      	b.n	80011a2 <objectPresent+0x1c6>
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000118 	.word	0x20000118
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20007038 	.word	0x20007038
 80011b4:	20000125 	.word	0x20000125
 80011b8:	20000124 	.word	0x20000124
 80011bc:	20000120 	.word	0x20000120
 80011c0:	08015c90 	.word	0x08015c90
 80011c4:	08015ca4 	.word	0x08015ca4
 80011c8:	08015c30 	.word	0x08015c30
 80011cc:	20000004 	.word	0x20000004
 80011d0:	08015cb8 	.word	0x08015cb8
 80011d4:	08015cc4 	.word	0x08015cc4
 80011d8:	08015cd8 	.word	0x08015cd8

080011dc <MX_53L3A2_MultiSensorRanging_Init>:

static void MX_53L3A2_MultiSensorRanging_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
  uint8_t device;
  uint16_t i2c_addr;
  uint32_t id;

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 faba 	bl	800175c <BSP_COM_Init>

  printf("53L3A2 Gesture Control\r\n");
 80011e8:	482a      	ldr	r0, [pc, #168]	; (8001294 <MX_53L3A2_MultiSensorRanging_Init+0xb8>)
 80011ea:	f013 fd9f 	bl	8014d2c <puts>

  /* put all the devices in shutdown mode */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	e007      	b.n	8001204 <MX_53L3A2_MultiSensorRanging_Init+0x28>
  {
    VL53L3A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_OFF);
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2101      	movs	r1, #1
 80011f8:	4618      	mov	r0, r3
 80011fa:	f001 f8a1 	bl	8002340 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	3301      	adds	r3, #1
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d9f4      	bls.n	80011f4 <MX_53L3A2_MultiSensorRanging_Init+0x18>

  /* power on the devices one at a time, initialize them and change their address.
   * once the address is updated, the communication with the devices is checked
   * reading its ID.
   */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 800120a:	2300      	movs	r3, #0
 800120c:	71fb      	strb	r3, [r7, #7]
 800120e:	e039      	b.n	8001284 <MX_53L3A2_MultiSensorRanging_Init+0xa8>
  {
    VL53L3A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_ON);
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f001 f893 	bl	8002340 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
    status = VL53L3A2_RANGING_SENSOR_Init(device);
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4618      	mov	r0, r3
 800121e:	f000 ff7b 	bl	8002118 <VL53L3A2_RANGING_SENSOR_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	4a1c      	ldr	r2, [pc, #112]	; (8001298 <MX_53L3A2_MultiSensorRanging_Init+0xbc>)
 8001226:	6013      	str	r3, [r2, #0]

    /* 0: not detected, 1: detected */
    ToF_Present[device] = (status != BSP_ERROR_NONE) ? 0 : 1;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_53L3A2_MultiSensorRanging_Init+0xbc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	bf0c      	ite	eq
 8001230:	2301      	moveq	r3, #1
 8001232:	2300      	movne	r3, #0
 8001234:	b2da      	uxtb	r2, r3
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	4611      	mov	r1, r2
 800123a:	4a18      	ldr	r2, [pc, #96]	; (800129c <MX_53L3A2_MultiSensorRanging_Init+0xc0>)
 800123c:	54d1      	strb	r1, [r2, r3]

    /* skip this device if init not successful */
    if (ToF_Present[device] == 0) continue;
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	4a16      	ldr	r2, [pc, #88]	; (800129c <MX_53L3A2_MultiSensorRanging_Init+0xc0>)
 8001242:	5cd3      	ldrb	r3, [r2, r3]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d019      	beq.n	800127c <MX_53L3A2_MultiSensorRanging_Init+0xa0>

    /* left: 0x54, center: 0x56, right: 0x58 */
    i2c_addr = (RANGING_SENSOR_VL53L3CX_ADDRESS + (device + 1) * 2);
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	3301      	adds	r3, #1
 800124c:	b29b      	uxth	r3, r3
 800124e:	3329      	adds	r3, #41	; 0x29
 8001250:	b29b      	uxth	r3, r3
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	80bb      	strh	r3, [r7, #4]
    VL53L3A2_RANGING_SENSOR_SetAddress(device, i2c_addr);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	88ba      	ldrh	r2, [r7, #4]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f001 f847 	bl	80022f0 <VL53L3A2_RANGING_SENSOR_SetAddress>

    /* check the communication with the device reading the ID */
    VL53L3A2_RANGING_SENSOR_ReadID(device, &id);
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	463a      	mov	r2, r7
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f000 ff7b 	bl	8002164 <VL53L3A2_RANGING_SENSOR_ReadID>
#if DEBUGGING
    printf("ToF sensor %d - ID: %04lX\r\n", device, (unsigned long)id);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	4619      	mov	r1, r3
 8001274:	480a      	ldr	r0, [pc, #40]	; (80012a0 <MX_53L3A2_MultiSensorRanging_Init+0xc4>)
 8001276:	f013 fcd3 	bl	8014c20 <iprintf>
 800127a:	e000      	b.n	800127e <MX_53L3A2_MultiSensorRanging_Init+0xa2>
    if (ToF_Present[device] == 0) continue;
 800127c:	bf00      	nop
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	3301      	adds	r3, #1
 8001282:	71fb      	strb	r3, [r7, #7]
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d9c2      	bls.n	8001210 <MX_53L3A2_MultiSensorRanging_Init+0x34>
#endif
  }
}
 800128a:	bf00      	nop
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	08015cf0 	.word	0x08015cf0
 8001298:	2000010c 	.word	0x2000010c
 800129c:	20000110 	.word	0x20000110
 80012a0:	08015d08 	.word	0x08015d08

080012a4 <start_sensor>:
  }
  printf ("\r\n");
}
*/

static void start_sensor(uint8_t sensor){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
	RANGING_SENSOR_ProfileConfig_t Profile;

	Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 80012ae:	2302      	movs	r3, #2
 80012b0:	60fb      	str	r3, [r7, #12]
	Profile.TimingBudget = 30; /* 16 ms < TimingBudget < 500 ms */
 80012b2:	231e      	movs	r3, #30
 80012b4:	613b      	str	r3, [r7, #16]
	Profile.Frequency = 0; /* not necessary in simple ranging */
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
	Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
 80012ba:	2301      	movs	r3, #1
 80012bc:	61bb      	str	r3, [r7, #24]
	Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 80012be:	2301      	movs	r3, #1
 80012c0:	61fb      	str	r3, [r7, #28]

	VL53L3A2_RANGING_SENSOR_ConfigProfile(sensor, &Profile);
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	f107 020c 	add.w	r2, r7, #12
 80012c8:	4611      	mov	r1, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 ff72 	bl	80021b4 <VL53L3A2_RANGING_SENSOR_ConfigProfile>
	status = VL53L3A2_RANGING_SENSOR_Start(sensor, RS_MODE_BLOCKING_CONTINUOUS);
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2101      	movs	r1, #1
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 ffbd 	bl	8002254 <VL53L3A2_RANGING_SENSOR_Start>
 80012da:	4603      	mov	r3, r0
 80012dc:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <start_sensor+0x70>)
 80012de:	6013      	str	r3, [r2, #0]
    if (status != BSP_ERROR_NONE)
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <start_sensor+0x70>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <start_sensor+0x56>
    {
#if DEBUGGING
    	printf("VL53L3A2_RANGING_SENSOR_Start failed for sensor %s \r\n", TofDevStr[sensor]);
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <start_sensor+0x74>)
 80012ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f0:	4619      	mov	r1, r3
 80012f2:	480a      	ldr	r0, [pc, #40]	; (800131c <start_sensor+0x78>)
 80012f4:	f013 fc94 	bl	8014c20 <iprintf>
#endif
		while(1);
 80012f8:	e7fe      	b.n	80012f8 <start_sensor+0x54>
    }
    else
	{
#if DEBUGGING
    	printf("sensor %s\t opgestart \r\n", TofDevStr[sensor]);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4a06      	ldr	r2, [pc, #24]	; (8001318 <start_sensor+0x74>)
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	4619      	mov	r1, r3
 8001304:	4806      	ldr	r0, [pc, #24]	; (8001320 <start_sensor+0x7c>)
 8001306:	f013 fc8b 	bl	8014c20 <iprintf>
#endif
	}
}
 800130a:	bf00      	nop
 800130c:	3720      	adds	r7, #32
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000010c 	.word	0x2000010c
 8001318:	20000008 	.word	0x20000008
 800131c:	08015d24 	.word	0x08015d24
 8001320:	08015d5c 	.word	0x08015d5c

08001324 <stop_sensor>:

static void stop_sensor(uint8_t sensor){
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	status = VL53L3A2_RANGING_SENSOR_Stop(sensor);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	4618      	mov	r0, r3
 8001332:	f000 ffb7 	bl	80022a4 <VL53L3A2_RANGING_SENSOR_Stop>
 8001336:	4603      	mov	r3, r0
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <stop_sensor+0x40>)
 800133a:	6013      	str	r3, [r2, #0]
    if (status != BSP_ERROR_NONE)
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <stop_sensor+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <stop_sensor+0x28>
    {
#if DEBUGGING
    	printf("VL53L3A2_RANGING_SENSOR_Stop failed\r\n");
 8001344:	4808      	ldr	r0, [pc, #32]	; (8001368 <stop_sensor+0x44>)
 8001346:	f013 fcf1 	bl	8014d2c <puts>
#endif
		while(1);
 800134a:	e7fe      	b.n	800134a <stop_sensor+0x26>
    }
    else
	{
#if DEBUGGING
    	printf("sensor %s\t afgezet \r\n", TofDevStr[sensor]);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	4a07      	ldr	r2, [pc, #28]	; (800136c <stop_sensor+0x48>)
 8001350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <stop_sensor+0x4c>)
 8001358:	f013 fc62 	bl	8014c20 <iprintf>
#endif
	}
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	2000010c 	.word	0x2000010c
 8001368:	08015d74 	.word	0x08015d74
 800136c:	20000008 	.word	0x20000008
 8001370:	08015d9c 	.word	0x08015d9c

08001374 <getResult>:

static void getResult(uint8_t sensor, RANGING_SENSOR_Result_t *result){
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
	VL53L3A2_RANGING_SENSOR_GetDistance(sensor, &result[sensor]);
 8001380:	79f8      	ldrb	r0, [r7, #7]
 8001382:	79fa      	ldrb	r2, [r7, #7]
 8001384:	4613      	mov	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4413      	add	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	461a      	mov	r2, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	4413      	add	r3, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f000 ff36 	bl	8002204 <VL53L3A2_RANGING_SENSOR_GetDistance>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <getDistance>:

static long getDistance(uint8_t sensor, RANGING_SENSOR_Result_t * result){
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
	long distance = (long)result[sensor].ZoneResult[0].Distance[0];
 80013ac:	79fa      	ldrb	r2, [r7, #7]
 80013ae:	4613      	mov	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4413      	add	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	461a      	mov	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	60fb      	str	r3, [r7, #12]
	return distance;
 80013c0:	68fb      	ldr	r3, [r7, #12]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d2:	f011 f851 	bl	8012478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d6:	f000 f809 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013da:	f000 f89d 	bl	8001518 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013de:	f000 f871 	bl	80014c4 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  MX_TOF_Init();
 80013e2:	f7ff fd0f 	bl	8000e04 <MX_TOF_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_TOF_Process();
 80013e6:	f7ff fd13 	bl	8000e10 <MX_TOF_Process>
 80013ea:	e7fc      	b.n	80013e6 <main+0x18>

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b094      	sub	sp, #80	; 0x50
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	2230      	movs	r2, #48	; 0x30
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f013 fc08 	bl	8014c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	4b29      	ldr	r3, [pc, #164]	; (80014bc <SystemClock_Config+0xd0>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	4a28      	ldr	r2, [pc, #160]	; (80014bc <SystemClock_Config+0xd0>)
 800141a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141e:	6413      	str	r3, [r2, #64]	; 0x40
 8001420:	4b26      	ldr	r3, [pc, #152]	; (80014bc <SystemClock_Config+0xd0>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <SystemClock_Config+0xd4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001438:	4a21      	ldr	r2, [pc, #132]	; (80014c0 <SystemClock_Config+0xd4>)
 800143a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <SystemClock_Config+0xd4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800144c:	2302      	movs	r3, #2
 800144e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001450:	2301      	movs	r3, #1
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001454:	2310      	movs	r3, #16
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001458:	2302      	movs	r3, #2
 800145a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800145c:	2300      	movs	r3, #0
 800145e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001460:	2310      	movs	r3, #16
 8001462:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001464:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001468:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800146a:	2304      	movs	r3, #4
 800146c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800146e:	2307      	movs	r3, #7
 8001470:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001472:	f107 0320 	add.w	r3, r7, #32
 8001476:	4618      	mov	r0, r3
 8001478:	f012 fc08 	bl	8013c8c <HAL_RCC_OscConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001482:	f000 f8cb 	bl	800161c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001486:	230f      	movs	r3, #15
 8001488:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148a:	2302      	movs	r3, #2
 800148c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001496:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	2102      	movs	r1, #2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f012 fe6a 	bl	801417c <HAL_RCC_ClockConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014ae:	f000 f8b5 	bl	800161c <Error_Handler>
  }
}
 80014b2:	bf00      	nop
 80014b4:	3750      	adds	r7, #80	; 0x50
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40007000 	.word	0x40007000

080014c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <MX_USART2_UART_Init+0x50>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014fc:	f013 f83a 	bl	8014574 <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001506:	f000 f889 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200071a8 	.word	0x200071a8
 8001514:	40004400 	.word	0x40004400

08001518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <MX_GPIO_Init+0xf8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a36      	ldr	r2, [pc, #216]	; (8001610 <MX_GPIO_Init+0xf8>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b34      	ldr	r3, [pc, #208]	; (8001610 <MX_GPIO_Init+0xf8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b30      	ldr	r3, [pc, #192]	; (8001610 <MX_GPIO_Init+0xf8>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a2f      	ldr	r2, [pc, #188]	; (8001610 <MX_GPIO_Init+0xf8>)
 8001554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <MX_GPIO_Init+0xf8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b29      	ldr	r3, [pc, #164]	; (8001610 <MX_GPIO_Init+0xf8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a28      	ldr	r2, [pc, #160]	; (8001610 <MX_GPIO_Init+0xf8>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b26      	ldr	r3, [pc, #152]	; (8001610 <MX_GPIO_Init+0xf8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <MX_GPIO_Init+0xf8>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a21      	ldr	r2, [pc, #132]	; (8001610 <MX_GPIO_Init+0xf8>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <MX_GPIO_Init+0xf8>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2120      	movs	r1, #32
 80015a2:	481c      	ldr	r0, [pc, #112]	; (8001614 <MX_GPIO_Init+0xfc>)
 80015a4:	f011 fb64 	bl	8012c70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L_O_GPIO_Port, L_O_Pin, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	4819      	ldr	r0, [pc, #100]	; (8001614 <MX_GPIO_Init+0xfc>)
 80015ae:	f011 fb5f 	bl	8012c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4813      	ldr	r0, [pc, #76]	; (8001618 <MX_GPIO_Init+0x100>)
 80015ca:	f011 f8d1 	bl	8012770 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015ce:	2320      	movs	r3, #32
 80015d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	480b      	ldr	r0, [pc, #44]	; (8001614 <MX_GPIO_Init+0xfc>)
 80015e6:	f011 f8c3 	bl	8012770 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_O_Pin */
   GPIO_InitStruct.Pin = L_O_Pin;
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(L_O_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4804      	ldr	r0, [pc, #16]	; (8001614 <MX_GPIO_Init+0xfc>)
 8001602:	f011 f8b5 	bl	8012770 <HAL_GPIO_Init>

}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	; 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40020000 	.word	0x40020000
 8001618:	40020800 	.word	0x40020800

0800161c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
}
 8001622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001624:	e7fe      	b.n	8001624 <Error_Handler+0x8>
	...

08001628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_MspInit+0x4c>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <HAL_MspInit+0x4c>)
 8001638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163c:	6453      	str	r3, [r2, #68]	; 0x44
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_MspInit+0x4c>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_MspInit+0x4c>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a08      	ldr	r2, [pc, #32]	; (8001674 <HAL_MspInit+0x4c>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_MspInit+0x4c>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001666:	2007      	movs	r0, #7
 8001668:	f011 f84e 	bl	8012708 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40023800 	.word	0x40023800

08001678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a19      	ldr	r2, [pc, #100]	; (80016fc <HAL_UART_MspInit+0x84>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d12b      	bne.n	80016f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_UART_MspInit+0x88>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a17      	ldr	r2, [pc, #92]	; (8001700 <HAL_UART_MspInit+0x88>)
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_UART_MspInit+0x88>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_UART_MspInit+0x88>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <HAL_UART_MspInit+0x88>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HAL_UART_MspInit+0x88>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016d2:	230c      	movs	r3, #12
 80016d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016e2:	2307      	movs	r3, #7
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	4805      	ldr	r0, [pc, #20]	; (8001704 <HAL_UART_MspInit+0x8c>)
 80016ee:	f011 f83f 	bl	8012770 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016f2:	bf00      	nop
 80016f4:	3728      	adds	r7, #40	; 0x28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40004400 	.word	0x40004400
 8001700:	40023800 	.word	0x40023800
 8001704:	40020000 	.word	0x40020000

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800170c:	e7fe      	b.n	800170c <NMI_Handler+0x4>

0800170e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <MemManage_Handler+0x4>

0800171a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <UsageFault_Handler+0x4>

08001726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001754:	f010 fee2 	bl	801251c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d903      	bls.n	8001778 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001770:	f06f 0301 	mvn.w	r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	e025      	b.n	80017c4 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	79fa      	ldrb	r2, [r7, #7]
 800177c:	4914      	ldr	r1, [pc, #80]	; (80017d0 <BSP_COM_Init+0x74>)
 800177e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001782:	4814      	ldr	r0, [pc, #80]	; (80017d4 <BSP_COM_Init+0x78>)
 8001784:	4613      	mov	r3, r2
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	4413      	add	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4403      	add	r3, r0
 800178e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8001790:	79fa      	ldrb	r2, [r7, #7]
 8001792:	4613      	mov	r3, r2
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <BSP_COM_Init+0x78>)
 800179c:	4413      	add	r3, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f864 	bl	800186c <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 80017a4:	79fa      	ldrb	r2, [r7, #7]
 80017a6:	4613      	mov	r3, r2
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	4413      	add	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <BSP_COM_Init+0x78>)
 80017b0:	4413      	add	r3, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f810 	bl	80017d8 <MX_USART2_UART_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80017be:	f06f 0303 	mvn.w	r3, #3
 80017c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000014 	.word	0x20000014
 80017d4:	200071a8 	.word	0x200071a8

080017d8 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <MX_USART2_UART_Init+0x58>)
 80017e8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017f0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	220c      	movs	r2, #12
 8001808:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f012 feac 	bl	8014574 <HAL_UART_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001826:	7bfb      	ldrb	r3, [r7, #15]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40004400 	.word	0x40004400

08001834 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* For IAR and ARM Compiler 5 and 6 */
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <__io_putchar+0x30>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4613      	mov	r3, r2
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	4413      	add	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4a07      	ldr	r2, [pc, #28]	; (8001868 <__io_putchar+0x34>)
 800184c:	1898      	adds	r0, r3, r2
 800184e:	1d39      	adds	r1, r7, #4
 8001850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001854:	2201      	movs	r2, #1
 8001856:	f012 feda 	bl	801460e <HAL_UART_Transmit>
  return ch;
 800185a:	687b      	ldr	r3, [r7, #4]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000126 	.word	0x20000126
 8001868:	200071a8 	.word	0x200071a8

0800186c <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <USART2_MspInit+0x88>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	4a1d      	ldr	r2, [pc, #116]	; (80018f4 <USART2_MspInit+0x88>)
 800187e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001882:	6413      	str	r3, [r2, #64]	; 0x40
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <USART2_MspInit+0x88>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <USART2_MspInit+0x88>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	4a16      	ldr	r2, [pc, #88]	; (80018f4 <USART2_MspInit+0x88>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6313      	str	r3, [r2, #48]	; 0x30
 80018a0:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <USART2_MspInit+0x88>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80018ac:	2304      	movs	r3, #4
 80018ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80018bc:	2307      	movs	r3, #7
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	480c      	ldr	r0, [pc, #48]	; (80018f8 <USART2_MspInit+0x8c>)
 80018c8:	f010 ff52 	bl	8012770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80018cc:	2308      	movs	r3, #8
 80018ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80018dc:	2307      	movs	r3, #7
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	4804      	ldr	r0, [pc, #16]	; (80018f8 <USART2_MspInit+0x8c>)
 80018e8:	f010 ff42 	bl	8012770 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80018ec:	bf00      	nop
 80018ee:	3728      	adds	r7, #40	; 0x28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020000 	.word	0x40020000

080018fc <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <BSP_I2C1_Init+0x58>)
 8001908:	4a13      	ldr	r2, [pc, #76]	; (8001958 <BSP_I2C1_Init+0x5c>)
 800190a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <BSP_I2C1_Init+0x60>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	4912      	ldr	r1, [pc, #72]	; (800195c <BSP_I2C1_Init+0x60>)
 8001914:	600a      	str	r2, [r1, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d117      	bne.n	800194a <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800191a:	480e      	ldr	r0, [pc, #56]	; (8001954 <BSP_I2C1_Init+0x58>)
 800191c:	f011 fe6e 	bl	80135fc <HAL_I2C_GetState>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d111      	bne.n	800194a <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001926:	480b      	ldr	r0, [pc, #44]	; (8001954 <BSP_I2C1_Init+0x58>)
 8001928:	f000 f8d2 	bl	8001ad0 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10b      	bne.n	800194a <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001932:	4808      	ldr	r0, [pc, #32]	; (8001954 <BSP_I2C1_Init+0x58>)
 8001934:	f000 f898 	bl	8001a68 <MX_I2C1_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800193e:	f06f 0307 	mvn.w	r3, #7
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	e001      	b.n	800194a <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800194a:	687b      	ldr	r3, [r7, #4]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20007154 	.word	0x20007154
 8001958:	40005400 	.word	0x40005400
 800195c:	20000128 	.word	0x20000128

08001960 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <BSP_I2C1_DeInit+0x48>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d014      	beq.n	800199c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <BSP_I2C1_DeInit+0x48>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	3b01      	subs	r3, #1
 8001978:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <BSP_I2C1_DeInit+0x48>)
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <BSP_I2C1_DeInit+0x48>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10b      	bne.n	800199c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001984:	4809      	ldr	r0, [pc, #36]	; (80019ac <BSP_I2C1_DeInit+0x4c>)
 8001986:	f000 f8ed 	bl	8001b64 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800198a:	4808      	ldr	r0, [pc, #32]	; (80019ac <BSP_I2C1_DeInit+0x4c>)
 800198c:	f011 face 	bl	8012f2c <HAL_I2C_DeInit>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001996:	f06f 0307 	mvn.w	r3, #7
 800199a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800199c:	687b      	ldr	r3, [r7, #4]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000128 	.word	0x20000128
 80019ac:	20007154 	.word	0x20007154

080019b0 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	80fb      	strh	r3, [r7, #6]
 80019bc:	4613      	mov	r3, r2
 80019be:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80019c4:	88bb      	ldrh	r3, [r7, #4]
 80019c6:	88f9      	ldrh	r1, [r7, #6]
 80019c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019cc:	9200      	str	r2, [sp, #0]
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	480b      	ldr	r0, [pc, #44]	; (8001a00 <BSP_I2C1_Send+0x50>)
 80019d2:	f011 faef 	bl	8012fb4 <HAL_I2C_Master_Transmit>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00c      	beq.n	80019f6 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80019dc:	4808      	ldr	r0, [pc, #32]	; (8001a00 <BSP_I2C1_Send+0x50>)
 80019de:	f011 fe1b 	bl	8013618 <HAL_I2C_GetError>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d003      	beq.n	80019f0 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80019e8:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	e002      	b.n	80019f6 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80019f0:	f06f 0303 	mvn.w	r3, #3
 80019f4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20007154 	.word	0x20007154

08001a04 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	80fb      	strh	r3, [r7, #6]
 8001a10:	4613      	mov	r3, r2
 8001a12:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001a18:	88bb      	ldrh	r3, [r7, #4]
 8001a1a:	88f9      	ldrh	r1, [r7, #6]
 8001a1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a20:	9200      	str	r2, [sp, #0]
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	480b      	ldr	r0, [pc, #44]	; (8001a54 <BSP_I2C1_Recv+0x50>)
 8001a26:	f011 fbc3 	bl	80131b0 <HAL_I2C_Master_Receive>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00c      	beq.n	8001a4a <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001a30:	4808      	ldr	r0, [pc, #32]	; (8001a54 <BSP_I2C1_Recv+0x50>)
 8001a32:	f011 fdf1 	bl	8013618 <HAL_I2C_GetError>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d003      	beq.n	8001a44 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001a3c:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	e002      	b.n	8001a4a <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001a44:	f06f 0303 	mvn.w	r3, #3
 8001a48:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20007154 	.word	0x20007154

08001a58 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001a5c:	f010 fd72 	bl	8012544 <HAL_GetTick>
 8001a60:	4603      	mov	r3, r0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <MX_I2C1_Init+0x60>)
 8001a78:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a13      	ldr	r2, [pc, #76]	; (8001acc <MX_I2C1_Init+0x64>)
 8001a7e:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a92:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f011 f8f9 	bl	8012ca4 <HAL_I2C_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40005400 	.word	0x40005400
 8001acc:	000186a0 	.word	0x000186a0

08001ad0 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <I2C1_MspInit+0x8c>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <I2C1_MspInit+0x8c>)
 8001ae2:	f043 0302 	orr.w	r3, r3, #2
 8001ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <I2C1_MspInit+0x8c>)
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001afa:	2312      	movs	r3, #18
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001b06:	2304      	movs	r3, #4
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4813      	ldr	r0, [pc, #76]	; (8001b60 <I2C1_MspInit+0x90>)
 8001b12:	f010 fe2d 	bl	8012770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b1c:	2312      	movs	r3, #18
 8001b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001b28:	2304      	movs	r3, #4
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	480b      	ldr	r0, [pc, #44]	; (8001b60 <I2C1_MspInit+0x90>)
 8001b34:	f010 fe1c 	bl	8012770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <I2C1_MspInit+0x8c>)
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	4a06      	ldr	r2, [pc, #24]	; (8001b5c <I2C1_MspInit+0x8c>)
 8001b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b46:	6413      	str	r3, [r2, #64]	; 0x40
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <I2C1_MspInit+0x8c>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001b54:	bf00      	nop
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020400 	.word	0x40020400

08001b64 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <I2C1_MspDeInit+0x30>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <I2C1_MspDeInit+0x30>)
 8001b72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b76:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b7c:	4806      	ldr	r0, [pc, #24]	; (8001b98 <I2C1_MspDeInit+0x34>)
 8001b7e:	f010 ff7b 	bl	8012a78 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b86:	4804      	ldr	r0, [pc, #16]	; (8001b98 <I2C1_MspDeInit+0x34>)
 8001b88:	f010 ff76 	bl	8012a78 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020400 	.word	0x40020400

08001b9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	e00a      	b.n	8001bc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bae:	f3af 8000 	nop.w
 8001bb2:	4601      	mov	r1, r0
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	60ba      	str	r2, [r7, #8]
 8001bba:	b2ca      	uxtb	r2, r1
 8001bbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbf0      	blt.n	8001bae <_read+0x12>
	}

return len;
 8001bcc:	687b      	ldr	r3, [r7, #4]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	e009      	b.n	8001bfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	60ba      	str	r2, [r7, #8]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fe1f 	bl	8001834 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dbf1      	blt.n	8001be8 <_write+0x12>
	}
	return len;
 8001c04:	687b      	ldr	r3, [r7, #4]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_close>:

int _close(int file)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
	return -1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c36:	605a      	str	r2, [r3, #4]
	return 0;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <_isatty>:

int _isatty(int file)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
	return 0;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f012 ff7a 	bl	8014ba0 <__errno>
 8001cac:	4603      	mov	r3, r0
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <_sbrk+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20018000 	.word	0x20018000
 8001cd8:	00000400 	.word	0x00000400
 8001cdc:	2000012c 	.word	0x2000012c
 8001ce0:	20007400 	.word	0x20007400

08001ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <SystemInit+0x20>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cee:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <SystemInit+0x20>)
 8001cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d0c:	480d      	ldr	r0, [pc, #52]	; (8001d44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d0e:	490e      	ldr	r1, [pc, #56]	; (8001d48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d10:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d14:	e002      	b.n	8001d1c <LoopCopyDataInit>

08001d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1a:	3304      	adds	r3, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d20:	d3f9      	bcc.n	8001d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d22:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d24:	4c0b      	ldr	r4, [pc, #44]	; (8001d54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d28:	e001      	b.n	8001d2e <LoopFillZerobss>

08001d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d2c:	3204      	adds	r2, #4

08001d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d30:	d3fb      	bcc.n	8001d2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d32:	f7ff ffd7 	bl	8001ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d36:	f012 ff39 	bl	8014bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3a:	f7ff fb48 	bl	80013ce <main>
  bx  lr    
 8001d3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d48:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8001d4c:	08015e80 	.word	0x08015e80
  ldr r2, =_sbss
 8001d50:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8001d54:	20007400 	.word	0x20007400

08001d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC_IRQHandler>
	...

08001d5c <VL53L3A2_Init>:
  * @brief Initialize X-NUCLEO-53L3A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L3A2_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
  int32_t status = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 8001d66:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <VL53L3A2_Init+0xe4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	4934      	ldr	r1, [pc, #208]	; (8001e40 <VL53L3A2_Init+0xe4>)
 8001d6e:	600a      	str	r2, [r1, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d154      	bne.n	8001e1e <VL53L3A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 8001d74:	f000 f8d4 	bl	8001f20 <_I2cFailRecover>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	607b      	str	r3, [r7, #4]
    status |= VL53L3A2_I2C_Init();
 8001d80:	f7ff fdbc 	bl	80018fc <BSP_I2C1_Init>
 8001d84:	4602      	mov	r2, r0
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d147      	bne.n	8001e22 <VL53L3A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 8001d92:	463a      	mov	r2, r7
 8001d94:	2302      	movs	r3, #2
 8001d96:	2100      	movs	r1, #0
 8001d98:	2086      	movs	r0, #134	; 0x86
 8001d9a:	f000 f963 	bl	8002064 <_ExpanderRd>
 8001d9e:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d13f      	bne.n	8001e26 <VL53L3A2_Init+0xca>
 8001da6:	783b      	ldrb	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d13c      	bne.n	8001e26 <VL53L3A2_Init+0xca>
 8001dac:	787b      	ldrb	r3, [r7, #1]
 8001dae:	2b16      	cmp	r3, #22
 8001db0:	d139      	bne.n	8001e26 <VL53L3A2_Init+0xca>
	  {
      VL53L3A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 8001db2:	463a      	mov	r2, r7
 8001db4:	2302      	movs	r3, #2
 8001db6:	2100      	movs	r1, #0
 8001db8:	2084      	movs	r0, #132	; 0x84
 8001dba:	f000 f953 	bl	8002064 <_ExpanderRd>
 8001dbe:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d131      	bne.n	8001e2a <VL53L3A2_Init+0xce>
 8001dc6:	783b      	ldrb	r3, [r7, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d12e      	bne.n	8001e2a <VL53L3A2_Init+0xce>
 8001dcc:	787b      	ldrb	r3, [r7, #1]
 8001dce:	2b16      	cmp	r3, #22
 8001dd0:	d12b      	bne.n	8001e2a <VL53L3A2_Init+0xce>
	  {
		  VL53L3A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <VL53L3A2_Init+0xe8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 8001dd8:	23ff      	movs	r3, #255	; 0xff
 8001dda:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 8001ddc:	23ff      	movs	r3, #255	; 0xff
 8001dde:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 8001de0:	463a      	mov	r2, r7
 8001de2:	2302      	movs	r3, #2
 8001de4:	2114      	movs	r1, #20
 8001de6:	2086      	movs	r0, #134	; 0x86
 8001de8:	f000 f96e 	bl	80020c8 <_ExpanderWR>
 8001dec:	6078      	str	r0, [r7, #4]

	  if (status)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d11c      	bne.n	8001e2e <VL53L3A2_Init+0xd2>
	  {
		VL53L3A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 8001df4:	23ff      	movs	r3, #255	; 0xff
 8001df6:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 8001df8:	23bf      	movs	r3, #191	; 0xbf
 8001dfa:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 8001dfc:	463a      	mov	r2, r7
 8001dfe:	2302      	movs	r3, #2
 8001e00:	2114      	movs	r1, #20
 8001e02:	2084      	movs	r0, #132	; 0x84
 8001e04:	f000 f960 	bl	80020c8 <_ExpanderWR>
 8001e08:	6078      	str	r0, [r7, #4]

	  if (status)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d110      	bne.n	8001e32 <VL53L3A2_Init+0xd6>
		VL53L3A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <VL53L3A2_Init+0xe8>)
 8001e12:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8001e16:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 8001e18:	f000 f904 	bl	8002024 <_ExpandersSetAllIO>
 8001e1c:	6078      	str	r0, [r7, #4]
	  {
		VL53L3A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 8001e1e:	bf00      	nop
 8001e20:	e008      	b.n	8001e34 <VL53L3A2_Init+0xd8>
      goto done_err;
 8001e22:	bf00      	nop
 8001e24:	e006      	b.n	8001e34 <VL53L3A2_Init+0xd8>
      goto done_err;
 8001e26:	bf00      	nop
 8001e28:	e004      	b.n	8001e34 <VL53L3A2_Init+0xd8>
		  goto done_err;
 8001e2a:	bf00      	nop
 8001e2c:	e002      	b.n	8001e34 <VL53L3A2_Init+0xd8>
		goto done_err;
 8001e2e:	bf00      	nop
 8001e30:	e000      	b.n	8001e34 <VL53L3A2_Init+0xd8>
		goto done_err;
 8001e32:	bf00      	nop
  return status;
 8001e34:	687b      	ldr	r3, [r7, #4]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000130 	.word	0x20000130
 8001e44:	20000134 	.word	0x20000134

08001e48 <VL53L3A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L3A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L3A2_ResetId(uint8_t DevNo, uint8_t state)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	460a      	mov	r2, r1
 8001e52:	71fb      	strb	r3, [r7, #7]
 8001e54:	4613      	mov	r3, r2
 8001e56:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d037      	beq.n	8001ece <VL53L3A2_ResetId+0x86>
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	dc4e      	bgt.n	8001f00 <VL53L3A2_ResetId+0xb8>
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d01a      	beq.n	8001e9c <VL53L3A2_ResetId+0x54>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d14a      	bne.n	8001f00 <VL53L3A2_ResetId+0xb8>
  {
    case VL53L3A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 8001e6a:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <VL53L3A2_ResetId+0xcc>)
 8001e6c:	78db      	ldrb	r3, [r3, #3]
 8001e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <VL53L3A2_ResetId+0xcc>)
 8001e76:	70da      	strb	r2, [r3, #3]

      if (state)
 8001e78:	79bb      	ldrb	r3, [r7, #6]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d006      	beq.n	8001e8c <VL53L3A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 8001e7e:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <VL53L3A2_ResetId+0xcc>)
 8001e80:	78db      	ldrb	r3, [r3, #3]
 8001e82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <VL53L3A2_ResetId+0xcc>)
 8001e8a:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	4a22      	ldr	r2, [pc, #136]	; (8001f18 <VL53L3A2_ResetId+0xd0>)
 8001e90:	2113      	movs	r1, #19
 8001e92:	2084      	movs	r0, #132	; 0x84
 8001e94:	f000 f918 	bl	80020c8 <_ExpanderWR>
 8001e98:	60f8      	str	r0, [r7, #12]
      break;
 8001e9a:	e035      	b.n	8001f08 <VL53L3A2_ResetId+0xc0>

    case VL53L3A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <VL53L3A2_ResetId+0xcc>)
 8001e9e:	785b      	ldrb	r3, [r3, #1]
 8001ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <VL53L3A2_ResetId+0xcc>)
 8001ea8:	705a      	strb	r2, [r3, #1]

      if (state)
 8001eaa:	79bb      	ldrb	r3, [r7, #6]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <VL53L3A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 8001eb0:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <VL53L3A2_ResetId+0xcc>)
 8001eb2:	785b      	ldrb	r3, [r3, #1]
 8001eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <VL53L3A2_ResetId+0xcc>)
 8001ebc:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	4a16      	ldr	r2, [pc, #88]	; (8001f1c <VL53L3A2_ResetId+0xd4>)
 8001ec2:	2113      	movs	r1, #19
 8001ec4:	2086      	movs	r0, #134	; 0x86
 8001ec6:	f000 f8ff 	bl	80020c8 <_ExpanderWR>
 8001eca:	60f8      	str	r0, [r7, #12]
      break;
 8001ecc:	e01c      	b.n	8001f08 <VL53L3A2_ResetId+0xc0>

    case VL53L3A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <VL53L3A2_ResetId+0xcc>)
 8001ed0:	785b      	ldrb	r3, [r3, #1]
 8001ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <VL53L3A2_ResetId+0xcc>)
 8001eda:	705a      	strb	r2, [r3, #1]

      if (state)
 8001edc:	79bb      	ldrb	r3, [r7, #6]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d006      	beq.n	8001ef0 <VL53L3A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <VL53L3A2_ResetId+0xcc>)
 8001ee4:	785b      	ldrb	r3, [r3, #1]
 8001ee6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <VL53L3A2_ResetId+0xcc>)
 8001eee:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <VL53L3A2_ResetId+0xd4>)
 8001ef4:	2113      	movs	r1, #19
 8001ef6:	2086      	movs	r0, #134	; 0x86
 8001ef8:	f000 f8e6 	bl	80020c8 <_ExpanderWR>
 8001efc:	60f8      	str	r0, [r7, #12]
      break;
 8001efe:	e003      	b.n	8001f08 <VL53L3A2_ResetId+0xc0>

    default:
      VL53L3A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
 8001f04:	60fb      	str	r3, [r7, #12]
      goto done;
 8001f06:	e000      	b.n	8001f0a <VL53L3A2_ResetId+0xc2>
  if (status)
  {
    VL53L3A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 8001f08:	bf00      	nop
  return status;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000134 	.word	0x20000134
 8001f18:	20000137 	.word	0x20000137
 8001f1c:	20000135 	.word	0x20000135

08001f20 <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	77bb      	strb	r3, [r7, #30]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 8001f2a:	4b3b      	ldr	r3, [pc, #236]	; (8002018 <_I2cFailRecover+0xf8>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d101      	bne.n	8001f36 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e06b      	b.n	800200e <_I2cFailRecover+0xee>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	4b38      	ldr	r3, [pc, #224]	; (800201c <_I2cFailRecover+0xfc>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a37      	ldr	r2, [pc, #220]	; (800201c <_I2cFailRecover+0xfc>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b35      	ldr	r3, [pc, #212]	; (800201c <_I2cFailRecover+0xfc>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = VL53L3A2_I2C_SCL_GPIO_PIN;
 8001f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f58:	2311      	movs	r3, #17
 8001f5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L3A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001f60:	f107 0308 	add.w	r3, r7, #8
 8001f64:	4619      	mov	r1, r3
 8001f66:	482e      	ldr	r0, [pc, #184]	; (8002020 <_I2cFailRecover+0x100>)
 8001f68:	f010 fc02 	bl	8012770 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L3A2_I2C_SDA_GPIO_PIN;
 8001f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f72:	2311      	movs	r3, #17
 8001f74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f76:	2301      	movs	r3, #1
 8001f78:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L3A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001f7a:	f107 0308 	add.w	r3, r7, #8
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4827      	ldr	r0, [pc, #156]	; (8002020 <_I2cFailRecover+0x100>)
 8001f82:	f010 fbf5 	bl	8012770 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8001f86:	2201      	movs	r2, #1
 8001f88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f8c:	4824      	ldr	r0, [pc, #144]	; (8002020 <_I2cFailRecover+0x100>)
 8001f8e:	f010 fe6f 	bl	8012c70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L3A2_I2C_SDA_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f98:	4821      	ldr	r0, [pc, #132]	; (8002020 <_I2cFailRecover+0x100>)
 8001f9a:	f010 fe69 	bl	8012c70 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	77fb      	strb	r3, [r7, #31]
 8001fa2:	e014      	b.n	8001fce <_I2cFailRecover+0xae>
    {
      HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001faa:	481d      	ldr	r0, [pc, #116]	; (8002020 <_I2cFailRecover+0x100>)
 8001fac:	f010 fe60 	bl	8012c70 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	f010 fad3 	bl	801255c <HAL_Delay>
      HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fbc:	4818      	ldr	r0, [pc, #96]	; (8002020 <_I2cFailRecover+0x100>)
 8001fbe:	f010 fe57 	bl	8012c70 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f010 faca 	bl	801255c <HAL_Delay>
    for (i = 0; i < 10U; i++)
 8001fc8:	7ffb      	ldrb	r3, [r7, #31]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	77fb      	strb	r3, [r7, #31]
 8001fce:	7ffb      	ldrb	r3, [r7, #31]
 8001fd0:	2b09      	cmp	r3, #9
 8001fd2:	d9e7      	bls.n	8001fa4 <_I2cFailRecover+0x84>
    }
    retry_cnt++;
 8001fd4:	7fbb      	ldrb	r3, [r7, #30]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	77bb      	strb	r3, [r7, #30]
  } while ((HAL_GPIO_ReadPin(VL53L3A2_I2C_SDA_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 8001fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fde:	4810      	ldr	r0, [pc, #64]	; (8002020 <_I2cFailRecover+0x100>)
 8001fe0:	f010 fe2e 	bl	8012c40 <HAL_GPIO_ReadPin>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d102      	bne.n	8001ff0 <_I2cFailRecover+0xd0>
 8001fea:	7fbb      	ldrb	r3, [r7, #30]
 8001fec:	2b06      	cmp	r3, #6
 8001fee:	d9d6      	bls.n	8001f9e <_I2cFailRecover+0x7e>

  if (HAL_GPIO_ReadPin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 8001ff0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ff4:	480a      	ldr	r0, [pc, #40]	; (8002020 <_I2cFailRecover+0x100>)
 8001ff6:	f010 fe23 	bl	8012c40 <HAL_GPIO_ReadPin>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d102      	bne.n	8002006 <_I2cFailRecover+0xe6>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8002000:	f06f 0304 	mvn.w	r3, #4
 8002004:	e003      	b.n	800200e <_I2cFailRecover+0xee>
  }

  is_already_init = 1U;
 8002006:	4b04      	ldr	r3, [pc, #16]	; (8002018 <_I2cFailRecover+0xf8>)
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3720      	adds	r7, #32
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000138 	.word	0x20000138
 800201c:	40023800 	.word	0x40023800
 8002020:	40020400 	.word	0x40020400

08002024 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 800202a:	2302      	movs	r3, #2
 800202c:	4a0b      	ldr	r2, [pc, #44]	; (800205c <_ExpandersSetAllIO+0x38>)
 800202e:	2112      	movs	r1, #18
 8002030:	2086      	movs	r0, #134	; 0x86
 8002032:	f000 f849 	bl	80020c8 <_ExpanderWR>
 8002036:	6078      	str	r0, [r7, #4]

  if (status)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d107      	bne.n	800204e <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 800203e:	2302      	movs	r3, #2
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <_ExpandersSetAllIO+0x3c>)
 8002042:	2112      	movs	r1, #18
 8002044:	2084      	movs	r0, #132	; 0x84
 8002046:	f000 f83f 	bl	80020c8 <_ExpanderWR>
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	e000      	b.n	8002050 <_ExpandersSetAllIO+0x2c>
    goto done_err;
 800204e:	bf00      	nop

done_err:
  return status;
 8002050:	687b      	ldr	r3, [r7, #4]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000134 	.word	0x20000134
 8002060:	20000136 	.word	0x20000136

08002064 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af02      	add	r7, sp, #8
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
 8002070:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	74fb      	strb	r3, [r7, #19]
  VL53L3A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L3A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	b299      	uxth	r1, r3
 800207c:	f107 0213 	add.w	r2, r7, #19
 8002080:	2364      	movs	r3, #100	; 0x64
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2301      	movs	r3, #1
 8002086:	480f      	ldr	r0, [pc, #60]	; (80020c4 <_ExpanderRd+0x60>)
 8002088:	f010 ff94 	bl	8012fb4 <HAL_I2C_Master_Transmit>
 800208c:	4603      	mov	r3, r0
 800208e:	617b      	str	r3, [r7, #20]

    if (status)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d110      	bne.n	80020b8 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L3A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	b299      	uxth	r1, r3
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	b29a      	uxth	r2, r3
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2064      	movs	r0, #100	; 0x64
 80020a2:	fb00 f303 	mul.w	r3, r0, r3
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	4613      	mov	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	4805      	ldr	r0, [pc, #20]	; (80020c4 <_ExpanderRd+0x60>)
 80020ae:	f011 f87f 	bl	80131b0 <HAL_I2C_Master_Receive>
 80020b2:	4603      	mov	r3, r0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	e000      	b.n	80020ba <_ExpanderRd+0x56>
      break;
 80020b8:	bf00      	nop
  } while (0);

  VL53L3A2_PutI2cBus();

  return status;
 80020ba:	697b      	ldr	r3, [r7, #20]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20007154 	.word	0x20007154

080020c8 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08c      	sub	sp, #48	; 0x30
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	3301      	adds	r3, #1
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f012 fd84 	bl	8014bf4 <memcpy>

  VL53L3A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L3A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	b299      	uxth	r1, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f107 0214 	add.w	r2, r7, #20
 80020fc:	2064      	movs	r0, #100	; 0x64
 80020fe:	9000      	str	r0, [sp, #0]
 8002100:	4804      	ldr	r0, [pc, #16]	; (8002114 <_ExpanderWR+0x4c>)
 8002102:	f010 ff57 	bl	8012fb4 <HAL_I2C_Master_Transmit>
 8002106:	4603      	mov	r3, r0
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L3A2_PutI2cBus();

  return status;
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800210c:	4618      	mov	r0, r3
 800210e:	3728      	adds	r7, #40	; 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20007154 	.word	0x20007154

08002118 <VL53L3A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d903      	bls.n	800212e <VL53L3A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002126:	f06f 0301 	mvn.w	r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	e014      	b.n	8002158 <VL53L3A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L3A2_Init() != 0)
 800212e:	f7ff fe15 	bl	8001d5c <VL53L3A2_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <VL53L3A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8002138:	f06f 0303 	mvn.w	r3, #3
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	e00b      	b.n	8002158 <VL53L3A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L3A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 8002140:	2101      	movs	r1, #1
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f8fc 	bl	8002340 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L3A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 8002148:	2100      	movs	r1, #0
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f8f8 	bl	8002340 <VL53L3A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L3CX_Probe(Instance);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f935 	bl	80023c0 <VL53L3CX_Probe>
 8002156:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002158:	68fb      	ldr	r3, [r7, #12]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <VL53L3A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d903      	bls.n	800217c <VL53L3A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002174:	f06f 0301 	mvn.w	r3, #1
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	e012      	b.n	80021a2 <VL53L3A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->ReadID(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <VL53L3A2_RANGING_SENSOR_ReadID+0x48>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	490b      	ldr	r1, [pc, #44]	; (80021b0 <VL53L3A2_RANGING_SENSOR_ReadID+0x4c>)
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800218a:	6839      	ldr	r1, [r7, #0]
 800218c:	4610      	mov	r0, r2
 800218e:	4798      	blx	r3
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	da03      	bge.n	800219e <VL53L3A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002196:	f06f 0304 	mvn.w	r3, #4
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	e001      	b.n	80021a2 <VL53L3A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80021a2:	68fb      	ldr	r3, [r7, #12]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000148 	.word	0x20000148
 80021b0:	2000013c 	.word	0x2000013c

080021b4 <VL53L3A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d903      	bls.n	80021cc <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80021c4:	f06f 0301 	mvn.w	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	e012      	b.n	80021f2 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x48>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	490b      	ldr	r1, [pc, #44]	; (8002200 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80021da:	6839      	ldr	r1, [r7, #0]
 80021dc:	4610      	mov	r0, r2
 80021de:	4798      	blx	r3
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	da03      	bge.n	80021ee <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80021e6:	f06f 0304 	mvn.w	r3, #4
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e001      	b.n	80021f2 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000148 	.word	0x20000148
 8002200:	2000013c 	.word	0x2000013c

08002204 <VL53L3A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d903      	bls.n	800221c <VL53L3A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002214:	f06f 0301 	mvn.w	r3, #1
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	e012      	b.n	8002242 <VL53L3A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->GetDistance(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <VL53L3A2_RANGING_SENSOR_GetDistance+0x48>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	490b      	ldr	r1, [pc, #44]	; (8002250 <VL53L3A2_RANGING_SENSOR_GetDistance+0x4c>)
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800222a:	6839      	ldr	r1, [r7, #0]
 800222c:	4610      	mov	r0, r2
 800222e:	4798      	blx	r3
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	da03      	bge.n	800223e <VL53L3A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002236:	f06f 0304 	mvn.w	r3, #4
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	e001      	b.n	8002242 <VL53L3A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002242:	68fb      	ldr	r3, [r7, #12]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000148 	.word	0x20000148
 8002250:	2000013c 	.word	0x2000013c

08002254 <VL53L3A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d903      	bls.n	800226c <VL53L3A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002264:	f06f 0301 	mvn.w	r3, #1
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	e012      	b.n	8002292 <VL53L3A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->Start(VL53L3A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <VL53L3A2_RANGING_SENSOR_Start+0x48>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	490b      	ldr	r1, [pc, #44]	; (80022a0 <VL53L3A2_RANGING_SENSOR_Start+0x4c>)
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800227a:	6839      	ldr	r1, [r7, #0]
 800227c:	4610      	mov	r0, r2
 800227e:	4798      	blx	r3
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	da03      	bge.n	800228e <VL53L3A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002286:	f06f 0304 	mvn.w	r3, #4
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	e001      	b.n	8002292 <VL53L3A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002292:	68fb      	ldr	r3, [r7, #12]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000148 	.word	0x20000148
 80022a0:	2000013c 	.word	0x2000013c

080022a4 <VL53L3A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d903      	bls.n	80022ba <VL53L3A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80022b2:	f06f 0301 	mvn.w	r3, #1
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	e011      	b.n	80022de <VL53L3A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->Stop(VL53L3A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <VL53L3A2_RANGING_SENSOR_Stop+0x44>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	490a      	ldr	r1, [pc, #40]	; (80022ec <VL53L3A2_RANGING_SENSOR_Stop+0x48>)
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80022c8:	4610      	mov	r0, r2
 80022ca:	4798      	blx	r3
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	da03      	bge.n	80022da <VL53L3A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80022d2:	f06f 0304 	mvn.w	r3, #4
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e001      	b.n	80022de <VL53L3A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80022de:	68fb      	ldr	r3, [r7, #12]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000148 	.word	0x20000148
 80022ec:	2000013c 	.word	0x2000013c

080022f0 <VL53L3A2_RANGING_SENSOR_SetAddress>:
  * @param Instance    Ranging sensor instance.
  * @param Address     New I2C address.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_SetAddress(uint32_t Instance, uint32_t Address)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d903      	bls.n	8002308 <VL53L3A2_RANGING_SENSOR_SetAddress+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002300:	f06f 0301 	mvn.w	r3, #1
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	e012      	b.n	800232e <VL53L3A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->SetAddress(VL53L3A2_RANGING_SENSOR_CompObj[Instance], Address) < 0)
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <VL53L3A2_RANGING_SENSOR_SetAddress+0x48>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230e:	490b      	ldr	r1, [pc, #44]	; (800233c <VL53L3A2_RANGING_SENSOR_SetAddress+0x4c>)
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002316:	6839      	ldr	r1, [r7, #0]
 8002318:	4610      	mov	r0, r2
 800231a:	4798      	blx	r3
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	da03      	bge.n	800232a <VL53L3A2_RANGING_SENSOR_SetAddress+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002322:	f06f 0304 	mvn.w	r3, #4
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	e001      	b.n	800232e <VL53L3A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800232e:	68fb      	ldr	r3, [r7, #12]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000148 	.word	0x20000148
 800233c:	2000013c 	.word	0x2000013c

08002340 <VL53L3A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d903      	bls.n	8002358 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002350:	f06f 0301 	mvn.w	r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	e02e      	b.n	80023b6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d112      	bne.n	8002384 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L3A2_ResetId((uint8_t)Instance, 1) < 0)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2101      	movs	r1, #1
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fd6f 	bl	8001e48 <VL53L3A2_ResetId>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	da03      	bge.n	8002378 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002370:	f06f 0303 	mvn.w	r3, #3
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	e01e      	b.n	80023b6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8002378:	2002      	movs	r0, #2
 800237a:	f010 f8ef 	bl	801255c <HAL_Delay>
      ret = BSP_ERROR_NONE;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	e018      	b.n	80023b6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d112      	bne.n	80023b0 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L3A2_ResetId((uint8_t)Instance, 0) < 0)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fd59 	bl	8001e48 <VL53L3A2_ResetId>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	da03      	bge.n	80023a4 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800239c:	f06f 0303 	mvn.w	r3, #3
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	e008      	b.n	80023b6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 80023a4:	2002      	movs	r0, #2
 80023a6:	f010 f8d9 	bl	801255c <HAL_Delay>
      ret = BSP_ERROR_NONE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	e002      	b.n	80023b6 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80023b0:	f06f 0301 	mvn.w	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80023b6:	68fb      	ldr	r3, [r7, #12]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <VL53L3CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L3CX_Probe(uint32_t Instance)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  VL53L3CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L3CX_Object_t   VL53L3CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L3CX_ADDRESS;
 80023c8:	2352      	movs	r3, #82	; 0x52
 80023ca:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L3A2_I2C_Init;
 80023cc:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <VL53L3CX_Probe+0xf0>)
 80023ce:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L3A2_I2C_DeInit;
 80023d0:	4b38      	ldr	r3, [pc, #224]	; (80024b4 <VL53L3CX_Probe+0xf4>)
 80023d2:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L3A2_I2C_WriteReg;
 80023d4:	4b38      	ldr	r3, [pc, #224]	; (80024b8 <VL53L3CX_Probe+0xf8>)
 80023d6:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L3A2_I2C_ReadReg;
 80023d8:	4b38      	ldr	r3, [pc, #224]	; (80024bc <VL53L3CX_Probe+0xfc>)
 80023da:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L3A2_GetTick;
 80023dc:	4b38      	ldr	r3, [pc, #224]	; (80024c0 <VL53L3CX_Probe+0x100>)
 80023de:	623b      	str	r3, [r7, #32]

  if (VL53L3CX_RegisterBusIO(&(VL53L3CXObj[Instance]), &IOCtx) != VL53L3CX_OK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f242 42f0 	movw	r2, #9456	; 0x24f0
 80023e6:	fb02 f303 	mul.w	r3, r2, r3
 80023ea:	4a36      	ldr	r2, [pc, #216]	; (80024c4 <VL53L3CX_Probe+0x104>)
 80023ec:	4413      	add	r3, r2
 80023ee:	f107 020c 	add.w	r2, r7, #12
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f00f fbf2 	bl	8011bde <VL53L3CX_RegisterBusIO>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <VL53L3CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002400:	f06f 0304 	mvn.w	r3, #4
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
 8002406:	e04d      	b.n	80024a4 <VL53L3CX_Probe+0xe4>
  }
  else if (VL53L3CX_ReadID(&(VL53L3CXObj[Instance]), &id) != VL53L3CX_OK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f242 42f0 	movw	r2, #9456	; 0x24f0
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	4a2c      	ldr	r2, [pc, #176]	; (80024c4 <VL53L3CX_Probe+0x104>)
 8002414:	4413      	add	r3, r2
 8002416:	f107 0208 	add.w	r2, r7, #8
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f00f fc90 	bl	8011d42 <VL53L3CX_ReadID>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <VL53L3CX_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002428:	f06f 0304 	mvn.w	r3, #4
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
 800242e:	e039      	b.n	80024a4 <VL53L3CX_Probe+0xe4>
  }
  else
  {
    if (id != VL53L3CX_ID)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f64e 22aa 	movw	r2, #60074	; 0xeaaa
 8002436:	4293      	cmp	r3, r2
 8002438:	d003      	beq.n	8002442 <VL53L3CX_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800243a:	f06f 0306 	mvn.w	r3, #6
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
 8002440:	e030      	b.n	80024a4 <VL53L3CX_Probe+0xe4>
    }
    else
    {
      VL53L3A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L3CX_RANGING_SENSOR_Driver;
 8002442:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <VL53L3CX_Probe+0x108>)
 8002444:	4a21      	ldr	r2, [pc, #132]	; (80024cc <VL53L3CX_Probe+0x10c>)
 8002446:	601a      	str	r2, [r3, #0]
      VL53L3A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L3CXObj[Instance]);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f242 42f0 	movw	r2, #9456	; 0x24f0
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <VL53L3CX_Probe+0x104>)
 8002454:	441a      	add	r2, r3
 8002456:	491e      	ldr	r1, [pc, #120]	; (80024d0 <VL53L3CX_Probe+0x110>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L3A2_RANGING_SENSOR_Drv->Init(VL53L3A2_RANGING_SENSOR_CompObj[Instance]) != VL53L3CX_OK)
 800245e:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <VL53L3CX_Probe+0x108>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	491a      	ldr	r1, [pc, #104]	; (80024d0 <VL53L3CX_Probe+0x110>)
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800246c:	4610      	mov	r0, r2
 800246e:	4798      	blx	r3
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <VL53L3CX_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002476:	f06f 0304 	mvn.w	r3, #4
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
 800247c:	e012      	b.n	80024a4 <VL53L3CX_Probe+0xe4>
      }
      else if (VL53L3A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L3A2_RANGING_SENSOR_CompObj[Instance], &VL53L3A2_RANGING_SENSOR_Cap) != VL53L3CX_OK)
 800247e:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <VL53L3CX_Probe+0x108>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4912      	ldr	r1, [pc, #72]	; (80024d0 <VL53L3CX_Probe+0x110>)
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800248c:	4911      	ldr	r1, [pc, #68]	; (80024d4 <VL53L3CX_Probe+0x114>)
 800248e:	4610      	mov	r0, r2
 8002490:	4798      	blx	r3
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <VL53L3CX_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002498:	f06f 0304 	mvn.w	r3, #4
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
 800249e:	e001      	b.n	80024a4 <VL53L3CX_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3728      	adds	r7, #40	; 0x28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	080018fd 	.word	0x080018fd
 80024b4:	08001961 	.word	0x08001961
 80024b8:	080019b1 	.word	0x080019b1
 80024bc:	08001a05 	.word	0x08001a05
 80024c0:	08001a59 	.word	0x08001a59
 80024c4:	20000160 	.word	0x20000160
 80024c8:	20000148 	.word	0x20000148
 80024cc:	20000048 	.word	0x20000048
 80024d0:	2000013c 	.word	0x2000013c
 80024d4:	2000014c 	.word	0x2000014c

080024d8 <VL53LX_SetDeviceAddress>:
}



VL53LX_Error VL53LX_SetDeviceAddress(VL53LX_DEV Dev, uint8_t DeviceAddress)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3318      	adds	r3, #24
 80024ec:	613b      	str	r3, [r7, #16]
	VL53LX_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80024f4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53LX_WrByte(Dev, VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	085b      	lsrs	r3, r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	2101      	movs	r1, #1
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f00f f98b 	bl	801181c <VL53LX_WrByte>
 8002506:	4603      	mov	r3, r0
 8002508:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	085b      	lsrs	r3, r3, #1
 800250e:	b2db      	uxtb	r3, r3
 8002510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002514:	b2da      	uxtb	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800251a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <VL53LX_DataInit>:


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b086      	sub	sp, #24
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800252e:	2300      	movs	r3, #0
 8002530:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 8002532:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d105      	bne.n	8002546 <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 800253a:	2101      	movs	r1, #1
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f001 fcba 	bl	8003eb6 <VL53LX_data_init>
 8002542:	4603      	mov	r3, r0
 8002544:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 8002546:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d107      	bne.n	800255e <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 800254e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002552:	2102      	movs	r1, #2
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f887 	bl	8002668 <SetPresetModeL3CX>
 800255a:	4603      	mov	r3, r0
 800255c:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 800255e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8002566:	f248 2135 	movw	r1, #33333	; 0x8235
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f980 	bl	8002870 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8002570:	4603      	mov	r3, r0
 8002572:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 8002574:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10a      	bne.n	8002592 <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3318      	adds	r3, #24
 8002580:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002588:	220c      	movs	r2, #12
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f012 fb3f 	bl	8014c10 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 8002592:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d105      	bne.n	80025a6 <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 800259a:	2102      	movs	r1, #2
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f003 fdb0 	bl	8006102 <VL53LX_set_dmax_mode>
 80025a2:	4603      	mov	r3, r0
 80025a4:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 80025a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d105      	bne.n	80025ba <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 80025ae:	2100      	movs	r1, #0
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 ff41 	bl	8003438 <VL53LX_SmudgeCorrectionEnable>
 80025b6:	4603      	mov	r3, r0
 80025b8:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80025ba:	2320      	movs	r3, #32
 80025bc:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	76da      	strb	r2, [r3, #27]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80025ca:	3320      	adds	r3, #32
 80025cc:	2202      	movs	r2, #2
 80025ce:	701a      	strb	r2, [r3, #0]
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 80025d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 80025e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f00e fd5c 	bl	80110aa <VL53LX_poll_for_boot_completion>
 80025f2:	4603      	mov	r3, r0
 80025f4:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 80025f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	6039      	str	r1, [r7, #0]
 800260e:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002610:	2300      	movs	r3, #0
 8002612:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 8002614:	4a13      	ldr	r2, [pc, #76]	; (8002664 <ComputeDevicePresetMode+0x60>)
 8002616:	f107 0308 	add.w	r3, r7, #8
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	4611      	mov	r1, r2
 800261e:	8019      	strh	r1, [r3, #0]
 8002620:	3302      	adds	r3, #2
 8002622:	0c12      	lsrs	r2, r2, #16
 8002624:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d002      	beq.n	8002632 <ComputeDevicePresetMode+0x2e>
 800262c:	2b02      	cmp	r3, #2
 800262e:	d003      	beq.n	8002638 <ComputeDevicePresetMode+0x34>
 8002630:	e005      	b.n	800263e <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
		break;
 8002636:	e004      	b.n	8002642 <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
		break;
 800263c:	e001      	b.n	8002642 <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 800263e:	2302      	movs	r3, #2
 8002640:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	f107 0210 	add.w	r2, r7, #16
 8002648:	4413      	add	r3, r2
 800264a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	701a      	strb	r2, [r3, #0]

	return Status;
 8002652:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	08015db4 	.word	0x08015db4

08002668 <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8002668:	b5b0      	push	{r4, r5, r7, lr}
 800266a:	b08e      	sub	sp, #56	; 0x38
 800266c:	af04      	add	r7, sp, #16
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	460b      	mov	r3, r1
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002676:	2300      	movs	r3, #0
 8002678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800268c:	2320      	movs	r3, #32
 800268e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 8002692:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8002696:	7afb      	ldrb	r3, [r7, #11]
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ffb2 	bl	8002604 <ComputeDevicePresetMode>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 80026a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d112      	bne.n	80026d4 <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 80026ae:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80026b2:	f107 001c 	add.w	r0, r7, #28
 80026b6:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	9301      	str	r3, [sp, #4]
 80026c0:	f107 0318 	add.w	r3, r7, #24
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	4603      	mov	r3, r0
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f002 f859 	bl	8004780 <VL53LX_get_preset_mode_timing_cfg>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 80026d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d112      	bne.n	8002702 <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 80026dc:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80026e0:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 80026e2:	69fd      	ldr	r5, [r7, #28]
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	9102      	str	r1, [sp, #8]
 80026ec:	9201      	str	r2, [sp, #4]
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	462b      	mov	r3, r5
 80026f2:	4622      	mov	r2, r4
 80026f4:	4601      	mov	r1, r0
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f002 f8a3 	bl	8004842 <VL53LX_set_preset_mode>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8002702:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002706:	2b00      	cmp	r3, #0
 8002708:	d103      	bne.n	8002712 <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002710:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002712:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002716:	4618      	mov	r0, r3
 8002718:	3728      	adds	r7, #40	; 0x28
 800271a:	46bd      	mov	sp, r7
 800271c:	bdb0      	pop	{r4, r5, r7, pc}

0800271e <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 800271e:	b480      	push	{r7}
 8002720:	b085      	sub	sp, #20
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3318      	adds	r3, #24
 800272e:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f893 3393 	ldrb.w	r3, [r3, #915]	; 0x393
 8002736:	2baa      	cmp	r3, #170	; 0xaa
 8002738:	d106      	bne.n	8002748 <IsL4+0x2a>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f893 3392 	ldrb.w	r3, [r3, #914]	; 0x392
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8002740:	2beb      	cmp	r3, #235	; 0xeb
 8002742:	d101      	bne.n	8002748 <IsL4+0x2a>
		devL4 = 1;
 8002744:	2301      	movs	r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
	return devL4;
 8002748:	68fb      	ldr	r3, [r7, #12]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <CheckValidRectRoi>:

static VL53LX_Error CheckValidRectRoi(VL53LX_UserRoi_t ROI)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8002762:	793b      	ldrb	r3, [r7, #4]
 8002764:	2b0f      	cmp	r3, #15
 8002766:	d808      	bhi.n	800277a <CheckValidRectRoi+0x24>
 8002768:	797b      	ldrb	r3, [r7, #5]
 800276a:	2b0f      	cmp	r3, #15
 800276c:	d805      	bhi.n	800277a <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 800276e:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8002770:	2b0f      	cmp	r3, #15
 8002772:	d802      	bhi.n	800277a <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	2b0f      	cmp	r3, #15
 8002778:	d901      	bls.n	800277e <CheckValidRectRoi+0x28>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 800277a:	23fc      	movs	r3, #252	; 0xfc
 800277c:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 800277e:	793a      	ldrb	r2, [r7, #4]
 8002780:	79bb      	ldrb	r3, [r7, #6]
 8002782:	429a      	cmp	r2, r3
 8002784:	d803      	bhi.n	800278e <CheckValidRectRoi+0x38>
 8002786:	797a      	ldrb	r2, [r7, #5]
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	429a      	cmp	r2, r3
 800278c:	d201      	bcs.n	8002792 <CheckValidRectRoi+0x3c>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 800278e:	23fc      	movs	r3, #252	; 0xfc
 8002790:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002792:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <VL53LX_SetDistanceMode>:


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b088      	sub	sp, #32
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d008      	beq.n	80027d6 <VL53LX_SetDistanceMode+0x34>
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d005      	beq.n	80027d6 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d002      	beq.n	80027d6 <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 80027d0:	f06f 0303 	mvn.w	r3, #3
 80027d4:	e048      	b.n	8002868 <VL53LX_SetDistanceMode+0xc6>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ffa1 	bl	800271e <IsL4>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <VL53LX_SetDistanceMode+0x4c>
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d102      	bne.n	80027ee <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 80027e8:	f06f 0303 	mvn.w	r3, #3
 80027ec:	e03c      	b.n	8002868 <VL53LX_SetDistanceMode+0xc6>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 80027f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10a      	bne.n	8002812 <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	f107 0210 	add.w	r2, r7, #16
 8002804:	f107 010c 	add.w	r1, r7, #12
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f001 fe92 	bl	8004532 <VL53LX_get_timeouts_us>
 800280e:	4603      	mov	r3, r0
 8002810:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 8002812:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d107      	bne.n	800282a <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4619      	mov	r1, r3
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ff21 	bl	8002668 <SetPresetModeL3CX>
 8002826:	4603      	mov	r3, r0
 8002828:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 800282a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d105      	bne.n	800283e <VL53LX_SetDistanceMode+0x9c>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002838:	3320      	adds	r3, #32
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	701a      	strb	r2, [r3, #0]
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 800283e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10e      	bne.n	8002864 <VL53LX_SetDistanceMode+0xc2>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8002846:	68f9      	ldr	r1, [r7, #12]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f001 fe37 	bl	80044c0 <VL53LX_set_timeouts_us>
 8002852:	4603      	mov	r3, r0
 8002854:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 8002856:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d102      	bne.n	8002864 <VL53LX_SetDistanceMode+0xc2>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002864:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3720      	adds	r7, #32
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800287a:	2300      	movs	r3, #0
 800287c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 800288c:	4b31      	ldr	r3, [pc, #196]	; (8002954 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 800288e:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	4a31      	ldr	r2, [pc, #196]	; (8002958 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d902      	bls.n	800289e <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002898:	23fc      	movs	r3, #252	; 0xfc
 800289a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53LX_ERROR_NONE)
 800289e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10b      	bne.n	80028be <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	f107 0210 	add.w	r2, r7, #16
 80028ae:	f107 010c 	add.w	r1, r7, #12
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f001 fe3d 	bl	8004532 <VL53LX_get_timeouts_us>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 80028be:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80028c2:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 80028c4:	2306      	movs	r3, #6
 80028c6:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ff28 	bl	800271e <IsL4>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 80028d4:	4b21      	ldr	r3, [pc, #132]	; (800295c <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 80028d6:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d803      	bhi.n	80028e8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80028e0:	23fc      	movs	r3, #252	; 0xfc
 80028e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80028e6:	e003      	b.n	80028f0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80028ee:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 80028f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d11c      	bne.n	8002932 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	6a3a      	ldr	r2, [r7, #32]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d203      	bcs.n	8002908 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 8002900:	23fc      	movs	r3, #252	; 0xfc
 8002902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002906:	e00d      	b.n	8002924 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 8002912:	68f9      	ldr	r1, [r7, #12]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f001 fdd1 	bl	80044c0 <VL53LX_set_timeouts_us>
 800291e:	4603      	mov	r3, r0
 8002920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 8002924:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	629a      	str	r2, [r3, #40]	; 0x28
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8002932:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002936:	2b00      	cmp	r3, #0
 8002938:	d105      	bne.n	8002946 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd6>
		VL53LXDevDataSet(Dev,
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002940:	3324      	adds	r3, #36	; 0x24
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	601a      	str	r2, [r3, #0]
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002946:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800294a:	4618      	mov	r0, r3
 800294c:	3728      	adds	r7, #40	; 0x28
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	00086470 	.word	0x00086470
 8002958:	00989680 	.word	0x00989680
 800295c:	00030d40 	.word	0x00030d40

08002960 <VL53LX_SetUserROI>:



VL53LX_Error VL53LX_SetUserROI(VL53LX_DEV Dev,
		VL53LX_UserRoi_t *pRoi)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b092      	sub	sp, #72	; 0x48
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800296a:	2300      	movs	r3, #0
 800296c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53LX_zone_config_t  zone_cfg;
	uint8_t x_centre, y_centre, width, height;

	Status = CheckValidRectRoi(*pRoi);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	2300      	movs	r3, #0
 8002976:	4613      	mov	r3, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff feec 	bl	8002756 <CheckValidRectRoi>
 800297e:	4603      	mov	r3, r0
 8002980:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (Status != VL53LX_ERROR_NONE)
 8002984:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <VL53LX_SetUserROI+0x32>
		return VL53LX_ERROR_INVALID_PARAMS;
 800298c:	f06f 0303 	mvn.w	r3, #3
 8002990:	e050      	b.n	8002a34 <VL53LX_SetUserROI+0xd4>

	x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	789b      	ldrb	r3, [r3, #2]
 8002996:	461a      	mov	r2, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4413      	add	r3, r2
 800299e:	3301      	adds	r3, #1
 80029a0:	0fda      	lsrs	r2, r3, #31
 80029a2:	4413      	add	r3, r2
 80029a4:	105b      	asrs	r3, r3, #1
 80029a6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	785b      	ldrb	r3, [r3, #1]
 80029ae:	461a      	mov	r2, r3
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	78db      	ldrb	r3, [r3, #3]
 80029b4:	4413      	add	r3, r2
 80029b6:	3301      	adds	r3, #1
 80029b8:	0fda      	lsrs	r2, r3, #31
 80029ba:	4413      	add	r3, r2
 80029bc:	105b      	asrs	r3, r3, #1
 80029be:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	width =    (pRoi->BotRightX - pRoi->TopLeftX);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	789a      	ldrb	r2, [r3, #2]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	785a      	ldrb	r2, [r3, #1]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	78db      	ldrb	r3, [r3, #3]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	zone_cfg.max_zones = 1;
 80029de:	2301      	movs	r3, #1
 80029e0:	733b      	strb	r3, [r7, #12]
	zone_cfg.active_zones = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	737b      	strb	r3, [r7, #13]
	zone_cfg.user_zones[0].x_centre = x_centre;
 80029e6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80029ea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	zone_cfg.user_zones[0].y_centre = y_centre;
 80029ee:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80029f2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	zone_cfg.user_zones[0].width = width;
 80029f6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80029fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	zone_cfg.user_zones[0].height = height;
 80029fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if ((width < 3) || (height < 3))
 8002a06:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d903      	bls.n	8002a16 <VL53LX_SetUserROI+0xb6>
 8002a0e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d803      	bhi.n	8002a1e <VL53LX_SetUserROI+0xbe>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002a16:	23fc      	movs	r3, #252	; 0xfc
 8002a18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002a1c:	e008      	b.n	8002a30 <VL53LX_SetUserROI+0xd0>
	else
		Status =  VL53LX_set_zone_config(Dev, &zone_cfg);
 8002a1e:	f107 030c 	add.w	r3, r7, #12
 8002a22:	4619      	mov	r1, r3
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f001 fe68 	bl	80046fa <VL53LX_set_zone_config>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	LOG_FUNCTION_END(Status);
	return Status;
 8002a30:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3748      	adds	r7, #72	; 0x48
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3318      	adds	r3, #24
 8002a4c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f001 f90c 	bl	8003c6c <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002a54:	2300      	movs	r3, #0
 8002a56:	75bb      	strb	r3, [r7, #22]
 8002a58:	e01a      	b.n	8002a90 <VL53LX_StartMeasurement+0x54>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8002a5a:	7dbb      	ldrb	r3, [r7, #22]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8002a62:	3308      	adds	r3, #8
 8002a64:	2100      	movs	r1, #0
 8002a66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8002a6a:	7dbb      	ldrb	r3, [r7, #22]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002a74:	3318      	adds	r3, #24
 8002a76:	22ff      	movs	r2, #255	; 0xff
 8002a78:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8002a7a:	7dbb      	ldrb	r3, [r7, #22]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002a84:	331c      	adds	r3, #28
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002a8a:	7dbb      	ldrb	r3, [r7, #22]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	75bb      	strb	r3, [r7, #22]
 8002a90:	7dbb      	ldrb	r3, [r7, #22]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d9e1      	bls.n	8002a5a <VL53LX_StartMeasurement+0x1e>
	}
	pdev->PreviousStreamCount = 0;
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002a9c:	3321      	adds	r3, #33	; 0x21
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = 0;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002aa8:	3320      	adds	r3, #32
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	7edb      	ldrb	r3, [r3, #27]
 8002ab2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 8002ab4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d107      	bne.n	8002acc <VL53LX_StartMeasurement+0x90>
		Status = VL53LX_init_and_start_range(
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	2206      	movs	r2, #6
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f001 ff80 	bl	80049c8 <VL53LX_init_and_start_range>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 8002acc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <VL53LX_StopMeasurement>:

VL53LX_Error VL53LX_StopMeasurement(VL53LX_DEV Dev)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_stop_range(Dev);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f002 f9f9 	bl	8004edc <VL53LX_stop_range>
 8002aea:	4603      	mov	r3, r0
 8002aec:	73fb      	strb	r3, [r7, #15]

	VL53LX_unload_patch(Dev);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f001 f9ac 	bl	8003e4c <VL53LX_unload_patch>

	LOG_FUNCTION_END(Status);
	return Status;
 8002af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <VL53LX_ClearInterruptAndStartMeasurement>:


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	7edb      	ldrb	r3, [r3, #27]
 8002b10:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 8002b12:	7bbb      	ldrb	r3, [r7, #14]
 8002b14:	4619      	mov	r1, r3
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f002 fedc 	bl	80058d4 <VL53LX_clear_interrupt_and_enable_next_range>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <VL53LX_GetMeasurementDataReady>:


VL53LX_Error VL53LX_GetMeasurementDataReady(VL53LX_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_is_new_data_ready(Dev, pMeasurementDataReady);
 8002b3a:	6839      	ldr	r1, [r7, #0]
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f00e fa7a 	bl	8011036 <VL53LX_is_new_data_ready>
 8002b42:	4603      	mov	r3, r0
 8002b44:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <ConvertStatusHisto>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	3b05      	subs	r3, #5
 8002b62:	2b12      	cmp	r3, #18
 8002b64:	d840      	bhi.n	8002be8 <ConvertStatusHisto+0x94>
 8002b66:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <ConvertStatusHisto+0x18>)
 8002b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6c:	08002bb9 	.word	0x08002bb9
 8002b70:	08002bbf 	.word	0x08002bbf
 8002b74:	08002bcb 	.word	0x08002bcb
 8002b78:	08002be9 	.word	0x08002be9
 8002b7c:	08002be3 	.word	0x08002be3
 8002b80:	08002be9 	.word	0x08002be9
 8002b84:	08002be9 	.word	0x08002be9
 8002b88:	08002be9 	.word	0x08002be9
 8002b8c:	08002be9 	.word	0x08002be9
 8002b90:	08002be9 	.word	0x08002be9
 8002b94:	08002be9 	.word	0x08002be9
 8002b98:	08002be9 	.word	0x08002be9
 8002b9c:	08002be9 	.word	0x08002be9
 8002ba0:	08002be9 	.word	0x08002be9
 8002ba4:	08002bc5 	.word	0x08002bc5
 8002ba8:	08002bd7 	.word	0x08002bd7
 8002bac:	08002be9 	.word	0x08002be9
 8002bb0:	08002bdd 	.word	0x08002bdd
 8002bb4:	08002bd1 	.word	0x08002bd1
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002bb8:	2304      	movs	r3, #4
 8002bba:	73fb      	strb	r3, [r7, #15]
		break;
 8002bbc:	e016      	b.n	8002bec <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
		break;
 8002bc2:	e013      	b.n	8002bec <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 8002bc4:	2306      	movs	r3, #6
 8002bc6:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 8002bc8:	e010      	b.n	8002bec <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8002bca:	2307      	movs	r3, #7
 8002bcc:	73fb      	strb	r3, [r7, #15]
		break;
 8002bce:	e00d      	b.n	8002bec <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8002bd0:	230c      	movs	r3, #12
 8002bd2:	73fb      	strb	r3, [r7, #15]
		break;
 8002bd4:	e00a      	b.n	8002bec <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8002bd6:	2307      	movs	r3, #7
 8002bd8:	73fb      	strb	r3, [r7, #15]
		break;
 8002bda:	e007      	b.n	8002bec <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8002bdc:	230b      	movs	r3, #11
 8002bde:	73fb      	strb	r3, [r7, #15]
		break;
 8002be0:	e004      	b.n	8002bec <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 8002be2:	2300      	movs	r3, #0
 8002be4:	73fb      	strb	r3, [r7, #15]
		break;
 8002be6:	e001      	b.n	8002bec <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 8002be8:	23ff      	movs	r3, #255	; 0xff
 8002bea:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop

08002bfc <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08e      	sub	sp, #56	; 0x38
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	4608      	mov	r0, r1
 8002c06:	4611      	mov	r1, r2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	70fb      	strb	r3, [r7, #3]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	70bb      	strb	r3, [r7, #2]
 8002c12:	4613      	mov	r3, r2
 8002c14:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	VL53LX_LLDriverData_t *pdev =
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3318      	adds	r3, #24
 8002c20:	62fb      	str	r3, [r7, #44]	; 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	33f8      	adds	r3, #248	; 0xf8
 8002c26:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8002c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c2e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8002c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002c3e:	025b      	lsls	r3, r3, #9
 8002c40:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8002c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c44:	6a3a      	ldr	r2, [r7, #32]
 8002c46:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8002c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c4a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002c4c:	025b      	lsls	r3, r3, #9
 8002c4e:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8002c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8002c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c58:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8002c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8002c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c66:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8002c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c6c:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8002c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c70:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8002c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c76:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8002c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c7a:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8002c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c80:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 8002c82:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002c86:	2b11      	cmp	r3, #17
 8002c88:	d009      	beq.n	8002c9e <SetTargetData+0xa2>
 8002c8a:	2b11      	cmp	r3, #17
 8002c8c:	dc0f      	bgt.n	8002cae <SetTargetData+0xb2>
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	dc02      	bgt.n	8002c98 <SetTargetData+0x9c>
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dc03      	bgt.n	8002c9e <SetTargetData+0xa2>
 8002c96:	e00a      	b.n	8002cae <SetTargetData+0xb2>
 8002c98:	2b0d      	cmp	r3, #13
 8002c9a:	d004      	beq.n	8002ca6 <SetTargetData+0xaa>
 8002c9c:	e007      	b.n	8002cae <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 8002c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca0:	2205      	movs	r2, #5
 8002ca2:	749a      	strb	r2, [r3, #18]
		break;
 8002ca4:	e006      	b.n	8002cb4 <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 8002ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca8:	220d      	movs	r2, #13
 8002caa:	749a      	strb	r2, [r3, #18]
		break;
 8002cac:	e002      	b.n	8002cb4 <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 8002cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8002cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cb6:	7c9b      	ldrb	r3, [r3, #18]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d117      	bne.n	8002cec <SetTargetData+0xf0>
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d114      	bne.n	8002cec <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 8002cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cc4:	22ff      	movs	r2, #255	; 0xff
 8002cc6:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 8002cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cca:	2200      	movs	r2, #0
 8002ccc:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 8002cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 8002cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd6:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002cda:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 8002cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cde:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002ce2:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 8002ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce6:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002cea:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 8002cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cee:	7c9b      	ldrb	r3, [r3, #18]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d108      	bne.n	8002d06 <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 8002cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff ff2b 	bl	8002b54 <ConvertStatusHisto>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 8002d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d04:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 8002d06:	f107 030c 	add.w	r3, r7, #12
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f248 0191 	movw	r1, #32913	; 0x8091
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f003 fa37 	bl	8006184 <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8002d16:	78bb      	ldrb	r3, [r7, #2]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8002d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d26:	8a1b      	ldrh	r3, [r3, #16]
 8002d28:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	86bb      	strh	r3, [r7, #52]	; 0x34

	pRangeData->ExtendedRange = 0;
 8002d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d30:	2200      	movs	r2, #0
 8002d32:	74da      	strb	r2, [r3, #19]

	if ((active_results != 1) ||
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d106      	bne.n	8002d48 <SetTargetData+0x14c>
		(pdev->PreviousRangeActiveResults != 1))
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002d40:	3320      	adds	r3, #32
 8002d42:	781b      	ldrb	r3, [r3, #0]
	if ((active_results != 1) ||
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d001      	beq.n	8002d4c <SetTargetData+0x150>
		ExtendedRangeEnabled = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 81dc 	beq.w	800310c <SetTargetData+0x510>
		(pRangeData->RangeStatus ==
 8002d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d56:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 8002d58:	2b07      	cmp	r3, #7
 8002d5a:	d004      	beq.n	8002d66 <SetTargetData+0x16a>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8002d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d5e:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	f040 81d3 	bne.w	800310c <SetTargetData+0x510>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8002d66:	787b      	ldrb	r3, [r7, #1]
 8002d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002d70:	3318      	adds	r3, #24
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b07      	cmp	r3, #7
 8002d76:	d01c      	beq.n	8002db2 <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8002d78:	787b      	ldrb	r3, [r7, #1]
 8002d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002d82:	3318      	adds	r3, #24
 8002d84:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d013      	beq.n	8002db2 <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8002d8a:	787b      	ldrb	r3, [r7, #1]
 8002d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002d94:	3318      	adds	r3, #24
 8002d96:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f040 81b7 	bne.w	800310c <SetTargetData+0x510>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 8002d9e:	787b      	ldrb	r3, [r7, #1]
 8002da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002da8:	331c      	adds	r3, #28
 8002daa:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	f040 81ad 	bne.w	800310c <SetTargetData+0x510>
	{
		if (((pdev->PreviousStreamCount) ==
 8002db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002db8:	3321      	adds	r3, #33	; 0x21
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc0:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8002dc4:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d00c      	beq.n	8002de4 <SetTargetData+0x1e8>
		|| ((pdev->PreviousStreamCount) ==
 8002dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dcc:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002dd0:	3321      	adds	r3, #33	; 0x21
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8002ddc:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8002dde:	429a      	cmp	r2, r3
 8002de0:	f040 816b 	bne.w	80030ba <SetTargetData+0x4be>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8002de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002dea:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8002dec:	787b      	ldrb	r3, [r7, #1]
 8002dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002df0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8002df4:	3308      	adds	r3, #8
 8002df6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002dfa:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 8002e02:	2301      	movs	r3, #1
 8002e04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		switch (pdev->preset_mode) {
 8002e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0a:	785b      	ldrb	r3, [r3, #1]
 8002e0c:	2b21      	cmp	r3, #33	; 0x21
 8002e0e:	d008      	beq.n	8002e22 <SetTargetData+0x226>
 8002e10:	2b21      	cmp	r3, #33	; 0x21
 8002e12:	f300 814e 	bgt.w	80030b2 <SetTargetData+0x4b6>
 8002e16:	2b1b      	cmp	r3, #27
 8002e18:	f000 80d7 	beq.w	8002fca <SetTargetData+0x3ce>
 8002e1c:	2b1e      	cmp	r3, #30
 8002e1e:	d004      	beq.n	8002e2a <SetTargetData+0x22e>
 8002e20:	e147      	b.n	80030b2 <SetTargetData+0x4b6>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002e28:	e148      	b.n	80030bc <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8002e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2c:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8002e30:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	dd0e      	ble.n	8002e56 <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8002e3e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	da07      	bge.n	8002e56 <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8002e46:	7dfb      	ldrb	r3, [r7, #23]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d104      	bne.n	8002e56 <SetTargetData+0x25a>
					sequency == 1) {
					AddOffset =
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002e52:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002e54:	e0b8      	b.n	8002fc8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8002e56:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5c:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8002e60:	425b      	negs	r3, r3
 8002e62:	429a      	cmp	r2, r3
 8002e64:	da0f      	bge.n	8002e86 <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8002e66:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6c:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 8002e70:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8002e72:	429a      	cmp	r2, r3
 8002e74:	dd07      	ble.n	8002e86 <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8002e76:	7dfb      	ldrb	r3, [r7, #23]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d104      	bne.n	8002e86 <SetTargetData+0x28a>
					sequency == 0) {
					AddOffset =
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8002e82:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002e84:	e0a0      	b.n	8002fc8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8002e8c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	dd0e      	ble.n	8002eb2 <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8002e9a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	da07      	bge.n	8002eb2 <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d104      	bne.n	8002eb2 <SetTargetData+0x2b6>
					sequency == 0) {
					AddOffset =
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8002eae:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002eb0:	e08a      	b.n	8002fc8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8002eb2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8002ebc:	425b      	negs	r3, r3
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	da0f      	bge.n	8002ee2 <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8002ec2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8002ecc:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	dd07      	ble.n	8002ee2 <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8002ed2:	7dfb      	ldrb	r3, [r7, #23]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d104      	bne.n	8002ee2 <SetTargetData+0x2e6>
					sequency == 1) {
					AddOffset =
 8002ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eda:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002ede:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002ee0:	e072      	b.n	8002fc8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8002ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee4:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002ee8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	dd0e      	ble.n	8002f0e <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8002ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef2:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8002ef6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	da07      	bge.n	8002f0e <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d104      	bne.n	8002f0e <SetTargetData+0x312>
					sequency == 1) {
					AddOffset =
 8002f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f06:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002f0a:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f0c:	e05c      	b.n	8002fc8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8002f0e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f14:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002f18:	425b      	negs	r3, r3
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	da0f      	bge.n	8002f3e <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8002f1e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8002f28:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	dd07      	ble.n	8002f3e <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8002f2e:	7dfb      	ldrb	r3, [r7, #23]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d104      	bne.n	8002f3e <SetTargetData+0x342>
					sequency == 0) {
					AddOffset =
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8002f3a:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f3c:	e044      	b.n	8002fc8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002f44:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	dd0e      	ble.n	8002f6a <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8002f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4e:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8002f52:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	da07      	bge.n	8002f6a <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8002f5a:	7dfb      	ldrb	r3, [r7, #23]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d104      	bne.n	8002f6a <SetTargetData+0x36e>
					sequency == 0) {
					AddOffset =
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8002f66:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f68:	e02e      	b.n	8002fc8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8002f6a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002f74:	425b      	negs	r3, r3
 8002f76:	429a      	cmp	r2, r3
 8002f78:	da0f      	bge.n	8002f9a <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8002f7a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8002f84:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8002f86:	429a      	cmp	r2, r3
 8002f88:	dd07      	ble.n	8002f9a <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d104      	bne.n	8002f9a <SetTargetData+0x39e>
					sequency == 1) {
					AddOffset =
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8002f96:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f98:	e016      	b.n	8002fc8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9c:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8002fa0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	da0b      	bge.n	8002fc0 <SetTargetData+0x3c4>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002fae:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	dd04      	ble.n	8002fc0 <SetTargetData+0x3c4>
					AddOffset =
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8002fbc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002fbe:	e003      	b.n	8002fc8 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002fc6:	e079      	b.n	80030bc <SetTargetData+0x4c0>
 8002fc8:	e078      	b.n	80030bc <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fcc:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8002fd0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	dd0e      	ble.n	8002ff6 <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8002fde:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	da07      	bge.n	8002ff6 <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d104      	bne.n	8002ff6 <SetTargetData+0x3fa>
					sequency == 0) {
					AddOffset =
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fee:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 8002ff2:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002ff4:	e05c      	b.n	80030b0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8002ff6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8003000:	425b      	negs	r3, r3
 8003002:	429a      	cmp	r2, r3
 8003004:	da0f      	bge.n	8003026 <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8003006:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8003010:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8003012:	429a      	cmp	r2, r3
 8003014:	dd07      	ble.n	8003026 <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8003016:	7dfb      	ldrb	r3, [r7, #23]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d104      	bne.n	8003026 <SetTargetData+0x42a>
					sequency == 1) {
					AddOffset =
 800301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301e:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8003022:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003024:	e044      	b.n	80030b0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003028:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800302c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003030:	429a      	cmp	r2, r3
 8003032:	dd0e      	ble.n	8003052 <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8003034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003036:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 800303a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800303e:	429a      	cmp	r2, r3
 8003040:	da07      	bge.n	8003052 <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d104      	bne.n	8003052 <SetTargetData+0x456>
					sequency == 1) {
					AddOffset =
 8003048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800304e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003050:	e02e      	b.n	80030b0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8003052:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003058:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800305c:	425b      	negs	r3, r3
 800305e:	429a      	cmp	r2, r3
 8003060:	da0f      	bge.n	8003082 <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8003062:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 800306c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800306e:	429a      	cmp	r2, r3
 8003070:	dd07      	ble.n	8003082 <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8003072:	7dfb      	ldrb	r3, [r7, #23]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d104      	bne.n	8003082 <SetTargetData+0x486>
					sequency == 0) {
					AddOffset =
 8003078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307a:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 800307e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003080:	e016      	b.n	80030b0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8003088:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800308c:	429a      	cmp	r2, r3
 800308e:	da0b      	bge.n	80030a8 <SetTargetData+0x4ac>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003092:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 8003096:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800309a:	429a      	cmp	r2, r3
 800309c:	dd04      	ble.n	80030a8 <SetTargetData+0x4ac>
					AddOffset =
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80030a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80030a6:	e003      	b.n	80030b0 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 80030ae:	e005      	b.n	80030bc <SetTargetData+0x4c0>
 80030b0:	e004      	b.n	80030bc <SetTargetData+0x4c0>

			default:
				uwr_status = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 80030b8:	e000      	b.n	80030bc <SetTargetData+0x4c0>
			}
		}
 80030ba:	bf00      	nop

		if (uwr_status) {
 80030bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d023      	beq.n	800310c <SetTargetData+0x510>
			pRangeData->RangeMilliMeter += AddOffset;
 80030c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80030ce:	4413      	add	r3, r2
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	b21a      	sxth	r2, r3
 80030d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d6:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 80030d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030de:	b29a      	uxth	r2, r3
 80030e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80030e2:	4413      	add	r3, r2
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	b21a      	sxth	r2, r3
 80030e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ea:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 80030ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80030f6:	4413      	add	r3, r2
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	b21a      	sxth	r2, r3
 80030fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030fe:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 8003100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003102:	2201      	movs	r2, #1
 8003104:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 8003106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003108:	2200      	movs	r2, #0
 800310a:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 800310c:	787b      	ldrb	r3, [r7, #1]
 800310e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003110:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8003114:	3308      	adds	r3, #8
 8003116:	8ab9      	ldrh	r1, [r7, #20]
 8003118:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 800311c:	787b      	ldrb	r3, [r7, #1]
 800311e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003120:	7c91      	ldrb	r1, [r2, #18]
 8003122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003124:	4413      	add	r3, r2
 8003126:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800312a:	3318      	adds	r3, #24
 800312c:	460a      	mov	r2, r1
 800312e:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 8003130:	787b      	ldrb	r3, [r7, #1]
 8003132:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003134:	7cd1      	ldrb	r1, [r2, #19]
 8003136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003138:	4413      	add	r3, r2
 800313a:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800313e:	331c      	adds	r3, #28
 8003140:	460a      	mov	r2, r1
 8003142:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 8003144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003146:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800314a:	3320      	adds	r3, #32
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	701a      	strb	r2, [r3, #0]

	Range = pRangeData->RangeMilliMeter;
 8003150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003152:	8a1b      	ldrh	r3, [r3, #16]
 8003154:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 8003156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003158:	7c9b      	ldrb	r3, [r3, #18]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d110      	bne.n	8003180 <SetTargetData+0x584>
 800315e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	da0c      	bge.n	8003180 <SetTargetData+0x584>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 8003166:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800316a:	4b08      	ldr	r3, [pc, #32]	; (800318c <SetTargetData+0x590>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	da03      	bge.n	800317a <SetTargetData+0x57e>
			pRangeData->RangeStatus =
 8003172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003174:	220e      	movs	r2, #14
 8003176:	749a      	strb	r2, [r3, #18]
 8003178:	e002      	b.n	8003180 <SetTargetData+0x584>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800317a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800317c:	2200      	movs	r2, #0
 800317e:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 8003180:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
}
 8003184:	4618      	mov	r0, r3
 8003186:	3738      	adds	r7, #56	; 0x38
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	2000001c 	.word	0x2000001c

08003190 <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b08f      	sub	sp, #60	; 0x3c
 8003194:	af04      	add	r7, sp, #16
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3318      	adds	r3, #24
 80031a0:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	7c9a      	ldrb	r2, [r3, #18]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


	pMultiRangingData->TimeStamp = 0;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	78da      	ldrb	r2, [r3, #3]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	7c9b      	ldrb	r3, [r3, #18]
 80031ce:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 80031d0:	7ffb      	ldrb	r3, [r7, #31]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d103      	bne.n	80031de <SetMeasurementData+0x4e>

		iteration = 1;
 80031d6:	2301      	movs	r3, #1
 80031d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80031dc:	e002      	b.n	80031e4 <SetMeasurementData+0x54>
	else
		iteration = ActiveResults;
 80031de:	7ffb      	ldrb	r3, [r7, #31]
 80031e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for (i = 0; i < iteration; i++) {
 80031e4:	2300      	movs	r3, #0
 80031e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031ea:	e035      	b.n	8003258 <SetMeasurementData+0xc8>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 80031ec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	3308      	adds	r3, #8
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 8003200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003204:	224c      	movs	r2, #76	; 0x4c
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	3310      	adds	r3, #16
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	4413      	add	r3, r2
 8003210:	3304      	adds	r3, #4
 8003212:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 8003214:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8003218:	2b00      	cmp	r3, #0
 800321a:	d113      	bne.n	8003244 <SetMeasurementData+0xb4>
			Status = SetTargetData(Dev, ActiveResults,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	7918      	ldrb	r0, [r3, #4]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	7c1b      	ldrb	r3, [r3, #16]
 8003224:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8003228:	7ff9      	ldrb	r1, [r7, #31]
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	9202      	str	r2, [sp, #8]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	9201      	str	r2, [sp, #4]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	4623      	mov	r3, r4
 8003236:	4602      	mov	r2, r0
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f7ff fcdf 	bl	8002bfc <SetTargetData>
 800323e:	4603      	mov	r3, r0
 8003240:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	for (i = 0; i < iteration; i++) {
 800324e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003252:	3301      	adds	r3, #1
 8003254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003258:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800325c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003260:	429a      	cmp	r2, r3
 8003262:	d3c3      	bcc.n	80031ec <SetMeasurementData+0x5c>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	f893 243f 	ldrb.w	r2, [r3, #1087]	; 0x43f
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8003270:	3321      	adds	r3, #33	; 0x21
 8003272:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8003274:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800327c:	e01f      	b.n	80032be <SetMeasurementData+0x12e>
		pdev->PreviousRangeMilliMeter[i] = 0;
 800327e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003282:	6a3a      	ldr	r2, [r7, #32]
 8003284:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8003288:	3308      	adds	r3, #8
 800328a:	2100      	movs	r1, #0
 800328c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8003290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003294:	6a3a      	ldr	r2, [r7, #32]
 8003296:	4413      	add	r3, r2
 8003298:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800329c:	3318      	adds	r3, #24
 800329e:	22ff      	movs	r2, #255	; 0xff
 80032a0:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 80032a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032a6:	6a3a      	ldr	r2, [r7, #32]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80032ae:	331c      	adds	r3, #28
 80032b0:	2200      	movs	r2, #0
 80032b2:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80032b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032b8:	3301      	adds	r3, #1
 80032ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80032be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d9db      	bls.n	800327e <SetMeasurementData+0xee>
	}

	return Status;
 80032c6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	372c      	adds	r7, #44	; 0x2c
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd90      	pop	{r4, r7, pc}

080032d2 <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b086      	sub	sp, #24
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80032dc:	2300      	movs	r3, #0
 80032de:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3318      	adds	r3, #24
 80032e4:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80032ec:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 80032ee:	225c      	movs	r2, #92	; 0x5c
 80032f0:	21ff      	movs	r1, #255	; 0xff
 80032f2:	6838      	ldr	r0, [r7, #0]
 80032f4:	f011 fc8c 	bl	8014c10 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	2102      	movs	r1, #2
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f001 fee7 	bl	80050d0 <VL53LX_get_device_results>
 8003302:	4603      	mov	r3, r0
 8003304:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	68f9      	ldr	r1, [r7, #12]
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ff40 	bl	8003190 <SetMeasurementData>
 8003310:	4603      	mov	r3, r0
 8003312:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 8003314:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <VL53LX_PerformRefSpadManagement>:
	return Status;
}


VL53LX_Error VL53LX_PerformRefSpadManagement(VL53LX_DEV Dev)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b090      	sub	sp, #64	; 0x40
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003328:	2300      	movs	r3, #0
 800332a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 800332e:	f240 3305 	movw	r3, #773	; 0x305
 8003332:	81bb      	strh	r3, [r7, #12]
	VL53LX_customer_nvm_managed_t *pc;
	VL53LX_DistanceModes DistanceMode;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3318      	adds	r3, #24
 8003338:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 800333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333c:	3348      	adds	r3, #72	; 0x48
 800333e:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53LX_ERROR_NONE) {
 8003340:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003344:	2b00      	cmp	r3, #0
 8003346:	d11c      	bne.n	8003382 <VL53LX_PerformRefSpadManagement+0x62>
		DistanceMode = VL53LXDevDataGet(Dev,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 800334e:	3320      	adds	r3, #32
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.DistanceMode);
		Status = VL53LX_run_ref_spad_char(Dev, &RawStatus);
 8003356:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800335a:	4619      	mov	r1, r3
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f8e3 	bl	8003528 <VL53LX_run_ref_spad_char>
 8003362:	4603      	mov	r3, r0
 8003364:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53LX_ERROR_NONE)
 8003368:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800336c:	2b00      	cmp	r3, #0
 800336e:	d108      	bne.n	8003382 <VL53LX_PerformRefSpadManagement+0x62>
			Status = VL53LX_SetDistanceMode(Dev, DistanceMode);
 8003370:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003374:	4619      	mov	r1, r3
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff fa13 	bl	80027a2 <VL53LX_SetDistanceMode>
 800337c:	4603      	mov	r3, r0
 800337e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8003382:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003386:	f113 0f1d 	cmn.w	r3, #29
 800338a:	d14e      	bne.n	800342a <VL53LX_PerformRefSpadManagement+0x10a>

		Status = VL53LX_read_nvm_raw_data(Dev,
 800338c:	f107 0310 	add.w	r3, r7, #16
 8003390:	2206      	movs	r2, #6
 8003392:	2128      	movs	r1, #40	; 0x28
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f00c f991 	bl	800f6bc <VL53LX_read_nvm_raw_data>
 800339a:	4603      	mov	r3, r0
 800339c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53LX_ERROR_NONE)
 80033a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d109      	bne.n	80033bc <VL53LX_PerformRefSpadManagement+0x9c>
			Status = VL53LX_WriteMulti(Dev,
 80033a8:	f107 020c 	add.w	r2, r7, #12
 80033ac:	2302      	movs	r3, #2
 80033ae:	2114      	movs	r1, #20
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f00e f9c7 	bl	8011744 <VL53LX_WriteMulti>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53LX_ERROR_NONE) {
 80033bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d105      	bne.n	80033d0 <VL53LX_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 80033c4:	7b3a      	ldrb	r2, [r7, #12]
 80033c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c8:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 80033ca:	7b7a      	ldrb	r2, [r7, #13]
 80033cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ce:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 80033d0:	f107 0310 	add.w	r3, r7, #16
 80033d4:	3310      	adds	r3, #16
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c



		if (Status == VL53LX_ERROR_NONE)
 80033d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d108      	bne.n	80033f2 <VL53LX_PerformRefSpadManagement+0xd2>
			Status = VL53LX_WriteMulti(Dev,
 80033e0:	2306      	movs	r3, #6
 80033e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e4:	210d      	movs	r1, #13
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f00e f9ac 	bl	8011744 <VL53LX_WriteMulti>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53LX_ERROR_NONE) {
 80033f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d117      	bne.n	800342a <VL53LX_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 80033fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003400:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	785a      	ldrb	r2, [r3, #1]
 8003406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003408:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	789a      	ldrb	r2, [r3, #2]
 800340e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003410:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	78da      	ldrb	r2, [r3, #3]
 8003416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003418:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 800341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341c:	791a      	ldrb	r2, [r3, #4]
 800341e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003420:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	795a      	ldrb	r2, [r3, #5]
 8003426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003428:	715a      	strb	r2, [r3, #5]
		}

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800342a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800342e:	4618      	mov	r0, r3
 8003430:	3740      	adds	r7, #64	; 0x40
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <VL53LX_SmudgeCorrectionEnable>:


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8003444:	2300      	movs	r3, #0
 8003446:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 8003448:	2300      	movs	r3, #0
 800344a:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 800344c:	2300      	movs	r3, #0
 800344e:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 8003450:	2300      	movs	r3, #0
 8003452:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	2b03      	cmp	r3, #3
 8003458:	d84a      	bhi.n	80034f0 <VL53LX_SmudgeCorrectionEnable+0xb8>
 800345a:	a201      	add	r2, pc, #4	; (adr r2, 8003460 <VL53LX_SmudgeCorrectionEnable+0x28>)
 800345c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003460:	08003471 	.word	0x08003471
 8003464:	08003491 	.word	0x08003491
 8003468:	080034b1 	.word	0x080034b1
 800346c:	080034d1 	.word	0x080034d1
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f003 fd92 	bl	8006f9a <VL53LX_dynamic_xtalk_correction_disable>
 8003476:	4603      	mov	r3, r0
 8003478:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f003 fda4 	bl	8006fc8 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8003480:	4603      	mov	r3, r0
 8003482:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f003 fdcd 	bl	8007024 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 800348a:	4603      	mov	r3, r0
 800348c:	733b      	strb	r3, [r7, #12]
		break;
 800348e:	e032      	b.n	80034f6 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f003 fd6b 	bl	8006f6c <VL53LX_dynamic_xtalk_correction_enable>
 8003496:	4603      	mov	r3, r0
 8003498:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f003 fdd9 	bl	8007052 <VL53LX_dynamic_xtalk_correction_apply_enable>
 80034a0:	4603      	mov	r3, r0
 80034a2:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f003 fdbd 	bl	8007024 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 80034aa:	4603      	mov	r3, r0
 80034ac:	733b      	strb	r3, [r7, #12]
		break;
 80034ae:	e022      	b.n	80034f6 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f003 fd5b 	bl	8006f6c <VL53LX_dynamic_xtalk_correction_enable>
 80034b6:	4603      	mov	r3, r0
 80034b8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f003 fdc9 	bl	8007052 <VL53LX_dynamic_xtalk_correction_apply_enable>
 80034c0:	4603      	mov	r3, r0
 80034c2:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f003 fd96 	bl	8006ff6 <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 80034ca:	4603      	mov	r3, r0
 80034cc:	733b      	strb	r3, [r7, #12]
		break;
 80034ce:	e012      	b.n	80034f6 <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f003 fd4b 	bl	8006f6c <VL53LX_dynamic_xtalk_correction_enable>
 80034d6:	4603      	mov	r3, r0
 80034d8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f003 fd74 	bl	8006fc8 <VL53LX_dynamic_xtalk_correction_apply_disable>
 80034e0:	4603      	mov	r3, r0
 80034e2:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f003 fd9d 	bl	8007024 <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 80034ea:	4603      	mov	r3, r0
 80034ec:	733b      	strb	r3, [r7, #12]
		break;
 80034ee:	e002      	b.n	80034f6 <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80034f0:	23fc      	movs	r3, #252	; 0xfc
 80034f2:	73fb      	strb	r3, [r7, #15]
		break;
 80034f4:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 80034f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10d      	bne.n	800351a <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 80034fe:	7bbb      	ldrb	r3, [r7, #14]
 8003500:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8003502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 800350a:	7b7b      	ldrb	r3, [r7, #13]
 800350c:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 800350e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8003516:	7b3b      	ldrb	r3, [r7, #12]
 8003518:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800351a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop

08003528 <VL53LX_run_ref_spad_char>:


VL53LX_Error VL53LX_run_ref_spad_char(
	VL53LX_DEV        Dev,
	VL53LX_Error     *pcal_status)
{
 8003528:	b5b0      	push	{r4, r5, r7, lr}
 800352a:	b08c      	sub	sp, #48	; 0x30
 800352c:	af04      	add	r7, sp, #16
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003532:	2300      	movs	r3, #0
 8003534:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3318      	adds	r3, #24
 800353a:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53LX_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003542:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8003544:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d104      	bne.n	8003556 <VL53LX_run_ref_spad_char+0x2e>
		status = VL53LX_enable_powerforce(Dev);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f005 fd62 	bl	8009016 <VL53LX_enable_powerforce>
 8003552:	4603      	mov	r3, r0
 8003554:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 8003556:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d117      	bne.n	800358e <VL53LX_run_ref_spad_char+0x66>
		status =
		VL53LX_set_ref_spad_char_config(
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	7858      	ldrb	r0, [r3, #1]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	685c      	ldr	r4, [r3, #4]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	891d      	ldrh	r5, [r3, #8]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	899b      	ldrh	r3, [r3, #12]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	8952      	ldrh	r2, [r2, #10]
 8003572:	69b9      	ldr	r1, [r7, #24]
 8003574:	f8b1 12de 	ldrh.w	r1, [r1, #734]	; 0x2de
 8003578:	9102      	str	r1, [sp, #8]
 800357a:	9201      	str	r2, [sp, #4]
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	462b      	mov	r3, r5
 8003580:	4622      	mov	r2, r4
 8003582:	4601      	mov	r1, r0
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f007 fb71 	bl	800ac6c <VL53LX_set_ref_spad_char_config>
 800358a:	4603      	mov	r3, r0
 800358c:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53LX_ERROR_NONE)
 800358e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d107      	bne.n	80035a6 <VL53LX_run_ref_spad_char+0x7e>
		status = VL53LX_run_device_test(
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	4619      	mov	r1, r3
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f890 	bl	80036c2 <VL53LX_run_device_test>
 80035a2:	4603      	mov	r3, r0
 80035a4:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53LX_ERROR_NONE)
 80035a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d108      	bne.n	80035c0 <VL53LX_run_ref_spad_char+0x98>
		status =
		VL53LX_ReadMulti(
 80035ae:	f107 020c 	add.w	r2, r7, #12
 80035b2:	2302      	movs	r3, #2
 80035b4:	21d9      	movs	r1, #217	; 0xd9
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f00e f8fa 	bl	80117b0 <VL53LX_ReadMulti>
 80035bc:	4603      	mov	r3, r0
 80035be:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53LX_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53LX_ERROR_NONE) {
 80035c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10a      	bne.n	80035de <VL53LX_run_ref_spad_char+0xb6>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 80035c8:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 80035d0:	331f      	adds	r3, #31
 80035d2:	701a      	strb	r2, [r3, #0]
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 80035d4:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80035dc:	701a      	strb	r2, [r3, #0]
	}



	if (status == VL53LX_ERROR_NONE)
 80035de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d108      	bne.n	80035f8 <VL53LX_run_ref_spad_char+0xd0>
		status =
			VL53LX_WriteMulti(
 80035e6:	f107 020c 	add.w	r2, r7, #12
 80035ea:	2302      	movs	r3, #2
 80035ec:	2114      	movs	r1, #20
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f00e f8a8 	bl	8011744 <VL53LX_WriteMulti>
 80035f4:	4603      	mov	r3, r0
 80035f6:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 80035f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d107      	bne.n	8003610 <VL53LX_run_ref_spad_char+0xe8>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8003600:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8003608:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53LX_ERROR_NONE)
 8003610:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d108      	bne.n	800362a <VL53LX_run_ref_spad_char+0x102>
		status =
			VL53LX_ReadMulti(
 8003618:	f107 020c 	add.w	r2, r7, #12
 800361c:	2306      	movs	r3, #6
 800361e:	21ac      	movs	r1, #172	; 0xac
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f00e f8c5 	bl	80117b0 <VL53LX_ReadMulti>
 8003626:	4603      	mov	r3, r0
 8003628:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53LX_ERROR_NONE)
 800362a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d108      	bne.n	8003644 <VL53LX_run_ref_spad_char+0x11c>
		status =
			VL53LX_WriteMulti(
 8003632:	f107 020c 	add.w	r2, r7, #12
 8003636:	2306      	movs	r3, #6
 8003638:	210d      	movs	r1, #13
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f00e f882 	bl	8011744 <VL53LX_WriteMulti>
 8003640:	4603      	mov	r3, r0
 8003642:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53LX_ERROR_NONE) {
 8003644:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d117      	bne.n	800367c <VL53LX_run_ref_spad_char+0x154>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 800364c:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8003654:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 800365c:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8003664:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 800366c:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8003674:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53LX_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53LX_ERROR_NONE) {
 800367c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d114      	bne.n	80036ae <VL53LX_run_ref_spad_char+0x186>

		switch (pdev->sys_results.result__range_status) {
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 800368a:	2b10      	cmp	r3, #16
 800368c:	d00c      	beq.n	80036a8 <VL53LX_run_ref_spad_char+0x180>
 800368e:	2b10      	cmp	r3, #16
 8003690:	dc0e      	bgt.n	80036b0 <VL53LX_run_ref_spad_char+0x188>
 8003692:	2b0e      	cmp	r3, #14
 8003694:	d002      	beq.n	800369c <VL53LX_run_ref_spad_char+0x174>
 8003696:	2b0f      	cmp	r3, #15
 8003698:	d003      	beq.n	80036a2 <VL53LX_run_ref_spad_char+0x17a>
 800369a:	e009      	b.n	80036b0 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53LX_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 800369c:	23e4      	movs	r3, #228	; 0xe4
 800369e:	77fb      	strb	r3, [r7, #31]
			break;
 80036a0:	e006      	b.n	80036b0 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 80036a2:	23e3      	movs	r3, #227	; 0xe3
 80036a4:	77fb      	strb	r3, [r7, #31]
			break;
 80036a6:	e003      	b.n	80036b0 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 80036a8:	23e2      	movs	r3, #226	; 0xe2
 80036aa:	77fb      	strb	r3, [r7, #31]
			break;
 80036ac:	e000      	b.n	80036b0 <VL53LX_run_ref_spad_char+0x188>
		}
	}
 80036ae:	bf00      	nop



	*pcal_status = status;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	7ffa      	ldrb	r2, [r7, #31]
 80036b4:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 80036b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bdb0      	pop	{r4, r5, r7, pc}

080036c2 <VL53LX_run_device_test>:


VL53LX_Error VL53LX_run_device_test(
	VL53LX_DEV             Dev,
	VL53LX_DeviceTestMode  device_test_mode)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b086      	sub	sp, #24
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	460b      	mov	r3, r1
 80036cc:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3318      	adds	r3, #24
 80036d6:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 80036dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d108      	bne.n	80036f6 <VL53LX_run_device_test+0x34>
		status =
			VL53LX_RdByte(
 80036e4:	f107 030b 	add.w	r3, r7, #11
 80036e8:	461a      	mov	r2, r3
 80036ea:	2130      	movs	r1, #48	; 0x30
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f00e f8f1 	bl	80118d4 <VL53LX_RdByte>
 80036f2:	4603      	mov	r3, r0
 80036f4:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53LX_ERROR_NONE)
 80036f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d103      	bne.n	8003706 <VL53LX_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 80036fe:	7afa      	ldrb	r2, [r7, #11]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a


	if (status == VL53LX_ERROR_NONE)
 8003706:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <VL53LX_run_device_test+0x5a>
		status = VL53LX_start_test(
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	4619      	mov	r1, r3
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f005 fc03 	bl	8008f1e <VL53LX_start_test>
 8003718:	4603      	mov	r3, r0
 800371a:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53LX_ERROR_NONE)
 800371c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d104      	bne.n	800372e <VL53LX_run_device_test+0x6c>
		status = VL53LX_wait_for_test_completion(Dev);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f00d fc4d 	bl	8010fc4 <VL53LX_wait_for_test_completion>
 800372a:	4603      	mov	r3, r0
 800372c:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 800372e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d108      	bne.n	8003748 <VL53LX_run_device_test+0x86>
		status =
			VL53LX_ReadMulti(
 8003736:	f107 020c 	add.w	r2, r7, #12
 800373a:	2302      	movs	r3, #2
 800373c:	2189      	movs	r1, #137	; 0x89
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f00e f836 	bl	80117b0 <VL53LX_ReadMulti>
 8003744:	4603      	mov	r3, r0
 8003746:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8003748:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d107      	bne.n	8003760 <VL53LX_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8003750:	7b3a      	ldrb	r2, [r7, #12]
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		pdev->sys_results.result__report_status = comms_buffer[1];
 8003758:	7b7a      	ldrb	r2, [r7, #13]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
	}



	pdev->sys_results.result__range_status &=
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	b2da      	uxtb	r2, r3
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53LX_ERROR_NONE) {
 8003772:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d108      	bne.n	800378c <VL53LX_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53LX_ERROR_NONE)
 800377a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d104      	bne.n	800378c <VL53LX_run_device_test+0xca>
			status = VL53LX_clear_interrupt(Dev);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f005 fc6b 	bl	800905e <VL53LX_clear_interrupt>
 8003788:	4603      	mov	r3, r0
 800378a:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53LX_ERROR_NONE)
 800378c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d105      	bne.n	80037a0 <VL53LX_run_device_test+0xde>
		status =
			VL53LX_start_test(
 8003794:	2100      	movs	r1, #0
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f005 fbc1 	bl	8008f1e <VL53LX_start_test>
 800379c:	4603      	mov	r3, r0
 800379e:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 80037a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 80037b6:	2300      	movs	r3, #0
 80037b8:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	785b      	ldrb	r3, [r3, #1]
 80037be:	2b21      	cmp	r3, #33	; 0x21
 80037c0:	d006      	beq.n	80037d0 <select_offset_per_vcsel+0x24>
 80037c2:	2b21      	cmp	r3, #33	; 0x21
 80037c4:	dc2a      	bgt.n	800381c <select_offset_per_vcsel+0x70>
 80037c6:	2b1b      	cmp	r3, #27
 80037c8:	d01b      	beq.n	8003802 <select_offset_per_vcsel+0x56>
 80037ca:	2b1e      	cmp	r3, #30
 80037cc:	d00c      	beq.n	80037e8 <select_offset_per_vcsel+0x3c>
 80037ce:	e025      	b.n	800381c <select_offset_per_vcsel+0x70>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80037e0:	3302      	adds	r3, #2
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	817b      	strh	r3, [r7, #10]
		break;
 80037e6:	e02b      	b.n	8003840 <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80037ee:	3304      	adds	r3, #4
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80037fa:	3306      	adds	r3, #6
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	817b      	strh	r3, [r7, #10]
		break;
 8003800:	e01e      	b.n	8003840 <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003808:	3308      	adds	r3, #8
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003814:	330a      	adds	r3, #10
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	817b      	strh	r3, [r7, #10]
		break;
 800381a:	e011      	b.n	8003840 <select_offset_per_vcsel+0x94>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003822:	3308      	adds	r3, #8
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800382e:	330a      	adds	r3, #10
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003834:	23fc      	movs	r3, #252	; 0xfc
 8003836:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2200      	movs	r2, #0
 800383c:	801a      	strh	r2, [r3, #0]
		break;
 800383e:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003846:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 8003848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10b      	bne.n	8003868 <select_offset_per_vcsel+0xbc>
		*poffset = (isc & 0x01) ? tA : tB;
 8003850:	7a7b      	ldrb	r3, [r7, #9]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <select_offset_per_vcsel+0xb4>
 800385a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800385e:	e001      	b.n	8003864 <select_offset_per_vcsel+0xb8>
 8003860:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	8013      	strh	r3, [r2, #0]

	return status;
 8003868:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8003878:	b490      	push	{r4, r7}
 800387a:	b08a      	sub	sp, #40	; 0x28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	4611      	mov	r1, r2
 8003884:	461a      	mov	r2, r3
 8003886:	460b      	mov	r3, r1
 8003888:	71fb      	strb	r3, [r7, #7]
 800388a:	4613      	mov	r3, r2
 800388c:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80038aa:	e021      	b.n	80038f0 <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 80038ac:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	461a      	mov	r2, r3
 80038b8:	0052      	lsls	r2, r2, #1
 80038ba:	441a      	add	r2, r3
 80038bc:	00d3      	lsls	r3, r2, #3
 80038be:	461a      	mov	r2, r3
 80038c0:	460b      	mov	r3, r1
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	440b      	add	r3, r1
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	4413      	add	r3, r2
 80038ca:	4423      	add	r3, r4
 80038cc:	f203 7304 	addw	r3, r3, #1796	; 0x704
 80038d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 80038d4:	6a3a      	ldr	r2, [r7, #32]
 80038d6:	4413      	add	r3, r2
 80038d8:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 80038da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	3206      	adds	r2, #6
 80038e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038e4:	69fa      	ldr	r2, [r7, #28]
 80038e6:	4413      	add	r3, r2
 80038e8:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 80038ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80038ec:	3301      	adds	r3, #1
 80038ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80038f0:	79bb      	ldrb	r3, [r7, #6]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d3d8      	bcc.n	80038ac <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d047      	beq.n	8003990 <vl53lx_diff_histo_stddev+0x118>
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d044      	beq.n	8003990 <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	b29b      	uxth	r3, r3
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800390e:	e03a      	b.n	8003986 <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8003910:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	461a      	mov	r2, r3
 800391c:	0052      	lsls	r2, r2, #1
 800391e:	441a      	add	r2, r3
 8003920:	00d3      	lsls	r3, r2, #3
 8003922:	461a      	mov	r2, r3
 8003924:	460b      	mov	r3, r1
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	440b      	add	r3, r1
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	4413      	add	r3, r2
 800392e:	4423      	add	r3, r4
 8003930:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8003934:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003938:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003940:	fb02 f203 	mul.w	r2, r2, r3
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	fb92 f3f3 	sdiv	r3, r2, r3
 800394a:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 800394c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	3206      	adds	r2, #6
 8003952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003956:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800395a:	fb02 f203 	mul.w	r2, r2, r3
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	fb92 f3f3 	sdiv	r3, r2, r3
 8003964:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	69b9      	ldr	r1, [r7, #24]
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8003970:	69b8      	ldr	r0, [r7, #24]
 8003972:	6979      	ldr	r1, [r7, #20]
 8003974:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	441a      	add	r2, r3
 800397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397e:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003980:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003982:	3301      	adds	r3, #1
 8003984:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003986:	79bb      	ldrb	r3, [r7, #6]
 8003988:	b29b      	uxth	r3, r3
 800398a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800398c:	429a      	cmp	r2, r3
 800398e:	d3bf      	bcc.n	8003910 <vl53lx_diff_histo_stddev+0x98>
	}
}
 8003990:	bf00      	nop
 8003992:	3728      	adds	r7, #40	; 0x28
 8003994:	46bd      	mov	sp, r7
 8003996:	bc90      	pop	{r4, r7}
 8003998:	4770      	bx	lr

0800399a <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 800399a:	b5b0      	push	{r4, r5, r7, lr}
 800399c:	b08c      	sub	sp, #48	; 0x30
 800399e:	af02      	add	r7, sp, #8
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3318      	adds	r3, #24
 80039a8:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 80039be:	2300      	movs	r3, #0
 80039c0:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 80039ca:	2318      	movs	r3, #24
 80039cc:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 80039ce:	f107 0314 	add.w	r3, r7, #20
 80039d2:	461a      	mov	r2, r3
 80039d4:	f248 018f 	movw	r1, #32911	; 0x808f
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f002 fbd3 	bl	8006184 <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 80039de:	f107 0310 	add.w	r3, r7, #16
 80039e2:	461a      	mov	r2, r3
 80039e4:	f248 018e 	movw	r1, #32910	; 0x808e
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f002 fbcb 	bl	8006184 <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80039f4:	330d      	adds	r3, #13
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f040 811a 	bne.w	8003c32 <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf0c      	ite	eq
 8003a0c:	2301      	moveq	r3, #1
 8003a0e:	2300      	movne	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8003a18:	7efb      	ldrb	r3, [r7, #27]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	7eba      	ldrb	r2, [r7, #26]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <vl53lx_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003a38:	330c      	adds	r3, #12
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a42:	e004      	b.n	8003a4e <vl53lx_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8003a4e:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8003a52:	7efb      	ldrb	r3, [r7, #27]
 8003a54:	69f8      	ldr	r0, [r7, #28]
 8003a56:	461a      	mov	r2, r3
 8003a58:	0052      	lsls	r2, r2, #1
 8003a5a:	441a      	add	r2, r3
 8003a5c:	0153      	lsls	r3, r2, #5
 8003a5e:	461a      	mov	r2, r3
 8003a60:	460b      	mov	r3, r1
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	440b      	add	r3, r1
 8003a66:	019b      	lsls	r3, r3, #6
 8003a68:	4413      	add	r3, r2
 8003a6a:	4403      	add	r3, r0
 8003a6c:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	dd0c      	ble.n	8003a90 <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 8003a76:	7e79      	ldrb	r1, [r7, #25]
 8003a78:	7efa      	ldrb	r2, [r7, #27]
 8003a7a:	f107 030c 	add.w	r3, r7, #12
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	460b      	mov	r3, r1
 8003a88:	6839      	ldr	r1, [r7, #0]
 8003a8a:	69f8      	ldr	r0, [r7, #28]
 8003a8c:	f7ff fef4 	bl	8003878 <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	db23      	blt.n	8003ae0 <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003a9e:	3310      	adds	r3, #16
 8003aa0:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f011 f8b2 	bl	8014c10 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003ab2:	330c      	adds	r3, #12
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	701a      	strb	r2, [r3, #0]

			recom_been_reset = 1;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8003abe:	7efb      	ldrb	r3, [r7, #27]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d106      	bne.n	8003ad2 <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003aca:	330d      	adds	r3, #13
 8003acc:	2206      	movs	r2, #6
 8003ace:	701a      	strb	r2, [r3, #0]
 8003ad0:	e034      	b.n	8003b3c <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003ad8:	330d      	adds	r3, #13
 8003ada:	2207      	movs	r2, #7
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	e02d      	b.n	8003b3c <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 8003aec:	2300      	movs	r3, #0
 8003aee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003af2:	e01e      	b.n	8003b32 <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8003af4:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 8003af8:	7e39      	ldrb	r1, [r7, #24]
 8003afa:	7efb      	ldrb	r3, [r7, #27]
 8003afc:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	3006      	adds	r0, #6
 8003b04:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8003b08:	69f8      	ldr	r0, [r7, #28]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	0052      	lsls	r2, r2, #1
 8003b0e:	441a      	add	r2, r3
 8003b10:	00d3      	lsls	r3, r2, #3
 8003b12:	461a      	mov	r2, r3
 8003b14:	460b      	mov	r3, r1
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	440b      	add	r3, r1
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	4413      	add	r3, r2
 8003b1e:	442b      	add	r3, r5
 8003b20:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8003b24:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8003b28:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003b32:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003b36:	7ebb      	ldrb	r3, [r7, #26]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d3db      	bcc.n	8003af4 <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003b42:	330c      	adds	r3, #12
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d109      	bne.n	8003b64 <vl53lx_histo_merge+0x1ca>
 8003b50:	7efb      	ldrb	r3, [r7, #27]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d106      	bne.n	8003b64 <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
 8003b62:	e00e      	b.n	8003b82 <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 8003b64:	7efb      	ldrb	r3, [r7, #27]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d10b      	bne.n	8003b82 <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003b70:	330c      	adds	r3, #12
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003b7e:	330c      	adds	r3, #12
 8003b80:	701a      	strb	r2, [r3, #0]

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8003b82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d102      	bne.n	8003b90 <vl53lx_histo_merge+0x1f6>
 8003b8a:	7efb      	ldrb	r3, [r7, #27]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d069      	beq.n	8003c64 <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003b96:	330d      	adds	r3, #13
 8003b98:	781b      	ldrb	r3, [r3, #0]
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d162      	bne.n	8003c64 <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ba2:	e008      	b.n	8003bb6 <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 8003ba4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	3206      	adds	r2, #6
 8003baa:	2100      	movs	r1, #0
 8003bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8003bb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003bb6:	7ebb      	ldrb	r3, [r7, #26]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d3f1      	bcc.n	8003ba4 <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003bc4:	e02f      	b.n	8003c26 <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003bcc:	e023      	b.n	8003c16 <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 8003bce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	3206      	adds	r2, #6
 8003bd4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 8003bd8:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003bdc:	7efb      	ldrb	r3, [r7, #27]
 8003bde:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8003be0:	69fc      	ldr	r4, [r7, #28]
 8003be2:	461a      	mov	r2, r3
 8003be4:	0052      	lsls	r2, r2, #1
 8003be6:	441a      	add	r2, r3
 8003be8:	00d3      	lsls	r3, r2, #3
 8003bea:	461a      	mov	r2, r3
 8003bec:	460b      	mov	r3, r1
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	440b      	add	r3, r1
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	4413      	add	r3, r2
 8003bf6:	442b      	add	r3, r5
 8003bf8:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8003bfc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8003c00:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003c02:	18c1      	adds	r1, r0, r3
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	3206      	adds	r2, #6
 8003c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 8003c0c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c10:	3301      	adds	r3, #1
 8003c12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003c16:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	dbd6      	blt.n	8003bce <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 8003c20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003c22:	3301      	adds	r3, #1
 8003c24:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003c26:	7ebb      	ldrb	r3, [r7, #26]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d3ca      	bcc.n	8003bc6 <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8003c30:	e018      	b.n	8003c64 <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003c38:	330d      	adds	r3, #13
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003c46:	330d      	adds	r3, #13
 8003c48:	701a      	strb	r2, [r3, #0]
		if (pdev->pos_before_next_recom == 255)
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003c50:	330d      	adds	r3, #13
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2bff      	cmp	r3, #255	; 0xff
 8003c56:	d105      	bne.n	8003c64 <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003c5e:	330d      	adds	r3, #13
 8003c60:	2200      	movs	r2, #0
 8003c62:	701a      	strb	r2, [r3, #0]
}
 8003c64:	bf00      	nop
 8003c66:	3728      	adds	r7, #40	; 0x28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bdb0      	pop	{r4, r5, r7, pc}

08003c6c <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b0c6      	sub	sp, #280	; 0x118
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	1d3b      	adds	r3, r7, #4
 8003c74:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003c76:	2300      	movs	r3, #0
 8003c78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8003c82:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d108      	bne.n	8003c9c <VL53LX_load_patch+0x30>
		status = VL53LX_WrByte(Dev,
 8003c8a:	1d3b      	adds	r3, r7, #4
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2185      	movs	r1, #133	; 0x85
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	f00d fdc3 	bl	801181c <VL53LX_WrByte>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003c9c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d103      	bne.n	8003cac <VL53LX_load_patch+0x40>
		VL53LX_enable_powerforce(Dev);
 8003ca4:	1d3b      	adds	r3, r7, #4
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	f005 f9b5 	bl	8009016 <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 8003cac:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8003cb0:	1d3b      	adds	r3, r7, #4
 8003cb2:	f248 018c 	movw	r1, #32908	; 0x808c
 8003cb6:	6818      	ldr	r0, [r3, #0]
 8003cb8:	f002 fa64 	bl	8006184 <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8003cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d81b      	bhi.n	8003cfc <VL53LX_load_patch+0x90>
 8003cc4:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <VL53LX_load_patch+0x60>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003cdd 	.word	0x08003cdd
 8003cd0:	08003ce5 	.word	0x08003ce5
 8003cd4:	08003ced 	.word	0x08003ced
 8003cd8:	08003cf5 	.word	0x08003cf5
	case 0:
		patch_power = 0x00;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003ce2:	e00e      	b.n	8003d02 <VL53LX_load_patch+0x96>
	case 1:
		patch_power = 0x10;
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003cea:	e00a      	b.n	8003d02 <VL53LX_load_patch+0x96>
	case 2:
		patch_power = 0x20;
 8003cec:	2320      	movs	r3, #32
 8003cee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003cf2:	e006      	b.n	8003d02 <VL53LX_load_patch+0x96>
	case 3:
		patch_power = 0x40;
 8003cf4:	2340      	movs	r3, #64	; 0x40
 8003cf6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003cfa:	e002      	b.n	8003d02 <VL53LX_load_patch+0x96>
	default:
		patch_power = 0x00;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 8003d02:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d125      	bne.n	8003d56 <VL53LX_load_patch+0xea>

		comms_buffer[0] = 0x29;
 8003d0a:	f107 030c 	add.w	r3, r7, #12
 8003d0e:	2229      	movs	r2, #41	; 0x29
 8003d10:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8003d12:	f107 030c 	add.w	r3, r7, #12
 8003d16:	22c9      	movs	r2, #201	; 0xc9
 8003d18:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8003d1a:	f107 030c 	add.w	r3, r7, #12
 8003d1e:	220e      	movs	r2, #14
 8003d20:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8003d22:	f107 030c 	add.w	r3, r7, #12
 8003d26:	2240      	movs	r2, #64	; 0x40
 8003d28:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8003d2a:	f107 030c 	add.w	r3, r7, #12
 8003d2e:	2228      	movs	r2, #40	; 0x28
 8003d30:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8003d32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	f107 030c 	add.w	r3, r7, #12
 8003d3c:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 8003d3e:	f107 020c 	add.w	r2, r7, #12
 8003d42:	1d38      	adds	r0, r7, #4
 8003d44:	2306      	movs	r3, #6
 8003d46:	f240 4176 	movw	r1, #1142	; 0x476
 8003d4a:	6800      	ldr	r0, [r0, #0]
 8003d4c:	f00d fcfa 	bl	8011744 <VL53LX_WriteMulti>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8003d56:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d123      	bne.n	8003da6 <VL53LX_load_patch+0x13a>
		comms_buffer[0] = 0x03;
 8003d5e:	f107 030c 	add.w	r3, r7, #12
 8003d62:	2203      	movs	r2, #3
 8003d64:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8003d66:	f107 030c 	add.w	r3, r7, #12
 8003d6a:	226d      	movs	r2, #109	; 0x6d
 8003d6c:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8003d6e:	f107 030c 	add.w	r3, r7, #12
 8003d72:	2203      	movs	r2, #3
 8003d74:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8003d76:	f107 030c 	add.w	r3, r7, #12
 8003d7a:	226f      	movs	r2, #111	; 0x6f
 8003d7c:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8003d7e:	f107 030c 	add.w	r3, r7, #12
 8003d82:	2207      	movs	r2, #7
 8003d84:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8003d86:	f107 030c 	add.w	r3, r7, #12
 8003d8a:	2229      	movs	r2, #41	; 0x29
 8003d8c:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 8003d8e:	f107 020c 	add.w	r2, r7, #12
 8003d92:	1d38      	adds	r0, r7, #4
 8003d94:	2306      	movs	r3, #6
 8003d96:	f240 4196 	movw	r1, #1174	; 0x496
 8003d9a:	6800      	ldr	r0, [r0, #0]
 8003d9c:	f00d fcd2 	bl	8011744 <VL53LX_WriteMulti>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 8003da6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d113      	bne.n	8003dd6 <VL53LX_load_patch+0x16a>
		comms_buffer[0] = 0x00;
 8003dae:	f107 030c 	add.w	r3, r7, #12
 8003db2:	2200      	movs	r2, #0
 8003db4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8003db6:	f107 030c 	add.w	r3, r7, #12
 8003dba:	2207      	movs	r2, #7
 8003dbc:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8003dbe:	f107 020c 	add.w	r2, r7, #12
 8003dc2:	1d38      	adds	r0, r7, #4
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	f240 4172 	movw	r1, #1138	; 0x472
 8003dca:	6800      	ldr	r0, [r0, #0]
 8003dcc:	f00d fcba 	bl	8011744 <VL53LX_WriteMulti>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 8003dd6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d113      	bne.n	8003e06 <VL53LX_load_patch+0x19a>
		comms_buffer[0] = 0x00;
 8003dde:	f107 030c 	add.w	r3, r7, #12
 8003de2:	2200      	movs	r2, #0
 8003de4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8003de6:	f107 030c 	add.w	r3, r7, #12
 8003dea:	2207      	movs	r2, #7
 8003dec:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8003dee:	f107 020c 	add.w	r2, r7, #12
 8003df2:	1d38      	adds	r0, r7, #4
 8003df4:	2302      	movs	r3, #2
 8003df6:	f240 4174 	movw	r1, #1140	; 0x474
 8003dfa:	6800      	ldr	r0, [r0, #0]
 8003dfc:	f00d fca2 	bl	8011744 <VL53LX_WriteMulti>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 8003e06:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <VL53LX_load_patch+0x1b6>
		status = VL53LX_WrByte(Dev,
 8003e0e:	1d3b      	adds	r3, r7, #4
 8003e10:	2201      	movs	r2, #1
 8003e12:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	f00d fd00 	bl	801181c <VL53LX_WrByte>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 8003e22:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d108      	bne.n	8003e3c <VL53LX_load_patch+0x1d0>
		status = VL53LX_WrByte(Dev,
 8003e2a:	1d3b      	adds	r3, r7, #4
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	2185      	movs	r1, #133	; 0x85
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	f00d fcf3 	bl	801181c <VL53LX_WrByte>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8003e3c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop

08003e4c <VL53LX_unload_patch>:

VL53LX_Error VL53LX_unload_patch(VL53LX_DEV Dev)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE)
 8003e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d106      	bne.n	8003e6e <VL53LX_unload_patch+0x22>
		status = VL53LX_WrByte(Dev,
 8003e60:	2200      	movs	r2, #0
 8003e62:	2185      	movs	r1, #133	; 0x85
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f00d fcd9 	bl	801181c <VL53LX_WrByte>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d102      	bne.n	8003e7c <VL53LX_unload_patch+0x30>
		VL53LX_disable_powerforce(Dev);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f005 f8df 	bl	800903a <VL53LX_disable_powerforce>

	if (status == VL53LX_ERROR_NONE)
 8003e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d107      	bne.n	8003e94 <VL53LX_unload_patch+0x48>
		status = VL53LX_WrByte(Dev,
 8003e84:	2200      	movs	r2, #0
 8003e86:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f00d fcc6 	bl	801181c <VL53LX_WrByte>
 8003e90:	4603      	mov	r3, r0
 8003e92:	73fb      	strb	r3, [r7, #15]
		VL53LX_PATCH__CTRL, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <VL53LX_unload_patch+0x5e>
		status = VL53LX_WrByte(Dev,
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	2185      	movs	r1, #133	; 0x85
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f00d fcbb 	bl	801181c <VL53LX_WrByte>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8003eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8003eb6:	b5b0      	push	{r4, r5, r7, lr}
 8003eb8:	b08a      	sub	sp, #40	; 0x28
 8003eba:	af04      	add	r7, sp, #16
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3318      	adds	r3, #24
 8003eca:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003ed2:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 8003ed8:	2162      	movs	r1, #98	; 0x62
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f004 f920 	bl	8008120 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2204      	movs	r2, #4
 8003ee4:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2205      	movs	r2, #5
 8003ef0:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	pres->zone_results.active_zones    = 0;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003efc:	2300      	movs	r3, #0
 8003efe:	75bb      	strb	r3, [r7, #22]
 8003f00:	e01b      	b.n	8003f3a <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 8003f02:	7dba      	ldrb	r2, [r7, #22]
 8003f04:	4613      	mov	r3, r2
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	4413      	add	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	3308      	adds	r3, #8
 8003f16:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2200      	movs	r2, #0
 8003f22:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003f34:	7dbb      	ldrb	r3, [r7, #22]
 8003f36:	3301      	adds	r3, #1
 8003f38:	75bb      	strb	r3, [r7, #22]
 8003f3a:	7dbb      	ldrb	r3, [r7, #22]
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d9e0      	bls.n	8003f02 <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2205      	movs	r2, #5
 8003f44:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
	pres->zone_hists.active_zones      = 0;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2205      	movs	r2, #5
 8003f54:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
	pres->zone_cal.active_zones        = 0;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003f60:	2300      	movs	r3, #0
 8003f62:	75bb      	strb	r3, [r7, #22]
 8003f64:	e039      	b.n	8003fda <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 8003f66:	7dba      	ldrb	r2, [r7, #22]
 8003f68:	68f9      	ldr	r1, [r7, #12]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	1a9b      	subs	r3, r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 8003f7c:	7dba      	ldrb	r2, [r7, #22]
 8003f7e:	68f9      	ldr	r1, [r7, #12]
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 8003f92:	7dba      	ldrb	r2, [r7, #22]
 8003f94:	68f9      	ldr	r1, [r7, #12]
 8003f96:	4613      	mov	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 8003fa8:	7dba      	ldrb	r2, [r7, #22]
 8003faa:	68f9      	ldr	r1, [r7, #12]
 8003fac:	4613      	mov	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 8003fbe:	7dba      	ldrb	r2, [r7, #22]
 8003fc0:	68f9      	ldr	r1, [r7, #12]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003fd4:	7dbb      	ldrb	r3, [r7, #22]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	75bb      	strb	r3, [r7, #22]
 8003fda:	7dbb      	ldrb	r3, [r7, #22]
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d9c2      	bls.n	8003f66 <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	221e      	movs	r2, #30
 8003fea:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	2201      	movs	r2, #1
 8004002:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	2201      	movs	r2, #1
 8004008:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004010:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004018:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8004020:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2264      	movs	r2, #100	; 0x64
 8004026:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800402e:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800403e:	3302      	adds	r3, #2
 8004040:	2203      	movs	r2, #3
 8004042:	701a      	strb	r2, [r3, #0]
	pdev->offset_results.active_results = 0;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 800404a:	3303      	adds	r3, #3
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]



	pdev->gain_cal.standard_ranging_gain_factor =
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f240 72db 	movw	r2, #2011	; 0x7db
 8004056:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8004060:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f004 f83f 	bl	80080e8 <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8004070:	3310      	adds	r3, #16
 8004072:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f010 fdc9 	bl	8014c10 <memset>
	pdev->bin_rec_pos = 0;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8004084:	330c      	adds	r3, #12
 8004086:	2200      	movs	r2, #0
 8004088:	701a      	strb	r2, [r3, #0]
	pdev->pos_before_next_recom = 0;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8004090:	330d      	adds	r3, #13
 8004092:	2200      	movs	r2, #0
 8004094:	701a      	strb	r2, [r3, #0]



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 8004096:	78fb      	ldrb	r3, [r7, #3]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <VL53LX_data_init+0x1f8>
 800409c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d104      	bne.n	80040ae <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f8b7 	bl	8004218 <VL53LX_read_p2p_data>
 80040aa:	4603      	mov	r3, r0
 80040ac:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 80040ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d107      	bne.n	80040c6 <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040bc:	4618      	mov	r0, r3
 80040be:	f002 ffdf 	bl	8007080 <VL53LX_init_refspadchar_config_struct>
 80040c2:	4603      	mov	r3, r0
 80040c4:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 80040c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d107      	bne.n	80040de <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040d4:	4618      	mov	r0, r3
 80040d6:	f002 fff7 	bl	80070c8 <VL53LX_init_ssc_config_struct>
 80040da:	4603      	mov	r3, r0
 80040dc:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 80040de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10b      	bne.n	80040fe <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f003 f808 	bl	800710a <VL53LX_init_xtalk_config_struct>
 80040fa:	4603      	mov	r3, r0
 80040fc:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 80040fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d107      	bne.n	8004116 <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800410c:	4618      	mov	r0, r3
 800410e:	f003 f86f 	bl	80071f0 <VL53LX_init_xtalk_extract_config_struct>
 8004112:	4603      	mov	r3, r0
 8004114:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 8004116:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d107      	bne.n	800412e <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004124:	4618      	mov	r0, r3
 8004126:	f003 f892 	bl	800724e <VL53LX_init_offset_cal_config_struct>
 800412a:	4603      	mov	r3, r0
 800412c:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 800412e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d107      	bne.n	8004146 <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 800413c:	4618      	mov	r0, r3
 800413e:	f003 f8ad 	bl	800729c <VL53LX_init_zone_cal_config_struct>
 8004142:	4603      	mov	r3, r0
 8004144:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 8004146:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10b      	bne.n	8004166 <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800415a:	4619      	mov	r1, r3
 800415c:	4610      	mov	r0, r2
 800415e:	f003 f8c1 	bl	80072e4 <VL53LX_init_hist_post_process_config_struct>
 8004162:	4603      	mov	r3, r0
 8004164:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 8004166:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d107      	bne.n	800417e <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8004174:	4618      	mov	r0, r3
 8004176:	f003 fac0 	bl	80076fa <VL53LX_init_hist_gen3_dmax_config_struct>
 800417a:	4603      	mov	r3, r0
 800417c:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 800417e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <VL53LX_data_init+0x2de>
		status = VL53LX_init_tuning_parm_storage_struct(
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	33f8      	adds	r3, #248	; 0xf8
 800418a:	4618      	mov	r0, r3
 800418c:	f003 f919 	bl	80073c2 <VL53LX_init_tuning_parm_storage_struct>
 8004190:	4603      	mov	r3, r0
 8004192:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 8004194:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d116      	bne.n	80041ca <VL53LX_data_init+0x314>
		status = VL53LX_set_preset_mode(
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	7858      	ldrb	r0, [r3, #1]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	8b1c      	ldrh	r4, [r3, #24]
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	689d      	ldr	r5, [r3, #8]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	6912      	ldr	r2, [r2, #16]
 80041b0:	6939      	ldr	r1, [r7, #16]
 80041b2:	6949      	ldr	r1, [r1, #20]
 80041b4:	9102      	str	r1, [sp, #8]
 80041b6:	9201      	str	r2, [sp, #4]
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	462b      	mov	r3, r5
 80041bc:	4622      	mov	r2, r4
 80041be:	4601      	mov	r1, r0
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 fb3e 	bl	8004842 <VL53LX_set_preset_mode>
 80041c6:	4603      	mov	r3, r0
 80041c8:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041d0:	461a      	mov	r2, r3
 80041d2:	2118      	movs	r1, #24
 80041d4:	2000      	movs	r0, #0
 80041d6:	f008 fa30 	bl	800c63a <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 80041e0:	461a      	mov	r2, r3
 80041e2:	2118      	movs	r1, #24
 80041e4:	2000      	movs	r0, #0
 80041e6:	f008 fa28 	bl	800c63a <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80041f0:	461a      	mov	r2, r3
 80041f2:	210c      	movs	r1, #12
 80041f4:	2000      	movs	r0, #0
 80041f6:	f004 fd33 	bl	8008c60 <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f007 fc24 	bl	800ba48 <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f007 fb3b 	bl	800b87c <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f007 fc47 	bl	800ba9a <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800420c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bdb0      	pop	{r4, r5, r7, pc}

08004218 <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b091      	sub	sp, #68	; 0x44
 800421c:	af04      	add	r7, sp, #16
 800421e:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8004220:	2300      	movs	r3, #0
 8004222:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3318      	adds	r3, #24
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	3348      	adds	r3, #72	; 0x48
 8004238:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 800423a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423c:	339c      	adds	r3, #156	; 0x9c
 800423e:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8004240:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <VL53LX_read_p2p_data+0x44>
		status = VL53LX_get_static_nvm_managed(
 8004248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424a:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800424e:	4619      	mov	r1, r3
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f00b fbb0 	bl	800f9b6 <VL53LX_get_static_nvm_managed>
 8004256:	4603      	mov	r3, r0
 8004258:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 800425c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004260:	2b00      	cmp	r3, #0
 8004262:	d108      	bne.n	8004276 <VL53LX_read_p2p_data+0x5e>
		status = VL53LX_get_customer_nvm_managed(
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	3348      	adds	r3, #72	; 0x48
 8004268:	4619      	mov	r1, r3
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f00b fce1 	bl	800fc32 <VL53LX_get_customer_nvm_managed>
 8004270:	4603      	mov	r3, r0
 8004272:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 8004276:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800427a:	2b00      	cmp	r3, #0
 800427c:	d117      	bne.n	80042ae <VL53LX_read_p2p_data+0x96>

		status = VL53LX_get_nvm_copy_data(
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	f203 3392 	addw	r3, r3, #914	; 0x392
 8004284:	4619      	mov	r1, r3
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f00c fbdd 	bl	8010a46 <VL53LX_get_nvm_copy_data>
 800428c:	4603      	mov	r3, r0
 800428e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 8004292:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <VL53LX_read_p2p_data+0x96>
			VL53LX_copy_rtn_good_spads_to_buffer(
 800429a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429c:	f203 3292 	addw	r2, r3, #914	; 0x392
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80042a6:	4619      	mov	r1, r3
 80042a8:	4610      	mov	r0, r2
 80042aa:	f004 fa2f 	bl	800870c <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 80042ae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10e      	bne.n	80042d4 <VL53LX_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	895b      	ldrh	r3, [r3, #10]
 80042ba:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 80042d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d108      	bne.n	80042ee <VL53LX_read_p2p_data+0xd6>
		status =
			VL53LX_read_nvm_optical_centre(
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	33c0      	adds	r3, #192	; 0xc0
 80042e0:	4619      	mov	r1, r3
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f00b fa1b 	bl	800f71e <VL53LX_read_nvm_optical_centre>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 80042ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d108      	bne.n	8004308 <VL53LX_read_p2p_data+0xf0>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	3360      	adds	r3, #96	; 0x60
 80042fa:	4619      	mov	r1, r3
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f00b fa31 	bl	800f764 <VL53LX_read_nvm_cal_peak_rate_map>
 8004302:	4603      	mov	r3, r0
 8004304:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 8004308:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800430c:	2b00      	cmp	r3, #0
 800430e:	d12d      	bne.n	800436c <VL53LX_read_p2p_data+0x154>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	339c      	adds	r3, #156	; 0x9c
 8004314:	4619      	mov	r1, r3
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f00b fa4a 	bl	800f7b0 <VL53LX_read_nvm_additional_offset_cal_data>
 800431c:	4603      	mov	r3, r0
 800431e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	889b      	ldrh	r3, [r3, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d120      	bne.n	800436c <VL53LX_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 800432e:	2b00      	cmp	r3, #0
 8004330:	d11c      	bne.n	800436c <VL53LX_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	2280      	movs	r2, #128	; 0x80
 8004336:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800433e:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	f893 03c2 	ldrb.w	r0, [r3, #962]	; 0x3c2
 8004346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004348:	f893 43c3 	ldrb.w	r4, [r3, #963]	; 0x3c3
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	69f9      	ldr	r1, [r7, #28]
 8004356:	3102      	adds	r1, #2
 8004358:	9103      	str	r1, [sp, #12]
 800435a:	9202      	str	r2, [sp, #8]
 800435c:	2238      	movs	r2, #56	; 0x38
 800435e:	9201      	str	r2, [sp, #4]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	23ff      	movs	r3, #255	; 0xff
 8004364:	22c7      	movs	r2, #199	; 0xc7
 8004366:	4621      	mov	r1, r4
 8004368:	f006 f97a 	bl	800a660 <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 800436c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004370:	2b00      	cmp	r3, #0
 8004372:	d12f      	bne.n	80043d4 <VL53LX_read_p2p_data+0x1bc>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 8004374:	f107 030c 	add.w	r3, r7, #12
 8004378:	461a      	mov	r2, r3
 800437a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f00b fa39 	bl	800f7f6 <VL53LX_read_nvm_fmt_range_results_data>
 8004384:	4603      	mov	r3, r0
 8004386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 800438a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800438e:	2b00      	cmp	r3, #0
 8004390:	d120      	bne.n	80043d4 <VL53LX_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8004392:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 800439a:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 80043a2:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d006      	beq.n	80043c2 <VL53LX_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 80043c0:	e003      	b.n	80043ca <VL53LX_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 80043c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c4:	2214      	movs	r2, #20
 80043c6:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043d0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 80043d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10b      	bne.n	80043f4 <VL53LX_read_p2p_data+0x1dc>
		status =
			VL53LX_RdWord(
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80043e2:	3304      	adds	r3, #4
 80043e4:	461a      	mov	r2, r3
 80043e6:	21de      	movs	r1, #222	; 0xde
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f00d faa7 	bl	801193c <VL53LX_RdWord>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 80043f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f6:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 80043fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fe:	d204      	bcs.n	800440a <VL53LX_read_p2p_data+0x1f2>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8004406:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
	}



	if (status == VL53LX_ERROR_NONE)
 800440a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800440e:	2b00      	cmp	r3, #0
 8004410:	d108      	bne.n	8004424 <VL53LX_read_p2p_data+0x20c>
		status =
			VL53LX_get_mode_mitigation_roi(
 8004412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004414:	33bc      	adds	r3, #188	; 0xbc
 8004416:	4619      	mov	r1, r3
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f91a 	bl	8004652 <VL53LX_get_mode_mitigation_roi>
 800441e:	4603      	mov	r3, r0
 8004420:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d114      	bne.n	8004458 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 800442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004430:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10f      	bne.n	8004458 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8004442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004444:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8004458:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800445c:	4618      	mov	r0, r3
 800445e:	3734      	adds	r7, #52	; 0x34
 8004460:	46bd      	mov	sp, r7
 8004462:	bd90      	pop	{r4, r7, pc}

08004464 <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800446e:	2300      	movs	r3, #0
 8004470:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3318      	adds	r3, #24
 8004476:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800447e:	3304      	adds	r3, #4
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <VL53LX_set_inter_measurement_period_ms+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8004486:	23f1      	movs	r3, #241	; 0xf1
 8004488:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 800448a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10e      	bne.n	80044b0 <VL53LX_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 800449e:	3304      	adds	r3, #4
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	}

	LOG_FUNCTION_END(status);

	return status;
 80044b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3318      	adds	r3, #24
 80044d6:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <VL53LX_set_timeouts_us+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80044e2:	23f1      	movs	r3, #241	; 0xf1
 80044e4:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 80044e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d11b      	bne.n	8004526 <VL53LX_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f8b3 12de 	ldrh.w	r1, [r3, #734]	; 0x2de
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f203 331e 	addw	r3, r3, #798	; 0x31e
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	f502 724d 	add.w	r2, r2, #820	; 0x334
 8004512:	9201      	str	r2, [sp, #4]
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	460b      	mov	r3, r1
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	68b8      	ldr	r0, [r7, #8]
 800451e:	f004 ff42 	bl	80093a6 <VL53LX_calc_timeout_register_values>
 8004522:	4603      	mov	r3, r0
 8004524:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8004526:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b088      	sub	sp, #32
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004540:	2300      	movs	r3, #0
 8004542:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3318      	adds	r3, #24
 8004548:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800454a:	2300      	movs	r3, #0
 800454c:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <VL53LX_get_timeouts_us+0x2e>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800455c:	23f1      	movs	r3, #241	; 0xf1
 800455e:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 8004560:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d14a      	bne.n	80045fe <VL53LX_get_timeouts_us+0xcc>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f8b3 22de 	ldrh.w	r2, [r3, #734]	; 0x2de
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 8004574:	4619      	mov	r1, r3
 8004576:	4610      	mov	r0, r2
 8004578:	f004 fd8e 	bl	8009098 <VL53LX_calc_macro_period_us>
 800457c:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
			VL53LX_calc_timeout_us(
 8004584:	6979      	ldr	r1, [r7, #20]
 8004586:	4618      	mov	r0, r3
 8004588:	f004 fe4d 	bl	8009226 <VL53LX_calc_timeout_us>
 800458c:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		timeout_encoded =
 8004598:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800459a:	8a7b      	ldrh	r3, [r7, #18]
 800459c:	021b      	lsls	r3, r3, #8
 800459e:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80045a6:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 80045a8:	4413      	add	r3, r2
 80045aa:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 80045ac:	8a7b      	ldrh	r3, [r7, #18]
 80045ae:	6979      	ldr	r1, [r7, #20]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f004 fe9d 	bl	80092f0 <VL53LX_calc_decoded_timeout_us>
 80045b6:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
		timeout_encoded =
 80045c2:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80045c4:	8a7b      	ldrh	r3, [r7, #18]
 80045c6:	021b      	lsls	r3, r3, #8
 80045c8:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80045d0:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 80045d2:	4413      	add	r3, r2
 80045d4:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 80045d6:	8a7b      	ldrh	r3, [r7, #18]
 80045d8:	6979      	ldr	r1, [r7, #20]
 80045da:	4618      	mov	r0, r3
 80045dc:	f004 fe88 	bl	80092f0 <VL53LX_calc_decoded_timeout_us>
 80045e0:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 80045fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3720      	adds	r7, #32
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b084      	sub	sp, #16
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004614:	2300      	movs	r3, #0
 8004616:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3318      	adds	r3, #24
 800461c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	7858      	ldrb	r0, [r3, #1]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	7819      	ldrb	r1, [r3, #0]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f203 335b 	addw	r3, r3, #859	; 0x35b
 800462c:	461a      	mov	r2, r3
 800462e:	f005 fe94 	bl	800a35a <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	7898      	ldrb	r0, [r3, #2]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	78d9      	ldrb	r1, [r3, #3]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8004640:	461a      	mov	r2, r3
 8004642:	f005 fec9 	bl	800a3d8 <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8004646:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b086      	sub	sp, #24
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800465c:	2300      	movs	r3, #0
 800465e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3318      	adds	r3, #24
 8004664:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800466e:	2300      	movs	r3, #0
 8004670:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f893 33c2 	ldrb.w	r3, [r3, #962]	; 0x3c2
 8004678:	f107 020e 	add.w	r2, r7, #14
 800467c:	f107 010d 	add.w	r1, r7, #13
 8004680:	4618      	mov	r0, r3
 8004682:	f008 f883 	bl	800c78c <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004686:	7bba      	ldrb	r2, [r7, #14]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800468c:	7b7a      	ldrb	r2, [r7, #13]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f893 33c3 	ldrb.w	r3, [r3, #963]	; 0x3c3
 8004698:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 80046b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <VL53LX_init_zone_config_histogram_bins>:

VL53LX_Error VL53LX_init_zone_config_histogram_bins(
	VL53LX_zone_config_t   *pdata)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80046c4:	2300      	movs	r3, #0
 80046c6:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 80046c8:	2300      	movs	r3, #0
 80046ca:	73fb      	strb	r3, [r7, #15]
 80046cc:	e008      	b.n	80046e0 <VL53LX_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	4413      	add	r3, r2
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	for (i = 0; i < pdata->max_zones; i++)
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	3301      	adds	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	7bfa      	ldrb	r2, [r7, #15]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d3f1      	bcc.n	80046ce <VL53LX_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 80046ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <VL53LX_set_zone_config>:

VL53LX_Error VL53LX_set_zone_config(
	VL53LX_DEV                 Dev,
	VL53LX_zone_config_t      *pzone_cfg)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004704:	2300      	movs	r3, #0
 8004706:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3318      	adds	r3, #24
 800470c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	331c      	adds	r3, #28
 8004718:	2214      	movs	r2, #20
 800471a:	4619      	mov	r1, r3
 800471c:	f010 fa6a 	bl	8014bf4 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781a      	ldrb	r2, [r3, #0]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	785a      	ldrb	r2, [r3, #1]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53LX_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	33c2      	adds	r3, #194	; 0xc2
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff ffbf 	bl	80046bc <VL53LX_init_zone_config_histogram_bins>
 800473e:	4603      	mov	r3, r0
 8004740:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	785b      	ldrb	r3, [r3, #1]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d104      	bne.n	8004754 <VL53LX_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8004752:	e00f      	b.n	8004774 <VL53LX_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53LX_MAX_USER_ZONES)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	785b      	ldrb	r3, [r3, #1]
 8004758:	2b04      	cmp	r3, #4
 800475a:	d807      	bhi.n	800476c <VL53LX_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	785b      	ldrb	r3, [r3, #1]
 8004760:	3301      	adds	r3, #1
 8004762:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 800476a:	e003      	b.n	8004774 <VL53LX_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2206      	movs	r2, #6
 8004770:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
				VL53LX_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8004774:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	460b      	mov	r3, r1
 800478e:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004790:	2300      	movs	r3, #0
 8004792:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3318      	adds	r3, #24
 8004798:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800479a:	7afb      	ldrb	r3, [r7, #11]
 800479c:	2b21      	cmp	r3, #33	; 0x21
 800479e:	d030      	beq.n	8004802 <VL53LX_get_preset_mode_timing_cfg+0x82>
 80047a0:	2b21      	cmp	r3, #33	; 0x21
 80047a2:	dc43      	bgt.n	800482c <VL53LX_get_preset_mode_timing_cfg+0xac>
 80047a4:	2b1b      	cmp	r3, #27
 80047a6:	d002      	beq.n	80047ae <VL53LX_get_preset_mode_timing_cfg+0x2e>
 80047a8:	2b1e      	cmp	r3, #30
 80047aa:	d015      	beq.n	80047d8 <VL53LX_get_preset_mode_timing_cfg+0x58>
 80047ac:	e03e      	b.n	800482c <VL53LX_get_preset_mode_timing_cfg+0xac>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
		*pphasecal_config_timeout_us =
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	601a      	str	r2, [r3, #0]

	break;
 80047d6:	e02c      	b.n	8004832 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
		*pphasecal_config_timeout_us =
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	601a      	str	r2, [r3, #0]
	break;
 8004800:	e017      	b.n	8004832 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
		*pphasecal_config_timeout_us =
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	601a      	str	r2, [r3, #0]
	break;
 800482a:	e002      	b.n	8004832 <VL53LX_get_preset_mode_timing_cfg+0xb2>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 800482c:	23fc      	movs	r3, #252	; 0xfc
 800482e:	75fb      	strb	r3, [r7, #23]
		break;
 8004830:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8004832:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004836:	4618      	mov	r0, r3
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b096      	sub	sp, #88	; 0x58
 8004846:	af06      	add	r7, sp, #24
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	607b      	str	r3, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	72fb      	strb	r3, [r7, #11]
 8004850:	4613      	mov	r3, r2
 8004852:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8004854:	2300      	movs	r3, #0
 8004856:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_LLDriverData_t *pdev =
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3318      	adds	r3, #24
 800485e:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004866:	637b      	str	r3, [r7, #52]	; 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 8004868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800486e:	633b      	str	r3, [r7, #48]	; 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8004870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004872:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8004878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487a:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800487e:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8004880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004882:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800488e:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8004890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004892:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004896:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800489e:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 80048a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a2:	33c2      	adds	r3, #194	; 0xc2
 80048a4:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 80048a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a8:	33f8      	adds	r3, #248	; 0xf8
 80048aa:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 80048ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ae:	7afa      	ldrb	r2, [r7, #11]
 80048b0:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 80048b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048b6:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048bc:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80048be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80048c2:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 80048c4:	2103      	movs	r1, #3
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f003 fc2a 	bl	8008120 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 80048cc:	7afb      	ldrb	r3, [r7, #11]
 80048ce:	2b21      	cmp	r3, #33	; 0x21
 80048d0:	d02e      	beq.n	8004930 <VL53LX_set_preset_mode+0xee>
 80048d2:	2b21      	cmp	r3, #33	; 0x21
 80048d4:	dc40      	bgt.n	8004958 <VL53LX_set_preset_mode+0x116>
 80048d6:	2b1b      	cmp	r3, #27
 80048d8:	d002      	beq.n	80048e0 <VL53LX_set_preset_mode+0x9e>
 80048da:	2b1e      	cmp	r3, #30
 80048dc:	d014      	beq.n	8004908 <VL53LX_set_preset_mode+0xc6>
 80048de:	e03b      	b.n	8004958 <VL53LX_set_preset_mode+0x116>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	9304      	str	r3, [sp, #16]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	9303      	str	r3, [sp, #12]
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	9302      	str	r3, [sp, #8]
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048fc:	f003 f941 	bl	8007b82 <VL53LX_preset_mode_histogram_long_range>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004906:	e02b      	b.n	8004960 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	9304      	str	r3, [sp, #16]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	9303      	str	r3, [sp, #12]
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	9302      	str	r3, [sp, #8]
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	9301      	str	r3, [sp, #4]
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004920:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004922:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004924:	f003 f9cb 	bl	8007cbe <VL53LX_preset_mode_histogram_medium_range>
 8004928:	4603      	mov	r3, r0
 800492a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800492e:	e017      	b.n	8004960 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	9304      	str	r3, [sp, #16]
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	9303      	str	r3, [sp, #12]
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	9302      	str	r3, [sp, #8]
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004948:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800494a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800494c:	f003 fa55 	bl	8007dfa <VL53LX_preset_mode_histogram_short_range>
 8004950:	4603      	mov	r3, r0
 8004952:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004956:	e003      	b.n	8004960 <VL53LX_set_preset_mode+0x11e>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8004958:	23fc      	movs	r3, #252	; 0xfc
 800495a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 800495e:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 8004960:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004964:	2b00      	cmp	r3, #0
 8004966:	d105      	bne.n	8004974 <VL53LX_set_preset_mode+0x132>

		pstatic->dss_config__target_total_rate_mcps =
 8004968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496a:	893a      	ldrh	r2, [r7, #8]
 800496c:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004970:	893a      	ldrh	r2, [r7, #8]
 8004972:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 8004974:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004978:	2b00      	cmp	r3, #0
 800497a:	d108      	bne.n	800498e <VL53LX_set_preset_mode+0x14c>
		status =
			VL53LX_set_timeouts_us(
 800497c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f7ff fd9c 	bl	80044c0 <VL53LX_set_timeouts_us>
 8004988:	4603      	mov	r3, r0
 800498a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 800498e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <VL53LX_set_preset_mode+0x162>
		status =
			VL53LX_set_inter_measurement_period_ms(
 8004996:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7ff fd63 	bl	8004464 <VL53LX_set_inter_measurement_period_ms>
 800499e:	4603      	mov	r3, r0
 80049a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 80049aa:	3301      	adds	r3, #1
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b0:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80049b4:	4619      	mov	r1, r3
 80049b6:	4610      	mov	r0, r2
 80049b8:	f003 ffc8 	bl	800894c <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 80049bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3740      	adds	r7, #64	; 0x40
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b0d2      	sub	sp, #328	; 0x148
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	1d3b      	adds	r3, r7, #4
 80049d0:	6018      	str	r0, [r3, #0]
 80049d2:	4608      	mov	r0, r1
 80049d4:	4611      	mov	r1, r2
 80049d6:	1cfb      	adds	r3, r7, #3
 80049d8:	4602      	mov	r2, r0
 80049da:	701a      	strb	r2, [r3, #0]
 80049dc:	1cbb      	adds	r3, r7, #2
 80049de:	460a      	mov	r2, r1
 80049e0:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80049e2:	2300      	movs	r3, #0
 80049e4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80049e8:	1d3b      	adds	r3, r7, #4
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3318      	adds	r3, #24
 80049ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53LX_LLDriverResults_t  *pres =
 80049f2:	1d3b      	adds	r3, r7, #4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80049fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 80049fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a02:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8004a06:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8004a0a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a0e:	3348      	adds	r3, #72	; 0x48
 8004a10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8004a14:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a18:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8004a1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8004a20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a24:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8004a28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004a2c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a30:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8004a34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8004a38:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a3c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004a40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004a44:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a48:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004a4c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8004a50:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a54:	332c      	adds	r3, #44	; 0x2c
 8004a56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8004a5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a5e:	3348      	adds	r3, #72	; 0x48
 8004a60:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8004a64:	f107 030c 	add.w	r3, r7, #12
 8004a68:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8004a84:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004a88:	1cfa      	adds	r2, r7, #3
 8004a8a:	7812      	ldrb	r2, [r2, #0]
 8004a8c:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8004a8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004a92:	791b      	ldrb	r3, [r3, #4]
 8004a94:	b25b      	sxtb	r3, r3
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8004a9c:	1cfb      	adds	r3, r7, #3
 8004a9e:	f993 3000 	ldrsb.w	r3, [r3]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	b25b      	sxtb	r3, r3
 8004aa6:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8004aa8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004aac:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8004aae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004ab2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53LX_set_user_zone(
 8004ab6:	3336      	adds	r3, #54	; 0x36
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004abe:	4413      	add	r3, r2
 8004ac0:	1d9a      	adds	r2, r3, #6
 8004ac2:	1d3b      	adds	r3, r7, #4
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	f7ff fd9f 	bl	800460a <VL53LX_set_user_zone>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 8004ad2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004ad6:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d016      	beq.n	8004b0c <VL53LX_init_and_start_range+0x144>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 8004ade:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004ae2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004ae6:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004af4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004af8:	4413      	add	r3, r2
 8004afa:	1c9a      	adds	r2, r3, #2
 8004afc:	1d3b      	adds	r3, r7, #4
 8004afe:	4611      	mov	r1, r2
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	f001 fad7 	bl	80060b4 <VL53LX_set_zone_dss_config>
 8004b06:	4603      	mov	r3, r0
 8004b08:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8004b0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b10:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10d      	bne.n	8004b38 <VL53LX_init_and_start_range+0x170>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8004b1c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d107      	bne.n	8004b38 <VL53LX_init_and_start_range+0x170>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8004b28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b2c:	f8b3 22a4 	ldrh.w	r2, [r3, #676]	; 0x2a4
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8004b30:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b34:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8004b38:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b3c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004b40:	3312      	adds	r3, #18
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2bff      	cmp	r3, #255	; 0xff
 8004b46:	d106      	bne.n	8004b56 <VL53LX_init_and_start_range+0x18e>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8004b48:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b4c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004b50:	3312      	adds	r3, #18
 8004b52:	2200      	movs	r2, #0
 8004b54:	701a      	strb	r2, [r3, #0]


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004b56:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b5a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004b5e:	3311      	adds	r3, #17
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d133      	bne.n	8004bce <VL53LX_init_and_start_range+0x206>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8004b66:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b6a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004b6e:	3312      	adds	r3, #18
 8004b70:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d12b      	bne.n	8004bce <VL53LX_init_and_start_range+0x206>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8004b76:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b7a:	f893 2320 	ldrb.w	r2, [r3, #800]	; 0x320
		pdev->low_power_auto_data.saved_interrupt_config =
 8004b7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b82:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004b86:	3313      	adds	r3, #19
 8004b88:	701a      	strb	r2, [r3, #0]

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8004b8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		if ((pdev->dyn_cfg.system__sequence_config & (
 8004b94:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004b98:	f893 335d 	ldrb.w	r3, [r3, #861]	; 0x35d
 8004b9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <VL53LX_init_and_start_range+0x1f0>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 8004ba4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004ba8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004bac:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8004bae:	b21a      	sxth	r2, r3
 8004bb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004bb4:	825a      	strh	r2, [r3, #18]
 8004bb6:	e003      	b.n	8004bc0 <VL53LX_init_and_start_range+0x1f8>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8004bb8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8004bc0:	1cbb      	adds	r3, r7, #2
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d802      	bhi.n	8004bce <VL53LX_init_and_start_range+0x206>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8004bc8:	1cbb      	adds	r3, r7, #2
 8004bca:	2205      	movs	r2, #5
 8004bcc:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004bce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004bd2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004bd6:	3311      	adds	r3, #17
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d114      	bne.n	8004c08 <VL53LX_init_and_start_range+0x240>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8004bde:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004be2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004be6:	3312      	adds	r3, #18
 8004be8:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d10c      	bne.n	8004c08 <VL53LX_init_and_start_range+0x240>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8004bee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004bf2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004bf6:	3313      	adds	r3, #19
 8004bf8:	781a      	ldrb	r2, [r3, #0]
		pdev->gen_cfg.system__interrupt_config_gpio =
 8004bfa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004bfe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 8004c02:	1cbb      	adds	r3, r7, #2
 8004c04:	2206      	movs	r2, #6
 8004c06:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 8004c08:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d106      	bne.n	8004c1e <VL53LX_init_and_start_range+0x256>
		status = VL53LX_save_cfg_data(Dev);
 8004c10:	1d3b      	adds	r3, r7, #4
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	f005 fe8e 	bl	800a934 <VL53LX_save_cfg_data>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8004c1e:	1cbb      	adds	r3, r7, #2
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	2b05      	cmp	r3, #5
 8004c26:	d827      	bhi.n	8004c78 <VL53LX_init_and_start_range+0x2b0>
 8004c28:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <VL53LX_init_and_start_range+0x268>)
 8004c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2e:	bf00      	nop
 8004c30:	08004c71 	.word	0x08004c71
 8004c34:	08004c69 	.word	0x08004c69
 8004c38:	08004c61 	.word	0x08004c61
 8004c3c:	08004c59 	.word	0x08004c59
 8004c40:	08004c51 	.word	0x08004c51
 8004c44:	08004c49 	.word	0x08004c49
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004c4e:	e017      	b.n	8004c80 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8004c50:	230d      	movs	r3, #13
 8004c52:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004c56:	e013      	b.n	8004c80 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 8004c58:	2324      	movs	r3, #36	; 0x24
 8004c5a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004c5e:	e00f      	b.n	8004c80 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 8004c60:	2344      	movs	r3, #68	; 0x44
 8004c62:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004c66:	e00b      	b.n	8004c80 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 8004c68:	235a      	movs	r3, #90	; 0x5a
 8004c6a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004c6e:	e007      	b.n	8004c80 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 8004c70:	2371      	movs	r3, #113	; 0x71
 8004c72:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004c76:	e003      	b.n	8004c80 <VL53LX_init_and_start_range+0x2b8>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 8004c78:	2383      	movs	r3, #131	; 0x83
 8004c7a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004c7e:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8004c80:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004c84:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8004c88:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8004c8c:	f107 030c 	add.w	r3, r7, #12
 8004c90:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8004c94:	2300      	movs	r3, #0
 8004c96:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8004c9a:	e00b      	b.n	8004cb4 <VL53LX_init_and_start_range+0x2ec>
		*pbuffer++ = 0;
 8004c9c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8004caa:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8004cae:	3301      	adds	r3, #1
 8004cb0:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8004cb4:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8004cb8:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d3ed      	bcc.n	8004c9c <VL53LX_init_and_start_range+0x2d4>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 8004cc0:	1cbb      	adds	r3, r7, #2
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b05      	cmp	r3, #5
 8004cc6:	d917      	bls.n	8004cf8 <VL53LX_init_and_start_range+0x330>
 8004cc8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d113      	bne.n	8004cf8 <VL53LX_init_and_start_range+0x330>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004cd0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004cd4:	f1c3 0301 	rsb	r3, r3, #1
 8004cd8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004cdc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 8004ce0:	f107 020c 	add.w	r2, r7, #12
 8004ce4:	4413      	add	r3, r2
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	210b      	movs	r1, #11
 8004cea:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8004cee:	f00a fdad 	bl	800f84c <VL53LX_i2c_encode_static_nvm_managed>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8004cf8:	1cbb      	adds	r3, r7, #2
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d917      	bls.n	8004d30 <VL53LX_init_and_start_range+0x368>
 8004d00:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d113      	bne.n	8004d30 <VL53LX_init_and_start_range+0x368>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004d08:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004d0c:	f1c3 030d 	rsb	r3, r3, #13
 8004d10:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004d14:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 8004d18:	f107 020c 	add.w	r2, r7, #12
 8004d1c:	4413      	add	r3, r2
 8004d1e:	461a      	mov	r2, r3
 8004d20:	2117      	movs	r1, #23
 8004d22:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8004d26:	f00a fe6d 	bl	800fa04 <VL53LX_i2c_encode_customer_nvm_managed>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8004d30:	1cbb      	adds	r3, r7, #2
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d917      	bls.n	8004d68 <VL53LX_init_and_start_range+0x3a0>
 8004d38:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d113      	bne.n	8004d68 <VL53LX_init_and_start_range+0x3a0>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004d40:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004d44:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8004d48:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004d4c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_config(
 8004d50:	f107 020c 	add.w	r2, r7, #12
 8004d54:	4413      	add	r3, r2
 8004d56:	461a      	mov	r2, r3
 8004d58:	2120      	movs	r1, #32
 8004d5a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8004d5e:	f00a ffb3 	bl	800fcc8 <VL53LX_i2c_encode_static_config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8004d68:	1cbb      	adds	r3, r7, #2
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d917      	bls.n	8004da0 <VL53LX_init_and_start_range+0x3d8>
 8004d70:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d113      	bne.n	8004da0 <VL53LX_init_and_start_range+0x3d8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004d78:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004d7c:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8004d80:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004d84:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_general_config(
 8004d88:	f107 020c 	add.w	r2, r7, #12
 8004d8c:	4413      	add	r3, r2
 8004d8e:	461a      	mov	r2, r3
 8004d90:	2116      	movs	r1, #22
 8004d92:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004d96:	f00b f87a 	bl	800fe8e <VL53LX_i2c_encode_general_config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8004da0:	1cbb      	adds	r3, r7, #2
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d917      	bls.n	8004dd8 <VL53LX_init_and_start_range+0x410>
 8004da8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d113      	bne.n	8004dd8 <VL53LX_init_and_start_range+0x410>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004db0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004db4:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8004db8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004dbc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_timing_config(
 8004dc0:	f107 020c 	add.w	r2, r7, #12
 8004dc4:	4413      	add	r3, r2
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	2117      	movs	r1, #23
 8004dca:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8004dce:	f00b f8e2 	bl	800ff96 <VL53LX_i2c_encode_timing_config>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8004dd8:	1cbb      	adds	r3, r7, #2
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d036      	beq.n	8004e4e <VL53LX_init_and_start_range+0x486>
 8004de0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d132      	bne.n	8004e4e <VL53LX_init_and_start_range+0x486>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004de8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004dec:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8004df0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 8004df4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004df8:	791b      	ldrb	r3, [r3, #4]
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d017      	beq.n	8004e32 <VL53LX_init_and_start_range+0x46a>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 8004e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e06:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8004e08:	f043 0301 	orr.w	r3, r3, #1
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e12:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 8004e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e18:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8004e1a:	f043 0301 	orr.w	r3, r3, #1
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e24:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 8004e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e2a:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8004e2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e30:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004e32:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_dynamic_config(
 8004e36:	f107 020c 	add.w	r2, r7, #12
 8004e3a:	4413      	add	r3, r2
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	2112      	movs	r1, #18
 8004e40:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8004e44:	f00b f929 	bl	801009a <VL53LX_i2c_encode_dynamic_config>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 8004e4e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d113      	bne.n	8004e7e <VL53LX_init_and_start_range+0x4b6>

		i2c_buffer_offset_bytes =
 8004e56:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004e5a:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8004e5e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004e62:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_system_control(
 8004e66:	f107 020c 	add.w	r2, r7, #12
 8004e6a:	4413      	add	r3, r2
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	2105      	movs	r1, #5
 8004e70:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8004e74:	f00b f996 	bl	80101a4 <VL53LX_i2c_encode_system_control>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 8004e7e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10c      	bne.n	8004ea0 <VL53LX_init_and_start_range+0x4d8>
		status =
			VL53LX_WriteMulti(
 8004e86:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8004e8a:	f107 020c 	add.w	r2, r7, #12
 8004e8e:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 8004e92:	1d38      	adds	r0, r7, #4
 8004e94:	6800      	ldr	r0, [r0, #0]
 8004e96:	f00c fc55 	bl	8011744 <VL53LX_WriteMulti>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 8004ea0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d106      	bne.n	8004eb6 <VL53LX_init_and_start_range+0x4ee>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 8004ea8:	1d3b      	adds	r3, r7, #4
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	f003 f968 	bl	8008180 <VL53LX_update_ll_driver_rd_state>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53LX_ERROR_NONE)
 8004eb6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <VL53LX_init_and_start_range+0x504>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 8004ebe:	1d3b      	adds	r3, r7, #4
 8004ec0:	6818      	ldr	r0, [r3, #0]
 8004ec2:	f003 fafd 	bl	80084c0 <VL53LX_update_ll_driver_cfg_state>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 8004ecc:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop

08004edc <VL53LX_stop_range>:


VL53LX_Error VL53LX_stop_range(
	VL53LX_DEV     Dev)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev =
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3318      	adds	r3, #24
 8004eec:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004ef4:	60fb      	str	r3, [r7, #12]
			VL53LXDevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8004efc:	b25b      	sxtb	r3, r3
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	b25b      	sxtb	r3, r3
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8004f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f08:	b25b      	sxtb	r3, r3
 8004f0a:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
			 VL53LX_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53LX_set_system_control(
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f00b f97d 	bl	801021a <VL53LX_set_system_control>
 8004f20:	4603      	mov	r3, r0
 8004f22:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53LX_init_ll_driver_state(
 8004f36:	2103      	movs	r1, #3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f003 f8f1 	bl	8008120 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8004f44:	3301      	adds	r3, #1
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4610      	mov	r0, r2
 8004f52:	f003 fcfb 	bl	800894c <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f003 fd2d 	bl	80089b6 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004f62:	3311      	adds	r3, #17
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d102      	bne.n	8004f70 <VL53LX_stop_range+0x94>
		VL53LX_low_power_auto_data_stop_range(Dev);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f006 fddc 	bl	800bb28 <VL53LX_low_power_auto_data_stop_range>

	return status;
 8004f70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b0c8      	sub	sp, #288	; 0x120
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	1d3b      	adds	r3, r7, #4
 8004f84:	6018      	str	r0, [r3, #0]
 8004f86:	460a      	mov	r2, r1
 8004f88:	1cfb      	adds	r3, r7, #3
 8004f8a:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004f92:	1d3b      	adds	r3, r7, #4
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3318      	adds	r3, #24
 8004f98:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 8004f9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004fa0:	f203 3366 	addw	r3, r3, #870	; 0x366
 8004fa4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 8004fa8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004fac:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8004fb0:	3318      	adds	r3, #24
 8004fb2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8004fb6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004fba:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8004fbe:	331c      	adds	r3, #28
 8004fc0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 8004fc4:	2388      	movs	r3, #136	; 0x88
 8004fc6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8004fd6:	1cfb      	adds	r3, r7, #3
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d008      	beq.n	8004ff0 <VL53LX_get_measurement_results+0x74>
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d10d      	bne.n	8004ffe <VL53LX_get_measurement_results+0x82>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8004fe2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8004fe6:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8004fea:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8004fee:	e00a      	b.n	8005006 <VL53LX_get_measurement_results+0x8a>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8004ff0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8004ff4:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8004ff8:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8004ffc:	e003      	b.n	8005006 <VL53LX_get_measurement_results+0x8a>
	default:
		i2c_buffer_size_bytes =
 8004ffe:	232c      	movs	r3, #44	; 0x2c
 8005000:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8005004:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 8005006:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10c      	bne.n	8005028 <VL53LX_get_measurement_results+0xac>
		status =
			VL53LX_ReadMulti(
 800500e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8005012:	f107 0208 	add.w	r2, r7, #8
 8005016:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800501a:	1d38      	adds	r0, r7, #4
 800501c:	6800      	ldr	r0, [r0, #0]
 800501e:	f00c fbc7 	bl	80117b0 <VL53LX_ReadMulti>
 8005022:	4603      	mov	r3, r0
 8005024:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 8005028:	1cfb      	adds	r3, r7, #3
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d917      	bls.n	8005060 <VL53LX_get_measurement_results+0xe4>
 8005030:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005034:	2b00      	cmp	r3, #0
 8005036:	d113      	bne.n	8005060 <VL53LX_get_measurement_results+0xe4>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005038:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800503c:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8005040:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005044:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_debug_results(
 8005048:	f107 0208 	add.w	r2, r7, #8
 800504c:	4413      	add	r3, r2
 800504e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005052:	4619      	mov	r1, r3
 8005054:	2038      	movs	r0, #56	; 0x38
 8005056:	f00b fa5e 	bl	8010516 <VL53LX_i2c_decode_debug_results>
 800505a:	4603      	mov	r3, r0
 800505c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 8005060:	1cfb      	adds	r3, r7, #3
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d017      	beq.n	8005098 <VL53LX_get_measurement_results+0x11c>
 8005068:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800506c:	2b00      	cmp	r3, #0
 800506e:	d113      	bne.n	8005098 <VL53LX_get_measurement_results+0x11c>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005070:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005074:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8005078:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800507c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_core_results(
 8005080:	f107 0208 	add.w	r2, r7, #8
 8005084:	4413      	add	r3, r2
 8005086:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800508a:	4619      	mov	r1, r3
 800508c:	2021      	movs	r0, #33	; 0x21
 800508e:	f00b f9e1 	bl	8010454 <VL53LX_i2c_decode_core_results>
 8005092:	4603      	mov	r3, r0
 8005094:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 8005098:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800509c:	2b00      	cmp	r3, #0
 800509e:	d110      	bne.n	80050c2 <VL53LX_get_measurement_results+0x146>

		i2c_buffer_offset_bytes = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80050a6:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_system_results(
 80050aa:	f107 0208 	add.w	r2, r7, #8
 80050ae:	4413      	add	r3, r2
 80050b0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80050b4:	4619      	mov	r1, r3
 80050b6:	202c      	movs	r0, #44	; 0x2c
 80050b8:	f00b f8d6 	bl	8010268 <VL53LX_i2c_decode_system_results>
 80050bc:	4603      	mov	r3, r0
 80050be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 80050c2:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 80050d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050d4:	b0a0      	sub	sp, #128	; 0x80
 80050d6:	af06      	add	r7, sp, #24
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	460b      	mov	r3, r1
 80050dc:	607a      	str	r2, [r7, #4]
 80050de:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80050e0:	2300      	movs	r3, #0
 80050e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53LX_LLDriverData_t *pdev =
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	3318      	adds	r3, #24
 80050ea:	663b      	str	r3, [r7, #96]	; 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80050f2:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 80050f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050f6:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 80050f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050fa:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80050fe:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 8005100:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005102:	332c      	adds	r3, #44	; 0x2c
 8005104:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 8005106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005108:	33c2      	adds	r3, #194	; 0xc2
 800510a:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 800510c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800510e:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8005112:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8005114:	f107 0314 	add.w	r3, r7, #20
 8005118:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800511a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800511c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005120:	643b      	str	r3, [r7, #64]	; 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8005122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005124:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005128:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 800512a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800512c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8005130:	3310      	adds	r3, #16
 8005132:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8005134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005136:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800513a:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 800513c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800513e:	3348      	adds	r3, #72	; 0x48
 8005140:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 8005142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005144:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8005148:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 800514a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800514c:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8005150:	331c      	adds	r3, #28
 8005152:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 8005154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005156:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 8290 	beq.w	8005684 <VL53LX_get_device_results+0x5b4>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 8005164:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005166:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800516a:	4619      	mov	r1, r3
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 fbcb 	bl	8005908 <VL53LX_get_histogram_bin_data>
 8005172:	4603      	mov	r3, r0
 8005174:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 8005178:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800517c:	2b00      	cmp	r3, #0
 800517e:	d118      	bne.n	80051b2 <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 8005180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005182:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 8005184:	2b00      	cmp	r3, #0
 8005186:	d114      	bne.n	80051b2 <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 8005188:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800518a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800518e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 8005192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800519a:	4413      	add	r3, r2
 800519c:	1d1a      	adds	r2, r3, #4
 800519e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051a4:	4619      	mov	r1, r3
 80051a6:	4610      	mov	r0, r2
 80051a8:	f004 f976 	bl	8009498 <VL53LX_hist_copy_and_scale_ambient_info>
 80051ac:	4603      	mov	r3, r0
 80051ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 80051b2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f040 8206 	bne.w	80055c8 <VL53LX_get_device_results+0x4f8>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 80051bc:	f107 0313 	add.w	r3, r7, #19
 80051c0:	4619      	mov	r1, r3
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f006 fdd5 	bl	800bd72 <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 80051c8:	7cfb      	ldrb	r3, [r7, #19]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 80051ce:	2301      	movs	r3, #1
 80051d0:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 80051d2:	7cfb      	ldrb	r3, [r7, #19]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 80051da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051dc:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d107      	bne.n	80051f4 <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 80051e4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	3202      	adds	r2, #2
 80051ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80051f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f2:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 80051f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051f6:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 80051fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051fc:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 80051fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005204:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005208:	4619      	mov	r1, r3
 800520a:	4610      	mov	r0, r2
 800520c:	f004 f84a 	bl	80092a4 <VL53LX_calc_crosstalk_plane_offset_with_margin>
 8005210:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8005212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005214:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8005216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005218:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800521c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800521e:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8005220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005222:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8005226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005228:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 800522a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800522c:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 800522e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005230:	f883 2255 	strb.w	r2, [r3, #597]	; 0x255
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8005234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005236:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8005238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800523a:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 800523e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005240:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8005242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005244:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8005248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800524a:	f8b3 22fe 	ldrh.w	r2, [r3, #766]	; 0x2fe
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 800524e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005250:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8005254:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005256:	f893 2331 	ldrb.w	r2, [r3, #817]	; 0x331
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 800525a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800525c:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8005260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005262:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8005266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005268:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 800526a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800526c:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8005270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005272:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8005274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005276:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8005278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800527a:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 800527c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800527e:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8005280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005282:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 8005284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005286:	f203 3292 	addw	r2, r3, #914	; 0x392
 800528a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800528c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8005290:	4619      	mov	r1, r3
 8005292:	4610      	mov	r0, r2
 8005294:	f003 fa3a 	bl	800870c <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8005298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800529a:	795b      	ldrb	r3, [r3, #5]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d002      	beq.n	80052a6 <VL53LX_get_device_results+0x1d6>
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d02e      	beq.n	8005302 <VL53LX_get_device_results+0x232>
 80052a4:	e03d      	b.n	8005322 <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 80052a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052a8:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80052ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 80052bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052be:	f893 e3c2 	ldrb.w	lr, [r3, #962]	; 0x3c2
 80052c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052c4:	f893 83c3 	ldrb.w	r8, [r3, #963]	; 0x3c3
 80052c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ca:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80052ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052d0:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 80052d4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80052d6:	319c      	adds	r1, #156	; 0x9c
 80052d8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80052da:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 80052de:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 80052e2:	b2a4      	uxth	r4, r4
 80052e4:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 80052e6:	351c      	adds	r5, #28
 80052e8:	9505      	str	r5, [sp, #20]
 80052ea:	9404      	str	r4, [sp, #16]
 80052ec:	9003      	str	r0, [sp, #12]
 80052ee:	9102      	str	r1, [sp, #8]
 80052f0:	9201      	str	r2, [sp, #4]
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	4643      	mov	r3, r8
 80052f6:	4672      	mov	r2, lr
 80052f8:	4661      	mov	r1, ip
 80052fa:	4630      	mov	r0, r6
 80052fc:	f004 ff7d 	bl	800a1fa <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 8005300:	e013      	b.n	800532a <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8005302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005304:	331c      	adds	r3, #28
 8005306:	4619      	mov	r1, r3
 8005308:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800530a:	f7fe fa4f 	bl	80037ac <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 800530e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005310:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005314:	b29b      	uxth	r3, r3
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	b29b      	uxth	r3, r3
 800531a:	b21a      	sxth	r2, r3
 800531c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800531e:	839a      	strh	r2, [r3, #28]
		break;
 8005320:	e003      	b.n	800532a <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 8005322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005324:	2200      	movs	r2, #0
 8005326:	839a      	strh	r2, [r3, #28]
		break;
 8005328:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 800532a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800532e:	2b00      	cmp	r3, #0
 8005330:	f040 814c 	bne.w	80055cc <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 8005334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005336:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 800533a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533c:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 8005340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005342:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8005346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005348:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		VL53LX_calc_max_effective_spads(
 800534c:	b29c      	uxth	r4, r3
 800534e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005350:	f203 236a 	addw	r3, r3, #618	; 0x26a
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	4623      	mov	r3, r4
 8005358:	f005 f8f4 	bl	800a544 <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 800535c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800535e:	799b      	ldrb	r3, [r3, #6]
 8005360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005362:	4619      	mov	r1, r3
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 fee2 	bl	800612e <VL53LX_get_dmax_calibration_data>
 800536a:	4603      	mov	r3, r0
 800536c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 8005370:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005374:	2b00      	cmp	r3, #0
 8005376:	f040 812b 	bne.w	80055d0 <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 800537a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800537c:	f503 7515 	add.w	r5, r3, #596	; 0x254
 8005380:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005382:	f503 7605 	add.w	r6, r3, #532	; 0x214
 8005386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005388:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800538c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800538e:	f202 521c 	addw	r2, r2, #1308	; 0x51c
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8005392:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005394:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
				pdev->wArea2,
 8005398:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800539a:	f500 50d0 	add.w	r0, r0, #6656	; 0x1a00
		status = VL53LX_ipp_hist_process_data(
 800539e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80053a0:	9405      	str	r4, [sp, #20]
 80053a2:	f107 0413 	add.w	r4, r7, #19
 80053a6:	9404      	str	r4, [sp, #16]
 80053a8:	9003      	str	r0, [sp, #12]
 80053aa:	9102      	str	r1, [sp, #8]
 80053ac:	9201      	str	r2, [sp, #4]
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	4633      	mov	r3, r6
 80053b2:	462a      	mov	r2, r5
 80053b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f00c fbf0 	bl	8011b9c <VL53LX_ipp_hist_process_data>
 80053bc:	4603      	mov	r3, r0
 80053be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80053c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053c4:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d150      	bne.n	800546e <VL53LX_get_device_results+0x39e>
			(histo_merge_nb > 1))
 80053cc:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d94d      	bls.n	800546e <VL53LX_get_device_results+0x39e>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80053d2:	2300      	movs	r3, #0
 80053d4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80053d8:	e045      	b.n	8005466 <VL53LX_get_device_results+0x396>
			pdata = &(presults->VL53LX_p_003[i]);
 80053da:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80053de:	224c      	movs	r2, #76	; 0x4c
 80053e0:	fb02 f303 	mul.w	r3, r2, r3
 80053e4:	3310      	adds	r3, #16
 80053e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053e8:	4413      	add	r3, r2
 80053ea:	3304      	adds	r3, #4
 80053ec:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	7cfa      	ldrb	r2, [r7, #19]
 80053f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005400:	7cfa      	ldrb	r2, [r7, #19]
 8005402:	fbb3 f2f2 	udiv	r2, r3, r2
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540e:	7cfa      	ldrb	r2, [r7, #19]
 8005410:	fb93 f2f2 	sdiv	r2, r3, r2
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800541c:	461a      	mov	r2, r3
 800541e:	7cfb      	ldrb	r3, [r7, #19]
 8005420:	fb92 f3f3 	sdiv	r3, r2, r3
 8005424:	b29a      	uxth	r2, r3
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800542e:	461a      	mov	r2, r3
 8005430:	7cfb      	ldrb	r3, [r7, #19]
 8005432:	fb92 f3f3 	sdiv	r3, r2, r3
 8005436:	b29a      	uxth	r2, r3
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005440:	461a      	mov	r2, r3
 8005442:	7cfb      	ldrb	r3, [r7, #19]
 8005444:	fb92 f3f3 	sdiv	r3, r2, r3
 8005448:	b29a      	uxth	r2, r3
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005452:	7cfa      	ldrb	r2, [r7, #19]
 8005454:	fbb3 f2f2 	udiv	r2, r3, r2
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 800545c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005460:	3301      	adds	r3, #1
 8005462:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005466:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800546a:	2b03      	cmp	r3, #3
 800546c:	d9b5      	bls.n	80053da <VL53LX_get_device_results+0x30a>
		}


		if (status != VL53LX_ERROR_NONE)
 800546e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005472:	2b00      	cmp	r3, #0
 8005474:	f040 80ae 	bne.w	80055d4 <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 8005478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800547a:	f503 7005 	add.w	r0, r3, #532	; 0x214
 800547e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005480:	f503 7171 	add.w	r1, r3, #964	; 0x3c4
 8005484:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005486:	330e      	adds	r3, #14
 8005488:	461a      	mov	r2, r3
 800548a:	f004 fe80 	bl	800a18e <VL53LX_hist_wrap_dmax>
 800548e:	4603      	mov	r3, r0
 8005490:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 8005494:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005498:	2b00      	cmp	r3, #0
 800549a:	f040 809d 	bne.w	80055d8 <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 800549e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 80054a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054b0:	4413      	add	r3, r2
 80054b2:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 80054b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 80054b8:	4613      	mov	r3, r2
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80054c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054c6:	4413      	add	r3, r2
 80054c8:	f103 0208 	add.w	r2, r3, #8
 80054cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f004 fa10 	bl	80098f4 <VL53LX_hist_phase_consistency_check>
 80054d4:	4603      	mov	r3, r0
 80054d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 80054da:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d17c      	bne.n	80055dc <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80054e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 80054ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f4:	4413      	add	r3, r2
 80054f6:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 80054f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 80054fc:	4613      	mov	r3, r2
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	4413      	add	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8005508:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800550a:	4413      	add	r3, r2
 800550c:	f103 0208 	add.w	r2, r3, #8
 8005510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005512:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f004 fde1 	bl	800a0de <VL53LX_hist_xmonitor_consistency_check>
 800551c:	4603      	mov	r3, r0
 800551e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 8005522:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005526:	2b00      	cmp	r3, #0
 8005528:	d15a      	bne.n	80055e0 <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 800552a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800552c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	2205      	movs	r2, #5
 8005538:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 800553a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800553c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005540:	3301      	adds	r3, #1
 8005542:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8005544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005546:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8005548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800554e:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8005550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005552:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
		if (zid <
 8005556:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800555a:	429a      	cmp	r2, r3
 800555c:	d222      	bcs.n	80055a4 <VL53LX_get_device_results+0x4d4>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 800555e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			phist_info =
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005566:	4413      	add	r3, r2
 8005568:	3304      	adds	r3, #4
 800556a:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 800556c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556e:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8005570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005572:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8005574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005576:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8005578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800557a:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 800557c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557e:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 8005582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005584:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 8005586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005588:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53LX_p_005 =
 800558c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800558e:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8005590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005592:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 8005596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005598:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 800559a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 80055a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a2:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 80055a4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d11b      	bne.n	80055e4 <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 80055ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055ae:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
 80055b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055b4:	f203 3266 	addw	r2, r3, #870	; 0x366
 80055b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055ba:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 80055be:	3318      	adds	r3, #24
 80055c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055c2:	f005 f91c 	bl	800a7fe <VL53LX_hist_copy_results_to_sys_and_core>
 80055c6:	e00e      	b.n	80055e6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80055c8:	bf00      	nop
 80055ca:	e00c      	b.n	80055e6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80055cc:	bf00      	nop
 80055ce:	e00a      	b.n	80055e6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80055d0:	bf00      	nop
 80055d2:	e008      	b.n	80055e6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80055d4:	bf00      	nop
 80055d6:	e006      	b.n	80055e6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80055d8:	bf00      	nop
 80055da:	e004      	b.n	80055e6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80055dc:	bf00      	nop
 80055de:	e002      	b.n	80055e6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80055e0:	bf00      	nop
 80055e2:	e000      	b.n	80055e6 <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 80055e4:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 80055e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e8:	785b      	ldrb	r3, [r3, #1]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d036      	beq.n	800565c <VL53LX_get_device_results+0x58c>
			if (pstate->rd_device_state !=
 80055ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055f0:	79db      	ldrb	r3, [r3, #7]
 80055f2:	2b06      	cmp	r3, #6
 80055f4:	d00a      	beq.n	800560c <VL53LX_get_device_results+0x53c>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 80055f6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <VL53LX_get_device_results+0x53c>
					status = VL53LX_dynamic_zone_update(
 80055fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f005 f9d0 	bl	800a9a6 <VL53LX_dynamic_zone_update>
 8005606:	4603      	mov	r3, r0
 8005608:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 800560c:	2300      	movs	r3, #0
 800560e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005612:	e015      	b.n	8005640 <VL53LX_get_device_results+0x570>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8005614:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005616:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 800561a:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <VL53LX_get_device_results+0x556>
 8005622:	2103      	movs	r1, #3
 8005624:	e000      	b.n	8005628 <VL53LX_get_device_results+0x558>
 8005626:	2101      	movs	r1, #1
 8005628:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800562c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800562e:	4413      	add	r3, r2
 8005630:	460a      	mov	r2, r1
 8005632:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8005636:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800563a:	3301      	adds	r3, #1
 800563c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005640:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005644:	2b04      	cmp	r3, #4
 8005646:	d9e5      	bls.n	8005614 <VL53LX_get_device_results+0x544>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 8005648:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800564c:	2b00      	cmp	r3, #0
 800564e:	d105      	bne.n	800565c <VL53LX_get_device_results+0x58c>
				status = VL53LX_multizone_hist_bins_update(Dev);
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f005 fa22 	bl	800aa9a <VL53LX_multizone_hist_bins_update>
 8005656:	4603      	mov	r3, r0
 8005658:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 800565c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005660:	2b00      	cmp	r3, #0
 8005662:	d105      	bne.n	8005670 <VL53LX_get_device_results+0x5a0>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f005 fe79 	bl	800b35c <VL53LX_dynamic_xtalk_correction_corrector>
 800566a:	4603      	mov	r3, r0
 800566c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (pdev->tuning_parms.tp_hist_merge == 1)
 8005670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005672:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8005676:	2b01      	cmp	r3, #1
 8005678:	d151      	bne.n	800571e <VL53LX_get_device_results+0x64e>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 800567a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567c:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 800567e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	e04c      	b.n	800571e <VL53LX_get_device_results+0x64e>
	} else {

		if (status == VL53LX_ERROR_NONE)
 8005684:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005688:	2b00      	cmp	r3, #0
 800568a:	d107      	bne.n	800569c <VL53LX_get_device_results+0x5cc>
			status = VL53LX_get_measurement_results(
 800568c:	7afb      	ldrb	r3, [r7, #11]
 800568e:	4619      	mov	r1, r3
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f7ff fc73 	bl	8004f7c <VL53LX_get_measurement_results>
 8005696:	4603      	mov	r3, r0
 8005698:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 800569c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10d      	bne.n	80056c0 <VL53LX_get_device_results+0x5f0>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 80056a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056a6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 80056aa:	4618      	mov	r0, r3
 80056ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056ae:	f203 3166 	addw	r1, r3, #870	; 0x366
 80056b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056b4:	f503 5299 	add.w	r2, r3, #4896	; 0x1320
 80056b8:	3218      	adds	r2, #24
 80056ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056bc:	f000 fb86 	bl	8005dcc <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 80056c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c2:	785b      	ldrb	r3, [r3, #1]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d12a      	bne.n	800571e <VL53LX_get_device_results+0x64e>

			if ((status == VL53LX_ERROR_NONE) &&
 80056c8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10d      	bne.n	80056ec <VL53LX_get_device_results+0x61c>
				(pL->low_power_auto_range_count == 0)) {
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d109      	bne.n	80056ec <VL53LX_get_device_results+0x61c>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f006 fa70 	bl	800bbbe <VL53LX_low_power_auto_setup_manual_calibration>
 80056de:	4603      	mov	r3, r0
 80056e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 80056e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e6:	2201      	movs	r2, #1
 80056e8:	709a      	strb	r2, [r3, #2]
 80056ea:	e00a      	b.n	8005702 <VL53LX_get_device_results+0x632>
			} else if ((status == VL53LX_ERROR_NONE) &&
 80056ec:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d106      	bne.n	8005702 <VL53LX_get_device_results+0x632>
				(pL->low_power_auto_range_count == 1)) {
 80056f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f6:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d102      	bne.n	8005702 <VL53LX_get_device_results+0x632>
				pL->low_power_auto_range_count = 2;
 80056fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fe:	2202      	movs	r2, #2
 8005700:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 8005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005704:	789b      	ldrb	r3, [r3, #2]
 8005706:	2bff      	cmp	r3, #255	; 0xff
 8005708:	d009      	beq.n	800571e <VL53LX_get_device_results+0x64e>
 800570a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800570e:	2b00      	cmp	r3, #0
 8005710:	d105      	bne.n	800571e <VL53LX_get_device_results+0x64e>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f006 faa5 	bl	800bc62 <VL53LX_low_power_auto_update_DSS>
 8005718:	4603      	mov	r3, r0
 800571a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800571e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005720:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005726:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8005728:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800572a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800572e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005730:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8005732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005734:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8005738:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800573a:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 800573c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005740:	2b00      	cmp	r3, #0
 8005742:	f040 80b0 	bne.w	80058a6 <VL53LX_get_device_results+0x7d6>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8005746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005748:	2205      	movs	r2, #5
 800574a:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 800574e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005750:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005754:	3301      	adds	r3, #1
 8005756:	b2da      	uxtb	r2, r3
 8005758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800575a:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
		zid = pdev->ll_state.rd_zone_id;
 800575e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005760:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (zid < pres->zone_results.max_zones) {
 8005768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800576a:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 800576e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005772:	429a      	cmp	r2, r3
 8005774:	f080 8097 	bcs.w	80058a6 <VL53LX_get_device_results+0x7d6>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 8005778:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
			pobjects =
 800577c:	4613      	mov	r3, r2
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8005788:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800578a:	4413      	add	r3, r2
 800578c:	3308      	adds	r3, #8
 800578e:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8005790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005792:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8005794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005796:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8005798:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800579a:	785a      	ldrb	r2, [r3, #1]
 800579c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800579e:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 80057a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057a2:	789a      	ldrb	r2, [r3, #2]
 80057a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057a6:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 80057a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057aa:	78da      	ldrb	r2, [r3, #3]
 80057ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ae:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 80057b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057b2:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 80057b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057b8:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 80057ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057bc:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 80057c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057c2:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 80057c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057c6:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 80057ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 80057d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057d2:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 80057d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 80057dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057de:	7c5a      	ldrb	r2, [r3, #17]
 80057e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057e2:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 80057e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057e6:	7c9a      	ldrb	r2, [r3, #18]
 80057e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ea:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 80057ec:	2300      	movs	r3, #0
 80057ee:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80057f2:	e052      	b.n	800589a <VL53LX_get_device_results+0x7ca>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 80057f4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 80057f8:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 80057fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057fe:	204c      	movs	r0, #76	; 0x4c
 8005800:	fb00 f303 	mul.w	r3, r0, r3
 8005804:	440b      	add	r3, r1
 8005806:	3338      	adds	r3, #56	; 0x38
 8005808:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 800580a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800580c:	4613      	mov	r3, r2
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4403      	add	r3, r0
 8005816:	3308      	adds	r3, #8
 8005818:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 800581a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 800581e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8005822:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005824:	204c      	movs	r0, #76	; 0x4c
 8005826:	fb00 f303 	mul.w	r3, r0, r3
 800582a:	440b      	add	r3, r1
 800582c:	333c      	adds	r3, #60	; 0x3c
 800582e:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8005830:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005832:	4613      	mov	r3, r2
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4403      	add	r3, r0
 800583c:	330c      	adds	r3, #12
 800583e:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8005840:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8005844:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8005848:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800584a:	204c      	movs	r0, #76	; 0x4c
 800584c:	fb00 f303 	mul.w	r3, r0, r3
 8005850:	440b      	add	r3, r1
 8005852:	3354      	adds	r3, #84	; 0x54
 8005854:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8005856:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005858:	4613      	mov	r3, r2
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	3310      	adds	r3, #16
 8005864:	4602      	mov	r2, r0
 8005866:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 8005868:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].range_status =
 800586c:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].range_status;
 8005870:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005872:	204c      	movs	r0, #76	; 0x4c
 8005874:	fb00 f303 	mul.w	r3, r0, r3
 8005878:	440b      	add	r3, r1
 800587a:	335e      	adds	r3, #94	; 0x5e
 800587c:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 800587e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005880:	4613      	mov	r3, r2
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	4413      	add	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	440b      	add	r3, r1
 800588a:	3312      	adds	r3, #18
 800588c:	4602      	mov	r2, r0
 800588e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8005890:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005894:	3301      	adds	r3, #1
 8005896:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800589a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800589c:	7c9b      	ldrb	r3, [r3, #18]
 800589e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d3a6      	bcc.n	80057f4 <VL53LX_get_device_results+0x724>
		}
	}



	memcpy(
 80058a6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80058aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f00f f9a1 	bl	8014bf4 <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 80058b2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d105      	bne.n	80058c6 <VL53LX_get_device_results+0x7f6>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f002 fd4e 	bl	800835c <VL53LX_check_ll_driver_rd_state>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 80058c6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3768      	adds	r7, #104	; 0x68
 80058ce:	46bd      	mov	sp, r7
 80058d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080058d4 <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 80058e0:	2300      	movs	r3, #0
 80058e2:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 80058e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d107      	bne.n	80058fc <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	2203      	movs	r2, #3
 80058f0:	4619      	mov	r1, r3
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff f868 	bl	80049c8 <VL53LX_init_and_start_range>
 80058f8:	4603      	mov	r3, r0
 80058fa:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 80058fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b0d2      	sub	sp, #328	; 0x148
 800590c:	af00      	add	r7, sp, #0
 800590e:	1d3b      	adds	r3, r7, #4
 8005910:	6018      	str	r0, [r3, #0]
 8005912:	463b      	mov	r3, r7
 8005914:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8005916:	2300      	movs	r3, #0
 8005918:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev =
 800591c:	1d3b      	adds	r3, r7, #4
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3318      	adds	r3, #24
 8005922:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8005926:	1d3b      	adds	r3, r7, #4
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800592e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8005932:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005936:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800593a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 800593e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005942:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8005946:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 800594a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800594e:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8005952:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 8005956:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800595a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800595e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 8005962:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005966:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 800596a:	f107 030c 	add.w	r3, r7, #12
 800596e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 8005972:	2300      	movs	r3, #0
 8005974:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8005978:	2300      	movs	r3, #0
 800597a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 800597e:	2300      	movs	r3, #0
 8005980:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 8005984:	2300      	movs	r3, #0
 8005986:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c

	uint32_t   pll_period_us            = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8005990:	2300      	movs	r3, #0
 8005992:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t    i                        = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b

	int32_t    hist_merge				= 0;
 800599c:	f107 0308 	add.w	r3, r7, #8
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 80059a4:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <VL53LX_get_histogram_bin_data+0xba>
		status = VL53LX_ReadMulti(
 80059ac:	1d38      	adds	r0, r7, #4
 80059ae:	2353      	movs	r3, #83	; 0x53
 80059b0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80059b4:	2188      	movs	r1, #136	; 0x88
 80059b6:	6800      	ldr	r0, [r0, #0]
 80059b8:	f00b fefa 	bl	80117b0 <VL53LX_ReadMulti>
 80059bc:	4603      	mov	r3, r0
 80059be:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 80059c2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80059c6:	781a      	ldrb	r2, [r3, #0]
 80059c8:	463b      	mov	r3, r7
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 80059d0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80059d4:	785a      	ldrb	r2, [r3, #1]
 80059d6:	463b      	mov	r3, r7
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 80059de:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80059e2:	789a      	ldrb	r2, [r3, #2]
 80059e4:	463b      	mov	r3, r7
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 80059ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80059f0:	78da      	ldrb	r2, [r3, #3]
 80059f2:	463b      	mov	r3, r7
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 80059fa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80059fe:	3304      	adds	r3, #4
 8005a00:	4619      	mov	r1, r3
 8005a02:	2002      	movs	r0, #2
 8005a04:	f003 f9aa 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8005a0c:	463b      	mov	r3, r7
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8005a14:	234e      	movs	r3, #78	; 0x4e
 8005a16:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8005a1a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005a1e:	f107 020c 	add.w	r2, r7, #12
 8005a22:	4413      	add	r3, r2
 8005a24:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 8005a28:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005a2c:	2002      	movs	r0, #2
 8005a2e:	f003 f995 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 8005a32:	4603      	mov	r3, r0
 8005a34:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8005a36:	463b      	mov	r3, r7
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8005a3e:	2350      	movs	r3, #80	; 0x50
 8005a40:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8005a44:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005a48:	f107 020c 	add.w	r2, r7, #12
 8005a4c:	5cd2      	ldrb	r2, [r2, r3]
 8005a4e:	463b      	mov	r3, r7
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8005a56:	463b      	mov	r3, r7
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8005a5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a62:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8005a66:	331c      	adds	r3, #28
 8005a68:	801a      	strh	r2, [r3, #0]
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 8005a72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a76:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8005a7a:	331e      	adds	r3, #30
 8005a7c:	701a      	strb	r2, [r3, #0]



	i2c_buffer_offset_bytes =
 8005a7e:	2351      	movs	r3, #81	; 0x51
 8005a80:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 8005a84:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005a88:	f107 020c 	add.w	r2, r7, #12
 8005a8c:	5cd3      	ldrb	r3, [r2, r3]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8005a94:	2352      	movs	r3, #82	; 0x52
 8005a96:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8005a9a:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005a9e:	f107 020c 	add.w	r2, r7, #12
 8005aa2:	5cd2      	ldrb	r2, [r2, r3]
 8005aa4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8005aae:	234d      	movs	r3, #77	; 0x4d
 8005ab0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 8005ab4:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005ab8:	f107 020c 	add.w	r2, r7, #12
 8005abc:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8005ac0:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 8005ac2:	2306      	movs	r3, #6
 8005ac4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8005ac8:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005acc:	f107 020c 	add.w	r2, r7, #12
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005adc:	e017      	b.n	8005b0e <VL53LX_get_histogram_bin_data+0x206>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8005ade:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005ae2:	2003      	movs	r0, #3
 8005ae4:	f003 f9d9 	bl	8008e9a <VL53LX_i2c_decode_uint32_t>
 8005ae8:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8005aea:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8005aee:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8005af0:	463b      	mov	r3, r7
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3206      	adds	r2, #6
 8005af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8005afa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005afe:	3303      	adds	r3, #3
 8005b00:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 8005b04:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005b08:	3301      	adds	r3, #1
 8005b0a:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005b0e:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005b12:	2b17      	cmp	r3, #23
 8005b14:	d9e3      	bls.n	8005ade <VL53LX_get_histogram_bin_data+0x1d6>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 8005b16:	f107 0208 	add.w	r2, r7, #8
 8005b1a:	1d3b      	adds	r3, r7, #4
 8005b1c:	f248 018d 	movw	r1, #32909	; 0x808d
 8005b20:	6818      	ldr	r0, [r3, #0]
 8005b22:	f000 fb2f 	bl	8006184 <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 8005b26:	463b      	mov	r3, r7
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d118      	bne.n	8005b64 <VL53LX_get_histogram_bin_data+0x25c>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8005b32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b36:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8005b3a:	3310      	adds	r3, #16
 8005b3c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f00f f864 	bl	8014c10 <memset>
		pdev->bin_rec_pos = 0;
 8005b48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b4c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8005b50:	330c      	adds	r3, #12
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
		pdev->pos_before_next_recom = 0;
 8005b56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b5a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8005b5e:	330d      	adds	r3, #13
 8005b60:	2200      	movs	r2, #0
 8005b62:	701a      	strb	r2, [r3, #0]
	}

	if (hist_merge == 1)
 8005b64:	f107 0308 	add.w	r3, r7, #8
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d105      	bne.n	8005b7a <VL53LX_get_histogram_bin_data+0x272>
		vl53lx_histo_merge(Dev, pdata);
 8005b6e:	463a      	mov	r2, r7
 8005b70:	1d3b      	adds	r3, r7, #4
 8005b72:	6811      	ldr	r1, [r2, #0]
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	f7fd ff10 	bl	800399a <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8005b7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b7e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8005b82:	463b      	mov	r3, r7
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 8005b88:	463b      	mov	r3, r7
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8005b90:	463b      	mov	r3, r7
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2218      	movs	r2, #24
 8005b96:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8005b98:	463b      	mov	r3, r7
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2218      	movs	r2, #24
 8005b9e:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8005ba0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005ba4:	78da      	ldrb	r2, [r3, #3]
 8005ba6:	463b      	mov	r3, r7
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8005bae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005bb2:	799b      	ldrb	r3, [r3, #6]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8005bba:	463b      	mov	r3, r7
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 8005bc2:	463b      	mov	r3, r7
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8005bca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005bce:	7c1b      	ldrb	r3, [r3, #16]
 8005bd0:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 8005bd2:	4413      	add	r3, r2
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	463b      	mov	r3, r7
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8005bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be2:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 8005be4:	463b      	mov	r3, r7
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 8005bec:	463a      	mov	r2, r7
 8005bee:	1d3b      	adds	r3, r7, #4
 8005bf0:	6811      	ldr	r1, [r2, #0]
 8005bf2:	6818      	ldr	r0, [r3, #0]
 8005bf4:	f003 fd20 	bl	8009638 <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8005bf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005bfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d114      	bne.n	8005c2e <VL53LX_get_histogram_bin_data+0x326>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 8005c04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c08:	791b      	ldrb	r3, [r3, #4]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	021b      	lsls	r3, r3, #8
 8005c0e:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8005c10:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c14:	795b      	ldrb	r3, [r3, #5]
 8005c16:	b29b      	uxth	r3, r3
		encoded_timeout =
 8005c18:	4413      	add	r3, r2
 8005c1a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 8005c1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c22:	799a      	ldrb	r2, [r3, #6]
 8005c24:	463b      	mov	r3, r7
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005c2c:	e013      	b.n	8005c56 <VL53LX_get_histogram_bin_data+0x34e>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 8005c2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c32:	79db      	ldrb	r3, [r3, #7]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 8005c3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c3e:	7a1b      	ldrb	r3, [r3, #8]
 8005c40:	b29b      	uxth	r3, r3
		encoded_timeout =
 8005c42:	4413      	add	r3, r2
 8005c44:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 8005c48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c4c:	7a5a      	ldrb	r2, [r3, #9]
 8005c4e:	463b      	mov	r3, r7
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 8005c56:	463b      	mov	r3, r7
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8005c64:	e016      	b.n	8005c94 <VL53LX_get_histogram_bin_data+0x38c>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8005c66:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8005c6a:	463a      	mov	r2, r7
 8005c6c:	6812      	ldr	r2, [r2, #0]
 8005c6e:	4413      	add	r3, r2
 8005c70:	7b1b      	ldrb	r3, [r3, #12]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	2b07      	cmp	r3, #7
 8005c78:	d107      	bne.n	8005c8a <VL53LX_get_histogram_bin_data+0x382>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8005c7a:	463b      	mov	r3, r7
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	7adb      	ldrb	r3, [r3, #11]
 8005c80:	3304      	adds	r3, #4
 8005c82:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 8005c84:	463b      	mov	r3, r7
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8005c8a:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8005c8e:	3301      	adds	r3, #1
 8005c90:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8005c94:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8005c98:	2b05      	cmp	r3, #5
 8005c9a:	d9e4      	bls.n	8005c66 <VL53LX_get_histogram_bin_data+0x35e>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 8005c9c:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f003 fb6a 	bl	800937a <VL53LX_decode_timeout>
 8005ca6:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8005ca8:	463b      	mov	r3, r7
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f006 f89a 	bl	800bdf2 <VL53LX_calc_pll_period_us>
 8005cbe:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 8005cc2:	463b      	mov	r3, r7
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cca:	3301      	adds	r3, #1
 8005ccc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8005cd0:	463b      	mov	r3, r7
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53LX_duration_maths(
 8005cd8:	4619      	mov	r1, r3
 8005cda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005cde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ce2:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8005ce6:	f006 f89b 	bl	800be20 <VL53LX_duration_maths>
 8005cea:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8005cec:	463b      	mov	r3, r7
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 8005cf4:	463b      	mov	r3, r7
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 8005cfe:	463b      	mov	r3, r7
 8005d00:	6818      	ldr	r0, [r3, #0]
 8005d02:	f006 f9a4 	bl	800c04e <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 8005d06:	463b      	mov	r3, r7
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	f006 fdb0 	bl	800c86e <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 8005d0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d12:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005d16:	463b      	mov	r3, r7
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8005d1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d20:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8005d24:	463b      	mov	r3, r7
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	789b      	ldrb	r3, [r3, #2]
 8005d30:	461a      	mov	r2, r3
 8005d32:	4613      	mov	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005d3e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005d42:	4413      	add	r3, r2
 8005d44:	3302      	adds	r3, #2
 8005d46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8005d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d4e:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8005d50:	463b      	mov	r3, r7
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8005d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d5c:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8005d5e:	463b      	mov	r3, r7
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8005d66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8005d6e:	463b      	mov	r3, r7
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005d76:	f003 031f 	and.w	r3, r3, #31
 8005d7a:	2b11      	cmp	r3, #17
 8005d7c:	bf8c      	ite	hi
 8005d7e:	2201      	movhi	r2, #1
 8005d80:	2200      	movls	r2, #0
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	2a00      	cmp	r2, #0
 8005d86:	d118      	bne.n	8005dba <VL53LX_get_histogram_bin_data+0x4b2>
 8005d88:	2201      	movs	r2, #1
 8005d8a:	409a      	lsls	r2, r3
 8005d8c:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <VL53LX_get_histogram_bin_data+0x4c0>)
 8005d8e:	4013      	ands	r3, r2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	bf14      	ite	ne
 8005d94:	2301      	movne	r3, #1
 8005d96:	2300      	moveq	r3, #0
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00d      	beq.n	8005dba <VL53LX_get_histogram_bin_data+0x4b2>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8005d9e:	463b      	mov	r3, r7
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005da6:	f003 031f 	and.w	r3, r3, #31
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005db0:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 8005db2:	23fa      	movs	r3, #250	; 0xfa
 8005db4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 8005db8:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005dba:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	0002200e 	.word	0x0002200e

08005dcc <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b08b      	sub	sp, #44	; 0x2c
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2200      	movs	r2, #0
 8005dec:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	78da      	ldrb	r2, [r3, #3]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2204      	movs	r2, #4
 8005e00:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2201      	movs	r2, #1
 8005e06:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	8a1b      	ldrh	r3, [r3, #16]
 8005e0c:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	8a9b      	ldrh	r3, [r3, #20]
 8005e12:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	8a5b      	ldrh	r3, [r3, #18]
 8005e18:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e20:	e00b      	b.n	8005e3a <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 8005e22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	4413      	add	r3, r2
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8005e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e34:	3301      	adds	r3, #1
 8005e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d9ef      	bls.n	8005e22 <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	3314      	adds	r3, #20
 8005e46:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e4e:	e0fe      	b.n	800604e <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005e56:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	78db      	ldrb	r3, [r3, #3]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10a      	bne.n	8005e7c <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	785b      	ldrb	r3, [r3, #1]
 8005e6a:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8005e6e:	2b09      	cmp	r3, #9
 8005e70:	d104      	bne.n	8005e7c <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	2213      	movs	r2, #19
 8005e76:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8005e7a:	e007      	b.n	8005e8c <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	785b      	ldrb	r3, [r3, #1]
 8005e80:	f003 031f 	and.w	r3, r3, #31
 8005e84:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	2200      	movs	r2, #0
 8005e96:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	2200      	movs	r2, #0
 8005eae:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8005eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d05c      	beq.n	8005f76 <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 8005ebc:	e0a8      	b.n	8006010 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	789b      	ldrb	r3, [r3, #2]
 8005ec2:	2b07      	cmp	r3, #7
 8005ec4:	d103      	bne.n	8005ece <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	8a7a      	ldrh	r2, [r7, #18]
 8005eca:	82da      	strh	r2, [r3, #22]
 8005ecc:	e00b      	b.n	8005ee6 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	789b      	ldrb	r3, [r3, #2]
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d103      	bne.n	8005ede <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	8aba      	ldrh	r2, [r7, #20]
 8005eda:	82da      	strh	r2, [r3, #22]
 8005edc:	e003      	b.n	8005ee6 <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	8afa      	ldrh	r2, [r7, #22]
 8005eea:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	895b      	ldrh	r3, [r3, #10]
 8005f00:	015b      	lsls	r3, r3, #5
 8005f02:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0a:	d302      	bcc.n	8005f12 <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8005f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f10:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8005f28:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	fb02 f303 	mul.w	r3, r2, r3
 8005f32:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f3a:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	da01      	bge.n	8005f46 <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 8005f42:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005f46:	12db      	asrs	r3, r3, #11
 8005f48:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	b21a      	sxth	r2, r3
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8005f74:	e04c      	b.n	8006010 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f8c:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	8bdb      	ldrh	r3, [r3, #30]
 8005f9a:	015b      	lsls	r3, r3, #5
 8005f9c:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa4:	d302      	bcc.n	8005fac <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 8005fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005faa:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 8005fc2:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	fb02 f303 	mul.w	r3, r2, r3
 8005fcc:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fd4:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	da01      	bge.n	8005fe0 <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 8005fdc:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005fe0:	12db      	asrs	r3, r3, #11
 8005fe2:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	b21a      	sxth	r2, r3
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 800600e:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	334c      	adds	r3, #76	; 0x4c
 8006042:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8006044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006048:	3301      	adds	r3, #1
 800604a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800604e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006052:	2b01      	cmp	r3, #1
 8006054:	f67f aefc 	bls.w	8005e50 <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2200      	movs	r2, #0
 800605c:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	785b      	ldrb	r3, [r3, #1]
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	2b11      	cmp	r3, #17
 8006068:	bf8c      	ite	hi
 800606a:	2201      	movhi	r2, #1
 800606c:	2200      	movls	r2, #0
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	2a00      	cmp	r2, #0
 8006072:	d116      	bne.n	80060a2 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
 8006074:	2201      	movs	r2, #1
 8006076:	409a      	lsls	r2, r3
 8006078:	4b0d      	ldr	r3, [pc, #52]	; (80060b0 <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	bf14      	ite	ne
 8006080:	2301      	movne	r3, #1
 8006082:	2300      	moveq	r3, #0
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00b      	beq.n	80060a2 <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	785b      	ldrb	r3, [r3, #1]
 800608e:	f003 031f 	and.w	r3, r3, #31
 8006092:	b2da      	uxtb	r2, r3
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 80060a0:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 80060a2:	bf00      	nop
 80060a4:	372c      	adds	r7, #44	; 0x2c
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	0002200e 	.word	0x0002200e

080060b4 <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80060be:	2300      	movs	r3, #0
 80060c0:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3318      	adds	r3, #24
 80060c6:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	332c      	adds	r3, #44	; 0x2c
 80060cc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b05      	cmp	r3, #5
 80060d4:	d109      	bne.n	80060ea <VL53LX_set_zone_dss_config+0x36>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	2202      	movs	r2, #2
 80060da:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
 80060e8:	e003      	b.n	80060f2 <VL53LX_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 80060f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 8006102:	b480      	push	{r7}
 8006104:	b085      	sub	sp, #20
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	460b      	mov	r3, r1
 800610c:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800610e:	2300      	movs	r3, #0
 8006110:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3318      	adds	r3, #24
 8006116:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	78fa      	ldrb	r2, [r7, #3]
 800611c:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 800611e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b086      	sub	sp, #24
 8006132:	af00      	add	r7, sp, #0
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	460b      	mov	r3, r1
 8006138:	607a      	str	r2, [r7, #4]
 800613a:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800613c:	2300      	movs	r3, #0
 800613e:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3318      	adds	r3, #24
 8006144:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8006146:	7afb      	ldrb	r3, [r7, #11]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d009      	beq.n	8006160 <VL53LX_get_dmax_calibration_data+0x32>
 800614c:	2b02      	cmp	r3, #2
 800614e:	d10f      	bne.n	8006170 <VL53LX_get_dmax_calibration_data+0x42>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 8006154:	220a      	movs	r2, #10
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f00e fd4b 	bl	8014bf4 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 800615e:	e00a      	b.n	8006176 <VL53LX_get_dmax_calibration_data+0x48>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8006164:	220a      	movs	r2, #10
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f00e fd43 	bl	8014bf4 <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 800616e:	e002      	b.n	8006176 <VL53LX_get_dmax_calibration_data+0x48>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8006170:	23fc      	movs	r3, #252	; 0xfc
 8006172:	75fb      	strb	r3, [r7, #23]
	break;
 8006174:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006176:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8006184:	b480      	push	{r7}
 8006186:	b089      	sub	sp, #36	; 0x24
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	460b      	mov	r3, r1
 800618e:	607a      	str	r2, [r7, #4]
 8006190:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006192:	2300      	movs	r3, #0
 8006194:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3318      	adds	r3, #24
 800619a:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80061a2:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80061aa:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 80061ac:	897b      	ldrh	r3, [r7, #10]
 80061ae:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80061b2:	2bb9      	cmp	r3, #185	; 0xb9
 80061b4:	f200 86ca 	bhi.w	8006f4c <VL53LX_get_tuning_parm+0xdc8>
 80061b8:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <VL53LX_get_tuning_parm+0x3c>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	080064a9 	.word	0x080064a9
 80061c4:	080064b9 	.word	0x080064b9
 80061c8:	080064c9 	.word	0x080064c9
 80061cc:	080064d9 	.word	0x080064d9
 80061d0:	080064e7 	.word	0x080064e7
 80061d4:	080064f5 	.word	0x080064f5
 80061d8:	08006503 	.word	0x08006503
 80061dc:	08006511 	.word	0x08006511
 80061e0:	0800651f 	.word	0x0800651f
 80061e4:	0800652d 	.word	0x0800652d
 80061e8:	0800653b 	.word	0x0800653b
 80061ec:	08006547 	.word	0x08006547
 80061f0:	08006555 	.word	0x08006555
 80061f4:	08006563 	.word	0x08006563
 80061f8:	0800656f 	.word	0x0800656f
 80061fc:	0800657d 	.word	0x0800657d
 8006200:	0800658b 	.word	0x0800658b
 8006204:	0800659b 	.word	0x0800659b
 8006208:	080065ab 	.word	0x080065ab
 800620c:	080065b9 	.word	0x080065b9
 8006210:	080065c9 	.word	0x080065c9
 8006214:	080065d7 	.word	0x080065d7
 8006218:	080065e7 	.word	0x080065e7
 800621c:	080065f7 	.word	0x080065f7
 8006220:	08006607 	.word	0x08006607
 8006224:	08006617 	.word	0x08006617
 8006228:	08006627 	.word	0x08006627
 800622c:	08006637 	.word	0x08006637
 8006230:	08006647 	.word	0x08006647
 8006234:	08006657 	.word	0x08006657
 8006238:	08006667 	.word	0x08006667
 800623c:	08006675 	.word	0x08006675
 8006240:	08006685 	.word	0x08006685
 8006244:	08006695 	.word	0x08006695
 8006248:	080066a5 	.word	0x080066a5
 800624c:	080066b5 	.word	0x080066b5
 8006250:	080066c5 	.word	0x080066c5
 8006254:	080066d5 	.word	0x080066d5
 8006258:	080066e5 	.word	0x080066e5
 800625c:	080066f5 	.word	0x080066f5
 8006260:	08006705 	.word	0x08006705
 8006264:	08006715 	.word	0x08006715
 8006268:	08006725 	.word	0x08006725
 800626c:	08006735 	.word	0x08006735
 8006270:	08006745 	.word	0x08006745
 8006274:	08006755 	.word	0x08006755
 8006278:	08006763 	.word	0x08006763
 800627c:	08006771 	.word	0x08006771
 8006280:	0800677f 	.word	0x0800677f
 8006284:	0800678d 	.word	0x0800678d
 8006288:	0800679b 	.word	0x0800679b
 800628c:	080067a9 	.word	0x080067a9
 8006290:	080067b7 	.word	0x080067b7
 8006294:	080067c5 	.word	0x080067c5
 8006298:	080067d3 	.word	0x080067d3
 800629c:	080067e1 	.word	0x080067e1
 80062a0:	080067ef 	.word	0x080067ef
 80062a4:	080067fd 	.word	0x080067fd
 80062a8:	0800680b 	.word	0x0800680b
 80062ac:	08006819 	.word	0x08006819
 80062b0:	08006827 	.word	0x08006827
 80062b4:	08006835 	.word	0x08006835
 80062b8:	08006843 	.word	0x08006843
 80062bc:	08006851 	.word	0x08006851
 80062c0:	0800685f 	.word	0x0800685f
 80062c4:	0800686d 	.word	0x0800686d
 80062c8:	0800687b 	.word	0x0800687b
 80062cc:	08006889 	.word	0x08006889
 80062d0:	08006897 	.word	0x08006897
 80062d4:	080068a5 	.word	0x080068a5
 80062d8:	080068b3 	.word	0x080068b3
 80062dc:	080068c1 	.word	0x080068c1
 80062e0:	080068cf 	.word	0x080068cf
 80062e4:	080068dd 	.word	0x080068dd
 80062e8:	080068e9 	.word	0x080068e9
 80062ec:	080068f7 	.word	0x080068f7
 80062f0:	08006905 	.word	0x08006905
 80062f4:	08006911 	.word	0x08006911
 80062f8:	0800691d 	.word	0x0800691d
 80062fc:	08006929 	.word	0x08006929
 8006300:	08006935 	.word	0x08006935
 8006304:	08006941 	.word	0x08006941
 8006308:	0800694d 	.word	0x0800694d
 800630c:	0800695b 	.word	0x0800695b
 8006310:	08006969 	.word	0x08006969
 8006314:	08006977 	.word	0x08006977
 8006318:	08006985 	.word	0x08006985
 800631c:	08006993 	.word	0x08006993
 8006320:	080069a1 	.word	0x080069a1
 8006324:	080069af 	.word	0x080069af
 8006328:	080069bd 	.word	0x080069bd
 800632c:	080069cb 	.word	0x080069cb
 8006330:	080069d9 	.word	0x080069d9
 8006334:	080069e7 	.word	0x080069e7
 8006338:	080069f5 	.word	0x080069f5
 800633c:	08006a03 	.word	0x08006a03
 8006340:	08006a11 	.word	0x08006a11
 8006344:	08006a1f 	.word	0x08006a1f
 8006348:	08006a2d 	.word	0x08006a2d
 800634c:	08006a3b 	.word	0x08006a3b
 8006350:	08006a49 	.word	0x08006a49
 8006354:	08006a57 	.word	0x08006a57
 8006358:	08006a65 	.word	0x08006a65
 800635c:	08006a73 	.word	0x08006a73
 8006360:	08006a81 	.word	0x08006a81
 8006364:	08006a8f 	.word	0x08006a8f
 8006368:	08006a9d 	.word	0x08006a9d
 800636c:	08006aab 	.word	0x08006aab
 8006370:	08006ab9 	.word	0x08006ab9
 8006374:	08006ac7 	.word	0x08006ac7
 8006378:	08006ad5 	.word	0x08006ad5
 800637c:	08006ae3 	.word	0x08006ae3
 8006380:	08006af1 	.word	0x08006af1
 8006384:	08006aff 	.word	0x08006aff
 8006388:	08006b0d 	.word	0x08006b0d
 800638c:	08006b1b 	.word	0x08006b1b
 8006390:	08006b29 	.word	0x08006b29
 8006394:	08006b37 	.word	0x08006b37
 8006398:	08006b45 	.word	0x08006b45
 800639c:	08006b57 	.word	0x08006b57
 80063a0:	08006b69 	.word	0x08006b69
 80063a4:	08006b79 	.word	0x08006b79
 80063a8:	08006b8b 	.word	0x08006b8b
 80063ac:	08006b9d 	.word	0x08006b9d
 80063b0:	08006baf 	.word	0x08006baf
 80063b4:	08006bc1 	.word	0x08006bc1
 80063b8:	08006bd3 	.word	0x08006bd3
 80063bc:	08006be5 	.word	0x08006be5
 80063c0:	08006bf9 	.word	0x08006bf9
 80063c4:	08006c0b 	.word	0x08006c0b
 80063c8:	08006c1d 	.word	0x08006c1d
 80063cc:	08006c2f 	.word	0x08006c2f
 80063d0:	08006c41 	.word	0x08006c41
 80063d4:	08006c53 	.word	0x08006c53
 80063d8:	08006c65 	.word	0x08006c65
 80063dc:	08006c77 	.word	0x08006c77
 80063e0:	08006c89 	.word	0x08006c89
 80063e4:	08006c9b 	.word	0x08006c9b
 80063e8:	08006ca9 	.word	0x08006ca9
 80063ec:	08006cb7 	.word	0x08006cb7
 80063f0:	08006cc5 	.word	0x08006cc5
 80063f4:	08006cd3 	.word	0x08006cd3
 80063f8:	08006ce1 	.word	0x08006ce1
 80063fc:	08006cef 	.word	0x08006cef
 8006400:	08006cfd 	.word	0x08006cfd
 8006404:	08006d0f 	.word	0x08006d0f
 8006408:	08006d1d 	.word	0x08006d1d
 800640c:	08006d2b 	.word	0x08006d2b
 8006410:	08006d39 	.word	0x08006d39
 8006414:	08006d47 	.word	0x08006d47
 8006418:	08006d55 	.word	0x08006d55
 800641c:	08006d63 	.word	0x08006d63
 8006420:	08006d71 	.word	0x08006d71
 8006424:	08006d7f 	.word	0x08006d7f
 8006428:	08006d8d 	.word	0x08006d8d
 800642c:	08006d9b 	.word	0x08006d9b
 8006430:	08006da9 	.word	0x08006da9
 8006434:	08006db7 	.word	0x08006db7
 8006438:	08006dc5 	.word	0x08006dc5
 800643c:	08006dd3 	.word	0x08006dd3
 8006440:	08006de1 	.word	0x08006de1
 8006444:	08006def 	.word	0x08006def
 8006448:	08006dfd 	.word	0x08006dfd
 800644c:	08006e0b 	.word	0x08006e0b
 8006450:	08006e19 	.word	0x08006e19
 8006454:	08006e27 	.word	0x08006e27
 8006458:	08006e35 	.word	0x08006e35
 800645c:	08006e43 	.word	0x08006e43
 8006460:	08006e51 	.word	0x08006e51
 8006464:	08006e5f 	.word	0x08006e5f
 8006468:	08006e6d 	.word	0x08006e6d
 800646c:	08006e7b 	.word	0x08006e7b
 8006470:	08006e89 	.word	0x08006e89
 8006474:	08006e97 	.word	0x08006e97
 8006478:	08006ea5 	.word	0x08006ea5
 800647c:	08006eb3 	.word	0x08006eb3
 8006480:	08006ec1 	.word	0x08006ec1
 8006484:	08006ecf 	.word	0x08006ecf
 8006488:	08006edd 	.word	0x08006edd
 800648c:	08006eeb 	.word	0x08006eeb
 8006490:	08006ef9 	.word	0x08006ef9
 8006494:	08006f07 	.word	0x08006f07
 8006498:	08006f15 	.word	0x08006f15
 800649c:	08006f23 	.word	0x08006f23
 80064a0:	08006f31 	.word	0x08006f31
 80064a4:	08006f3f 	.word	0x08006f3f

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	601a      	str	r2, [r3, #0]
	break;
 80064b4:	f000 bd51 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 80064be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	601a      	str	r2, [r3, #0]
	break;
 80064c4:	f000 bd49 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 80064ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	601a      	str	r2, [r3, #0]
	break;
 80064d4:	f000 bd41 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	601a      	str	r2, [r3, #0]
	break;
 80064e2:	f000 bd3a 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	601a      	str	r2, [r3, #0]
	break;
 80064f0:	f000 bd33 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	789b      	ldrb	r3, [r3, #2]
 80064f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	601a      	str	r2, [r3, #0]
	break;
 80064fe:	f000 bd2c 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	78db      	ldrb	r3, [r3, #3]
 8006506:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	601a      	str	r2, [r3, #0]
	break;
 800650c:	f000 bd25 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	791b      	ldrb	r3, [r3, #4]
 8006514:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	601a      	str	r2, [r3, #0]
	break;
 800651a:	f000 bd1e 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	795b      	ldrb	r3, [r3, #5]
 8006522:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	601a      	str	r2, [r3, #0]
	break;
 8006528:	f000 bd17 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	799b      	ldrb	r3, [r3, #6]
 8006530:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	601a      	str	r2, [r3, #0]
	break;
 8006536:	f000 bd10 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	601a      	str	r2, [r3, #0]
	break;
 8006542:	f000 bd0a 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	891b      	ldrh	r3, [r3, #8]
 800654a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	601a      	str	r2, [r3, #0]
	break;
 8006550:	f000 bd03 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	8a1b      	ldrh	r3, [r3, #16]
 8006558:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	601a      	str	r2, [r3, #0]
	break;
 800655e:	f000 bcfc 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	601a      	str	r2, [r3, #0]
	break;
 800656a:	f000 bcf6 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	7e1b      	ldrb	r3, [r3, #24]
 8006572:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	601a      	str	r2, [r3, #0]
	break;
 8006578:	f000 bcef 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	8b5b      	ldrh	r3, [r3, #26]
 8006580:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	601a      	str	r2, [r3, #0]
	break;
 8006586:	f000 bce8 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8006590:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	601a      	str	r2, [r3, #0]
	break;
 8006596:	f000 bce0 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80065a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	601a      	str	r2, [r3, #0]
	break;
 80065a6:	f000 bcd8 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	601a      	str	r2, [r3, #0]
	break;
 80065b4:	f000 bcd1 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80065be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	601a      	str	r2, [r3, #0]
	break;
 80065c4:	f000 bcc9 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80065cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	601a      	str	r2, [r3, #0]
	break;
 80065d2:	f000 bcc2 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80065dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	601a      	str	r2, [r3, #0]
	break;
 80065e2:	f000 bcba 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80065ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	601a      	str	r2, [r3, #0]
	break;
 80065f2:	f000 bcb2 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80065fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	601a      	str	r2, [r3, #0]
	break;
 8006602:	f000 bcaa 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800660c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	601a      	str	r2, [r3, #0]
	break;
 8006612:	f000 bca2 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800661c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	601a      	str	r2, [r3, #0]
	break;
 8006622:	f000 bc9a 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800662c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	601a      	str	r2, [r3, #0]
	break;
 8006632:	f000 bc92 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	f9b3 32a6 	ldrsh.w	r3, [r3, #678]	; 0x2a6
		*ptuning_parm_value = (int32_t)(
 800663c:	461a      	mov	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	601a      	str	r2, [r3, #0]
	break;
 8006642:	f000 bc8a 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	f9b3 32a8 	ldrsh.w	r3, [r3, #680]	; 0x2a8
		*ptuning_parm_value = (int32_t)(
 800664c:	461a      	mov	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	601a      	str	r2, [r3, #0]
	break;
 8006652:	f000 bc82 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 800665c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	601a      	str	r2, [r3, #0]
	break;
 8006662:	f000 bc7a 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800666a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	601a      	str	r2, [r3, #0]
	break;
 8006670:	f000 bc73 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
		*ptuning_parm_value = (int32_t)(
 800667a:	461a      	mov	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	601a      	str	r2, [r3, #0]
	break;
 8006680:	f000 bc6b 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800668a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	601a      	str	r2, [r3, #0]
	break;
 8006690:	f000 bc63 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	f9b3 329e 	ldrsh.w	r3, [r3, #670]	; 0x29e
 800669a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	601a      	str	r2, [r3, #0]
	break;
 80066a0:	f000 bc5b 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80066aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	601a      	str	r2, [r3, #0]
	break;
 80066b0:	f000 bc53 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80066ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	601a      	str	r2, [r3, #0]
	break;
 80066c0:	f000 bc4b 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 80066ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	601a      	str	r2, [r3, #0]
	break;
 80066d0:	f000 bc43 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80066da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	601a      	str	r2, [r3, #0]
	break;
 80066e0:	f000 bc3b 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 80066ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	601a      	str	r2, [r3, #0]
	break;
 80066f0:	f000 bc33 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 80066fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	601a      	str	r2, [r3, #0]
	break;
 8006700:	f000 bc2b 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 800670a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	601a      	str	r2, [r3, #0]
	break;
 8006710:	f000 bc23 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 800671a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	601a      	str	r2, [r3, #0]
	break;
 8006720:	f000 bc1b 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
		*ptuning_parm_value = (int32_t)(
 800672a:	461a      	mov	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	601a      	str	r2, [r3, #0]
	break;
 8006730:	f000 bc13 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800673a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	601a      	str	r2, [r3, #0]
	break;
 8006740:	f000 bc0b 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
		*ptuning_parm_value = (int32_t)(
 800674a:	461a      	mov	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	601a      	str	r2, [r3, #0]
	break;
 8006750:	f000 bc03 	b.w	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800675a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	601a      	str	r2, [r3, #0]
	break;
 8006760:	e3fb      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8006768:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	601a      	str	r2, [r3, #0]
	break;
 800676e:	e3f4      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8006776:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	601a      	str	r2, [r3, #0]
	break;
 800677c:	e3ed      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 8006784:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	601a      	str	r2, [r3, #0]
	break;
 800678a:	e3e6      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 8006792:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	601a      	str	r2, [r3, #0]
	break;
 8006798:	e3df      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 80067a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	601a      	str	r2, [r3, #0]
	break;
 80067a6:	e3d8      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 80067ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	601a      	str	r2, [r3, #0]
	break;
 80067b4:	e3d1      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	f9b3 32a0 	ldrsh.w	r3, [r3, #672]	; 0x2a0
 80067bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	601a      	str	r2, [r3, #0]
	break;
 80067c2:	e3ca      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80067ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	601a      	str	r2, [r3, #0]
	break;
 80067d0:	e3c3      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 80067d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	601a      	str	r2, [r3, #0]
	break;
 80067de:	e3bc      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80067e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	601a      	str	r2, [r3, #0]
	break;
 80067ec:	e3b5      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80067f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	601a      	str	r2, [r3, #0]
	break;
 80067fa:	e3ae      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8006802:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	601a      	str	r2, [r3, #0]
	break;
 8006808:	e3a7      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8006810:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	601a      	str	r2, [r3, #0]
	break;
 8006816:	e3a0      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800681e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	601a      	str	r2, [r3, #0]
	break;
 8006824:	e399      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	f893 3254 	ldrb.w	r3, [r3, #596]	; 0x254
 800682c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	601a      	str	r2, [r3, #0]
	break;
 8006832:	e392      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	f8b3 3260 	ldrh.w	r3, [r3, #608]	; 0x260
 800683a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	601a      	str	r2, [r3, #0]
	break;
 8006840:	e38b      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	f8b3 3262 	ldrh.w	r3, [r3, #610]	; 0x262
 8006848:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	601a      	str	r2, [r3, #0]
	break;
 800684e:	e384      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006856:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	601a      	str	r2, [r3, #0]
	break;
 800685c:	e37d      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	f8b3 3266 	ldrh.w	r3, [r3, #614]	; 0x266
 8006864:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	601a      	str	r2, [r3, #0]
	break;
 800686a:	e376      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 8006872:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	601a      	str	r2, [r3, #0]
	break;
 8006878:	e36f      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8006880:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	601a      	str	r2, [r3, #0]
	break;
 8006886:	e368      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 800688e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	601a      	str	r2, [r3, #0]
	break;
 8006894:	e361      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 800689c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	601a      	str	r2, [r3, #0]
	break;
 80068a2:	e35a      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80068aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	601a      	str	r2, [r3, #0]
	break;
 80068b0:	e353      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 80068b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	601a      	str	r2, [r3, #0]
	break;
 80068be:	e34c      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 80068c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	601a      	str	r2, [r3, #0]
	break;
 80068cc:	e345      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80068d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	601a      	str	r2, [r3, #0]
	break;
 80068da:	e33e      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	7c1b      	ldrb	r3, [r3, #16]
 80068e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	601a      	str	r2, [r3, #0]
	break;
 80068e6:	e338      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80068ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	601a      	str	r2, [r3, #0]
	break;
 80068f4:	e331      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80068fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	601a      	str	r2, [r3, #0]
	break;
 8006902:	e32a      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	601a      	str	r2, [r3, #0]
	break;
 800690e:	e324      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	601a      	str	r2, [r3, #0]
	break;
 800691a:	e31e      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	8adb      	ldrh	r3, [r3, #22]
 8006920:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	601a      	str	r2, [r3, #0]
	break;
 8006926:	e318      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	8b1b      	ldrh	r3, [r3, #24]
 800692c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	601a      	str	r2, [r3, #0]
	break;
 8006932:	e312      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	601a      	str	r2, [r3, #0]
	break;
 800693e:	e30c      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	601a      	str	r2, [r3, #0]
	break;
 800694a:	e306      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006952:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	601a      	str	r2, [r3, #0]
	break;
 8006958:	e2ff      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006960:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	601a      	str	r2, [r3, #0]
	break;
 8006966:	e2f8      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800696e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	601a      	str	r2, [r3, #0]
	break;
 8006974:	e2f1      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800697c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	601a      	str	r2, [r3, #0]
	break;
 8006982:	e2ea      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	f893 32c0 	ldrb.w	r3, [r3, #704]	; 0x2c0
 800698a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	601a      	str	r2, [r3, #0]
	break;
 8006990:	e2e3      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 8006998:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	601a      	str	r2, [r3, #0]
	break;
 800699e:	e2dc      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
 80069a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	601a      	str	r2, [r3, #0]
	break;
 80069ac:	e2d5      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	; 0x2c4
 80069b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	601a      	str	r2, [r3, #0]
	break;
 80069ba:	e2ce      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80069c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	601a      	str	r2, [r3, #0]
	break;
 80069c8:	e2c7      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80069d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	601a      	str	r2, [r3, #0]
	break;
 80069d6:	e2c0      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	f8b3 32d4 	ldrh.w	r3, [r3, #724]	; 0x2d4
 80069de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	601a      	str	r2, [r3, #0]
	break;
 80069e4:	e2b9      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80069ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	601a      	str	r2, [r3, #0]
	break;
 80069f2:	e2b2      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	; 0x2d6
 80069fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	601a      	str	r2, [r3, #0]
	break;
 8006a00:	e2ab      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 8006a08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	601a      	str	r2, [r3, #0]
	break;
 8006a0e:	e2a4      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 8006a16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	601a      	str	r2, [r3, #0]
	break;
 8006a1c:	e29d      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8006a24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	601a      	str	r2, [r3, #0]
	break;
 8006a2a:	e296      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8006a32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	601a      	str	r2, [r3, #0]
	break;
 8006a38:	e28f      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 8006a40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	601a      	str	r2, [r3, #0]
	break;
 8006a46:	e288      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 8006a4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	601a      	str	r2, [r3, #0]
	break;
 8006a54:	e281      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8006a5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	601a      	str	r2, [r3, #0]
	break;
 8006a62:	e27a      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8006a6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	601a      	str	r2, [r3, #0]
	break;
 8006a70:	e273      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006a78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	601a      	str	r2, [r3, #0]
	break;
 8006a7e:	e26c      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8006a86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	601a      	str	r2, [r3, #0]
	break;
 8006a8c:	e265      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8006a94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	601a      	str	r2, [r3, #0]
	break;
 8006a9a:	e25e      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006aa2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	601a      	str	r2, [r3, #0]
	break;
 8006aa8:	e257      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006ab0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	601a      	str	r2, [r3, #0]
	break;
 8006ab6:	e250      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8006abe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	601a      	str	r2, [r3, #0]
	break;
 8006ac4:	e249      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006acc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	601a      	str	r2, [r3, #0]
	break;
 8006ad2:	e242      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8006ada:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	601a      	str	r2, [r3, #0]
	break;
 8006ae0:	e23b      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006ae8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	601a      	str	r2, [r3, #0]
	break;
 8006aee:	e234      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8006af6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	601a      	str	r2, [r3, #0]
	break;
 8006afc:	e22d      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8006b04:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	601a      	str	r2, [r3, #0]
	break;
 8006b0a:	e226      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8006b12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	601a      	str	r2, [r3, #0]
	break;
 8006b18:	e21f      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8006b20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	601a      	str	r2, [r3, #0]
	break;
 8006b26:	e218      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8006b2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	601a      	str	r2, [r3, #0]
	break;
 8006b34:	e211      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8006b3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	601a      	str	r2, [r3, #0]
	break;
 8006b42:	e20a      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006b4a:	3318      	adds	r3, #24
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	601a      	str	r2, [r3, #0]
	break;
 8006b54:	e201      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006b5c:	331c      	adds	r3, #28
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	601a      	str	r2, [r3, #0]
	break;
 8006b66:	e1f8      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	601a      	str	r2, [r3, #0]
	break;
 8006b76:	e1f0      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006b7e:	3304      	adds	r3, #4
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	601a      	str	r2, [r3, #0]
	break;
 8006b88:	e1e7      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006b90:	3308      	adds	r3, #8
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	601a      	str	r2, [r3, #0]
	break;
 8006b9a:	e1de      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006ba2:	330c      	adds	r3, #12
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	601a      	str	r2, [r3, #0]
	break;
 8006bac:	e1d5      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006bb4:	3310      	adds	r3, #16
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	601a      	str	r2, [r3, #0]
	break;
 8006bbe:	e1cc      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006bc6:	3314      	adds	r3, #20
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	601a      	str	r2, [r3, #0]
	break;
 8006bd0:	e1c3      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006bd8:	331c      	adds	r3, #28
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	601a      	str	r2, [r3, #0]
	break;
 8006be2:	e1ba      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006bea:	331e      	adds	r3, #30
 8006bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bf0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	601a      	str	r2, [r3, #0]
	break;
 8006bf6:	e1b0      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	601a      	str	r2, [r3, #0]
	break;
 8006c08:	e1a7      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006c10:	3302      	adds	r3, #2
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	601a      	str	r2, [r3, #0]
	break;
 8006c1a:	e19e      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006c22:	3316      	adds	r3, #22
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	601a      	str	r2, [r3, #0]
	break;
 8006c2c:	e195      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006c34:	3318      	adds	r3, #24
 8006c36:	681b      	ldr	r3, [r3, #0]
		*ptuning_parm_value = (int32_t)(
 8006c38:	461a      	mov	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	601a      	str	r2, [r3, #0]
	break;
 8006c3e:	e18c      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006c46:	3304      	adds	r3, #4
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	601a      	str	r2, [r3, #0]
	break;
 8006c50:	e183      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006c58:	3308      	adds	r3, #8
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	601a      	str	r2, [r3, #0]
	break;
 8006c62:	e17a      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006c6a:	330c      	adds	r3, #12
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	601a      	str	r2, [r3, #0]
	break;
 8006c74:	e171      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006c7c:	3310      	adds	r3, #16
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	601a      	str	r2, [r3, #0]
	break;
 8006c86:	e168      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8006c8e:	3310      	adds	r3, #16
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	601a      	str	r2, [r3, #0]
	break;
 8006c98:	e15f      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006ca0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	601a      	str	r2, [r3, #0]
	break;
 8006ca6:	e158      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8006cae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	601a      	str	r2, [r3, #0]
	break;
 8006cb4:	e151      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 8006cbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	601a      	str	r2, [r3, #0]
	break;
 8006cc2:	e14a      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8006cca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	601a      	str	r2, [r3, #0]
	break;
 8006cd0:	e143      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8006cd8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	601a      	str	r2, [r3, #0]
	break;
 8006cde:	e13c      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8006ce6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	601a      	str	r2, [r3, #0]
	break;
 8006cec:	e135      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8006cf4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	601a      	str	r2, [r3, #0]
	break;
 8006cfa:	e12e      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006d02:	3314      	adds	r3, #20
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	601a      	str	r2, [r3, #0]
	break;
 8006d0c:	e125      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	f893 3185 	ldrb.w	r3, [r3, #389]	; 0x185
 8006d14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	601a      	str	r2, [r3, #0]
	break;
 8006d1a:	e11e      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	f9b3 3186 	ldrsh.w	r3, [r3, #390]	; 0x186
 8006d22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	601a      	str	r2, [r3, #0]
	break;
 8006d28:	e117      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	; 0x188
 8006d30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	601a      	str	r2, [r3, #0]
	break;
 8006d36:	e110      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	; 0x18a
 8006d3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	601a      	str	r2, [r3, #0]
	break;
 8006d44:	e109      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	; 0x18c
 8006d4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	601a      	str	r2, [r3, #0]
	break;
 8006d52:	e102      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	; 0x18e
 8006d5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	601a      	str	r2, [r3, #0]
	break;
 8006d60:	e0fb      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	; 0x190
 8006d68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	601a      	str	r2, [r3, #0]
	break;
 8006d6e:	e0f4      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 8006d76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	601a      	str	r2, [r3, #0]
	break;
 8006d7c:	e0ed      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	; 0x194
 8006d84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	601a      	str	r2, [r3, #0]
	break;
 8006d8a:	e0e6      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	f9b3 3196 	ldrsh.w	r3, [r3, #406]	; 0x196
 8006d92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	601a      	str	r2, [r3, #0]
	break;
 8006d98:	e0df      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	f9b3 3198 	ldrsh.w	r3, [r3, #408]	; 0x198
 8006da0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	601a      	str	r2, [r3, #0]
	break;
 8006da6:	e0d8      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	; 0x19a
 8006dae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	601a      	str	r2, [r3, #0]
	break;
 8006db4:	e0d1      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	; 0x19c
 8006dbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	601a      	str	r2, [r3, #0]
	break;
 8006dc2:	e0ca      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	; 0x19e
 8006dca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	601a      	str	r2, [r3, #0]
	break;
 8006dd0:	e0c3      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	f9b3 31a0 	ldrsh.w	r3, [r3, #416]	; 0x1a0
 8006dd8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	601a      	str	r2, [r3, #0]
	break;
 8006dde:	e0bc      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	f9b3 31a2 	ldrsh.w	r3, [r3, #418]	; 0x1a2
 8006de6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	601a      	str	r2, [r3, #0]
	break;
 8006dec:	e0b5      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	f9b3 31a4 	ldrsh.w	r3, [r3, #420]	; 0x1a4
 8006df4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	601a      	str	r2, [r3, #0]
	break;
 8006dfa:	e0ae      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	f9b3 31a6 	ldrsh.w	r3, [r3, #422]	; 0x1a6
 8006e02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	601a      	str	r2, [r3, #0]
	break;
 8006e08:	e0a7      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	; 0x1a8
 8006e10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	601a      	str	r2, [r3, #0]
	break;
 8006e16:	e0a0      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	f9b3 31aa 	ldrsh.w	r3, [r3, #426]	; 0x1aa
 8006e1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	601a      	str	r2, [r3, #0]
	break;
 8006e24:	e099      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	; 0x1ac
 8006e2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	601a      	str	r2, [r3, #0]
	break;
 8006e32:	e092      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	f9b3 31ae 	ldrsh.w	r3, [r3, #430]	; 0x1ae
 8006e3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	601a      	str	r2, [r3, #0]
	break;
 8006e40:	e08b      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	f9b3 31b0 	ldrsh.w	r3, [r3, #432]	; 0x1b0
 8006e48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	601a      	str	r2, [r3, #0]
	break;
 8006e4e:	e084      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	; 0x1b2
 8006e56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	601a      	str	r2, [r3, #0]
	break;
 8006e5c:	e07d      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	f9b3 31b4 	ldrsh.w	r3, [r3, #436]	; 0x1b4
 8006e64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	601a      	str	r2, [r3, #0]
	break;
 8006e6a:	e076      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	f9b3 31b6 	ldrsh.w	r3, [r3, #438]	; 0x1b6
 8006e72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	601a      	str	r2, [r3, #0]
	break;
 8006e78:	e06f      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	f9b3 31b8 	ldrsh.w	r3, [r3, #440]	; 0x1b8
 8006e80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	601a      	str	r2, [r3, #0]
	break;
 8006e86:	e068      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	f9b3 31ba 	ldrsh.w	r3, [r3, #442]	; 0x1ba
 8006e8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	601a      	str	r2, [r3, #0]
	break;
 8006e94:	e061      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	f9b3 31bc 	ldrsh.w	r3, [r3, #444]	; 0x1bc
 8006e9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	601a      	str	r2, [r3, #0]
	break;
 8006ea2:	e05a      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 8006eaa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	601a      	str	r2, [r3, #0]
	break;
 8006eb0:	e053      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 8006eb8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	601a      	str	r2, [r3, #0]
	break;
 8006ebe:	e04c      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 8006ec6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	601a      	str	r2, [r3, #0]
	break;
 8006ecc:	e045      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 8006ed4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	601a      	str	r2, [r3, #0]
	break;
 8006eda:	e03e      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 8006ee2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	601a      	str	r2, [r3, #0]
	break;
 8006ee8:	e037      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 8006ef0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	601a      	str	r2, [r3, #0]
	break;
 8006ef6:	e030      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 8006efe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	601a      	str	r2, [r3, #0]
	break;
 8006f04:	e029      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 8006f0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	601a      	str	r2, [r3, #0]
	break;
 8006f12:	e022      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 8006f1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	601a      	str	r2, [r3, #0]
	break;
 8006f20:	e01b      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 8006f28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	601a      	str	r2, [r3, #0]
	break;
 8006f2e:	e014      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 8006f36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	601a      	str	r2, [r3, #0]
	break;
 8006f3c:	e00d      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 8006f44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	601a      	str	r2, [r3, #0]
	break;
 8006f4a:	e006      	b.n	8006f5a <VL53LX_get_tuning_parm+0xdd6>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006f52:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8006f54:	23fc      	movs	r3, #252	; 0xfc
 8006f56:	77fb      	strb	r3, [r7, #31]
	break;
 8006f58:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006f5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3724      	adds	r7, #36	; 0x24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop

08006f6c <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006f74:	2300      	movs	r3, #0
 8006f76:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3318      	adds	r3, #24
 8006f7c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006f84:	3314      	adds	r3, #20
 8006f86:	2201      	movs	r2, #1
 8006f88:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b085      	sub	sp, #20
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	3318      	adds	r3, #24
 8006faa:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006fb2:	3314      	adds	r3, #20
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3318      	adds	r3, #24
 8006fd8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006fe0:	3315      	adds	r3, #21
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b085      	sub	sp, #20
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006ffe:	2300      	movs	r3, #0
 8007000:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	3318      	adds	r3, #24
 8007006:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800700e:	3316      	adds	r3, #22
 8007010:	2201      	movs	r2, #1
 8007012:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8007014:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800702c:	2300      	movs	r3, #0
 800702e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3318      	adds	r3, #24
 8007034:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800703c:	3316      	adds	r3, #22
 800703e:	2200      	movs	r2, #0
 8007040:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8007042:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 8007052:	b480      	push	{r7}
 8007054:	b085      	sub	sp, #20
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800705a:	2300      	movs	r3, #0
 800705c:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	3318      	adds	r3, #24
 8007062:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800706a:	3315      	adds	r3, #21
 800706c:	2201      	movs	r2, #1
 800706e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8007070:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007088:	2300      	movs	r3, #0
 800708a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2208      	movs	r2, #8
 8007090:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	220b      	movs	r2, #11
 8007096:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800709e:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80070a6:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80070ae:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80070b6:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80070b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80070d0:	2300      	movs	r3, #0
 80070d2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2212      	movs	r2, #18
 80070de:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	220f      	movs	r2, #15
 80070e4:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2202      	movs	r2, #2
 80070ea:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80070f2:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	220c      	movs	r2, #12
 80070f8:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80070fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b084      	sub	sp, #16
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007114:	2300      	movs	r3, #0
 8007116:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	895b      	ldrh	r3, [r3, #10]
 800711c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	895b      	ldrh	r3, [r3, #10]
 800713a:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	2200      	movs	r2, #0
 8007158:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2200      	movs	r2, #0
 800715e:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	2240      	movs	r2, #64	; 0x40
 8007164:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10d      	bne.n	800718a <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d108      	bne.n	800718a <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d103      	bne.n	800718a <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2200      	movs	r2, #0
 8007186:	741a      	strb	r2, [r3, #16]
 8007188:	e002      	b.n	8007190 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2201      	movs	r2, #1
 800718e:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 8007190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d114      	bne.n	80071c2 <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 800719c:	2b01      	cmp	r3, #1
 800719e:	d110      	bne.n	80071c2 <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	6818      	ldr	r0, [r3, #0]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	7d9b      	ldrb	r3, [r3, #22]
 80071b4:	f001 ffa0 	bl	80090f8 <VL53LX_calc_range_ignore_threshold>
 80071b8:	4603      	mov	r3, r0
 80071ba:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	831a      	strh	r2, [r3, #24]
 80071c0:	e002      	b.n	80071c8 <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2200      	movs	r2, #0
 80071c6:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	f64f 72ce 	movw	r2, #65486	; 0xffce
 80071ce:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2232      	movs	r2, #50	; 0x32
 80071d4:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80071dc:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	228c      	movs	r2, #140	; 0x8c
 80071e2:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80071e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80071f8:	2300      	movs	r3, #0
 80071fa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007202:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800720a:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2207      	movs	r2, #7
 8007210:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007218:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f242 7210 	movw	r2, #10000	; 0x2710
 8007220:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f64f 72ba 	movw	r2, #65466	; 0xffba
 8007228:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2246      	movs	r2, #70	; 0x46
 800722e:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007236:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	228c      	movs	r2, #140	; 0x8c
 800723c:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800723e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007256:	2300      	movs	r3, #0
 8007258:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007260:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007268:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8007270:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8007278:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2208      	movs	r2, #8
 800727e:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2228      	movs	r2, #40	; 0x28
 8007284:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2209      	movs	r2, #9
 800728a:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800728c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80072a4:	2300      	movs	r3, #0
 80072a6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80072ae:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f643 2298 	movw	r2, #15000	; 0x3a98
 80072b6:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80072be:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80072c6:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2210      	movs	r2, #16
 80072cc:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2208      	movs	r2, #8
 80072d2:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80072d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	4603      	mov	r3, r0
 80072ec:	6039      	str	r1, [r7, #0]
 80072ee:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80072f0:	2300      	movs	r3, #0
 80072f2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	2204      	movs	r2, #4
 80072f8:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2201      	movs	r2, #1
 80072fe:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2201      	movs	r2, #1
 8007304:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2202      	movs	r2, #2
 800730a:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	2201      	movs	r2, #1
 8007310:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2250      	movs	r2, #80	; 0x50
 8007316:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2264      	movs	r2, #100	; 0x64
 800731c:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	f241 023d 	movw	r2, #4157	; 0x103d
 8007324:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2210      	movs	r2, #16
 800732a:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	2232      	movs	r2, #50	; 0x32
 8007330:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2264      	movs	r2, #100	; 0x64
 8007336:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2201      	movs	r2, #1
 800733c:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	22b4      	movs	r2, #180	; 0xb4
 8007342:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	2200      	movs	r2, #0
 8007348:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8007350:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	2208      	movs	r2, #8
 8007356:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	2288      	movs	r2, #136	; 0x88
 800735e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2208      	movs	r2, #8
 8007366:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007378:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2200      	movs	r2, #0
 800737e:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	79fa      	ldrb	r2, [r7, #7]
 8007384:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	f64f 72ce 	movw	r2, #65486	; 0xffce
 800738e:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2232      	movs	r2, #50	; 0x32
 8007394:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800739c:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	228c      	movs	r2, #140	; 0x8c
 80073a2:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2250      	movs	r2, #80	; 0x50
 80073a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	2232      	movs	r2, #50	; 0x32
 80073b0:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 80073b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b085      	sub	sp, #20
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80073ca:	2300      	movs	r3, #0
 80073cc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	221e      	movs	r2, #30
 80073d2:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	220e      	movs	r2, #14
 80073d8:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f642 7294 	movw	r2, #12180	; 0x2f94
 80073e0:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	220e      	movs	r2, #14
 80073e6:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	220a      	movs	r2, #10
 80073ec:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2206      	movs	r2, #6
 80073f2:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	220e      	movs	r2, #14
 80073f8:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	220a      	movs	r2, #10
 80073fe:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2206      	movs	r2, #6
 8007404:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2209      	movs	r2, #9
 800740a:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2205      	movs	r2, #5
 8007410:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2203      	movs	r2, #3
 8007416:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2206      	movs	r2, #6
 800741c:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2206      	movs	r2, #6
 8007422:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2206      	movs	r2, #6
 8007428:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2202      	movs	r2, #2
 800742e:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2221      	movs	r2, #33	; 0x21
 8007434:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	223c      	movs	r2, #60	; 0x3c
 8007446:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	223c      	movs	r2, #60	; 0x3c
 800744c:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	223c      	movs	r2, #60	; 0x3c
 8007452:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2280      	movs	r2, #128	; 0x80
 8007458:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2280      	movs	r2, #128	; 0x80
 800745e:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2280      	movs	r2, #128	; 0x80
 8007464:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2208      	movs	r2, #8
 800746a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2210      	movs	r2, #16
 8007472:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2202      	movs	r2, #2
 8007482:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2202      	movs	r2, #2
 8007492:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80074ac:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f640 22be 	movw	r2, #2750	; 0xabe
 80074b6:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	22fa      	movs	r2, #250	; 0xfa
 80074be:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80074c8:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80074d2:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80074dc:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80074e6:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80074f0:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f64f 7238 	movw	r2, #65336	; 0xff38
 80074fa:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	22c8      	movs	r2, #200	; 0xc8
 8007502:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800750c:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800751e:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f640 32ea 	movw	r2, #3050	; 0xbea
 8007528:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8007532:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f640 32ea 	movw	r2, #3050	; 0xbea
 800753c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8007546:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f641 0238 	movw	r2, #6200	; 0x1838
 8007550:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	22fa      	movs	r2, #250	; 0xfa
 8007568:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8007572:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f640 42b2 	movw	r2, #3250	; 0xcb2
 800757c:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f241 1294 	movw	r2, #4500	; 0x1194
 8007586:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f64f 7238 	movw	r2, #65336	; 0xff38
 8007590:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	22c8      	movs	r2, #200	; 0xc8
 8007598:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f640 720a 	movw	r2, #3850	; 0xf0a
 80075c2:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f241 12f8 	movw	r2, #4600	; 0x11f8
 80075cc:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f640 720a 	movw	r2, #3850	; 0xf0a
 80075d6:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007618:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007620:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007628:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007630:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007638:	639a      	str	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007640:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f242 3228 	movw	r2, #9000	; 0x2328
 8007648:	641a      	str	r2, [r3, #64]	; 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f241 7270 	movw	r2, #6000	; 0x1770
 8007650:	645a      	str	r2, [r3, #68]	; 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f643 2298 	movw	r2, #15000	; 0x3a98
 8007658:	649a      	str	r2, [r3, #72]	; 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f242 3228 	movw	r2, #9000	; 0x2328
 8007660:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f241 7270 	movw	r2, #6000	; 0x1770
 8007668:	651a      	str	r2, [r3, #80]	; 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007670:	655a      	str	r2, [r3, #84]	; 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007678:	659a      	str	r2, [r3, #88]	; 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007680:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007688:	661a      	str	r2, [r3, #96]	; 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007690:	665a      	str	r2, [r3, #100]	; 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f24f 6218 	movw	r2, #63000	; 0xf618
 8007698:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80076a0:	671a      	str	r2, [r3, #112]	; 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80076a8:	675a      	str	r2, [r3, #116]	; 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80076b0:	679a      	str	r2, [r3, #120]	; 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	669a      	str	r2, [r3, #104]	; 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80076be:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80076c6:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f643 2298 	movw	r2, #15000	; 0x3a98
 80076de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2206      	movs	r2, #6
 80076e6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80076ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b085      	sub	sp, #20
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800770c:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2238      	movs	r2, #56	; 0x38
 8007712:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2220      	movs	r2, #32
 8007718:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2270      	movs	r2, #112	; 0x70
 800771e:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2210      	movs	r2, #16
 8007724:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2264      	movs	r2, #100	; 0x64
 800772a:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007732:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	220f      	movs	r2, #15
 8007738:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2234      	movs	r2, #52	; 0x34
 800773e:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	22c8      	movs	r2, #200	; 0xc8
 8007744:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800774c:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007754:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007756:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8007766:	b480      	push	{r7}
 8007768:	b087      	sub	sp, #28
 800776a:	af00      	add	r7, sp, #0
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	607a      	str	r2, [r7, #4]
 8007772:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007774:	2300      	movs	r3, #0
 8007776:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800777e:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2211      	movs	r2, #17
 80077c0:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2202      	movs	r2, #2
 80077c6:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2202      	movs	r2, #2
 80077d2:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2208      	movs	r2, #8
 80077d8:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 80077ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ec:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2201      	movs	r2, #1
 8007802:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	22ff      	movs	r2, #255	; 0xff
 800781a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800781c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781e:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8007824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007826:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2220      	movs	r2, #32
 800784e:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	220b      	movs	r2, #11
 8007854:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2202      	movs	r2, #2
 8007862:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	220d      	movs	r2, #13
 8007868:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800786a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786c:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8007890:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2238      	movs	r2, #56	; 0x38
 800789c:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	22ff      	movs	r2, #255	; 0xff
 80078a2:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2200      	movs	r2, #0
 80078ae:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	221a      	movs	r2, #26
 80078b4:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2200      	movs	r2, #0
 80078ba:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2220      	movs	r2, #32
 80078c0:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2201      	movs	r2, #1
 80078c6:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	22cc      	movs	r2, #204	; 0xcc
 80078cc:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	220b      	movs	r2, #11
 80078d2:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	2201      	movs	r2, #1
 80078d8:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	22f5      	movs	r2, #245	; 0xf5
 80078de:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2209      	movs	r2, #9
 80078e4:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 80078e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e8:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 80078ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f0:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2208      	movs	r2, #8
 80078fa:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2278      	movs	r2, #120	; 0x78
 8007900:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2200      	movs	r2, #0
 8007906:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2200      	movs	r2, #0
 800790c:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	2207      	movs	r2, #7
 8007912:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2221      	movs	r2, #33	; 0x21
 8007918:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2243      	movs	r2, #67	; 0x43
 800791e:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2210      	movs	r2, #16
 8007924:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2232      	movs	r2, #50	; 0x32
 800792a:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2254      	movs	r2, #84	; 0x54
 8007930:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2207      	movs	r2, #7
 8007936:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2221      	movs	r2, #33	; 0x21
 800793c:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2243      	movs	r2, #67	; 0x43
 8007942:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2210      	movs	r2, #16
 8007948:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	2202      	movs	r2, #2
 800794e:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	2243      	movs	r2, #67	; 0x43
 8007954:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2205      	movs	r2, #5
 800795a:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	2200      	movs	r2, #0
 8007960:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2207      	movs	r2, #7
 8007966:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2221      	movs	r2, #33	; 0x21
 800796c:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2243      	movs	r2, #67	; 0x43
 8007972:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2210      	movs	r2, #16
 8007978:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2232      	movs	r2, #50	; 0x32
 800797e:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2254      	movs	r2, #84	; 0x54
 8007984:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800798c:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007994:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2200      	movs	r2, #0
 800799a:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 800799c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799e:	2205      	movs	r2, #5
 80079a0:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 80079a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a4:	2200      	movs	r2, #0
 80079a6:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 80079a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079aa:	220f      	movs	r2, #15
 80079ac:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 80079ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b0:	220f      	movs	r2, #15
 80079b2:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 80079b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b6:	2208      	movs	r2, #8
 80079b8:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 80079ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079bc:	2208      	movs	r2, #8
 80079be:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	2201      	movs	r2, #1
 80079c4:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	2200      	movs	r2, #0
 80079ca:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	2200      	movs	r2, #0
 80079d0:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	2200      	movs	r2, #0
 80079d6:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 80079d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079da:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	220b      	movs	r2, #11
 80079e6:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	2209      	movs	r2, #9
 80079ec:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 80079ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f0:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 80079f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f8:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	2201      	movs	r2, #1
 8007a02:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8007a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a06:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	22c7      	movs	r2, #199	; 0xc7
 8007a1c:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	22ff      	movs	r2, #255	; 0xff
 8007a22:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	22db      	movs	r2, #219	; 0xdb
 8007a28:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	2200      	movs	r2, #0
 8007a34:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	2201      	movs	r2, #1
 8007a3a:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	2201      	movs	r2, #1
 8007a40:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	2221      	movs	r2, #33	; 0x21
 8007a46:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8007a48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	371c      	adds	r7, #28
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b090      	sub	sp, #64	; 0x40
 8007a5c:	af0a      	add	r7, sp, #40	; 0x28
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	9303      	str	r3, [sp, #12]
 8007a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a70:	9302      	str	r3, [sp, #8]
 8007a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a74:	9301      	str	r3, [sp, #4]
 8007a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	6879      	ldr	r1, [r7, #4]
 8007a80:	68b8      	ldr	r0, [r7, #8]
 8007a82:	f7ff fe70 	bl	8007766 <VL53LX_preset_mode_standard_ranging>
 8007a86:	4603      	mov	r3, r0
 8007a88:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007a8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d171      	bne.n	8007b76 <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007a98:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	9308      	str	r3, [sp, #32]
 8007a9e:	2305      	movs	r3, #5
 8007aa0:	9307      	str	r3, [sp, #28]
 8007aa2:	2304      	movs	r3, #4
 8007aa4:	9306      	str	r3, [sp, #24]
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	9305      	str	r3, [sp, #20]
 8007aaa:	2302      	movs	r3, #2
 8007aac:	9304      	str	r3, [sp, #16]
 8007aae:	2301      	movs	r3, #1
 8007ab0:	9303      	str	r3, [sp, #12]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	9302      	str	r3, [sp, #8]
 8007ab6:	2304      	movs	r3, #4
 8007ab8:	9301      	str	r3, [sp, #4]
 8007aba:	2303      	movs	r3, #3
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	2302      	movs	r3, #2
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	2007      	movs	r0, #7
 8007ac6:	f000 ffab 	bl	8008a20 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	3302      	adds	r3, #2
 8007ace:	9308      	str	r3, [sp, #32]
 8007ad0:	2305      	movs	r3, #5
 8007ad2:	9307      	str	r3, [sp, #28]
 8007ad4:	2304      	movs	r3, #4
 8007ad6:	9306      	str	r3, [sp, #24]
 8007ad8:	2303      	movs	r3, #3
 8007ada:	9305      	str	r3, [sp, #20]
 8007adc:	2302      	movs	r3, #2
 8007ade:	9304      	str	r3, [sp, #16]
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	9303      	str	r3, [sp, #12]
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	9302      	str	r3, [sp, #8]
 8007ae8:	2304      	movs	r3, #4
 8007aea:	9301      	str	r3, [sp, #4]
 8007aec:	2303      	movs	r3, #3
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	2302      	movs	r3, #2
 8007af2:	2201      	movs	r2, #1
 8007af4:	2100      	movs	r1, #0
 8007af6:	2007      	movs	r0, #7
 8007af8:	f001 f822 	bl	8008b40 <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	2209      	movs	r2, #9
 8007b00:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	220b      	movs	r2, #11
 8007b06:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	2209      	movs	r2, #9
 8007b0c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	220b      	movs	r2, #11
 8007b12:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007b14:	6a3b      	ldr	r3, [r7, #32]
 8007b16:	2200      	movs	r2, #0
 8007b18:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	2200      	movs	r2, #0
 8007b24:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	221a      	movs	r2, #26
 8007b2a:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 8007b32:	6a3b      	ldr	r3, [r7, #32]
 8007b34:	2228      	movs	r2, #40	; 0x28
 8007b36:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	2221      	movs	r2, #33	; 0x21
 8007b42:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	22f5      	movs	r2, #245	; 0xf5
 8007b48:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2208      	movs	r2, #8
 8007b4e:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2288      	movs	r2, #136	; 0x88
 8007b56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	68b9      	ldr	r1, [r7, #8]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f9e6 	bl	8007f36 <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	229b      	movs	r2, #155	; 0x9b
 8007b6e:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	2226      	movs	r2, #38	; 0x26
 8007b74:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007b76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3718      	adds	r7, #24
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b090      	sub	sp, #64	; 0x40
 8007b86:	af0a      	add	r7, sp, #40	; 0x28
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	607a      	str	r2, [r7, #4]
 8007b8e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007b90:	2300      	movs	r3, #0
 8007b92:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b96:	9304      	str	r3, [sp, #16]
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	9303      	str	r3, [sp, #12]
 8007b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9e:	9302      	str	r3, [sp, #8]
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	9301      	str	r3, [sp, #4]
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	68b9      	ldr	r1, [r7, #8]
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f7ff ff52 	bl	8007a58 <VL53LX_preset_mode_histogram_ranging>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007bb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d178      	bne.n	8007cb2 <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	9308      	str	r3, [sp, #32]
 8007bc4:	2305      	movs	r3, #5
 8007bc6:	9307      	str	r3, [sp, #28]
 8007bc8:	2304      	movs	r3, #4
 8007bca:	9306      	str	r3, [sp, #24]
 8007bcc:	2303      	movs	r3, #3
 8007bce:	9305      	str	r3, [sp, #20]
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	9304      	str	r3, [sp, #16]
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	9303      	str	r3, [sp, #12]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	9302      	str	r3, [sp, #8]
 8007bdc:	2304      	movs	r3, #4
 8007bde:	9301      	str	r3, [sp, #4]
 8007be0:	2303      	movs	r3, #3
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	2302      	movs	r3, #2
 8007be6:	2201      	movs	r2, #1
 8007be8:	2100      	movs	r1, #0
 8007bea:	2007      	movs	r0, #7
 8007bec:	f000 ff18 	bl	8008a20 <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf2:	3302      	adds	r3, #2
 8007bf4:	9308      	str	r3, [sp, #32]
 8007bf6:	2305      	movs	r3, #5
 8007bf8:	9307      	str	r3, [sp, #28]
 8007bfa:	2304      	movs	r3, #4
 8007bfc:	9306      	str	r3, [sp, #24]
 8007bfe:	2303      	movs	r3, #3
 8007c00:	9305      	str	r3, [sp, #20]
 8007c02:	2302      	movs	r3, #2
 8007c04:	9304      	str	r3, [sp, #16]
 8007c06:	2301      	movs	r3, #1
 8007c08:	9303      	str	r3, [sp, #12]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	9302      	str	r3, [sp, #8]
 8007c0e:	2304      	movs	r3, #4
 8007c10:	9301      	str	r3, [sp, #4]
 8007c12:	2303      	movs	r3, #3
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	2302      	movs	r3, #2
 8007c18:	2201      	movs	r2, #1
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	2007      	movs	r0, #7
 8007c1e:	f000 ff8f 	bl	8008b40 <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	68b9      	ldr	r1, [r7, #8]
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f982 	bl	8007f36 <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	2209      	movs	r2, #9
 8007c36:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	220b      	movs	r2, #11
 8007c3c:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	2200      	movs	r2, #0
 8007c42:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	2221      	movs	r2, #33	; 0x21
 8007c48:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	221b      	movs	r2, #27
 8007c54:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	2229      	movs	r2, #41	; 0x29
 8007c60:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	2200      	movs	r2, #0
 8007c66:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	2222      	movs	r2, #34	; 0x22
 8007c6c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2209      	movs	r2, #9
 8007c72:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	22f5      	movs	r2, #245	; 0xf5
 8007c78:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	2209      	movs	r2, #9
 8007c7e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	220b      	movs	r2, #11
 8007c84:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 8007c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c88:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 8007c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c90:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 8007c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c94:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2208      	movs	r2, #8
 8007c9a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2288      	movs	r2, #136	; 0x88
 8007ca2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	229b      	movs	r2, #155	; 0x9b
 8007caa:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	2226      	movs	r2, #38	; 0x26
 8007cb0:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007cb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b090      	sub	sp, #64	; 0x40
 8007cc2:	af0a      	add	r7, sp, #40	; 0x28
 8007cc4:	60f8      	str	r0, [r7, #12]
 8007cc6:	60b9      	str	r1, [r7, #8]
 8007cc8:	607a      	str	r2, [r7, #4]
 8007cca:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd2:	9304      	str	r3, [sp, #16]
 8007cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd6:	9303      	str	r3, [sp, #12]
 8007cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cda:	9302      	str	r3, [sp, #8]
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	68b9      	ldr	r1, [r7, #8]
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f7ff feb4 	bl	8007a58 <VL53LX_preset_mode_histogram_ranging>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007cf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d178      	bne.n	8007dee <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	9308      	str	r3, [sp, #32]
 8007d00:	2303      	movs	r3, #3
 8007d02:	9307      	str	r3, [sp, #28]
 8007d04:	2302      	movs	r3, #2
 8007d06:	9306      	str	r3, [sp, #24]
 8007d08:	2301      	movs	r3, #1
 8007d0a:	9305      	str	r3, [sp, #20]
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	9304      	str	r3, [sp, #16]
 8007d10:	2301      	movs	r3, #1
 8007d12:	9303      	str	r3, [sp, #12]
 8007d14:	2300      	movs	r3, #0
 8007d16:	9302      	str	r3, [sp, #8]
 8007d18:	2302      	movs	r3, #2
 8007d1a:	9301      	str	r3, [sp, #4]
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	2301      	movs	r3, #1
 8007d22:	2201      	movs	r2, #1
 8007d24:	2100      	movs	r1, #0
 8007d26:	2007      	movs	r0, #7
 8007d28:	f000 fe7a 	bl	8008a20 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2e:	3302      	adds	r3, #2
 8007d30:	9308      	str	r3, [sp, #32]
 8007d32:	2303      	movs	r3, #3
 8007d34:	9307      	str	r3, [sp, #28]
 8007d36:	2302      	movs	r3, #2
 8007d38:	9306      	str	r3, [sp, #24]
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	9305      	str	r3, [sp, #20]
 8007d3e:	2302      	movs	r3, #2
 8007d40:	9304      	str	r3, [sp, #16]
 8007d42:	2301      	movs	r3, #1
 8007d44:	9303      	str	r3, [sp, #12]
 8007d46:	2300      	movs	r3, #0
 8007d48:	9302      	str	r3, [sp, #8]
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	9301      	str	r3, [sp, #4]
 8007d4e:	2302      	movs	r3, #2
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	2301      	movs	r3, #1
 8007d54:	2201      	movs	r2, #1
 8007d56:	2100      	movs	r1, #0
 8007d58:	2007      	movs	r0, #7
 8007d5a:	f000 fef1 	bl	8008b40 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	68b9      	ldr	r1, [r7, #8]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f8e4 	bl	8007f36 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	2205      	movs	r2, #5
 8007d72:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	2207      	movs	r2, #7
 8007d78:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	2236      	movs	r2, #54	; 0x36
 8007d84:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	2228      	movs	r2, #40	; 0x28
 8007d90:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	2200      	movs	r2, #0
 8007d96:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	2244      	movs	r2, #68	; 0x44
 8007d9c:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007d9e:	6a3b      	ldr	r3, [r7, #32]
 8007da0:	2200      	movs	r2, #0
 8007da2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	2233      	movs	r2, #51	; 0x33
 8007da8:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2205      	movs	r2, #5
 8007dae:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	22f5      	movs	r2, #245	; 0xf5
 8007db4:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 8007db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db8:	2205      	movs	r2, #5
 8007dba:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	2207      	movs	r2, #7
 8007dc0:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 8007dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc4:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 8007dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dcc:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2208      	movs	r2, #8
 8007dd6:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2248      	movs	r2, #72	; 0x48
 8007dde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	229b      	movs	r2, #155	; 0x9b
 8007de6:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dea:	2226      	movs	r2, #38	; 0x26
 8007dec:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007dee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b090      	sub	sp, #64	; 0x40
 8007dfe:	af0a      	add	r7, sp, #40	; 0x28
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
 8007e06:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0e:	9304      	str	r3, [sp, #16]
 8007e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e12:	9303      	str	r3, [sp, #12]
 8007e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e16:	9302      	str	r3, [sp, #8]
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	9301      	str	r3, [sp, #4]
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	68b9      	ldr	r1, [r7, #8]
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f7ff fe16 	bl	8007a58 <VL53LX_preset_mode_histogram_ranging>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007e30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d178      	bne.n	8007f2a <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	9308      	str	r3, [sp, #32]
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	9307      	str	r3, [sp, #28]
 8007e40:	2302      	movs	r3, #2
 8007e42:	9306      	str	r3, [sp, #24]
 8007e44:	2301      	movs	r3, #1
 8007e46:	9305      	str	r3, [sp, #20]
 8007e48:	2301      	movs	r3, #1
 8007e4a:	9304      	str	r3, [sp, #16]
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	9303      	str	r3, [sp, #12]
 8007e50:	2300      	movs	r3, #0
 8007e52:	9302      	str	r3, [sp, #8]
 8007e54:	2301      	movs	r3, #1
 8007e56:	9301      	str	r3, [sp, #4]
 8007e58:	2301      	movs	r3, #1
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	2200      	movs	r2, #0
 8007e60:	2107      	movs	r1, #7
 8007e62:	2007      	movs	r0, #7
 8007e64:	f000 fddc 	bl	8008a20 <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6a:	3302      	adds	r3, #2
 8007e6c:	9308      	str	r3, [sp, #32]
 8007e6e:	2302      	movs	r3, #2
 8007e70:	9307      	str	r3, [sp, #28]
 8007e72:	2302      	movs	r3, #2
 8007e74:	9306      	str	r3, [sp, #24]
 8007e76:	2301      	movs	r3, #1
 8007e78:	9305      	str	r3, [sp, #20]
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	9304      	str	r3, [sp, #16]
 8007e7e:	2301      	movs	r3, #1
 8007e80:	9303      	str	r3, [sp, #12]
 8007e82:	2300      	movs	r3, #0
 8007e84:	9302      	str	r3, [sp, #8]
 8007e86:	2301      	movs	r3, #1
 8007e88:	9301      	str	r3, [sp, #4]
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	2301      	movs	r3, #1
 8007e90:	2200      	movs	r2, #0
 8007e92:	2107      	movs	r1, #7
 8007e94:	2007      	movs	r0, #7
 8007e96:	f000 fe53 	bl	8008b40 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	68b9      	ldr	r1, [r7, #8]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f846 	bl	8007f36 <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	2203      	movs	r2, #3
 8007eae:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	2205      	movs	r2, #5
 8007eb4:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	2252      	movs	r2, #82	; 0x52
 8007ec0:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	2237      	movs	r2, #55	; 0x37
 8007ecc:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007ece:	6a3b      	ldr	r3, [r7, #32]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
 8007ed6:	2266      	movs	r2, #102	; 0x66
 8007ed8:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	2200      	movs	r2, #0
 8007ede:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	2244      	movs	r2, #68	; 0x44
 8007ee4:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2203      	movs	r2, #3
 8007eea:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	22f5      	movs	r2, #245	; 0xf5
 8007ef0:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	2203      	movs	r2, #3
 8007ef6:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	2205      	movs	r2, #5
 8007efc:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8007efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f00:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8007f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f08:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2208      	movs	r2, #8
 8007f12:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2228      	movs	r2, #40	; 0x28
 8007f1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	22bb      	movs	r2, #187	; 0xbb
 8007f22:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f26:	2226      	movs	r2, #38	; 0x26
 8007f28:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007f2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 8007f36:	b480      	push	{r7}
 8007f38:	b085      	sub	sp, #20
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	60f8      	str	r0, [r7, #12]
 8007f3e:	60b9      	str	r1, [r7, #8]
 8007f40:	607a      	str	r2, [r7, #4]
 8007f42:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	79db      	ldrb	r3, [r3, #7]
 8007f78:	b29b      	uxth	r3, r3
				<< 8)
 8007f7a:	021b      	lsls	r3, r3, #8
 8007f7c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	7a1b      	ldrb	r3, [r3, #8]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	4413      	add	r3, r2
 8007f86:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	785b      	ldrb	r3, [r3, #1]
 8007fc0:	b29b      	uxth	r3, r3
				<< 8)
 8007fc2:	021b      	lsls	r3, r3, #8
 8007fc4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	789b      	ldrb	r3, [r3, #2]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	4413      	add	r3, r2
 8007fce:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	78db      	ldrb	r3, [r3, #3]
 8007fd8:	b29b      	uxth	r3, r3
				<< 8)
 8007fda:	021b      	lsls	r3, r3, #8
 8007fdc:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	791b      	ldrb	r3, [r3, #4]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	4413      	add	r3, r2
 8007fe6:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 8008014:	bf00      	nop
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	79db      	ldrb	r3, [r3, #7]
 8008060:	b29b      	uxth	r3, r3
				<< 8)
 8008062:	021b      	lsls	r3, r3, #8
 8008064:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	7a1b      	ldrb	r3, [r3, #8]
 800806a:	b29b      	uxth	r3, r3
 800806c:	4413      	add	r3, r2
 800806e:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	785b      	ldrb	r3, [r3, #1]
 80080a0:	b29b      	uxth	r3, r3
				<< 8)
 80080a2:	021b      	lsls	r3, r3, #8
 80080a4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	789b      	ldrb	r3, [r3, #2]
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	4413      	add	r3, r2
 80080ae:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	78db      	ldrb	r3, [r3, #3]
 80080b8:	b29b      	uxth	r3, r3
				<< 8)
 80080ba:	021b      	lsls	r3, r3, #8
 80080bc:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	791b      	ldrb	r3, [r3, #4]
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	4413      	add	r3, r2
 80080c6:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 80080dc:	bf00      	nop
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3318      	adds	r3, #24
 80080f4:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008114:	bf00      	nop
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	3318      	adds	r3, #24
 8008130:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	332c      	adds	r3, #44	; 0x2c
 8008136:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	78fa      	ldrb	r2, [r7, #3]
 800813c:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2200      	movs	r2, #0
 8008142:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2202      	movs	r2, #2
 8008148:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	2200      	movs	r2, #0
 800814e:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2200      	movs	r2, #0
 8008154:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	78fa      	ldrb	r2, [r7, #3]
 800815a:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2200      	movs	r2, #0
 8008160:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	2202      	movs	r2, #2
 8008166:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	2200      	movs	r2, #0
 800816c:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2200      	movs	r2, #0
 8008172:	735a      	strb	r2, [r3, #13]

}
 8008174:	bf00      	nop
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 8008188:	2300      	movs	r3, #0
 800818a:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3318      	adds	r3, #24
 8008190:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	332c      	adds	r3, #44	; 0x2c
 8008196:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 800819e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d115      	bne.n	80081d2 <VL53LX_update_ll_driver_rd_state+0x52>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2203      	movs	r2, #3
 80081aa:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2202      	movs	r2, #2
 80081c2:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	735a      	strb	r2, [r3, #13]
 80081d0:	e0be      	b.n	8008350 <VL53LX_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	7a1b      	ldrb	r3, [r3, #8]
 80081d6:	2bff      	cmp	r3, #255	; 0xff
 80081d8:	d103      	bne.n	80081e2 <VL53LX_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2280      	movs	r2, #128	; 0x80
 80081de:	721a      	strb	r2, [r3, #8]
 80081e0:	e005      	b.n	80081ee <VL53LX_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	7a1b      	ldrb	r3, [r3, #8]
 80081e6:	3301      	adds	r3, #1
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	7a19      	ldrb	r1, [r3, #8]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f103 0209 	add.w	r2, r3, #9
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	330a      	adds	r3, #10
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f002 fcf6 	bl	800abee <VL53LX_update_internal_stream_counters>
 8008202:	4603      	mov	r3, r0
 8008204:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	7adb      	ldrb	r3, [r3, #11]
 800820a:	f083 0302 	eor.w	r3, r3, #2
 800820e:	b2da      	uxtb	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	79db      	ldrb	r3, [r3, #7]
 8008218:	3b03      	subs	r3, #3
 800821a:	2b05      	cmp	r3, #5
 800821c:	f200 8082 	bhi.w	8008324 <VL53LX_update_ll_driver_rd_state+0x1a4>
 8008220:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <VL53LX_update_ll_driver_rd_state+0xa8>)
 8008222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008226:	bf00      	nop
 8008228:	08008241 	.word	0x08008241
 800822c:	08008325 	.word	0x08008325
 8008230:	08008325 	.word	0x08008325
 8008234:	08008293 	.word	0x08008293
 8008238:	080082c9 	.word	0x080082c9
 800823c:	080082f3 	.word	0x080082f3

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	f893 335e 	ldrb.w	r3, [r3, #862]	; 0x35e
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b00      	cmp	r3, #0
 800824c:	dd03      	ble.n	8008256 <VL53LX_update_ll_driver_rd_state+0xd6>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2206      	movs	r2, #6
 8008252:	71da      	strb	r2, [r3, #7]
 8008254:	e00d      	b.n	8008272 <VL53LX_update_ll_driver_rd_state+0xf2>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 8008260:	429a      	cmp	r2, r3
 8008262:	d303      	bcc.n	800826c <VL53LX_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2208      	movs	r2, #8
 8008268:	71da      	strb	r2, [r3, #7]
 800826a:	e002      	b.n	8008272 <VL53LX_update_ll_driver_rd_state+0xf2>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2207      	movs	r2, #7
 8008270:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	735a      	strb	r2, [r3, #13]

			break;
 8008290:	e05e      	b.n	8008350 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d303      	bcc.n	80082c0 <VL53LX_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2208      	movs	r2, #8
 80082bc:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 80082be:	e047      	b.n	8008350 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2207      	movs	r2, #7
 80082c4:	71da      	strb	r2, [r3, #7]
			break;
 80082c6:	e043      	b.n	8008350 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	7b5b      	ldrb	r3, [r3, #13]
 80082cc:	3301      	adds	r3, #1
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 80082de:	429a      	cmp	r2, r3
 80082e0:	d303      	bcc.n	80082ea <VL53LX_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2208      	movs	r2, #8
 80082e6:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 80082e8:	e032      	b.n	8008350 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2207      	movs	r2, #7
 80082ee:	71da      	strb	r2, [r3, #7]
			break;
 80082f0:	e02e      	b.n	8008350 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	7b1b      	ldrb	r3, [r3, #12]
 80082fc:	f083 0301 	eor.w	r3, r3, #1
 8008300:	b2da      	uxtb	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8008310:	429a      	cmp	r2, r3
 8008312:	d303      	bcc.n	800831c <VL53LX_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2208      	movs	r2, #8
 8008318:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800831a:	e019      	b.n	8008350 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2207      	movs	r2, #7
 8008320:	71da      	strb	r2, [r3, #7]
			break;
 8008322:	e015      	b.n	8008350 <VL53LX_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2203      	movs	r2, #3
 8008328:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2202      	movs	r2, #2
 8008340:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	735a      	strb	r2, [r3, #13]
			break;
 800834e:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 8008350:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3718      	adds	r7, #24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 800835c:	b480      	push	{r7}
 800835e:	b08d      	sub	sp, #52	; 0x34
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8008364:	2300      	movs	r3, #0
 8008366:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t  *pdev =
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	3318      	adds	r3, #24
 800836e:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8008376:	627b      	str	r3, [r7, #36]	; 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8008378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837a:	332c      	adds	r3, #44	; 0x2c
 800837c:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 800837e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008380:	f203 3366 	addw	r3, r3, #870	; 0x366
 8008384:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 8008386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008388:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800838c:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8008394:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800839a:	2300      	movs	r3, #0
 800839c:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800839e:	2300      	movs	r3, #0
 80083a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 80083a4:	2300      	movs	r3, #0
 80083a6:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 80083a8:	2300      	movs	r3, #0
 80083aa:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 80083ac:	2300      	movs	r3, #0
 80083ae:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 80083b4:	f003 031f 	and.w	r3, r3, #31
 80083b8:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	78db      	ldrb	r3, [r3, #3]
 80083be:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 80083c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c2:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80083c6:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	bf14      	ite	ne
 80083ce:	2301      	movne	r3, #1
 80083d0:	2300      	moveq	r3, #0
 80083d2:	b2db      	uxtb	r3, r3
	histogram_mode =
 80083d4:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80083da:	111b      	asrs	r3, r3, #4
 80083dc:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 80083de:	f003 0302 	and.w	r3, r3, #2
 80083e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 80083e6:	7c7b      	ldrb	r3, [r7, #17]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d008      	beq.n	80083fe <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80083f2:	111b      	asrs	r3, r3, #4
 80083f4:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 80083f6:	f003 0302 	and.w	r3, r3, #2
 80083fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 80083fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008400:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8008404:	f003 0320 	and.w	r3, r3, #32
 8008408:	2b00      	cmp	r3, #0
 800840a:	d04e      	beq.n	80084aa <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	79db      	ldrb	r3, [r3, #7]
 8008410:	2b06      	cmp	r3, #6
 8008412:	d109      	bne.n	8008428 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 8008414:	7c7b      	ldrb	r3, [r7, #17]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d14a      	bne.n	80084b0 <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 800841a:	7cfb      	ldrb	r3, [r7, #19]
 800841c:	2b12      	cmp	r3, #18
 800841e:	d047      	beq.n	80084b0 <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8008420:	23ef      	movs	r3, #239	; 0xef
 8008422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008426:	e043      	b.n	80084b0 <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	7a1b      	ldrb	r3, [r3, #8]
 800842c:	7cba      	ldrb	r2, [r7, #18]
 800842e:	429a      	cmp	r2, r3
 8008430:	d002      	beq.n	8008438 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 8008432:	23ee      	movs	r3, #238	; 0xee
 8008434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	7adb      	ldrb	r3, [r3, #11]
 800843c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008440:	429a      	cmp	r2, r3
 8008442:	d002      	beq.n	800844a <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8008444:	23ed      	movs	r3, #237	; 0xed
 8008446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 800844a:	6a3b      	ldr	r3, [r7, #32]
 800844c:	7b5b      	ldrb	r3, [r3, #13]
 800844e:	4619      	mov	r1, r3
		expected_stream_count =
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	460b      	mov	r3, r1
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	440b      	add	r3, r1
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	4413      	add	r3, r2
 800845c:	3302      	adds	r3, #2
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	7b5b      	ldrb	r3, [r3, #13]
 8008466:	4619      	mov	r1, r3
		expected_gph_id =
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	460b      	mov	r3, r1
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	440b      	add	r3, r1
 8008470:	005b      	lsls	r3, r3, #1
 8008472:	4413      	add	r3, r2
 8008474:	3303      	adds	r3, #3
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800847a:	7c3a      	ldrb	r2, [r7, #16]
 800847c:	7cbb      	ldrb	r3, [r7, #18]
 800847e:	429a      	cmp	r2, r3
 8008480:	d00a      	beq.n	8008498 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008488:	2b00      	cmp	r3, #0
 800848a:	d102      	bne.n	8008492 <VL53LX_check_ll_driver_rd_state+0x136>
 800848c:	7cbb      	ldrb	r3, [r7, #18]
 800848e:	2bff      	cmp	r3, #255	; 0xff
 8008490:	d002      	beq.n	8008498 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 8008492:	23ec      	movs	r3, #236	; 0xec
 8008494:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 8008498:	7bfa      	ldrb	r2, [r7, #15]
 800849a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800849e:	429a      	cmp	r2, r3
 80084a0:	d005      	beq.n	80084ae <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 80084a2:	23eb      	movs	r3, #235	; 0xeb
 80084a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80084a8:	e002      	b.n	80084b0 <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 80084aa:	bf00      	nop
 80084ac:	e000      	b.n	80084b0 <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 80084ae:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 80084b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3734      	adds	r7, #52	; 0x34
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b088      	sub	sp, #32
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 80084c8:	2300      	movs	r3, #0
 80084ca:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3318      	adds	r3, #24
 80084d0:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80084d8:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	332c      	adds	r3, #44	; 0x2c
 80084de:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80084e6:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80084ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d11b      	bne.n	800852e <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	2203      	movs	r2, #3
 80084fa:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	2200      	movs	r2, #0
 8008500:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	2200      	movs	r2, #0
 8008506:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	2200      	movs	r2, #0
 800850c:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	2202      	movs	r2, #2
 8008512:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	2200      	movs	r2, #0
 8008518:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	2200      	movs	r2, #0
 800851e:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8008524:	2300      	movs	r3, #0
 8008526:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	773b      	strb	r3, [r7, #28]
 800852c:	e0b1      	b.n	8008692 <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	791b      	ldrb	r3, [r3, #4]
 8008532:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	799b      	ldrb	r3, [r3, #6]
 8008538:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	785b      	ldrb	r3, [r3, #1]
 800853e:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	785b      	ldrb	r3, [r3, #1]
 8008544:	2bff      	cmp	r3, #255	; 0xff
 8008546:	d103      	bne.n	8008550 <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	2280      	movs	r2, #128	; 0x80
 800854c:	705a      	strb	r2, [r3, #1]
 800854e:	e005      	b.n	800855c <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	785b      	ldrb	r3, [r3, #1]
 8008554:	3301      	adds	r3, #1
 8008556:	b2da      	uxtb	r2, r3
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	7859      	ldrb	r1, [r3, #1]
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	1c9a      	adds	r2, r3, #2
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	3303      	adds	r3, #3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f002 fb40 	bl	800abee <VL53LX_update_internal_stream_counters>
 800856e:	4603      	mov	r3, r0
 8008570:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	791b      	ldrb	r3, [r3, #4]
 8008576:	f083 0302 	eor.w	r3, r3, #2
 800857a:	b2da      	uxtb	r2, r3
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	2b05      	cmp	r3, #5
 8008586:	d053      	beq.n	8008630 <VL53LX_update_ll_driver_cfg_state+0x170>
 8008588:	2b05      	cmp	r3, #5
 800858a:	dc69      	bgt.n	8008660 <VL53LX_update_ll_driver_cfg_state+0x1a0>
 800858c:	2b03      	cmp	r3, #3
 800858e:	d002      	beq.n	8008596 <VL53LX_update_ll_driver_cfg_state+0xd6>
 8008590:	2b04      	cmp	r3, #4
 8008592:	d02d      	beq.n	80085f0 <VL53LX_update_ll_driver_cfg_state+0x130>
 8008594:	e064      	b.n	8008660 <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	2201      	movs	r2, #1
 800859a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d909      	bls.n	80085be <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	2200      	movs	r2, #0
 80085ae:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	795b      	ldrb	r3, [r3, #5]
 80085b4:	f083 0301 	eor.w	r3, r3, #1
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	2201      	movs	r2, #1
 80085c2:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d106      	bne.n	80085dc <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	2201      	movs	r2, #1
 80085d2:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	2200      	movs	r2, #0
 80085d8:	70da      	strb	r2, [r3, #3]
 80085da:	e005      	b.n	80085e8 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	2200      	movs	r2, #0
 80085e0:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	2201      	movs	r2, #1
 80085e6:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	2204      	movs	r2, #4
 80085ec:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 80085ee:	e050      	b.n	8008692 <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	799b      	ldrb	r3, [r3, #6]
 80085f4:	3301      	adds	r3, #1
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8008606:	429a      	cmp	r2, r3
 8008608:	d940      	bls.n	800868c <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	2200      	movs	r2, #0
 800860e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	795b      	ldrb	r3, [r3, #5]
 8008614:	f083 0301 	eor.w	r3, r3, #1
 8008618:	b2da      	uxtb	r2, r3
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d031      	beq.n	800868c <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	2205      	movs	r2, #5
 800862c:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800862e:	e02d      	b.n	800868c <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	799b      	ldrb	r3, [r3, #6]
 8008634:	3301      	adds	r3, #1
 8008636:	b2da      	uxtb	r2, r3
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8008646:	429a      	cmp	r2, r3
 8008648:	d922      	bls.n	8008690 <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	2200      	movs	r2, #0
 800864e:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	795b      	ldrb	r3, [r3, #5]
 8008654:	f083 0301 	eor.w	r3, r3, #1
 8008658:	b2da      	uxtb	r2, r3
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	715a      	strb	r2, [r3, #5]
			}
			break;
 800865e:	e017      	b.n	8008690 <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	2203      	movs	r2, #3
 8008664:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	2200      	movs	r2, #0
 800866a:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	2200      	movs	r2, #0
 8008670:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	2200      	movs	r2, #0
 8008676:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	2202      	movs	r2, #2
 800867c:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	2200      	movs	r2, #0
 8008682:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	2200      	movs	r2, #0
 8008688:	719a      	strb	r2, [r3, #6]
			break;
 800868a:	e002      	b.n	8008692 <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 800868c:	bf00      	nop
 800868e:	e000      	b.n	8008692 <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8008690:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8008698:	2b00      	cmp	r3, #0
 800869a:	d11d      	bne.n	80086d8 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 800869c:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800869e:	7f3b      	ldrb	r3, [r7, #28]
 80086a0:	3b01      	subs	r3, #1
 80086a2:	b2d8      	uxtb	r0, r3
 80086a4:	68f9      	ldr	r1, [r7, #12]
 80086a6:	4613      	mov	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	440b      	add	r3, r1
 80086b0:	3302      	adds	r3, #2
 80086b2:	4602      	mov	r2, r0
 80086b4:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	7b5b      	ldrb	r3, [r3, #13]
 80086ba:	4619      	mov	r1, r3
 80086bc:	7f7b      	ldrb	r3, [r7, #29]
 80086be:	f083 0302 	eor.w	r3, r3, #2
 80086c2:	b2d8      	uxtb	r0, r3
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	460b      	mov	r3, r1
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	440b      	add	r3, r1
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	4413      	add	r3, r2
 80086d0:	3303      	adds	r3, #3
 80086d2:	4602      	mov	r2, r0
 80086d4:	701a      	strb	r2, [r3, #0]
 80086d6:	e013      	b.n	8008700 <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 80086d8:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 80086da:	68f9      	ldr	r1, [r7, #12]
 80086dc:	4613      	mov	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	005b      	lsls	r3, r3, #1
 80086e4:	440b      	add	r3, r1
 80086e6:	3302      	adds	r3, #2
 80086e8:	7f3a      	ldrb	r2, [r7, #28]
 80086ea:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 80086ec:	7fba      	ldrb	r2, [r7, #30]
 80086ee:	68f9      	ldr	r1, [r7, #12]
 80086f0:	4613      	mov	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	440b      	add	r3, r1
 80086fa:	3303      	adds	r3, #3
 80086fc:	7f7a      	ldrb	r2, [r7, #29]
 80086fe:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 8008700:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3720      	adds	r7, #32
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	7c1a      	ldrb	r2, [r3, #16]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	3301      	adds	r3, #1
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	7c52      	ldrb	r2, [r2, #17]
 8008726:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	3302      	adds	r3, #2
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	7c92      	ldrb	r2, [r2, #18]
 8008730:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	3303      	adds	r3, #3
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	7cd2      	ldrb	r2, [r2, #19]
 800873a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	3304      	adds	r3, #4
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	7d12      	ldrb	r2, [r2, #20]
 8008744:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	3305      	adds	r3, #5
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	7d52      	ldrb	r2, [r2, #21]
 800874e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	3306      	adds	r3, #6
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	7d92      	ldrb	r2, [r2, #22]
 8008758:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	3307      	adds	r3, #7
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	7dd2      	ldrb	r2, [r2, #23]
 8008762:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	3308      	adds	r3, #8
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	7e12      	ldrb	r2, [r2, #24]
 800876c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	3309      	adds	r3, #9
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	7e52      	ldrb	r2, [r2, #25]
 8008776:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	330a      	adds	r3, #10
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	7e92      	ldrb	r2, [r2, #26]
 8008780:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	330b      	adds	r3, #11
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	7ed2      	ldrb	r2, [r2, #27]
 800878a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	330c      	adds	r3, #12
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	7f12      	ldrb	r2, [r2, #28]
 8008794:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	330d      	adds	r3, #13
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	7f52      	ldrb	r2, [r2, #29]
 800879e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	330e      	adds	r3, #14
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	7f92      	ldrb	r2, [r2, #30]
 80087a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	330f      	adds	r3, #15
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	7fd2      	ldrb	r2, [r2, #31]
 80087b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	3310      	adds	r3, #16
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	f892 2020 	ldrb.w	r2, [r2, #32]
 80087be:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	3311      	adds	r3, #17
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80087ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	3312      	adds	r3, #18
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80087d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	3313      	adds	r3, #19
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 80087e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	3314      	adds	r3, #20
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80087ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	3315      	adds	r3, #21
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80087fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	3316      	adds	r3, #22
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8008806:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	3317      	adds	r3, #23
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8008812:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	3318      	adds	r3, #24
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800881e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	3319      	adds	r3, #25
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800882a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	331a      	adds	r3, #26
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8008836:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	331b      	adds	r3, #27
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8008842:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	331c      	adds	r3, #28
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800884e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	331d      	adds	r3, #29
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800885a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	331e      	adds	r3, #30
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8008866:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	331f      	adds	r3, #31
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8008872:	701a      	strb	r2, [r3, #0]
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	22ff      	movs	r2, #255	; 0xff
 800888c:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	22ff      	movs	r2, #255	; 0xff
 8008892:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	22ff      	movs	r2, #255	; 0xff
 8008898:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	22ff      	movs	r2, #255	; 0xff
 800889e:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088a6:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088ae:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088b6:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088be:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088c6:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088ce:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088d6:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088de:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088e6:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088ee:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088f6:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088fe:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008906:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800890e:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008916:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800891e:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008926:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800892e:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008936:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	22ff      	movs	r2, #255	; 0xff
 800893c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	4603      	mov	r3, r0
 8008954:	6039      	str	r1, [r7, #0]
 8008956:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 8008958:	2300      	movs	r3, #0
 800895a:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2205      	movs	r2, #5
 8008960:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	79fa      	ldrb	r2, [r7, #7]
 8008966:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8008968:	2300      	movs	r3, #0
 800896a:	73fb      	strb	r3, [r7, #15]
 800896c:	e017      	b.n	800899e <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 800896e:	7bfa      	ldrb	r2, [r7, #15]
 8008970:	4613      	mov	r3, r2
 8008972:	011b      	lsls	r3, r3, #4
 8008974:	4413      	add	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	683a      	ldr	r2, [r7, #0]
 800897a:	4413      	add	r3, r2
 800897c:	3304      	adds	r3, #4
 800897e:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	2203      	movs	r2, #3
 8008984:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2203      	movs	r2, #3
 800898a:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2204      	movs	r2, #4
 8008990:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2200      	movs	r2, #0
 8008996:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8008998:	7bfb      	ldrb	r3, [r7, #15]
 800899a:	3301      	adds	r3, #1
 800899c:	73fb      	strb	r3, [r7, #15]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	7bfa      	ldrb	r2, [r7, #15]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d3e2      	bcc.n	800896e <V53L1_init_zone_results_structure+0x22>
	}
}
 80089a8:	bf00      	nop
 80089aa:	bf00      	nop
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53LX_DEV              Dev)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b087      	sub	sp, #28
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverResults_t  *pres =
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80089c4:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53LX_MAX_USER_ZONES;
 80089ca:	2305      	movs	r3, #5
 80089cc:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80089d4:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 80089d6:	2300      	movs	r3, #0
 80089d8:	75fb      	strb	r3, [r7, #23]
 80089da:	e016      	b.n	8008a0a <V53L1_init_zone_dss_configs+0x54>
		pdata->VL53LX_p_003[z].dss_mode =
 80089dc:	7dfa      	ldrb	r2, [r7, #23]
 80089de:	68b9      	ldr	r1, [r7, #8]
 80089e0:	4613      	mov	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	440b      	add	r3, r1
 80089ea:	3304      	adds	r3, #4
 80089ec:	2201      	movs	r2, #1
 80089ee:	701a      	strb	r2, [r3, #0]
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53LX_p_003[z].dss_requested_effective_spad_count = 0;
 80089f0:	7dfa      	ldrb	r2, [r7, #23]
 80089f2:	68b9      	ldr	r1, [r7, #8]
 80089f4:	4613      	mov	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	005b      	lsls	r3, r3, #1
 80089fc:	440b      	add	r3, r1
 80089fe:	3306      	adds	r3, #6
 8008a00:	2200      	movs	r2, #0
 8008a02:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 8008a04:	7dfb      	ldrb	r3, [r7, #23]
 8008a06:	3301      	adds	r3, #1
 8008a08:	75fb      	strb	r3, [r7, #23]
 8008a0a:	7dfa      	ldrb	r2, [r7, #23]
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d3e4      	bcc.n	80089dc <V53L1_init_zone_dss_configs+0x26>
	}
}
 8008a12:	bf00      	nop
 8008a14:	bf00      	nop
 8008a16:	371c      	adds	r7, #28
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8008a20:	b490      	push	{r4, r7}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	4604      	mov	r4, r0
 8008a28:	4608      	mov	r0, r1
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	4623      	mov	r3, r4
 8008a30:	71fb      	strb	r3, [r7, #7]
 8008a32:	4603      	mov	r3, r0
 8008a34:	71bb      	strb	r3, [r7, #6]
 8008a36:	460b      	mov	r3, r1
 8008a38:	717b      	strb	r3, [r7, #5]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8008a3e:	79bb      	ldrb	r3, [r7, #6]
 8008a40:	011b      	lsls	r3, r3, #4
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	79fb      	ldrb	r3, [r7, #7]
 8008a46:	4413      	add	r3, r2
 8008a48:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4c:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8008a4e:	793b      	ldrb	r3, [r7, #4]
 8008a50:	011b      	lsls	r3, r3, #4
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	797b      	ldrb	r3, [r7, #5]
 8008a56:	4413      	add	r3, r2
 8008a58:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5c:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8008a5e:	7d3b      	ldrb	r3, [r7, #20]
 8008a60:	011b      	lsls	r3, r3, #4
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	7c3b      	ldrb	r3, [r7, #16]
 8008a66:	4413      	add	r3, r2
 8008a68:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 8008a6e:	7f3b      	ldrb	r3, [r7, #28]
 8008a70:	011b      	lsls	r3, r3, #4
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	7e3b      	ldrb	r3, [r7, #24]
 8008a76:	4413      	add	r3, r2
 8008a78:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7c:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 8008a7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a82:	011b      	lsls	r3, r3, #4
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a90:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 8008a92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a96:	011b      	lsls	r3, r3, #4
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a9e:	4413      	add	r3, r2
 8008aa0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa4:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa8:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aac:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab4:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 8008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abc:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8008abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac0:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac4:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008acc:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8008ace:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ad2:	011b      	lsls	r3, r3, #4
 8008ad4:	b2da      	uxtb	r2, r3
 8008ad6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ada:	4413      	add	r3, r2
 8008adc:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008ae8:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	2200      	movs	r2, #0
 8008aee:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8008af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af2:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8008af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afa:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8008afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afe:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8008b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b02:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0e:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 8008b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b12:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 8008b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1a:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1e:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b26:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8008b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b2e:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8008b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b32:	2200      	movs	r2, #0
 8008b34:	701a      	strb	r2, [r3, #0]

}
 8008b36:	bf00      	nop
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bc90      	pop	{r4, r7}
 8008b3e:	4770      	bx	lr

08008b40 <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8008b40:	b490      	push	{r4, r7}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	4604      	mov	r4, r0
 8008b48:	4608      	mov	r0, r1
 8008b4a:	4611      	mov	r1, r2
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	4623      	mov	r3, r4
 8008b50:	71fb      	strb	r3, [r7, #7]
 8008b52:	4603      	mov	r3, r0
 8008b54:	71bb      	strb	r3, [r7, #6]
 8008b56:	460b      	mov	r3, r1
 8008b58:	717b      	strb	r3, [r7, #5]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8008b5e:	79bb      	ldrb	r3, [r7, #6]
 8008b60:	011b      	lsls	r3, r3, #4
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	79fb      	ldrb	r3, [r7, #7]
 8008b66:	4413      	add	r3, r2
 8008b68:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8008b6e:	793b      	ldrb	r3, [r7, #4]
 8008b70:	011b      	lsls	r3, r3, #4
 8008b72:	b2da      	uxtb	r2, r3
 8008b74:	797b      	ldrb	r3, [r7, #5]
 8008b76:	4413      	add	r3, r2
 8008b78:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8008b7e:	7d3b      	ldrb	r3, [r7, #20]
 8008b80:	011b      	lsls	r3, r3, #4
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	7c3b      	ldrb	r3, [r7, #16]
 8008b86:	4413      	add	r3, r2
 8008b88:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8c:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b90:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8008b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b94:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8008b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b98:	789a      	ldrb	r2, [r3, #2]
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9c:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba0:	78da      	ldrb	r2, [r3, #3]
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba4:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8008baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bac:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	789a      	ldrb	r2, [r3, #2]
 8008bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb4:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb8:	78da      	ldrb	r2, [r3, #3]
 8008bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbc:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	791a      	ldrb	r2, [r3, #4]
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc4:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008bcc:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8008bce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008bd2:	011b      	lsls	r3, r3, #4
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008bda:	4413      	add	r3, r2
 8008bdc:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8008bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be0:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 8008be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008be8:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8008bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bec:	2200      	movs	r2, #0
 8008bee:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 8008bf0:	7f3b      	ldrb	r3, [r7, #28]
 8008bf2:	011b      	lsls	r3, r3, #4
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	7e3b      	ldrb	r3, [r7, #24]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8008bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfe:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 8008c00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c04:	011b      	lsls	r3, r3, #4
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8008c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c12:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 8008c14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c18:	011b      	lsls	r3, r3, #4
 8008c1a:	b2da      	uxtb	r2, r3
 8008c1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c20:	4413      	add	r3, r2
 8008c22:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 8008c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c26:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 8008c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2a:	7bda      	ldrb	r2, [r3, #15]
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2e:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 8008c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c32:	7c1a      	ldrb	r2, [r3, #16]
 8008c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c36:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	7c5a      	ldrb	r2, [r3, #17]
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3e:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8008c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c46:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8008c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c4e:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8008c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c52:	2200      	movs	r2, #0
 8008c54:	701a      	strb	r2, [r3, #0]
}
 8008c56:	bf00      	nop
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bc90      	pop	{r4, r7}
 8008c5e:	4770      	bx	lr

08008c60 <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	607a      	str	r2, [r7, #4]
 8008c6c:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	220c      	movs	r2, #12
 8008c88:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 8008c8a:	897b      	ldrh	r3, [r7, #10]
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_015                = 0;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	82fb      	strh	r3, [r7, #22]
 8008cc4:	e015      	b.n	8008cf2 <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 8008cc6:	8afa      	ldrh	r2, [r7, #22]
 8008cc8:	897b      	ldrh	r3, [r7, #10]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d207      	bcs.n	8008cde <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 8008cce:	8afb      	ldrh	r3, [r7, #22]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	3302      	adds	r3, #2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	605a      	str	r2, [r3, #4]
 8008cdc:	e006      	b.n	8008cec <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 8008cde:	8afb      	ldrh	r3, [r7, #22]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	3302      	adds	r3, #2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4413      	add	r3, r2
 8008ce8:	2200      	movs	r2, #0
 8008cea:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 8008cec:	8afb      	ldrh	r3, [r7, #22]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	82fb      	strh	r3, [r7, #22]
 8008cf2:	8afb      	ldrh	r3, [r7, #22]
 8008cf4:	2b0b      	cmp	r3, #11
 8008cf6:	d9e6      	bls.n	8008cc6 <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 8008cf8:	bf00      	nop
 8008cfa:	bf00      	nop
 8008cfc:	371c      	adds	r7, #28
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b085      	sub	sp, #20
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	603a      	str	r2, [r7, #0]
 8008d10:	80fb      	strh	r3, [r7, #6]
 8008d12:	460b      	mov	r3, r1
 8008d14:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 8008d1e:	88fb      	ldrh	r3, [r7, #6]
 8008d20:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8008d22:	2300      	movs	r3, #0
 8008d24:	81fb      	strh	r3, [r7, #14]
 8008d26:	e00e      	b.n	8008d46 <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008d28:	88ba      	ldrh	r2, [r7, #4]
 8008d2a:	89fb      	ldrh	r3, [r7, #14]
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	683a      	ldr	r2, [r7, #0]
 8008d32:	4413      	add	r3, r2
 8008d34:	89ba      	ldrh	r2, [r7, #12]
 8008d36:	b2d2      	uxtb	r2, r2
 8008d38:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008d3a:	89bb      	ldrh	r3, [r7, #12]
 8008d3c:	0a1b      	lsrs	r3, r3, #8
 8008d3e:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8008d40:	89fb      	ldrh	r3, [r7, #14]
 8008d42:	3301      	adds	r3, #1
 8008d44:	81fb      	strh	r3, [r7, #14]
 8008d46:	89fa      	ldrh	r2, [r7, #14]
 8008d48:	88bb      	ldrh	r3, [r7, #4]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d3ec      	bcc.n	8008d28 <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 8008d4e:	bf00      	nop
 8008d50:	bf00      	nop
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	6039      	str	r1, [r7, #0]
 8008d66:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8008d6c:	e00a      	b.n	8008d84 <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8008d6e:	89fb      	ldrh	r3, [r7, #14]
 8008d70:	021b      	lsls	r3, r3, #8
 8008d72:	b21a      	sxth	r2, r3
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	1c59      	adds	r1, r3, #1
 8008d78:	6039      	str	r1, [r7, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	b21b      	sxth	r3, r3
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	b21b      	sxth	r3, r3
 8008d82:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 8008d84:	88fb      	ldrh	r3, [r7, #6]
 8008d86:	1e5a      	subs	r2, r3, #1
 8008d88:	80fa      	strh	r2, [r7, #6]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1ef      	bne.n	8008d6e <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 8008d8e:	89fb      	ldrh	r3, [r7, #14]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3714      	adds	r7, #20
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	4603      	mov	r3, r0
 8008da4:	603a      	str	r2, [r7, #0]
 8008da6:	80fb      	strh	r3, [r7, #6]
 8008da8:	460b      	mov	r3, r1
 8008daa:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 8008db4:	88fb      	ldrh	r3, [r7, #6]
 8008db6:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8008db8:	2300      	movs	r3, #0
 8008dba:	81fb      	strh	r3, [r7, #14]
 8008dbc:	e00f      	b.n	8008dde <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008dbe:	88ba      	ldrh	r2, [r7, #4]
 8008dc0:	89fb      	ldrh	r3, [r7, #14]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	683a      	ldr	r2, [r7, #0]
 8008dc8:	4413      	add	r3, r2
 8008dca:	89ba      	ldrh	r2, [r7, #12]
 8008dcc:	b2d2      	uxtb	r2, r2
 8008dce:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008dd0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008dd4:	121b      	asrs	r3, r3, #8
 8008dd6:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8008dd8:	89fb      	ldrh	r3, [r7, #14]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	81fb      	strh	r3, [r7, #14]
 8008dde:	89fa      	ldrh	r2, [r7, #14]
 8008de0:	88bb      	ldrh	r3, [r7, #4]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d3eb      	bcc.n	8008dbe <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 8008de6:	bf00      	nop
 8008de8:	bf00      	nop
 8008dea:	3714      	adds	r7, #20
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	6039      	str	r1, [r7, #0]
 8008dfe:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 8008e00:	2300      	movs	r3, #0
 8008e02:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	b25b      	sxtb	r3, r3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	da0e      	bge.n	8008e2c <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 8008e0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e12:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8008e14:	e00a      	b.n	8008e2c <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 8008e16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008e1a:	021b      	lsls	r3, r3, #8
 8008e1c:	b21a      	sxth	r2, r3
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	1c59      	adds	r1, r3, #1
 8008e22:	6039      	str	r1, [r7, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	b21b      	sxth	r3, r3
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 8008e2c:	88fb      	ldrh	r3, [r7, #6]
 8008e2e:	1e5a      	subs	r2, r3, #1
 8008e30:	80fa      	strh	r2, [r7, #6]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1ef      	bne.n	8008e16 <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 8008e36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b087      	sub	sp, #28
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	60f8      	str	r0, [r7, #12]
 8008e4e:	460b      	mov	r3, r1
 8008e50:	607a      	str	r2, [r7, #4]
 8008e52:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 8008e54:	2300      	movs	r3, #0
 8008e56:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 8008e60:	2300      	movs	r3, #0
 8008e62:	82fb      	strh	r3, [r7, #22]
 8008e64:	e00e      	b.n	8008e84 <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008e66:	897a      	ldrh	r2, [r7, #10]
 8008e68:	8afb      	ldrh	r3, [r7, #22]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	4413      	add	r3, r2
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	b2d2      	uxtb	r2, r2
 8008e76:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	0a1b      	lsrs	r3, r3, #8
 8008e7c:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 8008e7e:	8afb      	ldrh	r3, [r7, #22]
 8008e80:	3301      	adds	r3, #1
 8008e82:	82fb      	strh	r3, [r7, #22]
 8008e84:	8afa      	ldrh	r2, [r7, #22]
 8008e86:	897b      	ldrh	r3, [r7, #10]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d3ec      	bcc.n	8008e66 <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 8008e8c:	bf00      	nop
 8008e8e:	bf00      	nop
 8008e90:	371c      	adds	r7, #28
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b085      	sub	sp, #20
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	6039      	str	r1, [r7, #0]
 8008ea4:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 8008eaa:	e007      	b.n	8008ebc <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	021a      	lsls	r2, r3, #8
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	1c59      	adds	r1, r3, #1
 8008eb4:	6039      	str	r1, [r7, #0]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 8008ebc:	88fb      	ldrh	r3, [r7, #6]
 8008ebe:	1e5a      	subs	r2, r3, #1
 8008ec0:	80fa      	strh	r2, [r7, #6]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1f2      	bne.n	8008eac <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	4603      	mov	r3, r0
 8008edc:	6039      	str	r1, [r7, #0]
 8008ede:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	b25b      	sxtb	r3, r3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	da0b      	bge.n	8008f06 <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 8008eee:	f04f 33ff 	mov.w	r3, #4294967295
 8008ef2:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 8008ef4:	e007      	b.n	8008f06 <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	021a      	lsls	r2, r3, #8
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	1c59      	adds	r1, r3, #1
 8008efe:	6039      	str	r1, [r7, #0]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 8008f06:	88fb      	ldrh	r3, [r7, #6]
 8008f08:	1e5a      	subs	r2, r3, #1
 8008f0a:	80fa      	strh	r2, [r7, #6]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1f2      	bne.n	8008ef6 <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 8008f10:	68fb      	ldr	r3, [r7, #12]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <VL53LX_start_test>:


VL53LX_Error VL53LX_start_test(
	VL53LX_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	460b      	mov	r3, r1
 8008f28:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE) {
 8008f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d107      	bne.n	8008f46 <VL53LX_start_test+0x28>
		status = VL53LX_WrByte(
 8008f36:	78fb      	ldrb	r3, [r7, #3]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	2127      	movs	r1, #39	; 0x27
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f008 fc6d 	bl	801181c <VL53LX_WrByte>
 8008f42:	4603      	mov	r3, r0
 8008f44:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b084      	sub	sp, #16
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	3318      	adds	r3, #24
 8008f66:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	78fa      	ldrb	r2, [r7, #3]
 8008f6c:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362

	status = VL53LX_WrByte(
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f893 3362 	ldrb.w	r3, [r3, #866]	; 0x362
 8008f76:	461a      	mov	r2, r3
 8008f78:	2185      	movs	r1, #133	; 0x85
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f008 fc4e 	bl	801181c <VL53LX_WrByte>
 8008f80:	4603      	mov	r3, r0
 8008f82:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 8008f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff ffd7 	bl	8008f52 <VL53LX_set_firmware_enable_register>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff ffc5 	bl	8008f52 <VL53LX_set_firmware_enable_register>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	3318      	adds	r3, #24
 8008fec:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	78fa      	ldrb	r2, [r7, #3]
 8008ff2:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360

	status = VL53LX_WrByte(
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f893 3360 	ldrb.w	r3, [r3, #864]	; 0x360
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	2183      	movs	r1, #131	; 0x83
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f008 fc0b 	bl	801181c <VL53LX_WrByte>
 8009006:	4603      	mov	r3, r0
 8009008:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800900a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800901e:	2300      	movs	r3, #0
 8009020:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 8009022:	2101      	movs	r1, #1
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7ff ffd7 	bl	8008fd8 <VL53LX_set_powerforce_register>
 800902a:	4603      	mov	r3, r0
 800902c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800902e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8009042:	2300      	movs	r3, #0
 8009044:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 8009046:	2100      	movs	r1, #0
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7ff ffc5 	bl	8008fd8 <VL53LX_set_powerforce_register>
 800904e:	4603      	mov	r3, r0
 8009050:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8009052:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <VL53LX_clear_interrupt>:


VL53LX_Error VL53LX_clear_interrupt(
	VL53LX_DEV    Dev)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8009066:	2300      	movs	r3, #0
 8009068:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	3318      	adds	r3, #24
 800906e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53LX_CLEAR_RANGE_INT;
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363

	status = VL53LX_WrByte(
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800907e:	461a      	mov	r2, r3
 8009080:	2186      	movs	r1, #134	; 0x86
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f008 fbca 	bl	801181c <VL53LX_WrByte>
 8009088:	4603      	mov	r3, r0
 800908a:	73fb      	strb	r3, [r7, #15]
				VL53LX_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800908c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	460a      	mov	r2, r1
 80090a2:	80fb      	strh	r3, [r7, #6]
 80090a4:	4613      	mov	r3, r2
 80090a6:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 80090a8:	2300      	movs	r3, #0
 80090aa:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 80090ac:	2300      	movs	r3, #0
 80090ae:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 80090b0:	2300      	movs	r3, #0
 80090b2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 80090b4:	88fb      	ldrh	r3, [r7, #6]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f002 fe9b 	bl	800bdf2 <VL53LX_calc_pll_period_us>
 80090bc:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 80090be:	797b      	ldrb	r3, [r7, #5]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f003 fa69 	bl	800c598 <VL53LX_decode_vcsel_period>
 80090c6:	4603      	mov	r3, r0
 80090c8:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	4613      	mov	r3, r2
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	4413      	add	r3, r2
 80090d2:	021b      	lsls	r3, r3, #8
 80090d4:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	099b      	lsrs	r3, r3, #6
 80090da:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 80090dc:	7cfa      	ldrb	r2, [r7, #19]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	fb02 f303 	mul.w	r3, r2, r3
 80090e4:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	099b      	lsrs	r3, r3, #6
 80090ea:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 80090ec:	68fb      	ldr	r3, [r7, #12]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
	...

080090f8 <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b089      	sub	sp, #36	; 0x24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	4608      	mov	r0, r1
 8009102:	4611      	mov	r1, r2
 8009104:	461a      	mov	r2, r3
 8009106:	4603      	mov	r3, r0
 8009108:	817b      	strh	r3, [r7, #10]
 800910a:	460b      	mov	r3, r1
 800910c:	813b      	strh	r3, [r7, #8]
 800910e:	4613      	mov	r3, r2
 8009110:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8009116:	2300      	movs	r3, #0
 8009118:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	011b      	lsls	r3, r3, #4
 800912a:	4a23      	ldr	r2, [pc, #140]	; (80091b8 <VL53LX_calc_range_ignore_threshold+0xc0>)
 800912c:	fb82 1203 	smull	r1, r2, r2, r3
 8009130:	1192      	asrs	r2, r2, #6
 8009132:	17db      	asrs	r3, r3, #31
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 8009138:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800913c:	2b00      	cmp	r3, #0
 800913e:	da03      	bge.n	8009148 <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8009140:	897b      	ldrh	r3, [r7, #10]
 8009142:	425b      	negs	r3, r3
 8009144:	b29b      	uxth	r3, r3
 8009146:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 8009148:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800914c:	2b00      	cmp	r3, #0
 800914e:	da03      	bge.n	8009158 <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8009150:	893b      	ldrh	r3, [r7, #8]
 8009152:	425b      	negs	r3, r3
 8009154:	b29b      	uxth	r3, r3
 8009156:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 8009158:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800915c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009160:	4413      	add	r3, r2
 8009162:	015b      	lsls	r3, r3, #5
 8009164:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	4a13      	ldr	r2, [pc, #76]	; (80091b8 <VL53LX_calc_range_ignore_threshold+0xc0>)
 800916a:	fb82 1203 	smull	r1, r2, r2, r3
 800916e:	1192      	asrs	r2, r2, #6
 8009170:	17db      	asrs	r3, r3, #31
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	4413      	add	r3, r2
 800917c:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800917e:	79fa      	ldrb	r2, [r7, #7]
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	fb02 f303 	mul.w	r3, r2, r3
 8009186:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	3310      	adds	r3, #16
 800918c:	2b00      	cmp	r3, #0
 800918e:	da00      	bge.n	8009192 <VL53LX_calc_range_ignore_threshold+0x9a>
 8009190:	331f      	adds	r3, #31
 8009192:	115b      	asrs	r3, r3, #5
 8009194:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800919c:	db03      	blt.n	80091a6 <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800919e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80091a2:	83fb      	strh	r3, [r7, #30]
 80091a4:	e001      	b.n	80091aa <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 80091aa:	8bfb      	ldrh	r3, [r7, #30]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3724      	adds	r7, #36	; 0x24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	10624dd3 	.word	0x10624dd3

080091bc <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 80091c6:	2300      	movs	r3, #0
 80091c8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d102      	bne.n	80091d6 <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 80091d0:	2300      	movs	r3, #0
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	e008      	b.n	80091e8 <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	031a      	lsls	r2, r3, #12
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	085b      	lsrs	r3, r3, #1
 80091de:	441a      	add	r2, r3
		timeout_mclks   =
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e6:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 80091e8:	68fb      	ldr	r3, [r7, #12]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3714      	adds	r7, #20
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b084      	sub	sp, #16
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
 80091fe:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8009200:	2300      	movs	r3, #0
 8009202:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8009204:	2300      	movs	r3, #0
 8009206:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 8009208:	6839      	ldr	r1, [r7, #0]
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7ff ffd6 	bl	80091bc <VL53LX_calc_timeout_mclks>
 8009210:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 f885 	bl	8009322 <VL53LX_encode_timeout>
 8009218:	4603      	mov	r3, r0
 800921a:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800921c:	897b      	ldrh	r3, [r7, #10]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8009226:	b4f0      	push	{r4, r5, r6, r7}
 8009228:	b086      	sub	sp, #24
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 8009234:	f04f 0200 	mov.w	r2, #0
 8009238:	f04f 0300 	mov.w	r3, #0
 800923c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4618      	mov	r0, r3
 8009244:	f04f 0100 	mov.w	r1, #0
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	461a      	mov	r2, r3
 800924c:	f04f 0300 	mov.w	r3, #0
 8009250:	fb02 fc01 	mul.w	ip, r2, r1
 8009254:	fb00 f603 	mul.w	r6, r0, r3
 8009258:	4466      	add	r6, ip
 800925a:	fba0 2302 	umull	r2, r3, r0, r2
 800925e:	18f1      	adds	r1, r6, r3
 8009260:	460b      	mov	r3, r1
 8009262:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009266:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800926a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800926e:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 8009272:	f143 0500 	adc.w	r5, r3, #0
 8009276:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 800927a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800927e:	f04f 0200 	mov.w	r2, #0
 8009282:	f04f 0300 	mov.w	r3, #0
 8009286:	0b02      	lsrs	r2, r0, #12
 8009288:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800928c:	0b0b      	lsrs	r3, r1, #12
 800928e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 8009296:	697b      	ldr	r3, [r7, #20]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3718      	adds	r7, #24
 800929c:	46bd      	mov	sp, r7
 800929e:	bcf0      	pop	{r4, r5, r6, r7}
 80092a0:	4770      	bx	lr
	...

080092a4 <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 80092b0:	2300      	movs	r3, #0
 80092b2:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 80092b4:	2300      	movs	r3, #0
 80092b6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 80092b8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 80092bc:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 80092be:	4413      	add	r3, r2
 80092c0:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	da02      	bge.n	80092ce <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 80092c8:	2300      	movs	r3, #0
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	e005      	b.n	80092da <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092d4:	db01      	blt.n	80092da <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 80092d6:	4b05      	ldr	r3, [pc, #20]	; (80092ec <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 80092d8:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 80092de:	68bb      	ldr	r3, [r7, #8]

}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	0003ffff 	.word	0x0003ffff

080092f0 <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	6039      	str	r1, [r7, #0]
 80092fa:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 80092fc:	2300      	movs	r3, #0
 80092fe:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 8009304:	88fb      	ldrh	r3, [r7, #6]
 8009306:	4618      	mov	r0, r3
 8009308:	f000 f837 	bl	800937a <VL53LX_decode_timeout>
 800930c:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f7ff ff88 	bl	8009226 <VL53LX_calc_timeout_us>
 8009316:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8009318:	68bb      	ldr	r3, [r7, #8]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 8009322:	b480      	push	{r7}
 8009324:	b087      	sub	sp, #28
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800932a:	2300      	movs	r3, #0
 800932c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800932e:	2300      	movs	r3, #0
 8009330:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d017      	beq.n	800936c <VL53LX_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	3b01      	subs	r3, #1
 8009340:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009342:	e005      	b.n	8009350 <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	085b      	lsrs	r3, r3, #1
 8009348:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800934a:	89fb      	ldrh	r3, [r7, #14]
 800934c:	3301      	adds	r3, #1
 800934e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1f4      	bne.n	8009344 <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800935a:	89fb      	ldrh	r3, [r7, #14]
 800935c:	021b      	lsls	r3, r3, #8
 800935e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	b29b      	uxth	r3, r3
 8009364:	b2db      	uxtb	r3, r3
 8009366:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8009368:	4413      	add	r3, r2
 800936a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800936c:	8afb      	ldrh	r3, [r7, #22]
}
 800936e:	4618      	mov	r0, r3
 8009370:	371c      	adds	r7, #28
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 800937a:	b480      	push	{r7}
 800937c:	b085      	sub	sp, #20
 800937e:	af00      	add	r7, sp, #0
 8009380:	4603      	mov	r3, r0
 8009382:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 8009384:	2300      	movs	r3, #0
 8009386:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009388:	88fb      	ldrh	r3, [r7, #6]
 800938a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800938c:	88fa      	ldrh	r2, [r7, #6]
 800938e:	0a12      	lsrs	r2, r2, #8
 8009390:	b292      	uxth	r2, r2
 8009392:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009394:	3301      	adds	r3, #1
 8009396:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8009398:	68fb      	ldr	r3, [r7, #12]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b088      	sub	sp, #32
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	60f8      	str	r0, [r7, #12]
 80093ae:	60b9      	str	r1, [r7, #8]
 80093b0:	607a      	str	r2, [r7, #4]
 80093b2:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80093b4:	2300      	movs	r3, #0
 80093b6:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 80093c0:	2300      	movs	r3, #0
 80093c2:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 80093c4:	887b      	ldrh	r3, [r7, #2]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d102      	bne.n	80093d0 <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80093ca:	23f1      	movs	r3, #241	; 0xf1
 80093cc:	77fb      	strb	r3, [r7, #31]
 80093ce:	e05d      	b.n	800948c <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 80093d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d2:	799a      	ldrb	r2, [r3, #6]
 80093d4:	887b      	ldrh	r3, [r7, #2]
 80093d6:	4611      	mov	r1, r2
 80093d8:	4618      	mov	r0, r3
 80093da:	f7ff fe5d 	bl	8009098 <VL53LX_calc_macro_period_us>
 80093de:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 80093e0:	6979      	ldr	r1, [r7, #20]
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f7ff feea 	bl	80091bc <VL53LX_calc_timeout_mclks>
 80093e8:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	2bff      	cmp	r3, #255	; 0xff
 80093ee:	d901      	bls.n	80093f4 <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 80093f0:	23ff      	movs	r3, #255	; 0xff
 80093f2:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 80093f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fa:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 80093fc:	6979      	ldr	r1, [r7, #20]
 80093fe:	68b8      	ldr	r0, [r7, #8]
 8009400:	f7ff fef9 	bl	80091f6 <VL53LX_calc_encoded_timeout>
 8009404:	4603      	mov	r3, r0
 8009406:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009408:	8a7b      	ldrh	r3, [r7, #18]
 800940a:	0a1b      	lsrs	r3, r3, #8
 800940c:	b29b      	uxth	r3, r3
 800940e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8009410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009412:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009414:	8a7b      	ldrh	r3, [r7, #18]
 8009416:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8009418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941a:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 800941c:	6979      	ldr	r1, [r7, #20]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff fee9 	bl	80091f6 <VL53LX_calc_encoded_timeout>
 8009424:	4603      	mov	r3, r0
 8009426:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009428:	8a7b      	ldrh	r3, [r7, #18]
 800942a:	0a1b      	lsrs	r3, r3, #8
 800942c:	b29b      	uxth	r3, r3
 800942e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8009430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009432:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009434:	8a7b      	ldrh	r3, [r7, #18]
 8009436:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8009438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943a:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 800943c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943e:	7a5a      	ldrb	r2, [r3, #9]
 8009440:	887b      	ldrh	r3, [r7, #2]
 8009442:	4611      	mov	r1, r2
 8009444:	4618      	mov	r0, r3
 8009446:	f7ff fe27 	bl	8009098 <VL53LX_calc_macro_period_us>
 800944a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 800944c:	6979      	ldr	r1, [r7, #20]
 800944e:	68b8      	ldr	r0, [r7, #8]
 8009450:	f7ff fed1 	bl	80091f6 <VL53LX_calc_encoded_timeout>
 8009454:	4603      	mov	r3, r0
 8009456:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009458:	8a7b      	ldrh	r3, [r7, #18]
 800945a:	0a1b      	lsrs	r3, r3, #8
 800945c:	b29b      	uxth	r3, r3
 800945e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8009460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009462:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009464:	8a7b      	ldrh	r3, [r7, #18]
 8009466:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8009468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946a:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 800946c:	6979      	ldr	r1, [r7, #20]
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7ff fec1 	bl	80091f6 <VL53LX_calc_encoded_timeout>
 8009474:	4603      	mov	r3, r0
 8009476:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8009478:	8a7b      	ldrh	r3, [r7, #18]
 800947a:	0a1b      	lsrs	r3, r3, #8
 800947c:	b29b      	uxth	r3, r3
 800947e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8009480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009482:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8009484:	8a7b      	ldrh	r3, [r7, #18]
 8009486:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8009488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948a:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800948c:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8009490:	4618      	mov	r0, r3
 8009492:	3720      	adds	r7, #32
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 8009498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949c:	b08b      	sub	sp, #44	; 0x2c
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80094a4:	2100      	movs	r1, #0
 80094a6:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27

	int64_t  evts              = 0;
 80094aa:	f04f 0000 	mov.w	r0, #0
 80094ae:	f04f 0100 	mov.w	r1, #0
 80094b2:	e9c7 0106 	strd	r0, r1, [r7, #24]
	int64_t  tmpi              = 0;
 80094b6:	f04f 0000 	mov.w	r0, #0
 80094ba:	f04f 0100 	mov.w	r1, #0
 80094be:	e9c7 0104 	strd	r0, r1, [r7, #16]
	int64_t  tmpo              = 0;
 80094c2:	f04f 0000 	mov.w	r0, #0
 80094c6:	f04f 0100 	mov.w	r1, #0
 80094ca:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 80094ce:	6879      	ldr	r1, [r7, #4]
 80094d0:	8849      	ldrh	r1, [r1, #2]
 80094d2:	2900      	cmp	r1, #0
 80094d4:	d103      	bne.n	80094de <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 80094d6:	23f1      	movs	r3, #241	; 0xf1
 80094d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094dc:	e0a5      	b.n	800962a <VL53LX_hist_copy_and_scale_ambient_info+0x192>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	7849      	ldrb	r1, [r1, #1]
 80094e2:	2900      	cmp	r1, #0
 80094e4:	f000 80a1 	beq.w	800962a <VL53LX_hist_copy_and_scale_ambient_info+0x192>
			podata->number_of_ambient_bins == 0) {
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	7ac9      	ldrb	r1, [r1, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 80094ec:	2900      	cmp	r1, #0
 80094ee:	f040 809c 	bne.w	800962a <VL53LX_hist_copy_and_scale_ambient_info+0x192>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	f8d1 1088 	ldr.w	r1, [r1, #136]	; 0x88
 80094f8:	4608      	mov	r0, r1
 80094fa:	f04f 0100 	mov.w	r1, #0
 80094fe:	f110 0a01 	adds.w	sl, r0, #1
 8009502:	f141 0b00 	adc.w	fp, r1, #0
 8009506:	e9c7 ab02 	strd	sl, fp, [r7, #8]
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
 8009510:	b288      	uxth	r0, r1
 8009512:	f04f 0100 	mov.w	r1, #0
			tmpo   *=
 8009516:	68fe      	ldr	r6, [r7, #12]
 8009518:	fb00 fc06 	mul.w	ip, r0, r6
 800951c:	68be      	ldr	r6, [r7, #8]
 800951e:	fb01 f606 	mul.w	r6, r1, r6
 8009522:	44b4      	add	ip, r6
 8009524:	68be      	ldr	r6, [r7, #8]
 8009526:	fba6 0100 	umull	r0, r1, r6, r0
 800952a:	eb0c 0601 	add.w	r6, ip, r1
 800952e:	4631      	mov	r1, r6
 8009530:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8009534:	e9c7 0102 	strd	r0, r1, [r7, #8]

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8009538:	6879      	ldr	r1, [r7, #4]
 800953a:	6889      	ldr	r1, [r1, #8]
 800953c:	4608      	mov	r0, r1
 800953e:	f04f 0100 	mov.w	r1, #0
 8009542:	1c44      	adds	r4, r0, #1
 8009544:	f141 0500 	adc.w	r5, r1, #0
 8009548:	e9c7 4504 	strd	r4, r5, [r7, #16]
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800954c:	6879      	ldr	r1, [r7, #4]
 800954e:	8849      	ldrh	r1, [r1, #2]
 8009550:	b288      	uxth	r0, r1
 8009552:	f04f 0100 	mov.w	r1, #0
			tmpi   *=
 8009556:	697c      	ldr	r4, [r7, #20]
 8009558:	fb00 f504 	mul.w	r5, r0, r4
 800955c:	693c      	ldr	r4, [r7, #16]
 800955e:	fb01 f404 	mul.w	r4, r1, r4
 8009562:	442c      	add	r4, r5
 8009564:	693d      	ldr	r5, [r7, #16]
 8009566:	fba5 0100 	umull	r0, r1, r5, r0
 800956a:	440c      	add	r4, r1
 800956c:	4621      	mov	r1, r4
 800956e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8009572:	e9c7 0104 	strd	r0, r1, [r7, #16]

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 8009576:	6879      	ldr	r1, [r7, #4]
 8009578:	68c9      	ldr	r1, [r1, #12]
 800957a:	4608      	mov	r0, r1
 800957c:	ea4f 71e0 	mov.w	r1, r0, asr #31
			evts  = tmpo *
 8009580:	68fc      	ldr	r4, [r7, #12]
 8009582:	fb00 f504 	mul.w	r5, r0, r4
 8009586:	68bc      	ldr	r4, [r7, #8]
 8009588:	fb01 f404 	mul.w	r4, r1, r4
 800958c:	442c      	add	r4, r5
 800958e:	68bd      	ldr	r5, [r7, #8]
 8009590:	fba5 0100 	umull	r0, r1, r5, r0
 8009594:	440c      	add	r4, r1
 8009596:	4621      	mov	r1, r4
 8009598:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800959c:	e9c7 0106 	strd	r0, r1, [r7, #24]
			evts += (tmpi/2);
 80095a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80095a4:	0fcc      	lsrs	r4, r1, #31
 80095a6:	f04f 0500 	mov.w	r5, #0
 80095aa:	1822      	adds	r2, r4, r0
 80095ac:	eb45 0301 	adc.w	r3, r5, r1
 80095b0:	f04f 0000 	mov.w	r0, #0
 80095b4:	f04f 0100 	mov.w	r1, #0
 80095b8:	0850      	lsrs	r0, r2, #1
 80095ba:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 80095be:	1059      	asrs	r1, r3, #1
 80095c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095c4:	eb12 0800 	adds.w	r8, r2, r0
 80095c8:	eb43 0901 	adc.w	r9, r3, r1
 80095cc:	e9c7 8906 	strd	r8, r9, [r7, #24]


			if (tmpi != 0)
 80095d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	d009      	beq.n	80095ec <VL53LX_hist_copy_and_scale_ambient_info+0x154>
				evts = do_division_s(evts, tmpi);
 80095d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80095dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80095e0:	f7f7 fa44 	bl	8000a6c <__aeabi_ldivmod>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	e9c7 2306 	strd	r2, r3, [r7, #24]

			podata->ambient_events_sum = (int32_t)evts;
 80095ec:	69ba      	ldr	r2, [r7, #24]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53LX_p_028 =
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 +=
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	7852      	ldrb	r2, [r2, #1]
 800960a:	0852      	lsrs	r2, r2, #1
 800960c:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 800960e:	441a      	add	r2, r3
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 /=
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 8009620:	fb93 f2f2 	sdiv	r2, r3, r2
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800962a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800962e:	4618      	mov	r0, r3
 8009630:	372c      	adds	r7, #44	; 0x2c
 8009632:	46bd      	mov	sp, r7
 8009634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009638 <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8009638:	b480      	push	{r7}
 800963a:	b087      	sub	sp, #28
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	3318      	adds	r3, #24
 8009646:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 8009648:	2300      	movs	r3, #0
 800964a:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	; 0x2fa
	amb_thresh_low  = 1024 *
 800965a:	029b      	lsls	r3, r3, #10
 800965c:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
	amb_thresh_high = 1024 *
 8009664:	029b      	lsls	r3, r3, #10
 8009666:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	2b00      	cmp	r3, #0
 8009674:	f040 8095 	bne.w	80097a2 <VL53LX_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
		pdata->bin_seq[5] =
 800967e:	091b      	lsrs	r3, r3, #4
 8009680:	b2da      	uxtb	r2, r3
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
 800968c:	f003 030f 	and.w	r3, r3, #15
 8009690:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
		pdata->bin_seq[3] =
 800969c:	091b      	lsrs	r3, r3, #4
 800969e:	b2da      	uxtb	r2, r3
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
 80096aa:	f003 030f 	and.w	r3, r3, #15
 80096ae:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
		pdata->bin_seq[1] =
 80096ba:	091b      	lsrs	r3, r3, #4
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
 80096c8:	f003 030f 	and.w	r3, r3, #15
 80096cc:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	429a      	cmp	r2, r3
 80096dc:	da2c      	bge.n	8009738 <VL53LX_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			pdata->bin_seq[5] =
 80096e4:	091b      	lsrs	r3, r3, #4
 80096e6:	b2da      	uxtb	r2, r3
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			& 0x0F;
 80096f2:	f003 030f 	and.w	r3, r3, #15
 80096f6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			pdata->bin_seq[3] =
 8009702:	091b      	lsrs	r3, r3, #4
 8009704:	b2da      	uxtb	r2, r3
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			& 0x0F;
 8009710:	f003 030f 	and.w	r3, r3, #15
 8009714:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			pdata->bin_seq[1] =
 8009720:	091b      	lsrs	r3, r3, #4
 8009722:	b2da      	uxtb	r2, r3
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			& 0x0F;
 800972e:	f003 030f 	and.w	r3, r3, #15
 8009732:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	429a      	cmp	r2, r3
 8009742:	f340 80c2 	ble.w	80098ca <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			pdata->bin_seq[5] =
 800974c:	091b      	lsrs	r3, r3, #4
 800974e:	b2da      	uxtb	r2, r3
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			& 0x0F;
 800975a:	f003 030f 	and.w	r3, r3, #15
 800975e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			pdata->bin_seq[3] =
 800976a:	091b      	lsrs	r3, r3, #4
 800976c:	b2da      	uxtb	r2, r3
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			& 0x0F;
 8009778:	f003 030f 	and.w	r3, r3, #15
 800977c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			pdata->bin_seq[1] =
 8009788:	091b      	lsrs	r3, r3, #4
 800978a:	b2da      	uxtb	r2, r3
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			& 0x0F;
 8009796:	f003 030f 	and.w	r3, r3, #15
 800979a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	731a      	strb	r2, [r3, #12]
 80097a0:	e093      	b.n	80098ca <VL53LX_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	f893 32f1 	ldrb.w	r3, [r3, #753]	; 0x2f1
			& 0x0F;
 80097a8:	f003 030f 	and.w	r3, r3, #15
 80097ac:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
			& 0x0F;
 80097b8:	f003 030f 	and.w	r3, r3, #15
 80097bc:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
		pdata->bin_seq[3] =
 80097c8:	091b      	lsrs	r3, r3, #4
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	f893 32ef 	ldrb.w	r3, [r3, #751]	; 0x2ef
 80097d6:	f003 030f 	and.w	r3, r3, #15
 80097da:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
		pdata->bin_seq[1] =
 80097e6:	091b      	lsrs	r3, r3, #4
 80097e8:	b2da      	uxtb	r2, r3
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
			& 0x0F;
 80097f4:	f003 030f 	and.w	r3, r3, #15
 80097f8:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	429a      	cmp	r2, r3
 8009808:	da2c      	bge.n	8009864 <VL53LX_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			pdata->bin_seq[5] =
 8009810:	091b      	lsrs	r3, r3, #4
 8009812:	b2da      	uxtb	r2, r3
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			& 0x0F;
 800981e:	f003 030f 	and.w	r3, r3, #15
 8009822:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			pdata->bin_seq[3] =
 800982e:	091b      	lsrs	r3, r3, #4
 8009830:	b2da      	uxtb	r2, r3
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			& 0x0F;
 800983c:	f003 030f 	and.w	r3, r3, #15
 8009840:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			pdata->bin_seq[1] =
 800984c:	091b      	lsrs	r3, r3, #4
 800984e:	b2da      	uxtb	r2, r3
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			& 0x0F;
 800985a:	f003 030f 	and.w	r3, r3, #15
 800985e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	429a      	cmp	r2, r3
 800986e:	dd2c      	ble.n	80098ca <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			pdata->bin_seq[5] =
 8009876:	091b      	lsrs	r3, r3, #4
 8009878:	b2da      	uxtb	r2, r3
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			& 0x0F;
 8009884:	f003 030f 	and.w	r3, r3, #15
 8009888:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			pdata->bin_seq[3] =
 8009894:	091b      	lsrs	r3, r3, #4
 8009896:	b2da      	uxtb	r2, r3
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			& 0x0F;
 80098a2:	f003 030f 	and.w	r3, r3, #15
 80098a6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			pdata->bin_seq[1] =
 80098b2:	091b      	lsrs	r3, r3, #4
 80098b4:	b2da      	uxtb	r2, r3
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			& 0x0F;
 80098c0:	f003 030f 	and.w	r3, r3, #15
 80098c4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 80098ca:	2300      	movs	r3, #0
 80098cc:	75fb      	strb	r3, [r7, #23]
 80098ce:	e007      	b.n	80098e0 <VL53LX_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 80098d0:	7dfb      	ldrb	r3, [r7, #23]
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	4413      	add	r3, r2
 80098d6:	2201      	movs	r2, #1
 80098d8:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 80098da:	7dfb      	ldrb	r3, [r7, #23]
 80098dc:	3301      	adds	r3, #1
 80098de:	75fb      	strb	r3, [r7, #23]
 80098e0:	7dfb      	ldrb	r3, [r7, #23]
 80098e2:	2b05      	cmp	r3, #5
 80098e4:	d9f4      	bls.n	80098d0 <VL53LX_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 80098e6:	bf00      	nop
 80098e8:	bf00      	nop
 80098ea:	371c      	adds	r7, #28
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 80098f4:	b590      	push	{r4, r7, lr}
 80098f6:	b093      	sub	sp, #76	; 0x4c
 80098f8:	af04      	add	r7, sp, #16
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
 8009900:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009902:	2300      	movs	r3, #0
 8009904:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_LLDriverData_t *pdev =
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	3318      	adds	r3, #24
 800990c:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800990e:	2300      	movs	r3, #0
 8009910:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 8009914:	2300      	movs	r3, #0
 8009916:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800991a:	2300      	movs	r3, #0
 800991c:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 8009926:	2300      	movs	r3, #0
 8009928:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 800992a:	2300      	movs	r3, #0
 800992c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800992e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009930:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8009934:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 8009938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993a:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 800993e:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 8009940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009942:	f8b3 323a 	ldrh.w	r3, [r3, #570]	; 0x23a
 8009946:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 8009948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994a:	f893 3236 	ldrb.w	r3, [r3, #566]	; 0x236
 800994e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 8009952:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009956:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 8009958:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800995a:	021b      	lsls	r3, r3, #8
 800995c:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	785b      	ldrb	r3, [r3, #1]
 8009962:	2b07      	cmp	r3, #7
 8009964:	d006      	beq.n	8009974 <VL53LX_hist_phase_consistency_check+0x80>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 800996a:	2b08      	cmp	r3, #8
 800996c:	d002      	beq.n	8009974 <VL53LX_hist_phase_consistency_check+0x80>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800996e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009972:	e0ec      	b.n	8009b4e <VL53LX_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 8009974:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009976:	2b00      	cmp	r3, #0
 8009978:	d102      	bne.n	8009980 <VL53LX_hist_phase_consistency_check+0x8c>
		return status;
 800997a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800997e:	e0e6      	b.n	8009b4e <VL53LX_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8009980:	2300      	movs	r3, #0
 8009982:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8009986:	e0d9      	b.n	8009b3c <VL53LX_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8009988:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	214c      	movs	r1, #76	; 0x4c
 8009990:	fb01 f303 	mul.w	r3, r1, r3
 8009994:	4413      	add	r3, r2
 8009996:	335e      	adds	r3, #94	; 0x5e
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	2b09      	cmp	r3, #9
 800999c:	d00b      	beq.n	80099b6 <VL53LX_hist_phase_consistency_check+0xc2>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 800999e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80099a2:	683a      	ldr	r2, [r7, #0]
 80099a4:	214c      	movs	r1, #76	; 0x4c
 80099a6:	fb01 f303 	mul.w	r3, r1, r3
 80099aa:	4413      	add	r3, r2
 80099ac:	335e      	adds	r3, #94	; 0x5e
 80099ae:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 80099b0:	2b13      	cmp	r3, #19
 80099b2:	f040 80bd 	bne.w	8009b30 <VL53LX_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	795b      	ldrb	r3, [r3, #5]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10a      	bne.n	80099d4 <VL53LX_hist_phase_consistency_check+0xe0>
			prange_curr->VL53LX_p_003[lc].range_status =
 80099be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	214c      	movs	r1, #76	; 0x4c
 80099c6:	fb01 f303 	mul.w	r3, r1, r3
 80099ca:	4413      	add	r3, r2
 80099cc:	335e      	adds	r3, #94	; 0x5e
 80099ce:	2217      	movs	r2, #23
 80099d0:	701a      	strb	r2, [r3, #0]
 80099d2:	e009      	b.n	80099e8 <VL53LX_hist_phase_consistency_check+0xf4>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 80099d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	214c      	movs	r1, #76	; 0x4c
 80099dc:	fb01 f303 	mul.w	r3, r1, r3
 80099e0:	4413      	add	r3, r2
 80099e2:	335e      	adds	r3, #94	; 0x5e
 80099e4:	2207      	movs	r2, #7
 80099e6:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 80099e8:	2300      	movs	r3, #0
 80099ea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80099ee:	e097      	b.n	8009b20 <VL53LX_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 80099f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80099f4:	683a      	ldr	r2, [r7, #0]
 80099f6:	214c      	movs	r1, #76	; 0x4c
 80099f8:	fb01 f303 	mul.w	r3, r1, r3
 80099fc:	4413      	add	r3, r2
 80099fe:	3354      	adds	r3, #84	; 0x54
 8009a00:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 8009a02:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	005b      	lsls	r3, r3, #1
 8009a0c:	4413      	add	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4403      	add	r3, r0
 8009a12:	3310      	adds	r3, #16
 8009a14:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8009a16:	4299      	cmp	r1, r3
 8009a18:	d915      	bls.n	8009a46 <VL53LX_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 8009a1a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	214c      	movs	r1, #76	; 0x4c
 8009a22:	fb01 f303 	mul.w	r3, r1, r3
 8009a26:	4413      	add	r3, r2
 8009a28:	3354      	adds	r3, #84	; 0x54
 8009a2a:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 8009a2c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	4613      	mov	r3, r2
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	4413      	add	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4403      	add	r3, r0
 8009a3c:	3310      	adds	r3, #16
 8009a3e:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8009a40:	1acb      	subs	r3, r1, r3
 8009a42:	867b      	strh	r3, [r7, #50]	; 0x32
 8009a44:	e014      	b.n	8009a70 <VL53LX_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 8009a46:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009a4a:	6879      	ldr	r1, [r7, #4]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	005b      	lsls	r3, r3, #1
 8009a50:	4413      	add	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	440b      	add	r3, r1
 8009a56:	3310      	adds	r3, #16
 8009a58:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 8009a5a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	204c      	movs	r0, #76	; 0x4c
 8009a62:	fb00 f303 	mul.w	r3, r0, r3
 8009a66:	440b      	add	r3, r1
 8009a68:	3354      	adds	r3, #84	; 0x54
 8009a6a:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 8009a70:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009a72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d24e      	bcs.n	8009b16 <VL53LX_hist_phase_consistency_check+0x222>





				if (status == VL53LX_ERROR_NONE)
 8009a78:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d125      	bne.n	8009acc <VL53LX_hist_phase_consistency_check+0x1d8>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 8009a80:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53LX_hist_events_consistency_check(
 8009a84:	4613      	mov	r3, r2
 8009a86:	005b      	lsls	r3, r3, #1
 8009a88:	4413      	add	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	3308      	adds	r3, #8
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 8009a92:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_events_consistency_check(
 8009a96:	224c      	movs	r2, #76	; 0x4c
 8009a98:	fb02 f303 	mul.w	r3, r2, r3
 8009a9c:	3310      	adds	r3, #16
 8009a9e:	683a      	ldr	r2, [r7, #0]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	3304      	adds	r3, #4
 8009aa4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8009aa6:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 8009aaa:	f107 0217 	add.w	r2, r7, #23
 8009aae:	9203      	str	r2, [sp, #12]
 8009ab0:	f107 021c 	add.w	r2, r7, #28
 8009ab4:	9202      	str	r2, [sp, #8]
 8009ab6:	f107 0218 	add.w	r2, r7, #24
 8009aba:	9201      	str	r2, [sp, #4]
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	4623      	mov	r3, r4
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	f000 f848 	bl	8009b56 <VL53LX_hist_events_consistency_check>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 8009acc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d115      	bne.n	8009b00 <VL53LX_hist_phase_consistency_check+0x20c>
					range_status ==
 8009ad4:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 8009ad6:	2b09      	cmp	r3, #9
 8009ad8:	d112      	bne.n	8009b00 <VL53LX_hist_phase_consistency_check+0x20c>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 8009ada:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 8009ade:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_merged_pulse_check(
 8009ae2:	224c      	movs	r2, #76	; 0x4c
 8009ae4:	fb02 f303 	mul.w	r3, r2, r3
 8009ae8:	3310      	adds	r3, #16
 8009aea:	683a      	ldr	r2, [r7, #0]
 8009aec:	4413      	add	r3, r2
 8009aee:	3304      	adds	r3, #4
 8009af0:	f107 0217 	add.w	r2, r7, #23
 8009af4:	4619      	mov	r1, r3
 8009af6:	f000 faaf 	bl	800a058 <VL53LX_hist_merged_pulse_check>
 8009afa:	4603      	mov	r3, r0
 8009afc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 8009b00:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009b04:	7df8      	ldrb	r0, [r7, #23]
 8009b06:	683a      	ldr	r2, [r7, #0]
 8009b08:	214c      	movs	r1, #76	; 0x4c
 8009b0a:	fb01 f303 	mul.w	r3, r1, r3
 8009b0e:	4413      	add	r3, r2
 8009b10:	335e      	adds	r3, #94	; 0x5e
 8009b12:	4602      	mov	r2, r0
 8009b14:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 8009b16:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	795b      	ldrb	r3, [r3, #5]
 8009b24:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	f4ff af61 	bcc.w	80099f0 <VL53LX_hist_phase_consistency_check+0xfc>
 8009b2e:	e000      	b.n	8009b32 <VL53LX_hist_phase_consistency_check+0x23e>
			continue;
 8009b30:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8009b32:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009b36:	3301      	adds	r3, #1
 8009b38:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	7c9b      	ldrb	r3, [r3, #18]
 8009b40:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8009b44:	429a      	cmp	r2, r3
 8009b46:	f4ff af1f 	bcc.w	8009988 <VL53LX_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 8009b4a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	373c      	adds	r7, #60	; 0x3c
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd90      	pop	{r4, r7, pc}

08009b56 <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 8009b56:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b5a:	b0a8      	sub	sp, #160	; 0xa0
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009b60:	647b      	str	r3, [r7, #68]	; 0x44
 8009b62:	4603      	mov	r3, r0
 8009b64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009b68:	460b      	mov	r3, r1
 8009b6a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	int64_t   tmpp                   = 0;
 8009b74:	f04f 0200 	mov.w	r2, #0
 8009b78:	f04f 0300 	mov.w	r3, #0
 8009b7c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	int64_t   tmpc                   = 0;
 8009b80:	f04f 0200 	mov.w	r2, #0
 8009b84:	f04f 0300 	mov.w	r3, #0
 8009b88:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	int64_t   events_scaler          = 0;
 8009b8c:	f04f 0200 	mov.w	r2, #0
 8009b90:	f04f 0300 	mov.w	r3, #0
 8009b94:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	int64_t   events_scaler_sq       = 0;
 8009b98:	f04f 0200 	mov.w	r2, #0
 8009b9c:	f04f 0300 	mov.w	r3, #0
 8009ba0:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t   c_signal_events        = 0;
 8009ba4:	f04f 0200 	mov.w	r2, #0
 8009ba8:	f04f 0300 	mov.w	r3, #0
 8009bac:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	int64_t   c_sig_noise_sq         = 0;
 8009bb0:	f04f 0200 	mov.w	r2, #0
 8009bb4:	f04f 0300 	mov.w	r3, #0
 8009bb8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t   c_amb_noise_sq         = 0;
 8009bbc:	f04f 0200 	mov.w	r2, #0
 8009bc0:	f04f 0300 	mov.w	r3, #0
 8009bc4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t   p_amb_noise_sq         = 0;
 8009bc8:	f04f 0200 	mov.w	r2, #0
 8009bcc:	f04f 0300 	mov.w	r3, #0
 8009bd0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	int32_t   p_signal_events        = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t  noise_sq_sum           = 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	653b      	str	r3, [r7, #80]	; 0x50



	if (event_sigma == 0) {
 8009bdc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d106      	bne.n	8009bf2 <VL53LX_hist_events_consistency_check+0x9c>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8009be4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009be8:	2209      	movs	r2, #9
 8009bea:	701a      	strb	r2, [r3, #0]
		return status;
 8009bec:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8009bf0:	e22d      	b.n	800a04e <VL53LX_hist_events_consistency_check+0x4f8>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 8009bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	f04f 0300 	mov.w	r3, #0
 8009bfc:	f112 0801 	adds.w	r8, r2, #1
 8009c00:	f143 0900 	adc.w	r9, r3, #0
 8009c04:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 8009c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c0a:	885b      	ldrh	r3, [r3, #2]
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	f04f 0300 	mov.w	r3, #0
 8009c12:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8009c16:	fb02 f001 	mul.w	r0, r2, r1
 8009c1a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8009c1e:	fb03 f101 	mul.w	r1, r3, r1
 8009c22:	4408      	add	r0, r1
 8009c24:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8009c28:	fba1 2302 	umull	r2, r3, r1, r2
 8009c2c:	18c1      	adds	r1, r0, r3
 8009c2e:	460b      	mov	r3, r1
 8009c30:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8009c34:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 8009c38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	f04f 0300 	mov.w	r3, #0
 8009c44:	f112 0a01 	adds.w	sl, r2, #1
 8009c48:	f143 0b00 	adc.w	fp, r3, #0
 8009c4c:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 8009c50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009c54:	8adb      	ldrh	r3, [r3, #22]
 8009c56:	b29a      	uxth	r2, r3
 8009c58:	f04f 0300 	mov.w	r3, #0
 8009c5c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009c60:	fb02 f001 	mul.w	r0, r2, r1
 8009c64:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009c68:	fb03 f101 	mul.w	r1, r3, r1
 8009c6c:	4408      	add	r0, r1
 8009c6e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009c72:	fba1 2302 	umull	r2, r3, r1, r2
 8009c76:	18c1      	adds	r1, r0, r3
 8009c78:	460b      	mov	r3, r1
 8009c7a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8009c7e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80



	events_scaler  = tmpp * 4096;
 8009c82:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009c86:	f04f 0000 	mov.w	r0, #0
 8009c8a:	f04f 0100 	mov.w	r1, #0
 8009c8e:	0319      	lsls	r1, r3, #12
 8009c90:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8009c94:	0310      	lsls	r0, r2, #12
 8009c96:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
	if (tmpc != 0) {
 8009c9a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	d026      	beq.n	8009cf0 <VL53LX_hist_events_consistency_check+0x19a>
		events_scaler += (tmpc/2);
 8009ca2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009ca6:	0fcb      	lsrs	r3, r1, #31
 8009ca8:	461a      	mov	r2, r3
 8009caa:	f04f 0300 	mov.w	r3, #0
 8009cae:	1814      	adds	r4, r2, r0
 8009cb0:	eb43 0501 	adc.w	r5, r3, r1
 8009cb4:	f04f 0200 	mov.w	r2, #0
 8009cb8:	f04f 0300 	mov.w	r3, #0
 8009cbc:	0862      	lsrs	r2, r4, #1
 8009cbe:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8009cc2:	106b      	asrs	r3, r5, #1
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009ccc:	1814      	adds	r4, r2, r0
 8009cce:	63bc      	str	r4, [r7, #56]	; 0x38
 8009cd0:	414b      	adcs	r3, r1
 8009cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cd4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8009cd8:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		events_scaler  = do_division_s(events_scaler, tmpc);
 8009cdc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009ce0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009ce4:	f7f6 fec2 	bl	8000a6c <__aeabi_ldivmod>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	}

	events_scaler_sq  = events_scaler * events_scaler;
 8009cf0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cf8:	fb03 f102 	mul.w	r1, r3, r2
 8009cfc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d04:	fb03 f302 	mul.w	r3, r3, r2
 8009d08:	4419      	add	r1, r3
 8009d0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d0e:	fba3 2303 	umull	r2, r3, r3, r3
 8009d12:	4419      	add	r1, r3
 8009d14:	460b      	mov	r3, r1
 8009d16:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8009d1a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	events_scaler_sq += 2048;
 8009d1e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009d22:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009d26:	6339      	str	r1, [r7, #48]	; 0x30
 8009d28:	f143 0300 	adc.w	r3, r3, #0
 8009d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d2e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8009d32:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	events_scaler_sq /= 4096;
 8009d36:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009d3a:	4610      	mov	r0, r2
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	f171 0300 	sbcs.w	r3, r1, #0
 8009d44:	da06      	bge.n	8009d54 <VL53LX_hist_events_consistency_check+0x1fe>
 8009d46:	f640 72ff 	movw	r2, #4095	; 0xfff
 8009d4a:	f04f 0300 	mov.w	r3, #0
 8009d4e:	1880      	adds	r0, r0, r2
 8009d50:	eb43 0101 	adc.w	r1, r3, r1
 8009d54:	f04f 0200 	mov.w	r2, #0
 8009d58:	f04f 0300 	mov.w	r3, #0
 8009d5c:	0b02      	lsrs	r2, r0, #12
 8009d5e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8009d62:	130b      	asrs	r3, r1, #12
 8009d64:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 8009d68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d6e:	461a      	mov	r2, r3
 8009d70:	f04f 0300 	mov.w	r3, #0
 8009d74:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 8009d78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f04f 0100 	mov.w	r1, #0
 8009d84:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009d88:	1a14      	subs	r4, r2, r0
 8009d8a:	62bc      	str	r4, [r7, #40]	; 0x28
 8009d8c:	eb63 0301 	sbc.w	r3, r3, r1
 8009d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d92:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8009d96:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events *= (int64_t)events_scaler;
 8009d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d9c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009da0:	fb02 f203 	mul.w	r2, r2, r3
 8009da4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009da8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009daa:	fb01 f303 	mul.w	r3, r1, r3
 8009dae:	18d1      	adds	r1, r2, r3
 8009db0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009db2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009db6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dba:	4419      	add	r1, r3
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8009dc2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events += 2048;
 8009dc6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009dca:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009dce:	6239      	str	r1, [r7, #32]
 8009dd0:	f143 0300 	adc.w	r3, r3, #0
 8009dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8009dd6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8009dda:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events /= 4096;
 8009dde:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009de2:	2a00      	cmp	r2, #0
 8009de4:	f173 0100 	sbcs.w	r1, r3, #0
 8009de8:	da06      	bge.n	8009df8 <VL53LX_hist_events_consistency_check+0x2a2>
 8009dea:	f640 70ff 	movw	r0, #4095	; 0xfff
 8009dee:	f04f 0100 	mov.w	r1, #0
 8009df2:	1812      	adds	r2, r2, r0
 8009df4:	eb41 0303 	adc.w	r3, r1, r3
 8009df8:	f04f 0000 	mov.w	r0, #0
 8009dfc:	f04f 0100 	mov.w	r1, #0
 8009e00:	0b10      	lsrs	r0, r2, #12
 8009e02:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009e06:	1319      	asrs	r1, r3, #12
 8009e08:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 8009e0c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009e10:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 8009e14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	f04f 0300 	mov.w	r3, #0
 8009e20:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009e22:	fb02 f001 	mul.w	r0, r2, r1
 8009e26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e28:	fb03 f101 	mul.w	r1, r3, r1
 8009e2c:	4401      	add	r1, r0
 8009e2e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8009e30:	fba0 2302 	umull	r2, r3, r0, r2
 8009e34:	4419      	add	r1, r3
 8009e36:	460b      	mov	r3, r1
 8009e38:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8009e3c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq += 2048;
 8009e40:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009e44:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009e48:	61b9      	str	r1, [r7, #24]
 8009e4a:	f143 0300 	adc.w	r3, r3, #0
 8009e4e:	61fb      	str	r3, [r7, #28]
 8009e50:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009e54:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	c_sig_noise_sq /= 4096;
 8009e58:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009e5c:	2a00      	cmp	r2, #0
 8009e5e:	f173 0100 	sbcs.w	r1, r3, #0
 8009e62:	da06      	bge.n	8009e72 <VL53LX_hist_events_consistency_check+0x31c>
 8009e64:	f640 70ff 	movw	r0, #4095	; 0xfff
 8009e68:	f04f 0100 	mov.w	r1, #0
 8009e6c:	1812      	adds	r2, r2, r0
 8009e6e:	eb41 0303 	adc.w	r3, r1, r3
 8009e72:	f04f 0000 	mov.w	r0, #0
 8009e76:	f04f 0100 	mov.w	r1, #0
 8009e7a:	0b10      	lsrs	r0, r2, #12
 8009e7c:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009e80:	1319      	asrs	r1, r3, #12
 8009e82:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 8009e86:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009e8a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 8009e8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e94:	461a      	mov	r2, r3
 8009e96:	f04f 0300 	mov.w	r3, #0
 8009e9a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009e9c:	fb02 f001 	mul.w	r0, r2, r1
 8009ea0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009ea2:	fb03 f101 	mul.w	r1, r3, r1
 8009ea6:	4401      	add	r1, r0
 8009ea8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009eaa:	fba0 2302 	umull	r2, r3, r0, r2
 8009eae:	4419      	add	r1, r3
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8009eb6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq += 2048;
 8009eba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009ebe:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009ec2:	6139      	str	r1, [r7, #16]
 8009ec4:	f143 0300 	adc.w	r3, r3, #0
 8009ec8:	617b      	str	r3, [r7, #20]
 8009eca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009ece:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4096;
 8009ed2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009ed6:	2a00      	cmp	r2, #0
 8009ed8:	f173 0100 	sbcs.w	r1, r3, #0
 8009edc:	da06      	bge.n	8009eec <VL53LX_hist_events_consistency_check+0x396>
 8009ede:	f640 70ff 	movw	r0, #4095	; 0xfff
 8009ee2:	f04f 0100 	mov.w	r1, #0
 8009ee6:	1812      	adds	r2, r2, r0
 8009ee8:	eb41 0303 	adc.w	r3, r1, r3
 8009eec:	f04f 0000 	mov.w	r0, #0
 8009ef0:	f04f 0100 	mov.w	r1, #0
 8009ef4:	0b10      	lsrs	r0, r2, #12
 8009ef6:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009efa:	1319      	asrs	r1, r3, #12
 8009efc:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60


	c_amb_noise_sq += 2;
 8009f00:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009f04:	1c91      	adds	r1, r2, #2
 8009f06:	60b9      	str	r1, [r7, #8]
 8009f08:	f143 0300 	adc.w	r3, r3, #0
 8009f0c:	60fb      	str	r3, [r7, #12]
 8009f0e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009f12:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4;
 8009f16:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009f1a:	2a00      	cmp	r2, #0
 8009f1c:	f173 0100 	sbcs.w	r1, r3, #0
 8009f20:	da02      	bge.n	8009f28 <VL53LX_hist_events_consistency_check+0x3d2>
 8009f22:	3203      	adds	r2, #3
 8009f24:	f143 0300 	adc.w	r3, r3, #0
 8009f28:	f04f 0000 	mov.w	r0, #0
 8009f2c:	f04f 0100 	mov.w	r1, #0
 8009f30:	0890      	lsrs	r0, r2, #2
 8009f32:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8009f36:	1099      	asrs	r1, r3, #2
 8009f38:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 8009f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f3e:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 8009f40:	461a      	mov	r2, r3
 8009f42:	f04f 0300 	mov.w	r3, #0
 8009f46:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	p_amb_noise_sq += 2;
 8009f4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009f4e:	1c91      	adds	r1, r2, #2
 8009f50:	6039      	str	r1, [r7, #0]
 8009f52:	f143 0300 	adc.w	r3, r3, #0
 8009f56:	607b      	str	r3, [r7, #4]
 8009f58:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009f5c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	p_amb_noise_sq /= 4;
 8009f60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009f64:	2a00      	cmp	r2, #0
 8009f66:	f173 0100 	sbcs.w	r1, r3, #0
 8009f6a:	da02      	bge.n	8009f72 <VL53LX_hist_events_consistency_check+0x41c>
 8009f6c:	3203      	adds	r2, #3
 8009f6e:	f143 0300 	adc.w	r3, r3, #0
 8009f72:	f04f 0000 	mov.w	r0, #0
 8009f76:	f04f 0100 	mov.w	r1, #0
 8009f7a:	0890      	lsrs	r0, r2, #2
 8009f7c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8009f80:	1099      	asrs	r1, r3, #2
 8009f82:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 8009f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f88:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 8009f8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
		(uint32_t)prange_prev->VL53LX_p_017 +
 8009f8c:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 8009f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		(uint32_t)c_sig_noise_sq +
 8009f90:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 8009f92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	noise_sq_sum =
 8009f94:	4413      	add	r3, r2
 8009f96:	653b      	str	r3, [r7, #80]	; 0x50

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 8009f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f9a:	011b      	lsls	r3, r3, #4
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f002 f822 	bl	800bfe6 <VL53LX_isqrt>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	461a      	mov	r2, r3
	*pevents_tolerance =
 8009fa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009faa:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 8009fac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8009fb6:	fb02 f203 	mul.w	r2, r2, r3
 8009fba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fbe:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 8009fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f103 0220 	add.w	r2, r3, #32
 8009fca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fce:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 8009fd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	da00      	bge.n	8009fdc <VL53LX_hist_events_consistency_check+0x486>
 8009fda:	333f      	adds	r3, #63	; 0x3f
 8009fdc:	119b      	asrs	r3, r3, #6
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fe4:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 8009fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	657b      	str	r3, [r7, #84]	; 0x54
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 8009fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ff4:	1a9b      	subs	r3, r3, r2
 8009ff6:	657b      	str	r3, [r7, #84]	; 0x54

	if ((int32_t)c_signal_events > p_signal_events)
 8009ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ffa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	da06      	bge.n	800a00e <VL53LX_hist_events_consistency_check+0x4b8>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800a000:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a004:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800a006:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a00a:	601a      	str	r2, [r3, #0]
 800a00c:	e005      	b.n	800a01a <VL53LX_hist_events_consistency_check+0x4c4>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800a00e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a010:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a012:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800a014:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a018:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800a01a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	429a      	cmp	r2, r3
 800a028:	dd0b      	ble.n	800a042 <VL53LX_hist_events_consistency_check+0x4ec>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 800a02a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a02e:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800a030:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a034:	429a      	cmp	r2, r3
 800a036:	d204      	bcs.n	800a042 <VL53LX_hist_events_consistency_check+0x4ec>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 800a038:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a03c:	2214      	movs	r2, #20
 800a03e:	701a      	strb	r2, [r3, #0]
 800a040:	e003      	b.n	800a04a <VL53LX_hist_events_consistency_check+0x4f4>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800a042:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a046:	2209      	movs	r2, #9
 800a048:	701a      	strb	r2, [r3, #0]





	return status;
 800a04a:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800a04e:	4618      	mov	r0, r3
 800a050:	37a0      	adds	r7, #160	; 0xa0
 800a052:	46bd      	mov	sp, r7
 800a054:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a058 <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 800a058:	b480      	push	{r7}
 800a05a:	b087      	sub	sp, #28
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	4603      	mov	r3, r0
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 800a066:	2300      	movs	r3, #0
 800a068:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800a07a:	429a      	cmp	r2, r3
 800a07c:	dd0b      	ble.n	800a096 <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800a084:	b29a      	uxth	r2, r3
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	1ad3      	subs	r3, r2, r3
 800a090:	b29b      	uxth	r3, r3
		delta_mm =
 800a092:	82fb      	strh	r3, [r7, #22]
 800a094:	e00a      	b.n	800a0ac <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800a09c:	b29a      	uxth	r2, r3
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	b29b      	uxth	r3, r3
		delta_mm =
 800a0aa:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800a0ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	dd09      	ble.n	800a0c8 <VL53LX_hist_merged_pulse_check+0x70>
 800a0b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a0b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	dd03      	ble.n	800a0c8 <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2216      	movs	r2, #22
 800a0c4:	701a      	strb	r2, [r3, #0]
 800a0c6:	e002      	b.n	800a0ce <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2209      	movs	r2, #9
 800a0cc:	701a      	strb	r2, [r3, #0]

	return status;
 800a0ce:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	371c      	adds	r7, #28
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b08e      	sub	sp, #56	; 0x38
 800a0e2:	af04      	add	r7, sp, #16
 800a0e4:	60f8      	str	r0, [r7, #12]
 800a0e6:	60b9      	str	r1, [r7, #8]
 800a0e8:	607a      	str	r2, [r7, #4]
 800a0ea:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev =
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3318      	adds	r3, #24
 800a0f6:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800a100:	6a3b      	ldr	r3, [r7, #32]
 800a102:	f893 3250 	ldrb.w	r3, [r3, #592]	; 0x250
 800a106:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800a108:	6a3b      	ldr	r3, [r7, #32]
 800a10a:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 800a10e:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800a116:	2b09      	cmp	r3, #9
 800a118:	d009      	beq.n	800a12e <VL53LX_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800a120:	2b13      	cmp	r3, #19
 800a122:	d004      	beq.n	800a12e <VL53LX_hist_xmonitor_consistency_check+0x50>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800a12a:	2b14      	cmp	r3, #20
 800a12c:	d129      	bne.n	800a182 <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a134:	2b09      	cmp	r3, #9
 800a136:	d009      	beq.n	800a14c <VL53LX_hist_xmonitor_consistency_check+0x6e>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 800a13e:	2b13      	cmp	r3, #19
 800a140:	d004      	beq.n	800a14c <VL53LX_hist_xmonitor_consistency_check+0x6e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800a148:	2b14      	cmp	r3, #20
 800a14a:	d11a      	bne.n	800a182 <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	2209      	movs	r2, #9
 800a150:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	334a      	adds	r3, #74	; 0x4a
				VL53LX_hist_events_consistency_check(
 800a15e:	8bb9      	ldrh	r1, [r7, #28]
 800a160:	7ff8      	ldrb	r0, [r7, #31]
 800a162:	9303      	str	r3, [sp, #12]
 800a164:	f107 0318 	add.w	r3, r7, #24
 800a168:	9302      	str	r3, [sp, #8]
 800a16a:	f107 0314 	add.w	r3, r7, #20
 800a16e:	9301      	str	r3, [sp, #4]
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	9300      	str	r3, [sp, #0]
 800a174:	4613      	mov	r3, r2
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	f7ff fced 	bl	8009b56 <VL53LX_hist_events_consistency_check>
 800a17c:	4603      	mov	r3, r0
 800a17e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800a182:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a186:	4618      	mov	r0, r3
 800a188:	3728      	adds	r7, #40	; 0x28
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b088      	sub	sp, #32
 800a192:	af00      	add	r7, sp, #0
 800a194:	60f8      	str	r0, [r7, #12]
 800a196:	60b9      	str	r1, [r7, #8]
 800a198:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a19a:	2300      	movs	r3, #0
 800a19c:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d019      	beq.n	800a1ee <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f002 f877 	bl	800c2b4 <VL53LX_calc_pll_period_mm>
 800a1c6:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800a1ce:	021b      	lsls	r3, r3, #8
 800a1d0:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	69ba      	ldr	r2, [r7, #24]
 800a1d6:	fb02 f303 	mul.w	r3, r2, r3
 800a1da:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a1e2:	0bdb      	lsrs	r3, r3, #15
 800a1e4:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	b21a      	sxth	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800a1ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3720      	adds	r7, #32
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800a1fa:	b590      	push	{r4, r7, lr}
 800a1fc:	b08d      	sub	sp, #52	; 0x34
 800a1fe:	af04      	add	r7, sp, #16
 800a200:	4604      	mov	r4, r0
 800a202:	4608      	mov	r0, r1
 800a204:	4611      	mov	r1, r2
 800a206:	461a      	mov	r2, r3
 800a208:	4623      	mov	r3, r4
 800a20a:	80fb      	strh	r3, [r7, #6]
 800a20c:	4603      	mov	r3, r0
 800a20e:	80bb      	strh	r3, [r7, #4]
 800a210:	460b      	mov	r3, r1
 800a212:	70fb      	strb	r3, [r7, #3]
 800a214:	4613      	mov	r3, r2
 800a216:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800a218:	2300      	movs	r3, #0
 800a21a:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800a21c:	2300      	movs	r3, #0
 800a21e:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800a220:	2300      	movs	r3, #0
 800a222:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800a224:	2300      	movs	r3, #0
 800a226:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800a22c:	2300      	movs	r3, #0
 800a22e:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800a230:	2300      	movs	r3, #0
 800a232:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800a234:	2300      	movs	r3, #0
 800a236:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 800a238:	78b9      	ldrb	r1, [r7, #2]
 800a23a:	78f8      	ldrb	r0, [r7, #3]
 800a23c:	f107 030c 	add.w	r3, r7, #12
 800a240:	9303      	str	r3, [sp, #12]
 800a242:	f107 030e 	add.w	r3, r7, #14
 800a246:	9302      	str	r3, [sp, #8]
 800a248:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a24c:	9301      	str	r3, [sp, #4]
 800a24e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	23ff      	movs	r3, #255	; 0xff
 800a254:	22c7      	movs	r2, #199	; 0xc7
 800a256:	f000 fa03 	bl	800a660 <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800a25a:	89fb      	ldrh	r3, [r7, #14]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d050      	beq.n	800a302 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800a260:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800a262:	2b00      	cmp	r3, #0
 800a264:	d04d      	beq.n	800a302 <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 800a266:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800a26a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800a26e:	78b9      	ldrb	r1, [r7, #2]
 800a270:	78f8      	ldrb	r0, [r7, #3]
 800a272:	f107 0308 	add.w	r3, r7, #8
 800a276:	9303      	str	r3, [sp, #12]
 800a278:	f107 030a 	add.w	r3, r7, #10
 800a27c:	9302      	str	r3, [sp, #8]
 800a27e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a282:	9301      	str	r3, [sp, #4]
 800a284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	4623      	mov	r3, r4
 800a28a:	f000 f9e9 	bl	800a660 <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800a28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a290:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800a292:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800a294:	897b      	ldrh	r3, [r7, #10]
 800a296:	461a      	mov	r2, r3
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	fb02 f303 	mul.w	r3, r2, r3
 800a29e:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800a2a0:	89fb      	ldrh	r3, [r7, #14]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2aa:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ae:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800a2b0:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800a2b2:	893b      	ldrh	r3, [r7, #8]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	fb02 f303 	mul.w	r3, r2, r3
 800a2bc:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800a2be:	89bb      	ldrh	r3, [r7, #12]
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2c8:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800a2ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a2ce:	69ba      	ldr	r2, [r7, #24]
 800a2d0:	fb02 f303 	mul.w	r3, r2, r3
 800a2d4:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800a2d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	fb02 f303 	mul.w	r3, r2, r3
 800a2e0:	69fa      	ldr	r2, [r7, #28]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800a2e6:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800a2e8:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800a2ea:	4413      	add	r3, r2
 800a2ec:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d008      	beq.n	800a306 <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	009a      	lsls	r2, r3, #2
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	fb92 f3f3 	sdiv	r3, r2, r3
 800a2fe:	61fb      	str	r3, [r7, #28]
 800a300:	e002      	b.n	800a308 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800a302:	bf00      	nop
 800a304:	e000      	b.n	800a308 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800a306:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	b21a      	sxth	r2, r3
 800a30c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a30e:	801a      	strh	r2, [r3, #0]

}
 800a310:	bf00      	nop
 800a312:	3724      	adds	r7, #36	; 0x24
 800a314:	46bd      	mov	sp, r7
 800a316:	bd90      	pop	{r4, r7, pc}

0800a318 <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60b9      	str	r1, [r7, #8]
 800a320:	607a      	str	r2, [r7, #4]
 800a322:	603b      	str	r3, [r7, #0]
 800a324:	4603      	mov	r3, r0
 800a326:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800a328:	7bfb      	ldrb	r3, [r7, #15]
 800a32a:	08db      	lsrs	r3, r3, #3
 800a32c:	b2da      	uxtb	r2, r3
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800a332:	7bfb      	ldrb	r3, [r7, #15]
 800a334:	f003 0307 	and.w	r3, r3, #7
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	461a      	mov	r2, r3
 800a344:	2301      	movs	r3, #1
 800a346:	4093      	lsls	r3, r2
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	701a      	strb	r2, [r3, #0]

}
 800a34e:	bf00      	nop
 800a350:	3714      	adds	r7, #20
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800a35a:	b480      	push	{r7}
 800a35c:	b083      	sub	sp, #12
 800a35e:	af00      	add	r7, sp, #0
 800a360:	4603      	mov	r3, r0
 800a362:	603a      	str	r2, [r7, #0]
 800a364:	71fb      	strb	r3, [r7, #7]
 800a366:	460b      	mov	r3, r1
 800a368:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800a36a:	79fb      	ldrb	r3, [r7, #7]
 800a36c:	2b07      	cmp	r3, #7
 800a36e:	d90a      	bls.n	800a386 <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800a370:	79bb      	ldrb	r3, [r7, #6]
 800a372:	00db      	lsls	r3, r3, #3
 800a374:	b2da      	uxtb	r2, r3
 800a376:	79fb      	ldrb	r3, [r7, #7]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	3b71      	subs	r3, #113	; 0x71
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800a384:	e00a      	b.n	800a39c <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800a386:	79bb      	ldrb	r3, [r7, #6]
 800a388:	f1c3 030f 	rsb	r3, r3, #15
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	00db      	lsls	r3, r3, #3
 800a390:	b2da      	uxtb	r2, r3
 800a392:	79fb      	ldrb	r3, [r7, #7]
 800a394:	4413      	add	r3, r2
 800a396:	b2da      	uxtb	r2, r3
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	701a      	strb	r2, [r3, #0]
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	607a      	str	r2, [r7, #4]
 800a3b4:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800a3b6:	7bfb      	ldrb	r3, [r7, #15]
 800a3b8:	091b      	lsrs	r3, r3, #4
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
 800a3c2:	f003 030f 	and.w	r3, r3, #15
 800a3c6:	b2da      	uxtb	r2, r3
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	701a      	strb	r2, [r3, #0]

}
 800a3cc:	bf00      	nop
 800a3ce:	3714      	adds	r7, #20
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	4603      	mov	r3, r0
 800a3e0:	603a      	str	r2, [r7, #0]
 800a3e2:	71fb      	strb	r3, [r7, #7]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800a3e8:	79bb      	ldrb	r3, [r7, #6]
 800a3ea:	011b      	lsls	r3, r3, #4
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	79fb      	ldrb	r3, [r7, #7]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	701a      	strb	r2, [r3, #0]

}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b086      	sub	sp, #24
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60ba      	str	r2, [r7, #8]
 800a40c:	607b      	str	r3, [r7, #4]
 800a40e:	4603      	mov	r3, r0
 800a410:	73fb      	strb	r3, [r7, #15]
 800a412:	460b      	mov	r3, r1
 800a414:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800a416:	2300      	movs	r3, #0
 800a418:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800a41a:	2300      	movs	r3, #0
 800a41c:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800a41e:	2300      	movs	r3, #0
 800a420:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800a422:	2300      	movs	r3, #0
 800a424:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 800a426:	f107 0217 	add.w	r2, r7, #23
 800a42a:	f107 0116 	add.w	r1, r7, #22
 800a42e:	7bfb      	ldrb	r3, [r7, #15]
 800a430:	4618      	mov	r0, r3
 800a432:	f002 f9ab 	bl	800c78c <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 800a436:	f107 0214 	add.w	r2, r7, #20
 800a43a:	f107 0115 	add.w	r1, r7, #21
 800a43e:	7bbb      	ldrb	r3, [r7, #14]
 800a440:	4618      	mov	r0, r3
 800a442:	f7ff ffb1 	bl	800a3a8 <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800a446:	7dfb      	ldrb	r3, [r7, #23]
 800a448:	b29a      	uxth	r2, r3
 800a44a:	7d7b      	ldrb	r3, [r7, #21]
 800a44c:	3301      	adds	r3, #1
 800a44e:	0fd9      	lsrs	r1, r3, #31
 800a450:	440b      	add	r3, r1
 800a452:	105b      	asrs	r3, r3, #1
 800a454:	425b      	negs	r3, r3
 800a456:	b29b      	uxth	r3, r3
 800a458:	4413      	add	r3, r2
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	b21a      	sxth	r2, r3
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	da02      	bge.n	800a472 <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	2200      	movs	r2, #0
 800a470:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a478:	b29a      	uxth	r2, r3
 800a47a:	7d7b      	ldrb	r3, [r7, #21]
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	4413      	add	r3, r2
 800a480:	b29b      	uxth	r3, r3
 800a482:	b21a      	sxth	r2, r3
 800a484:	6a3b      	ldr	r3, [r7, #32]
 800a486:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 800a488:	6a3b      	ldr	r3, [r7, #32]
 800a48a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a48e:	2b0f      	cmp	r3, #15
 800a490:	dd02      	ble.n	800a498 <VL53LX_decode_zone_limits+0x94>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 800a492:	6a3b      	ldr	r3, [r7, #32]
 800a494:	220f      	movs	r2, #15
 800a496:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800a498:	7dbb      	ldrb	r3, [r7, #22]
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	7d3b      	ldrb	r3, [r7, #20]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	0fd9      	lsrs	r1, r3, #31
 800a4a2:	440b      	add	r3, r1
 800a4a4:	105b      	asrs	r3, r3, #1
 800a4a6:	425b      	negs	r3, r3
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	4413      	add	r3, r2
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	b21a      	sxth	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	da02      	bge.n	800a4c4 <VL53LX_decode_zone_limits+0xc0>
		*py_ll = 0;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	7d3b      	ldrb	r3, [r7, #20]
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	4413      	add	r3, r2
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	b21a      	sxth	r2, r3
 800a4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d8:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 800a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4e0:	2b0f      	cmp	r3, #15
 800a4e2:	dd02      	ble.n	800a4ea <VL53LX_decode_zone_limits+0xe6>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e6:	220f      	movs	r2, #15
 800a4e8:	801a      	strh	r2, [r3, #0]
}
 800a4ea:	bf00      	nop
 800a4ec:	3718      	adds	r7, #24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	b085      	sub	sp, #20
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	460a      	mov	r2, r1
 800a4fc:	71fb      	strb	r3, [r7, #7]
 800a4fe:	4613      	mov	r3, r2
 800a500:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800a502:	2300      	movs	r3, #0
 800a504:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800a506:	79fb      	ldrb	r3, [r7, #7]
 800a508:	f003 0303 	and.w	r3, r3, #3
 800a50c:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800a50e:	79bb      	ldrb	r3, [r7, #6]
 800a510:	f003 0303 	and.w	r3, r3, #3
 800a514:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800a516:	7bbb      	ldrb	r3, [r7, #14]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d104      	bne.n	800a526 <VL53LX_is_aperture_location+0x34>
 800a51c:	7b7b      	ldrb	r3, [r7, #13]
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d101      	bne.n	800a526 <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 800a522:	2301      	movs	r3, #1
 800a524:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800a526:	7bbb      	ldrb	r3, [r7, #14]
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d104      	bne.n	800a536 <VL53LX_is_aperture_location+0x44>
 800a52c:	7b7b      	ldrb	r3, [r7, #13]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d101      	bne.n	800a536 <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 800a532:	2301      	movs	r3, #1
 800a534:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800a536:	7bfb      	ldrb	r3, [r7, #15]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3714      	adds	r7, #20
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800a544:	b590      	push	{r4, r7, lr}
 800a546:	b08b      	sub	sp, #44	; 0x2c
 800a548:	af02      	add	r7, sp, #8
 800a54a:	603a      	str	r2, [r7, #0]
 800a54c:	461a      	mov	r2, r3
 800a54e:	4603      	mov	r3, r0
 800a550:	71fb      	strb	r3, [r7, #7]
 800a552:	460b      	mov	r3, r1
 800a554:	71bb      	strb	r3, [r7, #6]
 800a556:	4613      	mov	r3, r2
 800a558:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800a55a:	2300      	movs	r3, #0
 800a55c:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800a55e:	2300      	movs	r3, #0
 800a560:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800a566:	2300      	movs	r3, #0
 800a568:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800a56a:	2300      	movs	r3, #0
 800a56c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800a576:	2300      	movs	r3, #0
 800a578:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800a57a:	2300      	movs	r3, #0
 800a57c:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800a57e:	2300      	movs	r3, #0
 800a580:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800a582:	2300      	movs	r3, #0
 800a584:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 800a586:	f107 0416 	add.w	r4, r7, #22
 800a58a:	f107 0218 	add.w	r2, r7, #24
 800a58e:	79b9      	ldrb	r1, [r7, #6]
 800a590:	79f8      	ldrb	r0, [r7, #7]
 800a592:	f107 0312 	add.w	r3, r7, #18
 800a596:	9301      	str	r3, [sp, #4]
 800a598:	f107 0314 	add.w	r3, r7, #20
 800a59c:	9300      	str	r3, [sp, #0]
 800a59e:	4623      	mov	r3, r4
 800a5a0:	f7ff ff30 	bl	800a404 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800a5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a5aa:	8afb      	ldrh	r3, [r7, #22]
 800a5ac:	83bb      	strh	r3, [r7, #28]
 800a5ae:	e04c      	b.n	800a64a <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a5b0:	8b3b      	ldrh	r3, [r7, #24]
 800a5b2:	83fb      	strh	r3, [r7, #30]
 800a5b4:	e03d      	b.n	800a632 <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 800a5b6:	8bbb      	ldrh	r3, [r7, #28]
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	8bfa      	ldrh	r2, [r7, #30]
 800a5bc:	b2d1      	uxtb	r1, r2
 800a5be:	f107 0211 	add.w	r2, r7, #17
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7ff fec9 	bl	800a35a <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 800a5c8:	7c78      	ldrb	r0, [r7, #17]
 800a5ca:	f107 030e 	add.w	r3, r7, #14
 800a5ce:	f107 020f 	add.w	r2, r7, #15
 800a5d2:	f107 0110 	add.w	r1, r7, #16
 800a5d6:	f7ff fe9f 	bl	800a318 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800a5da:	7c3b      	ldrb	r3, [r7, #16]
 800a5dc:	461a      	mov	r2, r3
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	781a      	ldrb	r2, [r3, #0]
 800a5e4:	7bbb      	ldrb	r3, [r7, #14]
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d01b      	beq.n	800a626 <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 800a5ee:	8bbb      	ldrh	r3, [r7, #28]
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	8bfa      	ldrh	r2, [r7, #30]
 800a5f4:	b2d2      	uxtb	r2, r2
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7ff ff7a 	bl	800a4f2 <VL53LX_is_aperture_location>
 800a5fe:	4603      	mov	r3, r0
 800a600:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800a602:	7efb      	ldrb	r3, [r7, #27]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d007      	beq.n	800a618 <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800a608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60a:	881a      	ldrh	r2, [r3, #0]
 800a60c:	88bb      	ldrh	r3, [r7, #4]
 800a60e:	4413      	add	r3, r2
 800a610:	b29a      	uxth	r2, r3
 800a612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a614:	801a      	strh	r2, [r3, #0]
 800a616:	e006      	b.n	800a626 <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800a618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61a:	881b      	ldrh	r3, [r3, #0]
 800a61c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a620:	b29a      	uxth	r2, r3
 800a622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a624:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a626:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	3301      	adds	r3, #1
 800a62e:	b29b      	uxth	r3, r3
 800a630:	83fb      	strh	r3, [r7, #30]
 800a632:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a636:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	ddbb      	ble.n	800a5b6 <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a63e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a642:	b29b      	uxth	r3, r3
 800a644:	3301      	adds	r3, #1
 800a646:	b29b      	uxth	r3, r3
 800a648:	83bb      	strh	r3, [r7, #28]
 800a64a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a64e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800a652:	429a      	cmp	r2, r3
 800a654:	ddac      	ble.n	800a5b0 <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800a656:	bf00      	nop
 800a658:	bf00      	nop
 800a65a:	3724      	adds	r7, #36	; 0x24
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd90      	pop	{r4, r7, pc}

0800a660 <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800a660:	b590      	push	{r4, r7, lr}
 800a662:	b08d      	sub	sp, #52	; 0x34
 800a664:	af02      	add	r7, sp, #8
 800a666:	4604      	mov	r4, r0
 800a668:	4608      	mov	r0, r1
 800a66a:	4611      	mov	r1, r2
 800a66c:	461a      	mov	r2, r3
 800a66e:	4623      	mov	r3, r4
 800a670:	71fb      	strb	r3, [r7, #7]
 800a672:	4603      	mov	r3, r0
 800a674:	71bb      	strb	r3, [r7, #6]
 800a676:	460b      	mov	r3, r1
 800a678:	717b      	strb	r3, [r7, #5]
 800a67a:	4613      	mov	r3, r2
 800a67c:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800a67e:	2300      	movs	r3, #0
 800a680:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800a686:	2300      	movs	r3, #0
 800a688:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800a68e:	2300      	movs	r3, #0
 800a690:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800a692:	2300      	movs	r3, #0
 800a694:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800a69a:	2300      	movs	r3, #0
 800a69c:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53LX_decode_zone_limits(
 800a6c0:	f107 041c 	add.w	r4, r7, #28
 800a6c4:	f107 021e 	add.w	r2, r7, #30
 800a6c8:	79b9      	ldrb	r1, [r7, #6]
 800a6ca:	79f8      	ldrb	r0, [r7, #7]
 800a6cc:	f107 0318 	add.w	r3, r7, #24
 800a6d0:	9301      	str	r3, [sp, #4]
 800a6d2:	f107 031a 	add.w	r3, r7, #26
 800a6d6:	9300      	str	r3, [sp, #0]
 800a6d8:	4623      	mov	r3, r4
 800a6da:	f7ff fe93 	bl	800a404 <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 800a6de:	f107 0414 	add.w	r4, r7, #20
 800a6e2:	f107 0216 	add.w	r2, r7, #22
 800a6e6:	7939      	ldrb	r1, [r7, #4]
 800a6e8:	7978      	ldrb	r0, [r7, #5]
 800a6ea:	f107 0310 	add.w	r3, r7, #16
 800a6ee:	9301      	str	r3, [sp, #4]
 800a6f0:	f107 0312 	add.w	r3, r7, #18
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	4623      	mov	r3, r4
 800a6f8:	f7ff fe84 	bl	800a404 <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800a6fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6fe:	2200      	movs	r2, #0
 800a700:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800a702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a704:	2200      	movs	r2, #0
 800a706:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a708:	8abb      	ldrh	r3, [r7, #20]
 800a70a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a70c:	e06c      	b.n	800a7e8 <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a70e:	8afb      	ldrh	r3, [r7, #22]
 800a710:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a712:	e05d      	b.n	800a7d0 <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 800a714:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a716:	b2db      	uxtb	r3, r3
 800a718:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a71a:	b2d1      	uxtb	r1, r2
 800a71c:	f107 020f 	add.w	r2, r7, #15
 800a720:	4618      	mov	r0, r3
 800a722:	f7ff fe1a 	bl	800a35a <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 800a726:	7bf8      	ldrb	r0, [r7, #15]
 800a728:	f107 030c 	add.w	r3, r7, #12
 800a72c:	f107 020d 	add.w	r2, r7, #13
 800a730:	f107 010e 	add.w	r1, r7, #14
 800a734:	f7ff fdf0 	bl	800a318 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800a738:	7bbb      	ldrb	r3, [r7, #14]
 800a73a:	461a      	mov	r2, r3
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	4413      	add	r3, r2
 800a740:	781a      	ldrb	r2, [r3, #0]
 800a742:	7b3b      	ldrb	r3, [r7, #12]
 800a744:	4013      	ands	r3, r2
 800a746:	b2db      	uxtb	r3, r3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d03b      	beq.n	800a7c4 <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 800a74c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a752:	b2d2      	uxtb	r2, r2
 800a754:	4611      	mov	r1, r2
 800a756:	4618      	mov	r0, r3
 800a758:	f7ff fecb 	bl	800a4f2 <VL53LX_is_aperture_location>
 800a75c:	4603      	mov	r3, r0
 800a75e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800a762:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a766:	2b00      	cmp	r3, #0
 800a768:	d002      	beq.n	800a770 <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800a76a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a76c:	847b      	strh	r3, [r7, #34]	; 0x22
 800a76e:	e002      	b.n	800a776 <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800a770:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a774:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800a776:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a77a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a77e:	429a      	cmp	r2, r3
 800a780:	db19      	blt.n	800a7b6 <VL53LX_calc_mm_effective_spads+0x156>
 800a782:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a786:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a78a:	429a      	cmp	r2, r3
 800a78c:	dc13      	bgt.n	800a7b6 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800a78e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800a792:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a796:	429a      	cmp	r2, r3
 800a798:	db0d      	blt.n	800a7b6 <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800a79a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a79e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	dc07      	bgt.n	800a7b6 <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800a7a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7a8:	881a      	ldrh	r2, [r3, #0]
 800a7aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7ac:	4413      	add	r3, r2
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7b2:	801a      	strh	r2, [r3, #0]
 800a7b4:	e006      	b.n	800a7c4 <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800a7b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7b8:	881a      	ldrh	r2, [r3, #0]
 800a7ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7bc:	4413      	add	r3, r2
 800a7be:	b29a      	uxth	r2, r3
 800a7c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7c2:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800a7c4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a7d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a7d4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	dd9b      	ble.n	800a714 <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800a7dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a7e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a7ec:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	dd8c      	ble.n	800a70e <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800a7f4:	bf00      	nop
 800a7f6:	bf00      	nop
 800a7f8:	372c      	adds	r7, #44	; 0x2c
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd90      	pop	{r4, r7, pc}

0800a7fe <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b086      	sub	sp, #24
 800a802:	af00      	add	r7, sp, #0
 800a804:	60f8      	str	r0, [r7, #12]
 800a806:	60b9      	str	r1, [r7, #8]
 800a808:	607a      	str	r2, [r7, #4]
 800a80a:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800a80c:	2300      	movs	r3, #0
 800a80e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7fe f835 	bl	8008880 <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	7c9a      	ldrb	r2, [r3, #18]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	3314      	adds	r3, #20
 800a840:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800a842:	2300      	movs	r3, #0
 800a844:	75fb      	strb	r3, [r7, #23]
 800a846:	e06b      	b.n	800a920 <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800a848:	7dfb      	ldrb	r3, [r7, #23]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d002      	beq.n	800a854 <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d034      	beq.n	800a8bc <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 800a852:	e05f      	b.n	800a914 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800a88c:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	8a9a      	ldrh	r2, [r3, #20]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	601a      	str	r2, [r3, #0]

			break;
 800a8ba:	e02b      	b.n	800a914 <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800a8ec:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	611a      	str	r2, [r3, #16]
			break;
 800a912:	bf00      	nop
		}

		pdata++;
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	334c      	adds	r3, #76	; 0x4c
 800a918:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800a91a:	7dfb      	ldrb	r3, [r7, #23]
 800a91c:	3301      	adds	r3, #1
 800a91e:	75fb      	strb	r3, [r7, #23]
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	7c9b      	ldrb	r3, [r3, #18]
 800a924:	7dfa      	ldrb	r2, [r7, #23]
 800a926:	429a      	cmp	r2, r3
 800a928:	d38e      	bcc.n	800a848 <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800a92a:	bf00      	nop
 800a92c:	bf00      	nop
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 800a934:	b480      	push	{r7}
 800a936:	b089      	sub	sp, #36	; 0x24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a93c:	2300      	movs	r3, #0
 800a93e:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	3318      	adds	r3, #24
 800a944:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a94c:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800a954:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a95c:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800a95e:	4613      	mov	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4413      	add	r3, r2
 800a964:	005b      	lsls	r3, r3, #1
 800a966:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	4413      	add	r3, r2
 800a96e:	3302      	adds	r3, #2
 800a970:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800a996:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3724      	adds	r7, #36	; 0x24
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b08b      	sub	sp, #44	; 0x2c
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	3318      	adds	r3, #24
 800a9b8:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a9c0:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a9c8:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a9d0:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800a9d8:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800a9da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a9de:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 800a9e0:	7bfa      	ldrb	r2, [r7, #15]
 800a9e2:	6939      	ldr	r1, [r7, #16]
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	4413      	add	r3, r2
 800a9ea:	005b      	lsls	r3, r3, #1
 800a9ec:	440b      	add	r3, r1
 800a9ee:	3306      	adds	r3, #6
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a9fa:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa02:	e01a      	b.n	800aa3a <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 800aa04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa08:	683a      	ldr	r2, [r7, #0]
 800aa0a:	214c      	movs	r1, #76	; 0x4c
 800aa0c:	fb01 f303 	mul.w	r3, r1, r3
 800aa10:	4413      	add	r3, r2
 800aa12:	334a      	adds	r3, #74	; 0x4a
 800aa14:	881b      	ldrh	r3, [r3, #0]
 800aa16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d209      	bcs.n	800aa30 <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 800aa1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	214c      	movs	r1, #76	; 0x4c
 800aa24:	fb01 f303 	mul.w	r3, r1, r3
 800aa28:	4413      	add	r3, r2
 800aa2a:	334a      	adds	r3, #74	; 0x4a
 800aa2c:	881b      	ldrh	r3, [r3, #0]
 800aa2e:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800aa30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa34:	3301      	adds	r3, #1
 800aa36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	7c9b      	ldrb	r3, [r3, #18]
 800aa3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d3de      	bcc.n	800aa04 <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 800aa46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d103      	bne.n	800aa54 <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 800aa4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa50:	623b      	str	r3, [r7, #32]
 800aa52:	e00e      	b.n	800aa72 <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 800aa54:	89bb      	ldrh	r3, [r7, #12]
 800aa56:	039b      	lsls	r3, r3, #14
 800aa58:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800aa5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa5c:	6a3a      	ldr	r2, [r7, #32]
 800aa5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa62:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800aa64:	6a3b      	ldr	r3, [r7, #32]
 800aa66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa6a:	d302      	bcc.n	800aa72 <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 800aa6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa70:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800aa72:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800aa74:	6a3b      	ldr	r3, [r7, #32]
 800aa76:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800aa78:	6939      	ldr	r1, [r7, #16]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4413      	add	r3, r2
 800aa80:	005b      	lsls	r3, r3, #1
 800aa82:	440b      	add	r3, r1
 800aa84:	3306      	adds	r3, #6
 800aa86:	4602      	mov	r2, r0
 800aa88:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800aa8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	372c      	adds	r7, #44	; 0x2c
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr

0800aa9a <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b08a      	sub	sp, #40	; 0x28
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	3318      	adds	r3, #24
 800aaac:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800aaae:	6a3b      	ldr	r3, [r7, #32]
 800aab0:	332c      	adds	r3, #44	; 0x2c
 800aab2:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800aab4:	6a3b      	ldr	r3, [r7, #32]
 800aab6:	33c2      	adds	r3, #194	; 0xc2
 800aab8:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800aac0:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	3302      	adds	r3, #2
 800aac6:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	785b      	ldrb	r3, [r3, #1]
 800aacc:	f003 0301 	and.w	r3, r3, #1
 800aad0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800aad2:	6a3b      	ldr	r3, [r7, #32]
 800aad4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800aad8:	461a      	mov	r2, r3
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	4413      	add	r3, r2
 800aade:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d11e      	bne.n	800ab24 <VL53LX_multizone_hist_bins_update+0x8a>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800aae6:	7bfb      	ldrb	r3, [r7, #15]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10b      	bne.n	800ab04 <VL53LX_multizone_hist_bins_update+0x6a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800ab04:	7bfb      	ldrb	r3, [r7, #15]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d05d      	beq.n	800abc6 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	719a      	strb	r2, [r3, #6]
 800ab22:	e050      	b.n	800abc6 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800ab24:	6a3b      	ldr	r3, [r7, #32]
 800ab26:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	4413      	add	r3, r2
 800ab30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ab34:	2b02      	cmp	r3, #2
 800ab36:	d11e      	bne.n	800ab76 <VL53LX_multizone_hist_bins_update+0xdc>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d10b      	bne.n	800ab56 <VL53LX_multizone_hist_bins_update+0xbc>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800ab56:	7bfb      	ldrb	r3, [r7, #15]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d034      	beq.n	800abc6 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	719a      	strb	r2, [r3, #6]
 800ab74:	e027      	b.n	800abc6 <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800ab76:	6a3b      	ldr	r3, [r7, #32]
 800ab78:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	4413      	add	r3, r2
 800ab82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ab86:	2b03      	cmp	r3, #3
 800ab88:	d11d      	bne.n	800abc6 <VL53LX_multizone_hist_bins_update+0x12c>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800ab8a:	7bfb      	ldrb	r3, [r7, #15]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d10b      	bne.n	800aba8 <VL53LX_multizone_hist_bins_update+0x10e>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00b      	beq.n	800abc6 <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800abc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d109      	bne.n	800abe2 <VL53LX_multizone_hist_bins_update+0x148>
		VL53LX_copy_hist_bins_to_static_cfg(
 800abce:	6a3b      	ldr	r3, [r7, #32]
 800abd0:	f203 21fe 	addw	r1, r3, #766	; 0x2fe
 800abd4:	6a3b      	ldr	r3, [r7, #32]
 800abd6:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800abda:	461a      	mov	r2, r3
 800abdc:	6978      	ldr	r0, [r7, #20]
 800abde:	f7fd fa1f 	bl	8008020 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800abe2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3728      	adds	r7, #40	; 0x28
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800abee:	b480      	push	{r7}
 800abf0:	b089      	sub	sp, #36	; 0x24
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	60f8      	str	r0, [r7, #12]
 800abf6:	607a      	str	r2, [r7, #4]
 800abf8:	603b      	str	r3, [r7, #0]
 800abfa:	460b      	mov	r3, r1
 800abfc:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800abfe:	2300      	movs	r3, #0
 800ac00:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	3318      	adds	r3, #24
 800ac06:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ac0e:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800ac10:	7dfb      	ldrb	r3, [r7, #23]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d103      	bne.n	800ac1e <VL53LX_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	7afa      	ldrb	r2, [r7, #11]
 800ac1a:	701a      	strb	r2, [r3, #0]
 800ac1c:	e01e      	b.n	800ac5c <VL53LX_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	461a      	mov	r2, r3
 800ac24:	7dfb      	ldrb	r3, [r7, #23]
 800ac26:	3b01      	subs	r3, #1
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d111      	bne.n	800ac50 <VL53LX_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	2bff      	cmp	r3, #255	; 0xff
 800ac32:	d103      	bne.n	800ac3c <VL53LX_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2280      	movs	r2, #128	; 0x80
 800ac38:	701a      	strb	r2, [r3, #0]
 800ac3a:	e005      	b.n	800ac48 <VL53LX_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	3301      	adds	r3, #1
 800ac42:	b2da      	uxtb	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	701a      	strb	r2, [r3, #0]
 800ac4e:	e005      	b.n	800ac5c <VL53LX_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	3301      	adds	r3, #1
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800ac5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3724      	adds	r7, #36	; 0x24
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <VL53LX_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b08a      	sub	sp, #40	; 0x28
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	607a      	str	r2, [r7, #4]
 800ac76:	461a      	mov	r2, r3
 800ac78:	460b      	mov	r3, r1
 800ac7a:	72fb      	strb	r3, [r7, #11]
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	813b      	strh	r3, [r7, #8]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ac80:	2300      	movs	r3, #0
 800ac82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	3318      	adds	r3, #24
 800ac8a:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800ac90:	2300      	movs	r3, #0
 800ac92:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53LX_calc_macro_period_us(
 800ac94:	7afa      	ldrb	r2, [r7, #11]
 800ac96:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ac98:	4611      	mov	r1, r2
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fe f9fc 	bl	8009098 <VL53LX_calc_macro_period_us>
 800aca0:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800aca2:	6a3b      	ldr	r3, [r7, #32]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d101      	bne.n	800acac <VL53LX_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800aca8:	2301      	movs	r3, #1
 800acaa:	623b      	str	r3, [r7, #32]


	timeout_mclks = phasecal_timeout_us << 12;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	031b      	lsls	r3, r3, #12
 800acb0:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800acb2:	6a3b      	ldr	r3, [r7, #32]
 800acb4:	085b      	lsrs	r3, r3, #1
 800acb6:	69ba      	ldr	r2, [r7, #24]
 800acb8:	4413      	add	r3, r2
 800acba:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800acbc:	69ba      	ldr	r2, [r7, #24]
 800acbe:	6a3b      	ldr	r3, [r7, #32]
 800acc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800acc4:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	2bff      	cmp	r3, #255	; 0xff
 800acca:	d904      	bls.n	800acd6 <VL53LX_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	22ff      	movs	r2, #255	; 0xff
 800acd0:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
 800acd4:	e004      	b.n	800ace0 <VL53LX_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	7afa      	ldrb	r2, [r7, #11]
 800ace4:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a



	if (status == VL53LX_ERROR_NONE)
 800ace8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800acec:	2b00      	cmp	r3, #0
 800acee:	d10a      	bne.n	800ad06 <VL53LX_set_ref_spad_char_config+0x9a>
		status =
			VL53LX_WrByte(
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
 800acf6:	461a      	mov	r2, r3
 800acf8:	214b      	movs	r1, #75	; 0x4b
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f006 fd8e 	bl	801181c <VL53LX_WrByte>
 800ad00:	4603      	mov	r3, r0
 800ad02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53LX_ERROR_NONE)
 800ad06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10a      	bne.n	800ad24 <VL53LX_set_ref_spad_char_config+0xb8>
		status =
			VL53LX_WrByte(
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800ad14:	461a      	mov	r2, r3
 800ad16:	2160      	movs	r1, #96	; 0x60
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f006 fd7f 	bl	801181c <VL53LX_WrByte>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53LX_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800ad2a:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800ad32:	757b      	strb	r3, [r7, #21]

	if (status == VL53LX_ERROR_NONE)
 800ad34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d109      	bne.n	800ad50 <VL53LX_set_ref_spad_char_config+0xe4>
		status =
			VL53LX_WriteMulti(
 800ad3c:	f107 0214 	add.w	r2, r7, #20
 800ad40:	2302      	movs	r3, #2
 800ad42:	2178      	movs	r1, #120	; 0x78
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f006 fcfd 	bl	8011744 <VL53LX_WriteMulti>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	893a      	ldrh	r2, [r7, #8]
 800ad54:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53LX_ERROR_NONE)
 800ad58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d108      	bne.n	800ad72 <VL53LX_set_ref_spad_char_config+0x106>
		status =
			VL53LX_WrWord(
 800ad60:	893b      	ldrh	r3, [r7, #8]
 800ad62:	461a      	mov	r2, r3
 800ad64:	211c      	movs	r1, #28
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f006 fd82 	bl	8011870 <VL53LX_WrWord>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53LX_ERROR_NONE)
 800ad72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d108      	bne.n	800ad8c <VL53LX_set_ref_spad_char_config+0x120>
		status =
			VL53LX_WrWord(
 800ad7a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	2164      	movs	r1, #100	; 0x64
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f006 fd75 	bl	8011870 <VL53LX_WrWord>
 800ad86:	4603      	mov	r3, r0
 800ad88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53LX_ERROR_NONE)
 800ad8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d108      	bne.n	800ada6 <VL53LX_set_ref_spad_char_config+0x13a>
		status =
			VL53LX_WrWord(
 800ad94:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ad96:	461a      	mov	r2, r3
 800ad98:	2166      	movs	r1, #102	; 0x66
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f006 fd68 	bl	8011870 <VL53LX_WrWord>
 800ada0:	4603      	mov	r3, r0
 800ada2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800ada6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3728      	adds	r7, #40	; 0x28
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800adb2:	b5b0      	push	{r4, r5, r7, lr}
 800adb4:	b090      	sub	sp, #64	; 0x40
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800adba:	2300      	movs	r3, #0
 800adbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	3318      	adds	r3, #24
 800adc4:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800adcc:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_smudge_corrector_config_t *pconfig =
 800adce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800add4:	3314      	adds	r3, #20
 800add6:	623b      	str	r3, [r7, #32]
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800add8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adda:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800adde:	3318      	adds	r3, #24
 800ade0:	61fb      	str	r3, [r7, #28]
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800ade2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade4:	61bb      	str	r3, [r7, #24]
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800adec:	617b      	str	r3, [r7, #20]

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	69db      	ldr	r3, [r3, #28]
 800adf2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53LX_p_016;
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800adfc:	4413      	add	r3, r2
 800adfe:	461a      	mov	r2, r3
 800ae00:	f04f 0300 	mov.w	r3, #0
 800ae04:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (peak_duration_us == 0)
 800ae08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d102      	bne.n	800ae14 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x62>
		peak_duration_us = 1000;
 800ae0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ae12:	63fb      	str	r3, [r7, #60]	; 0x3c
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800ae14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae18:	4602      	mov	r2, r0
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	f04f 0400 	mov.w	r4, #0
 800ae20:	f04f 0500 	mov.w	r5, #0
 800ae24:	015d      	lsls	r5, r3, #5
 800ae26:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800ae2a:	0154      	lsls	r4, r2, #5
 800ae2c:	4622      	mov	r2, r4
 800ae2e:	462b      	mov	r3, r5
 800ae30:	1a12      	subs	r2, r2, r0
 800ae32:	eb63 0301 	sbc.w	r3, r3, r1
 800ae36:	f04f 0400 	mov.w	r4, #0
 800ae3a:	f04f 0500 	mov.w	r5, #0
 800ae3e:	009d      	lsls	r5, r3, #2
 800ae40:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800ae44:	0094      	lsls	r4, r2, #2
 800ae46:	4622      	mov	r2, r4
 800ae48:	462b      	mov	r3, r5
 800ae4a:	1812      	adds	r2, r2, r0
 800ae4c:	eb41 0303 	adc.w	r3, r1, r3
 800ae50:	f04f 0000 	mov.w	r0, #0
 800ae54:	f04f 0100 	mov.w	r1, #0
 800ae58:	00d9      	lsls	r1, r3, #3
 800ae5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ae5e:	00d0      	lsls	r0, r2, #3
 800ae60:	4602      	mov	r2, r0
 800ae62:	460b      	mov	r3, r1
 800ae64:	4610      	mov	r0, r2
 800ae66:	4619      	mov	r1, r3
 800ae68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	f04f 0300 	mov.w	r3, #0
 800ae70:	f7f5 fe4c 	bl	8000b0c <__aeabi_uldivmod>
 800ae74:	4602      	mov	r2, r0
 800ae76:	460b      	mov	r3, r1
 800ae78:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800ae7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	f04f 0400 	mov.w	r4, #0
 800ae88:	f04f 0500 	mov.w	r5, #0
 800ae8c:	015d      	lsls	r5, r3, #5
 800ae8e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800ae92:	0154      	lsls	r4, r2, #5
 800ae94:	4622      	mov	r2, r4
 800ae96:	462b      	mov	r3, r5
 800ae98:	1a12      	subs	r2, r2, r0
 800ae9a:	eb63 0301 	sbc.w	r3, r3, r1
 800ae9e:	f04f 0400 	mov.w	r4, #0
 800aea2:	f04f 0500 	mov.w	r5, #0
 800aea6:	009d      	lsls	r5, r3, #2
 800aea8:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800aeac:	0094      	lsls	r4, r2, #2
 800aeae:	4622      	mov	r2, r4
 800aeb0:	462b      	mov	r3, r5
 800aeb2:	1812      	adds	r2, r2, r0
 800aeb4:	eb41 0303 	adc.w	r3, r1, r3
 800aeb8:	f04f 0000 	mov.w	r0, #0
 800aebc:	f04f 0100 	mov.w	r1, #0
 800aec0:	00d9      	lsls	r1, r3, #3
 800aec2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aec6:	00d0      	lsls	r0, r2, #3
 800aec8:	4602      	mov	r2, r0
 800aeca:	460b      	mov	r3, r1
 800aecc:	4610      	mov	r0, r2
 800aece:	4619      	mov	r1, r3
 800aed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed2:	461a      	mov	r2, r3
 800aed4:	f04f 0300 	mov.w	r3, #0
 800aed8:	f7f5 fe18 	bl	8000b0c <__aeabi_uldivmod>
 800aedc:	4602      	mov	r2, r0
 800aede:	460b      	mov	r3, r1
 800aee0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800aee4:	6a3b      	ldr	r3, [r7, #32]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	697a      	ldr	r2, [r7, #20]
 800aeea:	8ad2      	ldrh	r2, [r2, #22]
 800aeec:	fb02 f303 	mul.w	r3, r2, r3
 800aef0:	461a      	mov	r2, r3
 800aef2:	f04f 0300 	mov.w	r3, #0
 800aef6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (temp64z == 0)
 800aefa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800aefe:	4313      	orrs	r3, r2
 800af00:	d105      	bne.n	800af0e <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x15c>
		temp64z = 1;
 800af02:	f04f 0201 	mov.w	r2, #1
 800af06:	f04f 0300 	mov.w	r3, #0
 800af0a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	temp64a = temp64a * 1000 * 256;
 800af0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af12:	4602      	mov	r2, r0
 800af14:	460b      	mov	r3, r1
 800af16:	f04f 0400 	mov.w	r4, #0
 800af1a:	f04f 0500 	mov.w	r5, #0
 800af1e:	015d      	lsls	r5, r3, #5
 800af20:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800af24:	0154      	lsls	r4, r2, #5
 800af26:	4622      	mov	r2, r4
 800af28:	462b      	mov	r3, r5
 800af2a:	1a12      	subs	r2, r2, r0
 800af2c:	eb63 0301 	sbc.w	r3, r3, r1
 800af30:	f04f 0400 	mov.w	r4, #0
 800af34:	f04f 0500 	mov.w	r5, #0
 800af38:	009d      	lsls	r5, r3, #2
 800af3a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800af3e:	0094      	lsls	r4, r2, #2
 800af40:	4622      	mov	r2, r4
 800af42:	462b      	mov	r3, r5
 800af44:	1812      	adds	r2, r2, r0
 800af46:	eb41 0303 	adc.w	r3, r1, r3
 800af4a:	f04f 0000 	mov.w	r0, #0
 800af4e:	f04f 0100 	mov.w	r1, #0
 800af52:	02d9      	lsls	r1, r3, #11
 800af54:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800af58:	02d0      	lsls	r0, r2, #11
 800af5a:	4602      	mov	r2, r0
 800af5c:	460b      	mov	r3, r1
 800af5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800af62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800af66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af6a:	f7f5 fdcf 	bl	8000b0c <__aeabi_uldivmod>
 800af6e:	4602      	mov	r2, r0
 800af70:	460b      	mov	r3, r1
 800af72:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = temp64a * 1000 * 256;
 800af76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af7a:	4602      	mov	r2, r0
 800af7c:	460b      	mov	r3, r1
 800af7e:	f04f 0400 	mov.w	r4, #0
 800af82:	f04f 0500 	mov.w	r5, #0
 800af86:	015d      	lsls	r5, r3, #5
 800af88:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800af8c:	0154      	lsls	r4, r2, #5
 800af8e:	4622      	mov	r2, r4
 800af90:	462b      	mov	r3, r5
 800af92:	1a12      	subs	r2, r2, r0
 800af94:	eb63 0301 	sbc.w	r3, r3, r1
 800af98:	f04f 0400 	mov.w	r4, #0
 800af9c:	f04f 0500 	mov.w	r5, #0
 800afa0:	009d      	lsls	r5, r3, #2
 800afa2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800afa6:	0094      	lsls	r4, r2, #2
 800afa8:	4622      	mov	r2, r4
 800afaa:	462b      	mov	r3, r5
 800afac:	1812      	adds	r2, r2, r0
 800afae:	eb41 0303 	adc.w	r3, r1, r3
 800afb2:	f04f 0000 	mov.w	r0, #0
 800afb6:	f04f 0100 	mov.w	r1, #0
 800afba:	02d9      	lsls	r1, r3, #11
 800afbc:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800afc0:	02d0      	lsls	r0, r2, #11
 800afc2:	4602      	mov	r2, r0
 800afc4:	460b      	mov	r3, r1
 800afc6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800afca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800afce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800afd2:	f7f5 fd9b 	bl	8000b0c <__aeabi_uldivmod>
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pint->required_samples = (uint32_t)temp64a;
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d802      	bhi.n	800aff2 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x240>
		pint->required_samples = 2;
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	2202      	movs	r2, #2
 800aff0:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800aff2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3740      	adds	r7, #64	; 0x40
 800affa:	46bd      	mov	sp, r7
 800affc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b000 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b096      	sub	sp, #88	; 0x58
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	607a      	str	r2, [r7, #4]
 800b00c:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b00e:	2300      	movs	r3, #0
 800b010:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	3318      	adds	r3, #24
 800b018:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800b01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b01c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b020:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800b022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b024:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800b028:	331c      	adds	r3, #28
 800b02a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800b02c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800b030:	2b01      	cmp	r3, #1
 800b032:	d107      	bne.n	800b044 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x44>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	889b      	ldrh	r3, [r3, #4]
 800b038:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	609a      	str	r2, [r3, #8]
 800b042:	e002      	b.n	800b04a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x4a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	68ba      	ldr	r2, [r7, #8]
 800b048:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800b04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800b050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b052:	899b      	ldrh	r3, [r3, #12]
 800b054:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800b058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05a:	89db      	ldrh	r3, [r3, #14]
 800b05c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b066:	2b00      	cmp	r3, #0
 800b068:	d004      	beq.n	800b074 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x74>
		(pconfig->scaler_calc_method == 1)) &&
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800b070:	2b01      	cmp	r3, #1
 800b072:	d126      	bne.n	800b0c2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800b074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b076:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d022      	beq.n	800b0c2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800b07c:	f107 0317 	add.w	r3, r7, #23
 800b080:	4619      	mov	r1, r3
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f000 fe75 	bl	800bd72 <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800b088:	7dfb      	ldrb	r3, [r7, #23]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x92>
			histo_merge_nb = 1;
 800b08e:	2301      	movs	r3, #1
 800b090:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800b092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b094:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d003      	beq.n	800b0a4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa4>
			orig_xtalk_offset =
 800b09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	653b      	str	r3, [r7, #80]	; 0x50
 800b0a2:	e006      	b.n	800b0b2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800b0a4:	7dfb      	ldrb	r3, [r7, #23]
 800b0a6:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800b0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0aa:	3202      	adds	r2, #2
 800b0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0b0:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800b0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b4:	889b      	ldrh	r3, [r3, #4]
 800b0b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800b0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0bc:	88db      	ldrh	r3, [r3, #6]
 800b0be:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d10a      	bne.n	800b0e2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
 800b0cc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d106      	bne.n	800b0e2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
		pout->gradient_zero_flag |= 0x01;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	795b      	ldrb	r3, [r3, #5]
 800b0d8:	f043 0301 	orr.w	r3, r3, #1
 800b0dc:	b2da      	uxtb	r2, r3
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d10a      	bne.n	800b102 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
 800b0ec:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d106      	bne.n	800b102 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
		pout->gradient_zero_flag |= 0x02;
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	795b      	ldrb	r3, [r3, #5]
 800b0f8:	f043 0302 	orr.w	r3, r3, #2
 800b0fc:	b2da      	uxtb	r2, r3
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800b102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b104:	2b00      	cmp	r3, #0
 800b106:	d101      	bne.n	800b10c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10c>
		orig_xtalk_offset = 1;
 800b108:	2301      	movs	r3, #1
 800b10a:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b112:	2b01      	cmp	r3, #1
 800b114:	d108      	bne.n	800b128 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x128>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b11a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b122:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800b126:	e019      	b.n	800b15c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x15c>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800b128:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b12c:	019b      	lsls	r3, r3, #6
 800b12e:	461a      	mov	r2, r3
 800b130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b132:	fbb2 f3f3 	udiv	r3, r2, r3
 800b136:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800b140:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800b142:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800b146:	019b      	lsls	r3, r3, #6
 800b148:	461a      	mov	r2, r3
 800b14a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b14c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b150:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b15a:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b162:	2b00      	cmp	r3, #0
 800b164:	d12a      	bne.n	800b1bc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1bc>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800b16e:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800b172:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800b174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b176:	119b      	asrs	r3, r3, #6
 800b178:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800b17a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b17c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b180:	db02      	blt.n	800b188 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x188>
			itemp32 = 0xFFFF;
 800b182:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b186:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800b188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b18a:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800b198:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800b19c:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800b19e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1a0:	119b      	asrs	r3, r3, #6
 800b1a2:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800b1a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1aa:	db02      	blt.n	800b1b2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b2>
			itemp32 = 0xFFFF;
 800b1ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1b0:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800b1b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1b4:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	81da      	strh	r2, [r3, #14]
 800b1ba:	e042      	b.n	800b242 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>
	} else if (pconfig->scaler_calc_method == 1) {
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d13d      	bne.n	800b242 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800b1ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1cc:	1ad3      	subs	r3, r2, r3
 800b1ce:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800b1d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	da00      	bge.n	800b1d8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d8>
 800b1d6:	330f      	adds	r3, #15
 800b1d8:	111b      	asrs	r3, r3, #4
 800b1da:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800b1dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800b1e2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b1e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1e8:	4413      	add	r3, r2
 800b1ea:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800b1ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1f2:	db02      	blt.n	800b1fa <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1fa>
			itemp32 = 0xFFFF;
 800b1f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1f8:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800b1fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1fc:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800b206:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800b20c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b20e:	4a52      	ldr	r2, [pc, #328]	; (800b358 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x358>)
 800b210:	fb82 1203 	smull	r1, r2, r2, r3
 800b214:	1152      	asrs	r2, r2, #5
 800b216:	17db      	asrs	r3, r3, #31
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800b21c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800b222:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800b226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b228:	4413      	add	r3, r2
 800b22a:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800b22c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b22e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b232:	db02      	blt.n	800b23a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23a>
			itemp32 = 0xFFFF;
 800b234:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b238:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800b23a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b23c:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	785b      	ldrb	r3, [r3, #1]
 800b246:	2b01      	cmp	r3, #1
 800b248:	d178      	bne.n	800b33c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
 800b24a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d074      	beq.n	800b33c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	2201      	movs	r2, #1
 800b256:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	62bb      	str	r3, [r7, #40]	; 0x28

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800b25e:	f107 0317 	add.w	r3, r7, #23
 800b262:	4619      	mov	r1, r3
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f000 fd84 	bl	800bd72 <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800b26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b26c:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800b270:	627b      	str	r3, [r7, #36]	; 0x24
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800b272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b274:	3308      	adds	r3, #8
 800b276:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) &&
 800b278:	7dfb      	ldrb	r3, [r7, #23]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d042      	beq.n	800b304 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800b27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b280:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		if ((histo_merge_nb > 0) &&
 800b284:	2b01      	cmp	r3, #1
 800b286:	d13d      	bne.n	800b304 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800b288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d03a      	beq.n	800b304 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(nXtalk != 0)) {
			cXtalk =
 800b28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	623b      	str	r3, [r7, #32]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800b294:	6a3b      	ldr	r3, [r7, #32]
 800b296:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b29a:	fb02 f203 	mul.w	r2, r2, r3
 800b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2a4:	61fb      	str	r3, [r7, #28]
			if ((max ==  0)||
 800b2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d004      	beq.n	800b2b6 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2b6>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800b2b0:	69fa      	ldr	r2, [r7, #28]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d303      	bcc.n	800b2be <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2be>
				pout->new_xtalk_applied_flag = 0;
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	719a      	strb	r2, [r3, #6]
 800b2bc:	e022      	b.n	800b304 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			else {
				incXtalk = nXtalk / max;
 800b2be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2c6:	61bb      	str	r3, [r7, #24]
				cval = 0;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800b2d2:	e00e      	b.n	800b2f2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2f2>
					cval += incXtalk;
 800b2d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	4413      	add	r3, r2
 800b2da:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800b2dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b2e0:	601a      	str	r2, [r3, #0]
					pcpo++;
 800b2e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800b2e8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800b2f2:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d3ea      	bcc.n	800b2d4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2d4>
				}
				*pcpo = nXtalk;
 800b2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b302:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	799b      	ldrb	r3, [r3, #6]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d017      	beq.n	800b33c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800b310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b312:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800b31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31c:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800b324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b326:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	789b      	ldrb	r3, [r3, #2]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d105      	bne.n	800b33c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

			pconfig->smudge_corr_apply_enabled = 0;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800b33c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800b340:	2b01      	cmp	r3, #1
 800b342:	d002      	beq.n	800b34a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x34a>
		pout->smudge_corr_valid = 1;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	2201      	movs	r2, #1
 800b348:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800b34a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3758      	adds	r7, #88	; 0x58
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	66666667 	.word	0x66666667

0800b35c <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 800b35c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b360:	b09a      	sub	sp, #104	; 0x68
 800b362:	af02      	add	r7, sp, #8
 800b364:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b366:	2300      	movs	r3, #0
 800b368:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	3318      	adds	r3, #24
 800b370:	64bb      	str	r3, [r7, #72]	; 0x48
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800b378:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_smudge_corrector_config_t *pconfig =
 800b37a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b37c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b380:	3314      	adds	r3, #20
 800b382:	643b      	str	r3, [r7, #64]	; 0x40
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800b384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b386:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b38a:	3318      	adds	r3, #24
 800b38c:	63fb      	str	r3, [r7, #60]	; 0x3c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 800b38e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b390:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b394:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800b396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b398:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800b39a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b39c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b3a0:	633b      	str	r3, [r7, #48]	; 0x30

	uint8_t	run_smudge_detection = 0;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t merging_complete = 0;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t	run_nodetect = 0;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t ambient_check = 0;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	int32_t itemp32 = 0;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	65bb      	str	r3, [r7, #88]	; 0x58
	uint64_t utemp64 = 0;
 800b3be:	f04f 0200 	mov.w	r2, #0
 800b3c2:	f04f 0300 	mov.w	r3, #0
 800b3c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint8_t continue_processing = CONT_CONTINUE;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t xtalk_offset_out = 0;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t xtalk_offset_in = 0;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	61fb      	str	r3, [r7, #28]
	uint32_t current_xtalk = 0;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	61bb      	str	r3, [r7, #24]
	uint32_t smudge_margin_adjusted = 0;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	617b      	str	r3, [r7, #20]
	uint8_t i = 0;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t nodetect_index = 0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800b3ec:	f107 030b 	add.w	r3, r7, #11
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fcbd 	bl	800bd72 <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 800b3f8:	7afb      	ldrb	r3, [r7, #11]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d004      	beq.n	800b408 <VL53LX_dynamic_xtalk_correction_corrector+0xac>
		(pdev->tuning_parms.tp_hist_merge != 1))
 800b3fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b400:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	if ((histo_merge_nb == 0) ||
 800b404:	2b01      	cmp	r3, #1
 800b406:	d001      	beq.n	800b40c <VL53LX_dynamic_xtalk_correction_corrector+0xb0>
		histo_merge_nb = 1;
 800b408:	2301      	movs	r3, #1
 800b40a:	72fb      	strb	r3, [r7, #11]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800b40c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b40e:	f000 faeb 	bl	800b9e8 <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800b412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b416:	2b00      	cmp	r3, #0
 800b418:	d009      	beq.n	800b42e <VL53LX_dynamic_xtalk_correction_corrector+0xd2>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 800b41a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41e:	7afa      	ldrb	r2, [r7, #11]
 800b420:	fb02 f303 	mul.w	r3, r2, r3
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800b424:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b426:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d901      	bls.n	800b432 <VL53LX_dynamic_xtalk_correction_corrector+0xd6>
 800b42e:	2301      	movs	r3, #1
 800b430:	e000      	b.n	800b434 <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
 800b432:	2300      	movs	r3, #0
 800b434:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800b438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b43a:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d105      	bne.n	800b44e <VL53LX_dynamic_xtalk_correction_corrector+0xf2>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800b442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b444:	f893 2184 	ldrb.w	r2, [r3, #388]	; 0x184
 800b448:	7afb      	ldrb	r3, [r7, #11]
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d101      	bne.n	800b452 <VL53LX_dynamic_xtalk_correction_corrector+0xf6>
 800b44e:	2301      	movs	r3, #1
 800b450:	e000      	b.n	800b454 <VL53LX_dynamic_xtalk_correction_corrector+0xf8>
 800b452:	2300      	movs	r3, #0
	merging_complete =
 800b454:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800b458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b45a:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d10e      	bne.n	800b47e <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pconfig->smudge_corr_enabled == 1) &&
 800b460:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00a      	beq.n	800b47e <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pR->xmonitor.range_status
 800b468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b46a:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800b46e:	2b09      	cmp	r3, #9
 800b470:	d105      	bne.n	800b47e <VL53LX_dynamic_xtalk_correction_corrector+0x122>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800b472:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b476:	2b00      	cmp	r3, #0
 800b478:	d001      	beq.n	800b47e <VL53LX_dynamic_xtalk_correction_corrector+0x122>
 800b47a:	2301      	movs	r3, #1
 800b47c:	e000      	b.n	800b480 <VL53LX_dynamic_xtalk_correction_corrector+0x124>
 800b47e:	2300      	movs	r3, #0
	run_smudge_detection =
 800b480:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		merging_complete;


	if ((pR->xmonitor.range_status
 800b484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b486:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800b48a:	2b09      	cmp	r3, #9
 800b48c:	f000 809e 	beq.w	800b5cc <VL53LX_dynamic_xtalk_correction_corrector+0x270>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800b490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b492:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800b494:	2b01      	cmp	r3, #1
 800b496:	f040 8099 	bne.w	800b5cc <VL53LX_dynamic_xtalk_correction_corrector+0x270>

		run_nodetect = 2;
 800b49a:	2302      	movs	r3, #2
 800b49c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		for (i = 0; i < pR->active_results; i++) {
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b4a6:	e02d      	b.n	800b504 <VL53LX_dynamic_xtalk_correction_corrector+0x1a8>
			if (pR->VL53LX_p_003[i].range_status ==
 800b4a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b4ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4ae:	214c      	movs	r1, #76	; 0x4c
 800b4b0:	fb01 f303 	mul.w	r3, r1, r3
 800b4b4:	4413      	add	r3, r2
 800b4b6:	335e      	adds	r3, #94	; 0x5e
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	2b09      	cmp	r3, #9
 800b4bc:	d11d      	bne.n	800b4fa <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 800b4be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b4c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4c4:	214c      	movs	r1, #76	; 0x4c
 800b4c6:	fb01 f303 	mul.w	r3, r1, r3
 800b4ca:	4413      	add	r3, r2
 800b4cc:	335a      	adds	r3, #90	; 0x5a
 800b4ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4d2:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800b4d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4d6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	dc03      	bgt.n	800b4e4 <VL53LX_dynamic_xtalk_correction_corrector+0x188>
					run_nodetect = 0;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b4e2:	e00a      	b.n	800b4fa <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				} else {
					if (run_nodetect == 2) {
 800b4e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d106      	bne.n	800b4fa <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
						run_nodetect = 1;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						nodetect_index = i;
 800b4f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b4f6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		for (i = 0; i < pR->active_results; i++) {
 800b4fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b4fe:	3301      	adds	r3, #1
 800b500:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b506:	7c9b      	ldrb	r3, [r3, #18]
 800b508:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d3cb      	bcc.n	800b4a8 <VL53LX_dynamic_xtalk_correction_corrector+0x14c>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800b510:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b514:	2b02      	cmp	r3, #2
 800b516:	d102      	bne.n	800b51e <VL53LX_dynamic_xtalk_correction_corrector+0x1c2>

			run_nodetect = 0;
 800b518:	2300      	movs	r3, #0
 800b51a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 800b51e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
		amr =
 800b522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b524:	214c      	movs	r1, #76	; 0x4c
 800b526:	fb01 f303 	mul.w	r3, r1, r3
 800b52a:	4413      	add	r3, r2
 800b52c:	3348      	adds	r3, #72	; 0x48
 800b52e:	881b      	ldrh	r3, [r3, #0]
 800b530:	827b      	strh	r3, [r7, #18]

		if (run_nodetect == 1) {
 800b532:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b536:	2b01      	cmp	r3, #1
 800b538:	d148      	bne.n	800b5cc <VL53LX_dynamic_xtalk_correction_corrector+0x270>




			utemp64 = 1000 * ((uint64_t)amr);
 800b53a:	8a78      	ldrh	r0, [r7, #18]
 800b53c:	f04f 0100 	mov.w	r1, #0
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	f04f 0400 	mov.w	r4, #0
 800b548:	f04f 0500 	mov.w	r5, #0
 800b54c:	015d      	lsls	r5, r3, #5
 800b54e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800b552:	0154      	lsls	r4, r2, #5
 800b554:	4622      	mov	r2, r4
 800b556:	462b      	mov	r3, r5
 800b558:	1a12      	subs	r2, r2, r0
 800b55a:	eb63 0301 	sbc.w	r3, r3, r1
 800b55e:	f04f 0400 	mov.w	r4, #0
 800b562:	f04f 0500 	mov.w	r5, #0
 800b566:	009d      	lsls	r5, r3, #2
 800b568:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800b56c:	0094      	lsls	r4, r2, #2
 800b56e:	4622      	mov	r2, r4
 800b570:	462b      	mov	r3, r5
 800b572:	1812      	adds	r2, r2, r0
 800b574:	eb41 0303 	adc.w	r3, r1, r3
 800b578:	f04f 0000 	mov.w	r0, #0
 800b57c:	f04f 0100 	mov.w	r1, #0
 800b580:	00d9      	lsls	r1, r3, #3
 800b582:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b586:	00d0      	lsls	r0, r2, #3
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	e9c7 2308 	strd	r2, r3, [r7, #32]


			utemp64 = utemp64 << 9;
 800b590:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b594:	f04f 0200 	mov.w	r2, #0
 800b598:	f04f 0300 	mov.w	r3, #0
 800b59c:	024b      	lsls	r3, r1, #9
 800b59e:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800b5a2:	0242      	lsls	r2, r0, #9
 800b5a4:	e9c7 2308 	strd	r2, r3, [r7, #32]


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800b5a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	f04f 0300 	mov.w	r3, #0
 800b5b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b5b6:	4299      	cmp	r1, r3
 800b5b8:	bf08      	it	eq
 800b5ba:	4290      	cmpeq	r0, r2
 800b5bc:	d203      	bcs.n	800b5c6 <VL53LX_dynamic_xtalk_correction_corrector+0x26a>
				run_nodetect = 1;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b5c4:	e002      	b.n	800b5cc <VL53LX_dynamic_xtalk_correction_corrector+0x270>
			else
				run_nodetect = 0;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		}
	}


	if (run_smudge_detection) {
 800b5cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f000 8101 	beq.w	800b7d8 <VL53LX_dynamic_xtalk_correction_corrector+0x47c>

		pint->nodetect_counter = 0;
 800b5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5d8:	2200      	movs	r2, #0
 800b5da:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f7ff fbe8 	bl	800adb2 <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800b5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5e4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800b5e8:	61fb      	str	r3, [r7, #28]
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800b5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	60fb      	str	r3, [r7, #12]
		current_xtalk = ((uint32_t)cco) << 2;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	61bb      	str	r3, [r7, #24]


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800b5f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5f8:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	617b      	str	r3, [r7, #20]


		itemp32 = xtalk_offset_in - current_xtalk +
 800b5fe:	69fa      	ldr	r2, [r7, #28]
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	1ad2      	subs	r2, r2, r3
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	4413      	add	r3, r2
 800b608:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800b60a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	da02      	bge.n	800b616 <VL53LX_dynamic_xtalk_correction_corrector+0x2ba>
			itemp32 = itemp32 * (-1);
 800b610:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b612:	425b      	negs	r3, r3
 800b614:	65bb      	str	r3, [r7, #88]	; 0x58


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800b616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b618:	699b      	ldr	r3, [r3, #24]
 800b61a:	461a      	mov	r2, r3
 800b61c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b61e:	4293      	cmp	r3, r2
 800b620:	dd0c      	ble.n	800b63c <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800b622:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted)) {
 800b624:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800b626:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	da03      	bge.n	800b636 <VL53LX_dynamic_xtalk_correction_corrector+0x2da>
				pout->single_xtalk_delta_flag = 1;
 800b62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b630:	2201      	movs	r2, #1
 800b632:	709a      	strb	r2, [r3, #2]
 800b634:	e002      	b.n	800b63c <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800b636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b638:	2202      	movs	r2, #2
 800b63a:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800b63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	1c5a      	adds	r2, r3, #1
 800b642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b644:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800b646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d906      	bls.n	800b660 <VL53LX_dynamic_xtalk_correction_corrector+0x304>
			pout->sample_limit_exceeded_flag = 1;
 800b652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b654:	2201      	movs	r2, #1
 800b656:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800b658:	2302      	movs	r3, #2
 800b65a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b65e:	e00d      	b.n	800b67c <VL53LX_dynamic_xtalk_correction_corrector+0x320>
		} else {
			pint->accumulator = pint->accumulator +
 800b660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b662:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b666:	69fb      	ldr	r3, [r7, #28]
 800b668:	461a      	mov	r2, r3
 800b66a:	f04f 0300 	mov.w	r3, #0
 800b66e:	eb10 0802 	adds.w	r8, r0, r2
 800b672:	eb41 0903 	adc.w	r9, r1, r3
 800b676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b678:	e9c3 8902 	strd	r8, r9, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800b67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	429a      	cmp	r2, r3
 800b686:	d202      	bcs.n	800b68e <VL53LX_dynamic_xtalk_correction_corrector+0x332>
			continue_processing = CONT_NEXT_LOOP;
 800b688:	2301      	movs	r3, #1
 800b68a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800b68e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b690:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	461a      	mov	r2, r3
 800b69a:	f04f 0300 	mov.w	r3, #0
 800b69e:	f7f5 fa35 	bl	8000b0c <__aeabi_uldivmod>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	460b      	mov	r3, r1
		xtalk_offset_out =
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	653b      	str	r3, [r7, #80]	; 0x50
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800b6aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b6ac:	69bb      	ldr	r3, [r7, #24]
 800b6ae:	1ad2      	subs	r2, r2, r3
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	4413      	add	r3, r2
 800b6b4:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800b6b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	da02      	bge.n	800b6c2 <VL53LX_dynamic_xtalk_correction_corrector+0x366>
			itemp32 = itemp32 * (-1);
 800b6bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6be:	425b      	negs	r3, r3
 800b6c0:	65bb      	str	r3, [r7, #88]	; 0x58

		if (continue_processing == CONT_CONTINUE &&
 800b6c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d112      	bne.n	800b6f0 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800b6ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6cc:	69db      	ldr	r3, [r3, #28]
 800b6ce:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800b6d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	db0c      	blt.n	800b6f0 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800b6d6:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted))
 800b6d8:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800b6da:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800b6dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	da03      	bge.n	800b6ea <VL53LX_dynamic_xtalk_correction_corrector+0x38e>
				pout->averaged_xtalk_delta_flag = 1;
 800b6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	70da      	strb	r2, [r3, #3]
 800b6e8:	e002      	b.n	800b6f0 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800b6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ec:	2202      	movs	r2, #2
 800b6ee:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800b6f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d108      	bne.n	800b70a <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800b6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6fa:	69db      	ldr	r3, [r3, #28]
 800b6fc:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800b6fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b700:	4293      	cmp	r3, r2
 800b702:	da02      	bge.n	800b70a <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			)

			continue_processing = CONT_RESET;
 800b704:	2302      	movs	r3, #2
 800b706:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



		pout->smudge_corr_clipped = 0;
 800b70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70c:	2200      	movs	r2, #0
 800b70e:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800b710:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b714:	2b00      	cmp	r3, #0
 800b716:	d111      	bne.n	800b73c <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800b718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b71a:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d00d      	beq.n	800b73c <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800b720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b722:	6a1b      	ldr	r3, [r3, #32]
 800b724:	7afa      	ldrb	r2, [r7, #11]
 800b726:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800b72a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d905      	bls.n	800b73c <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
				pout->smudge_corr_clipped = 1;
 800b730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b732:	2201      	movs	r2, #1
 800b734:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800b736:	2302      	movs	r3, #2
 800b738:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800b73c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b73e:	7c1b      	ldrb	r3, [r3, #16]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d007      	beq.n	800b754 <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800b744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b746:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800b748:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d902      	bls.n	800b754 <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			xtalk_offset_out =
 800b74e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800b754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b756:	7c1b      	ldrb	r3, [r3, #16]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d107      	bne.n	800b76c <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800b75c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b75e:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800b760:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b762:	429a      	cmp	r2, r3
 800b764:	d202      	bcs.n	800b76c <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			xtalk_offset_out =
 800b766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800b76c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b76e:	089b      	lsrs	r3, r3, #2
 800b770:	653b      	str	r3, [r7, #80]	; 0x50
		if (xtalk_offset_out > 0x3FFFF)
 800b772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b774:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b778:	d301      	bcc.n	800b77e <VL53LX_dynamic_xtalk_correction_corrector+0x422>
			xtalk_offset_out = 0x3FFFF;
 800b77a:	4b3f      	ldr	r3, [pc, #252]	; (800b878 <VL53LX_dynamic_xtalk_correction_corrector+0x51c>)
 800b77c:	653b      	str	r3, [r7, #80]	; 0x50


		if (continue_processing == CONT_CONTINUE) {
 800b77e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10d      	bne.n	800b7a2 <VL53LX_dynamic_xtalk_correction_corrector+0x446>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b786:	2300      	movs	r3, #0
 800b788:	9301      	str	r3, [sp, #4]
 800b78a:	2301      	movs	r3, #1
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b790:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b792:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f7ff fc33 	bl	800b000 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800b79a:	2302      	movs	r3, #2
 800b79c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b7a0:	e009      	b.n	800b7b6 <VL53LX_dynamic_xtalk_correction_corrector+0x45a>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	9301      	str	r3, [sp, #4]
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7ff fc25 	bl	800b000 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800b7b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	d10c      	bne.n	800b7d8 <VL53LX_dynamic_xtalk_correction_corrector+0x47c>
			pint->accumulator = 0;
 800b7be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b7c0:	f04f 0200 	mov.w	r2, #0
 800b7c4:	f04f 0300 	mov.w	r3, #0
 800b7c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800b7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800b7d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (run_nodetect == 1) {
 800b7de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d140      	bne.n	800b868 <VL53LX_dynamic_xtalk_correction_corrector+0x50c>

		pint->nodetect_counter += 1;
 800b7e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	1c5a      	adds	r2, r3, #1
 800b7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ee:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800b7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7f2:	691a      	ldr	r2, [r3, #16]
 800b7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d202      	bcs.n	800b802 <VL53LX_dynamic_xtalk_correction_corrector+0x4a6>
			continue_processing = CONT_NEXT_LOOP;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800b802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b806:	653b      	str	r3, [r7, #80]	; 0x50

		if (continue_processing == CONT_CONTINUE) {
 800b808:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d110      	bne.n	800b832 <VL53LX_dynamic_xtalk_correction_corrector+0x4d6>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b810:	2300      	movs	r3, #0
 800b812:	9301      	str	r3, [sp, #4]
 800b814:	2300      	movs	r3, #0
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b81c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7ff fbee 	bl	800b000 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800b824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b826:	2202      	movs	r2, #2
 800b828:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800b82a:	2302      	movs	r3, #2
 800b82c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b830:	e009      	b.n	800b846 <VL53LX_dynamic_xtalk_correction_corrector+0x4ea>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800b832:	2301      	movs	r3, #1
 800b834:	9301      	str	r3, [sp, #4]
 800b836:	2300      	movs	r3, #0
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b83e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f7ff fbdd 	bl	800b000 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800b846:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b84a:	2b02      	cmp	r3, #2
 800b84c:	d10c      	bne.n	800b868 <VL53LX_dynamic_xtalk_correction_corrector+0x50c>
			pint->accumulator = 0;
 800b84e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b850:	f04f 0200 	mov.w	r2, #0
 800b854:	f04f 0300 	mov.w	r3, #0
 800b858:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800b85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b85e:	2200      	movs	r2, #0
 800b860:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800b862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b864:	2200      	movs	r2, #0
 800b866:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800b868:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3760      	adds	r7, #96	; 0x60
 800b870:	46bd      	mov	sp, r7
 800b872:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b876:	bf00      	nop
 800b878:	0003ffff 	.word	0x0003ffff

0800b87c <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b086      	sub	sp, #24
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b884:	2300      	movs	r3, #0
 800b886:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	3318      	adds	r3, #24
 800b88c:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800b894:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b89c:	3314      	adds	r3, #20
 800b89e:	2201      	movs	r2, #1
 800b8a0:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b8a8:	3315      	adds	r3, #21
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b8b4:	3316      	adds	r3, #22
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b8c0:	3318      	adds	r3, #24
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b8cc:	331c      	adds	r3, #28
 800b8ce:	2264      	movs	r2, #100	; 0x64
 800b8d0:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b8d8:	2200      	movs	r2, #0
 800b8da:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b8e2:	3304      	adds	r3, #4
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b8ee:	3308      	adds	r3, #8
 800b8f0:	22c8      	movs	r2, #200	; 0xc8
 800b8f2:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b8fa:	330c      	adds	r3, #12
 800b8fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b900:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b908:	3310      	adds	r3, #16
 800b90a:	f44f 729a 	mov.w	r2, #308	; 0x134
 800b90e:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b916:	3314      	adds	r3, #20
 800b918:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b91c:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b924:	3318      	adds	r3, #24
 800b926:	2280      	movs	r2, #128	; 0x80
 800b928:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b930:	331c      	adds	r3, #28
 800b932:	2200      	movs	r2, #0
 800b934:	701a      	strb	r2, [r3, #0]
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b93c:	331e      	adds	r3, #30
 800b93e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b942:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b94a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b94e:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b956:	3302      	adds	r3, #2
 800b958:	2200      	movs	r2, #0
 800b95a:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b962:	3304      	adds	r3, #4
 800b964:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
 800b968:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b970:	3308      	adds	r3, #8
 800b972:	2228      	movs	r2, #40	; 0x28
 800b974:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b97c:	330c      	adds	r3, #12
 800b97e:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800b982:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b98a:	3310      	adds	r3, #16
 800b98c:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b990:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b998:	3314      	adds	r3, #20
 800b99a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b99e:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b9a6:	3318      	adds	r3, #24
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.required_samples = 0;
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b9b2:	331c      	adds	r3, #28
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.accumulator = 0;
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	f503 519f 	add.w	r1, r3, #5088	; 0x13e0
 800b9be:	f04f 0200 	mov.w	r2, #0
 800b9c2:	f04f 0300 	mov.w	r3, #0
 800b9c6:	e9c1 2300 	strd	r2, r3, [r1]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b9d0:	3308      	adds	r3, #8
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	f000 f806 	bl	800b9e8 <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800b9dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3718      	adds	r7, #24
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b9fa:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	2200      	movs	r2, #0
 800ba06:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	2200      	movs	r2, #0
 800ba12:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	2200      	movs	r2, #0
 800ba18:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	2200      	movs	r2, #0
 800ba24:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	2200      	movs	r2, #0
 800ba36:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800ba38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3714      	adds	r7, #20
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ba50:	2300      	movs	r3, #0
 800ba52:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	3318      	adds	r3, #24
 800ba58:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800ba60:	331c      	adds	r3, #28
 800ba62:	2200      	movs	r2, #0
 800ba64:	601a      	str	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	801a      	strh	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800ba76:	3302      	adds	r3, #2
 800ba78:	2200      	movs	r2, #0
 800ba7a:	801a      	strh	r2, [r3, #0]
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800ba82:	3304      	adds	r3, #4
 800ba84:	2218      	movs	r2, #24
 800ba86:	2100      	movs	r1, #0
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f009 f8c1 	bl	8014c10 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800ba8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b085      	sub	sp, #20
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800baa2:	2300      	movs	r3, #0
 800baa4:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	3318      	adds	r3, #24
 800baaa:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bab2:	3310      	adds	r3, #16
 800bab4:	2203      	movs	r2, #3
 800bab6:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800babe:	3311      	adds	r3, #17
 800bac0:	2200      	movs	r2, #0
 800bac2:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800baca:	3312      	adds	r3, #18
 800bacc:	2200      	movs	r2, #0
 800bace:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bad6:	3313      	adds	r3, #19
 800bad8:	2200      	movs	r2, #0
 800bada:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bae2:	3314      	adds	r3, #20
 800bae4:	2200      	movs	r2, #0
 800bae6:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800baee:	3315      	adds	r3, #21
 800baf0:	2200      	movs	r2, #0
 800baf2:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bafa:	3316      	adds	r3, #22
 800bafc:	2200      	movs	r2, #0
 800bafe:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb06:	3318      	adds	r3, #24
 800bb08:	2200      	movs	r2, #0
 800bb0a:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb12:	331c      	adds	r3, #28
 800bb14:	2200      	movs	r2, #0
 800bb16:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800bb18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3714      	adds	r7, #20
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <VL53LX_low_power_auto_data_stop_range>:

VL53LX_Error VL53LX_low_power_auto_data_stop_range(
	VL53LX_DEV                          Dev
	)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bb30:	2300      	movs	r3, #0
 800bb32:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	3318      	adds	r3, #24
 800bb38:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb40:	3312      	adds	r3, #18
 800bb42:	22ff      	movs	r2, #255	; 0xff
 800bb44:	701a      	strb	r2, [r3, #0]

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb4c:	3316      	adds	r3, #22
 800bb4e:	2200      	movs	r2, #0
 800bb50:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb58:	3318      	adds	r3, #24
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb64:	331c      	adds	r3, #28
 800bb66:	2200      	movs	r2, #0
 800bb68:	801a      	strh	r2, [r3, #0]


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb70:	3314      	adds	r3, #20
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d007      	beq.n	800bb88 <VL53LX_low_power_auto_data_stop_range+0x60>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb7e:	3314      	adds	r3, #20
 800bb80:	781a      	ldrb	r2, [r3, #0]
		pdev->stat_nvm.vhv_config__init =
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb8e:	3315      	adds	r3, #21
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d007      	beq.n	800bba6 <VL53LX_low_power_auto_data_stop_range+0x7e>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bb9c:	3315      	adds	r3, #21
 800bb9e:	781a      	ldrb	r2, [r3, #0]
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	LOG_FUNCTION_END(status);

	return status;
 800bbae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3714      	adds	r7, #20
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr

0800bbbe <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800bbbe:	b480      	push	{r7}
 800bbc0:	b085      	sub	sp, #20
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	3318      	adds	r3, #24
 800bbca:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f893 22e3 	ldrb.w	r2, [r3, #739]	; 0x2e3
	pdev->low_power_auto_data.saved_vhv_init =
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bbdc:	3314      	adds	r3, #20
 800bbde:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
	pdev->low_power_auto_data.saved_vhv_timeout =
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bbec:	3315      	adds	r3, #21
 800bbee:	701a      	strb	r2, [r3, #0]


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f893 32e3 	ldrb.w	r3, [r3, #739]	; 0x2e3
 800bbf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbfa:	b2da      	uxtb	r2, r3
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800bc08:	f003 0303 	and.w	r3, r3, #3
 800bc0c:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bc14:	3310      	adds	r3, #16
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800bc1c:	4413      	add	r3, r2
 800bc1e:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 800bc34:	331e      	adds	r3, #30
 800bc36:	781a      	ldrb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result =
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bc3e:	3316      	adds	r3, #22
 800bc40:	701a      	strb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bc48:	3316      	adds	r3, #22
 800bc4a:	781a      	ldrb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

	LOG_FUNCTION_END(status);

	return status;
 800bc52:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3714      	adds	r7, #20
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr

0800bc62 <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800bc62:	b480      	push	{r7}
 800bc64:	b087      	sub	sp, #28
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	3318      	adds	r3, #24
 800bc6e:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f203 3366 	addw	r3, r3, #870	; 0x366
 800bc76:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	8a1b      	ldrh	r3, [r3, #16]
 800bc80:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	891b      	ldrh	r3, [r3, #8]
 800bc86:	4413      	add	r3, r2
	utemp32a =
 800bc88:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc90:	d302      	bcc.n	800bc98 <VL53LX_low_power_auto_update_DSS+0x36>
		utemp32a = 0xFFFF;
 800bc92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc96:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	041b      	lsls	r3, r3, #16
 800bc9c:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d102      	bne.n	800bcae <VL53LX_low_power_auto_update_DSS+0x4c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800bca8:	23f1      	movs	r3, #241	; 0xf1
 800bcaa:	75fb      	strb	r3, [r7, #23]
 800bcac:	e03f      	b.n	800bd2e <VL53LX_low_power_auto_update_DSS+0xcc>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800bcb4:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcbc:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bcc4:	3318      	adds	r3, #24
 800bcc6:	693a      	ldr	r2, [r7, #16]
 800bcc8:	601a      	str	r2, [r3, #0]
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800bcd0:	041b      	lsls	r3, r3, #16
 800bcd2:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bcda:	3318      	adds	r3, #24
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d102      	bne.n	800bce8 <VL53LX_low_power_auto_update_DSS+0x86>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800bce2:	23f1      	movs	r3, #241	; 0xf1
 800bce4:	75fb      	strb	r3, [r7, #23]
 800bce6:	e022      	b.n	800bd2e <VL53LX_low_power_auto_update_DSS+0xcc>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bcee:	3318      	adds	r3, #24
 800bcf0:	681b      	ldr	r3, [r3, #0]
			utemp32a = utemp32a /
 800bcf2:	693a      	ldr	r2, [r7, #16]
 800bcf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcf8:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd00:	d302      	bcc.n	800bd08 <VL53LX_low_power_auto_update_DSS+0xa6>
				utemp32a = 0xFFFF;
 800bd02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd06:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bd12:	331c      	adds	r3, #28
 800bd14:	801a      	strh	r2, [r3, #0]


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bd1c:	331c      	adds	r3, #28
 800bd1e:	881a      	ldrh	r2, [r3, #0]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
			pdev->gen_cfg.dss_config__roi_mode_control =
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2202      	movs	r2, #2
 800bd2a:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800bd2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd32:	f113 0f0f 	cmn.w	r3, #15
 800bd36:	d114      	bne.n	800bd62 <VL53LX_low_power_auto_update_DSS+0x100>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bd3e:	331c      	adds	r3, #28
 800bd40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bd44:	801a      	strh	r2, [r3, #0]


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800bd4c:	331c      	adds	r3, #28
 800bd4e:	881a      	ldrh	r2, [r3, #0]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
		pdev->gen_cfg.dss_config__roi_mode_control =
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2202      	movs	r2, #2
 800bd5a:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800bd62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	371c      	adds	r7, #28
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr

0800bd72 <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800bd72:	b480      	push	{r7}
 800bd74:	b087      	sub	sp, #28
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
 800bd7a:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	3318      	adds	r3, #24
 800bd80:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800bd82:	2300      	movs	r3, #0
 800bd84:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800bd86:	2300      	movs	r3, #0
 800bd88:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800bd90:	2b07      	cmp	r3, #7
 800bd92:	bf0c      	ite	eq
 800bd94:	2301      	moveq	r3, #1
 800bd96:	2300      	movne	r3, #0
 800bd98:	b2db      	uxtb	r3, r3
 800bd9a:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	75fb      	strb	r3, [r7, #23]
 800bda0:	e019      	b.n	800bdd6 <VL53LX_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800bda2:	7df9      	ldrb	r1, [r7, #23]
 800bda4:	7bbb      	ldrb	r3, [r7, #14]
 800bda6:	6938      	ldr	r0, [r7, #16]
 800bda8:	461a      	mov	r2, r3
 800bdaa:	0052      	lsls	r2, r2, #1
 800bdac:	441a      	add	r2, r3
 800bdae:	0153      	lsls	r3, r2, #5
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	005b      	lsls	r3, r3, #1
 800bdb6:	440b      	add	r3, r1
 800bdb8:	019b      	lsls	r3, r3, #6
 800bdba:	4413      	add	r3, r2
 800bdbc:	4403      	add	r3, r0
 800bdbe:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800bdc2:	330c      	adds	r3, #12
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	dd02      	ble.n	800bdd0 <VL53LX_compute_histo_merge_nb+0x5e>
			sum++;
 800bdca:	7dbb      	ldrb	r3, [r7, #22]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800bdd0:	7dfb      	ldrb	r3, [r7, #23]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	75fb      	strb	r3, [r7, #23]
 800bdd6:	7dfb      	ldrb	r3, [r7, #23]
 800bdd8:	2b05      	cmp	r3, #5
 800bdda:	d9e2      	bls.n	800bda2 <VL53LX_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	7dba      	ldrb	r2, [r7, #22]
 800bde0:	701a      	strb	r2, [r3, #0]

	return status;
 800bde2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	371c      	adds	r7, #28
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr

0800bdf2 <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800bdf2:	b480      	push	{r7}
 800bdf4:	b085      	sub	sp, #20
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800be00:	88fb      	ldrh	r3, [r7, #6]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d005      	beq.n	800be12 <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800be06:	88fb      	ldrh	r3, [r7, #6]
 800be08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800be0c:	fb92 f3f3 	sdiv	r3, r2, r3
 800be10:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800be12:	68fb      	ldr	r3, [r7, #12]
}
 800be14:	4618      	mov	r0, r3
 800be16:	3714      	adds	r7, #20
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800be20:	b480      	push	{r7}
 800be22:	b089      	sub	sp, #36	; 0x24
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
 800be2c:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800be2e:	f04f 0200 	mov.w	r2, #0
 800be32:	f04f 0300 	mov.w	r3, #0
 800be36:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800be3a:	2300      	movs	r3, #0
 800be3c:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	68fa      	ldr	r2, [r7, #12]
 800be42:	fb02 f303 	mul.w	r3, r2, r3
 800be46:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	0b1b      	lsrs	r3, r3, #12
 800be4c:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	461a      	mov	r2, r3
 800be52:	f04f 0300 	mov.w	r3, #0
 800be56:	e9c7 2306 	strd	r2, r3, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	68ba      	ldr	r2, [r7, #8]
 800be5e:	fb02 f303 	mul.w	r3, r2, r3
 800be62:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	091b      	lsrs	r3, r3, #4
 800be68:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	461a      	mov	r2, r3
 800be6e:	f04f 0300 	mov.w	r3, #0
 800be72:	69f9      	ldr	r1, [r7, #28]
 800be74:	fb02 f001 	mul.w	r0, r2, r1
 800be78:	69b9      	ldr	r1, [r7, #24]
 800be7a:	fb03 f101 	mul.w	r1, r3, r1
 800be7e:	4401      	add	r1, r0
 800be80:	69b8      	ldr	r0, [r7, #24]
 800be82:	fba0 2302 	umull	r2, r3, r0, r2
 800be86:	4419      	add	r1, r3
 800be88:	460b      	mov	r3, r1
 800be8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800be8e:	e9c7 2306 	strd	r2, r3, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800be92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800be96:	f04f 0200 	mov.w	r2, #0
 800be9a:	f04f 0300 	mov.w	r3, #0
 800be9e:	0b02      	lsrs	r2, r0, #12
 800bea0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800bea4:	0b0b      	lsrs	r3, r1, #12
 800bea6:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800beaa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	bf08      	it	eq
 800beb2:	2a00      	cmpeq	r2, #0
 800beb4:	d305      	bcc.n	800bec2 <VL53LX_duration_maths+0xa2>
		tmp_long_int = 0xFFFFFFFF;
 800beb6:	f04f 32ff 	mov.w	r2, #4294967295
 800beba:	f04f 0300 	mov.w	r3, #0
 800bebe:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	617b      	str	r3, [r7, #20]

	return duration_us;
 800bec6:	697b      	ldr	r3, [r7, #20]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3724      	adds	r7, #36	; 0x24
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800bed4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bed8:	b08e      	sub	sp, #56	; 0x38
 800beda:	af00      	add	r7, sp, #0
 800bedc:	60f8      	str	r0, [r7, #12]
 800bede:	460b      	mov	r3, r1
 800bee0:	607a      	str	r2, [r7, #4]
 800bee2:	817b      	strh	r3, [r7, #10]
	uint64_t total_hist_counts  = 0;
 800bee4:	f04f 0200 	mov.w	r2, #0
 800bee8:	f04f 0300 	mov.w	r3, #0
 800beec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint64_t xtalk_per_spad     = 0;
 800bef0:	f04f 0200 	mov.w	r2, #0
 800bef4:	f04f 0300 	mov.w	r3, #0
 800bef8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint32_t rate_per_spad_kcps = 0;
 800befc:	2300      	movs	r3, #0
 800befe:	627b      	str	r3, [r7, #36]	; 0x24





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	4618      	mov	r0, r3
 800bf04:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800bf08:	4602      	mov	r2, r0
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	f04f 0400 	mov.w	r4, #0
 800bf10:	f04f 0500 	mov.w	r5, #0
 800bf14:	015d      	lsls	r5, r3, #5
 800bf16:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800bf1a:	0154      	lsls	r4, r2, #5
 800bf1c:	4622      	mov	r2, r4
 800bf1e:	462b      	mov	r3, r5
 800bf20:	1a12      	subs	r2, r2, r0
 800bf22:	eb63 0301 	sbc.w	r3, r3, r1
 800bf26:	f04f 0400 	mov.w	r4, #0
 800bf2a:	f04f 0500 	mov.w	r5, #0
 800bf2e:	009d      	lsls	r5, r3, #2
 800bf30:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800bf34:	0094      	lsls	r4, r2, #2
 800bf36:	4622      	mov	r2, r4
 800bf38:	462b      	mov	r3, r5
 800bf3a:	1812      	adds	r2, r2, r0
 800bf3c:	eb41 0303 	adc.w	r3, r1, r3
 800bf40:	f04f 0000 	mov.w	r0, #0
 800bf44:	f04f 0100 	mov.w	r1, #0
 800bf48:	02d9      	lsls	r1, r3, #11
 800bf4a:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800bf4e:	02d0      	lsls	r0, r2, #11
 800bf50:	4602      	mov	r2, r0
 800bf52:	460b      	mov	r3, r1
 800bf54:	e9c7 2306 	strd	r2, r3, [r7, #24]
			* 1000 * 256);

	if (num_spads != 0)
 800bf58:	897b      	ldrh	r3, [r7, #10]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00a      	beq.n	800bf74 <VL53LX_events_per_spad_maths+0xa0>
		total_hist_counts = do_division_u(
 800bf5e:	897a      	ldrh	r2, [r7, #10]
 800bf60:	f04f 0300 	mov.w	r3, #0
 800bf64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bf68:	f7f4 fdd0 	bl	8000b0c <__aeabi_uldivmod>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	460b      	mov	r3, r1
 800bf70:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d021      	beq.n	800bfbe <VL53LX_events_per_spad_maths+0xea>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800bf7a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800bf7e:	f04f 0200 	mov.w	r2, #0
 800bf82:	f04f 0300 	mov.w	r3, #0
 800bf86:	02cb      	lsls	r3, r1, #11
 800bf88:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800bf8c:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800bf8e:	6879      	ldr	r1, [r7, #4]
 800bf90:	0849      	lsrs	r1, r1, #1
 800bf92:	4608      	mov	r0, r1
 800bf94:	f04f 0100 	mov.w	r1, #0
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800bf98:	eb12 0800 	adds.w	r8, r2, r0
 800bf9c:	eb43 0901 	adc.w	r9, r3, r1
 800bfa0:	e9c7 8904 	strd	r8, r9, [r7, #16]

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	f04f 0300 	mov.w	r3, #0
 800bfac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bfb0:	f7f4 fdac 	bl	8000b0c <__aeabi_uldivmod>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	460b      	mov	r3, r1
 800bfb8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800bfbc:	e00b      	b.n	800bfd6 <VL53LX_events_per_spad_maths+0x102>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800bfbe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800bfc2:	f04f 0200 	mov.w	r2, #0
 800bfc6:	f04f 0300 	mov.w	r3, #0
 800bfca:	02cb      	lsls	r3, r1, #11
 800bfcc:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800bfd0:	02c2      	lsls	r2, r0, #11
 800bfd2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800bfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd8:	627b      	str	r3, [r7, #36]	; 0x24

	return rate_per_spad_kcps;
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3738      	adds	r7, #56	; 0x38
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800bfe6 <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800bfe6:	b480      	push	{r7}
 800bfe8:	b085      	sub	sp, #20
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800bfee:	2300      	movs	r3, #0
 800bff0:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800bff2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bff6:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800bff8:	e002      	b.n	800c000 <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	089b      	lsrs	r3, r3, #2
 800bffe:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	429a      	cmp	r2, r3
 800c006:	d8f8      	bhi.n	800bffa <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800c008:	e017      	b.n	800c03a <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800c00a:	68fa      	ldr	r2, [r7, #12]
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	4413      	add	r3, r2
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	429a      	cmp	r2, r3
 800c014:	d30b      	bcc.n	800c02e <VL53LX_isqrt+0x48>
			num -= res + bit;
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	4413      	add	r3, r2
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	1ad3      	subs	r3, r2, r3
 800c020:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	085b      	lsrs	r3, r3, #1
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	4413      	add	r3, r2
 800c02a:	60fb      	str	r3, [r7, #12]
 800c02c:	e002      	b.n	800c034 <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	085b      	lsrs	r3, r3, #1
 800c032:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	089b      	lsrs	r3, r3, #2
 800c038:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d1e4      	bne.n	800c00a <VL53LX_isqrt+0x24>
	}

	return res;
 800c040:	68fb      	ldr	r3, [r7, #12]
}
 800c042:	4618      	mov	r0, r3
 800c044:	3714      	adds	r7, #20
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr

0800c04e <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b084      	sub	sp, #16
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800c056:	2300      	movs	r3, #0
 800c058:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800c05a:	2300      	movs	r3, #0
 800c05c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c064:	4618      	mov	r0, r3
 800c066:	f000 fa97 	bl	800c598 <VL53LX_decode_vcsel_period>
 800c06a:	4603      	mov	r3, r0
	period = 2048 *
 800c06c:	02db      	lsls	r3, r3, #11
 800c06e:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800c07a:	461a      	mov	r2, r3
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	4413      	add	r3, r2
 800c080:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c088:	02db      	lsls	r3, r3, #11
 800c08a:	68fa      	ldr	r2, [r7, #12]
 800c08c:	4413      	add	r3, r2
 800c08e:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c096:	02db      	lsls	r3, r3, #11
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	1ad3      	subs	r3, r2, r3
 800c09c:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d009      	beq.n	800c0b8 <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	68ba      	ldr	r2, [r7, #8]
 800c0a8:	fbb3 f2f2 	udiv	r2, r3, r2
 800c0ac:	68b9      	ldr	r1, [r7, #8]
 800c0ae:	fb01 f202 	mul.w	r2, r1, r2
 800c0b2:	1a9b      	subs	r3, r3, r2
 800c0b4:	60fb      	str	r3, [r7, #12]
 800c0b6:	e001      	b.n	800c0bc <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	b29a      	uxth	r2, r3
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800c0c6:	bf00      	nop
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b084      	sub	sp, #16
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800c0e0:	6838      	ldr	r0, [r7, #0]
 800c0e2:	f000 fb82 	bl	800c7ea <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7ff ff7a 	bl	800bfe6 <VL53LX_isqrt>
 800c0f2:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800c0f4:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	fb02 f303 	mul.w	r3, r2, r3
 800c0fe:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	3307      	adds	r3, #7
 800c104:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	111b      	asrs	r3, r3, #4
 800c10a:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	4413      	add	r3, r2
 800c116:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	2200      	movs	r2, #0
 800c124:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800c128:	2300      	movs	r3, #0
 800c12a:	73fb      	strb	r3, [r7, #15]
 800c12c:	e01e      	b.n	800c16c <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800c12e:	7bfa      	ldrb	r2, [r7, #15]
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	3206      	adds	r2, #6
 800c134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c138:	68ba      	ldr	r2, [r7, #8]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	dd13      	ble.n	800c166 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c144:	7bf9      	ldrb	r1, [r7, #15]
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	3106      	adds	r1, #6
 800c14a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c14e:	441a      	add	r2, r3
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800c15c:	3301      	adds	r3, #1
 800c15e:	b2da      	uxtb	r2, r3
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800c166:	7bfb      	ldrb	r3, [r7, #15]
 800c168:	3301      	adds	r3, #1
 800c16a:	73fb      	strb	r3, [r7, #15]
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	7a9b      	ldrb	r3, [r3, #10]
 800c170:	7bfa      	ldrb	r2, [r7, #15]
 800c172:	429a      	cmp	r2, r3
 800c174:	d3db      	bcc.n	800c12e <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d01c      	beq.n	800c1ba <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53LX_p_028 =
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800c192:	683a      	ldr	r2, [r7, #0]
 800c194:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800c198:	0852      	lsrs	r2, r2, #1
 800c19a:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800c19c:	441a      	add	r2, r3
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800c1aa:	683a      	ldr	r2, [r7, #0]
 800c1ac:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53LX_p_028 /=
 800c1b0:	fb93 f2f2 	sdiv	r2, r3, r2
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800c1ba:	bf00      	nop
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c1c2:	b480      	push	{r7}
 800c1c4:	b085      	sub	sp, #20
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	7b1b      	ldrb	r3, [r3, #12]
 800c1da:	f003 0307 	and.w	r3, r3, #7
 800c1de:	2b07      	cmp	r3, #7
 800c1e0:	d13a      	bne.n	800c258 <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	73bb      	strb	r3, [r7, #14]
 800c1ea:	e01f      	b.n	800c22c <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800c1ec:	7bbb      	ldrb	r3, [r7, #14]
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	7b1b      	ldrb	r3, [r3, #12]
 800c1f4:	f003 0307 	and.w	r3, r3, #7
 800c1f8:	2b07      	cmp	r3, #7
 800c1fa:	d014      	beq.n	800c226 <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800c1fc:	7bba      	ldrb	r2, [r7, #14]
 800c1fe:	7b7b      	ldrb	r3, [r7, #13]
 800c200:	6879      	ldr	r1, [r7, #4]
 800c202:	440a      	add	r2, r1
 800c204:	7b11      	ldrb	r1, [r2, #12]
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	4413      	add	r3, r2
 800c20a:	460a      	mov	r2, r1
 800c20c:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800c20e:	7bba      	ldrb	r2, [r7, #14]
 800c210:	7b7b      	ldrb	r3, [r7, #13]
 800c212:	6879      	ldr	r1, [r7, #4]
 800c214:	440a      	add	r2, r1
 800c216:	7c91      	ldrb	r1, [r2, #18]
 800c218:	687a      	ldr	r2, [r7, #4]
 800c21a:	4413      	add	r3, r2
 800c21c:	460a      	mov	r2, r1
 800c21e:	749a      	strb	r2, [r3, #18]
				i++;
 800c220:	7b7b      	ldrb	r3, [r7, #13]
 800c222:	3301      	adds	r3, #1
 800c224:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800c226:	7bbb      	ldrb	r3, [r7, #14]
 800c228:	3301      	adds	r3, #1
 800c22a:	73bb      	strb	r3, [r7, #14]
 800c22c:	7bbb      	ldrb	r3, [r7, #14]
 800c22e:	2b05      	cmp	r3, #5
 800c230:	d9dc      	bls.n	800c1ec <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800c232:	7b7b      	ldrb	r3, [r7, #13]
 800c234:	73bb      	strb	r3, [r7, #14]
 800c236:	e00c      	b.n	800c252 <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800c238:	7bbb      	ldrb	r3, [r7, #14]
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	4413      	add	r3, r2
 800c23e:	2210      	movs	r2, #16
 800c240:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800c242:	7bbb      	ldrb	r3, [r7, #14]
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	4413      	add	r3, r2
 800c248:	2200      	movs	r2, #0
 800c24a:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800c24c:	7bbb      	ldrb	r3, [r7, #14]
 800c24e:	3301      	adds	r3, #1
 800c250:	73bb      	strb	r3, [r7, #14]
 800c252:	7bbb      	ldrb	r3, [r7, #14]
 800c254:	2b05      	cmp	r3, #5
 800c256:	d9ef      	bls.n	800c238 <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	7adb      	ldrb	r3, [r3, #11]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d023      	beq.n	800c2a8 <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	7adb      	ldrb	r3, [r3, #11]
 800c264:	73fb      	strb	r3, [r7, #15]
 800c266:	e00f      	b.n	800c288 <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800c268:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	7ad2      	ldrb	r2, [r2, #11]
 800c270:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	3106      	adds	r1, #6
 800c276:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	3206      	adds	r2, #6
 800c27e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800c282:	7bfb      	ldrb	r3, [r7, #15]
 800c284:	3301      	adds	r3, #1
 800c286:	73fb      	strb	r3, [r7, #15]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800c28c:	7bfa      	ldrb	r2, [r7, #15]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d3ea      	bcc.n	800c268 <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800c29a:	1ad3      	subs	r3, r2, r3
 800c29c:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	72da      	strb	r2, [r3, #11]
	}
}
 800c2a8:	bf00      	nop
 800c2aa:	3714      	adds	r7, #20
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800c2c6:	88fb      	ldrh	r3, [r7, #6]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7ff fd92 	bl	800bdf2 <VL53LX_calc_pll_period_us>
 800c2ce:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800c2d4:	f249 2257 	movw	r2, #37463	; 0x9257
 800c2d8:	fb02 f303 	mul.w	r3, r2, r3
 800c2dc:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c2e4:	0c1b      	lsrs	r3, r3, #16
 800c2e6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800c2e8:	68bb      	ldr	r3, [r7, #8]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800c2f2:	b480      	push	{r7}
 800c2f4:	b087      	sub	sp, #28
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800c300:	2307      	movs	r3, #7
 800c302:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800c304:	2300      	movs	r3, #0
 800c306:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c30e:	db03      	blt.n	800c318 <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800c310:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800c314:	617b      	str	r3, [r7, #20]
 800c316:	e004      	b.n	800c322 <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	dd01      	ble.n	800c322 <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c328:	dd02      	ble.n	800c330 <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800c32a:	2303      	movs	r3, #3
 800c32c:	613b      	str	r3, [r7, #16]
 800c32e:	e001      	b.n	800c334 <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800c330:	2307      	movs	r3, #7
 800c332:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d009      	beq.n	800c34e <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800c33a:	697a      	ldr	r2, [r7, #20]
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	409a      	lsls	r2, r3
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	085b      	lsrs	r3, r3, #1
 800c344:	441a      	add	r2, r3
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	fbb2 f3f3 	udiv	r3, r2, r3
 800c34c:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c354:	dd02      	ble.n	800c35c <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	011b      	lsls	r3, r3, #4
 800c35a:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c362:	d302      	bcc.n	800c36a <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800c364:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c368:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800c36e:	89fb      	ldrh	r3, [r7, #14]
}
 800c370:	4618      	mov	r0, r3
 800c372:	371c      	adds	r7, #28
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b087      	sub	sp, #28
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	603b      	str	r3, [r7, #0]
 800c388:	4613      	mov	r3, r2
 800c38a:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800c38c:	2300      	movs	r3, #0
 800c38e:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800c390:	2300      	movs	r3, #0
 800c392:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800c394:	88fb      	ldrh	r3, [r7, #6]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d010      	beq.n	800c3bc <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	021a      	lsls	r2, r3, #8
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3a4:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800c3a6:	88fb      	ldrh	r3, [r7, #6]
 800c3a8:	085b      	lsrs	r3, r3, #1
 800c3aa:	b29b      	uxth	r3, r3
 800c3ac:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800c3b2:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800c3b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3b8:	617b      	str	r3, [r7, #20]
 800c3ba:	e004      	b.n	800c3c6 <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800c3bc:	68ba      	ldr	r2, [r7, #8]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3c4:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800c3c6:	697a      	ldr	r2, [r7, #20]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d901      	bls.n	800c3d2 <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800c3d6:	8a7b      	ldrh	r3, [r7, #18]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	371c      	adds	r7, #28
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800c3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3e6:	b089      	sub	sp, #36	; 0x24
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	4606      	mov	r6, r0
 800c3ec:	4608      	mov	r0, r1
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	4633      	mov	r3, r6
 800c3f4:	80fb      	strh	r3, [r7, #6]
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	80bb      	strh	r3, [r7, #4]
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	807b      	strh	r3, [r7, #2]
 800c3fe:	4613      	mov	r3, r2
 800c400:	707b      	strb	r3, [r7, #1]


	uint32_t    pll_period_us = 0;
 800c402:	2300      	movs	r3, #0
 800c404:	61bb      	str	r3, [r7, #24]
	int64_t     tmp_long_int  = 0;
 800c406:	f04f 0200 	mov.w	r2, #0
 800c40a:	f04f 0300 	mov.w	r3, #0
 800c40e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int32_t     range_mm      = 0;
 800c412:	2300      	movs	r3, #0
 800c414:	61fb      	str	r3, [r7, #28]
	int32_t     range_mm_10   = 0;
 800c416:	2300      	movs	r3, #0
 800c418:	60fb      	str	r3, [r7, #12]



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800c41a:	88fb      	ldrh	r3, [r7, #6]
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7ff fce8 	bl	800bdf2 <VL53LX_calc_pll_period_us>
 800c422:	61b8      	str	r0, [r7, #24]



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800c424:	88b8      	ldrh	r0, [r7, #4]
 800c426:	f04f 0100 	mov.w	r1, #0
 800c42a:	887a      	ldrh	r2, [r7, #2]
 800c42c:	f04f 0300 	mov.w	r3, #0
 800c430:	1a84      	subs	r4, r0, r2
 800c432:	eb61 0503 	sbc.w	r5, r1, r3
 800c436:	e9c7 4504 	strd	r4, r5, [r7, #16]



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	461a      	mov	r2, r3
 800c43e:	f04f 0300 	mov.w	r3, #0
 800c442:	6979      	ldr	r1, [r7, #20]
 800c444:	fb02 f001 	mul.w	r0, r2, r1
 800c448:	6939      	ldr	r1, [r7, #16]
 800c44a:	fb03 f101 	mul.w	r1, r3, r1
 800c44e:	4401      	add	r1, r0
 800c450:	6938      	ldr	r0, [r7, #16]
 800c452:	fba0 2302 	umull	r2, r3, r0, r2
 800c456:	4419      	add	r1, r3
 800c458:	460b      	mov	r3, r1
 800c45a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c45e:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800c462:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c466:	2a00      	cmp	r2, #0
 800c468:	f173 0100 	sbcs.w	r1, r3, #0
 800c46c:	da06      	bge.n	800c47c <VL53LX_range_maths+0x98>
 800c46e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c472:	f04f 0100 	mov.w	r1, #0
 800c476:	1812      	adds	r2, r2, r0
 800c478:	eb41 0303 	adc.w	r3, r1, r3
 800c47c:	f04f 0000 	mov.w	r0, #0
 800c480:	f04f 0100 	mov.w	r1, #0
 800c484:	0a50      	lsrs	r0, r2, #9
 800c486:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800c48a:	1259      	asrs	r1, r3, #9
 800c48c:	e9c7 0104 	strd	r0, r1, [r7, #16]



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	f249 2257 	movw	r2, #37463	; 0x9257
 800c496:	fb02 f203 	mul.w	r2, r2, r3
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	2100      	movs	r1, #0
 800c49e:	fb01 f303 	mul.w	r3, r1, r3
 800c4a2:	18d1      	adds	r1, r2, r3
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	f249 2257 	movw	r2, #37463	; 0x9257
 800c4aa:	fba3 2302 	umull	r2, r3, r3, r2
 800c4ae:	4419      	add	r1, r3
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800c4b6:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800c4ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c4be:	2a00      	cmp	r2, #0
 800c4c0:	f173 0100 	sbcs.w	r1, r3, #0
 800c4c4:	da05      	bge.n	800c4d2 <VL53LX_range_maths+0xee>
 800c4c6:	4832      	ldr	r0, [pc, #200]	; (800c590 <VL53LX_range_maths+0x1ac>)
 800c4c8:	f04f 0100 	mov.w	r1, #0
 800c4cc:	1812      	adds	r2, r2, r0
 800c4ce:	eb41 0303 	adc.w	r3, r1, r3
 800c4d2:	f04f 0000 	mov.w	r0, #0
 800c4d6:	f04f 0100 	mov.w	r1, #0
 800c4da:	0d90      	lsrs	r0, r2, #22
 800c4dc:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800c4e0:	1599      	asrs	r1, r3, #22
 800c4e2:	e9c7 0104 	strd	r0, r1, [r7, #16]


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c4ea:	4413      	add	r3, r2
 800c4ec:	61fb      	str	r3, [r7, #28]


	range_mm *= gain_factor;
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4f2:	fb02 f303 	mul.w	r3, r2, r3
 800c4f6:	61fb      	str	r3, [r7, #28]
	range_mm += 0x0400;
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4fe:	61fb      	str	r3, [r7, #28]
	range_mm /= 0x0800;
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	2b00      	cmp	r3, #0
 800c504:	da01      	bge.n	800c50a <VL53LX_range_maths+0x126>
 800c506:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800c50a:	12db      	asrs	r3, r3, #11
 800c50c:	61fb      	str	r3, [r7, #28]


	if (fractional_bits == 0) {
 800c50e:	787b      	ldrb	r3, [r7, #1]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d130      	bne.n	800c576 <VL53LX_range_maths+0x192>
		range_mm_10 = range_mm * 10;
 800c514:	69fa      	ldr	r2, [r7, #28]
 800c516:	4613      	mov	r3, r2
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	4413      	add	r3, r2
 800c51c:	005b      	lsls	r3, r3, #1
 800c51e:	60fb      	str	r3, [r7, #12]
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2b00      	cmp	r3, #0
 800c524:	da00      	bge.n	800c528 <VL53LX_range_maths+0x144>
 800c526:	3303      	adds	r3, #3
 800c528:	109b      	asrs	r3, r3, #2
 800c52a:	60fb      	str	r3, [r7, #12]
		if ((range_mm_10 % 10) < 5)
 800c52c:	68f9      	ldr	r1, [r7, #12]
 800c52e:	4b19      	ldr	r3, [pc, #100]	; (800c594 <VL53LX_range_maths+0x1b0>)
 800c530:	fb83 2301 	smull	r2, r3, r3, r1
 800c534:	109a      	asrs	r2, r3, #2
 800c536:	17cb      	asrs	r3, r1, #31
 800c538:	1ad2      	subs	r2, r2, r3
 800c53a:	4613      	mov	r3, r2
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	4413      	add	r3, r2
 800c540:	005b      	lsls	r3, r3, #1
 800c542:	1aca      	subs	r2, r1, r3
 800c544:	2a04      	cmp	r2, #4
 800c546:	dc09      	bgt.n	800c55c <VL53LX_range_maths+0x178>
			range_mm = (int16_t)(range_mm_10 / 10);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	4a12      	ldr	r2, [pc, #72]	; (800c594 <VL53LX_range_maths+0x1b0>)
 800c54c:	fb82 1203 	smull	r1, r2, r2, r3
 800c550:	1092      	asrs	r2, r2, #2
 800c552:	17db      	asrs	r3, r3, #31
 800c554:	1ad3      	subs	r3, r2, r3
 800c556:	b21b      	sxth	r3, r3
 800c558:	61fb      	str	r3, [r7, #28]
 800c55a:	e014      	b.n	800c586 <VL53LX_range_maths+0x1a2>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	4a0d      	ldr	r2, [pc, #52]	; (800c594 <VL53LX_range_maths+0x1b0>)
 800c560:	fb82 1203 	smull	r1, r2, r2, r3
 800c564:	1092      	asrs	r2, r2, #2
 800c566:	17db      	asrs	r3, r3, #31
 800c568:	1ad3      	subs	r3, r2, r3
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	3301      	adds	r3, #1
 800c56e:	b29b      	uxth	r3, r3
 800c570:	b21b      	sxth	r3, r3
 800c572:	61fb      	str	r3, [r7, #28]
 800c574:	e007      	b.n	800c586 <VL53LX_range_maths+0x1a2>
	} else if (fractional_bits == 1)
 800c576:	787b      	ldrb	r3, [r7, #1]
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d104      	bne.n	800c586 <VL53LX_range_maths+0x1a2>
		range_mm = range_mm / (0x01 << 1);
 800c57c:	69fb      	ldr	r3, [r7, #28]
 800c57e:	0fda      	lsrs	r2, r3, #31
 800c580:	4413      	add	r3, r2
 800c582:	105b      	asrs	r3, r3, #1
 800c584:	61fb      	str	r3, [r7, #28]

	return range_mm;
 800c586:	69fb      	ldr	r3, [r7, #28]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3724      	adds	r7, #36	; 0x24
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c590:	003fffff 	.word	0x003fffff
 800c594:	66666667 	.word	0x66666667

0800c598 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	4603      	mov	r3, r0
 800c5a0:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800c5a6:	79fb      	ldrb	r3, [r7, #7]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	005b      	lsls	r3, r3, #1
 800c5ae:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800c5b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3714      	adds	r7, #20
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr

0800c5be <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800c5be:	b480      	push	{r7}
 800c5c0:	b083      	sub	sp, #12
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
 800c5c6:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53LX_p_015 =
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	781a      	ldrb	r2, [r3, #0]
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	7a5a      	ldrb	r2, [r3, #9]
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	685a      	ldr	r2, [r3, #4]
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	605a      	str	r2, [r3, #4]
}
 800c62e:	bf00      	nop
 800c630:	370c      	adds	r7, #12
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr

0800c63a <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800c63a:	b480      	push	{r7}
 800c63c:	b087      	sub	sp, #28
 800c63e:	af00      	add	r7, sp, #0
 800c640:	60f8      	str	r0, [r7, #12]
 800c642:	460b      	mov	r3, r1
 800c644:	607a      	str	r2, [r7, #4]
 800c646:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800c648:	2300      	movs	r3, #0
 800c64a:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2203      	movs	r2, #3
 800c650:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2203      	movs	r2, #3
 800c656:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2200      	movs	r2, #0
 800c662:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2218      	movs	r2, #24
 800c66e:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800c670:	897b      	ldrh	r3, [r7, #10]
 800c672:	b2da      	uxtb	r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2200      	movs	r2, #0
 800c68a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2200      	movs	r2, #0
 800c692:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2200      	movs	r2, #0
 800c69a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53LX_p_005                       = 0;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53LX_p_015                = 0;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53LX_p_028             = 0;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c70e:	2300      	movs	r3, #0
 800c710:	82fb      	strh	r3, [r7, #22]
 800c712:	e009      	b.n	800c728 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800c714:	8afb      	ldrh	r3, [r7, #22]
 800c716:	8afa      	ldrh	r2, [r7, #22]
 800c718:	b2d1      	uxtb	r1, r2
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	4413      	add	r3, r2
 800c71e:	460a      	mov	r2, r1
 800c720:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c722:	8afb      	ldrh	r3, [r7, #22]
 800c724:	3301      	adds	r3, #1
 800c726:	82fb      	strh	r3, [r7, #22]
 800c728:	8afb      	ldrh	r3, [r7, #22]
 800c72a:	2b05      	cmp	r3, #5
 800c72c:	d9f2      	bls.n	800c714 <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c72e:	2300      	movs	r3, #0
 800c730:	82fb      	strh	r3, [r7, #22]
 800c732:	e007      	b.n	800c744 <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800c734:	8afb      	ldrh	r3, [r7, #22]
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	4413      	add	r3, r2
 800c73a:	2201      	movs	r2, #1
 800c73c:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800c73e:	8afb      	ldrh	r3, [r7, #22]
 800c740:	3301      	adds	r3, #1
 800c742:	82fb      	strh	r3, [r7, #22]
 800c744:	8afb      	ldrh	r3, [r7, #22]
 800c746:	2b05      	cmp	r3, #5
 800c748:	d9f4      	bls.n	800c734 <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800c74a:	2300      	movs	r3, #0
 800c74c:	82fb      	strh	r3, [r7, #22]
 800c74e:	e013      	b.n	800c778 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800c750:	8afa      	ldrh	r2, [r7, #22]
 800c752:	897b      	ldrh	r3, [r7, #10]
 800c754:	429a      	cmp	r2, r3
 800c756:	d206      	bcs.n	800c766 <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800c758:	8afa      	ldrh	r2, [r7, #22]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	3206      	adds	r2, #6
 800c75e:	68f9      	ldr	r1, [r7, #12]
 800c760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c764:	e005      	b.n	800c772 <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800c766:	8afa      	ldrh	r2, [r7, #22]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	3206      	adds	r2, #6
 800c76c:	2100      	movs	r1, #0
 800c76e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800c772:	8afb      	ldrh	r3, [r7, #22]
 800c774:	3301      	adds	r3, #1
 800c776:	82fb      	strh	r3, [r7, #22]
 800c778:	8afb      	ldrh	r3, [r7, #22]
 800c77a:	2b17      	cmp	r3, #23
 800c77c:	d9e8      	bls.n	800c750 <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800c77e:	bf00      	nop
 800c780:	bf00      	nop
 800c782:	371c      	adds	r7, #28
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b085      	sub	sp, #20
 800c790:	af00      	add	r7, sp, #0
 800c792:	4603      	mov	r3, r0
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
 800c798:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800c79a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	da10      	bge.n	800c7c4 <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800c7a2:	7bfb      	ldrb	r3, [r7, #15]
 800c7a4:	43db      	mvns	r3, r3
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	f003 0307 	and.w	r3, r3, #7
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	3308      	adds	r3, #8
 800c7b0:	b2da      	uxtb	r2, r3
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800c7b6:	7bfb      	ldrb	r3, [r7, #15]
 800c7b8:	3b80      	subs	r3, #128	; 0x80
 800c7ba:	10db      	asrs	r3, r3, #3
 800c7bc:	b2da      	uxtb	r2, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800c7c2:	e00c      	b.n	800c7de <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800c7c4:	7bfb      	ldrb	r3, [r7, #15]
 800c7c6:	f003 0307 	and.w	r3, r3, #7
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800c7d0:	7bfb      	ldrb	r3, [r7, #15]
 800c7d2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800c7d6:	10db      	asrs	r3, r3, #3
 800c7d8:	b2da      	uxtb	r2, r3
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	701a      	strb	r2, [r3, #0]
}
 800c7de:	bf00      	nop
 800c7e0:	3714      	adds	r7, #20
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr

0800c7ea <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c7ea:	b480      	push	{r7}
 800c7ec:	b085      	sub	sp, #20
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	73fb      	strb	r3, [r7, #15]
 800c7fa:	e02c      	b.n	800c856 <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800c7fc:	7bfb      	ldrb	r3, [r7, #15]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d009      	beq.n	800c816 <VL53LX_hist_find_min_max_bin_values+0x2c>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800c808:	7bf9      	ldrb	r1, [r7, #15]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	3106      	adds	r1, #6
 800c80e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c812:	429a      	cmp	r2, r3
 800c814:	db07      	blt.n	800c826 <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800c816:	7bfa      	ldrb	r2, [r7, #15]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	3206      	adds	r2, #6
 800c81c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800c826:	7bfb      	ldrb	r3, [r7, #15]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d009      	beq.n	800c840 <VL53LX_hist_find_min_max_bin_values+0x56>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c832:	7bf9      	ldrb	r1, [r7, #15]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	3106      	adds	r1, #6
 800c838:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	dc07      	bgt.n	800c850 <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800c840:	7bfa      	ldrb	r2, [r7, #15]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	3206      	adds	r2, #6
 800c846:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800c850:	7bfb      	ldrb	r3, [r7, #15]
 800c852:	3301      	adds	r3, #1
 800c854:	73fb      	strb	r3, [r7, #15]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	7a9b      	ldrb	r3, [r3, #10]
 800c85a:	7bfa      	ldrb	r2, [r7, #15]
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d3cd      	bcc.n	800c7fc <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800c860:	bf00      	nop
 800c862:	bf00      	nop
 800c864:	3714      	adds	r7, #20
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr

0800c86e <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c86e:	b480      	push	{r7}
 800c870:	b085      	sub	sp, #20
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800c876:	2300      	movs	r3, #0
 800c878:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	7adb      	ldrb	r3, [r3, #11]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d03a      	beq.n	800c8f8 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800c894:	2300      	movs	r3, #0
 800c896:	73fb      	strb	r3, [r7, #15]
 800c898:	e00e      	b.n	800c8b8 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c8a0:	7bf9      	ldrb	r1, [r7, #15]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	3106      	adds	r1, #6
 800c8a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c8aa:	441a      	add	r2, r3
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800c8b2:	7bfb      	ldrb	r3, [r7, #15]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	73fb      	strb	r3, [r7, #15]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	7adb      	ldrb	r3, [r3, #11]
 800c8bc:	7bfa      	ldrb	r2, [r7, #15]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d3eb      	bcc.n	800c89a <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	7ad2      	ldrb	r2, [r2, #11]
 800c8d8:	0852      	lsrs	r2, r2, #1
 800c8da:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800c8dc:	441a      	add	r2, r3
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800c8ee:	fb93 f2f2 	sdiv	r2, r3, r2
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800c8f8:	bf00      	nop
 800c8fa:	3714      	adds	r7, #20
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800c904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c908:	b096      	sub	sp, #88	; 0x58
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6339      	str	r1, [r7, #48]	; 0x30
 800c90e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c910:	62bb      	str	r3, [r7, #40]	; 0x28
 800c912:	4603      	mov	r3, r0
 800c914:	86fb      	strh	r3, [r7, #54]	; 0x36



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800c916:	2300      	movs	r3, #0
 800c918:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	uint32_t    pll_period_us       = 0;
 800c91c:	2300      	movs	r3, #0
 800c91e:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t    periods_elapsed     = 0;
 800c920:	2300      	movs	r3, #0
 800c922:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint32_t    tmp32               = 0;
 800c924:	2300      	movs	r3, #0
 800c926:	657b      	str	r3, [r7, #84]	; 0x54
	uint64_t    tmp64               = 0;
 800c928:	f04f 0200 	mov.w	r2, #0
 800c92c:	f04f 0300 	mov.w	r3, #0
 800c930:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint32_t    amb_thres_delta     = 0;
 800c934:	2300      	movs	r3, #0
 800c936:	63bb      	str	r3, [r7, #56]	; 0x38

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800c938:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c93a:	2300      	movs	r3, #0
 800c93c:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800c93e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c940:	2300      	movs	r3, #0
 800c942:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800c944:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c946:	2300      	movs	r3, #0
 800c948:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800c94a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c94c:	2300      	movs	r3, #0
 800c94e:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800c950:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c952:	2300      	movs	r3, #0
 800c954:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800c956:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c958:	2300      	movs	r3, #0
 800c95a:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800c95c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c95e:	2300      	movs	r3, #0
 800c960:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53LX_p_022            = 0;
 800c962:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c964:	2300      	movs	r3, #0
 800c966:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800c968:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c96a:	2300      	movs	r3, #0
 800c96c:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800c96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c970:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c974:	2b00      	cmp	r3, #0
 800c976:	f000 80ab 	beq.w	800cad0 <VL53LX_f_001+0x1cc>
		(pbins->total_periods_elapsed      != 0)) {
 800c97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800c980:	2b00      	cmp	r3, #0
 800c982:	f000 80a5 	beq.w	800cad0 <VL53LX_f_001+0x1cc>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800c986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c988:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7ff fa30 	bl	800bdf2 <VL53LX_calc_pll_period_us>
 800c992:	6438      	str	r0, [r7, #64]	; 0x40



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800c994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c99a:	3301      	adds	r3, #1
 800c99c:	63fb      	str	r3, [r7, #60]	; 0x3c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800c99e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9a4:	2110      	movs	r1, #16
 800c9a6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c9a8:	f7ff fa3a 	bl	800be20 <VL53LX_duration_maths>
 800c9ac:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800c9ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9b0:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800c9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c9b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4619      	mov	r1, r3
 800c9be:	4610      	mov	r0, r2
 800c9c0:	f7ff fc97 	bl	800c2f2 <VL53LX_rate_maths>
 800c9c4:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800c9c6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c9c8:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800c9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9cc:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d2:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800c9d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	461a      	mov	r2, r3
 800c9dc:	f7ff fa7a 	bl	800bed4 <VL53LX_events_per_spad_maths>
 800c9e0:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800c9e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9e4:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800c9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e8:	8adb      	ldrh	r3, [r3, #22]
 800c9ea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c9ec:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800c9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f0:	8adb      	ldrh	r3, [r3, #22]
 800c9f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c9f4:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800c9f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9f8:	695b      	ldr	r3, [r3, #20]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d068      	beq.n	800cad0 <VL53LX_f_001+0x1cc>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800c9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca00:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800ca02:	b29a      	uxth	r2, r3
 800ca04:	f04f 0300 	mov.w	r3, #0
 800ca08:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64  *= 1000;
 800ca0c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800ca10:	4622      	mov	r2, r4
 800ca12:	462b      	mov	r3, r5
 800ca14:	f04f 0000 	mov.w	r0, #0
 800ca18:	f04f 0100 	mov.w	r1, #0
 800ca1c:	0159      	lsls	r1, r3, #5
 800ca1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ca22:	0150      	lsls	r0, r2, #5
 800ca24:	4602      	mov	r2, r0
 800ca26:	460b      	mov	r3, r1
 800ca28:	1b12      	subs	r2, r2, r4
 800ca2a:	eb63 0305 	sbc.w	r3, r3, r5
 800ca2e:	f04f 0000 	mov.w	r0, #0
 800ca32:	f04f 0100 	mov.w	r1, #0
 800ca36:	0099      	lsls	r1, r3, #2
 800ca38:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800ca3c:	0090      	lsls	r0, r2, #2
 800ca3e:	4602      	mov	r2, r0
 800ca40:	460b      	mov	r3, r1
 800ca42:	1912      	adds	r2, r2, r4
 800ca44:	eb45 0303 	adc.w	r3, r5, r3
 800ca48:	f04f 0000 	mov.w	r0, #0
 800ca4c:	f04f 0100 	mov.w	r1, #0
 800ca50:	00d9      	lsls	r1, r3, #3
 800ca52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ca56:	00d0      	lsls	r0, r2, #3
 800ca58:	4602      	mov	r2, r0
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64 <<= (11+1);
 800ca60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ca64:	f04f 0000 	mov.w	r0, #0
 800ca68:	f04f 0100 	mov.w	r1, #0
 800ca6c:	0319      	lsls	r1, r3, #12
 800ca6e:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800ca72:	0310      	lsls	r0, r2, #12
 800ca74:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
			tmp32 = pdata->VL53LX_p_033/2;
 800ca78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca7a:	695b      	ldr	r3, [r3, #20]
 800ca7c:	085b      	lsrs	r3, r3, #1
 800ca7e:	657b      	str	r3, [r7, #84]	; 0x54
			tmp64 += (uint64_t)tmp32;
 800ca80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca82:	4618      	mov	r0, r3
 800ca84:	f04f 0100 	mov.w	r1, #0
 800ca88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ca8c:	eb12 0800 	adds.w	r8, r2, r0
 800ca90:	eb43 0901 	adc.w	r9, r3, r1
 800ca94:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
			tmp64 = do_division_u(tmp64,
 800ca98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca9a:	695b      	ldr	r3, [r3, #20]
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	f04f 0300 	mov.w	r3, #0
 800caa2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800caa6:	f7f4 f831 	bl	8000b0c <__aeabi_uldivmod>
 800caaa:	4602      	mov	r2, r0
 800caac:	460b      	mov	r3, r1
 800caae:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800cab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab4:	8adb      	ldrh	r3, [r3, #22]
 800cab6:	b298      	uxth	r0, r3
 800cab8:	f04f 0100 	mov.w	r1, #0
 800cabc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cac0:	428b      	cmp	r3, r1
 800cac2:	bf08      	it	eq
 800cac4:	4282      	cmpeq	r2, r0
 800cac6:	d203      	bcs.n	800cad0 <VL53LX_f_001+0x1cc>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800cac8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cacc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cace:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800cad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad2:	881b      	ldrh	r3, [r3, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f000 8203 	beq.w	800cee0 <VL53LX_f_001+0x5dc>
		(pbins->VL53LX_p_015        != 0) &&
 800cada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cadc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	f000 81fd 	beq.w	800cee0 <VL53LX_f_001+0x5dc>
		(pcal->ref_reflectance_pc          != 0) &&
 800cae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae8:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800caea:	2b00      	cmp	r3, #0
 800caec:	f000 81f8 	beq.w	800cee0 <VL53LX_f_001+0x5dc>
		(pbins->total_periods_elapsed      != 0)) {
 800caf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	f000 81f2 	beq.w	800cee0 <VL53LX_f_001+0x5dc>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800cafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafe:	885b      	ldrh	r3, [r3, #2]
 800cb00:	b29a      	uxth	r2, r3
 800cb02:	f04f 0300 	mov.w	r3, #0
 800cb06:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64 *= (1000 * 256);
 800cb0a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800cb0e:	4622      	mov	r2, r4
 800cb10:	462b      	mov	r3, r5
 800cb12:	f04f 0000 	mov.w	r0, #0
 800cb16:	f04f 0100 	mov.w	r1, #0
 800cb1a:	0159      	lsls	r1, r3, #5
 800cb1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cb20:	0150      	lsls	r0, r2, #5
 800cb22:	4602      	mov	r2, r0
 800cb24:	460b      	mov	r3, r1
 800cb26:	1b12      	subs	r2, r2, r4
 800cb28:	eb63 0305 	sbc.w	r3, r3, r5
 800cb2c:	f04f 0000 	mov.w	r0, #0
 800cb30:	f04f 0100 	mov.w	r1, #0
 800cb34:	0099      	lsls	r1, r3, #2
 800cb36:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800cb3a:	0090      	lsls	r0, r2, #2
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	460b      	mov	r3, r1
 800cb40:	1912      	adds	r2, r2, r4
 800cb42:	eb45 0303 	adc.w	r3, r5, r3
 800cb46:	f04f 0000 	mov.w	r0, #0
 800cb4a:	f04f 0100 	mov.w	r1, #0
 800cb4e:	02d9      	lsls	r1, r3, #11
 800cb50:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800cb54:	02d0      	lsls	r0, r2, #11
 800cb56:	4602      	mov	r2, r0
 800cb58:	460b      	mov	r3, r1
 800cb5a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp32  = pcal->ref__actual_effective_spads/2;
 800cb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb60:	881b      	ldrh	r3, [r3, #0]
 800cb62:	085b      	lsrs	r3, r3, #1
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	657b      	str	r3, [r7, #84]	; 0x54
		tmp64 += (uint64_t)tmp32;
 800cb68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f04f 0100 	mov.w	r1, #0
 800cb70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cb74:	eb12 0a00 	adds.w	sl, r2, r0
 800cb78:	eb43 0b01 	adc.w	fp, r3, r1
 800cb7c:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800cb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb82:	881b      	ldrh	r3, [r3, #0]
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	f04f 0300 	mov.w	r3, #0
 800cb8a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cb8e:	f7f3 ffbd 	bl	8000b0c <__aeabi_uldivmod>
 800cb92:	4602      	mov	r2, r0
 800cb94:	460b      	mov	r3, r1
 800cb96:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800cb9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb9e:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800cba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cba2:	691b      	ldr	r3, [r3, #16]
 800cba4:	011a      	lsls	r2, r3, #4
 800cba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cba8:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800cbaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	f04f 0300 	mov.w	r3, #0
 800cbb4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800cbb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbba:	695b      	ldr	r3, [r3, #20]
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	f04f 0300 	mov.w	r3, #0
 800cbc2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cbc4:	fb02 f001 	mul.w	r0, r2, r1
 800cbc8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cbca:	fb03 f101 	mul.w	r1, r3, r1
 800cbce:	4401      	add	r1, r0
 800cbd0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800cbd2:	fba0 2302 	umull	r2, r3, r0, r2
 800cbd6:	4419      	add	r1, r3
 800cbd8:	460b      	mov	r3, r1
 800cbda:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800cbde:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800cbe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbe4:	8b5b      	ldrh	r3, [r3, #26]
 800cbe6:	b29a      	uxth	r2, r3
 800cbe8:	f04f 0300 	mov.w	r3, #0
 800cbec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cbee:	fb02 f001 	mul.w	r0, r2, r1
 800cbf2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cbf4:	fb03 f101 	mul.w	r1, r3, r1
 800cbf8:	4401      	add	r1, r0
 800cbfa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800cbfc:	fba0 2302 	umull	r2, r3, r0, r2
 800cc00:	4419      	add	r1, r3
 800cc02:	460b      	mov	r3, r1
 800cc04:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800cc08:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800cc0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cc10:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800cc14:	6239      	str	r1, [r7, #32]
 800cc16:	f143 0300 	adc.w	r3, r3, #0
 800cc1a:	627b      	str	r3, [r7, #36]	; 0x24
 800cc1c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800cc20:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800cc24:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cc28:	f04f 0200 	mov.w	r2, #0
 800cc2c:	f04f 0300 	mov.w	r3, #0
 800cc30:	0cc2      	lsrs	r2, r0, #19
 800cc32:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800cc36:	0ccb      	lsrs	r3, r1, #19
 800cc38:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  +=  500;
 800cc3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cc40:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800cc44:	61b9      	str	r1, [r7, #24]
 800cc46:	f143 0300 	adc.w	r3, r3, #0
 800cc4a:	61fb      	str	r3, [r7, #28]
 800cc4c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800cc50:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64   = do_division_u(tmp64, 1000);
 800cc54:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cc58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cc5c:	f04f 0300 	mov.w	r3, #0
 800cc60:	f7f3 ff54 	bl	8000b0c <__aeabi_uldivmod>
 800cc64:	4602      	mov	r2, r0
 800cc66:	460b      	mov	r3, r1
 800cc68:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800cc6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cc70:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800cc74:	f04f 0100 	mov.w	r1, #0
 800cc78:	4299      	cmp	r1, r3
 800cc7a:	bf08      	it	eq
 800cc7c:	4290      	cmpeq	r0, r2
 800cc7e:	d205      	bcs.n	800cc8c <VL53LX_f_001+0x388>
			tmp64 = 0x00FFFFFF;
 800cc80:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800cc84:	f04f 0300 	mov.w	r3, #0
 800cc88:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800cc8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc90:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800cc92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	461a      	mov	r2, r3
 800cc98:	f04f 0300 	mov.w	r3, #0
 800cc9c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800cca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	461a      	mov	r2, r3
 800cca6:	f04f 0300 	mov.w	r3, #0
 800ccaa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ccac:	fb02 f001 	mul.w	r0, r2, r1
 800ccb0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ccb2:	fb03 f101 	mul.w	r1, r3, r1
 800ccb6:	4401      	add	r1, r0
 800ccb8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ccba:	fba0 2302 	umull	r2, r3, r0, r2
 800ccbe:	4419      	add	r1, r3
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800ccc6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800ccca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cccc:	8b5b      	ldrh	r3, [r3, #26]
 800ccce:	b29a      	uxth	r2, r3
 800ccd0:	f04f 0300 	mov.w	r3, #0
 800ccd4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ccd6:	fb02 f001 	mul.w	r0, r2, r1
 800ccda:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ccdc:	fb03 f101 	mul.w	r1, r3, r1
 800cce0:	4401      	add	r1, r0
 800cce2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800cce4:	fba0 2302 	umull	r2, r3, r0, r2
 800cce8:	4419      	add	r1, r3
 800ccea:	460b      	mov	r3, r1
 800ccec:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800ccf0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800ccf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ccf8:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800ccfc:	6139      	str	r1, [r7, #16]
 800ccfe:	f143 0300 	adc.w	r3, r3, #0
 800cd02:	617b      	str	r3, [r7, #20]
 800cd04:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800cd08:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800cd0c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cd10:	f04f 0200 	mov.w	r2, #0
 800cd14:	f04f 0300 	mov.w	r3, #0
 800cd18:	0cc2      	lsrs	r2, r0, #19
 800cd1a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800cd1e:	0ccb      	lsrs	r3, r1, #19
 800cd20:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48



		tmp64  *= ((uint64_t)target_reflectance *
 800cd24:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 800cd26:	f04f 0100 	mov.w	r1, #0
				   (uint64_t)pcal->coverglass_transmission);
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2c:	891b      	ldrh	r3, [r3, #8]
 800cd2e:	b29a      	uxth	r2, r3
 800cd30:	f04f 0300 	mov.w	r3, #0
		tmp64  *= ((uint64_t)target_reflectance *
 800cd34:	fb02 f501 	mul.w	r5, r2, r1
 800cd38:	fb00 f403 	mul.w	r4, r0, r3
 800cd3c:	442c      	add	r4, r5
 800cd3e:	fba0 2302 	umull	r2, r3, r0, r2
 800cd42:	18e1      	adds	r1, r4, r3
 800cd44:	460b      	mov	r3, r1
 800cd46:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cd48:	fb02 f001 	mul.w	r0, r2, r1
 800cd4c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cd4e:	fb03 f101 	mul.w	r1, r3, r1
 800cd52:	4401      	add	r1, r0
 800cd54:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800cd56:	fba0 2302 	umull	r2, r3, r0, r2
 800cd5a:	4419      	add	r1, r3
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800cd62:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800cd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd68:	88db      	ldrh	r3, [r3, #6]
 800cd6a:	b298      	uxth	r0, r3
 800cd6c:	f04f 0100 	mov.w	r1, #0
 800cd70:	f04f 0200 	mov.w	r2, #0
 800cd74:	f04f 0300 	mov.w	r3, #0
 800cd78:	01cb      	lsls	r3, r1, #7
 800cd7a:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 800cd7e:	01c2      	lsls	r2, r0, #7
 800cd80:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cd84:	1884      	adds	r4, r0, r2
 800cd86:	60bc      	str	r4, [r7, #8]
 800cd88:	eb41 0303 	adc.w	r3, r1, r3
 800cd8c:	60fb      	str	r3, [r7, #12]
 800cd8e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800cd92:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800cd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd98:	88db      	ldrh	r3, [r3, #6]
 800cd9a:	b298      	uxth	r0, r3
 800cd9c:	f04f 0100 	mov.w	r1, #0
 800cda0:	f04f 0200 	mov.w	r2, #0
 800cda4:	f04f 0300 	mov.w	r3, #0
 800cda8:	020b      	lsls	r3, r1, #8
 800cdaa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cdae:	0202      	lsls	r2, r0, #8
 800cdb0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cdb4:	f7f3 feaa 	bl	8000b0c <__aeabi_uldivmod>
 800cdb8:	4602      	mov	r2, r0
 800cdba:	460b      	mov	r3, r1
 800cdbc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800cdc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cdc4:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800cdc8:	6039      	str	r1, [r7, #0]
 800cdca:	f143 0300 	adc.w	r3, r3, #0
 800cdce:	607b      	str	r3, [r7, #4]
 800cdd0:	e9d7 3400 	ldrd	r3, r4, [r7]
 800cdd4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64, 1000);
 800cdd8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cddc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cde0:	f04f 0300 	mov.w	r3, #0
 800cde4:	f7f3 fe92 	bl	8000b0c <__aeabi_uldivmod>
 800cde8:	4602      	mov	r2, r0
 800cdea:	460b      	mov	r3, r1
 800cdec:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800cdf0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cdf4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800cdf8:	f04f 0100 	mov.w	r1, #0
 800cdfc:	4299      	cmp	r1, r3
 800cdfe:	bf08      	it	eq
 800ce00:	4290      	cmpeq	r0, r2
 800ce02:	d205      	bcs.n	800ce10 <VL53LX_f_001+0x50c>
			tmp64 = 0x00FFFFFF;
 800ce04:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800ce08:	f04f 0300 	mov.w	r3, #0
 800ce0c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800ce10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce14:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800ce16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce18:	69db      	ldr	r3, [r3, #28]
 800ce1a:	021b      	lsls	r3, r3, #8
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7ff f8e2 	bl	800bfe6 <VL53LX_isqrt>
 800ce22:	6578      	str	r0, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800ce24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce26:	785b      	ldrb	r3, [r3, #1]
 800ce28:	461a      	mov	r2, r3
 800ce2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce2c:	fb02 f303 	mul.w	r3, r2, r3
 800ce30:	657b      	str	r3, [r7, #84]	; 0x54



		if (pdata->VL53LX_p_028 <
 800ce32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce34:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800ce36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce38:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d20f      	bcs.n	800ce5e <VL53LX_f_001+0x55a>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800ce3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800ce44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce46:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	63bb      	str	r3, [r7, #56]	; 0x38


			amb_thres_delta <<= 8;
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4e:	021b      	lsls	r3, r3, #8
 800ce50:	63bb      	str	r3, [r7, #56]	; 0x38

			if (tmp32 < amb_thres_delta)
 800ce52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d201      	bcs.n	800ce5e <VL53LX_f_001+0x55a>
				tmp32 = amb_thres_delta;
 800ce5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5c:	657b      	str	r3, [r7, #84]	; 0x54
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800ce5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce60:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800ce62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce64:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800ce66:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6a:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800ce6c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ce6e:	f000 f83e 	bl	800ceee <VL53LX_f_002>
 800ce72:	4603      	mov	r3, r0
 800ce74:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800ce76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce78:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800ce7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce7c:	6a1b      	ldr	r3, [r3, #32]
 800ce7e:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800ce80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce82:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ce86:	461a      	mov	r2, r3
 800ce88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce8a:	fb02 f303 	mul.w	r3, r2, r3
 800ce8e:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 += (1 << 3);
 800ce90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce92:	3308      	adds	r3, #8
 800ce94:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 /= (1 << 4);
 800ce96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce98:	091b      	lsrs	r3, r3, #4
 800ce9a:	657b      	str	r3, [r7, #84]	; 0x54

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800ce9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9e:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800cea0:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800cea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea4:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800cea6:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800cea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceaa:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800ceac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ceae:	f000 f81e 	bl	800ceee <VL53LX_f_002>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800ceb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ceb8:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800ceba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cebc:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800cec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cec2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800cec6:	429a      	cmp	r2, r3
 800cec8:	da05      	bge.n	800ced6 <VL53LX_f_001+0x5d2>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800ceca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cecc:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800ced0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ced2:	801a      	strh	r2, [r3, #0]
 800ced4:	e004      	b.n	800cee0 <VL53LX_f_001+0x5dc>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800ced6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ced8:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800cedc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cede:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800cee0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47

}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3758      	adds	r7, #88	; 0x58
 800cee8:	46bd      	mov	sp, r7
 800ceea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ceee <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b086      	sub	sp, #24
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	60f8      	str	r0, [r7, #12]
 800cef6:	60b9      	str	r1, [r7, #8]
 800cef8:	607a      	str	r2, [r7, #4]
 800cefa:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800cefc:	2300      	movs	r3, #0
 800cefe:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800cf00:	2300      	movs	r3, #0
 800cf02:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	fb03 f303 	mul.w	r3, r3, r3
 800cf10:	693a      	ldr	r2, [r7, #16]
 800cf12:	4413      	add	r3, r2
 800cf14:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800cf16:	6938      	ldr	r0, [r7, #16]
 800cf18:	f7ff f865 	bl	800bfe6 <VL53LX_isqrt>
 800cf1c:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800cf1e:	693a      	ldr	r2, [r7, #16]
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	4413      	add	r3, r2
 800cf24:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	011b      	lsls	r3, r3, #4
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7ff f85b 	bl	800bfe6 <VL53LX_isqrt>
 800cf30:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	fb02 f303 	mul.w	r3, r2, r3
 800cf3a:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d009      	beq.n	800cf56 <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800cf42:	697a      	ldr	r2, [r7, #20]
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	4413      	add	r3, r2
 800cf48:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	005b      	lsls	r3, r3, #1
 800cf4e:	697a      	ldr	r2, [r7, #20]
 800cf50:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf54:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800cf56:	697b      	ldr	r3, [r7, #20]

}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3718      	adds	r7, #24
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2218      	movs	r2, #24
 800cf70:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2200      	movs	r2, #0
 800cf76:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	73fb      	strb	r3, [r7, #15]
 800cf96:	e01f      	b.n	800cfd8 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800cf98:	7bfb      	ldrb	r3, [r7, #15]
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800cfa2:	7bfb      	ldrb	r3, [r7, #15]
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800cfae:	7bfb      	ldrb	r3, [r7, #15]
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	4413      	add	r3, r2
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800cfba:	7bfa      	ldrb	r2, [r7, #15]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	322e      	adds	r2, #46	; 0x2e
 800cfc0:	2100      	movs	r1, #0
 800cfc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800cfc6:	7bfa      	ldrb	r2, [r7, #15]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	3246      	adds	r2, #70	; 0x46
 800cfcc:	2100      	movs	r1, #0
 800cfce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800cfd2:	7bfb      	ldrb	r3, [r7, #15]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	73fb      	strb	r3, [r7, #15]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	785b      	ldrb	r3, [r3, #1]
 800cfdc:	7bfa      	ldrb	r2, [r7, #15]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d3da      	bcc.n	800cf98 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2208      	movs	r2, #8
 800cfee:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53LX_p_046             = 0;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2200      	movs	r2, #0
 800cff6:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d000:	461a      	mov	r2, r3
 800d002:	2118      	movs	r1, #24
 800d004:	2000      	movs	r0, #0
 800d006:	f7ff fb18 	bl	800c63a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800d010:	461a      	mov	r2, r3
 800d012:	2118      	movs	r1, #24
 800d014:	2000      	movs	r0, #0
 800d016:	f7ff fb10 	bl	800c63a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800d020:	461a      	mov	r2, r3
 800d022:	2118      	movs	r1, #24
 800d024:	2000      	movs	r0, #0
 800d026:	f7ff fb08 	bl	800c63a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800d030:	461a      	mov	r2, r3
 800d032:	2118      	movs	r1, #24
 800d034:	2000      	movs	r0, #0
 800d036:	f7ff fb00 	bl	800c63a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800d040:	461a      	mov	r2, r3
 800d042:	2118      	movs	r1, #24
 800d044:	2000      	movs	r0, #0
 800d046:	f7ff faf8 	bl	800c63a <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800d04a:	bf00      	nop
 800d04c:	3710      	adds	r7, #16
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}

0800d052 <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d052:	b5b0      	push	{r4, r5, r7, lr}
 800d054:	b08c      	sub	sp, #48	; 0x30
 800d056:	af00      	add	r7, sp, #0
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	607a      	str	r2, [r7, #4]
 800d05c:	461a      	mov	r2, r3
 800d05e:	4603      	mov	r3, r0
 800d060:	81fb      	strh	r3, [r7, #14]
 800d062:	4613      	mov	r3, r2
 800d064:	737b      	strb	r3, [r7, #13]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d066:	2300      	movs	r3, #0
 800d068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  lb            = 0;
 800d06c:	2300      	movs	r3, #0
 800d06e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t  VL53LX_p_001            = 0;
 800d072:	2300      	movs	r3, #0
 800d074:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int64_t  tmp          = 0;
 800d078:	f04f 0200 	mov.w	r2, #0
 800d07c:	f04f 0300 	mov.w	r3, #0
 800d080:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int32_t  amb_events   = 0;
 800d084:	2300      	movs	r3, #0
 800d086:	617b      	str	r3, [r7, #20]
	int32_t  VL53LX_p_018       = 0;
 800d088:	2300      	movs	r3, #0
 800d08a:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  samples      = 0;
 800d08c:	2300      	movs	r3, #0
 800d08e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800d090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d092:	7a5a      	ldrb	r2, [r3, #9]
 800d094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d096:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800d098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d09a:	7a1a      	ldrb	r2, [r3, #8]
 800d09c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d09e:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800d0a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0a2:	7a9a      	ldrb	r2, [r3, #10]
 800d0a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0a6:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800d0a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0aa:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800d0ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0b0:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800d0b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7ff fa6d 	bl	800c598 <VL53LX_decode_vcsel_period>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800d0c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0c4:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800d0c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d0d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800d0d6:	89fa      	ldrh	r2, [r7, #14]
 800d0d8:	f04f 0300 	mov.w	r3, #0
 800d0dc:	69f9      	ldr	r1, [r7, #28]
 800d0de:	fb02 f001 	mul.w	r0, r2, r1
 800d0e2:	69b9      	ldr	r1, [r7, #24]
 800d0e4:	fb03 f101 	mul.w	r1, r3, r1
 800d0e8:	4401      	add	r1, r0
 800d0ea:	69b8      	ldr	r0, [r7, #24]
 800d0ec:	fba0 2302 	umull	r2, r3, r0, r2
 800d0f0:	4419      	add	r1, r3
 800d0f2:	460b      	mov	r3, r1
 800d0f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800d0f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp += 2048;
 800d0fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d100:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 800d104:	f143 0500 	adc.w	r5, r3, #0
 800d108:	e9c7 4506 	strd	r4, r5, [r7, #24]
	tmp = do_division_s(tmp, 4096);
 800d10c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d110:	2a00      	cmp	r2, #0
 800d112:	f173 0100 	sbcs.w	r1, r3, #0
 800d116:	da06      	bge.n	800d126 <VL53LX_f_006+0xd4>
 800d118:	f640 70ff 	movw	r0, #4095	; 0xfff
 800d11c:	f04f 0100 	mov.w	r1, #0
 800d120:	1812      	adds	r2, r2, r0
 800d122:	eb41 0303 	adc.w	r3, r1, r3
 800d126:	f04f 0000 	mov.w	r0, #0
 800d12a:	f04f 0100 	mov.w	r1, #0
 800d12e:	0b10      	lsrs	r0, r2, #12
 800d130:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800d134:	1319      	asrs	r1, r3, #12
 800d136:	e9c7 0106 	strd	r0, r1, [r7, #24]
	amb_events = (int32_t)tmp;
 800d13a:	69bb      	ldr	r3, [r7, #24]
 800d13c:	617b      	str	r3, [r7, #20]



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800d13e:	2300      	movs	r3, #0
 800d140:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d144:	e062      	b.n	800d20c <VL53LX_f_006+0x1ba>

		VL53LX_p_001 = lb >> 2;
 800d146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d14a:	089b      	lsrs	r3, r3, #2
 800d14c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800d150:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d154:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d156:	4413      	add	r3, r2
 800d158:	7c9b      	ldrb	r3, [r3, #18]
 800d15a:	613b      	str	r3, [r7, #16]

		if (samples > 0) {
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	dd4f      	ble.n	800d202 <VL53LX_f_006+0x1b0>

			if (lb < pxtalk->VL53LX_p_021 &&
 800d162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d164:	7a9b      	ldrb	r3, [r3, #10]
 800d166:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d20f      	bcs.n	800d18e <VL53LX_f_006+0x13c>
 800d16e:	7b7b      	ldrb	r3, [r7, #13]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d00c      	beq.n	800d18e <VL53LX_f_006+0x13c>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800d174:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d17a:	3206      	adds	r2, #6
 800d17c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	441a      	add	r2, r3
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	fb02 f303 	mul.w	r3, r2, r3
 800d18a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d18c:	e004      	b.n	800d198 <VL53LX_f_006+0x146>
			else
				VL53LX_p_018 = samples *  amb_events;
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	697a      	ldr	r2, [r7, #20]
 800d192:	fb02 f303 	mul.w	r3, r2, r3
 800d196:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800d198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7fe ff23 	bl	800bfe6 <VL53LX_isqrt>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018 += (samples/2);
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	0fda      	lsrs	r2, r3, #31
 800d1a8:	4413      	add	r3, r2
 800d1aa:	105b      	asrs	r3, r3, #1
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b0:	4413      	add	r3, r2
 800d1b2:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= samples;
 800d1b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	fb92 f3f3 	sdiv	r3, r2, r3
 800d1bc:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 *= ambient_threshold_sigma;
 800d1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c0:	68ba      	ldr	r2, [r7, #8]
 800d1c2:	fb02 f303 	mul.w	r3, r2, r3
 800d1c6:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += 8;
 800d1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ca:	3308      	adds	r3, #8
 800d1cc:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= 16;
 800d1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	da00      	bge.n	800d1d6 <VL53LX_f_006+0x184>
 800d1d4:	330f      	adds	r3, #15
 800d1d6:	111b      	asrs	r3, r3, #4
 800d1d8:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += amb_events;
 800d1da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	4413      	add	r3, r2
 800d1e0:	62bb      	str	r3, [r7, #40]	; 0x28

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800d1e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	da01      	bge.n	800d1ee <VL53LX_f_006+0x19c>
				VL53LX_p_018 = min_ambient_threshold_events;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	62bb      	str	r3, [r7, #40]	; 0x28

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800d1ee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d1f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1f4:	3216      	adds	r2, #22
 800d1f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800d1fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d200:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800d202:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d206:	3301      	adds	r3, #1
 800d208:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d20c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d20e:	7a9b      	ldrb	r3, [r3, #10]
 800d210:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d214:	429a      	cmp	r2, r3
 800d216:	d396      	bcc.n	800d146 <VL53LX_f_006+0xf4>

	}



	palgo->VL53LX_p_039 = 0;
 800d218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d21a:	2200      	movs	r2, #0
 800d21c:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800d21e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d220:	7a1b      	ldrb	r3, [r3, #8]
 800d222:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d226:	e033      	b.n	800d290 <VL53LX_f_006+0x23e>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800d228:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d22c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d22e:	3206      	adds	r2, #6
 800d230:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d234:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800d238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d23a:	3116      	adds	r1, #22
 800d23c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d240:	429a      	cmp	r2, r3
 800d242:	dd13      	ble.n	800d26c <VL53LX_f_006+0x21a>
			palgo->VL53LX_p_040[lb]      = 1;
 800d244:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d24a:	4413      	add	r3, r2
 800d24c:	2201      	movs	r2, #1
 800d24e:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800d250:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d256:	4413      	add	r3, r2
 800d258:	2201      	movs	r2, #1
 800d25a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53LX_p_039++;
 800d25e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d260:	791b      	ldrb	r3, [r3, #4]
 800d262:	3301      	adds	r3, #1
 800d264:	b2da      	uxtb	r2, r3
 800d266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d268:	711a      	strb	r2, [r3, #4]
 800d26a:	e00c      	b.n	800d286 <VL53LX_f_006+0x234>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800d26c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d270:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d272:	4413      	add	r3, r2
 800d274:	2200      	movs	r2, #0
 800d276:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800d278:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d27c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d27e:	4413      	add	r3, r2
 800d280:	2200      	movs	r2, #0
 800d282:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800d286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d28a:	3301      	adds	r3, #1
 800d28c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d292:	7a9b      	ldrb	r3, [r3, #10]
 800d294:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d298:	429a      	cmp	r2, r3
 800d29a:	d3c5      	bcc.n	800d228 <VL53LX_f_006+0x1d6>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d29c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3730      	adds	r7, #48	; 0x30
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bdb0      	pop	{r4, r5, r7, pc}

0800d2a8 <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	73fb      	strb	r3, [r7, #15]
 800d2cc:	e02d      	b.n	800d32a <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800d2ce:	7bfb      	ldrb	r3, [r7, #15]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	78d2      	ldrb	r2, [r2, #3]
 800d2d6:	fb93 f1f2 	sdiv	r1, r3, r2
 800d2da:	fb02 f201 	mul.w	r2, r2, r1
 800d2de:	1a9b      	subs	r3, r3, r2
 800d2e0:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	789b      	ldrb	r3, [r3, #2]
 800d2e6:	7bfa      	ldrb	r2, [r7, #15]
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d21b      	bcs.n	800d324 <VL53LX_f_007+0x7c>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	789b      	ldrb	r3, [r3, #2]
 800d2f0:	7b3a      	ldrb	r2, [r7, #12]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d216      	bcs.n	800d324 <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800d2f6:	7bfb      	ldrb	r3, [r7, #15]
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10f      	bne.n	800d324 <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800d304:	7b3b      	ldrb	r3, [r7, #12]
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	4413      	add	r3, r2
 800d30a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d108      	bne.n	800d324 <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800d312:	7bbb      	ldrb	r3, [r7, #14]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d105      	bne.n	800d324 <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	7bfa      	ldrb	r2, [r7, #15]
 800d31c:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800d320:	2301      	movs	r3, #1
 800d322:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800d324:	7bfb      	ldrb	r3, [r7, #15]
 800d326:	3301      	adds	r3, #1
 800d328:	73fb      	strb	r3, [r7, #15]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	78db      	ldrb	r3, [r3, #3]
 800d32e:	7bfa      	ldrb	r2, [r7, #15]
 800d330:	429a      	cmp	r2, r3
 800d332:	d3cc      	bcc.n	800d2ce <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d334:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3714      	adds	r7, #20
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d344:	b480      	push	{r7}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d34c:	2300      	movs	r3, #0
 800d34e:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800d350:	2300      	movs	r3, #0
 800d352:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800d354:	2300      	movs	r3, #0
 800d356:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800d358:	2300      	movs	r3, #0
 800d35a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d362:	73fb      	strb	r3, [r7, #15]
 800d364:	e05a      	b.n	800d41c <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	78da      	ldrb	r2, [r3, #3]
 800d36a:	7bfb      	ldrb	r3, [r7, #15]
 800d36c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d370:	fb02 f201 	mul.w	r2, r2, r1
 800d374:	1a9b      	subs	r3, r3, r2
 800d376:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800d378:	7bfb      	ldrb	r3, [r7, #15]
 800d37a:	3301      	adds	r3, #1
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	78d2      	ldrb	r2, [r2, #3]
 800d380:	fb93 f1f2 	sdiv	r1, r3, r2
 800d384:	fb02 f201 	mul.w	r2, r2, r1
 800d388:	1a9b      	subs	r3, r3, r2
 800d38a:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	789b      	ldrb	r3, [r3, #2]
 800d390:	7b7a      	ldrb	r2, [r7, #13]
 800d392:	429a      	cmp	r2, r3
 800d394:	d23f      	bcs.n	800d416 <VL53LX_f_008+0xd2>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	789b      	ldrb	r3, [r3, #2]
 800d39a:	7b3a      	ldrb	r2, [r7, #12]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d23a      	bcs.n	800d416 <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800d3a0:	7b7b      	ldrb	r3, [r7, #13]
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	4413      	add	r3, r2
 800d3a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d10e      	bne.n	800d3cc <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800d3ae:	7b3b      	ldrb	r3, [r7, #12]
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d107      	bne.n	800d3cc <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	b2da      	uxtb	r2, r3
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d905      	bls.n	800d3e8 <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800d3e8:	7b7b      	ldrb	r3, [r7, #13]
 800d3ea:	687a      	ldr	r2, [r7, #4]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d009      	beq.n	800d40a <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800d3f6:	7b7b      	ldrb	r3, [r7, #13]
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800d3fe:	687a      	ldr	r2, [r7, #4]
 800d400:	4413      	add	r3, r2
 800d402:	460a      	mov	r2, r1
 800d404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d408:	e005      	b.n	800d416 <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800d40a:	7b7b      	ldrb	r3, [r7, #13]
 800d40c:	687a      	ldr	r2, [r7, #4]
 800d40e:	4413      	add	r3, r2
 800d410:	2200      	movs	r2, #0
 800d412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800d416:	7bfb      	ldrb	r3, [r7, #15]
 800d418:	3301      	adds	r3, #1
 800d41a:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800d41c:	7bfa      	ldrb	r2, [r7, #15]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d424:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800d42a:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800d42c:	429a      	cmp	r2, r3
 800d42e:	db9a      	blt.n	800d366 <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800d430:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800d434:	4618      	mov	r0, r3
 800d436:	3714      	adds	r7, #20
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d440:	b480      	push	{r7}
 800d442:	b087      	sub	sp, #28
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d448:	2300      	movs	r3, #0
 800d44a:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d44c:	2300      	movs	r3, #0
 800d44e:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800d450:	2300      	movs	r3, #0
 800d452:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800d454:	2300      	movs	r3, #0
 800d456:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800d458:	2300      	movs	r3, #0
 800d45a:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800d45c:	2300      	movs	r3, #0
 800d45e:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	78db      	ldrb	r3, [r3, #3]
 800d464:	3b01      	subs	r3, #1
 800d466:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800d468:	7cbb      	ldrb	r3, [r7, #18]
 800d46a:	085b      	lsrs	r3, r3, #1
 800d46c:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d474:	75fb      	strb	r3, [r7, #23]
 800d476:	e0a2      	b.n	800d5be <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	78da      	ldrb	r2, [r3, #3]
 800d47c:	7dfb      	ldrb	r3, [r7, #23]
 800d47e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d482:	fb02 f201 	mul.w	r2, r2, r1
 800d486:	1a9b      	subs	r3, r3, r2
 800d488:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800d48a:	7dfb      	ldrb	r3, [r7, #23]
 800d48c:	3301      	adds	r3, #1
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	78d2      	ldrb	r2, [r2, #3]
 800d492:	fb93 f1f2 	sdiv	r1, r3, r2
 800d496:	fb02 f201 	mul.w	r2, r2, r1
 800d49a:	1a9b      	subs	r3, r3, r2
 800d49c:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	789b      	ldrb	r3, [r3, #2]
 800d4a2:	7d7a      	ldrb	r2, [r7, #21]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	f080 8087 	bcs.w	800d5b8 <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800d4ae:	7d3a      	ldrb	r2, [r7, #20]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	f080 8081 	bcs.w	800d5b8 <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800d4b6:	7d7b      	ldrb	r3, [r7, #21]
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	4413      	add	r3, r2
 800d4bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d12f      	bne.n	800d524 <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800d4c4:	7d3b      	ldrb	r3, [r7, #20]
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d028      	beq.n	800d524 <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800d4d2:	7d3b      	ldrb	r3, [r7, #20]
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	4413      	add	r3, r2
 800d4d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d4dc:	3b01      	subs	r3, #1
 800d4de:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800d4e6:	7cfa      	ldrb	r2, [r7, #19]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d21b      	bcs.n	800d524 <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d4ec:	7cfa      	ldrb	r2, [r7, #19]
 800d4ee:	4613      	mov	r3, r2
 800d4f0:	00db      	lsls	r3, r3, #3
 800d4f2:	4413      	add	r3, r2
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	4413      	add	r3, r2
 800d4fe:	3304      	adds	r3, #4
 800d500:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	7dfa      	ldrb	r2, [r7, #23]
 800d506:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800d508:	7dfb      	ldrb	r3, [r7, #23]
 800d50a:	3301      	adds	r3, #1
 800d50c:	b2da      	uxtb	r2, r3
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	22ff      	movs	r2, #255	; 0xff
 800d516:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2200      	movs	r2, #0
 800d51c:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2200      	movs	r2, #0
 800d522:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800d524:	7d7b      	ldrb	r3, [r7, #21]
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	4413      	add	r3, r2
 800d52a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d042      	beq.n	800d5b8 <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800d532:	7d3b      	ldrb	r3, [r7, #20]
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	4413      	add	r3, r2
 800d538:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d13b      	bne.n	800d5b8 <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800d540:	7d7b      	ldrb	r3, [r7, #21]
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	4413      	add	r3, r2
 800d546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d54a:	3b01      	subs	r3, #1
 800d54c:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800d554:	7cfa      	ldrb	r2, [r7, #19]
 800d556:	429a      	cmp	r2, r3
 800d558:	d22e      	bcs.n	800d5b8 <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d55a:	7cfa      	ldrb	r2, [r7, #19]
 800d55c:	4613      	mov	r3, r2
 800d55e:	00db      	lsls	r3, r3, #3
 800d560:	4413      	add	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	4413      	add	r3, r2
 800d56c:	3304      	adds	r3, #4
 800d56e:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	7dfa      	ldrb	r2, [r7, #23]
 800d574:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800d576:	7dfb      	ldrb	r3, [r7, #23]
 800d578:	3301      	adds	r3, #1
 800d57a:	b2da      	uxtb	r2, r3
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800d588:	1ad3      	subs	r3, r2, r3
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	3301      	adds	r3, #1
 800d58e:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800d59c:	1ad3      	subs	r3, r2, r3
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	799b      	ldrb	r3, [r3, #6]
 800d5ac:	7cba      	ldrb	r2, [r7, #18]
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d202      	bcs.n	800d5b8 <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	7cba      	ldrb	r2, [r7, #18]
 800d5b6:	719a      	strb	r2, [r3, #6]
		blb++) {
 800d5b8:	7dfb      	ldrb	r3, [r7, #23]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800d5be:	7dfa      	ldrb	r2, [r7, #23]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d5c6:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800d5cc:	440b      	add	r3, r1
	for (blb = palgo->VL53LX_p_044;
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	f6ff af52 	blt.w	800d478 <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d5d4:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	371c      	adds	r7, #28
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b090      	sub	sp, #64	; 0x40
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	6039      	str	r1, [r7, #0]
 800d5ee:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800d5f6:	f107 030c 	add.w	r3, r7, #12
 800d5fa:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 800d602:	2301      	movs	r3, #1
 800d604:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d965      	bls.n	800d6de <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800d612:	e05f      	b.n	800d6d4 <VL53LX_f_016+0xf0>

		swapped = 0;
 800d614:	2300      	movs	r3, #0
 800d616:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800d61a:	2301      	movs	r3, #1
 800d61c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d620:	e051      	b.n	800d6c6 <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800d622:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d626:	1e5a      	subs	r2, r3, #1
 800d628:	4613      	mov	r3, r2
 800d62a:	00db      	lsls	r3, r3, #3
 800d62c:	4413      	add	r3, r2
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d634:	683a      	ldr	r2, [r7, #0]
 800d636:	4413      	add	r3, r2
 800d638:	3304      	adds	r3, #4
 800d63a:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800d63c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d640:	4613      	mov	r3, r2
 800d642:	00db      	lsls	r3, r3, #3
 800d644:	4413      	add	r3, r2
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d64c:	683a      	ldr	r2, [r7, #0]
 800d64e:	4413      	add	r3, r2
 800d650:	3304      	adds	r3, #4
 800d652:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 800d654:	79fb      	ldrb	r3, [r7, #7]
 800d656:	2b02      	cmp	r3, #2
 800d658:	d118      	bne.n	800d68c <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800d65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d65c:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800d65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d660:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800d662:	429a      	cmp	r2, r3
 800d664:	da2a      	bge.n	800d6bc <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800d666:	2224      	movs	r2, #36	; 0x24
 800d668:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d66a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d66c:	f007 fac2 	bl	8014bf4 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800d670:	2224      	movs	r2, #36	; 0x24
 800d672:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d676:	f007 fabd 	bl	8014bf4 <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800d67a:	2224      	movs	r2, #36	; 0x24
 800d67c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d67e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d680:	f007 fab8 	bl	8014bf4 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800d684:	2301      	movs	r3, #1
 800d686:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800d68a:	e017      	b.n	800d6bc <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800d68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d68e:	699a      	ldr	r2, [r3, #24]
 800d690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d692:	699b      	ldr	r3, [r3, #24]
 800d694:	429a      	cmp	r2, r3
 800d696:	d911      	bls.n	800d6bc <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800d698:	2224      	movs	r2, #36	; 0x24
 800d69a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d69c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d69e:	f007 faa9 	bl	8014bf4 <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800d6a2:	2224      	movs	r2, #36	; 0x24
 800d6a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d6a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6a8:	f007 faa4 	bl	8014bf4 <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800d6ac:	2224      	movs	r2, #36	; 0x24
 800d6ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d6b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d6b2:	f007 fa9f 	bl	8014bf4 <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800d6bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800d6cc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d3a6      	bcc.n	800d622 <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800d6d4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d19b      	bne.n	800d614 <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800d6dc:	e000      	b.n	800d6e0 <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800d6de:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800d6e0:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3740      	adds	r7, #64	; 0x40
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b087      	sub	sp, #28
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	607a      	str	r2, [r7, #4]
 800d6f8:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d6fe:	2300      	movs	r3, #0
 800d700:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d702:	2300      	movs	r3, #0
 800d704:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d706:	7bfa      	ldrb	r2, [r7, #15]
 800d708:	4613      	mov	r3, r2
 800d70a:	00db      	lsls	r3, r3, #3
 800d70c:	4413      	add	r3, r2
 800d70e:	009b      	lsls	r3, r3, #2
 800d710:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	4413      	add	r3, r2
 800d718:	3304      	adds	r3, #4
 800d71a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	2200      	movs	r2, #0
 800d720:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	2200      	movs	r2, #0
 800d726:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	75fb      	strb	r3, [r7, #23]
 800d72e:	e01c      	b.n	800d76a <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	78da      	ldrb	r2, [r3, #3]
 800d734:	7dfb      	ldrb	r3, [r7, #23]
 800d736:	fbb3 f1f2 	udiv	r1, r3, r2
 800d73a:	fb02 f201 	mul.w	r2, r2, r1
 800d73e:	1a9b      	subs	r3, r3, r2
 800d740:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	68da      	ldr	r2, [r3, #12]
 800d746:	7d79      	ldrb	r1, [r7, #21]
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	3106      	adds	r1, #6
 800d74c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d750:	441a      	add	r2, r3
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	689a      	ldr	r2, [r3, #8]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	689b      	ldr	r3, [r3, #8]
 800d75e:	441a      	add	r2, r3
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800d764:	7dfb      	ldrb	r3, [r7, #23]
 800d766:	3301      	adds	r3, #1
 800d768:	75fb      	strb	r3, [r7, #23]
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	791b      	ldrb	r3, [r3, #4]
 800d76e:	7dfa      	ldrb	r2, [r7, #23]
 800d770:	429a      	cmp	r2, r3
 800d772:	d9dd      	bls.n	800d730 <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	68da      	ldr	r2, [r3, #12]
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800d782:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d786:	4618      	mov	r0, r3
 800d788:	371c      	adds	r7, #28
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr

0800d792 <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800d792:	b590      	push	{r4, r7, lr}
 800d794:	b08d      	sub	sp, #52	; 0x34
 800d796:	af02      	add	r7, sp, #8
 800d798:	60ba      	str	r2, [r7, #8]
 800d79a:	607b      	str	r3, [r7, #4]
 800d79c:	4603      	mov	r3, r0
 800d79e:	73fb      	strb	r3, [r7, #15]
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53LX_p_012 = 0;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d7c0:	7bfa      	ldrb	r2, [r7, #15]
 800d7c2:	4613      	mov	r3, r2
 800d7c4:	00db      	lsls	r3, r3, #3
 800d7c6:	4413      	add	r3, r2
 800d7c8:	009b      	lsls	r3, r3, #2
 800d7ca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	4413      	add	r3, r2
 800d7d2:	3304      	adds	r3, #4
 800d7d4:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	789b      	ldrb	r3, [r3, #2]
 800d7da:	2bff      	cmp	r3, #255	; 0xff
 800d7dc:	d102      	bne.n	800d7e4 <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	789b      	ldrb	r3, [r3, #2]
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	78d2      	ldrb	r2, [r2, #3]
 800d7ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7f0:	fb02 f201 	mul.w	r2, r2, r1
 800d7f4:	1a9b      	subs	r3, r3, r2
 800d7f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53LX_p_012  = (int16_t)i;
 800d7fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d7fe:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	b29a      	uxth	r2, r3
 800d806:	8c3b      	ldrh	r3, [r7, #32]
 800d808:	4413      	add	r3, r2
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800d80e:	8c3a      	ldrh	r2, [r7, #32]
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	789b      	ldrb	r3, [r3, #2]
 800d814:	b29b      	uxth	r3, r3
 800d816:	1ad3      	subs	r3, r2, r3
 800d818:	b29b      	uxth	r3, r3
 800d81a:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800d81c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d820:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	791b      	ldrb	r3, [r3, #4]
 800d826:	b29a      	uxth	r2, r3
 800d828:	8bfb      	ldrh	r3, [r7, #30]
 800d82a:	4413      	add	r3, r2
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800d830:	8bfa      	ldrh	r2, [r7, #30]
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	789b      	ldrb	r3, [r3, #2]
 800d836:	b29b      	uxth	r3, r3
 800d838:	1ad3      	subs	r3, r2, r3
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800d83e:	8bfa      	ldrh	r2, [r7, #30]
 800d840:	8c3b      	ldrh	r3, [r7, #32]
 800d842:	1ad3      	subs	r3, r2, r3
 800d844:	b29b      	uxth	r3, r3
 800d846:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 800d848:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d84c:	2b03      	cmp	r3, #3
 800d84e:	dd01      	ble.n	800d854 <VL53LX_f_015+0xc2>
		window_width = 3;
 800d850:	2303      	movs	r3, #3
 800d852:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800d854:	8c3a      	ldrh	r2, [r7, #32]
 800d856:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d858:	4413      	add	r3, r2
 800d85a:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800d85c:	b219      	sxth	r1, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	78da      	ldrb	r2, [r3, #3]
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	3314      	adds	r3, #20
 800d866:	7bbc      	ldrb	r4, [r7, #14]
 800d868:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800d86c:	9301      	str	r3, [sp, #4]
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	9300      	str	r3, [sp, #0]
 800d872:	4623      	mov	r3, r4
 800d874:	f000 f846 	bl	800d904 <VL53LX_f_020>
 800d878:	4603      	mov	r3, r0
 800d87a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800d87e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d882:	2b00      	cmp	r3, #0
 800d884:	d114      	bne.n	800d8b0 <VL53LX_f_015+0x11e>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800d886:	8bfa      	ldrh	r2, [r7, #30]
 800d888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d88a:	1ad3      	subs	r3, r2, r3
 800d88c:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800d88e:	b218      	sxth	r0, r3
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	78da      	ldrb	r2, [r3, #3]
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	331c      	adds	r3, #28
 800d898:	7bbc      	ldrb	r4, [r7, #14]
 800d89a:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800d89e:	9301      	str	r3, [sp, #4]
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	9300      	str	r3, [sp, #0]
 800d8a4:	4623      	mov	r3, r4
 800d8a6:	f000 f82d 	bl	800d904 <VL53LX_f_020>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	695a      	ldr	r2, [r3, #20]
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	69db      	ldr	r3, [r3, #28]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d909      	bls.n	800d8d0 <VL53LX_f_015+0x13e>
		tmp_phase        = pdata->VL53LX_p_026;
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	695b      	ldr	r3, [r3, #20]
 800d8c0:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	69da      	ldr	r2, [r3, #28]
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	69ba      	ldr	r2, [r7, #24]
 800d8ce:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	699a      	ldr	r2, [r3, #24]
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	695b      	ldr	r3, [r3, #20]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d203      	bcs.n	800d8e4 <VL53LX_f_015+0x152>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	699a      	ldr	r2, [r3, #24]
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	699a      	ldr	r2, [r3, #24]
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	69db      	ldr	r3, [r3, #28]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d903      	bls.n	800d8f8 <VL53LX_f_015+0x166>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	699a      	ldr	r2, [r3, #24]
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800d8f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	372c      	adds	r7, #44	; 0x2c
 800d900:	46bd      	mov	sp, r7
 800d902:	bd90      	pop	{r4, r7, pc}

0800d904 <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800d904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d908:	b093      	sub	sp, #76	; 0x4c
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	4616      	mov	r6, r2
 800d90e:	461a      	mov	r2, r3
 800d910:	4603      	mov	r3, r0
 800d912:	83fb      	strh	r3, [r7, #30]
 800d914:	460b      	mov	r3, r1
 800d916:	83bb      	strh	r3, [r7, #28]
 800d918:	4633      	mov	r3, r6
 800d91a:	76fb      	strb	r3, [r7, #27]
 800d91c:	4613      	mov	r3, r2
 800d91e:	76bb      	strb	r3, [r7, #26]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d920:	2300      	movs	r3, #0
 800d922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	int16_t  i            = 0;
 800d926:	2300      	movs	r3, #0
 800d928:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  lb            = 0;
 800d92c:	2300      	movs	r3, #0
 800d92e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	int64_t VL53LX_p_018        = 0;
 800d932:	f04f 0200 	mov.w	r2, #0
 800d936:	f04f 0300 	mov.w	r3, #0
 800d93a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int64_t event_sum     = 0;
 800d93e:	f04f 0200 	mov.w	r2, #0
 800d942:	f04f 0300 	mov.w	r3, #0
 800d946:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	int64_t weighted_sum  = 0;
 800d94a:	f04f 0200 	mov.w	r2, #0
 800d94e:	f04f 0300 	mov.w	r3, #0
 800d952:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800d956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d95c:	601a      	str	r2, [r3, #0]

	if (VL53LX_p_030 != 0)
 800d95e:	7efb      	ldrb	r3, [r7, #27]
 800d960:	2b00      	cmp	r3, #0
 800d962:	f000 808b 	beq.w	800da7c <VL53LX_f_020+0x178>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d966:	8bfb      	ldrh	r3, [r7, #30]
 800d968:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d96c:	e07f      	b.n	800da6e <VL53LX_f_020+0x16a>

		if (lb < 0)
 800d96e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800d972:	2b00      	cmp	r3, #0
 800d974:	da08      	bge.n	800d988 <VL53LX_f_020+0x84>
			i = lb + (int16_t)VL53LX_p_030;
 800d976:	7efb      	ldrb	r3, [r7, #27]
 800d978:	b29a      	uxth	r2, r3
 800d97a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d97e:	4413      	add	r3, r2
 800d980:	b29b      	uxth	r3, r3
 800d982:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d986:	e009      	b.n	800d99c <VL53LX_f_020+0x98>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800d988:	f9b7 1044 	ldrsh.w	r1, [r7, #68]	; 0x44
 800d98c:	7efa      	ldrb	r2, [r7, #27]
 800d98e:	fb91 f3f2 	sdiv	r3, r1, r2
 800d992:	fb02 f303 	mul.w	r3, r2, r3
 800d996:	1acb      	subs	r3, r1, r3
 800d998:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800d99c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	db5d      	blt.n	800da60 <VL53LX_f_020+0x15c>
 800d9a4:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d9a8:	2b17      	cmp	r3, #23
 800d9aa:	dc59      	bgt.n	800da60 <VL53LX_f_020+0x15c>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800d9ac:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d9b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d9b2:	3306      	adds	r3, #6
 800d9b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	ea4f 71e0 	mov.w	r1, r0, asr #31
				(int64_t)pbins->VL53LX_p_028;
 800d9be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	ea4f 73e2 	mov.w	r3, r2, asr #31
			VL53LX_p_018 =
 800d9ca:	1a86      	subs	r6, r0, r2
 800d9cc:	613e      	str	r6, [r7, #16]
 800d9ce:	eb61 0303 	sbc.w	r3, r1, r3
 800d9d2:	617b      	str	r3, [r7, #20]
 800d9d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d9d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800d9dc:	7ebb      	ldrb	r3, [r7, #26]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d00b      	beq.n	800d9fa <VL53LX_f_020+0xf6>
 800d9e2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d9e6:	2a00      	cmp	r2, #0
 800d9e8:	f173 0300 	sbcs.w	r3, r3, #0
 800d9ec:	da05      	bge.n	800d9fa <VL53LX_f_020+0xf6>
				VL53LX_p_018 = 0;
 800d9ee:	f04f 0200 	mov.w	r2, #0
 800d9f2:	f04f 0300 	mov.w	r3, #0
 800d9f6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			event_sum += VL53LX_p_018;
 800d9fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d9fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800da02:	1886      	adds	r6, r0, r2
 800da04:	60be      	str	r6, [r7, #8]
 800da06:	eb41 0303 	adc.w	r3, r1, r3
 800da0a:	60fb      	str	r3, [r7, #12]
 800da0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800da10:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800da14:	f9b7 0044 	ldrsh.w	r0, [r7, #68]	; 0x44
 800da18:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800da1c:	f04f 0200 	mov.w	r2, #0
 800da20:	f04f 0300 	mov.w	r3, #0
 800da24:	02cb      	lsls	r3, r1, #11
 800da26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800da2a:	02c2      	lsls	r2, r0, #11
 800da2c:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 800da30:	f143 0900 	adc.w	r9, r3, #0
 800da34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da36:	fb09 f203 	mul.w	r2, r9, r3
 800da3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da3c:	fb08 f303 	mul.w	r3, r8, r3
 800da40:	441a      	add	r2, r3
 800da42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da44:	fba3 0108 	umull	r0, r1, r3, r8
 800da48:	1853      	adds	r3, r2, r1
 800da4a:	4619      	mov	r1, r3
			weighted_sum +=
 800da4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800da50:	1816      	adds	r6, r2, r0
 800da52:	603e      	str	r6, [r7, #0]
 800da54:	414b      	adcs	r3, r1
 800da56:	607b      	str	r3, [r7, #4]
 800da58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da5c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800da60:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800da64:	b29b      	uxth	r3, r3
 800da66:	3301      	adds	r3, #1
 800da68:	b29b      	uxth	r3, r3
 800da6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800da6e:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800da72:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800da76:	429a      	cmp	r2, r3
 800da78:	f77f af79 	ble.w	800d96e <VL53LX_f_020+0x6a>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800da7c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800da80:	2a01      	cmp	r2, #1
 800da82:	f173 0300 	sbcs.w	r3, r3, #0
 800da86:	db33      	blt.n	800daf0 <VL53LX_f_020+0x1ec>
		weighted_sum += do_division_s(event_sum, 2);
 800da88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800da8c:	0fd9      	lsrs	r1, r3, #31
 800da8e:	4608      	mov	r0, r1
 800da90:	f04f 0100 	mov.w	r1, #0
 800da94:	1884      	adds	r4, r0, r2
 800da96:	eb41 0503 	adc.w	r5, r1, r3
 800da9a:	f04f 0200 	mov.w	r2, #0
 800da9e:	f04f 0300 	mov.w	r3, #0
 800daa2:	0862      	lsrs	r2, r4, #1
 800daa4:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800daa8:	106b      	asrs	r3, r5, #1
 800daaa:	4610      	mov	r0, r2
 800daac:	4619      	mov	r1, r3
 800daae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800dab2:	eb12 0a00 	adds.w	sl, r2, r0
 800dab6:	eb43 0b01 	adc.w	fp, r3, r1
 800daba:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800dabe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800dac2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dac6:	f7f2 ffd1 	bl	8000a6c <__aeabi_ldivmod>
 800daca:	4602      	mov	r2, r0
 800dacc:	460b      	mov	r3, r1
 800dace:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		if (weighted_sum < 0)
 800dad2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800dad6:	2a00      	cmp	r2, #0
 800dad8:	f173 0300 	sbcs.w	r3, r3, #0
 800dadc:	da05      	bge.n	800daea <VL53LX_f_020+0x1e6>
			weighted_sum = 0;
 800dade:	f04f 0200 	mov.w	r2, #0
 800dae2:	f04f 0300 	mov.w	r3, #0
 800dae6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		*pphase = (uint32_t)weighted_sum;
 800daea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800daee:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800daf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	374c      	adds	r7, #76	; 0x4c
 800daf8:	46bd      	mov	sp, r7
 800dafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dafe <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800dafe:	b580      	push	{r7, lr}
 800db00:	b086      	sub	sp, #24
 800db02:	af00      	add	r7, sp, #0
 800db04:	60b9      	str	r1, [r7, #8]
 800db06:	607a      	str	r2, [r7, #4]
 800db08:	603b      	str	r3, [r7, #0]
 800db0a:	4603      	mov	r3, r0
 800db0c:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800db0e:	2300      	movs	r3, #0
 800db10:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800db12:	2300      	movs	r3, #0
 800db14:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800db16:	2300      	movs	r3, #0
 800db18:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800db1a:	7bfa      	ldrb	r2, [r7, #15]
 800db1c:	4613      	mov	r3, r2
 800db1e:	00db      	lsls	r3, r3, #3
 800db20:	4413      	add	r3, r2
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800db28:	687a      	ldr	r2, [r7, #4]
 800db2a:	4413      	add	r3, r2
 800db2c:	3304      	adds	r3, #4
 800db2e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800db30:	22ac      	movs	r2, #172	; 0xac
 800db32:	68b9      	ldr	r1, [r7, #8]
 800db34:	6a38      	ldr	r0, [r7, #32]
 800db36:	f007 f85d 	bl	8014bf4 <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800db40:	75fb      	strb	r3, [r7, #23]
 800db42:	e020      	b.n	800db86 <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	7dfa      	ldrb	r2, [r7, #23]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d304      	bcc.n	800db58 <VL53LX_f_011+0x5a>
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	791b      	ldrb	r3, [r3, #4]
 800db52:	7dfa      	ldrb	r2, [r7, #23]
 800db54:	429a      	cmp	r2, r3
 800db56:	d913      	bls.n	800db80 <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	78da      	ldrb	r2, [r3, #3]
 800db5c:	7dfb      	ldrb	r3, [r7, #23]
 800db5e:	fbb3 f1f2 	udiv	r1, r3, r2
 800db62:	fb02 f201 	mul.w	r2, r2, r1
 800db66:	1a9b      	subs	r3, r3, r2
 800db68:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800db6a:	6a3b      	ldr	r3, [r7, #32]
 800db6c:	7a9b      	ldrb	r3, [r3, #10]
 800db6e:	7d7a      	ldrb	r2, [r7, #21]
 800db70:	429a      	cmp	r2, r3
 800db72:	d205      	bcs.n	800db80 <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800db74:	7d7a      	ldrb	r2, [r7, #21]
 800db76:	6a3b      	ldr	r3, [r7, #32]
 800db78:	3206      	adds	r2, #6
 800db7a:	6839      	ldr	r1, [r7, #0]
 800db7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800db80:	7dfb      	ldrb	r3, [r7, #23]
 800db82:	3301      	adds	r3, #1
 800db84:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800db86:	7dfa      	ldrb	r2, [r7, #23]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800db8e:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800db94:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800db96:	429a      	cmp	r2, r3
 800db98:	dbd4      	blt.n	800db44 <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800db9a:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3718      	adds	r7, #24
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}

0800dba6 <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800dba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbaa:	b096      	sub	sp, #88	; 0x58
 800dbac:	af08      	add	r7, sp, #32
 800dbae:	4604      	mov	r4, r0
 800dbb0:	4608      	mov	r0, r1
 800dbb2:	4611      	mov	r1, r2
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	4623      	mov	r3, r4
 800dbb8:	73fb      	strb	r3, [r7, #15]
 800dbba:	4603      	mov	r3, r0
 800dbbc:	73bb      	strb	r3, [r7, #14]
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	737b      	strb	r3, [r7, #13]
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53LX_p_007    = 0;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53LX_p_032    = 0;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53LX_p_001    = 0;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800dbec:	2300      	movs	r3, #0
 800dbee:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800dbf8:	7b7b      	ldrb	r3, [r7, #13]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d106      	bne.n	800dc0c <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800dbfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dc00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc04:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800dc06:	f06f 030e 	mvn.w	r3, #14
 800dc0a:	e06f      	b.n	800dcec <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800dc0c:	7bfb      	ldrb	r3, [r7, #15]
 800dc0e:	7b7a      	ldrb	r2, [r7, #13]
 800dc10:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc14:	fb02 f201 	mul.w	r2, r2, r1
 800dc18:	1a9b      	subs	r3, r3, r2
 800dc1a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53LX_f_022(
 800dc1e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800dc22:	7b39      	ldrb	r1, [r7, #12]
 800dc24:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800dc28:	f107 0320 	add.w	r3, r7, #32
 800dc2c:	9301      	str	r3, [sp, #4]
 800dc2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dc32:	9300      	str	r3, [sp, #0]
 800dc34:	4613      	mov	r3, r2
 800dc36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc38:	f000 fda8 	bl	800e78c <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800dc3c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800dc40:	7b39      	ldrb	r1, [r7, #12]
 800dc42:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800dc46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc4a:	9301      	str	r3, [sp, #4]
 800dc4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dc50:	9300      	str	r3, [sp, #0]
 800dc52:	4613      	mov	r3, r2
 800dc54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc56:	f000 fd99 	bl	800e78c <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800dc5a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d00e      	beq.n	800dc80 <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800dc62:	f107 021c 	add.w	r2, r7, #28
 800dc66:	7b39      	ldrb	r1, [r7, #12]
 800dc68:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800dc6c:	f107 0314 	add.w	r3, r7, #20
 800dc70:	9301      	str	r3, [sp, #4]
 800dc72:	f107 0318 	add.w	r3, r7, #24
 800dc76:	9300      	str	r3, [sp, #0]
 800dc78:	4613      	mov	r3, r2
 800dc7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc7c:	f000 fd86 	bl	800e78c <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800dc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc82:	469c      	mov	ip, r3
 800dc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc86:	469e      	mov	lr, r3
 800dc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8a:	4698      	mov	r8, r3
 800dc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8e:	4619      	mov	r1, r3
 800dc90:	6a3b      	ldr	r3, [r7, #32]
 800dc92:	461c      	mov	r4, r3
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	461d      	mov	r5, r3
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	461e      	mov	r6, r3
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800dca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dca2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53LX_f_023(
 800dca6:	607b      	str	r3, [r7, #4]
 800dca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcaa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800dcae:	7bb8      	ldrb	r0, [r7, #14]
 800dcb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dcb2:	9207      	str	r2, [sp, #28]
 800dcb4:	9306      	str	r3, [sp, #24]
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	9205      	str	r2, [sp, #20]
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	9304      	str	r3, [sp, #16]
 800dcbe:	9603      	str	r6, [sp, #12]
 800dcc0:	9502      	str	r5, [sp, #8]
 800dcc2:	9401      	str	r4, [sp, #4]
 800dcc4:	9100      	str	r1, [sp, #0]
 800dcc6:	4643      	mov	r3, r8
 800dcc8:	4672      	mov	r2, lr
 800dcca:	4661      	mov	r1, ip
 800dccc:	f002 fee6 	bl	8010a9c <VL53LX_f_023>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800dcd6:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800dcda:	f113 0f0f 	cmn.w	r3, #15
 800dcde:	d103      	bne.n	800dce8 <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800dce0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dce6:	801a      	strh	r2, [r3, #0]


	return status;
 800dce8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3738      	adds	r7, #56	; 0x38
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dcf6 <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800dcf6:	b490      	push	{r4, r7}
 800dcf8:	b084      	sub	sp, #16
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	4604      	mov	r4, r0
 800dcfe:	4608      	mov	r0, r1
 800dd00:	4611      	mov	r1, r2
 800dd02:	461a      	mov	r2, r3
 800dd04:	4623      	mov	r3, r4
 800dd06:	71fb      	strb	r3, [r7, #7]
 800dd08:	4603      	mov	r3, r0
 800dd0a:	71bb      	strb	r3, [r7, #6]
 800dd0c:	460b      	mov	r3, r1
 800dd0e:	717b      	strb	r3, [r7, #5]
 800dd10:	4613      	mov	r3, r2
 800dd12:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800dd14:	2300      	movs	r3, #0
 800dd16:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800dd1c:	6a3b      	ldr	r3, [r7, #32]
 800dd1e:	79fa      	ldrb	r2, [r7, #7]
 800dd20:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800dd22:	6a3b      	ldr	r3, [r7, #32]
 800dd24:	2200      	movs	r2, #0
 800dd26:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	781a      	ldrb	r2, [r3, #0]
 800dd2c:	6a3b      	ldr	r3, [r7, #32]
 800dd2e:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	785a      	ldrb	r2, [r3, #1]
 800dd34:	6a3b      	ldr	r3, [r7, #32]
 800dd36:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	789a      	ldrb	r2, [r3, #2]
 800dd3c:	6a3b      	ldr	r3, [r7, #32]
 800dd3e:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	78da      	ldrb	r2, [r3, #3]
 800dd44:	6a3b      	ldr	r3, [r7, #32]
 800dd46:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800dd48:	69fb      	ldr	r3, [r7, #28]
 800dd4a:	791a      	ldrb	r2, [r3, #4]
 800dd4c:	6a3b      	ldr	r3, [r7, #32]
 800dd4e:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	795a      	ldrb	r2, [r3, #5]
 800dd54:	6a3b      	ldr	r3, [r7, #32]
 800dd56:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	791a      	ldrb	r2, [r3, #4]
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	1ad3      	subs	r3, r2, r3
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	3301      	adds	r3, #1
 800dd66:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800dd68:	6a3b      	ldr	r3, [r7, #32]
 800dd6a:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800dd6c:	69bb      	ldr	r3, [r7, #24]
 800dd6e:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800dd72:	6a3b      	ldr	r3, [r7, #32]
 800dd74:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	8c1a      	ldrh	r2, [r3, #32]
 800dd7a:	6a3b      	ldr	r3, [r7, #32]
 800dd7c:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800dd7e:	69fb      	ldr	r3, [r7, #28]
 800dd80:	695b      	ldr	r3, [r3, #20]
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	6a3b      	ldr	r3, [r7, #32]
 800dd86:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	699b      	ldr	r3, [r3, #24]
 800dd8c:	b29a      	uxth	r2, r3
 800dd8e:	6a3b      	ldr	r3, [r7, #32]
 800dd90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	69db      	ldr	r3, [r3, #28]
 800dd98:	b29a      	uxth	r2, r3
 800dd9a:	6a3b      	ldr	r3, [r7, #32]
 800dd9c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	461a      	mov	r2, r3
 800dda6:	6a3b      	ldr	r3, [r7, #32]
 800dda8:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800ddaa:	69fb      	ldr	r3, [r7, #28]
 800ddac:	691a      	ldr	r2, [r3, #16]
 800ddae:	6a3b      	ldr	r3, [r7, #32]
 800ddb0:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	689b      	ldr	r3, [r3, #8]
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	6a3b      	ldr	r3, [r7, #32]
 800ddba:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800ddbc:	69bb      	ldr	r3, [r7, #24]
 800ddbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ddc2:	6a3b      	ldr	r3, [r7, #32]
 800ddc4:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800ddc6:	6a3b      	ldr	r3, [r7, #32]
 800ddc8:	2213      	movs	r2, #19
 800ddca:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 800ddce:	887b      	ldrh	r3, [r7, #2]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d00a      	beq.n	800ddea <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800ddd4:	69fb      	ldr	r3, [r7, #28]
 800ddd6:	8c1b      	ldrh	r3, [r3, #32]
 800ddd8:	461a      	mov	r2, r3
 800ddda:	887b      	ldrh	r3, [r7, #2]
 800dddc:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d903      	bls.n	800ddea <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800dde2:	6a3b      	ldr	r3, [r7, #32]
 800dde4:	2206      	movs	r2, #6
 800dde6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800ddea:	79bb      	ldrb	r3, [r7, #6]
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	021b      	lsls	r3, r3, #8
 800ddf0:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800ddf2:	6a3b      	ldr	r3, [r7, #32]
 800ddf4:	8a9b      	ldrh	r3, [r3, #20]
 800ddf6:	89fa      	ldrh	r2, [r7, #14]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d205      	bcs.n	800de08 <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800ddfc:	6a3b      	ldr	r3, [r7, #32]
 800ddfe:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800de00:	89fb      	ldrh	r3, [r7, #14]
 800de02:	1ad3      	subs	r3, r2, r3
 800de04:	81fb      	strh	r3, [r7, #14]
 800de06:	e001      	b.n	800de0c <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800de08:	2300      	movs	r3, #0
 800de0a:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800de0c:	797b      	ldrb	r3, [r7, #5]
 800de0e:	b29b      	uxth	r3, r3
 800de10:	021b      	lsls	r3, r3, #8
 800de12:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800de1a:	89bb      	ldrh	r3, [r7, #12]
 800de1c:	4413      	add	r3, r2
 800de1e:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800de20:	6a3b      	ldr	r3, [r7, #32]
 800de22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800de26:	89fa      	ldrh	r2, [r7, #14]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d805      	bhi.n	800de38 <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800de2c:	6a3b      	ldr	r3, [r7, #32]
 800de2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800de32:	89ba      	ldrh	r2, [r7, #12]
 800de34:	429a      	cmp	r2, r3
 800de36:	d203      	bcs.n	800de40 <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800de38:	6a3b      	ldr	r3, [r7, #32]
 800de3a:	2205      	movs	r2, #5
 800de3c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 800de40:	bf00      	nop
 800de42:	3710      	adds	r7, #16
 800de44:	46bd      	mov	sp, r7
 800de46:	bc90      	pop	{r4, r7}
 800de48:	4770      	bx	lr

0800de4a <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800de4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de4c:	b08f      	sub	sp, #60	; 0x3c
 800de4e:	af06      	add	r7, sp, #24
 800de50:	60f8      	str	r0, [r7, #12]
 800de52:	60b9      	str	r1, [r7, #8]
 800de54:	607a      	str	r2, [r7, #4]
 800de56:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800de58:	2300      	movs	r3, #0
 800de5a:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800de5c:	2300      	movs	r3, #0
 800de5e:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800de60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de62:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800de66:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800de68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800de6a:	f7ff f879 	bl	800cf60 <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800de6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de70:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 800de74:	22ac      	movs	r2, #172	; 0xac
 800de76:	6839      	ldr	r1, [r7, #0]
 800de78:	4618      	mov	r0, r3
 800de7a:	f006 febb 	bl	8014bf4 <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	781a      	ldrb	r2, [r3, #0]
 800de82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de84:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	785a      	ldrb	r2, [r3, #1]
 800de8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de8c:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	789a      	ldrb	r2, [r3, #2]
 800de92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de94:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800de9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de9e:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800dea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dea2:	2200      	movs	r2, #0
 800dea4:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800dea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dea8:	2204      	movs	r2, #4
 800deaa:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800deac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800deae:	2200      	movs	r2, #0
 800deb0:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800deb2:	2300      	movs	r3, #0
 800deb4:	77bb      	strb	r3, [r7, #30]
 800deb6:	e008      	b.n	800deca <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800deb8:	7fbb      	ldrb	r3, [r7, #30]
 800deba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800debc:	005b      	lsls	r3, r3, #1
 800debe:	4413      	add	r3, r2
 800dec0:	2200      	movs	r2, #0
 800dec2:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800dec4:	7fbb      	ldrb	r3, [r7, #30]
 800dec6:	3301      	adds	r3, #1
 800dec8:	77bb      	strb	r3, [r7, #30]
 800deca:	7fbb      	ldrb	r3, [r7, #30]
 800decc:	2b04      	cmp	r3, #4
 800dece:	d9f3      	bls.n	800deb8 <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800ded0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ded2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7fe f8b9 	bl	800c04e <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800dee0:	461a      	mov	r2, r3
 800dee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dee4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800dee8:	4619      	mov	r1, r3
 800deea:	4610      	mov	r0, r2
 800deec:	f7fe f8ef 	bl	800c0ce <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800def0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800def2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800def6:	4618      	mov	r0, r3
 800def8:	f7fe fcb9 	bl	800c86e <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800defc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800defe:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800df02:	4618      	mov	r0, r3
 800df04:	f7fe f95d 	bl	800c1c2 <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d009      	beq.n	800df26 <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800df12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df14:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800df18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df1a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800df1e:	461a      	mov	r2, r3
 800df20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800df22:	f000 fd7b 	bl	800ea1c <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800df2e:	2300      	movs	r3, #0
 800df30:	77bb      	strb	r3, [r7, #30]
 800df32:	e01e      	b.n	800df72 <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800df34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d117      	bne.n	800df6c <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800df3c:	7fbb      	ldrb	r3, [r7, #30]
 800df3e:	68ba      	ldr	r2, [r7, #8]
 800df40:	3304      	adds	r3, #4
 800df42:	005b      	lsls	r3, r3, #1
 800df44:	4413      	add	r3, r2
 800df46:	8898      	ldrh	r0, [r3, #4]
 800df48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df4a:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800df4e:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800df50:	005b      	lsls	r3, r3, #1
 800df52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df54:	4413      	add	r3, r2
 800df56:	3304      	adds	r3, #4
 800df58:	9301      	str	r3, [sp, #4]
 800df5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df5c:	9300      	str	r3, [sp, #0]
 800df5e:	460b      	mov	r3, r1
 800df60:	68ba      	ldr	r2, [r7, #8]
 800df62:	68f9      	ldr	r1, [r7, #12]
 800df64:	f7fe fcce 	bl	800c904 <VL53LX_f_001>
 800df68:	4603      	mov	r3, r0
 800df6a:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800df6c:	7fbb      	ldrb	r3, [r7, #30]
 800df6e:	3301      	adds	r3, #1
 800df70:	77bb      	strb	r3, [r7, #30]
 800df72:	7fbb      	ldrb	r3, [r7, #30]
 800df74:	2b04      	cmp	r3, #4
 800df76:	d9dd      	bls.n	800df34 <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800df78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d11a      	bne.n	800dfb6 <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800df88:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 800df94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df96:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800df9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800df9c:	f502 7252 	add.w	r2, r2, #840	; 0x348
 800dfa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dfa2:	9102      	str	r1, [sp, #8]
 800dfa4:	9201      	str	r2, [sp, #4]
 800dfa6:	9300      	str	r3, [sp, #0]
 800dfa8:	462b      	mov	r3, r5
 800dfaa:	4622      	mov	r2, r4
 800dfac:	4631      	mov	r1, r6
 800dfae:	f7ff f850 	bl	800d052 <VL53LX_f_006>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800dfb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d104      	bne.n	800dfc8 <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800dfbe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dfc0:	f7ff f972 	bl	800d2a8 <VL53LX_f_007>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800dfc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d104      	bne.n	800dfda <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800dfd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dfd2:	f7ff f9b7 	bl	800d344 <VL53LX_f_008>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800dfda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d104      	bne.n	800dfec <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800dfe2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dfe4:	f7ff fa2c 	bl	800d440 <VL53LX_f_009>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800dfec:	2300      	movs	r3, #0
 800dfee:	77bb      	strb	r3, [r7, #30]
 800dff0:	e0a6      	b.n	800e140 <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800dff2:	7fba      	ldrb	r2, [r7, #30]
 800dff4:	4613      	mov	r3, r2
 800dff6:	00db      	lsls	r3, r3, #3
 800dff8:	4413      	add	r3, r2
 800dffa:	009b      	lsls	r3, r3, #2
 800dffc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800e000:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e002:	4413      	add	r3, r2
 800e004:	3304      	adds	r3, #4
 800e006:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800e008:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d109      	bne.n	800e024 <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800e010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e012:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800e016:	7fbb      	ldrb	r3, [r7, #30]
 800e018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7ff fb66 	bl	800d6ec <VL53LX_f_010>
 800e020:	4603      	mov	r3, r0
 800e022:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800e024:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d110      	bne.n	800e04e <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800e02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e02e:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800e032:	69bb      	ldr	r3, [r7, #24]
 800e034:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800e038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e03a:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800e03e:	7fb8      	ldrb	r0, [r7, #30]
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	4613      	mov	r3, r2
 800e044:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e046:	f7ff fd5a 	bl	800dafe <VL53LX_f_011>
 800e04a:	4603      	mov	r3, r0
 800e04c:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800e04e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d10d      	bne.n	800e072 <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800e056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e058:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800e05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e05e:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800e062:	7fb8      	ldrb	r0, [r7, #30]
 800e064:	9300      	str	r3, [sp, #0]
 800e066:	2300      	movs	r3, #0
 800e068:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e06a:	f7ff fd48 	bl	800dafe <VL53LX_f_011>
 800e06e:	4603      	mov	r3, r0
 800e070:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800e072:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d10d      	bne.n	800e096 <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800e07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e07c:	f503 7152 	add.w	r1, r3, #840	; 0x348
 800e080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e082:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800e086:	7fb8      	ldrb	r0, [r7, #30]
 800e088:	9300      	str	r3, [sp, #0]
 800e08a:	2300      	movs	r3, #0
 800e08c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e08e:	f7ff fd36 	bl	800dafe <VL53LX_f_011>
 800e092:	4603      	mov	r3, r0
 800e094:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800e096:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d109      	bne.n	800e0b2 <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800e09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0a0:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 800e0a4:	7fb8      	ldrb	r0, [r7, #30]
 800e0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e0aa:	f000 f8dd 	bl	800e268 <VL53LX_f_026>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800e0b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d108      	bne.n	800e0cc <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	8a19      	ldrh	r1, [r3, #16]
 800e0be:	7fb8      	ldrb	r0, [r7, #30]
 800e0c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0c4:	f000 f95c 	bl	800e380 <VL53LX_f_027>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800e0cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d124      	bne.n	800e11e <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	789d      	ldrb	r5, [r3, #2]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	7e1e      	ldrb	r6, [r3, #24]
 800e0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0de:	f893 c003 	ldrb.w	ip, [r3, #3]
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	f893 e006 	ldrb.w	lr, [r3, #6]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e0f0:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 800e0f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e0f6:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 800e0fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e0fc:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 800e100:	697c      	ldr	r4, [r7, #20]
 800e102:	3420      	adds	r4, #32
 800e104:	9404      	str	r4, [sp, #16]
 800e106:	9003      	str	r0, [sp, #12]
 800e108:	9102      	str	r1, [sp, #8]
 800e10a:	9201      	str	r2, [sp, #4]
 800e10c:	9300      	str	r3, [sp, #0]
 800e10e:	4673      	mov	r3, lr
 800e110:	4662      	mov	r2, ip
 800e112:	4631      	mov	r1, r6
 800e114:	4628      	mov	r0, r5
 800e116:	f7ff fd46 	bl	800dba6 <VL53LX_f_014>
 800e11a:	4603      	mov	r3, r0
 800e11c:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800e11e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d109      	bne.n	800e13a <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800e126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e128:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 800e12c:	7fb8      	ldrb	r0, [r7, #30]
 800e12e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e130:	2101      	movs	r1, #1
 800e132:	f7ff fb2e 	bl	800d792 <VL53LX_f_015>
 800e136:	4603      	mov	r3, r0
 800e138:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800e13a:	7fbb      	ldrb	r3, [r7, #30]
 800e13c:	3301      	adds	r3, #1
 800e13e:	77bb      	strb	r3, [r7, #30]
 800e140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e142:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800e146:	7fba      	ldrb	r2, [r7, #30]
 800e148:	429a      	cmp	r2, r3
 800e14a:	f4ff af52 	bcc.w	800dff2 <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800e14e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d107      	bne.n	800e166 <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	785b      	ldrb	r3, [r3, #1]
 800e15a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7ff fa41 	bl	800d5e4 <VL53LX_f_016>
 800e162:	4603      	mov	r3, r0
 800e164:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800e166:	2300      	movs	r3, #0
 800e168:	77bb      	strb	r3, [r7, #30]
 800e16a:	e071      	b.n	800e250 <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800e16c:	7fba      	ldrb	r2, [r7, #30]
 800e16e:	4613      	mov	r3, r2
 800e170:	00db      	lsls	r3, r3, #3
 800e172:	4413      	add	r3, r2
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800e17a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e17c:	4413      	add	r3, r2
 800e17e:	3304      	adds	r3, #4
 800e180:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800e182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e184:	7c9a      	ldrb	r2, [r3, #18]
 800e186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e188:	7c5b      	ldrb	r3, [r3, #17]
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d25c      	bcs.n	800e248 <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800e196:	429a      	cmp	r2, r3
 800e198:	dd57      	ble.n	800e24a <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800e19e:	2bff      	cmp	r3, #255	; 0xff
 800e1a0:	d053      	beq.n	800e24a <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800e1a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1a4:	7c9b      	ldrb	r3, [r3, #18]
 800e1a6:	461a      	mov	r2, r3
			prange_data =
 800e1a8:	234c      	movs	r3, #76	; 0x4c
 800e1aa:	fb03 f302 	mul.w	r3, r3, r2
 800e1ae:	3310      	adds	r3, #16
 800e1b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1b2:	4413      	add	r3, r2
 800e1b4:	3304      	adds	r3, #4
 800e1b6:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800e1b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d115      	bne.n	800e1ec <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800e1c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1c2:	7c98      	ldrb	r0, [r3, #18]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f893 1020 	ldrb.w	r1, [r3, #32]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	8b5d      	ldrh	r5, [r3, #26]
 800e1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1d6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800e1da:	693a      	ldr	r2, [r7, #16]
 800e1dc:	9202      	str	r2, [sp, #8]
 800e1de:	697a      	ldr	r2, [r7, #20]
 800e1e0:	9201      	str	r2, [sp, #4]
 800e1e2:	9300      	str	r3, [sp, #0]
 800e1e4:	462b      	mov	r3, r5
 800e1e6:	4622      	mov	r2, r4
 800e1e8:	f7ff fd85 	bl	800dcf6 <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800e1ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d115      	bne.n	800e220 <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800e1f4:	69bb      	ldr	r3, [r7, #24]
 800e1f6:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 800e20c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800e210:	9301      	str	r3, [sp, #4]
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	9300      	str	r3, [sp, #0]
 800e216:	4623      	mov	r3, r4
 800e218:	f000 fb11 	bl	800e83e <VL53LX_f_018>
 800e21c:	4603      	mov	r3, r0
 800e21e:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800e220:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d108      	bne.n	800e23a <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	8bd8      	ldrh	r0, [r3, #30]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800e232:	693a      	ldr	r2, [r7, #16]
 800e234:	4619      	mov	r1, r3
 800e236:	f000 fba7 	bl	800e988 <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800e23a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e23c:	7c9b      	ldrb	r3, [r3, #18]
 800e23e:	3301      	adds	r3, #1
 800e240:	b2da      	uxtb	r2, r3
 800e242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e244:	749a      	strb	r2, [r3, #18]
 800e246:	e000      	b.n	800e24a <VL53LX_f_025+0x400>
			continue;
 800e248:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800e24a:	7fbb      	ldrb	r3, [r7, #30]
 800e24c:	3301      	adds	r3, #1
 800e24e:	77bb      	strb	r3, [r7, #30]
 800e250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e252:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800e256:	7fba      	ldrb	r2, [r7, #30]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d387      	bcc.n	800e16c <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800e25c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e260:	4618      	mov	r0, r3
 800e262:	3724      	adds	r7, #36	; 0x24
 800e264:	46bd      	mov	sp, r7
 800e266:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e268 <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b08c      	sub	sp, #48	; 0x30
 800e26c:	af02      	add	r7, sp, #8
 800e26e:	60b9      	str	r1, [r7, #8]
 800e270:	607a      	str	r2, [r7, #4]
 800e272:	603b      	str	r3, [r7, #0]
 800e274:	4603      	mov	r3, r0
 800e276:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800e278:	2300      	movs	r3, #0
 800e27a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800e27e:	7bfa      	ldrb	r2, [r7, #15]
 800e280:	4613      	mov	r3, r2
 800e282:	00db      	lsls	r3, r3, #3
 800e284:	4413      	add	r3, r2
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	4413      	add	r3, r2
 800e290:	3304      	adds	r3, #4
 800e292:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800e294:	2300      	movs	r3, #0
 800e296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 800e29a:	2300      	movs	r3, #0
 800e29c:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	785a      	ldrb	r2, [r3, #1]
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	781a      	ldrb	r2, [r3, #0]
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	789a      	ldrb	r2, [r3, #2]
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800e2c2:	6a3b      	ldr	r3, [r7, #32]
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2ca:	e04d      	b.n	800e368 <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	78da      	ldrb	r2, [r3, #3]
 800e2d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e2d8:	fb02 f201 	mul.w	r2, r2, r1
 800e2dc:	1a9b      	subs	r3, r3, r2
 800e2de:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800e2e0:	6a3b      	ldr	r3, [r7, #32]
 800e2e2:	7999      	ldrb	r1, [r3, #6]
 800e2e4:	f107 0218 	add.w	r2, r7, #24
 800e2e8:	7ff8      	ldrb	r0, [r7, #31]
 800e2ea:	f107 0310 	add.w	r3, r7, #16
 800e2ee:	9301      	str	r3, [sp, #4]
 800e2f0:	f107 0314 	add.w	r3, r7, #20
 800e2f4:	9300      	str	r3, [sp, #0]
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	68ba      	ldr	r2, [r7, #8]
 800e2fa:	f000 fa47 	bl	800e78c <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800e2fe:	7ffb      	ldrb	r3, [r7, #31]
 800e300:	69ba      	ldr	r2, [r7, #24]
 800e302:	6839      	ldr	r1, [r7, #0]
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	440b      	add	r3, r1
 800e308:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800e30a:	7ffb      	ldrb	r3, [r7, #31]
 800e30c:	697a      	ldr	r2, [r7, #20]
 800e30e:	6839      	ldr	r1, [r7, #0]
 800e310:	3318      	adds	r3, #24
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	440b      	add	r3, r1
 800e316:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800e318:	7ffb      	ldrb	r3, [r7, #31]
 800e31a:	693a      	ldr	r2, [r7, #16]
 800e31c:	6839      	ldr	r1, [r7, #0]
 800e31e:	3330      	adds	r3, #48	; 0x30
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	440b      	add	r3, r1
 800e324:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800e326:	69ba      	ldr	r2, [r7, #24]
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	689a      	ldr	r2, [r3, #8]
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800e334:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800e336:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800e338:	6839      	ldr	r1, [r7, #0]
 800e33a:	3348      	adds	r3, #72	; 0x48
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	440b      	add	r3, r1
 800e340:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800e342:	697a      	ldr	r2, [r7, #20]
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	689a      	ldr	r2, [r3, #8]
 800e34c:	69bb      	ldr	r3, [r7, #24]
 800e34e:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800e350:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800e352:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800e354:	6839      	ldr	r1, [r7, #0]
 800e356:	3360      	adds	r3, #96	; 0x60
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	440b      	add	r3, r1
 800e35c:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800e35e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e362:	3301      	adds	r3, #1
 800e364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e368:	6a3b      	ldr	r3, [r7, #32]
 800e36a:	791b      	ldrb	r3, [r3, #4]
 800e36c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e370:	429a      	cmp	r2, r3
 800e372:	d9ab      	bls.n	800e2cc <VL53LX_f_026+0x64>
	}

	return status;
 800e374:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3728      	adds	r7, #40	; 0x28
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800e380:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e382:	b08f      	sub	sp, #60	; 0x3c
 800e384:	af06      	add	r7, sp, #24
 800e386:	60ba      	str	r2, [r7, #8]
 800e388:	607b      	str	r3, [r7, #4]
 800e38a:	4603      	mov	r3, r0
 800e38c:	73fb      	strb	r3, [r7, #15]
 800e38e:	460b      	mov	r3, r1
 800e390:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800e392:	2300      	movs	r3, #0
 800e394:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800e396:	2300      	movs	r3, #0
 800e398:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800e39a:	7bfa      	ldrb	r2, [r7, #15]
 800e39c:	4613      	mov	r3, r2
 800e39e:	00db      	lsls	r3, r3, #3
 800e3a0:	4413      	add	r3, r2
 800e3a2:	009b      	lsls	r3, r3, #2
 800e3a4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	4413      	add	r3, r2
 800e3ac:	3304      	adds	r3, #4
 800e3ae:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800e3bc:	69bb      	ldr	r3, [r7, #24]
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	77fb      	strb	r3, [r7, #31]
 800e3c2:	e0b9      	b.n	800e538 <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	78da      	ldrb	r2, [r3, #3]
 800e3c8:	7ffb      	ldrb	r3, [r7, #31]
 800e3ca:	fbb3 f1f2 	udiv	r1, r3, r2
 800e3ce:	fb02 f201 	mul.w	r2, r2, r1
 800e3d2:	1a9b      	subs	r3, r3, r2
 800e3d4:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800e3d6:	7ffb      	ldrb	r3, [r7, #31]
 800e3d8:	3301      	adds	r3, #1
 800e3da:	687a      	ldr	r2, [r7, #4]
 800e3dc:	78d2      	ldrb	r2, [r2, #3]
 800e3de:	fb93 f1f2 	sdiv	r1, r3, r2
 800e3e2:	fb02 f201 	mul.w	r2, r2, r1
 800e3e6:	1a9b      	subs	r3, r3, r2
 800e3e8:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	789b      	ldrb	r3, [r3, #2]
 800e3ee:	7dfa      	ldrb	r2, [r7, #23]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	f080 809e 	bcs.w	800e532 <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800e3fa:	7dba      	ldrb	r2, [r7, #22]
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	f080 8098 	bcs.w	800e532 <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800e402:	7dfb      	ldrb	r3, [r7, #23]
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	3348      	adds	r3, #72	; 0x48
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	4413      	add	r3, r2
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d10e      	bne.n	800e430 <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800e412:	7dfb      	ldrb	r3, [r7, #23]
 800e414:	68ba      	ldr	r2, [r7, #8]
 800e416:	3360      	adds	r3, #96	; 0x60
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	4413      	add	r3, r2
 800e41c:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d106      	bne.n	800e430 <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800e422:	7dfb      	ldrb	r3, [r7, #23]
 800e424:	68ba      	ldr	r2, [r7, #8]
 800e426:	4413      	add	r3, r2
 800e428:	2200      	movs	r2, #0
 800e42a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800e42e:	e043      	b.n	800e4b8 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800e430:	7dfb      	ldrb	r3, [r7, #23]
 800e432:	68ba      	ldr	r2, [r7, #8]
 800e434:	3348      	adds	r3, #72	; 0x48
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	4413      	add	r3, r2
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	db0e      	blt.n	800e45e <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800e440:	7dfb      	ldrb	r3, [r7, #23]
 800e442:	68ba      	ldr	r2, [r7, #8]
 800e444:	3360      	adds	r3, #96	; 0x60
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	4413      	add	r3, r2
 800e44a:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	db06      	blt.n	800e45e <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800e450:	7dfb      	ldrb	r3, [r7, #23]
 800e452:	68ba      	ldr	r2, [r7, #8]
 800e454:	4413      	add	r3, r2
 800e456:	2201      	movs	r2, #1
 800e458:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800e45c:	e02c      	b.n	800e4b8 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800e45e:	7dfb      	ldrb	r3, [r7, #23]
 800e460:	68ba      	ldr	r2, [r7, #8]
 800e462:	3348      	adds	r3, #72	; 0x48
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	4413      	add	r3, r2
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	da1e      	bge.n	800e4ac <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800e46e:	7dfb      	ldrb	r3, [r7, #23]
 800e470:	68ba      	ldr	r2, [r7, #8]
 800e472:	3360      	adds	r3, #96	; 0x60
 800e474:	009b      	lsls	r3, r3, #2
 800e476:	4413      	add	r3, r2
 800e478:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	db16      	blt.n	800e4ac <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800e47e:	7dbb      	ldrb	r3, [r7, #22]
 800e480:	68ba      	ldr	r2, [r7, #8]
 800e482:	3348      	adds	r3, #72	; 0x48
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4413      	add	r3, r2
 800e488:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	db0e      	blt.n	800e4ac <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800e48e:	7dbb      	ldrb	r3, [r7, #22]
 800e490:	68ba      	ldr	r2, [r7, #8]
 800e492:	3360      	adds	r3, #96	; 0x60
 800e494:	009b      	lsls	r3, r3, #2
 800e496:	4413      	add	r3, r2
 800e498:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	da06      	bge.n	800e4ac <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800e49e:	7dfb      	ldrb	r3, [r7, #23]
 800e4a0:	68ba      	ldr	r2, [r7, #8]
 800e4a2:	4413      	add	r3, r2
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800e4aa:	e005      	b.n	800e4b8 <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800e4ac:	7dfb      	ldrb	r3, [r7, #23]
 800e4ae:	68ba      	ldr	r2, [r7, #8]
 800e4b0:	4413      	add	r3, r2
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800e4b8:	7dfb      	ldrb	r3, [r7, #23]
 800e4ba:	68ba      	ldr	r2, [r7, #8]
 800e4bc:	4413      	add	r3, r2
 800e4be:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d035      	beq.n	800e532 <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800e4c6:	69bb      	ldr	r3, [r7, #24]
 800e4c8:	7ffa      	ldrb	r2, [r7, #31]
 800e4ca:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800e4cc:	7dfb      	ldrb	r3, [r7, #23]
 800e4ce:	68ba      	ldr	r2, [r7, #8]
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	4413      	add	r3, r2
 800e4d4:	685c      	ldr	r4, [r3, #4]
 800e4d6:	7dfb      	ldrb	r3, [r7, #23]
 800e4d8:	68ba      	ldr	r2, [r7, #8]
 800e4da:	3318      	adds	r3, #24
 800e4dc:	009b      	lsls	r3, r3, #2
 800e4de:	4413      	add	r3, r2
 800e4e0:	685d      	ldr	r5, [r3, #4]
 800e4e2:	7dfb      	ldrb	r3, [r7, #23]
 800e4e4:	68ba      	ldr	r2, [r7, #8]
 800e4e6:	3330      	adds	r3, #48	; 0x30
 800e4e8:	009b      	lsls	r3, r3, #2
 800e4ea:	4413      	add	r3, r2
 800e4ec:	685e      	ldr	r6, [r3, #4]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	689b      	ldr	r3, [r3, #8]
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	78d2      	ldrb	r2, [r2, #3]
 800e4f6:	69b9      	ldr	r1, [r7, #24]
 800e4f8:	3118      	adds	r1, #24
 800e4fa:	7ff8      	ldrb	r0, [r7, #31]
 800e4fc:	9105      	str	r1, [sp, #20]
 800e4fe:	9204      	str	r2, [sp, #16]
 800e500:	9303      	str	r3, [sp, #12]
 800e502:	2300      	movs	r3, #0
 800e504:	9302      	str	r3, [sp, #8]
 800e506:	2300      	movs	r3, #0
 800e508:	9301      	str	r3, [sp, #4]
 800e50a:	2300      	movs	r3, #0
 800e50c:	9300      	str	r3, [sp, #0]
 800e50e:	4633      	mov	r3, r6
 800e510:	462a      	mov	r2, r5
 800e512:	4621      	mov	r1, r4
 800e514:	f000 f81c 	bl	800e550 <VL53LX_f_028>
 800e518:	4603      	mov	r3, r0
 800e51a:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800e51c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e520:	f113 0f0f 	cmn.w	r3, #15
 800e524:	d105      	bne.n	800e532 <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800e526:	7dfb      	ldrb	r3, [r7, #23]
 800e528:	68ba      	ldr	r2, [r7, #8]
 800e52a:	4413      	add	r3, r2
 800e52c:	2200      	movs	r2, #0
 800e52e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800e532:	7ffb      	ldrb	r3, [r7, #31]
 800e534:	3301      	adds	r3, #1
 800e536:	77fb      	strb	r3, [r7, #31]
 800e538:	69bb      	ldr	r3, [r7, #24]
 800e53a:	791b      	ldrb	r3, [r3, #4]
 800e53c:	7ffa      	ldrb	r2, [r7, #31]
 800e53e:	429a      	cmp	r2, r3
 800e540:	f4ff af40 	bcc.w	800e3c4 <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800e544:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3724      	adds	r7, #36	; 0x24
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e550 <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800e550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e554:	b09e      	sub	sp, #120	; 0x78
 800e556:	af00      	add	r7, sp, #0
 800e558:	64b9      	str	r1, [r7, #72]	; 0x48
 800e55a:	647a      	str	r2, [r7, #68]	; 0x44
 800e55c:	643b      	str	r3, [r7, #64]	; 0x40
 800e55e:	4603      	mov	r3, r0
 800e560:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e564:	23f1      	movs	r3, #241	; 0xf1
 800e566:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800e56a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e56e:	f04f 0300 	mov.w	r3, #0
 800e572:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800e576:	f04f 0200 	mov.w	r2, #0
 800e57a:	f04f 0300 	mov.w	r3, #0
 800e57e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  half_b_minus_amb = 0;
 800e582:	f04f 0200 	mov.w	r2, #0
 800e586:	f04f 0300 	mov.w	r3, #0
 800e58a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800e58e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e590:	4618      	mov	r0, r3
 800e592:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800e596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e59a:	461a      	mov	r2, r3
 800e59c:	ea4f 73e2 	mov.w	r3, r2, asr #31
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800e5a0:	ebb0 0802 	subs.w	r8, r0, r2
 800e5a4:	eb61 0903 	sbc.w	r9, r1, r3
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800e5a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e5b0:	ebb8 0a02 	subs.w	sl, r8, r2
 800e5b4:	eb69 0b03 	sbc.w	fp, r9, r3
 800e5b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e5bc:	461a      	mov	r2, r3
 800e5be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e5c2:	ebba 0402 	subs.w	r4, sl, r2
 800e5c6:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800e5ca:	f04f 0200 	mov.w	r2, #0
 800e5ce:	f04f 0300 	mov.w	r3, #0
 800e5d2:	032b      	lsls	r3, r5, #12
 800e5d4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800e5d8:	0322      	lsls	r2, r4, #12
 800e5da:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800e5de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800e5e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	ea4f 73e2 	mov.w	r3, r2, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800e5f0:	1a84      	subs	r4, r0, r2
 800e5f2:	63bc      	str	r4, [r7, #56]	; 0x38
 800e5f4:	eb61 0303 	sbc.w	r3, r1, r3
 800e5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800e5fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e5fe:	461a      	mov	r2, r3
 800e600:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e604:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800e608:	4621      	mov	r1, r4
 800e60a:	1a89      	subs	r1, r1, r2
 800e60c:	6339      	str	r1, [r7, #48]	; 0x30
 800e60e:	4629      	mov	r1, r5
 800e610:	eb61 0303 	sbc.w	r3, r1, r3
 800e614:	637b      	str	r3, [r7, #52]	; 0x34
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800e616:	f04f 0200 	mov.w	r2, #0
 800e61a:	f04f 0300 	mov.w	r3, #0
 800e61e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e622:	4629      	mov	r1, r5
 800e624:	030b      	lsls	r3, r1, #12
 800e626:	4621      	mov	r1, r4
 800e628:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800e62c:	4621      	mov	r1, r4
 800e62e:	030a      	lsls	r2, r1, #12
 800e630:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	if (half_b_minus_amb != 0) {
 800e634:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e638:	4313      	orrs	r3, r2
 800e63a:	f000 809c 	beq.w	800e776 <VL53LX_f_028+0x226>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800e63e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800e642:	f04f 0000 	mov.w	r0, #0
 800e646:	f04f 0100 	mov.w	r1, #0
 800e64a:	0319      	lsls	r1, r3, #12
 800e64c:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800e650:	0310      	lsls	r0, r2, #12
 800e652:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e656:	1814      	adds	r4, r2, r0
 800e658:	623c      	str	r4, [r7, #32]
 800e65a:	414b      	adcs	r3, r1
 800e65c:	627b      	str	r3, [r7, #36]	; 0x24
 800e65e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e662:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800e666:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e66a:	1891      	adds	r1, r2, r2
 800e66c:	61b9      	str	r1, [r7, #24]
 800e66e:	415b      	adcs	r3, r3
 800e670:	61fb      	str	r3, [r7, #28]
 800e672:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e676:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e67a:	f7f2 f9f7 	bl	8000a6c <__aeabi_ldivmod>
 800e67e:	4602      	mov	r2, r0
 800e680:	460b      	mov	r3, r1
 800e682:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		mean_phase  +=  2048;
 800e686:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e68a:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800e68e:	6139      	str	r1, [r7, #16]
 800e690:	f143 0300 	adc.w	r3, r3, #0
 800e694:	617b      	str	r3, [r7, #20]
 800e696:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e69a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase  += (4096 * (int64_t)bin);
 800e69e:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 800e6a2:	f04f 0100 	mov.w	r1, #0
 800e6a6:	f04f 0200 	mov.w	r2, #0
 800e6aa:	f04f 0300 	mov.w	r3, #0
 800e6ae:	030b      	lsls	r3, r1, #12
 800e6b0:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 800e6b4:	0302      	lsls	r2, r0, #12
 800e6b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e6ba:	1884      	adds	r4, r0, r2
 800e6bc:	60bc      	str	r4, [r7, #8]
 800e6be:	eb41 0303 	adc.w	r3, r1, r3
 800e6c2:	60fb      	str	r3, [r7, #12]
 800e6c4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e6c8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800e6cc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e6d0:	1c51      	adds	r1, r2, #1
 800e6d2:	62b9      	str	r1, [r7, #40]	; 0x28
 800e6d4:	f143 0300 	adc.w	r3, r3, #0
 800e6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6da:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800e6de:	462b      	mov	r3, r5
 800e6e0:	0fdb      	lsrs	r3, r3, #31
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	f04f 0300 	mov.w	r3, #0
 800e6e8:	4621      	mov	r1, r4
 800e6ea:	1851      	adds	r1, r2, r1
 800e6ec:	6039      	str	r1, [r7, #0]
 800e6ee:	4629      	mov	r1, r5
 800e6f0:	eb43 0101 	adc.w	r1, r3, r1
 800e6f4:	6079      	str	r1, [r7, #4]
 800e6f6:	f04f 0200 	mov.w	r2, #0
 800e6fa:	f04f 0300 	mov.w	r3, #0
 800e6fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e702:	4621      	mov	r1, r4
 800e704:	084a      	lsrs	r2, r1, #1
 800e706:	4629      	mov	r1, r5
 800e708:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800e70c:	4629      	mov	r1, r5
 800e70e:	104b      	asrs	r3, r1, #1
 800e710:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		if (mean_phase  < 0)
 800e714:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e718:	2a00      	cmp	r2, #0
 800e71a:	f173 0300 	sbcs.w	r3, r3, #0
 800e71e:	da05      	bge.n	800e72c <VL53LX_f_028+0x1dc>
			mean_phase = 0;
 800e720:	f04f 0200 	mov.w	r2, #0
 800e724:	f04f 0300 	mov.w	r3, #0
 800e728:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800e72c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e730:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e734:	f04f 0100 	mov.w	r1, #0
 800e738:	4290      	cmp	r0, r2
 800e73a:	eb71 0303 	sbcs.w	r3, r1, r3
 800e73e:	da05      	bge.n	800e74c <VL53LX_f_028+0x1fc>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800e740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e744:	f04f 0300 	mov.w	r3, #0
 800e748:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		mean_phase32 = (int32_t)mean_phase;
 800e74c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e74e:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800e750:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800e754:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800e756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e758:	fb93 f1f2 	sdiv	r1, r3, r2
 800e75c:	fb02 f201 	mul.w	r2, r2, r1
 800e760:	1a9b      	subs	r3, r3, r2
 800e762:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase = mean_phase32;
 800e764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e766:	461a      	mov	r2, r3
 800e768:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e76c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		status = VL53LX_ERROR_NONE;
 800e770:	2300      	movs	r3, #0
 800e772:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	}

	*pmean_phase = (uint32_t)mean_phase;
 800e776:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e778:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e77c:	601a      	str	r2, [r3, #0]

	return status;
 800e77e:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800e782:	4618      	mov	r0, r3
 800e784:	3778      	adds	r7, #120	; 0x78
 800e786:	46bd      	mov	sp, r7
 800e788:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e78c <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800e78c:	b480      	push	{r7}
 800e78e:	b087      	sub	sp, #28
 800e790:	af00      	add	r7, sp, #0
 800e792:	60ba      	str	r2, [r7, #8]
 800e794:	607b      	str	r3, [r7, #4]
 800e796:	4603      	mov	r3, r0
 800e798:	73fb      	strb	r3, [r7, #15]
 800e79a:	460b      	mov	r3, r1
 800e79c:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800e7ac:	7bfa      	ldrb	r2, [r7, #15]
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	3206      	adds	r2, #6
 800e7b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e7b6:	6a3b      	ldr	r3, [r7, #32]
 800e7b8:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800e7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7bc:	2200      	movs	r2, #0
 800e7be:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	75fb      	strb	r3, [r7, #23]
 800e7c4:	e02f      	b.n	800e826 <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800e7c6:	7bfa      	ldrb	r2, [r7, #15]
 800e7c8:	7dfb      	ldrb	r3, [r7, #23]
 800e7ca:	4413      	add	r3, r2
 800e7cc:	68ba      	ldr	r2, [r7, #8]
 800e7ce:	7a92      	ldrb	r2, [r2, #10]
 800e7d0:	441a      	add	r2, r3
 800e7d2:	7bbb      	ldrb	r3, [r7, #14]
 800e7d4:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800e7d6:	68ba      	ldr	r2, [r7, #8]
 800e7d8:	7a92      	ldrb	r2, [r2, #10]
 800e7da:	fb93 f1f2 	sdiv	r1, r3, r2
 800e7de:	fb02 f201 	mul.w	r2, r2, r1
 800e7e2:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800e7e4:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800e7e6:	7dfa      	ldrb	r2, [r7, #23]
 800e7e8:	7bbb      	ldrb	r3, [r7, #14]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d20a      	bcs.n	800e804 <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681a      	ldr	r2, [r3, #0]
 800e7f2:	7db9      	ldrb	r1, [r7, #22]
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	3106      	adds	r1, #6
 800e7f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e7fc:	441a      	add	r2, r3
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	601a      	str	r2, [r3, #0]
 800e802:	e00d      	b.n	800e820 <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800e804:	7dfa      	ldrb	r2, [r7, #23]
 800e806:	7bbb      	ldrb	r3, [r7, #14]
 800e808:	429a      	cmp	r2, r3
 800e80a:	d909      	bls.n	800e820 <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800e80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	7db9      	ldrb	r1, [r7, #22]
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	3106      	adds	r1, #6
 800e816:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e81a:	441a      	add	r2, r3
 800e81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81e:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800e820:	7dfb      	ldrb	r3, [r7, #23]
 800e822:	3301      	adds	r3, #1
 800e824:	75fb      	strb	r3, [r7, #23]
 800e826:	7bbb      	ldrb	r3, [r7, #14]
 800e828:	005a      	lsls	r2, r3, #1
 800e82a:	7dfb      	ldrb	r3, [r7, #23]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	daca      	bge.n	800e7c6 <VL53LX_f_022+0x3a>
	}
}
 800e830:	bf00      	nop
 800e832:	bf00      	nop
 800e834:	371c      	adds	r7, #28
 800e836:	46bd      	mov	sp, r7
 800e838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83c:	4770      	bx	lr

0800e83e <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800e83e:	b580      	push	{r7, lr}
 800e840:	b088      	sub	sp, #32
 800e842:	af00      	add	r7, sp, #0
 800e844:	60ba      	str	r2, [r7, #8]
 800e846:	461a      	mov	r2, r3
 800e848:	4603      	mov	r3, r0
 800e84a:	81fb      	strh	r3, [r7, #14]
 800e84c:	460b      	mov	r3, r1
 800e84e:	81bb      	strh	r3, [r7, #12]
 800e850:	4613      	mov	r3, r2
 800e852:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800e854:	2300      	movs	r3, #0
 800e856:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800e858:	2300      	movs	r3, #0
 800e85a:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800e85c:	2300      	movs	r3, #0
 800e85e:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800e860:	2300      	movs	r3, #0
 800e862:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800e864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e866:	89fa      	ldrh	r2, [r7, #14]
 800e868:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800e86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86c:	89ba      	ldrh	r2, [r7, #12]
 800e86e:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800e870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e872:	68ba      	ldr	r2, [r7, #8]
 800e874:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800e876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e878:	88fa      	ldrh	r2, [r7, #6]
 800e87a:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800e87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87e:	8a5b      	ldrh	r3, [r3, #18]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d101      	bne.n	800e888 <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e884:	23f1      	movs	r3, #241	; 0xf1
 800e886:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800e888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88a:	699b      	ldr	r3, [r3, #24]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d101      	bne.n	800e894 <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e890:	23f1      	movs	r3, #241	; 0xf1
 800e892:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800e894:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d16f      	bne.n	800e97c <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800e89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89e:	8a5b      	ldrh	r3, [r3, #18]
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7fd faa6 	bl	800bdf2 <VL53LX_calc_pll_period_us>
 800e8a6:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800e8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8aa:	699b      	ldr	r3, [r3, #24]
 800e8ac:	3301      	adds	r3, #1
 800e8ae:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800e8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b2:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8bc:	6978      	ldr	r0, [r7, #20]
 800e8be:	f7fd faaf 	bl	800be20 <VL53LX_duration_maths>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c6:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800e8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ca:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800e8cc:	0119      	lsls	r1, r3, #4
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8d4:	6978      	ldr	r0, [r7, #20]
 800e8d6:	f7fd faa3 	bl	800be20 <VL53LX_duration_maths>
 800e8da:	4602      	mov	r2, r0
 800e8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8de:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800e8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e6:	69db      	ldr	r3, [r3, #28]
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	4610      	mov	r0, r2
 800e8ec:	f7fd fd01 	bl	800c2f2 <VL53LX_rate_maths>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f6:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800e8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fe:	6a1b      	ldr	r3, [r3, #32]
 800e900:	4619      	mov	r1, r3
 800e902:	4610      	mov	r0, r2
 800e904:	f7fd fcf5 	bl	800c2f2 <VL53LX_rate_maths>
 800e908:	4603      	mov	r3, r0
 800e90a:	461a      	mov	r2, r3
 800e90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90e:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800e910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800e914:	461a      	mov	r2, r3
 800e916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e918:	6a1b      	ldr	r3, [r3, #32]
 800e91a:	4619      	mov	r1, r3
 800e91c:	4610      	mov	r0, r2
 800e91e:	f7fd fce8 	bl	800c2f2 <VL53LX_rate_maths>
 800e922:	4603      	mov	r3, r0
 800e924:	461a      	mov	r2, r3
 800e926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e928:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800e92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800e92e:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800e930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e932:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 800e934:	4413      	add	r3, r2
 800e936:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800e938:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d905      	bls.n	800e94c <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800e940:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e944:	69ba      	ldr	r2, [r7, #24]
 800e946:	fbb2 f3f3 	udiv	r3, r2, r3
 800e94a:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800e94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e94e:	8ada      	ldrh	r2, [r3, #22]
 800e950:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e954:	69b9      	ldr	r1, [r7, #24]
 800e956:	2006      	movs	r0, #6
 800e958:	f7fd fd10 	bl	800c37c <VL53LX_rate_per_spad_maths>
 800e95c:	4603      	mov	r3, r0
 800e95e:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800e960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e962:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800e964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e966:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96a:	8ad9      	ldrh	r1, [r3, #22]
 800e96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96e:	69db      	ldr	r3, [r3, #28]
 800e970:	461a      	mov	r2, r3
 800e972:	f7fd faaf 	bl	800bed4 <VL53LX_events_per_spad_maths>
 800e976:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800e978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97a:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800e97c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e980:	4618      	mov	r0, r3
 800e982:	3720      	adds	r7, #32
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800e988:	b590      	push	{r4, r7, lr}
 800e98a:	b085      	sub	sp, #20
 800e98c:	af02      	add	r7, sp, #8
 800e98e:	4603      	mov	r3, r0
 800e990:	603a      	str	r2, [r7, #0]
 800e992:	80fb      	strh	r3, [r7, #6]
 800e994:	460b      	mov	r3, r1
 800e996:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	8a58      	ldrh	r0, [r3, #18]
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	8a9c      	ldrh	r4, [r3, #20]
 800e9a4:	88fb      	ldrh	r3, [r7, #6]
 800e9a6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e9aa:	9201      	str	r2, [sp, #4]
 800e9ac:	9300      	str	r3, [sp, #0]
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	4622      	mov	r2, r4
 800e9b2:	f7fd fd17 	bl	800c3e4 <VL53LX_range_maths>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	8a58      	ldrh	r0, [r3, #18]
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	8a9c      	ldrh	r4, [r3, #20]
 800e9ce:	88fb      	ldrh	r3, [r7, #6]
 800e9d0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e9d4:	9201      	str	r2, [sp, #4]
 800e9d6:	9300      	str	r3, [sp, #0]
 800e9d8:	2300      	movs	r3, #0
 800e9da:	4622      	mov	r2, r4
 800e9dc:	f7fd fd02 	bl	800c3e4 <VL53LX_range_maths>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	8a58      	ldrh	r0, [r3, #18]
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	8a9c      	ldrh	r4, [r3, #20]
 800e9f8:	88fb      	ldrh	r3, [r7, #6]
 800e9fa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e9fe:	9201      	str	r2, [sp, #4]
 800ea00:	9300      	str	r3, [sp, #0]
 800ea02:	2300      	movs	r3, #0
 800ea04:	4622      	mov	r2, r4
 800ea06:	f7fd fced 	bl	800c3e4 <VL53LX_range_maths>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 800ea14:	bf00      	nop
 800ea16:	370c      	adds	r7, #12
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd90      	pop	{r4, r7, pc}

0800ea1c <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b086      	sub	sp, #24
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800ea30:	2300      	movs	r3, #0
 800ea32:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800ea34:	2300      	movs	r3, #0
 800ea36:	757b      	strb	r3, [r7, #21]





	memcpy(
 800ea38:	22ac      	movs	r2, #172	; 0xac
 800ea3a:	68b9      	ldr	r1, [r7, #8]
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f006 f8d9 	bl	8014bf4 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800ea42:	2300      	movs	r3, #0
 800ea44:	75fb      	strb	r3, [r7, #23]
 800ea46:	e008      	b.n	800ea5a <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800ea48:	7dfa      	ldrb	r2, [r7, #23]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	3206      	adds	r2, #6
 800ea4e:	2100      	movs	r1, #0
 800ea50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800ea54:	7dfb      	ldrb	r3, [r7, #23]
 800ea56:	3301      	adds	r3, #1
 800ea58:	75fb      	strb	r3, [r7, #23]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	7a5b      	ldrb	r3, [r3, #9]
 800ea5e:	7dfa      	ldrb	r2, [r7, #23]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d3f1      	bcc.n	800ea48 <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800ea64:	68f9      	ldr	r1, [r7, #12]
 800ea66:	68b8      	ldr	r0, [r7, #8]
 800ea68:	f000 f878 	bl	800eb5c <VL53LX_f_030>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	7a9a      	ldrb	r2, [r3, #10]
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	7a9b      	ldrb	r3, [r3, #10]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d203      	bcs.n	800ea84 <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	7a9b      	ldrb	r3, [r3, #10]
 800ea80:	75bb      	strb	r3, [r7, #22]
 800ea82:	e002      	b.n	800ea8a <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	7a9b      	ldrb	r3, [r3, #10]
 800ea88:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	75fb      	strb	r3, [r7, #23]
 800ea8e:	e05c      	b.n	800eb4a <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800ea90:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	db0f      	blt.n	800eab8 <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800ea98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800eaa2:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800eaa4:	68ba      	ldr	r2, [r7, #8]
 800eaa6:	7a92      	ldrb	r2, [r2, #10]
 800eaa8:	b252      	sxtb	r2, r2
 800eaaa:	fb93 f1f2 	sdiv	r1, r3, r2
 800eaae:	fb02 f201 	mul.w	r2, r2, r1
 800eab2:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800eab4:	757b      	strb	r3, [r7, #21]
 800eab6:	e013      	b.n	800eae0 <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	7a9b      	ldrb	r3, [r3, #10]
 800eabc:	b25b      	sxtb	r3, r3
 800eabe:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800eac0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eac4:	4619      	mov	r1, r3
 800eac6:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800eaca:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800eacc:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800eace:	68ba      	ldr	r2, [r7, #8]
 800ead0:	7a92      	ldrb	r2, [r2, #10]
 800ead2:	b252      	sxtb	r2, r2
 800ead4:	fb93 f1f2 	sdiv	r1, r3, r2
 800ead8:	fb02 f201 	mul.w	r2, r2, r1
 800eadc:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800eade:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800eae0:	7d7b      	ldrb	r3, [r7, #21]
 800eae2:	461a      	mov	r2, r3
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	3206      	adds	r2, #6
 800eae8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800eaec:	7df9      	ldrb	r1, [r7, #23]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	3106      	adds	r1, #6
 800eaf2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	dd12      	ble.n	800eb20 <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800eafa:	7d7b      	ldrb	r3, [r7, #21]
 800eafc:	461a      	mov	r2, r3
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	3206      	adds	r2, #6
 800eb02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800eb06:	7df9      	ldrb	r1, [r7, #23]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	3106      	adds	r1, #6
 800eb0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800eb10:	7d79      	ldrb	r1, [r7, #21]
 800eb12:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800eb14:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	1d82      	adds	r2, r0, #6
 800eb1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800eb1e:	e006      	b.n	800eb2e <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800eb20:	7d7b      	ldrb	r3, [r7, #21]
 800eb22:	461a      	mov	r2, r3
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	3206      	adds	r2, #6
 800eb28:	2100      	movs	r1, #0
 800eb2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800eb2e:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800eb30:	7d7b      	ldrb	r3, [r7, #21]
 800eb32:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	3206      	adds	r2, #6
 800eb38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	1d82      	adds	r2, r0, #6
 800eb40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800eb44:	7dfb      	ldrb	r3, [r7, #23]
 800eb46:	3301      	adds	r3, #1
 800eb48:	75fb      	strb	r3, [r7, #23]
 800eb4a:	7dfa      	ldrb	r2, [r7, #23]
 800eb4c:	7dbb      	ldrb	r3, [r7, #22]
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d39e      	bcc.n	800ea90 <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800eb52:	bf00      	nop
 800eb54:	bf00      	nop
 800eb56:	3718      	adds	r7, #24
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b086      	sub	sp, #24
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800eb66:	2300      	movs	r3, #0
 800eb68:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800eb72:	2300      	movs	r3, #0
 800eb74:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7fd fd0b 	bl	800c598 <VL53LX_decode_vcsel_period>
 800eb82:	4603      	mov	r3, r0
	period = 2048 *
 800eb84:	02db      	lsls	r3, r3, #11
 800eb86:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d00a      	beq.n	800eba4 <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 800eb94:	68ba      	ldr	r2, [r7, #8]
 800eb96:	fbb3 f2f2 	udiv	r2, r3, r2
 800eb9a:	68b9      	ldr	r1, [r7, #8]
 800eb9c:	fb01 f202 	mul.w	r2, r1, r2
 800eba0:	1a9b      	subs	r3, r3, r2
 800eba2:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800ebaa:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800ebac:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800ebae:	1ad3      	subs	r3, r2, r3
 800ebb0:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	dd09      	ble.n	800ebcc <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	da01      	bge.n	800ebc6 <VL53LX_f_030+0x6a>
 800ebc2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ebc6:	12db      	asrs	r3, r3, #11
 800ebc8:	75fb      	strb	r3, [r7, #23]
 800ebca:	e008      	b.n	800ebde <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	da01      	bge.n	800ebda <VL53LX_f_030+0x7e>
 800ebd6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800ebda:	12db      	asrs	r3, r3, #11
 800ebdc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800ebde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3718      	adds	r7, #24
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}

0800ebea <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800ebea:	b580      	push	{r7, lr}
 800ebec:	b08e      	sub	sp, #56	; 0x38
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	6078      	str	r0, [r7, #4]
 800ebf2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 800ec00:	2300      	movs	r3, #0
 800ec02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 800ec06:	2300      	movs	r3, #0
 800ec08:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 800ec10:	2300      	movs	r3, #0
 800ec12:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 800ec16:	2300      	movs	r3, #0
 800ec18:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800ec1c:	22ac      	movs	r2, #172	; 0xac
 800ec1e:	6879      	ldr	r1, [r7, #4]
 800ec20:	6838      	ldr	r0, [r7, #0]
 800ec22:	f005 ffe7 	bl	8014bf4 <memcpy>


	podata->VL53LX_p_021 = 0;
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ec32:	e00a      	b.n	800ec4a <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800ec34:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec38:	683a      	ldr	r2, [r7, #0]
 800ec3a:	4413      	add	r3, r2
 800ec3c:	2210      	movs	r2, #16
 800ec3e:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800ec40:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec44:	3301      	adds	r3, #1
 800ec46:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ec4a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec4e:	2b05      	cmp	r3, #5
 800ec50:	d9f0      	bls.n	800ec34 <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800ec52:	2300      	movs	r3, #0
 800ec54:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ec58:	e00b      	b.n	800ec72 <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800ec5a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	3206      	adds	r2, #6
 800ec62:	2100      	movs	r1, #0
 800ec64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800ec68:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	7a5b      	ldrb	r3, [r3, #9]
 800ec76:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	d3ed      	bcc.n	800ec5a <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800ec7e:	2300      	movs	r3, #0
 800ec80:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ec84:	e014      	b.n	800ecb0 <VL53LX_f_031+0xc6>
		bin_initial_index[lc] = 0x00;
 800ec86:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec8a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ec8e:	4413      	add	r3, r2
 800ec90:	2200      	movs	r2, #0
 800ec92:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800ec96:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec9a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ec9e:	4413      	add	r3, r2
 800eca0:	2200      	movs	r2, #0
 800eca2:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800eca6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ecaa:	3301      	adds	r3, #1
 800ecac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ecb0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ecb4:	2b0f      	cmp	r3, #15
 800ecb6:	d9e6      	bls.n	800ec86 <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ecc4:	e06c      	b.n	800eda0 <VL53LX_f_031+0x1b6>

		bin_cfg = pidata->bin_seq[lc];
 800ecc6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ecca:	687a      	ldr	r2, [r7, #4]
 800eccc:	4413      	add	r3, r2
 800ecce:	7b1b      	ldrb	r3, [r3, #12]
 800ecd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800ecd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ecd8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ecdc:	4413      	add	r3, r2
 800ecde:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d116      	bne.n	800ed14 <VL53LX_f_031+0x12a>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800ece6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ecea:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ecee:	0092      	lsls	r2, r2, #2
 800ecf0:	b2d2      	uxtb	r2, r2
 800ecf2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ecf6:	440b      	add	r3, r1
 800ecf8:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800ecfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed00:	683a      	ldr	r2, [r7, #0]
 800ed02:	4413      	add	r3, r2
 800ed04:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800ed08:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800ed0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed0e:	3301      	adds	r3, #1
 800ed10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800ed14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ed18:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ed1c:	441a      	add	r2, r3
 800ed1e:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800ed22:	3201      	adds	r2, #1
 800ed24:	b2d2      	uxtb	r2, r2
 800ed26:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ed2a:	440b      	add	r3, r1
 800ed2c:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800ed30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ed34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ed38:	4413      	add	r3, r2
 800ed3a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ed3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 800ed42:	2300      	movs	r3, #0
 800ed44:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800ed48:	e021      	b.n	800ed8e <VL53LX_f_031+0x1a4>
			podata->bin_data[VL53LX_p_032+i] +=
 800ed4a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800ed4e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ed52:	441a      	add	r2, r3
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	3206      	adds	r2, #6
 800ed58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800ed5c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ed60:	009a      	lsls	r2, r3, #2
 800ed62:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ed66:	441a      	add	r2, r3
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	3206      	adds	r2, #6
 800ed6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800ed70:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 800ed74:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800ed78:	4402      	add	r2, r0
 800ed7a:	4419      	add	r1, r3
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	3206      	adds	r2, #6
 800ed80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800ed84:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ed88:	3301      	adds	r3, #1
 800ed8a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800ed8e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ed92:	2b03      	cmp	r3, #3
 800ed94:	d9d9      	bls.n	800ed4a <VL53LX_f_031+0x160>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800ed96:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800eda0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eda4:	2b05      	cmp	r3, #5
 800eda6:	d98e      	bls.n	800ecc6 <VL53LX_f_031+0xdc>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800eda8:	2300      	movs	r3, #0
 800edaa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800edae:	e023      	b.n	800edf8 <VL53LX_f_031+0x20e>

		bin_cfg = podata->bin_seq[lc];
 800edb0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800edb4:	683a      	ldr	r2, [r7, #0]
 800edb6:	4413      	add	r3, r2
 800edb8:	7b1b      	ldrb	r3, [r3, #12]
 800edba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800edbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800edc2:	2b0f      	cmp	r3, #15
 800edc4:	d80d      	bhi.n	800ede2 <VL53LX_f_031+0x1f8>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800edc6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 800edca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 800edce:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800edd2:	440a      	add	r2, r1
 800edd4:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800edd8:	683a      	ldr	r2, [r7, #0]
 800edda:	4413      	add	r3, r2
 800eddc:	460a      	mov	r2, r1
 800edde:	749a      	strb	r2, [r3, #18]
 800ede0:	e005      	b.n	800edee <VL53LX_f_031+0x204>
		else
			podata->bin_rep[lc] = 0;
 800ede2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ede6:	683a      	ldr	r2, [r7, #0]
 800ede8:	4413      	add	r3, r2
 800edea:	2200      	movs	r2, #0
 800edec:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800edee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800edf2:	3301      	adds	r3, #1
 800edf4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800edf8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800edfc:	2b05      	cmp	r3, #5
 800edfe:	d9d7      	bls.n	800edb0 <VL53LX_f_031+0x1c6>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800ee00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee04:	009b      	lsls	r3, r3, #2
 800ee06:	b2da      	uxtb	r2, r3
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ee12:	e052      	b.n	800eeba <VL53LX_f_031+0x2d0>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800ee14:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ee18:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ee1c:	4413      	add	r3, r2
 800ee1e:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800ee22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 800ee24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	dd42      	ble.n	800eeb0 <VL53LX_f_031+0x2c6>

			VL53LX_p_032 = bin_initial_index[lc];
 800ee2a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ee2e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ee32:	4413      	add	r3, r2
 800ee34:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ee38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800ee42:	e031      	b.n	800eea8 <VL53LX_f_031+0x2be>
				podata->bin_data[VL53LX_p_032+i] +=
 800ee44:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800ee48:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ee4c:	441a      	add	r2, r3
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	3206      	adds	r2, #6
 800ee52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800ee56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee58:	0fda      	lsrs	r2, r3, #31
 800ee5a:	4413      	add	r3, r2
 800ee5c:	105b      	asrs	r3, r3, #1
 800ee5e:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800ee60:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800ee64:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ee68:	441a      	add	r2, r3
 800ee6a:	4401      	add	r1, r0
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	3206      	adds	r2, #6
 800ee70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800ee74:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800ee78:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ee7c:	441a      	add	r2, r3
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	3206      	adds	r2, #6
 800ee82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ee86:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800ee8a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ee8e:	441a      	add	r2, r3
 800ee90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee92:	fb91 f1f3 	sdiv	r1, r1, r3
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	3206      	adds	r2, #6
 800ee9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800ee9e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800eea2:	3301      	adds	r3, #1
 800eea4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800eea8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800eeac:	2b03      	cmp	r3, #3
 800eeae:	d9c9      	bls.n	800ee44 <VL53LX_f_031+0x25a>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800eeb0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800eeba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eebe:	2b0f      	cmp	r3, #15
 800eec0:	d9a8      	bls.n	800ee14 <VL53LX_f_031+0x22a>
		}
	}



	podata->number_of_ambient_bins = 0;
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	2200      	movs	r2, #0
 800eec6:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800eec8:	7bfb      	ldrb	r3, [r7, #15]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d102      	bne.n	800eed4 <VL53LX_f_031+0x2ea>
		(bin_repeat_count[15] > 0))
 800eece:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d002      	beq.n	800eeda <VL53LX_f_031+0x2f0>
		podata->number_of_ambient_bins = 4;
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	2204      	movs	r2, #4
 800eed8:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800eeda:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3738      	adds	r7, #56	; 0x38
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}

0800eee6 <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800eee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eee8:	b0cb      	sub	sp, #300	; 0x12c
 800eeea:	af06      	add	r7, sp, #24
 800eeec:	f107 040c 	add.w	r4, r7, #12
 800eef0:	6020      	str	r0, [r4, #0]
 800eef2:	f107 0008 	add.w	r0, r7, #8
 800eef6:	6001      	str	r1, [r0, #0]
 800eef8:	1d39      	adds	r1, r7, #4
 800eefa:	600a      	str	r2, [r1, #0]
 800eefc:	463a      	mov	r2, r7
 800eefe:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ef00:	2300      	movs	r3, #0
 800ef02:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800ef06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800ef0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ef12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800ef16:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800ef1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800ef1e:	f107 0318 	add.w	r3, r7, #24
 800ef22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800ef26:	2300      	movs	r3, #0
 800ef28:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 800ef30:	2300      	movs	r3, #0
 800ef32:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 800ef36:	2300      	movs	r3, #0
 800ef38:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800ef42:	2300      	movs	r3, #0
 800ef44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800ef4e:	463b      	mov	r3, r7
 800ef50:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800ef54:	6818      	ldr	r0, [r3, #0]
 800ef56:	f7ff fe48 	bl	800ebea <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800ef5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef5e:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800ef60:	b299      	uxth	r1, r3
 800ef62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef66:	3348      	adds	r3, #72	; 0x48
 800ef68:	461a      	mov	r2, r3
 800ef6a:	2000      	movs	r0, #0
 800ef6c:	f7fd fb65 	bl	800c63a <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800ef70:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ef74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ef78:	3348      	adds	r3, #72	; 0x48
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	4610      	mov	r0, r2
 800ef7e:	f7fd fb1e 	bl	800c5be <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800ef82:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d12d      	bne.n	800efe6 <VL53LX_hist_process_data+0x100>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800ef8a:	1d3b      	adds	r3, r7, #4
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d027      	beq.n	800efe6 <VL53LX_hist_process_data+0x100>
		status =
		VL53LX_f_032(
 800ef96:	1d3b      	adds	r3, r7, #4
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800ef9c:	1d3b      	adds	r3, r7, #4
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 800efa4:	1d3b      	adds	r3, r7, #4
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 800efac:	463b      	mov	r3, r7
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800efb4:	463a      	mov	r2, r7
 800efb6:	6812      	ldr	r2, [r2, #0]
 800efb8:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 800efbc:	4639      	mov	r1, r7
 800efbe:	6809      	ldr	r1, [r1, #0]
 800efc0:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 800efc4:	f107 0014 	add.w	r0, r7, #20
 800efc8:	9004      	str	r0, [sp, #16]
 800efca:	9103      	str	r1, [sp, #12]
 800efcc:	9202      	str	r2, [sp, #8]
 800efce:	9301      	str	r3, [sp, #4]
 800efd0:	2300      	movs	r3, #0
 800efd2:	9300      	str	r3, [sp, #0]
 800efd4:	2300      	movs	r3, #0
 800efd6:	4632      	mov	r2, r6
 800efd8:	4629      	mov	r1, r5
 800efda:	4620      	mov	r0, r4
 800efdc:	f002 f8bf 	bl	801115e <VL53LX_f_032>
 800efe0:	4603      	mov	r3, r0
 800efe2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800efe6:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800efea:	2b00      	cmp	r3, #0
 800efec:	d112      	bne.n	800f014 <VL53LX_hist_process_data+0x12e>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800efee:	1d3b      	adds	r3, r7, #4
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d00c      	beq.n	800f014 <VL53LX_hist_process_data+0x12e>
		status =
			VL53LX_f_033(
 800effa:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800effe:	697a      	ldr	r2, [r7, #20]
 800f000:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f004:	3348      	adds	r3, #72	; 0x48
 800f006:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800f00a:	f002 faab 	bl	8011564 <VL53LX_f_033>
 800f00e:	4603      	mov	r3, r0
 800f010:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800f014:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f018:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 800f01c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f020:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 800f024:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f028:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53LX_p_004 =
 800f02c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f030:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800f034:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f038:	2200      	movs	r2, #0
 800f03a:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 800f03e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f042:	2200      	movs	r2, #0
 800f044:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 800f048:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f04c:	2200      	movs	r2, #0
 800f04e:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 800f052:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f056:	2200      	movs	r2, #0
 800f058:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 800f05c:	2300      	movs	r3, #0
 800f05e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800f062:	1d3b      	adds	r3, r7, #4
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d002      	beq.n	800f074 <VL53LX_hist_process_data+0x18e>
		xtalk_enable = 1;
 800f06e:	2301      	movs	r3, #1
 800f070:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800f074:	2300      	movs	r3, #0
 800f076:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800f07a:	e0ef      	b.n	800f25c <VL53LX_hist_process_data+0x376>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800f07c:	1d3b      	adds	r3, r7, #4
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800f084:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53LX_f_025(
 800f088:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f08c:	3348      	adds	r3, #72	; 0x48
 800f08e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800f092:	7814      	ldrb	r4, [r2, #0]
 800f094:	1d3a      	adds	r2, r7, #4
 800f096:	f107 0108 	add.w	r1, r7, #8
 800f09a:	f107 000c 	add.w	r0, r7, #12
 800f09e:	9405      	str	r4, [sp, #20]
 800f0a0:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800f0a4:	9404      	str	r4, [sp, #16]
 800f0a6:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 800f0aa:	9403      	str	r4, [sp, #12]
 800f0ac:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800f0b0:	9402      	str	r4, [sp, #8]
 800f0b2:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800f0b6:	9401      	str	r4, [sp, #4]
 800f0b8:	9300      	str	r3, [sp, #0]
 800f0ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f0be:	6812      	ldr	r2, [r2, #0]
 800f0c0:	6809      	ldr	r1, [r1, #0]
 800f0c2:	6800      	ldr	r0, [r0, #0]
 800f0c4:	f7fe fec1 	bl	800de4a <VL53LX_f_025>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800f0ce:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	f040 80bc 	bne.w	800f250 <VL53LX_hist_process_data+0x36a>
 800f0d8:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	f040 80b7 	bne.w	800f250 <VL53LX_hist_process_data+0x36a>
			continue;



		if (presults->active_results == 0) {
 800f0e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f0e6:	7c9b      	ldrb	r3, [r3, #18]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d110      	bne.n	800f10e <VL53LX_hist_process_data+0x228>
			pdata = &(presults->VL53LX_p_003[0]);
 800f0ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f0f0:	3314      	adds	r3, #20
 800f0f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 800f0f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f0fa:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 800f0fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f100:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 800f102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f106:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 800f108:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f10c:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800f10e:	1d3b      	adds	r3, r7, #4
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800f114:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800f118:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	461a      	mov	r2, r3
 800f120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f124:	fb02 f303 	mul.w	r3, r2, r3
 800f128:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 800f12c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f130:	011b      	lsls	r3, r3, #4
 800f132:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 800f136:	2300      	movs	r3, #0
 800f138:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800f13c:	e07f      	b.n	800f23e <VL53LX_hist_process_data+0x358>

			pdata = &(presults->VL53LX_p_003[t]);
 800f13e:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800f142:	224c      	movs	r2, #76	; 0x4c
 800f144:	fb02 f303 	mul.w	r3, r2, r3
 800f148:	3310      	adds	r3, #16
 800f14a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800f14e:	4413      	add	r3, r2
 800f150:	3304      	adds	r3, #4
 800f152:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 800f156:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f15a:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800f15e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f162:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800f166:	429a      	cmp	r2, r3
 800f168:	dd0e      	ble.n	800f188 <VL53LX_hist_process_data+0x2a2>
				delta_mm =
					pdata->max_range_mm -
 800f16a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f16e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800f172:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 800f174:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f178:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800f17c:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800f17e:	1ad3      	subs	r3, r2, r3
 800f180:	b29b      	uxth	r3, r3
				delta_mm =
 800f182:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800f186:	e00d      	b.n	800f1a4 <VL53LX_hist_process_data+0x2be>
			else
				delta_mm =
					pdata->min_range_mm -
 800f188:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f18c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800f190:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 800f192:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f196:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800f19a:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 800f19c:	1ad3      	subs	r3, r2, r3
 800f19e:	b29b      	uxth	r3, r3
				delta_mm =
 800f1a0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800f1a4:	1d3b      	adds	r3, r7, #4
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 800f1aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800f1ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f1ba:	fb02 f303 	mul.w	r3, r2, r3
 800f1be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 800f1c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f1c6:	015b      	lsls	r3, r3, #5
 800f1c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 800f1cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f1d0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800f1d4:	1d3b      	adds	r3, r7, #4
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	dd29      	ble.n	800f234 <VL53LX_hist_process_data+0x34e>
			pdata->median_range_mm  <
 800f1e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f1e4:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800f1e8:	1d3b      	adds	r3, r7, #4
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	da1f      	bge.n	800f234 <VL53LX_hist_process_data+0x34e>
			pdata->VL53LX_p_009 <
 800f1f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800f1fa:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d918      	bls.n	800f234 <VL53LX_hist_process_data+0x34e>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800f202:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f206:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800f208:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 800f20a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f20e:	4293      	cmp	r3, r2
 800f210:	d910      	bls.n	800f234 <VL53LX_hist_process_data+0x34e>
			delta_mm <
 800f212:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800f216:	1d3a      	adds	r2, r7, #4
 800f218:	6812      	ldr	r2, [r2, #0]
 800f21a:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800f21c:	4293      	cmp	r3, r2
 800f21e:	da09      	bge.n	800f234 <VL53LX_hist_process_data+0x34e>



				memcpy(
					&(presults->xmonitor),
 800f220:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f224:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 800f228:	224c      	movs	r2, #76	; 0x4c
 800f22a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800f22e:	4618      	mov	r0, r3
 800f230:	f005 fce0 	bl	8014bf4 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 800f234:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800f238:	3301      	adds	r3, #1
 800f23a:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800f23e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f242:	7c9b      	ldrb	r3, [r3, #18]
 800f244:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 800f248:	429a      	cmp	r2, r3
 800f24a:	f4ff af78 	bcc.w	800f13e <VL53LX_hist_process_data+0x258>
 800f24e:	e000      	b.n	800f252 <VL53LX_hist_process_data+0x36c>
			continue;
 800f250:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800f252:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800f256:	3301      	adds	r3, #1
 800f258:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800f25c:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800f260:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800f264:	429a      	cmp	r2, r3
 800f266:	f67f af09 	bls.w	800f07c <VL53LX_hist_process_data+0x196>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800f26a:	1d3b      	adds	r3, r7, #4
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800f272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 800f276:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800f280:	46bd      	mov	sp, r7
 800f282:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f284 <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b086      	sub	sp, #24
 800f288:	af00      	add	r7, sp, #0
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	460b      	mov	r3, r1
 800f28e:	607a      	str	r2, [r7, #4]
 800f290:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f292:	2300      	movs	r3, #0
 800f294:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 800f296:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d104      	bne.n	800f2a8 <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 800f29e:	68f8      	ldr	r0, [r7, #12]
 800f2a0:	f7f9 fe88 	bl	8008fb4 <VL53LX_disable_firmware>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 800f2a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d104      	bne.n	800f2ba <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 800f2b0:	68f8      	ldr	r0, [r7, #12]
 800f2b2:	f7f9 feb0 	bl	8009016 <VL53LX_enable_powerforce>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 800f2ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d105      	bne.n	800f2ce <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 800f2c2:	21fa      	movs	r1, #250	; 0xfa
 800f2c4:	68f8      	ldr	r0, [r7, #12]
 800f2c6:	f002 fb9d 	bl	8011a04 <VL53LX_WaitUs>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 800f2ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d107      	bne.n	800f2e6 <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	f240 7181 	movw	r1, #1921	; 0x781
 800f2dc:	68f8      	ldr	r0, [r7, #12]
 800f2de:	f002 fa9d 	bl	801181c <VL53LX_WrByte>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800f2e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d107      	bne.n	800f2fe <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 800f2ee:	2205      	movs	r2, #5
 800f2f0:	f240 6183 	movw	r1, #1667	; 0x683
 800f2f4:	68f8      	ldr	r0, [r7, #12]
 800f2f6:	f002 fa91 	bl	801181c <VL53LX_WrByte>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 800f2fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d105      	bne.n	800f312 <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 800f306:	6879      	ldr	r1, [r7, #4]
 800f308:	68f8      	ldr	r0, [r7, #12]
 800f30a:	f002 fb7b 	bl	8011a04 <VL53LX_WaitUs>
 800f30e:	4603      	mov	r3, r0
 800f310:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 800f312:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d107      	bne.n	800f32a <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 800f31a:	2201      	movs	r2, #1
 800f31c:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800f320:	68f8      	ldr	r0, [r7, #12]
 800f322:	f002 fa7b 	bl	801181c <VL53LX_WrByte>
 800f326:	4603      	mov	r3, r0
 800f328:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 800f32a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d108      	bne.n	800f344 <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 800f332:	897b      	ldrh	r3, [r7, #10]
 800f334:	461a      	mov	r2, r3
 800f336:	f240 7184 	movw	r1, #1924	; 0x784
 800f33a:	68f8      	ldr	r0, [r7, #12]
 800f33c:	f002 fa98 	bl	8011870 <VL53LX_WrWord>
 800f340:	4603      	mov	r3, r0
 800f342:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 800f344:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f348:	4618      	mov	r0, r3
 800f34a:	3718      	adds	r7, #24
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b086      	sub	sp, #24
 800f354:	af00      	add	r7, sp, #0
 800f356:	60f8      	str	r0, [r7, #12]
 800f358:	607b      	str	r3, [r7, #4]
 800f35a:	460b      	mov	r3, r1
 800f35c:	72fb      	strb	r3, [r7, #11]
 800f35e:	4613      	mov	r3, r2
 800f360:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f362:	2300      	movs	r3, #0
 800f364:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 800f366:	2300      	movs	r3, #0
 800f368:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800f36a:	7afb      	ldrb	r3, [r7, #11]
 800f36c:	75bb      	strb	r3, [r7, #22]
 800f36e:	e041      	b.n	800f3f4 <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 800f370:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d108      	bne.n	800f38a <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 800f378:	7dbb      	ldrb	r3, [r7, #22]
 800f37a:	461a      	mov	r2, r3
 800f37c:	f240 7194 	movw	r1, #1940	; 0x794
 800f380:	68f8      	ldr	r0, [r7, #12]
 800f382:	f002 fa4b 	bl	801181c <VL53LX_WrByte>
 800f386:	4603      	mov	r3, r0
 800f388:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 800f38a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d107      	bne.n	800f3a2 <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 800f392:	2200      	movs	r2, #0
 800f394:	f240 7183 	movw	r1, #1923	; 0x783
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f002 fa3f 	bl	801181c <VL53LX_WrByte>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 800f3a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d105      	bne.n	800f3b6 <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 800f3aa:	2105      	movs	r1, #5
 800f3ac:	68f8      	ldr	r0, [r7, #12]
 800f3ae:	f002 fb29 	bl	8011a04 <VL53LX_WaitUs>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 800f3b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d107      	bne.n	800f3ce <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 800f3be:	2201      	movs	r2, #1
 800f3c0:	f240 7183 	movw	r1, #1923	; 0x783
 800f3c4:	68f8      	ldr	r0, [r7, #12]
 800f3c6:	f002 fa29 	bl	801181c <VL53LX_WrByte>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 800f3ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d108      	bne.n	800f3e8 <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 800f3d6:	2304      	movs	r3, #4
 800f3d8:	687a      	ldr	r2, [r7, #4]
 800f3da:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 800f3de:	68f8      	ldr	r0, [r7, #12]
 800f3e0:	f002 f9e6 	bl	80117b0 <VL53LX_ReadMulti>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	3304      	adds	r3, #4
 800f3ec:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800f3ee:	7dbb      	ldrb	r3, [r7, #22]
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	75bb      	strb	r3, [r7, #22]
 800f3f4:	7dba      	ldrb	r2, [r7, #22]
 800f3f6:	7af9      	ldrb	r1, [r7, #11]
 800f3f8:	7abb      	ldrb	r3, [r7, #10]
 800f3fa:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	dbb7      	blt.n	800f370 <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 800f400:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f404:	4618      	mov	r0, r3
 800f406:	3718      	adds	r7, #24
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f414:	2300      	movs	r3, #0
 800f416:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d107      	bne.n	800f430 <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 800f420:	2201      	movs	r2, #1
 800f422:	f240 7183 	movw	r1, #1923	; 0x783
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f002 f9f8 	bl	801181c <VL53LX_WrByte>
 800f42c:	4603      	mov	r3, r0
 800f42e:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800f430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d107      	bne.n	800f448 <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 800f438:	2200      	movs	r2, #0
 800f43a:	f240 7181 	movw	r1, #1921	; 0x781
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f002 f9ec 	bl	801181c <VL53LX_WrByte>
 800f444:	4603      	mov	r3, r0
 800f446:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 800f448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d104      	bne.n	800f45a <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f7f9 fdf2 	bl	800903a <VL53LX_disable_powerforce>
 800f456:	4603      	mov	r3, r0
 800f458:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 800f45a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d104      	bne.n	800f46c <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f7f9 fd94 	bl	8008f90 <VL53LX_enable_firmware>
 800f468:	4603      	mov	r3, r0
 800f46a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800f46c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800f470:	4618      	mov	r0, r3
 800f472:	3710      	adds	r7, #16
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}

0800f478 <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 800f478:	b480      	push	{r7}
 800f47a:	b087      	sub	sp, #28
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	4603      	mov	r3, r0
 800f480:	60b9      	str	r1, [r7, #8]
 800f482:	607a      	str	r2, [r7, #4]
 800f484:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f486:	2300      	movs	r3, #0
 800f488:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 800f48a:	2300      	movs	r3, #0
 800f48c:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800f48e:	89fb      	ldrh	r3, [r7, #14]
 800f490:	2b03      	cmp	r3, #3
 800f492:	d802      	bhi.n	800f49a <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f494:	f06f 0308 	mvn.w	r3, #8
 800f498:	e018      	b.n	800f4cc <VL53LX_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 800f49a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f49e:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	3302      	adds	r3, #2
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	8afa      	ldrh	r2, [r7, #22]
 800f4aa:	1ad3      	subs	r3, r2, r3
 800f4ac:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 800f4ae:	8afb      	ldrh	r3, [r7, #22]
 800f4b0:	2bff      	cmp	r3, #255	; 0xff
 800f4b2:	d901      	bls.n	800f4b8 <VL53LX_nvm_decode_optical_centre+0x40>
		tmp = 0;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 800f4b8:	8afb      	ldrh	r3, [r7, #22]
 800f4ba:	b2da      	uxtb	r2, r3
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	78da      	ldrb	r2, [r3, #3]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	705a      	strb	r2, [r3, #1]

	return status;
 800f4c8:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	371c      	adds	r7, #28
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d6:	4770      	bx	lr

0800f4d8 <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 800f4d8:	b590      	push	{r4, r7, lr}
 800f4da:	b087      	sub	sp, #28
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	4603      	mov	r3, r0
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
 800f4e4:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800f4f2:	89fb      	ldrh	r3, [r7, #14]
 800f4f4:	2b37      	cmp	r3, #55	; 0x37
 800f4f6:	d802      	bhi.n	800f4fe <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f4f8:	f06f 0308 	mvn.w	r3, #8
 800f4fc:	e03e      	b.n	800f57c <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800f4fe:	68b9      	ldr	r1, [r7, #8]
 800f500:	2002      	movs	r0, #2
 800f502:	f7f9 fc2b 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 800f506:	4603      	mov	r3, r0
 800f508:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	3302      	adds	r3, #2
 800f512:	4619      	mov	r1, r3
 800f514:	2002      	movs	r0, #2
 800f516:	f7f9 fc21 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 800f51a:	4603      	mov	r3, r0
 800f51c:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 800f526:	099b      	lsrs	r3, r3, #6
 800f528:	b29a      	uxth	r2, r3
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2219      	movs	r2, #25
 800f532:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2205      	movs	r2, #5
 800f538:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2205      	movs	r2, #5
 800f53e:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	3304      	adds	r3, #4
 800f544:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800f546:	2300      	movs	r3, #0
 800f548:	74fb      	strb	r3, [r7, #19]
 800f54a:	e012      	b.n	800f572 <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 800f54c:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 800f54e:	6979      	ldr	r1, [r7, #20]
 800f550:	2002      	movs	r0, #2
 800f552:	f7f9 fc03 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 800f556:	4603      	mov	r3, r0
 800f558:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 800f55a:	687a      	ldr	r2, [r7, #4]
 800f55c:	1d23      	adds	r3, r4, #4
 800f55e:	005b      	lsls	r3, r3, #1
 800f560:	4413      	add	r3, r2
 800f562:	460a      	mov	r2, r1
 800f564:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	3302      	adds	r3, #2
 800f56a:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800f56c:	7cfb      	ldrb	r3, [r7, #19]
 800f56e:	3301      	adds	r3, #1
 800f570:	74fb      	strb	r3, [r7, #19]
 800f572:	7cfb      	ldrb	r3, [r7, #19]
 800f574:	2b18      	cmp	r3, #24
 800f576:	d9e9      	bls.n	800f54c <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 800f578:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	371c      	adds	r7, #28
 800f580:	46bd      	mov	sp, r7
 800f582:	bd90      	pop	{r4, r7, pc}

0800f584 <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b086      	sub	sp, #24
 800f588:	af00      	add	r7, sp, #0
 800f58a:	4603      	mov	r3, r0
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	607a      	str	r2, [r7, #4]
 800f590:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f592:	2300      	movs	r3, #0
 800f594:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800f596:	89fb      	ldrh	r3, [r7, #14]
 800f598:	2b07      	cmp	r3, #7
 800f59a:	d802      	bhi.n	800f5a2 <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f59c:	f06f 0308 	mvn.w	r3, #8
 800f5a0:	e027      	b.n	800f5f2 <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800f5a2:	68b9      	ldr	r1, [r7, #8]
 800f5a4:	2002      	movs	r0, #2
 800f5a6:	f7f9 fbd9 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	3302      	adds	r3, #2
 800f5b6:	4619      	mov	r1, r3
 800f5b8:	2002      	movs	r0, #2
 800f5ba:	f7f9 fbcf 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	3304      	adds	r3, #4
 800f5ca:	4619      	mov	r1, r3
 800f5cc:	2002      	movs	r0, #2
 800f5ce:	f7f9 fbc5 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	3306      	adds	r3, #6
 800f5de:	4619      	mov	r1, r3
 800f5e0:	2002      	movs	r0, #2
 800f5e2:	f7f9 fbbb 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	80da      	strh	r2, [r3, #6]

	return status;
 800f5ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3718      	adds	r7, #24
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}

0800f5fa <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	b086      	sub	sp, #24
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	4603      	mov	r3, r0
 800f602:	60b9      	str	r1, [r7, #8]
 800f604:	607a      	str	r2, [r7, #4]
 800f606:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800f608:	2300      	movs	r3, #0
 800f60a:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800f60c:	89fb      	ldrh	r3, [r7, #14]
 800f60e:	2b0f      	cmp	r3, #15
 800f610:	d802      	bhi.n	800f618 <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800f612:	f06f 0308 	mvn.w	r3, #8
 800f616:	e04d      	b.n	800f6b4 <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800f618:	68b9      	ldr	r1, [r7, #8]
 800f61a:	2002      	movs	r0, #2
 800f61c:	f7f9 fb9e 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 800f620:	4603      	mov	r3, r0
 800f622:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	789a      	ldrb	r2, [r3, #2]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	78da      	ldrb	r2, [r3, #3]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	3304      	adds	r3, #4
 800f63c:	4619      	mov	r1, r3
 800f63e:	2002      	movs	r0, #2
 800f640:	f7f9 fb8c 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 800f644:	4603      	mov	r3, r0
 800f646:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	3306      	adds	r3, #6
 800f650:	4619      	mov	r1, r3
 800f652:	2002      	movs	r0, #2
 800f654:	f7f9 fb82 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 800f658:	4603      	mov	r3, r0
 800f65a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	3308      	adds	r3, #8
 800f664:	4619      	mov	r1, r3
 800f666:	2002      	movs	r0, #2
 800f668:	f7f9 fb78 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 800f66c:	4603      	mov	r3, r0
 800f66e:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	330a      	adds	r3, #10
 800f678:	4619      	mov	r1, r3
 800f67a:	2002      	movs	r0, #2
 800f67c:	f7f9 fb6e 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 800f680:	4603      	mov	r3, r0
 800f682:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	330c      	adds	r3, #12
 800f68c:	4619      	mov	r1, r3
 800f68e:	2002      	movs	r0, #2
 800f690:	f7f9 fb64 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 800f694:	4603      	mov	r3, r0
 800f696:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	330e      	adds	r3, #14
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	2002      	movs	r0, #2
 800f6a4:	f7f9 fb5a 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	81da      	strh	r2, [r3, #14]

	return status;
 800f6b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3718      	adds	r7, #24
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b086      	sub	sp, #24
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	607b      	str	r3, [r7, #4]
 800f6c6:	460b      	mov	r3, r1
 800f6c8:	72fb      	strb	r3, [r7, #11]
 800f6ca:	4613      	mov	r3, r2
 800f6cc:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800f6d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d106      	bne.n	800f6e8 <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 800f6da:	2232      	movs	r2, #50	; 0x32
 800f6dc:	2104      	movs	r1, #4
 800f6de:	68f8      	ldr	r0, [r7, #12]
 800f6e0:	f7ff fdd0 	bl	800f284 <VL53LX_nvm_enable>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 800f6e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d107      	bne.n	800f700 <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 800f6f0:	7aba      	ldrb	r2, [r7, #10]
 800f6f2:	7af9      	ldrb	r1, [r7, #11]
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	68f8      	ldr	r0, [r7, #12]
 800f6f8:	f7ff fe2a 	bl	800f350 <VL53LX_nvm_read>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 800f700:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d104      	bne.n	800f712 <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 800f708:	68f8      	ldr	r0, [r7, #12]
 800f70a:	f7ff fe7f 	bl	800f40c <VL53LX_nvm_disable>
 800f70e:	4603      	mov	r3, r0
 800f710:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 800f712:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f716:	4618      	mov	r0, r3
 800f718:	3718      	adds	r7, #24
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}

0800f71e <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 800f71e:	b580      	push	{r7, lr}
 800f720:	b084      	sub	sp, #16
 800f722:	af00      	add	r7, sp, #0
 800f724:	6078      	str	r0, [r7, #4]
 800f726:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f728:	2300      	movs	r3, #0
 800f72a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f72c:	f107 0308 	add.w	r3, r7, #8
 800f730:	2201      	movs	r2, #1
 800f732:	212e      	movs	r1, #46	; 0x2e
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f7ff ffc1 	bl	800f6bc <VL53LX_read_nvm_raw_data>
 800f73a:	4603      	mov	r3, r0
 800f73c:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f73e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d108      	bne.n	800f758 <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 800f746:	f107 0308 	add.w	r3, r7, #8
 800f74a:	683a      	ldr	r2, [r7, #0]
 800f74c:	4619      	mov	r1, r3
 800f74e:	2004      	movs	r0, #4
 800f750:	f7ff fe92 	bl	800f478 <VL53LX_nvm_decode_optical_centre>
 800f754:	4603      	mov	r3, r0
 800f756:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 800f758:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3710      	adds	r7, #16
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b092      	sub	sp, #72	; 0x48
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f76e:	2300      	movs	r3, #0
 800f770:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f774:	f107 030c 	add.w	r3, r7, #12
 800f778:	220e      	movs	r2, #14
 800f77a:	2157      	movs	r1, #87	; 0x57
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f7ff ff9d 	bl	800f6bc <VL53LX_read_nvm_raw_data>
 800f782:	4603      	mov	r3, r0
 800f784:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f788:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d109      	bne.n	800f7a4 <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 800f790:	f107 030c 	add.w	r3, r7, #12
 800f794:	683a      	ldr	r2, [r7, #0]
 800f796:	4619      	mov	r1, r3
 800f798:	2038      	movs	r0, #56	; 0x38
 800f79a:	f7ff fe9d 	bl	800f4d8 <VL53LX_nvm_decode_cal_peak_rate_map>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800f7a4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3748      	adds	r7, #72	; 0x48
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b086      	sub	sp, #24
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
 800f7b8:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800f7be:	f107 030c 	add.w	r3, r7, #12
 800f7c2:	2202      	movs	r2, #2
 800f7c4:	2165      	movs	r1, #101	; 0x65
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f7ff ff78 	bl	800f6bc <VL53LX_read_nvm_raw_data>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f7d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d108      	bne.n	800f7ea <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 800f7d8:	f107 030c 	add.w	r3, r7, #12
 800f7dc:	683a      	ldr	r2, [r7, #0]
 800f7de:	4619      	mov	r1, r3
 800f7e0:	2008      	movs	r0, #8
 800f7e2:	f7ff fecf 	bl	800f584 <VL53LX_nvm_decode_additional_offset_cal_data>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800f7ea:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3718      	adds	r7, #24
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}

0800f7f6 <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 800f7f6:	b580      	push	{r7, lr}
 800f7f8:	b08a      	sub	sp, #40	; 0x28
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	60f8      	str	r0, [r7, #12]
 800f7fe:	460b      	mov	r3, r1
 800f800:	607a      	str	r2, [r7, #4]
 800f802:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f804:	2300      	movs	r3, #0
 800f806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 800f80a:	897b      	ldrh	r3, [r7, #10]
 800f80c:	089b      	lsrs	r3, r3, #2
 800f80e:	b29b      	uxth	r3, r3
 800f810:	b2d9      	uxtb	r1, r3
 800f812:	f107 0314 	add.w	r3, r7, #20
 800f816:	2204      	movs	r2, #4
 800f818:	68f8      	ldr	r0, [r7, #12]
 800f81a:	f7ff ff4f 	bl	800f6bc <VL53LX_read_nvm_raw_data>
 800f81e:	4603      	mov	r3, r0
 800f820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800f824:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d109      	bne.n	800f840 <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 800f82c:	f107 0314 	add.w	r3, r7, #20
 800f830:	687a      	ldr	r2, [r7, #4]
 800f832:	4619      	mov	r1, r3
 800f834:	2010      	movs	r0, #16
 800f836:	f7ff fee0 	bl	800f5fa <VL53LX_nvm_decode_fmt_range_results_data>
 800f83a:	4603      	mov	r3, r0
 800f83c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 800f840:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800f844:	4618      	mov	r0, r3
 800f846:	3728      	adds	r7, #40	; 0x28
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b086      	sub	sp, #24
 800f850:	af00      	add	r7, sp, #0
 800f852:	60f8      	str	r0, [r7, #12]
 800f854:	460b      	mov	r3, r1
 800f856:	607a      	str	r2, [r7, #4]
 800f858:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f85a:	2300      	movs	r3, #0
 800f85c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f85e:	897b      	ldrh	r3, [r7, #10]
 800f860:	2b0a      	cmp	r3, #10
 800f862:	d802      	bhi.n	800f86a <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f864:	f06f 0309 	mvn.w	r3, #9
 800f868:	e047      	b.n	800f8fa <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	781b      	ldrb	r3, [r3, #0]
 800f86e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f872:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f880:	f002 020f 	and.w	r2, r2, #15
 800f884:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f886:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f890:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f894:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f896:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f8a0:	f002 0203 	and.w	r2, r2, #3
 800f8a4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f8a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f8b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f8b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f8b6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	88d8      	ldrh	r0, [r3, #6]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	3305      	adds	r3, #5
 800f8c0:	461a      	mov	r2, r3
 800f8c2:	2102      	movs	r1, #2
 800f8c4:	f7f9 fa1f 	bl	8008d06 <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800f8cc:	68fa      	ldr	r2, [r7, #12]
 800f8ce:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f8d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800f8d6:	68fa      	ldr	r2, [r7, #12]
 800f8d8:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f8da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800f8e4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f8e8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f8ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800f8f0:	68fa      	ldr	r2, [r7, #12]
 800f8f2:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800f8f4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f8f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3718      	adds	r7, #24
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}

0800f902 <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f902:	b580      	push	{r7, lr}
 800f904:	b086      	sub	sp, #24
 800f906:	af00      	add	r7, sp, #0
 800f908:	4603      	mov	r3, r0
 800f90a:	60b9      	str	r1, [r7, #8]
 800f90c:	607a      	str	r2, [r7, #4]
 800f90e:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f910:	2300      	movs	r3, #0
 800f912:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f914:	89fb      	ldrh	r3, [r7, #14]
 800f916:	2b0a      	cmp	r3, #10
 800f918:	d802      	bhi.n	800f920 <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f91a:	f06f 0309 	mvn.w	r3, #9
 800f91e:	e046      	b.n	800f9ae <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f928:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	3301      	adds	r3, #1
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	f003 030f 	and.w	r3, r3, #15
 800f938:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	3302      	adds	r3, #2
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f948:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	3303      	adds	r3, #3
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	f003 0303 	and.w	r3, r3, #3
 800f958:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	3304      	adds	r3, #4
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f968:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	3305      	adds	r3, #5
 800f972:	4619      	mov	r1, r3
 800f974:	2002      	movs	r0, #2
 800f976:	f7f9 f9f1 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 800f97a:	4603      	mov	r3, r0
 800f97c:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	79da      	ldrb	r2, [r3, #7]
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	7a1a      	ldrb	r2, [r3, #8]
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	3309      	adds	r3, #9
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f99c:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	7a9a      	ldrb	r2, [r3, #10]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800f9aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3718      	adds	r7, #24
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}

0800f9b6 <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f9b6:	b580      	push	{r7, lr}
 800f9b8:	b086      	sub	sp, #24
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
 800f9be:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f9c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d108      	bne.n	800f9de <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 800f9cc:	f107 020c 	add.w	r2, r7, #12
 800f9d0:	230b      	movs	r3, #11
 800f9d2:	2101      	movs	r1, #1
 800f9d4:	6878      	ldr	r0, [r7, #4]
 800f9d6:	f001 feeb 	bl	80117b0 <VL53LX_ReadMulti>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f9de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d108      	bne.n	800f9f8 <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 800f9e6:	f107 030c 	add.w	r3, r7, #12
 800f9ea:	683a      	ldr	r2, [r7, #0]
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	200b      	movs	r0, #11
 800f9f0:	f7ff ff87 	bl	800f902 <VL53LX_i2c_decode_static_nvm_managed>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f9f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3718      	adds	r7, #24
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b086      	sub	sp, #24
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	60f8      	str	r0, [r7, #12]
 800fa0c:	460b      	mov	r3, r1
 800fa0e:	607a      	str	r2, [r7, #4]
 800fa10:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fa12:	2300      	movs	r3, #0
 800fa14:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800fa16:	897b      	ldrh	r3, [r7, #10]
 800fa18:	2b16      	cmp	r3, #22
 800fa1a:	d802      	bhi.n	800fa22 <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fa1c:	f06f 0309 	mvn.w	r3, #9
 800fa20:	e076      	b.n	800fb10 <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800fa2e:	68fa      	ldr	r2, [r7, #12]
 800fa30:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800fa32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800fa38:	68fa      	ldr	r2, [r7, #12]
 800fa3a:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800fa3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800fa42:	68fa      	ldr	r2, [r7, #12]
 800fa44:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800fa46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800fa4c:	68fa      	ldr	r2, [r7, #12]
 800fa4e:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800fa50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800fa5a:	f002 020f 	and.w	r2, r2, #15
 800fa5e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800fa60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800fa66:	68fa      	ldr	r2, [r7, #12]
 800fa68:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800fa6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800fa74:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800fa78:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800fa7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800fa84:	f002 0203 	and.w	r2, r2, #3
 800fa88:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800fa8a:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	8958      	ldrh	r0, [r3, #10]
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	3309      	adds	r3, #9
 800fa94:	461a      	mov	r2, r3
 800fa96:	2102      	movs	r1, #2
 800fa98:	f7f9 f935 	bl	8008d06 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	330b      	adds	r3, #11
 800faa6:	461a      	mov	r2, r3
 800faa8:	2102      	movs	r1, #2
 800faaa:	f7f9 f977 	bl	8008d9c <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	330d      	adds	r3, #13
 800fab8:	461a      	mov	r2, r3
 800faba:	2102      	movs	r1, #2
 800fabc:	f7f9 f96e 	bl	8008d9c <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	8a18      	ldrh	r0, [r3, #16]
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	330f      	adds	r3, #15
 800fac8:	461a      	mov	r2, r3
 800faca:	2102      	movs	r1, #2
 800facc:	f7f9 f91b 	bl	8008d06 <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 800fad6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fada:	b218      	sxth	r0, r3
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	3311      	adds	r3, #17
 800fae0:	461a      	mov	r2, r3
 800fae2:	2102      	movs	r1, #2
 800fae4:	f7f9 f95a 	bl	8008d9c <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	3313      	adds	r3, #19
 800faf2:	461a      	mov	r2, r3
 800faf4:	2102      	movs	r1, #2
 800faf6:	f7f9 f951 	bl	8008d9c <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	3315      	adds	r3, #21
 800fb04:	461a      	mov	r2, r3
 800fb06:	2102      	movs	r1, #2
 800fb08:	f7f9 f948 	bl	8008d9c <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800fb0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	3718      	adds	r7, #24
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b086      	sub	sp, #24
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	4603      	mov	r3, r0
 800fb20:	60b9      	str	r1, [r7, #8]
 800fb22:	607a      	str	r2, [r7, #4]
 800fb24:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fb26:	2300      	movs	r3, #0
 800fb28:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800fb2a:	89fb      	ldrh	r3, [r7, #14]
 800fb2c:	2b16      	cmp	r3, #22
 800fb2e:	d802      	bhi.n	800fb36 <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fb30:	f06f 0309 	mvn.w	r3, #9
 800fb34:	e079      	b.n	800fc2a <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	785a      	ldrb	r2, [r3, #1]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	789a      	ldrb	r2, [r3, #2]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	78da      	ldrb	r2, [r3, #3]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800fb56:	68bb      	ldr	r3, [r7, #8]
 800fb58:	791a      	ldrb	r2, [r3, #4]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	3305      	adds	r3, #5
 800fb62:	781b      	ldrb	r3, [r3, #0]
 800fb64:	f003 030f 	and.w	r3, r3, #15
 800fb68:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	799a      	ldrb	r2, [r3, #6]
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	3307      	adds	r3, #7
 800fb7a:	781b      	ldrb	r3, [r3, #0]
 800fb7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb80:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	3308      	adds	r3, #8
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	f003 0303 	and.w	r3, r3, #3
 800fb90:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	3309      	adds	r3, #9
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	2002      	movs	r0, #2
 800fb9e:	f7f9 f8dd 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 800fba2:	4603      	mov	r3, r0
 800fba4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	330b      	adds	r3, #11
 800fbae:	4619      	mov	r1, r3
 800fbb0:	2002      	movs	r0, #2
 800fbb2:	f7f9 f91f 	bl	8008df4 <VL53LX_i2c_decode_int16_t>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	330d      	adds	r3, #13
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	2002      	movs	r0, #2
 800fbc6:	f7f9 f915 	bl	8008df4 <VL53LX_i2c_decode_int16_t>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 800fbd2:	68bb      	ldr	r3, [r7, #8]
 800fbd4:	330f      	adds	r3, #15
 800fbd6:	4619      	mov	r1, r3
 800fbd8:	2002      	movs	r0, #2
 800fbda:	f7f9 f8bf 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	3311      	adds	r3, #17
 800fbea:	4619      	mov	r1, r3
 800fbec:	2002      	movs	r0, #2
 800fbee:	f7f9 f901 	bl	8008df4 <VL53LX_i2c_decode_int16_t>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fbf8:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	3313      	adds	r3, #19
 800fc02:	4619      	mov	r1, r3
 800fc04:	2002      	movs	r0, #2
 800fc06:	f7f9 f8f5 	bl	8008df4 <VL53LX_i2c_decode_int16_t>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	3315      	adds	r3, #21
 800fc16:	4619      	mov	r1, r3
 800fc18:	2002      	movs	r0, #2
 800fc1a:	f7f9 f8eb 	bl	8008df4 <VL53LX_i2c_decode_int16_t>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800fc26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3718      	adds	r7, #24
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}

0800fc32 <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800fc32:	b580      	push	{r7, lr}
 800fc34:	b08a      	sub	sp, #40	; 0x28
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	6078      	str	r0, [r7, #4]
 800fc3a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800fc42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d109      	bne.n	800fc5e <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 800fc4a:	f107 020c 	add.w	r2, r7, #12
 800fc4e:	2317      	movs	r3, #23
 800fc50:	210d      	movs	r1, #13
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f001 fdac 	bl	80117b0 <VL53LX_ReadMulti>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800fc5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d109      	bne.n	800fc7a <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 800fc66:	f107 030c 	add.w	r3, r7, #12
 800fc6a:	683a      	ldr	r2, [r7, #0]
 800fc6c:	4619      	mov	r1, r3
 800fc6e:	2017      	movs	r0, #23
 800fc70:	f7ff ff52 	bl	800fb18 <VL53LX_i2c_decode_customer_nvm_managed>
 800fc74:	4603      	mov	r3, r0
 800fc76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 800fc7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d11c      	bne.n	800fcbc <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	8a5b      	ldrh	r3, [r3, #18]
 800fc86:	84bb      	strh	r3, [r7, #36]	; 0x24
		offset = offset / 4;
 800fc88:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	da00      	bge.n	800fc92 <VL53LX_get_customer_nvm_managed+0x60>
 800fc90:	3303      	adds	r3, #3
 800fc92:	109b      	asrs	r3, r3, #2
 800fc94:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (offset >= 1024)
 800fc96:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fc9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc9e:	db04      	blt.n	800fcaa <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 800fca0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fca2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	84bb      	strh	r3, [r7, #36]	; 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	2200      	movs	r2, #0
 800fcae:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fcb4:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fcba:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800fcbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3728      	adds	r7, #40	; 0x28
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}

0800fcc8 <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b086      	sub	sp, #24
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	60f8      	str	r0, [r7, #12]
 800fcd0:	460b      	mov	r3, r1
 800fcd2:	607a      	str	r2, [r7, #4]
 800fcd4:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 800fcda:	897b      	ldrh	r3, [r7, #10]
 800fcdc:	2b1f      	cmp	r3, #31
 800fcde:	d802      	bhi.n	800fce6 <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fce0:	f06f 0309 	mvn.w	r3, #9
 800fce4:	e0cf      	b.n	800fe86 <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	881b      	ldrh	r3, [r3, #0]
 800fcea:	687a      	ldr	r2, [r7, #4]
 800fcec:	2102      	movs	r1, #2
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7f9 f809 	bl	8008d06 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800fcfc:	f002 0201 	and.w	r2, r2, #1
 800fd00:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800fd02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800fd0c:	f002 020f 	and.w	r2, r2, #15
 800fd10:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800fd12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800fd1c:	f002 020f 	and.w	r2, r2, #15
 800fd20:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800fd22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800fd2c:	f002 021f 	and.w	r2, r2, #31
 800fd30:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800fd32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800fd3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fd40:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800fd42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800fd4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fd50:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800fd52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800fd5c:	f002 0201 	and.w	r2, r2, #1
 800fd60:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800fd62:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800fd68:	68fa      	ldr	r2, [r7, #12]
 800fd6a:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800fd6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800fd76:	f002 0201 	and.w	r2, r2, #1
 800fd7a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800fd7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800fd86:	f002 0203 	and.w	r2, r2, #3
 800fd8a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800fd8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800fd96:	f002 021f 	and.w	r2, r2, #31
 800fd9a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800fd9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800fda6:	f002 0203 	and.w	r2, r2, #3
 800fdaa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800fdac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800fdb6:	f002 0203 	and.w	r2, r2, #3
 800fdba:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800fdbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800fdc6:	f002 0207 	and.w	r2, r2, #7
 800fdca:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800fdcc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800fdd6:	f002 021f 	and.w	r2, r2, #31
 800fdda:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800fddc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800fde6:	f002 0201 	and.w	r2, r2, #1
 800fdea:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800fdec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800fdf2:	68fa      	ldr	r2, [r7, #12]
 800fdf4:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800fdf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800fdfc:	68fa      	ldr	r2, [r7, #12]
 800fdfe:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800fe00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800fe06:	68fa      	ldr	r2, [r7, #12]
 800fe08:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800fe0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800fe10:	68fa      	ldr	r2, [r7, #12]
 800fe12:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800fe14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800fe1a:	68fa      	ldr	r2, [r7, #12]
 800fe1c:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800fe1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800fe24:	68fa      	ldr	r2, [r7, #12]
 800fe26:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800fe28:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	8b18      	ldrh	r0, [r3, #24]
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	3318      	adds	r3, #24
 800fe32:	461a      	mov	r2, r3
 800fe34:	2102      	movs	r1, #2
 800fe36:	f7f8 ff66 	bl	8008d06 <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800fe3e:	68fa      	ldr	r2, [r7, #12]
 800fe40:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800fe42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800fe48:	68fa      	ldr	r2, [r7, #12]
 800fe4a:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800fe4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800fe56:	f002 020f 	and.w	r2, r2, #15
 800fe5a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800fe5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800fe62:	68fa      	ldr	r2, [r7, #12]
 800fe64:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800fe66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800fe70:	f002 020f 	and.w	r2, r2, #15
 800fe74:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800fe76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800fe7c:	68fa      	ldr	r2, [r7, #12]
 800fe7e:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800fe80:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800fe82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3718      	adds	r7, #24
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}

0800fe8e <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800fe8e:	b580      	push	{r7, lr}
 800fe90:	b086      	sub	sp, #24
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	60f8      	str	r0, [r7, #12]
 800fe96:	460b      	mov	r3, r1
 800fe98:	607a      	str	r2, [r7, #4]
 800fe9a:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 800fea0:	897b      	ldrh	r3, [r7, #10]
 800fea2:	2b15      	cmp	r3, #21
 800fea4:	d802      	bhi.n	800feac <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fea6:	f06f 0309 	mvn.w	r3, #9
 800feaa:	e070      	b.n	800ff8e <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800feb8:	68fa      	ldr	r2, [r7, #12]
 800feba:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800febc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800fec2:	68fa      	ldr	r2, [r7, #12]
 800fec4:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800fec6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800fed0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fed4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800fed6:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 800fedc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fee0:	b298      	uxth	r0, r3
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	3304      	adds	r3, #4
 800fee6:	461a      	mov	r2, r3
 800fee8:	2102      	movs	r1, #2
 800feea:	f7f8 ff0c 	bl	8008d06 <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800fef6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fefa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800fefc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800ff02:	68fa      	ldr	r2, [r7, #12]
 800ff04:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800ff06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800ff0c:	68fa      	ldr	r2, [r7, #12]
 800ff0e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800ff10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800ff1a:	f002 0201 	and.w	r2, r2, #1
 800ff1e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800ff20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800ff2a:	f002 0207 	and.w	r2, r2, #7
 800ff2e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800ff30:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	8998      	ldrh	r0, [r3, #12]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	330c      	adds	r3, #12
 800ff3a:	461a      	mov	r2, r3
 800ff3c:	2102      	movs	r1, #2
 800ff3e:	f7f8 fee2 	bl	8008d06 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	89d8      	ldrh	r0, [r3, #14]
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	330e      	adds	r3, #14
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	2102      	movs	r1, #2
 800ff4e:	f7f8 feda 	bl	8008d06 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	8a18      	ldrh	r0, [r3, #16]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	3310      	adds	r3, #16
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	2102      	movs	r1, #2
 800ff5e:	f7f8 fed2 	bl	8008d06 <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800ff66:	68fa      	ldr	r2, [r7, #12]
 800ff68:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800ff6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800ff70:	68fa      	ldr	r2, [r7, #12]
 800ff72:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800ff74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800ff7a:	68fa      	ldr	r2, [r7, #12]
 800ff7c:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800ff7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800ff84:	68fa      	ldr	r2, [r7, #12]
 800ff86:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800ff88:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ff8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3718      	adds	r7, #24
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}

0800ff96 <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ff96:	b580      	push	{r7, lr}
 800ff98:	b086      	sub	sp, #24
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	60f8      	str	r0, [r7, #12]
 800ff9e:	460b      	mov	r3, r1
 800ffa0:	607a      	str	r2, [r7, #4]
 800ffa2:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 800ffa8:	897b      	ldrh	r3, [r7, #10]
 800ffaa:	2b16      	cmp	r3, #22
 800ffac:	d802      	bhi.n	800ffb4 <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ffae:	f06f 0309 	mvn.w	r3, #9
 800ffb2:	e06e      	b.n	8010092 <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	781b      	ldrb	r3, [r3, #0]
 800ffb8:	f003 030f 	and.w	r3, r3, #15
 800ffbc:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800ffc6:	68fa      	ldr	r2, [r7, #12]
 800ffc8:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ffca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800ffd4:	f002 020f 	and.w	r2, r2, #15
 800ffd8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ffda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800ffe0:	68fa      	ldr	r2, [r7, #12]
 800ffe2:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800ffe4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800ffee:	f002 020f 	and.w	r2, r2, #15
 800fff2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800fff4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800fffa:	68fa      	ldr	r2, [r7, #12]
 800fffc:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800fffe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8010008:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801000c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 801000e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8010018:	f002 020f 	and.w	r2, r2, #15
 801001c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 801001e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8010024:	68fa      	ldr	r2, [r7, #12]
 8010026:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8010028:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8010032:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8010036:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8010038:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	8958      	ldrh	r0, [r3, #10]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	330a      	adds	r3, #10
 8010042:	461a      	mov	r2, r3
 8010044:	2102      	movs	r1, #2
 8010046:	f7f8 fe5e 	bl	8008d06 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	8998      	ldrh	r0, [r3, #12]
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	330c      	adds	r3, #12
 8010052:	461a      	mov	r2, r3
 8010054:	2102      	movs	r1, #2
 8010056:	f7f8 fe56 	bl	8008d06 <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 801005e:	68fa      	ldr	r2, [r7, #12]
 8010060:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8010062:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8010068:	68fa      	ldr	r2, [r7, #12]
 801006a:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 801006c:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	6918      	ldr	r0, [r3, #16]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	3312      	adds	r3, #18
 8010076:	461a      	mov	r2, r3
 8010078:	2104      	movs	r1, #4
 801007a:	f7f8 fee4 	bl	8008e46 <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8010086:	f002 0201 	and.w	r2, r2, #1
 801008a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 801008c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801008e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010092:	4618      	mov	r0, r3
 8010094:	3718      	adds	r7, #24
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}

0801009a <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801009a:	b580      	push	{r7, lr}
 801009c:	b086      	sub	sp, #24
 801009e:	af00      	add	r7, sp, #0
 80100a0:	60f8      	str	r0, [r7, #12]
 80100a2:	460b      	mov	r3, r1
 80100a4:	607a      	str	r2, [r7, #4]
 80100a6:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80100a8:	2300      	movs	r3, #0
 80100aa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 80100ac:	897b      	ldrh	r3, [r7, #10]
 80100ae:	2b11      	cmp	r3, #17
 80100b0:	d802      	bhi.n	80100b8 <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80100b2:	f06f 0309 	mvn.w	r3, #9
 80100b6:	e071      	b.n	801019c <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	f003 0303 	and.w	r3, r3, #3
 80100c0:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	8858      	ldrh	r0, [r3, #2]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	3301      	adds	r3, #1
 80100ce:	461a      	mov	r2, r3
 80100d0:	2102      	movs	r1, #2
 80100d2:	f7f8 fe18 	bl	8008d06 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	8898      	ldrh	r0, [r3, #4]
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	3303      	adds	r3, #3
 80100de:	461a      	mov	r2, r3
 80100e0:	2102      	movs	r1, #2
 80100e2:	f7f8 fe10 	bl	8008d06 <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80100ee:	f002 0201 	and.w	r2, r2, #1
 80100f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80100f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 80100fe:	f002 0207 	and.w	r2, r2, #7
 8010102:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8010104:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 801010a:	68fa      	ldr	r2, [r7, #12]
 801010c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 801010e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8010114:	68fa      	ldr	r2, [r7, #12]
 8010116:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8010118:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8010122:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010126:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8010128:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8010132:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010136:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8010138:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8010142:	f002 0203 	and.w	r2, r2, #3
 8010146:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8010148:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8010152:	f002 0203 	and.w	r2, r2, #3
 8010156:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8010158:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8010162:	f002 020f 	and.w	r2, r2, #15
 8010166:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8010168:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 801016e:	68fa      	ldr	r2, [r7, #12]
 8010170:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8010172:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8010178:	68fa      	ldr	r2, [r7, #12]
 801017a:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 801017c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8010182:	68fa      	ldr	r2, [r7, #12]
 8010184:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8010186:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8010190:	f002 0203 	and.w	r2, r2, #3
 8010194:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8010196:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8010198:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801019c:	4618      	mov	r0, r3
 801019e:	3718      	adds	r7, #24
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}

080101a4 <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80101a4:	b480      	push	{r7}
 80101a6:	b087      	sub	sp, #28
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	60f8      	str	r0, [r7, #12]
 80101ac:	460b      	mov	r3, r1
 80101ae:	607a      	str	r2, [r7, #4]
 80101b0:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80101b2:	2300      	movs	r3, #0
 80101b4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 80101b6:	897b      	ldrh	r3, [r7, #10]
 80101b8:	2b04      	cmp	r3, #4
 80101ba:	d802      	bhi.n	80101c2 <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 80101bc:	f06f 0309 	mvn.w	r3, #9
 80101c0:	e025      	b.n	801020e <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	781b      	ldrb	r3, [r3, #0]
 80101c6:	f003 0301 	and.w	r3, r3, #1
 80101ca:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 80101d8:	f002 0201 	and.w	r2, r2, #1
 80101dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 80101de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 80101e8:	f002 0201 	and.w	r2, r2, #1
 80101ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80101ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 80101f8:	f002 0203 	and.w	r2, r2, #3
 80101fc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80101fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8010204:	68fa      	ldr	r2, [r7, #12]
 8010206:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8010208:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801020a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801020e:	4618      	mov	r0, r3
 8010210:	371c      	adds	r7, #28
 8010212:	46bd      	mov	sp, r7
 8010214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010218:	4770      	bx	lr

0801021a <VL53LX_set_system_control>:


VL53LX_Error VL53LX_set_system_control(
	VL53LX_DEV                 Dev,
	VL53LX_system_control_t   *pdata)
{
 801021a:	b580      	push	{r7, lr}
 801021c:	b084      	sub	sp, #16
 801021e:	af00      	add	r7, sp, #0
 8010220:	6078      	str	r0, [r7, #4]
 8010222:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010224:	2300      	movs	r3, #0
 8010226:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8010228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d108      	bne.n	8010242 <VL53LX_set_system_control+0x28>
		status = VL53LX_i2c_encode_system_control(
 8010230:	f107 0308 	add.w	r3, r7, #8
 8010234:	461a      	mov	r2, r3
 8010236:	2105      	movs	r1, #5
 8010238:	6838      	ldr	r0, [r7, #0]
 801023a:	f7ff ffb3 	bl	80101a4 <VL53LX_i2c_encode_system_control>
 801023e:	4603      	mov	r3, r0
 8010240:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 8010242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d108      	bne.n	801025c <VL53LX_set_system_control+0x42>
		status = VL53LX_WriteMulti(
 801024a:	f107 0208 	add.w	r2, r7, #8
 801024e:	2305      	movs	r3, #5
 8010250:	2183      	movs	r1, #131	; 0x83
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f001 fa76 	bl	8011744 <VL53LX_WriteMulti>
 8010258:	4603      	mov	r3, r0
 801025a:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 801025c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010260:	4618      	mov	r0, r3
 8010262:	3710      	adds	r7, #16
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}

08010268 <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b086      	sub	sp, #24
 801026c:	af00      	add	r7, sp, #0
 801026e:	4603      	mov	r3, r0
 8010270:	60b9      	str	r1, [r7, #8]
 8010272:	607a      	str	r2, [r7, #4]
 8010274:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010276:	2300      	movs	r3, #0
 8010278:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 801027a:	89fb      	ldrh	r3, [r7, #14]
 801027c:	2b2b      	cmp	r3, #43	; 0x2b
 801027e:	d802      	bhi.n	8010286 <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010280:	f06f 0309 	mvn.w	r3, #9
 8010284:	e0e2      	b.n	801044c <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	781b      	ldrb	r3, [r3, #0]
 801028a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801028e:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	785a      	ldrb	r2, [r3, #1]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	3302      	adds	r3, #2
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	f003 030f 	and.w	r3, r3, #15
 80102a6:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	78da      	ldrb	r2, [r3, #3]
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	3304      	adds	r3, #4
 80102b8:	4619      	mov	r1, r3
 80102ba:	2002      	movs	r0, #2
 80102bc:	f7f8 fd4e 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 80102c0:	4603      	mov	r3, r0
 80102c2:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	3306      	adds	r3, #6
 80102cc:	4619      	mov	r1, r3
 80102ce:	2002      	movs	r0, #2
 80102d0:	f7f8 fd44 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 80102d4:	4603      	mov	r3, r0
 80102d6:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	3308      	adds	r3, #8
 80102e0:	4619      	mov	r1, r3
 80102e2:	2002      	movs	r0, #2
 80102e4:	f7f8 fd3a 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 80102e8:	4603      	mov	r3, r0
 80102ea:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	330a      	adds	r3, #10
 80102f4:	4619      	mov	r1, r3
 80102f6:	2002      	movs	r0, #2
 80102f8:	f7f8 fd30 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 80102fc:	4603      	mov	r3, r0
 80102fe:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	330c      	adds	r3, #12
 8010308:	4619      	mov	r1, r3
 801030a:	2002      	movs	r0, #2
 801030c:	f7f8 fd26 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 8010310:	4603      	mov	r3, r0
 8010312:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	330e      	adds	r3, #14
 801031c:	4619      	mov	r1, r3
 801031e:	2002      	movs	r0, #2
 8010320:	f7f8 fd1c 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 8010324:	4603      	mov	r3, r0
 8010326:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	3310      	adds	r3, #16
 8010330:	4619      	mov	r1, r3
 8010332:	2002      	movs	r0, #2
 8010334:	f7f8 fd12 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 8010338:	4603      	mov	r3, r0
 801033a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	3312      	adds	r3, #18
 8010344:	4619      	mov	r1, r3
 8010346:	2002      	movs	r0, #2
 8010348:	f7f8 fd08 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 801034c:	4603      	mov	r3, r0
 801034e:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	3314      	adds	r3, #20
 8010358:	4619      	mov	r1, r3
 801035a:	2002      	movs	r0, #2
 801035c:	f7f8 fcfe 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 8010360:	4603      	mov	r3, r0
 8010362:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	3316      	adds	r3, #22
 801036c:	4619      	mov	r1, r3
 801036e:	2002      	movs	r0, #2
 8010370:	f7f8 fcf4 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 8010374:	4603      	mov	r3, r0
 8010376:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	3318      	adds	r3, #24
 8010380:	4619      	mov	r1, r3
 8010382:	2002      	movs	r0, #2
 8010384:	f7f8 fcea 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 8010388:	4603      	mov	r3, r0
 801038a:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	331a      	adds	r3, #26
 8010394:	4619      	mov	r1, r3
 8010396:	2002      	movs	r0, #2
 8010398:	f7f8 fce0 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 801039c:	4603      	mov	r3, r0
 801039e:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	331c      	adds	r3, #28
 80103a8:	4619      	mov	r1, r3
 80103aa:	2002      	movs	r0, #2
 80103ac:	f7f8 fcd6 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 80103b0:	4603      	mov	r3, r0
 80103b2:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	331e      	adds	r3, #30
 80103bc:	4619      	mov	r1, r3
 80103be:	2002      	movs	r0, #2
 80103c0:	f7f8 fccc 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 80103c4:	4603      	mov	r3, r0
 80103c6:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	3320      	adds	r3, #32
 80103d0:	4619      	mov	r1, r3
 80103d2:	2002      	movs	r0, #2
 80103d4:	f7f8 fcc2 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 80103d8:	4603      	mov	r3, r0
 80103da:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	3322      	adds	r3, #34	; 0x22
 80103e4:	4619      	mov	r1, r3
 80103e6:	2002      	movs	r0, #2
 80103e8:	f7f8 fcb8 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 80103ec:	4603      	mov	r3, r0
 80103ee:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	3324      	adds	r3, #36	; 0x24
 80103f8:	4619      	mov	r1, r3
 80103fa:	2002      	movs	r0, #2
 80103fc:	f7f8 fcae 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 8010400:	4603      	mov	r3, r0
 8010402:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	3326      	adds	r3, #38	; 0x26
 801040c:	4619      	mov	r1, r3
 801040e:	2002      	movs	r0, #2
 8010410:	f7f8 fca4 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 8010414:	4603      	mov	r3, r0
 8010416:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	3328      	adds	r3, #40	; 0x28
 8010420:	4619      	mov	r1, r3
 8010422:	2002      	movs	r0, #2
 8010424:	f7f8 fc9a 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 8010428:	4603      	mov	r3, r0
 801042a:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8010430:	68bb      	ldr	r3, [r7, #8]
 8010432:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8010448:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801044c:	4618      	mov	r0, r3
 801044e:	3718      	adds	r7, #24
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}

08010454 <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b086      	sub	sp, #24
 8010458:	af00      	add	r7, sp, #0
 801045a:	4603      	mov	r3, r0
 801045c:	60b9      	str	r1, [r7, #8]
 801045e:	607a      	str	r2, [r7, #4]
 8010460:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010462:	2300      	movs	r3, #0
 8010464:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 8010466:	89fb      	ldrh	r3, [r7, #14]
 8010468:	2b20      	cmp	r3, #32
 801046a:	d802      	bhi.n	8010472 <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801046c:	f06f 0309 	mvn.w	r3, #9
 8010470:	e04d      	b.n	801050e <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 8010472:	68b9      	ldr	r1, [r7, #8]
 8010474:	2004      	movs	r0, #4
 8010476:	f7f8 fd10 	bl	8008e9a <VL53LX_i2c_decode_uint32_t>
 801047a:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	3304      	adds	r3, #4
 8010484:	4619      	mov	r1, r3
 8010486:	2004      	movs	r0, #4
 8010488:	f7f8 fd07 	bl	8008e9a <VL53LX_i2c_decode_uint32_t>
 801048c:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	3308      	adds	r3, #8
 8010496:	4619      	mov	r1, r3
 8010498:	2004      	movs	r0, #4
 801049a:	f7f8 fd1b 	bl	8008ed4 <VL53LX_i2c_decode_int32_t>
 801049e:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	330c      	adds	r3, #12
 80104a8:	4619      	mov	r1, r3
 80104aa:	2004      	movs	r0, #4
 80104ac:	f7f8 fcf5 	bl	8008e9a <VL53LX_i2c_decode_uint32_t>
 80104b0:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	3310      	adds	r3, #16
 80104ba:	4619      	mov	r1, r3
 80104bc:	2004      	movs	r0, #4
 80104be:	f7f8 fcec 	bl	8008e9a <VL53LX_i2c_decode_uint32_t>
 80104c2:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	3314      	adds	r3, #20
 80104cc:	4619      	mov	r1, r3
 80104ce:	2004      	movs	r0, #4
 80104d0:	f7f8 fce3 	bl	8008e9a <VL53LX_i2c_decode_uint32_t>
 80104d4:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 80104da:	68bb      	ldr	r3, [r7, #8]
 80104dc:	3318      	adds	r3, #24
 80104de:	4619      	mov	r1, r3
 80104e0:	2004      	movs	r0, #4
 80104e2:	f7f8 fcf7 	bl	8008ed4 <VL53LX_i2c_decode_int32_t>
 80104e6:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	331c      	adds	r3, #28
 80104f0:	4619      	mov	r1, r3
 80104f2:	2004      	movs	r0, #4
 80104f4:	f7f8 fcd1 	bl	8008e9a <VL53LX_i2c_decode_uint32_t>
 80104f8:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 801050a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801050e:	4618      	mov	r0, r3
 8010510:	3718      	adds	r7, #24
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}

08010516 <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 8010516:	b580      	push	{r7, lr}
 8010518:	b086      	sub	sp, #24
 801051a:	af00      	add	r7, sp, #0
 801051c:	4603      	mov	r3, r0
 801051e:	60b9      	str	r1, [r7, #8]
 8010520:	607a      	str	r2, [r7, #4]
 8010522:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010524:	2300      	movs	r3, #0
 8010526:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8010528:	89fb      	ldrh	r3, [r7, #14]
 801052a:	2b37      	cmp	r3, #55	; 0x37
 801052c:	d802      	bhi.n	8010534 <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 801052e:	f06f 0309 	mvn.w	r3, #9
 8010532:	e15e      	b.n	80107f2 <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 8010534:	68b9      	ldr	r1, [r7, #8]
 8010536:	2002      	movs	r0, #2
 8010538:	f7f8 fc10 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 801053c:	4603      	mov	r3, r0
 801053e:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8010544:	68bb      	ldr	r3, [r7, #8]
 8010546:	3302      	adds	r3, #2
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801054e:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	3303      	adds	r3, #3
 8010558:	781b      	ldrb	r3, [r3, #0]
 801055a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801055e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	3304      	adds	r3, #4
 8010568:	781b      	ldrb	r3, [r3, #0]
 801056a:	f003 0303 	and.w	r3, r3, #3
 801056e:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	3305      	adds	r3, #5
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	f003 0301 	and.w	r3, r3, #1
 801057e:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	3306      	adds	r3, #6
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801058e:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	3307      	adds	r3, #7
 8010598:	781b      	ldrb	r3, [r3, #0]
 801059a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801059e:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	3308      	adds	r3, #8
 80105a8:	4619      	mov	r1, r3
 80105aa:	2002      	movs	r0, #2
 80105ac:	f7f8 fbd6 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 80105b0:	4603      	mov	r3, r0
 80105b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80105b6:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	330a      	adds	r3, #10
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	f003 0303 	and.w	r3, r3, #3
 80105c6:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	330b      	adds	r3, #11
 80105d0:	781b      	ldrb	r3, [r3, #0]
 80105d2:	f003 0303 	and.w	r3, r3, #3
 80105d6:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	330c      	adds	r3, #12
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	f003 030f 	and.w	r3, r3, #15
 80105e6:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	330d      	adds	r3, #13
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	f003 0307 	and.w	r3, r3, #7
 80105f6:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	330e      	adds	r3, #14
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	f003 0301 	and.w	r3, r3, #1
 8010606:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	330f      	adds	r3, #15
 8010610:	781b      	ldrb	r3, [r3, #0]
 8010612:	f003 0303 	and.w	r3, r3, #3
 8010616:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	7c1a      	ldrb	r2, [r3, #16]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	7c5a      	ldrb	r2, [r3, #17]
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	3312      	adds	r3, #18
 8010630:	4619      	mov	r1, r3
 8010632:	2002      	movs	r0, #2
 8010634:	f7f8 fb92 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 8010638:	4603      	mov	r3, r0
 801063a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801063e:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	3316      	adds	r3, #22
 8010648:	4619      	mov	r1, r3
 801064a:	2002      	movs	r0, #2
 801064c:	f7f8 fb86 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 8010650:	4603      	mov	r3, r0
 8010652:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	3318      	adds	r3, #24
 801065c:	4619      	mov	r1, r3
 801065e:	2002      	movs	r0, #2
 8010660:	f7f8 fb7c 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 8010664:	4603      	mov	r3, r0
 8010666:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	331a      	adds	r3, #26
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	f003 0301 	and.w	r3, r3, #1
 8010676:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	331b      	adds	r3, #27
 8010680:	781b      	ldrb	r3, [r3, #0]
 8010682:	f003 0307 	and.w	r3, r3, #7
 8010686:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	7f1a      	ldrb	r2, [r3, #28]
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	7f5a      	ldrb	r2, [r3, #29]
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	331e      	adds	r3, #30
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106a6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	331f      	adds	r3, #31
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106b6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	3320      	adds	r3, #32
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	f003 0303 	and.w	r3, r3, #3
 80106c6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	3321      	adds	r3, #33	; 0x21
 80106d0:	781b      	ldrb	r3, [r3, #0]
 80106d2:	f003 030f 	and.w	r3, r3, #15
 80106d6:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 80106dc:	68bb      	ldr	r3, [r7, #8]
 80106de:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	3325      	adds	r3, #37	; 0x25
 8010704:	781b      	ldrb	r3, [r3, #0]
 8010706:	f003 0301 	and.w	r3, r3, #1
 801070a:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	3326      	adds	r3, #38	; 0x26
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	f003 0303 	and.w	r3, r3, #3
 801071c:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	3327      	adds	r3, #39	; 0x27
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	f003 031f 	and.w	r3, r3, #31
 801072e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	3328      	adds	r3, #40	; 0x28
 801073a:	781b      	ldrb	r3, [r3, #0]
 801073c:	f003 031f 	and.w	r3, r3, #31
 8010740:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	3329      	adds	r3, #41	; 0x29
 801074c:	781b      	ldrb	r3, [r3, #0]
 801074e:	f003 031f 	and.w	r3, r3, #31
 8010752:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	332a      	adds	r3, #42	; 0x2a
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	f003 0301 	and.w	r3, r3, #1
 8010764:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	332b      	adds	r3, #43	; 0x2b
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	f003 0301 	and.w	r3, r3, #1
 8010776:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	332c      	adds	r3, #44	; 0x2c
 8010782:	781b      	ldrb	r3, [r3, #0]
 8010784:	f003 0303 	and.w	r3, r3, #3
 8010788:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	332d      	adds	r3, #45	; 0x2d
 8010794:	781b      	ldrb	r3, [r3, #0]
 8010796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801079a:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	332e      	adds	r3, #46	; 0x2e
 80107a6:	4619      	mov	r1, r3
 80107a8:	2004      	movs	r0, #4
 80107aa:	f7f8 fb76 	bl	8008e9a <VL53LX_i2c_decode_uint32_t>
 80107ae:	4603      	mov	r3, r0
 80107b0:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	3332      	adds	r3, #50	; 0x32
 80107bc:	4619      	mov	r1, r3
 80107be:	2004      	movs	r0, #4
 80107c0:	f7f8 fb6b 	bl	8008e9a <VL53LX_i2c_decode_uint32_t>
 80107c4:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	3336      	adds	r3, #54	; 0x36
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	f003 0301 	and.w	r3, r3, #1
 80107d4:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	3337      	adds	r3, #55	; 0x37
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	f003 0301 	and.w	r3, r3, #1
 80107e6:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 80107ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	3718      	adds	r7, #24
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}

080107fa <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 80107fa:	b580      	push	{r7, lr}
 80107fc:	b086      	sub	sp, #24
 80107fe:	af00      	add	r7, sp, #0
 8010800:	4603      	mov	r3, r0
 8010802:	60b9      	str	r1, [r7, #8]
 8010804:	607a      	str	r2, [r7, #4]
 8010806:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010808:	2300      	movs	r3, #0
 801080a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 801080c:	89fb      	ldrh	r3, [r7, #14]
 801080e:	2b30      	cmp	r3, #48	; 0x30
 8010810:	d802      	bhi.n	8010818 <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 8010812:	f06f 0309 	mvn.w	r3, #9
 8010816:	e112      	b.n	8010a3e <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	785a      	ldrb	r2, [r3, #1]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	789a      	ldrb	r2, [r3, #2]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	3303      	adds	r3, #3
 8010834:	4619      	mov	r1, r3
 8010836:	2002      	movs	r0, #2
 8010838:	f7f8 fa90 	bl	8008d5c <VL53LX_i2c_decode_uint16_t>
 801083c:	4603      	mov	r3, r0
 801083e:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	3305      	adds	r3, #5
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801084e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	3306      	adds	r3, #6
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	f003 0307 	and.w	r3, r3, #7
 801085e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	3307      	adds	r3, #7
 8010868:	781b      	ldrb	r3, [r3, #0]
 801086a:	f003 0307 	and.w	r3, r3, #7
 801086e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	3308      	adds	r3, #8
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801087e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	3309      	adds	r3, #9
 8010888:	781b      	ldrb	r3, [r3, #0]
 801088a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801088e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	330a      	adds	r3, #10
 8010898:	781b      	ldrb	r3, [r3, #0]
 801089a:	f003 0301 	and.w	r3, r3, #1
 801089e:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	330b      	adds	r3, #11
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108ae:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	330c      	adds	r3, #12
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	f003 0301 	and.w	r3, r3, #1
 80108be:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	330d      	adds	r3, #13
 80108c8:	781b      	ldrb	r3, [r3, #0]
 80108ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108ce:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 80108d4:	68bb      	ldr	r3, [r7, #8]
 80108d6:	330e      	adds	r3, #14
 80108d8:	781b      	ldrb	r3, [r3, #0]
 80108da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108de:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	7bda      	ldrb	r2, [r3, #15]
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	7c1a      	ldrb	r2, [r3, #16]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	7c5a      	ldrb	r2, [r3, #17]
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	7c9a      	ldrb	r2, [r3, #18]
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	7cda      	ldrb	r2, [r3, #19]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	7d1a      	ldrb	r2, [r3, #20]
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	7d5a      	ldrb	r2, [r3, #21]
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	7d9a      	ldrb	r2, [r3, #22]
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	7dda      	ldrb	r2, [r3, #23]
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	7e1a      	ldrb	r2, [r3, #24]
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	7e5a      	ldrb	r2, [r3, #25]
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	7e9a      	ldrb	r2, [r3, #26]
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	7eda      	ldrb	r2, [r3, #27]
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	7f1a      	ldrb	r2, [r3, #28]
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	7f5a      	ldrb	r2, [r3, #29]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	7f9a      	ldrb	r2, [r3, #30]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	7fda      	ldrb	r2, [r3, #31]
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 80109b6:	68bb      	ldr	r3, [r7, #8]
 80109b8:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8010a3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3718      	adds	r7, #24
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}

08010a46 <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 8010a46:	b580      	push	{r7, lr}
 8010a48:	b090      	sub	sp, #64	; 0x40
 8010a4a:	af00      	add	r7, sp, #0
 8010a4c:	6078      	str	r0, [r7, #4]
 8010a4e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010a50:	2300      	movs	r3, #0
 8010a52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 8010a56:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d10a      	bne.n	8010a74 <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 8010a5e:	f107 020c 	add.w	r2, r7, #12
 8010a62:	2331      	movs	r3, #49	; 0x31
 8010a64:	f240 110f 	movw	r1, #271	; 0x10f
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f000 fea1 	bl	80117b0 <VL53LX_ReadMulti>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 8010a74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d109      	bne.n	8010a90 <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 8010a7c:	f107 030c 	add.w	r3, r7, #12
 8010a80:	683a      	ldr	r2, [r7, #0]
 8010a82:	4619      	mov	r1, r3
 8010a84:	2031      	movs	r0, #49	; 0x31
 8010a86:	f7ff feb8 	bl	80107fa <VL53LX_i2c_decode_nvm_copy_data>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8010a90:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3740      	adds	r7, #64	; 0x40
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}

08010a9c <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 8010a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aa0:	b0a1      	sub	sp, #132	; 0x84
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	64b9      	str	r1, [r7, #72]	; 0x48
 8010aa6:	647a      	str	r2, [r7, #68]	; 0x44
 8010aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8010aaa:	4603      	mov	r3, r0
 8010aac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8010ab0:	23f1      	movs	r3, #241	; 0xf1
 8010ab2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint32_t sigma_int  = VL53LX_D_002;
 8010ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010aba:	657b      	str	r3, [r7, #84]	; 0x54

	uint32_t pll_period_mm  = 0;
 8010abc:	2300      	movs	r3, #0
 8010abe:	653b      	str	r3, [r7, #80]	; 0x50

	uint64_t tmp0        = 0;
 8010ac0:	f04f 0200 	mov.w	r2, #0
 8010ac4:	f04f 0300 	mov.w	r3, #0
 8010ac8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	uint64_t tmp1        = 0;
 8010acc:	f04f 0200 	mov.w	r2, #0
 8010ad0:	f04f 0300 	mov.w	r3, #0
 8010ad4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	uint64_t b_minus_amb = 0;
 8010ad8:	f04f 0200 	mov.w	r2, #0
 8010adc:	f04f 0300 	mov.w	r3, #0
 8010ae0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t VL53LX_p_055   = 0;
 8010ae4:	f04f 0200 	mov.w	r2, #0
 8010ae8:	f04f 0300 	mov.w	r3, #0
 8010aec:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	*psigma_est  = VL53LX_D_002;
 8010af0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010af8:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 8010afa:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	f000 8259 	beq.w	8010fb6 <VL53LX_f_023+0x51a>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 8010b04:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7fb fbd3 	bl	800c2b4 <VL53LX_calc_pll_period_mm>
 8010b0e:	6538      	str	r0, [r7, #80]	; 0x50



		if (VL53LX_p_028 > VL53LX_p_032)
 8010b10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b16:	429a      	cmp	r2, r3
 8010b18:	d90f      	bls.n	8010b3a <VL53LX_f_023+0x9e>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 8010b1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_032;
 8010b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b26:	461a      	mov	r2, r3
 8010b28:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 8010b2c:	ebb0 0a02 	subs.w	sl, r0, r2
 8010b30:	eb61 0b03 	sbc.w	fp, r1, r3
 8010b34:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 8010b38:	e00e      	b.n	8010b58 <VL53LX_f_023+0xbc>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 8010b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_028;
 8010b42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010b46:	461a      	mov	r2, r3
 8010b48:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 8010b4c:	ebb0 0802 	subs.w	r8, r0, r2
 8010b50:	eb61 0903 	sbc.w	r9, r1, r3
 8010b54:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60



		if (VL53LX_p_007 > VL53LX_p_001)
 8010b58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b5c:	429a      	cmp	r2, r3
 8010b5e:	d911      	bls.n	8010b84 <VL53LX_f_023+0xe8>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8010b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b62:	4618      	mov	r0, r3
 8010b64:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_001;
 8010b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b6a:	461a      	mov	r2, r3
 8010b6c:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8010b70:	1a86      	subs	r6, r0, r2
 8010b72:	62be      	str	r6, [r7, #40]	; 0x28
 8010b74:	eb61 0303 	sbc.w	r3, r1, r3
 8010b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010b7e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8010b82:	e010      	b.n	8010ba6 <VL53LX_f_023+0x10a>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8010b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b86:	4618      	mov	r0, r3
 8010b88:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_007;
 8010b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b8e:	461a      	mov	r2, r3
 8010b90:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 8010b94:	1a86      	subs	r6, r0, r2
 8010b96:	623e      	str	r6, [r7, #32]
 8010b98:	eb61 0303 	sbc.w	r3, r1, r3
 8010b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8010b9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010ba2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58



		if (b_minus_amb != 0) {
 8010ba6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010baa:	4313      	orrs	r3, r2
 8010bac:	f000 8203 	beq.w	8010fb6 <VL53LX_f_023+0x51a>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 8010bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f04f 0100 	mov.w	r1, #0
 8010bb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010bbc:	461a      	mov	r2, r3
 8010bbe:	f04f 0300 	mov.w	r3, #0
 8010bc2:	1884      	adds	r4, r0, r2
 8010bc4:	eb41 0503 	adc.w	r5, r1, r3
					(uint64_t)VL53LX_p_028;
 8010bc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010bcc:	461a      	mov	r2, r3
 8010bce:	f04f 0300 	mov.w	r3, #0
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 8010bd2:	18a1      	adds	r1, r4, r2
 8010bd4:	61b9      	str	r1, [r7, #24]
 8010bd6:	eb45 0303 	adc.w	r3, r5, r3
 8010bda:	61fb      	str	r3, [r7, #28]
 8010bdc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010be0:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > VL53LX_D_003)
 8010be4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010be8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010bec:	f04f 0100 	mov.w	r1, #0
 8010bf0:	4299      	cmp	r1, r3
 8010bf2:	bf08      	it	eq
 8010bf4:	4290      	cmpeq	r0, r2
 8010bf6:	d205      	bcs.n	8010c04 <VL53LX_f_023+0x168>
				tmp0 = VL53LX_D_003;
 8010bf8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8010bfc:	f04f 0300 	mov.w	r3, #0
 8010c00:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 8010c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010c08:	fb02 f203 	mul.w	r2, r2, r3
 8010c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010c10:	fb01 f303 	mul.w	r3, r1, r3
 8010c14:	18d1      	adds	r1, r2, r3
 8010c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010c18:	fba3 2303 	umull	r2, r3, r3, r3
 8010c1c:	4419      	add	r1, r3
 8010c1e:	460b      	mov	r3, r1
 8010c20:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8010c24:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 << 8;
 8010c28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010c2c:	f04f 0200 	mov.w	r2, #0
 8010c30:	f04f 0300 	mov.w	r3, #0
 8010c34:	020b      	lsls	r3, r1, #8
 8010c36:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010c3a:	0202      	lsls	r2, r0, #8
 8010c3c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > VL53LX_D_004)
 8010c40:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010c44:	f04f 30ff 	mov.w	r0, #4294967295
 8010c48:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010c4c:	4299      	cmp	r1, r3
 8010c4e:	bf08      	it	eq
 8010c50:	4290      	cmpeq	r0, r2
 8010c52:	d205      	bcs.n	8010c60 <VL53LX_f_023+0x1c4>
				tmp1 = VL53LX_D_004;
 8010c54:	f04f 32ff 	mov.w	r2, #4294967295
 8010c58:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010c5c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8010c60:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010c64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010c68:	f7ef ff50 	bl	8000b0c <__aeabi_uldivmod>
 8010c6c:	4602      	mov	r2, r0
 8010c6e:	460b      	mov	r3, r1
 8010c70:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = do_division_u(tmp1, b_minus_amb);
 8010c74:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010c78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010c7c:	f7ef ff46 	bl	8000b0c <__aeabi_uldivmod>
 8010c80:	4602      	mov	r2, r0
 8010c82:	460b      	mov	r3, r1
 8010c84:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_005)
 8010c88:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010c8c:	2b80      	cmp	r3, #128	; 0x80
 8010c8e:	bf08      	it	eq
 8010c90:	2a00      	cmpeq	r2, #0
 8010c92:	d305      	bcc.n	8010ca0 <VL53LX_f_023+0x204>
				tmp1 = (uint64_t)VL53LX_D_005;
 8010c94:	f04f 32ff 	mov.w	r2, #4294967295
 8010c98:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8010c9c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 * tmp0;
 8010ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ca2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010ca4:	fb02 f203 	mul.w	r2, r2, r3
 8010ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010caa:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010cac:	fb01 f303 	mul.w	r3, r1, r3
 8010cb0:	18d1      	adds	r1, r2, r3
 8010cb2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010cb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8010cba:	4419      	add	r1, r3
 8010cbc:	460b      	mov	r3, r1
 8010cbe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010cc2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f04f 0100 	mov.w	r1, #0
 8010cd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010cd4:	461a      	mov	r2, r3
 8010cd6:	f04f 0300 	mov.w	r3, #0
 8010cda:	1884      	adds	r4, r0, r2
 8010cdc:	63bc      	str	r4, [r7, #56]	; 0x38
 8010cde:	eb41 0303 	adc.w	r3, r1, r3
 8010ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8010ce4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010ce8:	461a      	mov	r2, r3
 8010cea:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010cee:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8010cf2:	4621      	mov	r1, r4
 8010cf4:	1889      	adds	r1, r1, r2
 8010cf6:	6339      	str	r1, [r7, #48]	; 0x30
 8010cf8:	4629      	mov	r1, r5
 8010cfa:	eb43 0101 	adc.w	r1, r3, r1
 8010cfe:	6379      	str	r1, [r7, #52]	; 0x34
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8010d00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010d04:	461a      	mov	r2, r3
 8010d06:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010d0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8010d0e:	4621      	mov	r1, r4
 8010d10:	1889      	adds	r1, r1, r2
 8010d12:	6139      	str	r1, [r7, #16]
 8010d14:	4629      	mov	r1, r5
 8010d16:	eb43 0101 	adc.w	r1, r3, r1
 8010d1a:	6179      	str	r1, [r7, #20]
 8010d1c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010d20:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_003)
 8010d24:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010d28:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010d2c:	f04f 0100 	mov.w	r1, #0
 8010d30:	4299      	cmp	r1, r3
 8010d32:	bf08      	it	eq
 8010d34:	4290      	cmpeq	r0, r2
 8010d36:	d205      	bcs.n	8010d44 <VL53LX_f_023+0x2a8>
				tmp1 = (uint64_t)VL53LX_D_003;
 8010d38:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8010d3c:	f04f 0300 	mov.w	r3, #0
 8010d40:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			tmp1 = tmp1 << 8;
 8010d44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010d48:	f04f 0200 	mov.w	r2, #0
 8010d4c:	f04f 0300 	mov.w	r3, #0
 8010d50:	020b      	lsls	r3, r1, #8
 8010d52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010d56:	0202      	lsls	r2, r0, #8
 8010d58:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 + tmp0;
 8010d5c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010d60:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010d64:	1884      	adds	r4, r0, r2
 8010d66:	60bc      	str	r4, [r7, #8]
 8010d68:	eb41 0303 	adc.w	r3, r1, r3
 8010d6c:	60fb      	str	r3, [r7, #12]
 8010d6e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010d72:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010d76:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010d7a:	2a00      	cmp	r2, #0
 8010d7c:	f173 0300 	sbcs.w	r3, r3, #0
 8010d80:	da05      	bge.n	8010d8e <VL53LX_f_023+0x2f2>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010d82:	f04f 32ff 	mov.w	r2, #4294967295
 8010d86:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010d8a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8010d8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010d92:	2b01      	cmp	r3, #1
 8010d94:	bf08      	it	eq
 8010d96:	2a00      	cmpeq	r2, #0
 8010d98:	d31e      	bcc.n	8010dd8 <VL53LX_f_023+0x33c>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010d9a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010d9e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010da2:	f7ef feb3 	bl	8000b0c <__aeabi_uldivmod>
 8010da6:	4602      	mov	r2, r0
 8010da8:	460b      	mov	r3, r1
 8010daa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 8010dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010db0:	461a      	mov	r2, r3
 8010db2:	f04f 0300 	mov.w	r3, #0
 8010db6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010db8:	fb02 f001 	mul.w	r0, r2, r1
 8010dbc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010dbe:	fb03 f101 	mul.w	r1, r3, r1
 8010dc2:	4401      	add	r1, r0
 8010dc4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010dc6:	fba0 2302 	umull	r2, r3, r0, r2
 8010dca:	4419      	add	r1, r3
 8010dcc:	460b      	mov	r3, r1
 8010dce:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010dd2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010dd6:	e01d      	b.n	8010e14 <VL53LX_f_023+0x378>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dda:	461a      	mov	r2, r3
 8010ddc:	f04f 0300 	mov.w	r3, #0
 8010de0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010de2:	fb02 f001 	mul.w	r0, r2, r1
 8010de6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010de8:	fb03 f101 	mul.w	r1, r3, r1
 8010dec:	4401      	add	r1, r0
 8010dee:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010df0:	fba0 2302 	umull	r2, r3, r0, r2
 8010df4:	4419      	add	r1, r3
 8010df6:	460b      	mov	r3, r1
 8010df8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010dfc:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010e00:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010e04:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010e08:	f7ef fe80 	bl	8000b0c <__aeabi_uldivmod>
 8010e0c:	4602      	mov	r2, r0
 8010e0e:	460b      	mov	r3, r1
 8010e10:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010e14:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010e18:	2a00      	cmp	r2, #0
 8010e1a:	f173 0300 	sbcs.w	r3, r3, #0
 8010e1e:	da05      	bge.n	8010e2c <VL53LX_f_023+0x390>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010e20:	f04f 32ff 	mov.w	r2, #4294967295
 8010e24:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010e28:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8010e2c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010e30:	2b01      	cmp	r3, #1
 8010e32:	bf08      	it	eq
 8010e34:	2a00      	cmpeq	r2, #0
 8010e36:	d32a      	bcc.n	8010e8e <VL53LX_f_023+0x3f2>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010e38:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010e3c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010e40:	f7ef fe64 	bl	8000b0c <__aeabi_uldivmod>
 8010e44:	4602      	mov	r2, r0
 8010e46:	460b      	mov	r3, r1
 8010e48:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 8010e4c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010e50:	f04f 0200 	mov.w	r2, #0
 8010e54:	f04f 0300 	mov.w	r3, #0
 8010e58:	0882      	lsrs	r2, r0, #2
 8010e5a:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010e5e:	088b      	lsrs	r3, r1, #2
 8010e60:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 8010e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e66:	461a      	mov	r2, r3
 8010e68:	f04f 0300 	mov.w	r3, #0
 8010e6c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010e6e:	fb02 f001 	mul.w	r0, r2, r1
 8010e72:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010e74:	fb03 f101 	mul.w	r1, r3, r1
 8010e78:	4401      	add	r1, r0
 8010e7a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010e7c:	fba0 2302 	umull	r2, r3, r0, r2
 8010e80:	4419      	add	r1, r3
 8010e82:	460b      	mov	r3, r1
 8010e84:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010e88:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010e8c:	e029      	b.n	8010ee2 <VL53LX_f_023+0x446>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e90:	461a      	mov	r2, r3
 8010e92:	f04f 0300 	mov.w	r3, #0
 8010e96:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010e98:	fb02 f001 	mul.w	r0, r2, r1
 8010e9c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010e9e:	fb03 f101 	mul.w	r1, r3, r1
 8010ea2:	4401      	add	r1, r0
 8010ea4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010ea6:	fba0 2302 	umull	r2, r3, r0, r2
 8010eaa:	4419      	add	r1, r3
 8010eac:	460b      	mov	r3, r1
 8010eae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010eb2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010eb6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010eba:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010ebe:	f7ef fe25 	bl	8000b0c <__aeabi_uldivmod>
 8010ec2:	4602      	mov	r2, r0
 8010ec4:	460b      	mov	r3, r1
 8010ec6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 8010eca:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010ece:	f04f 0200 	mov.w	r2, #0
 8010ed2:	f04f 0300 	mov.w	r3, #0
 8010ed6:	0882      	lsrs	r2, r0, #2
 8010ed8:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010edc:	088b      	lsrs	r3, r1, #2
 8010ede:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 8010ee2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010ee6:	2a00      	cmp	r2, #0
 8010ee8:	f173 0300 	sbcs.w	r3, r3, #0
 8010eec:	da05      	bge.n	8010efa <VL53LX_f_023+0x45e>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010eee:	f04f 32ff 	mov.w	r2, #4294967295
 8010ef2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010ef6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp0 = tmp0 >> 2;
 8010efa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010efe:	f04f 0200 	mov.w	r2, #0
 8010f02:	f04f 0300 	mov.w	r3, #0
 8010f06:	0882      	lsrs	r2, r0, #2
 8010f08:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010f0c:	088b      	lsrs	r3, r1, #2
 8010f0e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010f12:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010f16:	2b01      	cmp	r3, #1
 8010f18:	bf08      	it	eq
 8010f1a:	2a00      	cmpeq	r2, #0
 8010f1c:	d305      	bcc.n	8010f2a <VL53LX_f_023+0x48e>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f22:	f04f 0300 	mov.w	r3, #0
 8010f26:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 8010f2a:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 8010f2e:	f04f 0100 	mov.w	r1, #0
 8010f32:	f04f 0200 	mov.w	r2, #0
 8010f36:	f04f 0300 	mov.w	r3, #0
 8010f3a:	01cb      	lsls	r3, r1, #7
 8010f3c:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8010f40:	01c2      	lsls	r2, r0, #7
 8010f42:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 * tmp1;
 8010f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010f4a:	fb02 f203 	mul.w	r2, r2, r3
 8010f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f50:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010f52:	fb01 f303 	mul.w	r3, r1, r3
 8010f56:	18d1      	adds	r1, r2, r3
 8010f58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010f5a:	fba3 2303 	umull	r2, r3, r3, r3
 8010f5e:	4419      	add	r1, r3
 8010f60:	460b      	mov	r3, r1
 8010f62:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8010f66:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp0 = tmp0 + tmp1;
 8010f6a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010f6e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010f72:	1884      	adds	r4, r0, r2
 8010f74:	603c      	str	r4, [r7, #0]
 8010f76:	eb41 0303 	adc.w	r3, r1, r3
 8010f7a:	607b      	str	r3, [r7, #4]
 8010f7c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010f80:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 8010f84:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010f88:	2b01      	cmp	r3, #1
 8010f8a:	bf08      	it	eq
 8010f8c:	2a00      	cmpeq	r2, #0
 8010f8e:	d305      	bcc.n	8010f9c <VL53LX_f_023+0x500>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010f90:	f04f 32ff 	mov.w	r2, #4294967295
 8010f94:	f04f 0300 	mov.w	r3, #0
 8010f98:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 8010f9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f7fb f821 	bl	800bfe6 <VL53LX_isqrt>
 8010fa4:	6578      	str	r0, [r7, #84]	; 0x54

			*psigma_est = (uint16_t)sigma_int;
 8010fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fa8:	b29a      	uxth	r2, r3
 8010faa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010fae:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}

	}

	return status;
 8010fb6:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3784      	adds	r7, #132	; 0x84
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010fc4 <VL53LX_wait_for_test_completion>:
}


VL53LX_Error VL53LX_wait_for_test_completion(
	VL53LX_DEV     Dev)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b086      	sub	sp, #24
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010fcc:	2300      	movs	r3, #0
 8010fce:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	3318      	adds	r3, #24
 8010fd4:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53LX_WAIT_METHOD_BLOCKING) {
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d107      	bne.n	8010ff2 <VL53LX_wait_for_test_completion+0x2e>



		status =
			VL53LX_poll_for_range_completion(
 8010fe2:	f64e 2160 	movw	r1, #60000	; 0xea60
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f000 f88b 	bl	8011102 <VL53LX_poll_for_range_completion>
 8010fec:	4603      	mov	r3, r0
 8010fee:	75fb      	strb	r3, [r7, #23]
 8010ff0:	e01b      	b.n	801102a <VL53LX_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8010ff6:	e011      	b.n	801101c <VL53LX_wait_for_test_completion+0x58>
			status = VL53LX_is_new_data_ready(
 8010ff8:	f107 030f 	add.w	r3, r7, #15
 8010ffc:	4619      	mov	r1, r3
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f000 f819 	bl	8011036 <VL53LX_is_new_data_ready>
 8011004:	4603      	mov	r3, r0
 8011006:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53LX_ERROR_NONE) {
 8011008:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d105      	bne.n	801101c <VL53LX_wait_for_test_completion+0x58>
				status = VL53LX_WaitMs(
 8011010:	2101      	movs	r1, #1
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f000 fce6 	bl	80119e4 <VL53LX_WaitMs>
 8011018:	4603      	mov	r3, r0
 801101a:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 801101c:	7bfb      	ldrb	r3, [r7, #15]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d103      	bne.n	801102a <VL53LX_wait_for_test_completion+0x66>
 8011022:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d0e6      	beq.n	8010ff8 <VL53LX_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801102a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801102e:	4618      	mov	r0, r3
 8011030:	3718      	adds	r7, #24
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}

08011036 <VL53LX_is_new_data_ready>:


VL53LX_Error VL53LX_is_new_data_ready(
	VL53LX_DEV     Dev,
	uint8_t       *pready)
{
 8011036:	b580      	push	{r7, lr}
 8011038:	b086      	sub	sp, #24
 801103a:	af00      	add	r7, sp, #0
 801103c:	6078      	str	r0, [r7, #4]
 801103e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8011040:	2300      	movs	r3, #0
 8011042:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	3318      	adds	r3, #24
 8011048:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 801104a:	2300      	movs	r3, #0
 801104c:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 801104e:	2300      	movs	r3, #0
 8011050:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8011052:	2300      	movs	r3, #0
 8011054:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8011056:	693b      	ldr	r3, [r7, #16]
 8011058:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 801105c:	f003 0310 	and.w	r3, r3, #16
 8011060:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8011062:	7bfb      	ldrb	r3, [r7, #15]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d102      	bne.n	801106e <VL53LX_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8011068:	2301      	movs	r3, #1
 801106a:	75fb      	strb	r3, [r7, #23]
 801106c:	e001      	b.n	8011072 <VL53LX_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 801106e:	2300      	movs	r3, #0
 8011070:	75fb      	strb	r3, [r7, #23]



	status = VL53LX_RdByte(
 8011072:	f107 030e 	add.w	r3, r7, #14
 8011076:	461a      	mov	r2, r3
 8011078:	2131      	movs	r1, #49	; 0x31
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f000 fc2a 	bl	80118d4 <VL53LX_RdByte>
 8011080:	4603      	mov	r3, r0
 8011082:	75bb      	strb	r3, [r7, #22]
					VL53LX_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8011084:	7bbb      	ldrb	r3, [r7, #14]
 8011086:	f003 0201 	and.w	r2, r3, #1
 801108a:	7dfb      	ldrb	r3, [r7, #23]
 801108c:	429a      	cmp	r2, r3
 801108e:	d103      	bne.n	8011098 <VL53LX_is_new_data_ready+0x62>
		*pready = 0x01;
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	2201      	movs	r2, #1
 8011094:	701a      	strb	r2, [r3, #0]
 8011096:	e002      	b.n	801109e <VL53LX_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	2200      	movs	r2, #0
 801109c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 801109e:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	3718      	adds	r7, #24
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}

080110aa <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 80110aa:	b580      	push	{r7, lr}
 80110ac:	b086      	sub	sp, #24
 80110ae:	af02      	add	r7, sp, #8
 80110b0:	6078      	str	r0, [r7, #4]
 80110b2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80110b4:	2300      	movs	r3, #0
 80110b6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 80110b8:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f000 fca1 	bl	8011a04 <VL53LX_WaitUs>
 80110c2:	4603      	mov	r3, r0
 80110c4:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 80110c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d10b      	bne.n	80110e6 <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 80110ce:	2301      	movs	r3, #1
 80110d0:	9301      	str	r3, [sp, #4]
 80110d2:	2301      	movs	r3, #1
 80110d4:	9300      	str	r3, [sp, #0]
 80110d6:	2301      	movs	r3, #1
 80110d8:	22e5      	movs	r2, #229	; 0xe5
 80110da:	6839      	ldr	r1, [r7, #0]
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f000 fca9 	bl	8011a34 <VL53LX_WaitValueMaskEx>
 80110e2:	4603      	mov	r3, r0
 80110e4:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 80110e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d103      	bne.n	80110f6 <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 80110ee:	2103      	movs	r1, #3
 80110f0:	6878      	ldr	r0, [r7, #4]
 80110f2:	f7f7 f815 	bl	8008120 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 80110f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80110fa:	4618      	mov	r0, r3
 80110fc:	3710      	adds	r7, #16
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}

08011102 <VL53LX_poll_for_range_completion>:


VL53LX_Error VL53LX_poll_for_range_completion(
	VL53LX_DEV     Dev,
	uint32_t       timeout_ms)
{
 8011102:	b580      	push	{r7, lr}
 8011104:	b088      	sub	sp, #32
 8011106:	af02      	add	r7, sp, #8
 8011108:	6078      	str	r0, [r7, #4]
 801110a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 801110c:	2300      	movs	r3, #0
 801110e:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	3318      	adds	r3, #24
 8011114:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8011116:	2300      	movs	r3, #0
 8011118:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 801111a:	2300      	movs	r3, #0
 801111c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 801111e:	693b      	ldr	r3, [r7, #16]
 8011120:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 8011124:	f003 0310 	and.w	r3, r3, #16
 8011128:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 801112a:	7bfb      	ldrb	r3, [r7, #15]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d102      	bne.n	8011136 <VL53LX_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8011130:	2301      	movs	r3, #1
 8011132:	75fb      	strb	r3, [r7, #23]
 8011134:	e001      	b.n	801113a <VL53LX_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8011136:	2300      	movs	r3, #0
 8011138:	75fb      	strb	r3, [r7, #23]

	status =
		VL53LX_WaitValueMaskEx(
 801113a:	7dfb      	ldrb	r3, [r7, #23]
 801113c:	2201      	movs	r2, #1
 801113e:	9201      	str	r2, [sp, #4]
 8011140:	2201      	movs	r2, #1
 8011142:	9200      	str	r2, [sp, #0]
 8011144:	2231      	movs	r2, #49	; 0x31
 8011146:	6839      	ldr	r1, [r7, #0]
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f000 fc73 	bl	8011a34 <VL53LX_WaitValueMaskEx>
 801114e:	4603      	mov	r3, r0
 8011150:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53LX_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8011152:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8011156:	4618      	mov	r0, r3
 8011158:	3718      	adds	r7, #24
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}

0801115e <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 801115e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011162:	b0a2      	sub	sp, #136	; 0x88
 8011164:	af00      	add	r7, sp, #0
 8011166:	65f8      	str	r0, [r7, #92]	; 0x5c
 8011168:	4618      	mov	r0, r3
 801116a:	460b      	mov	r3, r1
 801116c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8011170:	4613      	mov	r3, r2
 8011172:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8011176:	4603      	mov	r3, r0
 8011178:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



	VL53LX_Error status = VL53LX_ERROR_NONE;
 801117c:	2300      	movs	r3, #0
 801117e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	uint8_t row = 0;
 8011182:	2300      	movs	r3, #0
 8011184:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t col = 0;
 8011188:	2300      	movs	r3, #0
 801118a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65



	int16_t  bound_l_x = 0;
 801118e:	2300      	movs	r3, #0
 8011190:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	int16_t  bound_r_x = 0;
 8011194:	2300      	movs	r3, #0
 8011196:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	int16_t  bound_u_y = 0;
 801119a:	2300      	movs	r3, #0
 801119c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	int16_t  bound_d_y = 0;
 80111a0:	2300      	movs	r3, #0
 80111a2:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

	int64_t xtalk_rate_ll = 0;
 80111a6:	f04f 0200 	mov.w	r2, #0
 80111aa:	f04f 0300 	mov.w	r3, #0
 80111ae:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t xtalk_rate_ur = 0;
 80111b2:	f04f 0200 	mov.w	r2, #0
 80111b6:	f04f 0300 	mov.w	r3, #0
 80111ba:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	int64_t xtalk_avg = 0;
 80111be:	f04f 0200 	mov.w	r2, #0
 80111c2:	f04f 0300 	mov.w	r3, #0
 80111c6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	if (status == VL53LX_ERROR_NONE) {
 80111ca:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d108      	bne.n	80111e4 <VL53LX_f_032+0x86>
		VL53LX_decode_row_col(
 80111d2:	f107 0265 	add.w	r2, r7, #101	; 0x65
 80111d6:	f107 0166 	add.w	r1, r7, #102	; 0x66
 80111da:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 80111de:	4618      	mov	r0, r3
 80111e0:	f7fb fad4 	bl	800c78c <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 80111e4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d165      	bne.n	80112b8 <VL53LX_f_032+0x15a>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 80111ec:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80111f0:	091b      	lsrs	r3, r3, #4
 80111f2:	b2db      	uxtb	r3, r3
 80111f4:	f003 0301 	and.w	r3, r3, #1
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d00e      	beq.n	801121a <VL53LX_f_032+0xbc>
			bound_l_x = (int16_t) col -
 80111fc:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8011200:	b29a      	uxth	r2, r3
 8011202:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8011206:	095b      	lsrs	r3, r3, #5
 8011208:	b2db      	uxtb	r3, r3
 801120a:	b29b      	uxth	r3, r3
 801120c:	1ad3      	subs	r3, r2, r3
 801120e:	b29b      	uxth	r3, r3
 8011210:	3b01      	subs	r3, #1
 8011212:	b29b      	uxth	r3, r3
 8011214:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8011218:	e00b      	b.n	8011232 <VL53LX_f_032+0xd4>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 801121a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 801121e:	b29a      	uxth	r2, r3
 8011220:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8011224:	095b      	lsrs	r3, r3, #5
 8011226:	b2db      	uxtb	r3, r3
 8011228:	b29b      	uxth	r3, r3
 801122a:	1ad3      	subs	r3, r2, r3
 801122c:	b29b      	uxth	r3, r3
 801122e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8011232:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8011236:	b29a      	uxth	r2, r3
 8011238:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 801123c:	095b      	lsrs	r3, r3, #5
 801123e:	b2db      	uxtb	r3, r3
 8011240:	b29b      	uxth	r3, r3
 8011242:	4413      	add	r3, r2
 8011244:	b29b      	uxth	r3, r3
 8011246:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 801124a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 801124e:	f003 0301 	and.w	r3, r3, #1
 8011252:	2b00      	cmp	r3, #0
 8011254:	d011      	beq.n	801127a <VL53LX_f_032+0x11c>
			bound_d_y = (int16_t) row -
 8011256:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801125a:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 801125c:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8011260:	f003 020f 	and.w	r2, r3, #15
 8011264:	0fd3      	lsrs	r3, r2, #31
 8011266:	4413      	add	r3, r2
 8011268:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 801126a:	b29b      	uxth	r3, r3
 801126c:	1acb      	subs	r3, r1, r3
 801126e:	b29b      	uxth	r3, r3
 8011270:	3b01      	subs	r3, #1
 8011272:	b29b      	uxth	r3, r3
 8011274:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8011278:	e00f      	b.n	801129a <VL53LX_f_032+0x13c>
		else
			bound_d_y = (int16_t) row -
 801127a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801127e:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8011280:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8011284:	f003 020f 	and.w	r2, r3, #15
 8011288:	0fd3      	lsrs	r3, r2, #31
 801128a:	4413      	add	r3, r2
 801128c:	105b      	asrs	r3, r3, #1
 801128e:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8011290:	b29b      	uxth	r3, r3
 8011292:	440b      	add	r3, r1
 8011294:	b29b      	uxth	r3, r3
 8011296:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

		bound_u_y = (int16_t) row +
 801129a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801129e:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 80112a0:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80112a4:	f003 020f 	and.w	r2, r3, #15
 80112a8:	0fd3      	lsrs	r3, r2, #31
 80112aa:	4413      	add	r3, r2
 80112ac:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 80112ae:	b29b      	uxth	r3, r3
 80112b0:	440b      	add	r3, r1
 80112b2:	b29b      	uxth	r3, r3
 80112b4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 80112b8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d133      	bne.n	8011328 <VL53LX_f_032+0x1ca>
		bound_l_x =  (2 * bound_l_x) - 15 +
 80112c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80112c4:	b29a      	uxth	r2, r3
 80112c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80112ca:	4413      	add	r3, r2
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	005b      	lsls	r3, r3, #1
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	3b0f      	subs	r3, #15
 80112d4:	b29b      	uxth	r3, r3
 80112d6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 80112da:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80112de:	b29a      	uxth	r2, r3
 80112e0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80112e4:	4413      	add	r3, r2
 80112e6:	b29b      	uxth	r3, r3
 80112e8:	005b      	lsls	r3, r3, #1
 80112ea:	b29b      	uxth	r3, r3
 80112ec:	3b0f      	subs	r3, #15
 80112ee:	b29b      	uxth	r3, r3
 80112f0:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 80112f4:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 80112f8:	b29a      	uxth	r2, r3
 80112fa:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80112fe:	4413      	add	r3, r2
 8011300:	b29b      	uxth	r3, r3
 8011302:	005b      	lsls	r3, r3, #1
 8011304:	b29b      	uxth	r3, r3
 8011306:	3b0f      	subs	r3, #15
 8011308:	b29b      	uxth	r3, r3
 801130a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 801130e:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 8011312:	b29a      	uxth	r2, r3
 8011314:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8011318:	4413      	add	r3, r2
 801131a:	b29b      	uxth	r3, r3
 801131c:	005b      	lsls	r3, r3, #1
 801131e:	b29b      	uxth	r3, r3
 8011320:	3b0f      	subs	r3, #15
 8011322:	b29b      	uxth	r3, r3
 8011324:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8011328:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 801132c:	2b00      	cmp	r3, #0
 801132e:	f040 80cb 	bne.w	80114c8 <VL53LX_f_032+0x36a>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8011332:	f9b7 0086 	ldrsh.w	r0, [r7, #134]	; 0x86
 8011336:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 801133a:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 801133e:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8011342:	fb02 f501 	mul.w	r5, r2, r1
 8011346:	fb00 f403 	mul.w	r4, r0, r3
 801134a:	442c      	add	r4, r5
 801134c:	fba0 8902 	umull	r8, r9, r0, r2
 8011350:	eb04 0309 	add.w	r3, r4, r9
 8011354:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8011356:	f9b7 0080 	ldrsh.w	r0, [r7, #128]	; 0x80
 801135a:	ea4f 71e0 	mov.w	r1, r0, asr #31
					((int64_t)ygradient));
 801135e:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8011362:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8011366:	fb02 f501 	mul.w	r5, r2, r1
 801136a:	fb00 f403 	mul.w	r4, r0, r3
 801136e:	442c      	add	r4, r5
 8011370:	fba0 2302 	umull	r2, r3, r0, r2
 8011374:	18e1      	adds	r1, r4, r3
 8011376:	460b      	mov	r3, r1
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8011378:	eb18 0102 	adds.w	r1, r8, r2
 801137c:	6339      	str	r1, [r7, #48]	; 0x30
 801137e:	eb49 0303 	adc.w	r3, r9, r3
 8011382:	637b      	str	r3, [r7, #52]	; 0x34
 8011384:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8011388:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 801138c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8011390:	f112 0a01 	adds.w	sl, r2, #1
 8011394:	f143 0b00 	adc.w	fp, r3, #0
 8011398:	ea4f 73db 	mov.w	r3, fp, lsr #31
 801139c:	461a      	mov	r2, r3
 801139e:	f04f 0300 	mov.w	r3, #0
 80113a2:	eb12 010a 	adds.w	r1, r2, sl
 80113a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80113a8:	eb43 030b 	adc.w	r3, r3, fp
 80113ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80113ae:	f04f 0200 	mov.w	r2, #0
 80113b2:	f04f 0300 	mov.w	r3, #0
 80113b6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80113ba:	4621      	mov	r1, r4
 80113bc:	084a      	lsrs	r2, r1, #1
 80113be:	4629      	mov	r1, r5
 80113c0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80113c4:	4629      	mov	r1, r5
 80113c6:	104b      	asrs	r3, r1, #1
 80113c8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 80113cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80113ce:	461a      	mov	r2, r3
 80113d0:	f04f 0300 	mov.w	r3, #0
 80113d4:	f04f 0000 	mov.w	r0, #0
 80113d8:	f04f 0100 	mov.w	r1, #0
 80113dc:	0099      	lsls	r1, r3, #2
 80113de:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80113e2:	0090      	lsls	r0, r2, #2
 80113e4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80113e8:	1814      	adds	r4, r2, r0
 80113ea:	623c      	str	r4, [r7, #32]
 80113ec:	414b      	adcs	r3, r1
 80113ee:	627b      	str	r3, [r7, #36]	; 0x24
 80113f0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80113f4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 80113f8:	f9b7 0084 	ldrsh.w	r0, [r7, #132]	; 0x84
 80113fc:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8011400:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8011404:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8011408:	fb02 f501 	mul.w	r5, r2, r1
 801140c:	fb00 f403 	mul.w	r4, r0, r3
 8011410:	442c      	add	r4, r5
 8011412:	fba0 8902 	umull	r8, r9, r0, r2
 8011416:	eb04 0309 	add.w	r3, r4, r9
 801141a:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801141c:	f9b7 0082 	ldrsh.w	r0, [r7, #130]	; 0x82
 8011420:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)ygradient));
 8011424:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8011428:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 801142c:	fb02 f501 	mul.w	r5, r2, r1
 8011430:	fb00 f403 	mul.w	r4, r0, r3
 8011434:	442c      	add	r4, r5
 8011436:	fba0 2302 	umull	r2, r3, r0, r2
 801143a:	18e1      	adds	r1, r4, r3
 801143c:	460b      	mov	r3, r1
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 801143e:	eb18 0102 	adds.w	r1, r8, r2
 8011442:	61b9      	str	r1, [r7, #24]
 8011444:	eb49 0303 	adc.w	r3, r9, r3
 8011448:	61fb      	str	r3, [r7, #28]
 801144a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801144e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8011452:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011456:	1c51      	adds	r1, r2, #1
 8011458:	64b9      	str	r1, [r7, #72]	; 0x48
 801145a:	f143 0300 	adc.w	r3, r3, #0
 801145e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011460:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8011464:	462b      	mov	r3, r5
 8011466:	0fdb      	lsrs	r3, r3, #31
 8011468:	461a      	mov	r2, r3
 801146a:	f04f 0300 	mov.w	r3, #0
 801146e:	4621      	mov	r1, r4
 8011470:	1851      	adds	r1, r2, r1
 8011472:	6139      	str	r1, [r7, #16]
 8011474:	4629      	mov	r1, r5
 8011476:	eb43 0101 	adc.w	r1, r3, r1
 801147a:	6179      	str	r1, [r7, #20]
 801147c:	f04f 0200 	mov.w	r2, #0
 8011480:	f04f 0300 	mov.w	r3, #0
 8011484:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8011488:	4621      	mov	r1, r4
 801148a:	084a      	lsrs	r2, r1, #1
 801148c:	4629      	mov	r1, r5
 801148e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011492:	4629      	mov	r1, r5
 8011494:	104b      	asrs	r3, r1, #1
 8011496:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 801149a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801149c:	4618      	mov	r0, r3
 801149e:	f04f 0100 	mov.w	r1, #0
 80114a2:	f04f 0200 	mov.w	r2, #0
 80114a6:	f04f 0300 	mov.w	r3, #0
 80114aa:	008b      	lsls	r3, r1, #2
 80114ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80114b0:	0082      	lsls	r2, r0, #2
 80114b2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80114b6:	1884      	adds	r4, r0, r2
 80114b8:	60bc      	str	r4, [r7, #8]
 80114ba:	eb41 0303 	adc.w	r3, r1, r3
 80114be:	60fb      	str	r3, [r7, #12]
 80114c0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80114c4:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 80114c8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d12e      	bne.n	801152e <VL53LX_f_032+0x3d0>
		xtalk_avg = do_division_s(
 80114d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80114d4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80114d8:	1884      	adds	r4, r0, r2
 80114da:	643c      	str	r4, [r7, #64]	; 0x40
 80114dc:	eb41 0303 	adc.w	r3, r1, r3
 80114e0:	647b      	str	r3, [r7, #68]	; 0x44
 80114e2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80114e6:	460b      	mov	r3, r1
 80114e8:	3301      	adds	r3, #1
 80114ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80114ec:	4613      	mov	r3, r2
 80114ee:	f143 0300 	adc.w	r3, r3, #0
 80114f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114f4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80114f8:	462b      	mov	r3, r5
 80114fa:	0fdb      	lsrs	r3, r3, #31
 80114fc:	461a      	mov	r2, r3
 80114fe:	f04f 0300 	mov.w	r3, #0
 8011502:	4621      	mov	r1, r4
 8011504:	1851      	adds	r1, r2, r1
 8011506:	6039      	str	r1, [r7, #0]
 8011508:	4629      	mov	r1, r5
 801150a:	eb43 0101 	adc.w	r1, r3, r1
 801150e:	6079      	str	r1, [r7, #4]
 8011510:	f04f 0200 	mov.w	r2, #0
 8011514:	f04f 0300 	mov.w	r3, #0
 8011518:	e9d7 4500 	ldrd	r4, r5, [r7]
 801151c:	4621      	mov	r1, r4
 801151e:	084a      	lsrs	r2, r1, #1
 8011520:	4629      	mov	r1, r5
 8011522:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8011526:	4629      	mov	r1, r5
 8011528:	104b      	asrs	r3, r1, #1
 801152a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 801152e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8011532:	2b00      	cmp	r3, #0
 8011534:	d10b      	bne.n	801154e <VL53LX_f_032+0x3f0>
		if (xtalk_avg < 0)
 8011536:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801153a:	2a00      	cmp	r2, #0
 801153c:	f173 0300 	sbcs.w	r3, r3, #0
 8011540:	da05      	bge.n	801154e <VL53LX_f_032+0x3f0>
			xtalk_avg = 0;
 8011542:	f04f 0200 	mov.w	r2, #0
 8011546:	f04f 0300 	mov.w	r3, #0
 801154a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 801154e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011550:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011554:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8011556:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 801155a:	4618      	mov	r0, r3
 801155c:	3788      	adds	r7, #136	; 0x88
 801155e:	46bd      	mov	sp, r7
 8011560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011564 <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8011564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011568:	b08d      	sub	sp, #52	; 0x34
 801156a:	af00      	add	r7, sp, #0
 801156c:	60f8      	str	r0, [r7, #12]
 801156e:	60b9      	str	r1, [r7, #8]
 8011570:	607a      	str	r2, [r7, #4]
 8011572:	603b      	str	r3, [r7, #0]


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 8011574:	2300      	movs	r3, #0
 8011576:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	uint64_t xtalk_events_per_spad = 0;
 801157a:	f04f 0200 	mov.w	r2, #0
 801157e:	f04f 0300 	mov.w	r3, #0
 8011582:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint64_t xtalk_total_events = 0;
 8011586:	f04f 0200 	mov.w	r2, #0
 801158a:	f04f 0300 	mov.w	r3, #0
 801158e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t xtalk_temp_bin = 0;
 8011592:	f04f 0200 	mov.w	r2, #0
 8011596:	f04f 0300 	mov.w	r3, #0
 801159a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t  i = 0;
 801159e:	2300      	movs	r3, #0
 80115a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	4618      	mov	r0, r3
 80115a8:	f04f 0100 	mov.w	r1, #0
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115b2:	461a      	mov	r2, r3
 80115b4:	f04f 0300 	mov.w	r3, #0
 80115b8:	fb02 fc01 	mul.w	ip, r2, r1
 80115bc:	fb00 f603 	mul.w	r6, r0, r3
 80115c0:	4466      	add	r6, ip
 80115c2:	fba0 2302 	umull	r2, r3, r0, r2
 80115c6:	18f1      	adds	r1, r6, r3
 80115c8:	460b      	mov	r3, r1
 80115ca:	f512 7afa 	adds.w	sl, r2, #500	; 0x1f4
 80115ce:	f143 0b00 	adc.w	fp, r3, #0
 80115d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80115d6:	f04f 0300 	mov.w	r3, #0
 80115da:	4650      	mov	r0, sl
 80115dc:	4659      	mov	r1, fp
 80115de:	f7ef fa95 	bl	8000b0c <__aeabi_uldivmod>
 80115e2:	4602      	mov	r2, r0
 80115e4:	460b      	mov	r3, r1
 80115e6:	e9c7 2306 	strd	r2, r3, [r7, #24]




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80115f0:	b29a      	uxth	r2, r3
 80115f2:	f04f 0300 	mov.w	r3, #0
	xtalk_total_events = xtalk_events_per_spad *
 80115f6:	69f9      	ldr	r1, [r7, #28]
 80115f8:	fb02 f001 	mul.w	r0, r2, r1
 80115fc:	69b9      	ldr	r1, [r7, #24]
 80115fe:	fb03 f101 	mul.w	r1, r3, r1
 8011602:	4401      	add	r1, r0
 8011604:	69b8      	ldr	r0, [r7, #24]
 8011606:	fba0 2302 	umull	r2, r3, r0, r2
 801160a:	4419      	add	r1, r3
 801160c:	460b      	mov	r3, r1
 801160e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8011612:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8011616:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801161a:	f04f 0200 	mov.w	r2, #0
 801161e:	f04f 0300 	mov.w	r3, #0
 8011622:	0a02      	lsrs	r2, r0, #8
 8011624:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8011628:	0a0b      	lsrs	r3, r1, #8
 801162a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 801162e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011632:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 8011636:	f143 0900 	adc.w	r9, r3, #0
 801163a:	f04f 0200 	mov.w	r2, #0
 801163e:	f04f 0300 	mov.w	r3, #0
 8011642:	ea4f 22d8 	mov.w	r2, r8, lsr #11
 8011646:	ea42 5249 	orr.w	r2, r2, r9, lsl #21
 801164a:	ea4f 23d9 	mov.w	r3, r9, lsr #11
 801164e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (xtalk_total_events > 0xFFFFFFFF)
 8011652:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011656:	2b01      	cmp	r3, #1
 8011658:	bf08      	it	eq
 801165a:	2a00      	cmpeq	r2, #0
 801165c:	d305      	bcc.n	801166a <VL53LX_f_033+0x106>
		xtalk_total_events = 0xFFFFFFFF;
 801165e:	f04f 32ff 	mov.w	r2, #4294967295
 8011662:	f04f 0300 	mov.w	r3, #0
 8011666:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 801166a:	2300      	movs	r3, #0
 801166c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011670:	e035      	b.n	80116de <VL53LX_f_033+0x17a>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8011672:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011676:	68ba      	ldr	r2, [r7, #8]
 8011678:	3302      	adds	r3, #2
 801167a:	009b      	lsls	r3, r3, #2
 801167c:	4413      	add	r3, r2
 801167e:	685b      	ldr	r3, [r3, #4]
 8011680:	461a      	mov	r2, r3
 8011682:	f04f 0300 	mov.w	r3, #0
 8011686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011688:	fb02 f001 	mul.w	r0, r2, r1
 801168c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801168e:	fb03 f101 	mul.w	r1, r3, r1
 8011692:	4401      	add	r1, r0
 8011694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011696:	fba0 2302 	umull	r2, r3, r0, r2
 801169a:	4419      	add	r1, r3
 801169c:	460b      	mov	r3, r1
 801169e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80116a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 80116a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80116aa:	f512 7400 	adds.w	r4, r2, #512	; 0x200
 80116ae:	f143 0500 	adc.w	r5, r3, #0
 80116b2:	f04f 0200 	mov.w	r2, #0
 80116b6:	f04f 0300 	mov.w	r3, #0
 80116ba:	0aa2      	lsrs	r2, r4, #10
 80116bc:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
 80116c0:	0aab      	lsrs	r3, r5, #10
 80116c2:	e9c7 2304 	strd	r2, r3, [r7, #16]

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 80116c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80116ca:	6939      	ldr	r1, [r7, #16]
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	3206      	adds	r2, #6
 80116d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 80116d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80116d8:	3301      	adds	r3, #1
 80116da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	7a9b      	ldrb	r3, [r3, #10]
 80116e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d3c3      	bcc.n	8011672 <VL53LX_f_033+0x10e>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 80116ea:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3734      	adds	r7, #52	; 0x34
 80116f2:	46bd      	mov	sp, r7
 80116f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080116f8 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b084      	sub	sp, #16
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	60f8      	str	r0, [r7, #12]
 8011700:	60b9      	str	r1, [r7, #8]
 8011702:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	68db      	ldr	r3, [r3, #12]
 8011708:	68fa      	ldr	r2, [r7, #12]
 801170a:	8910      	ldrh	r0, [r2, #8]
 801170c:	687a      	ldr	r2, [r7, #4]
 801170e:	b292      	uxth	r2, r2
 8011710:	68b9      	ldr	r1, [r7, #8]
 8011712:	4798      	blx	r3
 8011714:	4603      	mov	r3, r0
}
 8011716:	4618      	mov	r0, r3
 8011718:	3710      	adds	r7, #16
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}

0801171e <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 801171e:	b580      	push	{r7, lr}
 8011720:	b084      	sub	sp, #16
 8011722:	af00      	add	r7, sp, #0
 8011724:	60f8      	str	r0, [r7, #12]
 8011726:	60b9      	str	r1, [r7, #8]
 8011728:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	691b      	ldr	r3, [r3, #16]
 801172e:	68fa      	ldr	r2, [r7, #12]
 8011730:	8910      	ldrh	r0, [r2, #8]
 8011732:	687a      	ldr	r2, [r7, #4]
 8011734:	b292      	uxth	r2, r2
 8011736:	68b9      	ldr	r1, [r7, #8]
 8011738:	4798      	blx	r3
 801173a:	4603      	mov	r3, r0
}
 801173c:	4618      	mov	r0, r3
 801173e:	3710      	adds	r7, #16
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}

08011744 <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8011744:	b580      	push	{r7, lr}
 8011746:	b086      	sub	sp, #24
 8011748:	af00      	add	r7, sp, #0
 801174a:	60f8      	str	r0, [r7, #12]
 801174c:	607a      	str	r2, [r7, #4]
 801174e:	603b      	str	r3, [r7, #0]
 8011750:	460b      	mov	r3, r1
 8011752:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011754:	2300      	movs	r3, #0
 8011756:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	2bff      	cmp	r3, #255	; 0xff
 801175c:	d902      	bls.n	8011764 <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 801175e:	f06f 0303 	mvn.w	r3, #3
 8011762:	e01d      	b.n	80117a0 <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8011764:	897b      	ldrh	r3, [r7, #10]
 8011766:	0a1b      	lsrs	r3, r3, #8
 8011768:	b29b      	uxth	r3, r3
 801176a:	b2da      	uxtb	r2, r3
 801176c:	4b0e      	ldr	r3, [pc, #56]	; (80117a8 <VL53LX_WriteMulti+0x64>)
 801176e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011770:	897b      	ldrh	r3, [r7, #10]
 8011772:	b2da      	uxtb	r2, r3
 8011774:	4b0c      	ldr	r3, [pc, #48]	; (80117a8 <VL53LX_WriteMulti+0x64>)
 8011776:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8011778:	683a      	ldr	r2, [r7, #0]
 801177a:	6879      	ldr	r1, [r7, #4]
 801177c:	480b      	ldr	r0, [pc, #44]	; (80117ac <VL53LX_WriteMulti+0x68>)
 801177e:	f003 fa39 	bl	8014bf4 <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	3302      	adds	r3, #2
 8011786:	461a      	mov	r2, r3
 8011788:	4907      	ldr	r1, [pc, #28]	; (80117a8 <VL53LX_WriteMulti+0x64>)
 801178a:	68f8      	ldr	r0, [r7, #12]
 801178c:	f7ff ffb4 	bl	80116f8 <_I2CWrite>
 8011790:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011792:	693b      	ldr	r3, [r7, #16]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d001      	beq.n	801179c <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011798:	23f3      	movs	r3, #243	; 0xf3
 801179a:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 801179c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3718      	adds	r7, #24
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}
 80117a8:	200071ec 	.word	0x200071ec
 80117ac:	200071ee 	.word	0x200071ee

080117b0 <VL53LX_ReadMulti>:

VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b086      	sub	sp, #24
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	60f8      	str	r0, [r7, #12]
 80117b8:	607a      	str	r2, [r7, #4]
 80117ba:	603b      	str	r3, [r7, #0]
 80117bc:	460b      	mov	r3, r1
 80117be:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80117c0:	2300      	movs	r3, #0
 80117c2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80117c4:	897b      	ldrh	r3, [r7, #10]
 80117c6:	0a1b      	lsrs	r3, r3, #8
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	b2da      	uxtb	r2, r3
 80117cc:	4b12      	ldr	r3, [pc, #72]	; (8011818 <VL53LX_ReadMulti+0x68>)
 80117ce:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80117d0:	897b      	ldrh	r3, [r7, #10]
 80117d2:	b2da      	uxtb	r2, r3
 80117d4:	4b10      	ldr	r3, [pc, #64]	; (8011818 <VL53LX_ReadMulti+0x68>)
 80117d6:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80117d8:	2202      	movs	r2, #2
 80117da:	490f      	ldr	r1, [pc, #60]	; (8011818 <VL53LX_ReadMulti+0x68>)
 80117dc:	68f8      	ldr	r0, [r7, #12]
 80117de:	f7ff ff8b 	bl	80116f8 <_I2CWrite>
 80117e2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80117e4:	693b      	ldr	r3, [r7, #16]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d002      	beq.n	80117f0 <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80117ea:	23f3      	movs	r3, #243	; 0xf3
 80117ec:	75fb      	strb	r3, [r7, #23]
        goto done;
 80117ee:	e00c      	b.n	801180a <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80117f0:	683a      	ldr	r2, [r7, #0]
 80117f2:	6879      	ldr	r1, [r7, #4]
 80117f4:	68f8      	ldr	r0, [r7, #12]
 80117f6:	f7ff ff92 	bl	801171e <_I2CRead>
 80117fa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80117fc:	693b      	ldr	r3, [r7, #16]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d002      	beq.n	8011808 <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011802:	23f3      	movs	r3, #243	; 0xf3
 8011804:	75fb      	strb	r3, [r7, #23]
 8011806:	e000      	b.n	801180a <VL53LX_ReadMulti+0x5a>
    }
done:
 8011808:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 801180a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801180e:	4618      	mov	r0, r3
 8011810:	3718      	adds	r7, #24
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}
 8011816:	bf00      	nop
 8011818:	200071ec 	.word	0x200071ec

0801181c <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 801181c:	b580      	push	{r7, lr}
 801181e:	b084      	sub	sp, #16
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	460b      	mov	r3, r1
 8011826:	807b      	strh	r3, [r7, #2]
 8011828:	4613      	mov	r3, r2
 801182a:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 801182c:	2300      	movs	r3, #0
 801182e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011830:	887b      	ldrh	r3, [r7, #2]
 8011832:	0a1b      	lsrs	r3, r3, #8
 8011834:	b29b      	uxth	r3, r3
 8011836:	b2da      	uxtb	r2, r3
 8011838:	4b0c      	ldr	r3, [pc, #48]	; (801186c <VL53LX_WrByte+0x50>)
 801183a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801183c:	887b      	ldrh	r3, [r7, #2]
 801183e:	b2da      	uxtb	r2, r3
 8011840:	4b0a      	ldr	r3, [pc, #40]	; (801186c <VL53LX_WrByte+0x50>)
 8011842:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8011844:	4a09      	ldr	r2, [pc, #36]	; (801186c <VL53LX_WrByte+0x50>)
 8011846:	787b      	ldrb	r3, [r7, #1]
 8011848:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 801184a:	2203      	movs	r2, #3
 801184c:	4907      	ldr	r1, [pc, #28]	; (801186c <VL53LX_WrByte+0x50>)
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f7ff ff52 	bl	80116f8 <_I2CWrite>
 8011854:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d001      	beq.n	8011860 <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801185c:	23f3      	movs	r3, #243	; 0xf3
 801185e:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8011860:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011864:	4618      	mov	r0, r3
 8011866:	3710      	adds	r7, #16
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}
 801186c:	200071ec 	.word	0x200071ec

08011870 <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 8011870:	b580      	push	{r7, lr}
 8011872:	b084      	sub	sp, #16
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
 8011878:	460b      	mov	r3, r1
 801187a:	807b      	strh	r3, [r7, #2]
 801187c:	4613      	mov	r3, r2
 801187e:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011880:	2300      	movs	r3, #0
 8011882:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011884:	887b      	ldrh	r3, [r7, #2]
 8011886:	0a1b      	lsrs	r3, r3, #8
 8011888:	b29b      	uxth	r3, r3
 801188a:	b2da      	uxtb	r2, r3
 801188c:	4b10      	ldr	r3, [pc, #64]	; (80118d0 <VL53LX_WrWord+0x60>)
 801188e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011890:	887b      	ldrh	r3, [r7, #2]
 8011892:	b2da      	uxtb	r2, r3
 8011894:	4b0e      	ldr	r3, [pc, #56]	; (80118d0 <VL53LX_WrWord+0x60>)
 8011896:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8011898:	883b      	ldrh	r3, [r7, #0]
 801189a:	0a1b      	lsrs	r3, r3, #8
 801189c:	b29b      	uxth	r3, r3
 801189e:	b2da      	uxtb	r2, r3
 80118a0:	4b0b      	ldr	r3, [pc, #44]	; (80118d0 <VL53LX_WrWord+0x60>)
 80118a2:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80118a4:	883b      	ldrh	r3, [r7, #0]
 80118a6:	b2da      	uxtb	r2, r3
 80118a8:	4b09      	ldr	r3, [pc, #36]	; (80118d0 <VL53LX_WrWord+0x60>)
 80118aa:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80118ac:	2204      	movs	r2, #4
 80118ae:	4908      	ldr	r1, [pc, #32]	; (80118d0 <VL53LX_WrWord+0x60>)
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f7ff ff21 	bl	80116f8 <_I2CWrite>
 80118b6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d001      	beq.n	80118c2 <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80118be:	23f3      	movs	r3, #243	; 0xf3
 80118c0:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 80118c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3710      	adds	r7, #16
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}
 80118ce:	bf00      	nop
 80118d0:	200071ec 	.word	0x200071ec

080118d4 <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b086      	sub	sp, #24
 80118d8:	af00      	add	r7, sp, #0
 80118da:	60f8      	str	r0, [r7, #12]
 80118dc:	460b      	mov	r3, r1
 80118de:	607a      	str	r2, [r7, #4]
 80118e0:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80118e2:	2300      	movs	r3, #0
 80118e4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 80118e6:	897b      	ldrh	r3, [r7, #10]
 80118e8:	0a1b      	lsrs	r3, r3, #8
 80118ea:	b29b      	uxth	r3, r3
 80118ec:	b2da      	uxtb	r2, r3
 80118ee:	4b12      	ldr	r3, [pc, #72]	; (8011938 <VL53LX_RdByte+0x64>)
 80118f0:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80118f2:	897b      	ldrh	r3, [r7, #10]
 80118f4:	b2da      	uxtb	r2, r3
 80118f6:	4b10      	ldr	r3, [pc, #64]	; (8011938 <VL53LX_RdByte+0x64>)
 80118f8:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80118fa:	2202      	movs	r2, #2
 80118fc:	490e      	ldr	r1, [pc, #56]	; (8011938 <VL53LX_RdByte+0x64>)
 80118fe:	68f8      	ldr	r0, [r7, #12]
 8011900:	f7ff fefa 	bl	80116f8 <_I2CWrite>
 8011904:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d002      	beq.n	8011912 <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801190c:	23f3      	movs	r3, #243	; 0xf3
 801190e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011910:	e00c      	b.n	801192c <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8011912:	2201      	movs	r2, #1
 8011914:	6879      	ldr	r1, [r7, #4]
 8011916:	68f8      	ldr	r0, [r7, #12]
 8011918:	f7ff ff01 	bl	801171e <_I2CRead>
 801191c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801191e:	693b      	ldr	r3, [r7, #16]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d002      	beq.n	801192a <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011924:	23f3      	movs	r3, #243	; 0xf3
 8011926:	75fb      	strb	r3, [r7, #23]
 8011928:	e000      	b.n	801192c <VL53LX_RdByte+0x58>
    }
done:
 801192a:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 801192c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011930:	4618      	mov	r0, r3
 8011932:	3718      	adds	r7, #24
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}
 8011938:	200071ec 	.word	0x200071ec

0801193c <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 801193c:	b580      	push	{r7, lr}
 801193e:	b086      	sub	sp, #24
 8011940:	af00      	add	r7, sp, #0
 8011942:	60f8      	str	r0, [r7, #12]
 8011944:	460b      	mov	r3, r1
 8011946:	607a      	str	r2, [r7, #4]
 8011948:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 801194a:	2300      	movs	r3, #0
 801194c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 801194e:	897b      	ldrh	r3, [r7, #10]
 8011950:	0a1b      	lsrs	r3, r3, #8
 8011952:	b29b      	uxth	r3, r3
 8011954:	b2da      	uxtb	r2, r3
 8011956:	4b18      	ldr	r3, [pc, #96]	; (80119b8 <VL53LX_RdWord+0x7c>)
 8011958:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801195a:	897b      	ldrh	r3, [r7, #10]
 801195c:	b2da      	uxtb	r2, r3
 801195e:	4b16      	ldr	r3, [pc, #88]	; (80119b8 <VL53LX_RdWord+0x7c>)
 8011960:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8011962:	2202      	movs	r2, #2
 8011964:	4914      	ldr	r1, [pc, #80]	; (80119b8 <VL53LX_RdWord+0x7c>)
 8011966:	68f8      	ldr	r0, [r7, #12]
 8011968:	f7ff fec6 	bl	80116f8 <_I2CWrite>
 801196c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d002      	beq.n	801197a <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011974:	23f3      	movs	r3, #243	; 0xf3
 8011976:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011978:	e017      	b.n	80119aa <VL53LX_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 801197a:	2202      	movs	r2, #2
 801197c:	490e      	ldr	r1, [pc, #56]	; (80119b8 <VL53LX_RdWord+0x7c>)
 801197e:	68f8      	ldr	r0, [r7, #12]
 8011980:	f7ff fecd 	bl	801171e <_I2CRead>
 8011984:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011986:	693b      	ldr	r3, [r7, #16]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d002      	beq.n	8011992 <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801198c:	23f3      	movs	r3, #243	; 0xf3
 801198e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011990:	e00b      	b.n	80119aa <VL53LX_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8011992:	4b09      	ldr	r3, [pc, #36]	; (80119b8 <VL53LX_RdWord+0x7c>)
 8011994:	781b      	ldrb	r3, [r3, #0]
 8011996:	b29b      	uxth	r3, r3
 8011998:	021b      	lsls	r3, r3, #8
 801199a:	b29a      	uxth	r2, r3
 801199c:	4b06      	ldr	r3, [pc, #24]	; (80119b8 <VL53LX_RdWord+0x7c>)
 801199e:	785b      	ldrb	r3, [r3, #1]
 80119a0:	b29b      	uxth	r3, r3
 80119a2:	4413      	add	r3, r2
 80119a4:	b29a      	uxth	r2, r3
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 80119aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3718      	adds	r7, #24
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}
 80119b6:	bf00      	nop
 80119b8:	200071ec 	.word	0x200071ec

080119bc <VL53LX_GetTickCount>:
    VL53LX_PutI2cBus();
    return Status;
}

VL53LX_Error VL53LX_GetTickCount(VL53LX_DEV Dev, uint32_t *ptick_count_ms)
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b084      	sub	sp, #16
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
 80119c4:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 80119c6:	2300      	movs	r3, #0
 80119c8:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	695b      	ldr	r3, [r3, #20]
 80119ce:	4798      	blx	r3
 80119d0:	4603      	mov	r3, r0
 80119d2:	461a      	mov	r2, r3
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 80119d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80119dc:	4618      	mov	r0, r3
 80119de:	3710      	adds	r7, #16
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}

080119e4 <VL53LX_WaitMs>:
	
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitMs(VL53LX_DEV Dev, int32_t wait_ms){
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b082      	sub	sp, #8
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_ms);
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	4619      	mov	r1, r3
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f000 f8b8 	bl	8011b68 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 80119f8:	2300      	movs	r3, #0
}
 80119fa:	4618      	mov	r0, r3
 80119fc:	3708      	adds	r7, #8
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd80      	pop	{r7, pc}
	...

08011a04 <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_DEV Dev, int32_t wait_us){
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b082      	sub	sp, #8
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
 8011a0c:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_us/1000);
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	4a07      	ldr	r2, [pc, #28]	; (8011a30 <VL53LX_WaitUs+0x2c>)
 8011a12:	fb82 1203 	smull	r1, r2, r2, r3
 8011a16:	1192      	asrs	r2, r2, #6
 8011a18:	17db      	asrs	r3, r3, #31
 8011a1a:	1ad3      	subs	r3, r2, r3
 8011a1c:	4619      	mov	r1, r3
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f000 f8a2 	bl	8011b68 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8011a24:	2300      	movs	r3, #0
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3708      	adds	r7, #8
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	10624dd3 	.word	0x10624dd3

08011a34 <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8011a34:	b590      	push	{r4, r7, lr}
 8011a36:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8011a3a:	af00      	add	r7, sp, #0
 8011a3c:	f107 040c 	add.w	r4, r7, #12
 8011a40:	6020      	str	r0, [r4, #0]
 8011a42:	f107 0008 	add.w	r0, r7, #8
 8011a46:	6001      	str	r1, [r0, #0]
 8011a48:	4619      	mov	r1, r3
 8011a4a:	1dbb      	adds	r3, r7, #6
 8011a4c:	801a      	strh	r2, [r3, #0]
 8011a4e:	1d7b      	adds	r3, r7, #5
 8011a50:	460a      	mov	r2, r1
 8011a52:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8011a54:	2300      	movs	r3, #0
 8011a56:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8011a60:	2300      	movs	r3, #0
 8011a62:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8011a66:	2300      	movs	r3, #0
 8011a68:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8011a72:	2300      	movs	r3, #0
 8011a74:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 8011a78:	f107 0310 	add.w	r3, r7, #16
 8011a7c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011a80:	4938      	ldr	r1, [pc, #224]	; (8011b64 <VL53LX_WaitValueMaskEx+0x130>)
 8011a82:	4618      	mov	r0, r3
 8011a84:	f003 f95a 	bl	8014d3c <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(Dev, &start_time_ms);
 8011a88:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8011a8c:	f107 030c 	add.w	r3, r7, #12
 8011a90:	4611      	mov	r1, r2
 8011a92:	6818      	ldr	r0, [r3, #0]
 8011a94:	f7ff ff92 	bl	80119bc <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 8011a98:	e042      	b.n	8011b20 <VL53LX_WaitValueMaskEx+0xec>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 8011a9a:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d10b      	bne.n	8011aba <VL53LX_WaitValueMaskEx+0x86>
			status = VL53LX_RdByte(
 8011aa2:	f207 2213 	addw	r2, r7, #531	; 0x213
 8011aa6:	1dbb      	adds	r3, r7, #6
 8011aa8:	8819      	ldrh	r1, [r3, #0]
 8011aaa:	f107 030c 	add.w	r3, r7, #12
 8011aae:	6818      	ldr	r0, [r3, #0]
 8011ab0:	f7ff ff10 	bl	80118d4 <VL53LX_RdByte>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8011aba:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8011abe:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8011ac2:	4013      	ands	r3, r2
 8011ac4:	b2db      	uxtb	r3, r3
 8011ac6:	1d7a      	adds	r2, r7, #5
 8011ac8:	7812      	ldrb	r2, [r2, #0]
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d102      	bne.n	8011ad4 <VL53LX_WaitValueMaskEx+0xa0>
			found = 1;
 8011ace:	2301      	movs	r3, #1
 8011ad0:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 8011ad4:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d112      	bne.n	8011b02 <VL53LX_WaitValueMaskEx+0xce>
 8011adc:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d10e      	bne.n	8011b02 <VL53LX_WaitValueMaskEx+0xce>
			found == 0 &&
 8011ae4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d00a      	beq.n	8011b02 <VL53LX_WaitValueMaskEx+0xce>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 8011aec:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8011af0:	f107 030c 	add.w	r3, r7, #12
 8011af4:	4611      	mov	r1, r2
 8011af6:	6818      	ldr	r0, [r3, #0]
 8011af8:	f7ff ff74 	bl	80119e4 <VL53LX_WaitMs>
 8011afc:	4603      	mov	r3, r0
 8011afe:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(Dev, &current_time_ms);
 8011b02:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8011b06:	f107 030c 	add.w	r3, r7, #12
 8011b0a:	4611      	mov	r1, r2
 8011b0c:	6818      	ldr	r0, [r3, #0]
 8011b0e:	f7ff ff55 	bl	80119bc <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8011b12:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8011b16:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011b1a:	1ad3      	subs	r3, r2, r3
 8011b1c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53LX_ERROR_NONE) &&
 8011b20:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d10a      	bne.n	8011b3e <VL53LX_WaitValueMaskEx+0x10a>
 8011b28:	f107 0308 	add.w	r3, r7, #8
 8011b2c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d203      	bcs.n	8011b3e <VL53LX_WaitValueMaskEx+0x10a>
		   (polling_time_ms < timeout_ms) &&
 8011b36:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d0ad      	beq.n	8011a9a <VL53LX_WaitValueMaskEx+0x66>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 8011b3e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d106      	bne.n	8011b54 <VL53LX_WaitValueMaskEx+0x120>
 8011b46:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d102      	bne.n	8011b54 <VL53LX_WaitValueMaskEx+0x120>
		status = VL53LX_ERROR_TIME_OUT;
 8011b4e:	23f9      	movs	r3, #249	; 0xf9
 8011b50:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8011b54:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd90      	pop	{r4, r7, pc}
 8011b62:	bf00      	nop
 8011b64:	08015dbc 	.word	0x08015dbc

08011b68 <VL53LX_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53LX_Error
  */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b084      	sub	sp, #16
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	695b      	ldr	r3, [r3, #20]
 8011b76:	4798      	blx	r3
 8011b78:	4603      	mov	r3, r0
 8011b7a:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8011b7c:	bf00      	nop
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	695b      	ldr	r3, [r3, #20]
 8011b82:	4798      	blx	r3
 8011b84:	4603      	mov	r3, r0
 8011b86:	461a      	mov	r2, r3
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	1ad3      	subs	r3, r2, r3
 8011b8c:	683a      	ldr	r2, [r7, #0]
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d8f5      	bhi.n	8011b7e <VL53LX_Delay+0x16>
  {
  }

  return VL53LX_ERROR_NONE;
 8011b92:	2300      	movs	r3, #0
}
 8011b94:	4618      	mov	r0, r3
 8011b96:	3710      	adds	r7, #16
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}

08011b9c <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b08c      	sub	sp, #48	; 0x30
 8011ba0:	af06      	add	r7, sp, #24
 8011ba2:	60f8      	str	r0, [r7, #12]
 8011ba4:	60b9      	str	r1, [r7, #8]
 8011ba6:	607a      	str	r2, [r7, #4]
 8011ba8:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8011baa:	2300      	movs	r3, #0
 8011bac:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 8011bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb0:	9304      	str	r3, [sp, #16]
 8011bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bb4:	9303      	str	r3, [sp, #12]
 8011bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb8:	9302      	str	r3, [sp, #8]
 8011bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bbc:	9301      	str	r3, [sp, #4]
 8011bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc0:	9300      	str	r3, [sp, #0]
 8011bc2:	6a3b      	ldr	r3, [r7, #32]
 8011bc4:	683a      	ldr	r2, [r7, #0]
 8011bc6:	6879      	ldr	r1, [r7, #4]
 8011bc8:	68b8      	ldr	r0, [r7, #8]
 8011bca:	f7fd f98c 	bl	800eee6 <VL53LX_hist_process_data>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8011bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3718      	adds	r7, #24
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}

08011bde <VL53L3CX_RegisterBusIO>:
  * @param pObj    vl53l3cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_RegisterBusIO(VL53L3CX_Object_t *pObj, VL53L3CX_IO_t *pIO)
{
 8011bde:	b580      	push	{r7, lr}
 8011be0:	b084      	sub	sp, #16
 8011be2:	af00      	add	r7, sp, #0
 8011be4:	6078      	str	r0, [r7, #4]
 8011be6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d103      	bne.n	8011bf6 <VL53L3CX_RegisterBusIO+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011bee:	f06f 0301 	mvn.w	r3, #1
 8011bf2:	60fb      	str	r3, [r7, #12]
 8011bf4:	e023      	b.n	8011c3e <VL53L3CX_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	685a      	ldr	r2, [r3, #4]
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	891a      	ldrh	r2, [r3, #8]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	68da      	ldr	r2, [r3, #12]
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	691a      	ldr	r2, [r3, #16]
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	695a      	ldr	r2, [r3, #20]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d004      	beq.n	8011c38 <VL53L3CX_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	4798      	blx	r3
 8011c34:	60f8      	str	r0, [r7, #12]
 8011c36:	e002      	b.n	8011c3e <VL53L3CX_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L3CX_ERROR;
 8011c38:	f04f 33ff 	mov.w	r3, #4294967295
 8011c3c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011c3e:	68fb      	ldr	r3, [r7, #12]
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	3710      	adds	r7, #16
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}

08011c48 <VL53L3CX_Init>:
  * @brief Initializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Init(VL53L3CX_Object_t *pObj)
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b084      	sub	sp, #16
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011c56:	3328      	adds	r3, #40	; 0x28
 8011c58:	781b      	ldrb	r3, [r3, #0]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d003      	beq.n	8011c66 <VL53L3CX_Init+0x1e>
  {
    ret =  VL53L3CX_ERROR;
 8011c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011c62:	60fb      	str	r3, [r7, #12]
 8011c64:	e043      	b.n	8011cee <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_WaitDeviceBooted(pObj) != VL53LX_ERROR_NONE)
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f7f0 fcb8 	bl	80025dc <VL53LX_WaitDeviceBooted>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d003      	beq.n	8011c7a <VL53L3CX_Init+0x32>
  {
    ret =  VL53L3CX_ERROR;
 8011c72:	f04f 33ff 	mov.w	r3, #4294967295
 8011c76:	60fb      	str	r3, [r7, #12]
 8011c78:	e039      	b.n	8011cee <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_DataInit(pObj) != VL53LX_ERROR_NONE)
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f7f0 fc53 	bl	8002526 <VL53LX_DataInit>
 8011c80:	4603      	mov	r3, r0
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d003      	beq.n	8011c8e <VL53L3CX_Init+0x46>
  {
    ret = VL53L3CX_ERROR;
 8011c86:	f04f 33ff 	mov.w	r3, #4294967295
 8011c8a:	60fb      	str	r3, [r7, #12]
 8011c8c:	e02f      	b.n	8011cee <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_PerformRefSpadManagement(pObj) != VL53LX_ERROR_NONE)
 8011c8e:	6878      	ldr	r0, [r7, #4]
 8011c90:	f7f1 fb46 	bl	8003320 <VL53LX_PerformRefSpadManagement>
 8011c94:	4603      	mov	r3, r0
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d003      	beq.n	8011ca2 <VL53L3CX_Init+0x5a>
  {
    ret = VL53L3CX_ERROR;
 8011c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8011c9e:	60fb      	str	r3, [r7, #12]
 8011ca0:	e025      	b.n	8011cee <VL53L3CX_Init+0xa6>
  }
  else
  {
    pObj->IsRanging = 0;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011ca8:	3329      	adds	r3, #41	; 0x29
 8011caa:	2200      	movs	r2, #0
 8011cac:	701a      	strb	r2, [r3, #0]
    pObj->IsBlocking = 0;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011cb4:	332a      	adds	r3, #42	; 0x2a
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	701a      	strb	r2, [r3, #0]
    pObj->IsContinuous = 0;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011cc0:	332b      	adds	r3, #43	; 0x2b
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	701a      	strb	r2, [r3, #0]
    pObj->IsAmbientEnabled = 0;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011ccc:	332c      	adds	r3, #44	; 0x2c
 8011cce:	2200      	movs	r2, #0
 8011cd0:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = 0;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011cd8:	332d      	adds	r3, #45	; 0x2d
 8011cda:	2200      	movs	r2, #0
 8011cdc:	701a      	strb	r2, [r3, #0]
    pObj->IsInitialized = 1;
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011ce4:	3328      	adds	r3, #40	; 0x28
 8011ce6:	2201      	movs	r2, #1
 8011ce8:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8011cea:	2300      	movs	r3, #0
 8011cec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011cee:	68fb      	ldr	r3, [r7, #12]
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3710      	adds	r7, #16
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <VL53L3CX_DeInit>:
  * @brief Deinitializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_DeInit(VL53L3CX_Object_t *pObj)
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b084      	sub	sp, #16
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L3CX_ERROR;
 8011d00:	f04f 33ff 	mov.w	r3, #4294967295
 8011d04:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011d0c:	3328      	adds	r3, #40	; 0x28
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	2b01      	cmp	r3, #1
 8011d12:	d111      	bne.n	8011d38 <VL53L3CX_DeInit+0x40>
  {
    /* De-initialize the vl53l3cx interface */
    if (pObj->IO.DeInit() != 0)
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	685b      	ldr	r3, [r3, #4]
 8011d18:	4798      	blx	r3
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d003      	beq.n	8011d28 <VL53L3CX_DeInit+0x30>
    {
      ret = VL53L3CX_ERROR;
 8011d20:	f04f 33ff 	mov.w	r3, #4294967295
 8011d24:	60fb      	str	r3, [r7, #12]
 8011d26:	e007      	b.n	8011d38 <VL53L3CX_DeInit+0x40>
    }
    else
    {
      ret = VL53L3CX_OK;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011d32:	3328      	adds	r3, #40	; 0x28
 8011d34:	2200      	movs	r2, #0
 8011d36:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8011d38:	68fb      	ldr	r3, [r7, #12]
}
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	3710      	adds	r7, #16
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}

08011d42 <VL53L3CX_ReadID>:
  * @param pObj    vl53l3cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ReadID(VL53L3CX_Object_t *pObj, uint32_t *pId)
{
 8011d42:	b580      	push	{r7, lr}
 8011d44:	b084      	sub	sp, #16
 8011d46:	af00      	add	r7, sp, #0
 8011d48:	6078      	str	r0, [r7, #4]
 8011d4a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d002      	beq.n	8011d58 <VL53L3CX_ReadID+0x16>
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d103      	bne.n	8011d60 <VL53L3CX_ReadID+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011d58:	f06f 0301 	mvn.w	r3, #1
 8011d5c:	60fb      	str	r3, [r7, #12]
 8011d5e:	e00a      	b.n	8011d76 <VL53L3CX_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	2200      	movs	r2, #0
 8011d64:	601a      	str	r2, [r3, #0]
    ret = VL53LX_RdWord(pObj, VL53L3CX_ID_REG, (uint16_t *) pId);
 8011d66:	683a      	ldr	r2, [r7, #0]
 8011d68:	f240 110f 	movw	r1, #271	; 0x10f
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f7ff fde5 	bl	801193c <VL53LX_RdWord>
 8011d72:	4603      	mov	r3, r0
 8011d74:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011d76:	68fb      	ldr	r3, [r7, #12]
}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3710      	adds	r7, #16
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}

08011d80 <VL53L3CX_GetCapabilities>:
  * @param pObj    vl53l3cx context object.
  * @param pCap    Pointer to the vl53l3cx capabilities.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetCapabilities(VL53L3CX_Object_t *pObj, VL53L3CX_Capabilities_t *pCap)
{
 8011d80:	b480      	push	{r7}
 8011d82:	b085      	sub	sp, #20
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
 8011d88:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d002      	beq.n	8011d96 <VL53L3CX_GetCapabilities+0x16>
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d103      	bne.n	8011d9e <VL53L3CX_GetCapabilities+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011d96:	f06f 0301 	mvn.w	r3, #1
 8011d9a:	60fb      	str	r3, [r7, #12]
 8011d9c:	e00d      	b.n	8011dba <VL53L3CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	2201      	movs	r2, #1
 8011da2:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L3CX_NB_TARGET_PER_ZONE;
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	2204      	movs	r2, #4
 8011da8:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	2201      	movs	r2, #1
 8011dae:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	2200      	movs	r2, #0
 8011db4:	60da      	str	r2, [r3, #12]

    ret = VL53L3CX_OK;
 8011db6:	2300      	movs	r3, #0
 8011db8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011dba:	68fb      	ldr	r3, [r7, #12]
}
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	3714      	adds	r7, #20
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc6:	4770      	bx	lr

08011dc8 <VL53L3CX_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L3CX the profile corresponds to the distance modes.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigProfile(VL53L3CX_Object_t *pObj, VL53L3CX_ProfileConfig_t *pConfig)
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b084      	sub	sp, #16
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d009      	beq.n	8011dec <VL53L3CX_ConfigProfile+0x24>
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d006      	beq.n	8011dec <VL53L3CX_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L3CX_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 8011de4:	7afb      	ldrb	r3, [r7, #11]
 8011de6:	2b01      	cmp	r3, #1
 8011de8:	d103      	bne.n	8011df2 <VL53L3CX_ConfigProfile+0x2a>
 8011dea:	e00c      	b.n	8011e06 <VL53L3CX_ConfigProfile+0x3e>
    return VL53L3CX_INVALID_PARAM;
 8011dec:	f06f 0301 	mvn.w	r3, #1
 8011df0:	e043      	b.n	8011e7a <VL53L3CX_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 8011df2:	7afb      	ldrb	r3, [r7, #11]
 8011df4:	2b02      	cmp	r3, #2
 8011df6:	d006      	beq.n	8011e06 <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_MEDIUM) &&
 8011df8:	7afb      	ldrb	r3, [r7, #11]
 8011dfa:	2b03      	cmp	r3, #3
 8011dfc:	d003      	beq.n	8011e06 <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_LONG))
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011dfe:	f06f 0301 	mvn.w	r3, #1
 8011e02:	60fb      	str	r3, [r7, #12]
 8011e04:	e038      	b.n	8011e78 <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetDistanceMode(pObj, ranging_profile) != VL53LX_ERROR_NONE)
 8011e06:	7afb      	ldrb	r3, [r7, #11]
 8011e08:	4619      	mov	r1, r3
 8011e0a:	6878      	ldr	r0, [r7, #4]
 8011e0c:	f7f0 fcc9 	bl	80027a2 <VL53LX_SetDistanceMode>
 8011e10:	4603      	mov	r3, r0
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d003      	beq.n	8011e1e <VL53L3CX_ConfigProfile+0x56>
  {
    ret = VL53L3CX_ERROR;
 8011e16:	f04f 33ff 	mov.w	r3, #4294967295
 8011e1a:	60fb      	str	r3, [r7, #12]
 8011e1c:	e02c      	b.n	8011e78 <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53LX_ERROR_NONE)
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	685b      	ldr	r3, [r3, #4]
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
 8011e22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011e26:	fb02 f303 	mul.w	r3, r2, r3
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	6878      	ldr	r0, [r7, #4]
 8011e2e:	f7f0 fd1f 	bl	8002870 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8011e32:	4603      	mov	r3, r0
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d003      	beq.n	8011e40 <VL53L3CX_ConfigProfile+0x78>
  {
    ret = VL53L3CX_ERROR;
 8011e38:	f04f 33ff 	mov.w	r3, #4294967295
 8011e3c:	60fb      	str	r3, [r7, #12]
 8011e3e:	e01b      	b.n	8011e78 <VL53L3CX_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	68db      	ldr	r3, [r3, #12]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	bf14      	ite	ne
 8011e48:	2301      	movne	r3, #1
 8011e4a:	2300      	moveq	r3, #0
 8011e4c:	b2db      	uxtb	r3, r3
 8011e4e:	461a      	mov	r2, r3
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011e56:	332c      	adds	r3, #44	; 0x2c
 8011e58:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	691b      	ldr	r3, [r3, #16]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	bf14      	ite	ne
 8011e62:	2301      	movne	r3, #1
 8011e64:	2300      	moveq	r3, #0
 8011e66:	b2db      	uxtb	r3, r3
 8011e68:	461a      	mov	r2, r3
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011e70:	332d      	adds	r3, #45	; 0x2d
 8011e72:	701a      	strb	r2, [r3, #0]

    ret = VL53L3CX_OK;
 8011e74:	2300      	movs	r3, #0
 8011e76:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011e78:	68fb      	ldr	r3, [r7, #12]
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	3710      	adds	r7, #16
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}

08011e82 <VL53L3CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigROI(VL53L3CX_Object_t *pObj, VL53L3CX_ROIConfig_t *pROIConfig)
{
 8011e82:	b580      	push	{r7, lr}
 8011e84:	b084      	sub	sp, #16
 8011e86:	af00      	add	r7, sp, #0
 8011e88:	6078      	str	r0, [r7, #4]
 8011e8a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53LX_UserRoi_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d002      	beq.n	8011e98 <VL53L3CX_ConfigROI+0x16>
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d103      	bne.n	8011ea0 <VL53L3CX_ConfigROI+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011e98:	f06f 0301 	mvn.w	r3, #1
 8011e9c:	60fb      	str	r3, [r7, #12]
 8011e9e:	e01a      	b.n	8011ed6 <VL53L3CX_ConfigROI+0x54>
  }
  else
  {
    roi_settings.BotRightX = pROIConfig->BotRightX;
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	789b      	ldrb	r3, [r3, #2]
 8011ea4:	72bb      	strb	r3, [r7, #10]
    roi_settings.BotRightY = pROIConfig->BotRightY;
 8011ea6:	683b      	ldr	r3, [r7, #0]
 8011ea8:	78db      	ldrb	r3, [r3, #3]
 8011eaa:	72fb      	strb	r3, [r7, #11]
    roi_settings.TopLeftX = pROIConfig->TopLeftX;
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	723b      	strb	r3, [r7, #8]
    roi_settings.TopLeftY = pROIConfig->TopLeftY;
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	785b      	ldrb	r3, [r3, #1]
 8011eb6:	727b      	strb	r3, [r7, #9]

    if (VL53LX_SetUserROI(pObj, &roi_settings) != VL53LX_ERROR_NONE)
 8011eb8:	f107 0308 	add.w	r3, r7, #8
 8011ebc:	4619      	mov	r1, r3
 8011ebe:	6878      	ldr	r0, [r7, #4]
 8011ec0:	f7f0 fd4e 	bl	8002960 <VL53LX_SetUserROI>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d003      	beq.n	8011ed2 <VL53L3CX_ConfigROI+0x50>
    {
      ret = VL53L3CX_ERROR;
 8011eca:	f04f 33ff 	mov.w	r3, #4294967295
 8011ece:	60fb      	str	r3, [r7, #12]
 8011ed0:	e001      	b.n	8011ed6 <VL53L3CX_ConfigROI+0x54>
    }
    else
    {
      ret = VL53L3CX_OK;
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	3710      	adds	r7, #16
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}

08011ee0 <VL53L3CX_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigIT(VL53L3CX_Object_t *pObj, VL53L3CX_ITConfig_t *pITConfig)
{
 8011ee0:	b480      	push	{r7}
 8011ee2:	b083      	sub	sp, #12
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L3CX_NOT_IMPLEMENTED;
 8011eea:	f06f 0303 	mvn.w	r3, #3
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	370c      	adds	r7, #12
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef8:	4770      	bx	lr

08011efa <VL53L3CX_GetDistance>:
  * @param pObj    vl53l3cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetDistance(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 8011efa:	b580      	push	{r7, lr}
 8011efc:	b084      	sub	sp, #16
 8011efe:	af00      	add	r7, sp, #0
 8011f00:	6078      	str	r0, [r7, #4]
 8011f02:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d002      	beq.n	8011f10 <VL53L3CX_GetDistance+0x16>
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d103      	bne.n	8011f18 <VL53L3CX_GetDistance+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011f10:	f06f 0301 	mvn.w	r3, #1
 8011f14:	60fb      	str	r3, [r7, #12]
 8011f16:	e01d      	b.n	8011f54 <VL53L3CX_GetDistance+0x5a>
  }
  else if (pObj->IsRanging == 0U)
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011f1e:	3329      	adds	r3, #41	; 0x29
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d103      	bne.n	8011f2e <VL53L3CX_GetDistance+0x34>
  {
    ret = VL53L3CX_ERROR;
 8011f26:	f04f 33ff 	mov.w	r3, #4294967295
 8011f2a:	60fb      	str	r3, [r7, #12]
 8011f2c:	e012      	b.n	8011f54 <VL53L3CX_GetDistance+0x5a>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011f34:	332a      	adds	r3, #42	; 0x2a
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	2b01      	cmp	r3, #1
 8011f3a:	d106      	bne.n	8011f4a <VL53L3CX_GetDistance+0x50>
    {
      ret = vl53l3cx_poll_for_measurement(pObj, V53L3CX_POLL_TIMEOUT);
 8011f3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f000 f92b 	bl	801219c <vl53l3cx_poll_for_measurement>
 8011f46:	60f8      	str	r0, [r7, #12]
 8011f48:	e004      	b.n	8011f54 <VL53L3CX_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l3cx_poll_for_measurement(pObj, 0U);
 8011f4a:	2100      	movs	r1, #0
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f000 f925 	bl	801219c <vl53l3cx_poll_for_measurement>
 8011f52:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L3CX_OK)
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d119      	bne.n	8011f8e <VL53L3CX_GetDistance+0x94>
  {
    /* retrieve measurements and fill result structure */
    if (vl53l3cx_get_result(pObj, pResult) != VL53L3CX_OK)
 8011f5a:	6839      	ldr	r1, [r7, #0]
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f000 f94b 	bl	80121f8 <vl53l3cx_get_result>
 8011f62:	4603      	mov	r3, r0
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d003      	beq.n	8011f70 <VL53L3CX_GetDistance+0x76>
    {
      ret = VL53L3CX_ERROR;
 8011f68:	f04f 33ff 	mov.w	r3, #4294967295
 8011f6c:	60fb      	str	r3, [r7, #12]
 8011f6e:	e00e      	b.n	8011f8e <VL53L3CX_GetDistance+0x94>
    }
    else if (pObj->IsContinuous == 1U)
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011f76:	332b      	adds	r3, #43	; 0x2b
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	2b01      	cmp	r3, #1
 8011f7c:	d105      	bne.n	8011f8a <VL53L3CX_GetDistance+0x90>
    {
      /* trigger new measurement if device configured in continuous mode */
      ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f7f0 fdbe 	bl	8002b00 <VL53LX_ClearInterruptAndStartMeasurement>
 8011f84:	4603      	mov	r3, r0
 8011f86:	60fb      	str	r3, [r7, #12]
 8011f88:	e001      	b.n	8011f8e <VL53L3CX_GetDistance+0x94>
    }
    else
    {
      ret = VL53L3CX_OK;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011f8e:	68fb      	ldr	r3, [r7, #12]
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	3710      	adds	r7, #16
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}

08011f98 <VL53L3CX_Start>:
  * @param pObj    vl53l3cx context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Start(VL53L3CX_Object_t *pObj, uint32_t Mode)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b084      	sub	sp, #16
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d103      	bne.n	8011fb0 <VL53L3CX_Start+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011fa8:	f06f 0301 	mvn.w	r3, #1
 8011fac:	60fb      	str	r3, [r7, #12]
 8011fae:	e068      	b.n	8012082 <VL53L3CX_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011fb6:	3329      	adds	r3, #41	; 0x29
 8011fb8:	781b      	ldrb	r3, [r3, #0]
 8011fba:	2b01      	cmp	r3, #1
 8011fbc:	d103      	bne.n	8011fc6 <VL53L3CX_Start+0x2e>
  {
    ret = VL53L3CX_ERROR;
 8011fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8011fc2:	60fb      	str	r3, [r7, #12]
 8011fc4:	e05d      	b.n	8012082 <VL53L3CX_Start+0xea>
  }
  else if (VL53LX_StartMeasurement(pObj) == VL53LX_ERROR_NONE)
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f7f0 fd38 	bl	8002a3c <VL53LX_StartMeasurement>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d154      	bne.n	801207c <VL53L3CX_Start+0xe4>
  {
    pObj->IsRanging = 1;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011fd8:	3329      	adds	r3, #41	; 0x29
 8011fda:	2201      	movs	r2, #1
 8011fdc:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8011fde:	2300      	movs	r3, #0
 8011fe0:	60fb      	str	r3, [r7, #12]
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	3b01      	subs	r3, #1
 8011fe6:	2b03      	cmp	r3, #3
 8011fe8:	d83e      	bhi.n	8012068 <VL53L3CX_Start+0xd0>
 8011fea:	a201      	add	r2, pc, #4	; (adr r2, 8011ff0 <VL53L3CX_Start+0x58>)
 8011fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ff0:	08012001 	.word	0x08012001
 8011ff4:	0801201b 	.word	0x0801201b
 8011ff8:	08012035 	.word	0x08012035
 8011ffc:	0801204f 	.word	0x0801204f

    switch (Mode)
    {
    case VL53L3CX_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8012006:	332b      	adds	r3, #43	; 0x2b
 8012008:	2201      	movs	r2, #1
 801200a:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8012012:	332a      	adds	r3, #42	; 0x2a
 8012014:	2201      	movs	r2, #1
 8012016:	701a      	strb	r2, [r3, #0]
      break;
 8012018:	e033      	b.n	8012082 <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8012020:	332b      	adds	r3, #43	; 0x2b
 8012022:	2200      	movs	r2, #0
 8012024:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801202c:	332a      	adds	r3, #42	; 0x2a
 801202e:	2201      	movs	r2, #1
 8012030:	701a      	strb	r2, [r3, #0]
      break;
 8012032:	e026      	b.n	8012082 <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801203a:	332b      	adds	r3, #43	; 0x2b
 801203c:	2201      	movs	r2, #1
 801203e:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8012046:	332a      	adds	r3, #42	; 0x2a
 8012048:	2200      	movs	r2, #0
 801204a:	701a      	strb	r2, [r3, #0]
      break;
 801204c:	e019      	b.n	8012082 <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8012054:	332b      	adds	r3, #43	; 0x2b
 8012056:	2200      	movs	r2, #0
 8012058:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8012060:	332a      	adds	r3, #42	; 0x2a
 8012062:	2200      	movs	r2, #0
 8012064:	701a      	strb	r2, [r3, #0]
      break;
 8012066:	e00c      	b.n	8012082 <VL53L3CX_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801206e:	3329      	adds	r3, #41	; 0x29
 8012070:	2200      	movs	r2, #0
 8012072:	701a      	strb	r2, [r3, #0]
      ret = VL53L3CX_INVALID_PARAM;
 8012074:	f06f 0301 	mvn.w	r3, #1
 8012078:	60fb      	str	r3, [r7, #12]
      break;
 801207a:	e002      	b.n	8012082 <VL53L3CX_Start+0xea>
    }
  }
  else
  {
    ret = VL53L3CX_ERROR;
 801207c:	f04f 33ff 	mov.w	r3, #4294967295
 8012080:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012082:	68fb      	ldr	r3, [r7, #12]
}
 8012084:	4618      	mov	r0, r3
 8012086:	3710      	adds	r7, #16
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}

0801208c <VL53L3CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Stop(VL53L3CX_Object_t *pObj)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b084      	sub	sp, #16
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d103      	bne.n	80120a2 <VL53L3CX_Stop+0x16>
  {
    ret = VL53L3CX_INVALID_PARAM;
 801209a:	f06f 0301 	mvn.w	r3, #1
 801209e:	60fb      	str	r3, [r7, #12]
 80120a0:	e01c      	b.n	80120dc <VL53L3CX_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80120a8:	3329      	adds	r3, #41	; 0x29
 80120aa:	781b      	ldrb	r3, [r3, #0]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d103      	bne.n	80120b8 <VL53L3CX_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L3CX_ERROR;
 80120b0:	f04f 33ff 	mov.w	r3, #4294967295
 80120b4:	60fb      	str	r3, [r7, #12]
 80120b6:	e011      	b.n	80120dc <VL53L3CX_Stop+0x50>
  }
  else if (VL53LX_StopMeasurement(pObj) == VL53LX_ERROR_NONE)
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f7f0 fd0d 	bl	8002ad8 <VL53LX_StopMeasurement>
 80120be:	4603      	mov	r3, r0
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d108      	bne.n	80120d6 <VL53L3CX_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80120ca:	3329      	adds	r3, #41	; 0x29
 80120cc:	2200      	movs	r2, #0
 80120ce:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 80120d0:	2300      	movs	r3, #0
 80120d2:	60fb      	str	r3, [r7, #12]
 80120d4:	e002      	b.n	80120dc <VL53L3CX_Stop+0x50>
  }
  else
  {
    ret = VL53L3CX_ERROR;
 80120d6:	f04f 33ff 	mov.w	r3, #4294967295
 80120da:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80120dc:	68fb      	ldr	r3, [r7, #12]
}
 80120de:	4618      	mov	r0, r3
 80120e0:	3710      	adds	r7, #16
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}

080120e6 <VL53L3CX_SetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param Address     New I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetAddress(VL53L3CX_Object_t *pObj, uint32_t Address)
{
 80120e6:	b580      	push	{r7, lr}
 80120e8:	b084      	sub	sp, #16
 80120ea:	af00      	add	r7, sp, #0
 80120ec:	6078      	str	r0, [r7, #4]
 80120ee:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d103      	bne.n	80120fe <VL53L3CX_SetAddress+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80120f6:	f06f 0301 	mvn.w	r3, #1
 80120fa:	60fb      	str	r3, [r7, #12]
 80120fc:	e012      	b.n	8012124 <VL53L3CX_SetAddress+0x3e>
  }
  else if (VL53LX_SetDeviceAddress(pObj, (uint8_t)Address) != VL53LX_ERROR_NONE)
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	b2db      	uxtb	r3, r3
 8012102:	4619      	mov	r1, r3
 8012104:	6878      	ldr	r0, [r7, #4]
 8012106:	f7f0 f9e7 	bl	80024d8 <VL53LX_SetDeviceAddress>
 801210a:	4603      	mov	r3, r0
 801210c:	2b00      	cmp	r3, #0
 801210e:	d003      	beq.n	8012118 <VL53L3CX_SetAddress+0x32>
  {
    ret = VL53L3CX_ERROR;
 8012110:	f04f 33ff 	mov.w	r3, #4294967295
 8012114:	60fb      	str	r3, [r7, #12]
 8012116:	e005      	b.n	8012124 <VL53L3CX_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	b29a      	uxth	r2, r3
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	811a      	strh	r2, [r3, #8]
    ret = VL53L3CX_OK;
 8012120:	2300      	movs	r3, #0
 8012122:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012124:	68fb      	ldr	r3, [r7, #12]
}
 8012126:	4618      	mov	r0, r3
 8012128:	3710      	adds	r7, #16
 801212a:	46bd      	mov	sp, r7
 801212c:	bd80      	pop	{r7, pc}

0801212e <VL53L3CX_GetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetAddress(VL53L3CX_Object_t *pObj, uint32_t *pAddress)
{
 801212e:	b480      	push	{r7}
 8012130:	b085      	sub	sp, #20
 8012132:	af00      	add	r7, sp, #0
 8012134:	6078      	str	r0, [r7, #4]
 8012136:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d002      	beq.n	8012144 <VL53L3CX_GetAddress+0x16>
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d103      	bne.n	801214c <VL53L3CX_GetAddress+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8012144:	f06f 0301 	mvn.w	r3, #1
 8012148:	60fb      	str	r3, [r7, #12]
 801214a:	e006      	b.n	801215a <VL53L3CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	891b      	ldrh	r3, [r3, #8]
 8012150:	461a      	mov	r2, r3
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	601a      	str	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8012156:	2300      	movs	r3, #0
 8012158:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801215a:	68fb      	ldr	r3, [r7, #12]
}
 801215c:	4618      	mov	r0, r3
 801215e:	3714      	adds	r7, #20
 8012160:	46bd      	mov	sp, r7
 8012162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012166:	4770      	bx	lr

08012168 <VL53L3CX_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetPowerMode(VL53L3CX_Object_t *pObj, uint32_t PowerMode)
{
 8012168:	b480      	push	{r7}
 801216a:	b083      	sub	sp, #12
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L3CX_NOT_IMPLEMENTED;
 8012172:	f06f 0303 	mvn.w	r3, #3
}
 8012176:	4618      	mov	r0, r3
 8012178:	370c      	adds	r7, #12
 801217a:	46bd      	mov	sp, r7
 801217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012180:	4770      	bx	lr

08012182 <VL53L3CX_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetPowerMode(VL53L3CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8012182:	b480      	push	{r7}
 8012184:	b083      	sub	sp, #12
 8012186:	af00      	add	r7, sp, #0
 8012188:	6078      	str	r0, [r7, #4]
 801218a:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L3CX_NOT_IMPLEMENTED;
 801218c:	f06f 0303 	mvn.w	r3, #3
}
 8012190:	4618      	mov	r0, r3
 8012192:	370c      	adds	r7, #12
 8012194:	46bd      	mov	sp, r7
 8012196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219a:	4770      	bx	lr

0801219c <vl53l3cx_poll_for_measurement>:
/** @defgroup VL53L3CX_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l3cx_poll_for_measurement(VL53L3CX_Object_t *pObj, uint32_t Timeout)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b084      	sub	sp, #16
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
 80121a4:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 80121a6:	2300      	movs	r3, #0
 80121a8:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d102      	bne.n	80121b6 <vl53l3cx_poll_for_measurement+0x1a>
  {
    return VL53L3CX_INVALID_PARAM;
 80121b0:	f06f 0301 	mvn.w	r3, #1
 80121b4:	e01b      	b.n	80121ee <vl53l3cx_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	695b      	ldr	r3, [r3, #20]
 80121ba:	4798      	blx	r3
 80121bc:	4603      	mov	r3, r0
 80121be:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53LX_GetMeasurementDataReady(pObj, &NewDataReady);
 80121c0:	f107 030b 	add.w	r3, r7, #11
 80121c4:	4619      	mov	r1, r3
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f7f0 fcb0 	bl	8002b2c <VL53LX_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 80121cc:	7afb      	ldrb	r3, [r7, #11]
 80121ce:	2b01      	cmp	r3, #1
 80121d0:	d101      	bne.n	80121d6 <vl53l3cx_poll_for_measurement+0x3a>
    {
      return VL53L3CX_OK;
 80121d2:	2300      	movs	r3, #0
 80121d4:	e00b      	b.n	80121ee <vl53l3cx_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	695b      	ldr	r3, [r3, #20]
 80121da:	4798      	blx	r3
 80121dc:	4603      	mov	r3, r0
 80121de:	461a      	mov	r2, r3
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	1ad3      	subs	r3, r2, r3
 80121e4:	683a      	ldr	r2, [r7, #0]
 80121e6:	429a      	cmp	r2, r3
 80121e8:	d8ea      	bhi.n	80121c0 <vl53l3cx_poll_for_measurement+0x24>

  return VL53L3CX_TIMEOUT;
 80121ea:	f06f 0302 	mvn.w	r3, #2
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	3710      	adds	r7, #16
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}
	...

080121f8 <vl53l3cx_get_result>:

static int32_t vl53l3cx_get_result(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 80121f8:	b590      	push	{r4, r7, lr}
 80121fa:	b09f      	sub	sp, #124	; 0x7c
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
 8012200:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53LX_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d002      	beq.n	801220e <vl53l3cx_get_result+0x16>
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d103      	bne.n	8012216 <vl53l3cx_get_result+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 801220e:	f06f 0301 	mvn.w	r3, #1
 8012212:	677b      	str	r3, [r7, #116]	; 0x74
 8012214:	e126      	b.n	8012464 <vl53l3cx_get_result+0x26c>
  }
  else if (VL53LX_GetMultiRangingData(pObj, &data) != VL53LX_ERROR_NONE)
 8012216:	f107 0308 	add.w	r3, r7, #8
 801221a:	4619      	mov	r1, r3
 801221c:	6878      	ldr	r0, [r7, #4]
 801221e:	f7f1 f858 	bl	80032d2 <VL53LX_GetMultiRangingData>
 8012222:	4603      	mov	r3, r0
 8012224:	2b00      	cmp	r3, #0
 8012226:	d003      	beq.n	8012230 <vl53l3cx_get_result+0x38>
  {
    ret = VL53L3CX_ERROR;
 8012228:	f04f 33ff 	mov.w	r3, #4294967295
 801222c:	677b      	str	r3, [r7, #116]	; 0x74
 801222e:	e119      	b.n	8012464 <vl53l3cx_get_result+0x26c>
  }
  else
  {
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 8012230:	2300      	movs	r3, #0
 8012232:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8012236:	e10b      	b.n	8012450 <vl53l3cx_get_result+0x258>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8012238:	7b7b      	ldrb	r3, [r7, #13]
 801223a:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 801223e:	4618      	mov	r0, r3
 8012240:	6839      	ldr	r1, [r7, #0]
 8012242:	4613      	mov	r3, r2
 8012244:	011b      	lsls	r3, r3, #4
 8012246:	4413      	add	r3, r2
 8012248:	009b      	lsls	r3, r3, #2
 801224a:	440b      	add	r3, r1
 801224c:	3304      	adds	r3, #4
 801224e:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8012250:	2300      	movs	r3, #0
 8012252:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8012256:	e0f0      	b.n	801243a <vl53l3cx_get_result+0x242>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8012258:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 801225c:	4613      	mov	r3, r2
 801225e:	009b      	lsls	r3, r3, #2
 8012260:	4413      	add	r3, r2
 8012262:	009b      	lsls	r3, r3, #2
 8012264:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012268:	4413      	add	r3, r2
 801226a:	3b58      	subs	r3, #88	; 0x58
 801226c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012270:	2b00      	cmp	r3, #0
 8012272:	da0d      	bge.n	8012290 <vl53l3cx_get_result+0x98>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8012274:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8012278:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 801227c:	6839      	ldr	r1, [r7, #0]
 801227e:	4613      	mov	r3, r2
 8012280:	011b      	lsls	r3, r3, #4
 8012282:	4413      	add	r3, r2
 8012284:	4403      	add	r3, r0
 8012286:	009b      	lsls	r3, r3, #2
 8012288:	440b      	add	r3, r1
 801228a:	2200      	movs	r2, #0
 801228c:	609a      	str	r2, [r3, #8]
 801228e:	e018      	b.n	80122c2 <vl53l3cx_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8012290:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8012294:	4613      	mov	r3, r2
 8012296:	009b      	lsls	r3, r3, #2
 8012298:	4413      	add	r3, r2
 801229a:	009b      	lsls	r3, r3, #2
 801229c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80122a0:	4413      	add	r3, r2
 80122a2:	3b58      	subs	r3, #88	; 0x58
 80122a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122a8:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80122ac:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 80122b0:	461c      	mov	r4, r3
 80122b2:	6839      	ldr	r1, [r7, #0]
 80122b4:	4613      	mov	r3, r2
 80122b6:	011b      	lsls	r3, r3, #4
 80122b8:	4413      	add	r3, r2
 80122ba:	4403      	add	r3, r0
 80122bc:	009b      	lsls	r3, r3, #2
 80122be:	440b      	add	r3, r1
 80122c0:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80122c8:	332c      	adds	r3, #44	; 0x2c
 80122ca:	781b      	ldrb	r3, [r3, #0]
 80122cc:	2b01      	cmp	r3, #1
 80122ce:	d137      	bne.n	8012340 <vl53l3cx_get_result+0x148>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 80122d0:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80122d4:	4613      	mov	r3, r2
 80122d6:	009b      	lsls	r3, r3, #2
 80122d8:	4413      	add	r3, r2
 80122da:	009b      	lsls	r3, r3, #2
 80122dc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80122e0:	4413      	add	r3, r2
 80122e2:	3b60      	subs	r3, #96	; 0x60
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	ee07 3a90 	vmov	s15, r3
 80122ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80122ee:	eddf 6a60 	vldr	s13, [pc, #384]	; 8012470 <vl53l3cx_get_result+0x278>
 80122f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80122f6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8012474 <vl53l3cx_get_result+0x27c>
 80122fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122fe:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8012302:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8012306:	0a1b      	lsrs	r3, r3, #8
 8012308:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 801230c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8012310:	ee07 3a90 	vmov	s15, r3
 8012314:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012318:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 801231c:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8012320:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8012324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012328:	6839      	ldr	r1, [r7, #0]
 801232a:	4613      	mov	r3, r2
 801232c:	011b      	lsls	r3, r3, #4
 801232e:	4413      	add	r3, r2
 8012330:	4403      	add	r3, r0
 8012332:	3308      	adds	r3, #8
 8012334:	009b      	lsls	r3, r3, #2
 8012336:	440b      	add	r3, r1
 8012338:	3308      	adds	r3, #8
 801233a:	edc3 7a00 	vstr	s15, [r3]
 801233e:	e00f      	b.n	8012360 <vl53l3cx_get_result+0x168>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8012340:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8012344:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8012348:	6839      	ldr	r1, [r7, #0]
 801234a:	4613      	mov	r3, r2
 801234c:	011b      	lsls	r3, r3, #4
 801234e:	4413      	add	r3, r2
 8012350:	4403      	add	r3, r0
 8012352:	3308      	adds	r3, #8
 8012354:	009b      	lsls	r3, r3, #2
 8012356:	440b      	add	r3, r1
 8012358:	3308      	adds	r3, #8
 801235a:	f04f 0200 	mov.w	r2, #0
 801235e:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8012366:	332d      	adds	r3, #45	; 0x2d
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	2b01      	cmp	r3, #1
 801236c:	d137      	bne.n	80123de <vl53l3cx_get_result+0x1e6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 801236e:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8012372:	4613      	mov	r3, r2
 8012374:	009b      	lsls	r3, r3, #2
 8012376:	4413      	add	r3, r2
 8012378:	009b      	lsls	r3, r3, #2
 801237a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801237e:	4413      	add	r3, r2
 8012380:	3b64      	subs	r3, #100	; 0x64
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	ee07 3a90 	vmov	s15, r3
 8012388:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801238c:	eddf 6a38 	vldr	s13, [pc, #224]	; 8012470 <vl53l3cx_get_result+0x278>
 8012390:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012394:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8012474 <vl53l3cx_get_result+0x27c>
 8012398:	ee67 7a87 	vmul.f32	s15, s15, s14
 801239c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
          spad_count = data.EffectiveSpadRtnCount >> 8;
 80123a0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80123a4:	0a1b      	lsrs	r3, r3, #8
 80123a6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 80123aa:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80123ae:	ee07 3a90 	vmov	s15, r3
 80123b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80123b6:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80123ba:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 80123be:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80123c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80123c6:	6839      	ldr	r1, [r7, #0]
 80123c8:	4613      	mov	r3, r2
 80123ca:	011b      	lsls	r3, r3, #4
 80123cc:	4413      	add	r3, r2
 80123ce:	4403      	add	r3, r0
 80123d0:	330c      	adds	r3, #12
 80123d2:	009b      	lsls	r3, r3, #2
 80123d4:	440b      	add	r3, r1
 80123d6:	3308      	adds	r3, #8
 80123d8:	edc3 7a00 	vstr	s15, [r3]
 80123dc:	e00f      	b.n	80123fe <vl53l3cx_get_result+0x206>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 80123de:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80123e2:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 80123e6:	6839      	ldr	r1, [r7, #0]
 80123e8:	4613      	mov	r3, r2
 80123ea:	011b      	lsls	r3, r3, #4
 80123ec:	4413      	add	r3, r2
 80123ee:	4403      	add	r3, r0
 80123f0:	330c      	adds	r3, #12
 80123f2:	009b      	lsls	r3, r3, #2
 80123f4:	440b      	add	r3, r1
 80123f6:	3308      	adds	r3, #8
 80123f8:	f04f 0200 	mov.w	r2, #0
 80123fc:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 80123fe:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8012402:	4613      	mov	r3, r2
 8012404:	009b      	lsls	r3, r3, #2
 8012406:	4413      	add	r3, r2
 8012408:	009b      	lsls	r3, r3, #2
 801240a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801240e:	4413      	add	r3, r2
 8012410:	3b56      	subs	r3, #86	; 0x56
 8012412:	781b      	ldrb	r3, [r3, #0]
 8012414:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8012418:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 801241c:	461c      	mov	r4, r3
 801241e:	6839      	ldr	r1, [r7, #0]
 8012420:	4613      	mov	r3, r2
 8012422:	011b      	lsls	r3, r3, #4
 8012424:	4413      	add	r3, r2
 8012426:	4403      	add	r3, r0
 8012428:	3304      	adds	r3, #4
 801242a:	009b      	lsls	r3, r3, #2
 801242c:	440b      	add	r3, r1
 801242e:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8012430:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8012434:	3301      	adds	r3, #1
 8012436:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 801243a:	7b7b      	ldrb	r3, [r7, #13]
 801243c:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8012440:	429a      	cmp	r2, r3
 8012442:	f4ff af09 	bcc.w	8012258 <vl53l3cx_get_result+0x60>
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 8012446:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801244a:	3301      	adds	r3, #1
 801244c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8012450:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8012454:	2b00      	cmp	r3, #0
 8012456:	f43f aeef 	beq.w	8012238 <vl53l3cx_get_result+0x40>
      }
    }

    pResult->NumberOfZones = VL53L3CX_MAX_NB_ZONES;
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	2201      	movs	r2, #1
 801245e:	601a      	str	r2, [r3, #0]

    ret = VL53L3CX_OK;
 8012460:	2300      	movs	r3, #0
 8012462:	677b      	str	r3, [r7, #116]	; 0x74
  }

  return ret;
 8012464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8012466:	4618      	mov	r0, r3
 8012468:	377c      	adds	r7, #124	; 0x7c
 801246a:	46bd      	mov	sp, r7
 801246c:	bd90      	pop	{r4, r7, pc}
 801246e:	bf00      	nop
 8012470:	47800000 	.word	0x47800000
 8012474:	447a0000 	.word	0x447a0000

08012478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801247c:	4b0e      	ldr	r3, [pc, #56]	; (80124b8 <HAL_Init+0x40>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	4a0d      	ldr	r2, [pc, #52]	; (80124b8 <HAL_Init+0x40>)
 8012482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8012488:	4b0b      	ldr	r3, [pc, #44]	; (80124b8 <HAL_Init+0x40>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	4a0a      	ldr	r2, [pc, #40]	; (80124b8 <HAL_Init+0x40>)
 801248e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8012494:	4b08      	ldr	r3, [pc, #32]	; (80124b8 <HAL_Init+0x40>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	4a07      	ldr	r2, [pc, #28]	; (80124b8 <HAL_Init+0x40>)
 801249a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801249e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80124a0:	2003      	movs	r0, #3
 80124a2:	f000 f931 	bl	8012708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80124a6:	2000      	movs	r0, #0
 80124a8:	f000 f808 	bl	80124bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80124ac:	f7ef f8bc 	bl	8001628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80124b0:	2300      	movs	r3, #0
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	bd80      	pop	{r7, pc}
 80124b6:	bf00      	nop
 80124b8:	40023c00 	.word	0x40023c00

080124bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b082      	sub	sp, #8
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80124c4:	4b12      	ldr	r3, [pc, #72]	; (8012510 <HAL_InitTick+0x54>)
 80124c6:	681a      	ldr	r2, [r3, #0]
 80124c8:	4b12      	ldr	r3, [pc, #72]	; (8012514 <HAL_InitTick+0x58>)
 80124ca:	781b      	ldrb	r3, [r3, #0]
 80124cc:	4619      	mov	r1, r3
 80124ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80124d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80124d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80124da:	4618      	mov	r0, r3
 80124dc:	f000 f93b 	bl	8012756 <HAL_SYSTICK_Config>
 80124e0:	4603      	mov	r3, r0
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d001      	beq.n	80124ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80124e6:	2301      	movs	r3, #1
 80124e8:	e00e      	b.n	8012508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	2b0f      	cmp	r3, #15
 80124ee:	d80a      	bhi.n	8012506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80124f0:	2200      	movs	r2, #0
 80124f2:	6879      	ldr	r1, [r7, #4]
 80124f4:	f04f 30ff 	mov.w	r0, #4294967295
 80124f8:	f000 f911 	bl	801271e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80124fc:	4a06      	ldr	r2, [pc, #24]	; (8012518 <HAL_InitTick+0x5c>)
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8012502:	2300      	movs	r3, #0
 8012504:	e000      	b.n	8012508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8012506:	2301      	movs	r3, #1
}
 8012508:	4618      	mov	r0, r3
 801250a:	3708      	adds	r7, #8
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}
 8012510:	20000018 	.word	0x20000018
 8012514:	20000084 	.word	0x20000084
 8012518:	20000080 	.word	0x20000080

0801251c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801251c:	b480      	push	{r7}
 801251e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8012520:	4b06      	ldr	r3, [pc, #24]	; (801253c <HAL_IncTick+0x20>)
 8012522:	781b      	ldrb	r3, [r3, #0]
 8012524:	461a      	mov	r2, r3
 8012526:	4b06      	ldr	r3, [pc, #24]	; (8012540 <HAL_IncTick+0x24>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	4413      	add	r3, r2
 801252c:	4a04      	ldr	r2, [pc, #16]	; (8012540 <HAL_IncTick+0x24>)
 801252e:	6013      	str	r3, [r2, #0]
}
 8012530:	bf00      	nop
 8012532:	46bd      	mov	sp, r7
 8012534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012538:	4770      	bx	lr
 801253a:	bf00      	nop
 801253c:	20000084 	.word	0x20000084
 8012540:	200073ec 	.word	0x200073ec

08012544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012544:	b480      	push	{r7}
 8012546:	af00      	add	r7, sp, #0
  return uwTick;
 8012548:	4b03      	ldr	r3, [pc, #12]	; (8012558 <HAL_GetTick+0x14>)
 801254a:	681b      	ldr	r3, [r3, #0]
}
 801254c:	4618      	mov	r0, r3
 801254e:	46bd      	mov	sp, r7
 8012550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012554:	4770      	bx	lr
 8012556:	bf00      	nop
 8012558:	200073ec 	.word	0x200073ec

0801255c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b084      	sub	sp, #16
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012564:	f7ff ffee 	bl	8012544 <HAL_GetTick>
 8012568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012574:	d005      	beq.n	8012582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8012576:	4b0a      	ldr	r3, [pc, #40]	; (80125a0 <HAL_Delay+0x44>)
 8012578:	781b      	ldrb	r3, [r3, #0]
 801257a:	461a      	mov	r2, r3
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	4413      	add	r3, r2
 8012580:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8012582:	bf00      	nop
 8012584:	f7ff ffde 	bl	8012544 <HAL_GetTick>
 8012588:	4602      	mov	r2, r0
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	1ad3      	subs	r3, r2, r3
 801258e:	68fa      	ldr	r2, [r7, #12]
 8012590:	429a      	cmp	r2, r3
 8012592:	d8f7      	bhi.n	8012584 <HAL_Delay+0x28>
  {
  }
}
 8012594:	bf00      	nop
 8012596:	bf00      	nop
 8012598:	3710      	adds	r7, #16
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}
 801259e:	bf00      	nop
 80125a0:	20000084 	.word	0x20000084

080125a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80125a4:	b480      	push	{r7}
 80125a6:	b085      	sub	sp, #20
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	f003 0307 	and.w	r3, r3, #7
 80125b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80125b4:	4b0c      	ldr	r3, [pc, #48]	; (80125e8 <__NVIC_SetPriorityGrouping+0x44>)
 80125b6:	68db      	ldr	r3, [r3, #12]
 80125b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80125ba:	68ba      	ldr	r2, [r7, #8]
 80125bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80125c0:	4013      	ands	r3, r2
 80125c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80125cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80125d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80125d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80125d6:	4a04      	ldr	r2, [pc, #16]	; (80125e8 <__NVIC_SetPriorityGrouping+0x44>)
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	60d3      	str	r3, [r2, #12]
}
 80125dc:	bf00      	nop
 80125de:	3714      	adds	r7, #20
 80125e0:	46bd      	mov	sp, r7
 80125e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e6:	4770      	bx	lr
 80125e8:	e000ed00 	.word	0xe000ed00

080125ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80125ec:	b480      	push	{r7}
 80125ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80125f0:	4b04      	ldr	r3, [pc, #16]	; (8012604 <__NVIC_GetPriorityGrouping+0x18>)
 80125f2:	68db      	ldr	r3, [r3, #12]
 80125f4:	0a1b      	lsrs	r3, r3, #8
 80125f6:	f003 0307 	and.w	r3, r3, #7
}
 80125fa:	4618      	mov	r0, r3
 80125fc:	46bd      	mov	sp, r7
 80125fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012602:	4770      	bx	lr
 8012604:	e000ed00 	.word	0xe000ed00

08012608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012608:	b480      	push	{r7}
 801260a:	b083      	sub	sp, #12
 801260c:	af00      	add	r7, sp, #0
 801260e:	4603      	mov	r3, r0
 8012610:	6039      	str	r1, [r7, #0]
 8012612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012618:	2b00      	cmp	r3, #0
 801261a:	db0a      	blt.n	8012632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	b2da      	uxtb	r2, r3
 8012620:	490c      	ldr	r1, [pc, #48]	; (8012654 <__NVIC_SetPriority+0x4c>)
 8012622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012626:	0112      	lsls	r2, r2, #4
 8012628:	b2d2      	uxtb	r2, r2
 801262a:	440b      	add	r3, r1
 801262c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012630:	e00a      	b.n	8012648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	b2da      	uxtb	r2, r3
 8012636:	4908      	ldr	r1, [pc, #32]	; (8012658 <__NVIC_SetPriority+0x50>)
 8012638:	79fb      	ldrb	r3, [r7, #7]
 801263a:	f003 030f 	and.w	r3, r3, #15
 801263e:	3b04      	subs	r3, #4
 8012640:	0112      	lsls	r2, r2, #4
 8012642:	b2d2      	uxtb	r2, r2
 8012644:	440b      	add	r3, r1
 8012646:	761a      	strb	r2, [r3, #24]
}
 8012648:	bf00      	nop
 801264a:	370c      	adds	r7, #12
 801264c:	46bd      	mov	sp, r7
 801264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012652:	4770      	bx	lr
 8012654:	e000e100 	.word	0xe000e100
 8012658:	e000ed00 	.word	0xe000ed00

0801265c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801265c:	b480      	push	{r7}
 801265e:	b089      	sub	sp, #36	; 0x24
 8012660:	af00      	add	r7, sp, #0
 8012662:	60f8      	str	r0, [r7, #12]
 8012664:	60b9      	str	r1, [r7, #8]
 8012666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	f003 0307 	and.w	r3, r3, #7
 801266e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012670:	69fb      	ldr	r3, [r7, #28]
 8012672:	f1c3 0307 	rsb	r3, r3, #7
 8012676:	2b04      	cmp	r3, #4
 8012678:	bf28      	it	cs
 801267a:	2304      	movcs	r3, #4
 801267c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801267e:	69fb      	ldr	r3, [r7, #28]
 8012680:	3304      	adds	r3, #4
 8012682:	2b06      	cmp	r3, #6
 8012684:	d902      	bls.n	801268c <NVIC_EncodePriority+0x30>
 8012686:	69fb      	ldr	r3, [r7, #28]
 8012688:	3b03      	subs	r3, #3
 801268a:	e000      	b.n	801268e <NVIC_EncodePriority+0x32>
 801268c:	2300      	movs	r3, #0
 801268e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012690:	f04f 32ff 	mov.w	r2, #4294967295
 8012694:	69bb      	ldr	r3, [r7, #24]
 8012696:	fa02 f303 	lsl.w	r3, r2, r3
 801269a:	43da      	mvns	r2, r3
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	401a      	ands	r2, r3
 80126a0:	697b      	ldr	r3, [r7, #20]
 80126a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80126a4:	f04f 31ff 	mov.w	r1, #4294967295
 80126a8:	697b      	ldr	r3, [r7, #20]
 80126aa:	fa01 f303 	lsl.w	r3, r1, r3
 80126ae:	43d9      	mvns	r1, r3
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80126b4:	4313      	orrs	r3, r2
         );
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	3724      	adds	r7, #36	; 0x24
 80126ba:	46bd      	mov	sp, r7
 80126bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c0:	4770      	bx	lr
	...

080126c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	3b01      	subs	r3, #1
 80126d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80126d4:	d301      	bcc.n	80126da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80126d6:	2301      	movs	r3, #1
 80126d8:	e00f      	b.n	80126fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80126da:	4a0a      	ldr	r2, [pc, #40]	; (8012704 <SysTick_Config+0x40>)
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	3b01      	subs	r3, #1
 80126e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80126e2:	210f      	movs	r1, #15
 80126e4:	f04f 30ff 	mov.w	r0, #4294967295
 80126e8:	f7ff ff8e 	bl	8012608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80126ec:	4b05      	ldr	r3, [pc, #20]	; (8012704 <SysTick_Config+0x40>)
 80126ee:	2200      	movs	r2, #0
 80126f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80126f2:	4b04      	ldr	r3, [pc, #16]	; (8012704 <SysTick_Config+0x40>)
 80126f4:	2207      	movs	r2, #7
 80126f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80126f8:	2300      	movs	r3, #0
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3708      	adds	r7, #8
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
 8012702:	bf00      	nop
 8012704:	e000e010 	.word	0xe000e010

08012708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b082      	sub	sp, #8
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f7ff ff47 	bl	80125a4 <__NVIC_SetPriorityGrouping>
}
 8012716:	bf00      	nop
 8012718:	3708      	adds	r7, #8
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}

0801271e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801271e:	b580      	push	{r7, lr}
 8012720:	b086      	sub	sp, #24
 8012722:	af00      	add	r7, sp, #0
 8012724:	4603      	mov	r3, r0
 8012726:	60b9      	str	r1, [r7, #8]
 8012728:	607a      	str	r2, [r7, #4]
 801272a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801272c:	2300      	movs	r3, #0
 801272e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8012730:	f7ff ff5c 	bl	80125ec <__NVIC_GetPriorityGrouping>
 8012734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012736:	687a      	ldr	r2, [r7, #4]
 8012738:	68b9      	ldr	r1, [r7, #8]
 801273a:	6978      	ldr	r0, [r7, #20]
 801273c:	f7ff ff8e 	bl	801265c <NVIC_EncodePriority>
 8012740:	4602      	mov	r2, r0
 8012742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012746:	4611      	mov	r1, r2
 8012748:	4618      	mov	r0, r3
 801274a:	f7ff ff5d 	bl	8012608 <__NVIC_SetPriority>
}
 801274e:	bf00      	nop
 8012750:	3718      	adds	r7, #24
 8012752:	46bd      	mov	sp, r7
 8012754:	bd80      	pop	{r7, pc}

08012756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012756:	b580      	push	{r7, lr}
 8012758:	b082      	sub	sp, #8
 801275a:	af00      	add	r7, sp, #0
 801275c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801275e:	6878      	ldr	r0, [r7, #4]
 8012760:	f7ff ffb0 	bl	80126c4 <SysTick_Config>
 8012764:	4603      	mov	r3, r0
}
 8012766:	4618      	mov	r0, r3
 8012768:	3708      	adds	r7, #8
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}
	...

08012770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012770:	b480      	push	{r7}
 8012772:	b089      	sub	sp, #36	; 0x24
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
 8012778:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801277a:	2300      	movs	r3, #0
 801277c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801277e:	2300      	movs	r3, #0
 8012780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8012782:	2300      	movs	r3, #0
 8012784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012786:	2300      	movs	r3, #0
 8012788:	61fb      	str	r3, [r7, #28]
 801278a:	e159      	b.n	8012a40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801278c:	2201      	movs	r2, #1
 801278e:	69fb      	ldr	r3, [r7, #28]
 8012790:	fa02 f303 	lsl.w	r3, r2, r3
 8012794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	697a      	ldr	r2, [r7, #20]
 801279c:	4013      	ands	r3, r2
 801279e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80127a0:	693a      	ldr	r2, [r7, #16]
 80127a2:	697b      	ldr	r3, [r7, #20]
 80127a4:	429a      	cmp	r2, r3
 80127a6:	f040 8148 	bne.w	8012a3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	685b      	ldr	r3, [r3, #4]
 80127ae:	f003 0303 	and.w	r3, r3, #3
 80127b2:	2b01      	cmp	r3, #1
 80127b4:	d005      	beq.n	80127c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	685b      	ldr	r3, [r3, #4]
 80127ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80127be:	2b02      	cmp	r3, #2
 80127c0:	d130      	bne.n	8012824 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	689b      	ldr	r3, [r3, #8]
 80127c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80127c8:	69fb      	ldr	r3, [r7, #28]
 80127ca:	005b      	lsls	r3, r3, #1
 80127cc:	2203      	movs	r2, #3
 80127ce:	fa02 f303 	lsl.w	r3, r2, r3
 80127d2:	43db      	mvns	r3, r3
 80127d4:	69ba      	ldr	r2, [r7, #24]
 80127d6:	4013      	ands	r3, r2
 80127d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	68da      	ldr	r2, [r3, #12]
 80127de:	69fb      	ldr	r3, [r7, #28]
 80127e0:	005b      	lsls	r3, r3, #1
 80127e2:	fa02 f303 	lsl.w	r3, r2, r3
 80127e6:	69ba      	ldr	r2, [r7, #24]
 80127e8:	4313      	orrs	r3, r2
 80127ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	69ba      	ldr	r2, [r7, #24]
 80127f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	685b      	ldr	r3, [r3, #4]
 80127f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80127f8:	2201      	movs	r2, #1
 80127fa:	69fb      	ldr	r3, [r7, #28]
 80127fc:	fa02 f303 	lsl.w	r3, r2, r3
 8012800:	43db      	mvns	r3, r3
 8012802:	69ba      	ldr	r2, [r7, #24]
 8012804:	4013      	ands	r3, r2
 8012806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	685b      	ldr	r3, [r3, #4]
 801280c:	091b      	lsrs	r3, r3, #4
 801280e:	f003 0201 	and.w	r2, r3, #1
 8012812:	69fb      	ldr	r3, [r7, #28]
 8012814:	fa02 f303 	lsl.w	r3, r2, r3
 8012818:	69ba      	ldr	r2, [r7, #24]
 801281a:	4313      	orrs	r3, r2
 801281c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	69ba      	ldr	r2, [r7, #24]
 8012822:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8012824:	683b      	ldr	r3, [r7, #0]
 8012826:	685b      	ldr	r3, [r3, #4]
 8012828:	f003 0303 	and.w	r3, r3, #3
 801282c:	2b03      	cmp	r3, #3
 801282e:	d017      	beq.n	8012860 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	68db      	ldr	r3, [r3, #12]
 8012834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012836:	69fb      	ldr	r3, [r7, #28]
 8012838:	005b      	lsls	r3, r3, #1
 801283a:	2203      	movs	r2, #3
 801283c:	fa02 f303 	lsl.w	r3, r2, r3
 8012840:	43db      	mvns	r3, r3
 8012842:	69ba      	ldr	r2, [r7, #24]
 8012844:	4013      	ands	r3, r2
 8012846:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	689a      	ldr	r2, [r3, #8]
 801284c:	69fb      	ldr	r3, [r7, #28]
 801284e:	005b      	lsls	r3, r3, #1
 8012850:	fa02 f303 	lsl.w	r3, r2, r3
 8012854:	69ba      	ldr	r2, [r7, #24]
 8012856:	4313      	orrs	r3, r2
 8012858:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	69ba      	ldr	r2, [r7, #24]
 801285e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	f003 0303 	and.w	r3, r3, #3
 8012868:	2b02      	cmp	r3, #2
 801286a:	d123      	bne.n	80128b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801286c:	69fb      	ldr	r3, [r7, #28]
 801286e:	08da      	lsrs	r2, r3, #3
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	3208      	adds	r2, #8
 8012874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801287a:	69fb      	ldr	r3, [r7, #28]
 801287c:	f003 0307 	and.w	r3, r3, #7
 8012880:	009b      	lsls	r3, r3, #2
 8012882:	220f      	movs	r2, #15
 8012884:	fa02 f303 	lsl.w	r3, r2, r3
 8012888:	43db      	mvns	r3, r3
 801288a:	69ba      	ldr	r2, [r7, #24]
 801288c:	4013      	ands	r3, r2
 801288e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012890:	683b      	ldr	r3, [r7, #0]
 8012892:	691a      	ldr	r2, [r3, #16]
 8012894:	69fb      	ldr	r3, [r7, #28]
 8012896:	f003 0307 	and.w	r3, r3, #7
 801289a:	009b      	lsls	r3, r3, #2
 801289c:	fa02 f303 	lsl.w	r3, r2, r3
 80128a0:	69ba      	ldr	r2, [r7, #24]
 80128a2:	4313      	orrs	r3, r2
 80128a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80128a6:	69fb      	ldr	r3, [r7, #28]
 80128a8:	08da      	lsrs	r2, r3, #3
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	3208      	adds	r2, #8
 80128ae:	69b9      	ldr	r1, [r7, #24]
 80128b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80128ba:	69fb      	ldr	r3, [r7, #28]
 80128bc:	005b      	lsls	r3, r3, #1
 80128be:	2203      	movs	r2, #3
 80128c0:	fa02 f303 	lsl.w	r3, r2, r3
 80128c4:	43db      	mvns	r3, r3
 80128c6:	69ba      	ldr	r2, [r7, #24]
 80128c8:	4013      	ands	r3, r2
 80128ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	685b      	ldr	r3, [r3, #4]
 80128d0:	f003 0203 	and.w	r2, r3, #3
 80128d4:	69fb      	ldr	r3, [r7, #28]
 80128d6:	005b      	lsls	r3, r3, #1
 80128d8:	fa02 f303 	lsl.w	r3, r2, r3
 80128dc:	69ba      	ldr	r2, [r7, #24]
 80128de:	4313      	orrs	r3, r2
 80128e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	69ba      	ldr	r2, [r7, #24]
 80128e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	685b      	ldr	r3, [r3, #4]
 80128ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	f000 80a2 	beq.w	8012a3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80128f6:	2300      	movs	r3, #0
 80128f8:	60fb      	str	r3, [r7, #12]
 80128fa:	4b57      	ldr	r3, [pc, #348]	; (8012a58 <HAL_GPIO_Init+0x2e8>)
 80128fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128fe:	4a56      	ldr	r2, [pc, #344]	; (8012a58 <HAL_GPIO_Init+0x2e8>)
 8012900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012904:	6453      	str	r3, [r2, #68]	; 0x44
 8012906:	4b54      	ldr	r3, [pc, #336]	; (8012a58 <HAL_GPIO_Init+0x2e8>)
 8012908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801290a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801290e:	60fb      	str	r3, [r7, #12]
 8012910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8012912:	4a52      	ldr	r2, [pc, #328]	; (8012a5c <HAL_GPIO_Init+0x2ec>)
 8012914:	69fb      	ldr	r3, [r7, #28]
 8012916:	089b      	lsrs	r3, r3, #2
 8012918:	3302      	adds	r3, #2
 801291a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012920:	69fb      	ldr	r3, [r7, #28]
 8012922:	f003 0303 	and.w	r3, r3, #3
 8012926:	009b      	lsls	r3, r3, #2
 8012928:	220f      	movs	r2, #15
 801292a:	fa02 f303 	lsl.w	r3, r2, r3
 801292e:	43db      	mvns	r3, r3
 8012930:	69ba      	ldr	r2, [r7, #24]
 8012932:	4013      	ands	r3, r2
 8012934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	4a49      	ldr	r2, [pc, #292]	; (8012a60 <HAL_GPIO_Init+0x2f0>)
 801293a:	4293      	cmp	r3, r2
 801293c:	d019      	beq.n	8012972 <HAL_GPIO_Init+0x202>
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	4a48      	ldr	r2, [pc, #288]	; (8012a64 <HAL_GPIO_Init+0x2f4>)
 8012942:	4293      	cmp	r3, r2
 8012944:	d013      	beq.n	801296e <HAL_GPIO_Init+0x1fe>
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	4a47      	ldr	r2, [pc, #284]	; (8012a68 <HAL_GPIO_Init+0x2f8>)
 801294a:	4293      	cmp	r3, r2
 801294c:	d00d      	beq.n	801296a <HAL_GPIO_Init+0x1fa>
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	4a46      	ldr	r2, [pc, #280]	; (8012a6c <HAL_GPIO_Init+0x2fc>)
 8012952:	4293      	cmp	r3, r2
 8012954:	d007      	beq.n	8012966 <HAL_GPIO_Init+0x1f6>
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	4a45      	ldr	r2, [pc, #276]	; (8012a70 <HAL_GPIO_Init+0x300>)
 801295a:	4293      	cmp	r3, r2
 801295c:	d101      	bne.n	8012962 <HAL_GPIO_Init+0x1f2>
 801295e:	2304      	movs	r3, #4
 8012960:	e008      	b.n	8012974 <HAL_GPIO_Init+0x204>
 8012962:	2307      	movs	r3, #7
 8012964:	e006      	b.n	8012974 <HAL_GPIO_Init+0x204>
 8012966:	2303      	movs	r3, #3
 8012968:	e004      	b.n	8012974 <HAL_GPIO_Init+0x204>
 801296a:	2302      	movs	r3, #2
 801296c:	e002      	b.n	8012974 <HAL_GPIO_Init+0x204>
 801296e:	2301      	movs	r3, #1
 8012970:	e000      	b.n	8012974 <HAL_GPIO_Init+0x204>
 8012972:	2300      	movs	r3, #0
 8012974:	69fa      	ldr	r2, [r7, #28]
 8012976:	f002 0203 	and.w	r2, r2, #3
 801297a:	0092      	lsls	r2, r2, #2
 801297c:	4093      	lsls	r3, r2
 801297e:	69ba      	ldr	r2, [r7, #24]
 8012980:	4313      	orrs	r3, r2
 8012982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012984:	4935      	ldr	r1, [pc, #212]	; (8012a5c <HAL_GPIO_Init+0x2ec>)
 8012986:	69fb      	ldr	r3, [r7, #28]
 8012988:	089b      	lsrs	r3, r3, #2
 801298a:	3302      	adds	r3, #2
 801298c:	69ba      	ldr	r2, [r7, #24]
 801298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012992:	4b38      	ldr	r3, [pc, #224]	; (8012a74 <HAL_GPIO_Init+0x304>)
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012998:	693b      	ldr	r3, [r7, #16]
 801299a:	43db      	mvns	r3, r3
 801299c:	69ba      	ldr	r2, [r7, #24]
 801299e:	4013      	ands	r3, r2
 80129a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	685b      	ldr	r3, [r3, #4]
 80129a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d003      	beq.n	80129b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80129ae:	69ba      	ldr	r2, [r7, #24]
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	4313      	orrs	r3, r2
 80129b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80129b6:	4a2f      	ldr	r2, [pc, #188]	; (8012a74 <HAL_GPIO_Init+0x304>)
 80129b8:	69bb      	ldr	r3, [r7, #24]
 80129ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80129bc:	4b2d      	ldr	r3, [pc, #180]	; (8012a74 <HAL_GPIO_Init+0x304>)
 80129be:	685b      	ldr	r3, [r3, #4]
 80129c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80129c2:	693b      	ldr	r3, [r7, #16]
 80129c4:	43db      	mvns	r3, r3
 80129c6:	69ba      	ldr	r2, [r7, #24]
 80129c8:	4013      	ands	r3, r2
 80129ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	685b      	ldr	r3, [r3, #4]
 80129d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d003      	beq.n	80129e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80129d8:	69ba      	ldr	r2, [r7, #24]
 80129da:	693b      	ldr	r3, [r7, #16]
 80129dc:	4313      	orrs	r3, r2
 80129de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80129e0:	4a24      	ldr	r2, [pc, #144]	; (8012a74 <HAL_GPIO_Init+0x304>)
 80129e2:	69bb      	ldr	r3, [r7, #24]
 80129e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80129e6:	4b23      	ldr	r3, [pc, #140]	; (8012a74 <HAL_GPIO_Init+0x304>)
 80129e8:	689b      	ldr	r3, [r3, #8]
 80129ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80129ec:	693b      	ldr	r3, [r7, #16]
 80129ee:	43db      	mvns	r3, r3
 80129f0:	69ba      	ldr	r2, [r7, #24]
 80129f2:	4013      	ands	r3, r2
 80129f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80129f6:	683b      	ldr	r3, [r7, #0]
 80129f8:	685b      	ldr	r3, [r3, #4]
 80129fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d003      	beq.n	8012a0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8012a02:	69ba      	ldr	r2, [r7, #24]
 8012a04:	693b      	ldr	r3, [r7, #16]
 8012a06:	4313      	orrs	r3, r2
 8012a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8012a0a:	4a1a      	ldr	r2, [pc, #104]	; (8012a74 <HAL_GPIO_Init+0x304>)
 8012a0c:	69bb      	ldr	r3, [r7, #24]
 8012a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012a10:	4b18      	ldr	r3, [pc, #96]	; (8012a74 <HAL_GPIO_Init+0x304>)
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012a16:	693b      	ldr	r3, [r7, #16]
 8012a18:	43db      	mvns	r3, r3
 8012a1a:	69ba      	ldr	r2, [r7, #24]
 8012a1c:	4013      	ands	r3, r2
 8012a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	685b      	ldr	r3, [r3, #4]
 8012a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d003      	beq.n	8012a34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8012a2c:	69ba      	ldr	r2, [r7, #24]
 8012a2e:	693b      	ldr	r3, [r7, #16]
 8012a30:	4313      	orrs	r3, r2
 8012a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012a34:	4a0f      	ldr	r2, [pc, #60]	; (8012a74 <HAL_GPIO_Init+0x304>)
 8012a36:	69bb      	ldr	r3, [r7, #24]
 8012a38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012a3a:	69fb      	ldr	r3, [r7, #28]
 8012a3c:	3301      	adds	r3, #1
 8012a3e:	61fb      	str	r3, [r7, #28]
 8012a40:	69fb      	ldr	r3, [r7, #28]
 8012a42:	2b0f      	cmp	r3, #15
 8012a44:	f67f aea2 	bls.w	801278c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8012a48:	bf00      	nop
 8012a4a:	bf00      	nop
 8012a4c:	3724      	adds	r7, #36	; 0x24
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a54:	4770      	bx	lr
 8012a56:	bf00      	nop
 8012a58:	40023800 	.word	0x40023800
 8012a5c:	40013800 	.word	0x40013800
 8012a60:	40020000 	.word	0x40020000
 8012a64:	40020400 	.word	0x40020400
 8012a68:	40020800 	.word	0x40020800
 8012a6c:	40020c00 	.word	0x40020c00
 8012a70:	40021000 	.word	0x40021000
 8012a74:	40013c00 	.word	0x40013c00

08012a78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8012a78:	b480      	push	{r7}
 8012a7a:	b087      	sub	sp, #28
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
 8012a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8012a82:	2300      	movs	r3, #0
 8012a84:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8012a86:	2300      	movs	r3, #0
 8012a88:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012a8e:	2300      	movs	r3, #0
 8012a90:	617b      	str	r3, [r7, #20]
 8012a92:	e0bb      	b.n	8012c0c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012a94:	2201      	movs	r2, #1
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	fa02 f303 	lsl.w	r3, r2, r3
 8012a9c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8012a9e:	683a      	ldr	r2, [r7, #0]
 8012aa0:	693b      	ldr	r3, [r7, #16]
 8012aa2:	4013      	ands	r3, r2
 8012aa4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8012aa6:	68fa      	ldr	r2, [r7, #12]
 8012aa8:	693b      	ldr	r3, [r7, #16]
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	f040 80ab 	bne.w	8012c06 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8012ab0:	4a5c      	ldr	r2, [pc, #368]	; (8012c24 <HAL_GPIO_DeInit+0x1ac>)
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	089b      	lsrs	r3, r3, #2
 8012ab6:	3302      	adds	r3, #2
 8012ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012abc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8012abe:	697b      	ldr	r3, [r7, #20]
 8012ac0:	f003 0303 	and.w	r3, r3, #3
 8012ac4:	009b      	lsls	r3, r3, #2
 8012ac6:	220f      	movs	r2, #15
 8012ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8012acc:	68ba      	ldr	r2, [r7, #8]
 8012ace:	4013      	ands	r3, r2
 8012ad0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	4a54      	ldr	r2, [pc, #336]	; (8012c28 <HAL_GPIO_DeInit+0x1b0>)
 8012ad6:	4293      	cmp	r3, r2
 8012ad8:	d019      	beq.n	8012b0e <HAL_GPIO_DeInit+0x96>
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	4a53      	ldr	r2, [pc, #332]	; (8012c2c <HAL_GPIO_DeInit+0x1b4>)
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	d013      	beq.n	8012b0a <HAL_GPIO_DeInit+0x92>
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	4a52      	ldr	r2, [pc, #328]	; (8012c30 <HAL_GPIO_DeInit+0x1b8>)
 8012ae6:	4293      	cmp	r3, r2
 8012ae8:	d00d      	beq.n	8012b06 <HAL_GPIO_DeInit+0x8e>
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	4a51      	ldr	r2, [pc, #324]	; (8012c34 <HAL_GPIO_DeInit+0x1bc>)
 8012aee:	4293      	cmp	r3, r2
 8012af0:	d007      	beq.n	8012b02 <HAL_GPIO_DeInit+0x8a>
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	4a50      	ldr	r2, [pc, #320]	; (8012c38 <HAL_GPIO_DeInit+0x1c0>)
 8012af6:	4293      	cmp	r3, r2
 8012af8:	d101      	bne.n	8012afe <HAL_GPIO_DeInit+0x86>
 8012afa:	2304      	movs	r3, #4
 8012afc:	e008      	b.n	8012b10 <HAL_GPIO_DeInit+0x98>
 8012afe:	2307      	movs	r3, #7
 8012b00:	e006      	b.n	8012b10 <HAL_GPIO_DeInit+0x98>
 8012b02:	2303      	movs	r3, #3
 8012b04:	e004      	b.n	8012b10 <HAL_GPIO_DeInit+0x98>
 8012b06:	2302      	movs	r3, #2
 8012b08:	e002      	b.n	8012b10 <HAL_GPIO_DeInit+0x98>
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	e000      	b.n	8012b10 <HAL_GPIO_DeInit+0x98>
 8012b0e:	2300      	movs	r3, #0
 8012b10:	697a      	ldr	r2, [r7, #20]
 8012b12:	f002 0203 	and.w	r2, r2, #3
 8012b16:	0092      	lsls	r2, r2, #2
 8012b18:	4093      	lsls	r3, r2
 8012b1a:	68ba      	ldr	r2, [r7, #8]
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d132      	bne.n	8012b86 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8012b20:	4b46      	ldr	r3, [pc, #280]	; (8012c3c <HAL_GPIO_DeInit+0x1c4>)
 8012b22:	681a      	ldr	r2, [r3, #0]
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	43db      	mvns	r3, r3
 8012b28:	4944      	ldr	r1, [pc, #272]	; (8012c3c <HAL_GPIO_DeInit+0x1c4>)
 8012b2a:	4013      	ands	r3, r2
 8012b2c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8012b2e:	4b43      	ldr	r3, [pc, #268]	; (8012c3c <HAL_GPIO_DeInit+0x1c4>)
 8012b30:	685a      	ldr	r2, [r3, #4]
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	43db      	mvns	r3, r3
 8012b36:	4941      	ldr	r1, [pc, #260]	; (8012c3c <HAL_GPIO_DeInit+0x1c4>)
 8012b38:	4013      	ands	r3, r2
 8012b3a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8012b3c:	4b3f      	ldr	r3, [pc, #252]	; (8012c3c <HAL_GPIO_DeInit+0x1c4>)
 8012b3e:	689a      	ldr	r2, [r3, #8]
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	43db      	mvns	r3, r3
 8012b44:	493d      	ldr	r1, [pc, #244]	; (8012c3c <HAL_GPIO_DeInit+0x1c4>)
 8012b46:	4013      	ands	r3, r2
 8012b48:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8012b4a:	4b3c      	ldr	r3, [pc, #240]	; (8012c3c <HAL_GPIO_DeInit+0x1c4>)
 8012b4c:	68da      	ldr	r2, [r3, #12]
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	43db      	mvns	r3, r3
 8012b52:	493a      	ldr	r1, [pc, #232]	; (8012c3c <HAL_GPIO_DeInit+0x1c4>)
 8012b54:	4013      	ands	r3, r2
 8012b56:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8012b58:	697b      	ldr	r3, [r7, #20]
 8012b5a:	f003 0303 	and.w	r3, r3, #3
 8012b5e:	009b      	lsls	r3, r3, #2
 8012b60:	220f      	movs	r2, #15
 8012b62:	fa02 f303 	lsl.w	r3, r2, r3
 8012b66:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8012b68:	4a2e      	ldr	r2, [pc, #184]	; (8012c24 <HAL_GPIO_DeInit+0x1ac>)
 8012b6a:	697b      	ldr	r3, [r7, #20]
 8012b6c:	089b      	lsrs	r3, r3, #2
 8012b6e:	3302      	adds	r3, #2
 8012b70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	43da      	mvns	r2, r3
 8012b78:	482a      	ldr	r0, [pc, #168]	; (8012c24 <HAL_GPIO_DeInit+0x1ac>)
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	089b      	lsrs	r3, r3, #2
 8012b7e:	400a      	ands	r2, r1
 8012b80:	3302      	adds	r3, #2
 8012b82:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681a      	ldr	r2, [r3, #0]
 8012b8a:	697b      	ldr	r3, [r7, #20]
 8012b8c:	005b      	lsls	r3, r3, #1
 8012b8e:	2103      	movs	r1, #3
 8012b90:	fa01 f303 	lsl.w	r3, r1, r3
 8012b94:	43db      	mvns	r3, r3
 8012b96:	401a      	ands	r2, r3
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	08da      	lsrs	r2, r3, #3
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	3208      	adds	r2, #8
 8012ba4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012ba8:	697b      	ldr	r3, [r7, #20]
 8012baa:	f003 0307 	and.w	r3, r3, #7
 8012bae:	009b      	lsls	r3, r3, #2
 8012bb0:	220f      	movs	r2, #15
 8012bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8012bb6:	43db      	mvns	r3, r3
 8012bb8:	697a      	ldr	r2, [r7, #20]
 8012bba:	08d2      	lsrs	r2, r2, #3
 8012bbc:	4019      	ands	r1, r3
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	3208      	adds	r2, #8
 8012bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	68da      	ldr	r2, [r3, #12]
 8012bca:	697b      	ldr	r3, [r7, #20]
 8012bcc:	005b      	lsls	r3, r3, #1
 8012bce:	2103      	movs	r1, #3
 8012bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8012bd4:	43db      	mvns	r3, r3
 8012bd6:	401a      	ands	r2, r3
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	685a      	ldr	r2, [r3, #4]
 8012be0:	2101      	movs	r1, #1
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	fa01 f303 	lsl.w	r3, r1, r3
 8012be8:	43db      	mvns	r3, r3
 8012bea:	401a      	ands	r2, r3
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	689a      	ldr	r2, [r3, #8]
 8012bf4:	697b      	ldr	r3, [r7, #20]
 8012bf6:	005b      	lsls	r3, r3, #1
 8012bf8:	2103      	movs	r1, #3
 8012bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8012bfe:	43db      	mvns	r3, r3
 8012c00:	401a      	ands	r2, r3
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012c06:	697b      	ldr	r3, [r7, #20]
 8012c08:	3301      	adds	r3, #1
 8012c0a:	617b      	str	r3, [r7, #20]
 8012c0c:	697b      	ldr	r3, [r7, #20]
 8012c0e:	2b0f      	cmp	r3, #15
 8012c10:	f67f af40 	bls.w	8012a94 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8012c14:	bf00      	nop
 8012c16:	bf00      	nop
 8012c18:	371c      	adds	r7, #28
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c20:	4770      	bx	lr
 8012c22:	bf00      	nop
 8012c24:	40013800 	.word	0x40013800
 8012c28:	40020000 	.word	0x40020000
 8012c2c:	40020400 	.word	0x40020400
 8012c30:	40020800 	.word	0x40020800
 8012c34:	40020c00 	.word	0x40020c00
 8012c38:	40021000 	.word	0x40021000
 8012c3c:	40013c00 	.word	0x40013c00

08012c40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8012c40:	b480      	push	{r7}
 8012c42:	b085      	sub	sp, #20
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
 8012c48:	460b      	mov	r3, r1
 8012c4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	691a      	ldr	r2, [r3, #16]
 8012c50:	887b      	ldrh	r3, [r7, #2]
 8012c52:	4013      	ands	r3, r2
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d002      	beq.n	8012c5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012c58:	2301      	movs	r3, #1
 8012c5a:	73fb      	strb	r3, [r7, #15]
 8012c5c:	e001      	b.n	8012c62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c64:	4618      	mov	r0, r3
 8012c66:	3714      	adds	r7, #20
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6e:	4770      	bx	lr

08012c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012c70:	b480      	push	{r7}
 8012c72:	b083      	sub	sp, #12
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
 8012c78:	460b      	mov	r3, r1
 8012c7a:	807b      	strh	r3, [r7, #2]
 8012c7c:	4613      	mov	r3, r2
 8012c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012c80:	787b      	ldrb	r3, [r7, #1]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d003      	beq.n	8012c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012c86:	887a      	ldrh	r2, [r7, #2]
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012c8c:	e003      	b.n	8012c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8012c8e:	887b      	ldrh	r3, [r7, #2]
 8012c90:	041a      	lsls	r2, r3, #16
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	619a      	str	r2, [r3, #24]
}
 8012c96:	bf00      	nop
 8012c98:	370c      	adds	r7, #12
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca0:	4770      	bx	lr
	...

08012ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b084      	sub	sp, #16
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d101      	bne.n	8012cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	e12b      	b.n	8012f0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012cbc:	b2db      	uxtb	r3, r3
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d106      	bne.n	8012cd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8012cca:	6878      	ldr	r0, [r7, #4]
 8012ccc:	f000 f95d 	bl	8012f8a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2224      	movs	r2, #36	; 0x24
 8012cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	681a      	ldr	r2, [r3, #0]
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	f022 0201 	bic.w	r2, r2, #1
 8012ce6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	681a      	ldr	r2, [r3, #0]
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012cf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	681a      	ldr	r2, [r3, #0]
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012d06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8012d08:	f001 fc0c 	bl	8014524 <HAL_RCC_GetPCLK1Freq>
 8012d0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	4a81      	ldr	r2, [pc, #516]	; (8012f18 <HAL_I2C_Init+0x274>)
 8012d14:	4293      	cmp	r3, r2
 8012d16:	d807      	bhi.n	8012d28 <HAL_I2C_Init+0x84>
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	4a80      	ldr	r2, [pc, #512]	; (8012f1c <HAL_I2C_Init+0x278>)
 8012d1c:	4293      	cmp	r3, r2
 8012d1e:	bf94      	ite	ls
 8012d20:	2301      	movls	r3, #1
 8012d22:	2300      	movhi	r3, #0
 8012d24:	b2db      	uxtb	r3, r3
 8012d26:	e006      	b.n	8012d36 <HAL_I2C_Init+0x92>
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	4a7d      	ldr	r2, [pc, #500]	; (8012f20 <HAL_I2C_Init+0x27c>)
 8012d2c:	4293      	cmp	r3, r2
 8012d2e:	bf94      	ite	ls
 8012d30:	2301      	movls	r3, #1
 8012d32:	2300      	movhi	r3, #0
 8012d34:	b2db      	uxtb	r3, r3
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d001      	beq.n	8012d3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8012d3a:	2301      	movs	r3, #1
 8012d3c:	e0e7      	b.n	8012f0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	4a78      	ldr	r2, [pc, #480]	; (8012f24 <HAL_I2C_Init+0x280>)
 8012d42:	fba2 2303 	umull	r2, r3, r2, r3
 8012d46:	0c9b      	lsrs	r3, r3, #18
 8012d48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	685b      	ldr	r3, [r3, #4]
 8012d50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	68ba      	ldr	r2, [r7, #8]
 8012d5a:	430a      	orrs	r2, r1
 8012d5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	6a1b      	ldr	r3, [r3, #32]
 8012d64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	685b      	ldr	r3, [r3, #4]
 8012d6c:	4a6a      	ldr	r2, [pc, #424]	; (8012f18 <HAL_I2C_Init+0x274>)
 8012d6e:	4293      	cmp	r3, r2
 8012d70:	d802      	bhi.n	8012d78 <HAL_I2C_Init+0xd4>
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	3301      	adds	r3, #1
 8012d76:	e009      	b.n	8012d8c <HAL_I2C_Init+0xe8>
 8012d78:	68bb      	ldr	r3, [r7, #8]
 8012d7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012d7e:	fb02 f303 	mul.w	r3, r2, r3
 8012d82:	4a69      	ldr	r2, [pc, #420]	; (8012f28 <HAL_I2C_Init+0x284>)
 8012d84:	fba2 2303 	umull	r2, r3, r2, r3
 8012d88:	099b      	lsrs	r3, r3, #6
 8012d8a:	3301      	adds	r3, #1
 8012d8c:	687a      	ldr	r2, [r7, #4]
 8012d8e:	6812      	ldr	r2, [r2, #0]
 8012d90:	430b      	orrs	r3, r1
 8012d92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	69db      	ldr	r3, [r3, #28]
 8012d9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8012d9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	685b      	ldr	r3, [r3, #4]
 8012da6:	495c      	ldr	r1, [pc, #368]	; (8012f18 <HAL_I2C_Init+0x274>)
 8012da8:	428b      	cmp	r3, r1
 8012daa:	d819      	bhi.n	8012de0 <HAL_I2C_Init+0x13c>
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	1e59      	subs	r1, r3, #1
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	685b      	ldr	r3, [r3, #4]
 8012db4:	005b      	lsls	r3, r3, #1
 8012db6:	fbb1 f3f3 	udiv	r3, r1, r3
 8012dba:	1c59      	adds	r1, r3, #1
 8012dbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8012dc0:	400b      	ands	r3, r1
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d00a      	beq.n	8012ddc <HAL_I2C_Init+0x138>
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	1e59      	subs	r1, r3, #1
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	685b      	ldr	r3, [r3, #4]
 8012dce:	005b      	lsls	r3, r3, #1
 8012dd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8012dd4:	3301      	adds	r3, #1
 8012dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012dda:	e051      	b.n	8012e80 <HAL_I2C_Init+0x1dc>
 8012ddc:	2304      	movs	r3, #4
 8012dde:	e04f      	b.n	8012e80 <HAL_I2C_Init+0x1dc>
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	689b      	ldr	r3, [r3, #8]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d111      	bne.n	8012e0c <HAL_I2C_Init+0x168>
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	1e58      	subs	r0, r3, #1
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6859      	ldr	r1, [r3, #4]
 8012df0:	460b      	mov	r3, r1
 8012df2:	005b      	lsls	r3, r3, #1
 8012df4:	440b      	add	r3, r1
 8012df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8012dfa:	3301      	adds	r3, #1
 8012dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	bf0c      	ite	eq
 8012e04:	2301      	moveq	r3, #1
 8012e06:	2300      	movne	r3, #0
 8012e08:	b2db      	uxtb	r3, r3
 8012e0a:	e012      	b.n	8012e32 <HAL_I2C_Init+0x18e>
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	1e58      	subs	r0, r3, #1
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	6859      	ldr	r1, [r3, #4]
 8012e14:	460b      	mov	r3, r1
 8012e16:	009b      	lsls	r3, r3, #2
 8012e18:	440b      	add	r3, r1
 8012e1a:	0099      	lsls	r1, r3, #2
 8012e1c:	440b      	add	r3, r1
 8012e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8012e22:	3301      	adds	r3, #1
 8012e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	bf0c      	ite	eq
 8012e2c:	2301      	moveq	r3, #1
 8012e2e:	2300      	movne	r3, #0
 8012e30:	b2db      	uxtb	r3, r3
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d001      	beq.n	8012e3a <HAL_I2C_Init+0x196>
 8012e36:	2301      	movs	r3, #1
 8012e38:	e022      	b.n	8012e80 <HAL_I2C_Init+0x1dc>
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	689b      	ldr	r3, [r3, #8]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d10e      	bne.n	8012e60 <HAL_I2C_Init+0x1bc>
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	1e58      	subs	r0, r3, #1
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	6859      	ldr	r1, [r3, #4]
 8012e4a:	460b      	mov	r3, r1
 8012e4c:	005b      	lsls	r3, r3, #1
 8012e4e:	440b      	add	r3, r1
 8012e50:	fbb0 f3f3 	udiv	r3, r0, r3
 8012e54:	3301      	adds	r3, #1
 8012e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012e5e:	e00f      	b.n	8012e80 <HAL_I2C_Init+0x1dc>
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	1e58      	subs	r0, r3, #1
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6859      	ldr	r1, [r3, #4]
 8012e68:	460b      	mov	r3, r1
 8012e6a:	009b      	lsls	r3, r3, #2
 8012e6c:	440b      	add	r3, r1
 8012e6e:	0099      	lsls	r1, r3, #2
 8012e70:	440b      	add	r3, r1
 8012e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8012e76:	3301      	adds	r3, #1
 8012e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012e7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012e80:	6879      	ldr	r1, [r7, #4]
 8012e82:	6809      	ldr	r1, [r1, #0]
 8012e84:	4313      	orrs	r3, r2
 8012e86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	69da      	ldr	r2, [r3, #28]
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	6a1b      	ldr	r3, [r3, #32]
 8012e9a:	431a      	orrs	r2, r3
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	430a      	orrs	r2, r1
 8012ea2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	689b      	ldr	r3, [r3, #8]
 8012eaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8012eae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012eb2:	687a      	ldr	r2, [r7, #4]
 8012eb4:	6911      	ldr	r1, [r2, #16]
 8012eb6:	687a      	ldr	r2, [r7, #4]
 8012eb8:	68d2      	ldr	r2, [r2, #12]
 8012eba:	4311      	orrs	r1, r2
 8012ebc:	687a      	ldr	r2, [r7, #4]
 8012ebe:	6812      	ldr	r2, [r2, #0]
 8012ec0:	430b      	orrs	r3, r1
 8012ec2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	68db      	ldr	r3, [r3, #12]
 8012eca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	695a      	ldr	r2, [r3, #20]
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	699b      	ldr	r3, [r3, #24]
 8012ed6:	431a      	orrs	r2, r3
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	430a      	orrs	r2, r1
 8012ede:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	681a      	ldr	r2, [r3, #0]
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	f042 0201 	orr.w	r2, r2, #1
 8012eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2220      	movs	r2, #32
 8012efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	2200      	movs	r2, #0
 8012f02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	2200      	movs	r2, #0
 8012f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8012f0c:	2300      	movs	r3, #0
}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	3710      	adds	r7, #16
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}
 8012f16:	bf00      	nop
 8012f18:	000186a0 	.word	0x000186a0
 8012f1c:	001e847f 	.word	0x001e847f
 8012f20:	003d08ff 	.word	0x003d08ff
 8012f24:	431bde83 	.word	0x431bde83
 8012f28:	10624dd3 	.word	0x10624dd3

08012f2c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b082      	sub	sp, #8
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d101      	bne.n	8012f3e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8012f3a:	2301      	movs	r3, #1
 8012f3c:	e021      	b.n	8012f82 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	2224      	movs	r2, #36	; 0x24
 8012f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	681a      	ldr	r2, [r3, #0]
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	f022 0201 	bic.w	r2, r2, #1
 8012f54:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f000 f821 	bl	8012f9e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	2200      	movs	r2, #0
 8012f60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2200      	movs	r2, #0
 8012f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	2200      	movs	r2, #0
 8012f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012f80:	2300      	movs	r3, #0
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	3708      	adds	r7, #8
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}

08012f8a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8012f8a:	b480      	push	{r7}
 8012f8c:	b083      	sub	sp, #12
 8012f8e:	af00      	add	r7, sp, #0
 8012f90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8012f92:	bf00      	nop
 8012f94:	370c      	adds	r7, #12
 8012f96:	46bd      	mov	sp, r7
 8012f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9c:	4770      	bx	lr

08012f9e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8012f9e:	b480      	push	{r7}
 8012fa0:	b083      	sub	sp, #12
 8012fa2:	af00      	add	r7, sp, #0
 8012fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8012fa6:	bf00      	nop
 8012fa8:	370c      	adds	r7, #12
 8012faa:	46bd      	mov	sp, r7
 8012fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb0:	4770      	bx	lr
	...

08012fb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b088      	sub	sp, #32
 8012fb8:	af02      	add	r7, sp, #8
 8012fba:	60f8      	str	r0, [r7, #12]
 8012fbc:	607a      	str	r2, [r7, #4]
 8012fbe:	461a      	mov	r2, r3
 8012fc0:	460b      	mov	r3, r1
 8012fc2:	817b      	strh	r3, [r7, #10]
 8012fc4:	4613      	mov	r3, r2
 8012fc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8012fc8:	f7ff fabc 	bl	8012544 <HAL_GetTick>
 8012fcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012fd4:	b2db      	uxtb	r3, r3
 8012fd6:	2b20      	cmp	r3, #32
 8012fd8:	f040 80e0 	bne.w	801319c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8012fdc:	697b      	ldr	r3, [r7, #20]
 8012fde:	9300      	str	r3, [sp, #0]
 8012fe0:	2319      	movs	r3, #25
 8012fe2:	2201      	movs	r2, #1
 8012fe4:	4970      	ldr	r1, [pc, #448]	; (80131a8 <HAL_I2C_Master_Transmit+0x1f4>)
 8012fe6:	68f8      	ldr	r0, [r7, #12]
 8012fe8:	f000 fc72 	bl	80138d0 <I2C_WaitOnFlagUntilTimeout>
 8012fec:	4603      	mov	r3, r0
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d001      	beq.n	8012ff6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8012ff2:	2302      	movs	r3, #2
 8012ff4:	e0d3      	b.n	801319e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012ffc:	2b01      	cmp	r3, #1
 8012ffe:	d101      	bne.n	8013004 <HAL_I2C_Master_Transmit+0x50>
 8013000:	2302      	movs	r3, #2
 8013002:	e0cc      	b.n	801319e <HAL_I2C_Master_Transmit+0x1ea>
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	2201      	movs	r2, #1
 8013008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	f003 0301 	and.w	r3, r3, #1
 8013016:	2b01      	cmp	r3, #1
 8013018:	d007      	beq.n	801302a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	681a      	ldr	r2, [r3, #0]
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	f042 0201 	orr.w	r2, r2, #1
 8013028:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	681a      	ldr	r2, [r3, #0]
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013038:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	2221      	movs	r2, #33	; 0x21
 801303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	2210      	movs	r2, #16
 8013046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	2200      	movs	r2, #0
 801304e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	687a      	ldr	r2, [r7, #4]
 8013054:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	893a      	ldrh	r2, [r7, #8]
 801305a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013060:	b29a      	uxth	r2, r3
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	4a50      	ldr	r2, [pc, #320]	; (80131ac <HAL_I2C_Master_Transmit+0x1f8>)
 801306a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 801306c:	8979      	ldrh	r1, [r7, #10]
 801306e:	697b      	ldr	r3, [r7, #20]
 8013070:	6a3a      	ldr	r2, [r7, #32]
 8013072:	68f8      	ldr	r0, [r7, #12]
 8013074:	f000 fadc 	bl	8013630 <I2C_MasterRequestWrite>
 8013078:	4603      	mov	r3, r0
 801307a:	2b00      	cmp	r3, #0
 801307c:	d001      	beq.n	8013082 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 801307e:	2301      	movs	r3, #1
 8013080:	e08d      	b.n	801319e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013082:	2300      	movs	r3, #0
 8013084:	613b      	str	r3, [r7, #16]
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	695b      	ldr	r3, [r3, #20]
 801308c:	613b      	str	r3, [r7, #16]
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	699b      	ldr	r3, [r3, #24]
 8013094:	613b      	str	r3, [r7, #16]
 8013096:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8013098:	e066      	b.n	8013168 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801309a:	697a      	ldr	r2, [r7, #20]
 801309c:	6a39      	ldr	r1, [r7, #32]
 801309e:	68f8      	ldr	r0, [r7, #12]
 80130a0:	f000 fcec 	bl	8013a7c <I2C_WaitOnTXEFlagUntilTimeout>
 80130a4:	4603      	mov	r3, r0
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d00d      	beq.n	80130c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130ae:	2b04      	cmp	r3, #4
 80130b0:	d107      	bne.n	80130c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	681a      	ldr	r2, [r3, #0]
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80130c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80130c2:	2301      	movs	r3, #1
 80130c4:	e06b      	b.n	801319e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130ca:	781a      	ldrb	r2, [r3, #0]
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130d6:	1c5a      	adds	r2, r3, #1
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80130e0:	b29b      	uxth	r3, r3
 80130e2:	3b01      	subs	r3, #1
 80130e4:	b29a      	uxth	r2, r3
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80130ee:	3b01      	subs	r3, #1
 80130f0:	b29a      	uxth	r2, r3
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	695b      	ldr	r3, [r3, #20]
 80130fc:	f003 0304 	and.w	r3, r3, #4
 8013100:	2b04      	cmp	r3, #4
 8013102:	d11b      	bne.n	801313c <HAL_I2C_Master_Transmit+0x188>
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013108:	2b00      	cmp	r3, #0
 801310a:	d017      	beq.n	801313c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013110:	781a      	ldrb	r2, [r3, #0]
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801311c:	1c5a      	adds	r2, r3, #1
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013126:	b29b      	uxth	r3, r3
 8013128:	3b01      	subs	r3, #1
 801312a:	b29a      	uxth	r2, r3
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013134:	3b01      	subs	r3, #1
 8013136:	b29a      	uxth	r2, r3
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801313c:	697a      	ldr	r2, [r7, #20]
 801313e:	6a39      	ldr	r1, [r7, #32]
 8013140:	68f8      	ldr	r0, [r7, #12]
 8013142:	f000 fcdc 	bl	8013afe <I2C_WaitOnBTFFlagUntilTimeout>
 8013146:	4603      	mov	r3, r0
 8013148:	2b00      	cmp	r3, #0
 801314a:	d00d      	beq.n	8013168 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013150:	2b04      	cmp	r3, #4
 8013152:	d107      	bne.n	8013164 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	681a      	ldr	r2, [r3, #0]
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013162:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8013164:	2301      	movs	r3, #1
 8013166:	e01a      	b.n	801319e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801316c:	2b00      	cmp	r3, #0
 801316e:	d194      	bne.n	801309a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	681a      	ldr	r2, [r3, #0]
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801317e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	2220      	movs	r2, #32
 8013184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	2200      	movs	r2, #0
 801318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	2200      	movs	r2, #0
 8013194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8013198:	2300      	movs	r3, #0
 801319a:	e000      	b.n	801319e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801319c:	2302      	movs	r3, #2
  }
}
 801319e:	4618      	mov	r0, r3
 80131a0:	3718      	adds	r7, #24
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd80      	pop	{r7, pc}
 80131a6:	bf00      	nop
 80131a8:	00100002 	.word	0x00100002
 80131ac:	ffff0000 	.word	0xffff0000

080131b0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b08c      	sub	sp, #48	; 0x30
 80131b4:	af02      	add	r7, sp, #8
 80131b6:	60f8      	str	r0, [r7, #12]
 80131b8:	607a      	str	r2, [r7, #4]
 80131ba:	461a      	mov	r2, r3
 80131bc:	460b      	mov	r3, r1
 80131be:	817b      	strh	r3, [r7, #10]
 80131c0:	4613      	mov	r3, r2
 80131c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80131c4:	f7ff f9be 	bl	8012544 <HAL_GetTick>
 80131c8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80131d0:	b2db      	uxtb	r3, r3
 80131d2:	2b20      	cmp	r3, #32
 80131d4:	f040 820b 	bne.w	80135ee <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80131d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131da:	9300      	str	r3, [sp, #0]
 80131dc:	2319      	movs	r3, #25
 80131de:	2201      	movs	r2, #1
 80131e0:	497c      	ldr	r1, [pc, #496]	; (80133d4 <HAL_I2C_Master_Receive+0x224>)
 80131e2:	68f8      	ldr	r0, [r7, #12]
 80131e4:	f000 fb74 	bl	80138d0 <I2C_WaitOnFlagUntilTimeout>
 80131e8:	4603      	mov	r3, r0
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d001      	beq.n	80131f2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80131ee:	2302      	movs	r3, #2
 80131f0:	e1fe      	b.n	80135f0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80131f8:	2b01      	cmp	r3, #1
 80131fa:	d101      	bne.n	8013200 <HAL_I2C_Master_Receive+0x50>
 80131fc:	2302      	movs	r3, #2
 80131fe:	e1f7      	b.n	80135f0 <HAL_I2C_Master_Receive+0x440>
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	2201      	movs	r2, #1
 8013204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	f003 0301 	and.w	r3, r3, #1
 8013212:	2b01      	cmp	r3, #1
 8013214:	d007      	beq.n	8013226 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	681a      	ldr	r2, [r3, #0]
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	f042 0201 	orr.w	r2, r2, #1
 8013224:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	681a      	ldr	r2, [r3, #0]
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013234:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	2222      	movs	r2, #34	; 0x22
 801323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	2210      	movs	r2, #16
 8013242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	2200      	movs	r2, #0
 801324a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	687a      	ldr	r2, [r7, #4]
 8013250:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	893a      	ldrh	r2, [r7, #8]
 8013256:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801325c:	b29a      	uxth	r2, r3
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	4a5c      	ldr	r2, [pc, #368]	; (80133d8 <HAL_I2C_Master_Receive+0x228>)
 8013266:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8013268:	8979      	ldrh	r1, [r7, #10]
 801326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801326c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801326e:	68f8      	ldr	r0, [r7, #12]
 8013270:	f000 fa60 	bl	8013734 <I2C_MasterRequestRead>
 8013274:	4603      	mov	r3, r0
 8013276:	2b00      	cmp	r3, #0
 8013278:	d001      	beq.n	801327e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 801327a:	2301      	movs	r3, #1
 801327c:	e1b8      	b.n	80135f0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013282:	2b00      	cmp	r3, #0
 8013284:	d113      	bne.n	80132ae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013286:	2300      	movs	r3, #0
 8013288:	623b      	str	r3, [r7, #32]
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	695b      	ldr	r3, [r3, #20]
 8013290:	623b      	str	r3, [r7, #32]
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	699b      	ldr	r3, [r3, #24]
 8013298:	623b      	str	r3, [r7, #32]
 801329a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	681a      	ldr	r2, [r3, #0]
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80132aa:	601a      	str	r2, [r3, #0]
 80132ac:	e18c      	b.n	80135c8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132b2:	2b01      	cmp	r3, #1
 80132b4:	d11b      	bne.n	80132ee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	681a      	ldr	r2, [r3, #0]
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80132c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80132c6:	2300      	movs	r3, #0
 80132c8:	61fb      	str	r3, [r7, #28]
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	695b      	ldr	r3, [r3, #20]
 80132d0:	61fb      	str	r3, [r7, #28]
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	699b      	ldr	r3, [r3, #24]
 80132d8:	61fb      	str	r3, [r7, #28]
 80132da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	681a      	ldr	r2, [r3, #0]
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80132ea:	601a      	str	r2, [r3, #0]
 80132ec:	e16c      	b.n	80135c8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132f2:	2b02      	cmp	r3, #2
 80132f4:	d11b      	bne.n	801332e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	681a      	ldr	r2, [r3, #0]
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013304:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	681a      	ldr	r2, [r3, #0]
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013314:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013316:	2300      	movs	r3, #0
 8013318:	61bb      	str	r3, [r7, #24]
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	695b      	ldr	r3, [r3, #20]
 8013320:	61bb      	str	r3, [r7, #24]
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	699b      	ldr	r3, [r3, #24]
 8013328:	61bb      	str	r3, [r7, #24]
 801332a:	69bb      	ldr	r3, [r7, #24]
 801332c:	e14c      	b.n	80135c8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	681a      	ldr	r2, [r3, #0]
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801333c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801333e:	2300      	movs	r3, #0
 8013340:	617b      	str	r3, [r7, #20]
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	695b      	ldr	r3, [r3, #20]
 8013348:	617b      	str	r3, [r7, #20]
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	699b      	ldr	r3, [r3, #24]
 8013350:	617b      	str	r3, [r7, #20]
 8013352:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8013354:	e138      	b.n	80135c8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801335a:	2b03      	cmp	r3, #3
 801335c:	f200 80f1 	bhi.w	8013542 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013364:	2b01      	cmp	r3, #1
 8013366:	d123      	bne.n	80133b0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801336a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801336c:	68f8      	ldr	r0, [r7, #12]
 801336e:	f000 fc07 	bl	8013b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8013372:	4603      	mov	r3, r0
 8013374:	2b00      	cmp	r3, #0
 8013376:	d001      	beq.n	801337c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8013378:	2301      	movs	r3, #1
 801337a:	e139      	b.n	80135f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	691a      	ldr	r2, [r3, #16]
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013386:	b2d2      	uxtb	r2, r2
 8013388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801338e:	1c5a      	adds	r2, r3, #1
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013398:	3b01      	subs	r3, #1
 801339a:	b29a      	uxth	r2, r3
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80133a4:	b29b      	uxth	r3, r3
 80133a6:	3b01      	subs	r3, #1
 80133a8:	b29a      	uxth	r2, r3
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80133ae:	e10b      	b.n	80135c8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80133b4:	2b02      	cmp	r3, #2
 80133b6:	d14e      	bne.n	8013456 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80133b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ba:	9300      	str	r3, [sp, #0]
 80133bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133be:	2200      	movs	r2, #0
 80133c0:	4906      	ldr	r1, [pc, #24]	; (80133dc <HAL_I2C_Master_Receive+0x22c>)
 80133c2:	68f8      	ldr	r0, [r7, #12]
 80133c4:	f000 fa84 	bl	80138d0 <I2C_WaitOnFlagUntilTimeout>
 80133c8:	4603      	mov	r3, r0
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d008      	beq.n	80133e0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80133ce:	2301      	movs	r3, #1
 80133d0:	e10e      	b.n	80135f0 <HAL_I2C_Master_Receive+0x440>
 80133d2:	bf00      	nop
 80133d4:	00100002 	.word	0x00100002
 80133d8:	ffff0000 	.word	0xffff0000
 80133dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	681a      	ldr	r2, [r3, #0]
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80133ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	691a      	ldr	r2, [r3, #16]
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133fa:	b2d2      	uxtb	r2, r2
 80133fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013402:	1c5a      	adds	r2, r3, #1
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801340c:	3b01      	subs	r3, #1
 801340e:	b29a      	uxth	r2, r3
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013418:	b29b      	uxth	r3, r3
 801341a:	3b01      	subs	r3, #1
 801341c:	b29a      	uxth	r2, r3
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	691a      	ldr	r2, [r3, #16]
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801342c:	b2d2      	uxtb	r2, r2
 801342e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013434:	1c5a      	adds	r2, r3, #1
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801343e:	3b01      	subs	r3, #1
 8013440:	b29a      	uxth	r2, r3
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801344a:	b29b      	uxth	r3, r3
 801344c:	3b01      	subs	r3, #1
 801344e:	b29a      	uxth	r2, r3
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013454:	e0b8      	b.n	80135c8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8013456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013458:	9300      	str	r3, [sp, #0]
 801345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801345c:	2200      	movs	r2, #0
 801345e:	4966      	ldr	r1, [pc, #408]	; (80135f8 <HAL_I2C_Master_Receive+0x448>)
 8013460:	68f8      	ldr	r0, [r7, #12]
 8013462:	f000 fa35 	bl	80138d0 <I2C_WaitOnFlagUntilTimeout>
 8013466:	4603      	mov	r3, r0
 8013468:	2b00      	cmp	r3, #0
 801346a:	d001      	beq.n	8013470 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 801346c:	2301      	movs	r3, #1
 801346e:	e0bf      	b.n	80135f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	681a      	ldr	r2, [r3, #0]
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801347e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	691a      	ldr	r2, [r3, #16]
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801348a:	b2d2      	uxtb	r2, r2
 801348c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013492:	1c5a      	adds	r2, r3, #1
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801349c:	3b01      	subs	r3, #1
 801349e:	b29a      	uxth	r2, r3
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80134a8:	b29b      	uxth	r3, r3
 80134aa:	3b01      	subs	r3, #1
 80134ac:	b29a      	uxth	r2, r3
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80134b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b4:	9300      	str	r3, [sp, #0]
 80134b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134b8:	2200      	movs	r2, #0
 80134ba:	494f      	ldr	r1, [pc, #316]	; (80135f8 <HAL_I2C_Master_Receive+0x448>)
 80134bc:	68f8      	ldr	r0, [r7, #12]
 80134be:	f000 fa07 	bl	80138d0 <I2C_WaitOnFlagUntilTimeout>
 80134c2:	4603      	mov	r3, r0
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d001      	beq.n	80134cc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80134c8:	2301      	movs	r3, #1
 80134ca:	e091      	b.n	80135f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	681a      	ldr	r2, [r3, #0]
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80134da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	691a      	ldr	r2, [r3, #16]
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134e6:	b2d2      	uxtb	r2, r2
 80134e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134ee:	1c5a      	adds	r2, r3, #1
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80134f8:	3b01      	subs	r3, #1
 80134fa:	b29a      	uxth	r2, r3
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013504:	b29b      	uxth	r3, r3
 8013506:	3b01      	subs	r3, #1
 8013508:	b29a      	uxth	r2, r3
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	691a      	ldr	r2, [r3, #16]
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013518:	b2d2      	uxtb	r2, r2
 801351a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013520:	1c5a      	adds	r2, r3, #1
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801352a:	3b01      	subs	r3, #1
 801352c:	b29a      	uxth	r2, r3
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013536:	b29b      	uxth	r3, r3
 8013538:	3b01      	subs	r3, #1
 801353a:	b29a      	uxth	r2, r3
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013540:	e042      	b.n	80135c8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013544:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013546:	68f8      	ldr	r0, [r7, #12]
 8013548:	f000 fb1a 	bl	8013b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 801354c:	4603      	mov	r3, r0
 801354e:	2b00      	cmp	r3, #0
 8013550:	d001      	beq.n	8013556 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8013552:	2301      	movs	r3, #1
 8013554:	e04c      	b.n	80135f0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	691a      	ldr	r2, [r3, #16]
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013560:	b2d2      	uxtb	r2, r2
 8013562:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013568:	1c5a      	adds	r2, r3, #1
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013572:	3b01      	subs	r3, #1
 8013574:	b29a      	uxth	r2, r3
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801357e:	b29b      	uxth	r3, r3
 8013580:	3b01      	subs	r3, #1
 8013582:	b29a      	uxth	r2, r3
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	695b      	ldr	r3, [r3, #20]
 801358e:	f003 0304 	and.w	r3, r3, #4
 8013592:	2b04      	cmp	r3, #4
 8013594:	d118      	bne.n	80135c8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	691a      	ldr	r2, [r3, #16]
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135a0:	b2d2      	uxtb	r2, r2
 80135a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135a8:	1c5a      	adds	r2, r3, #1
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80135b2:	3b01      	subs	r3, #1
 80135b4:	b29a      	uxth	r2, r3
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80135be:	b29b      	uxth	r3, r3
 80135c0:	3b01      	subs	r3, #1
 80135c2:	b29a      	uxth	r2, r3
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	f47f aec2 	bne.w	8013356 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	2220      	movs	r2, #32
 80135d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	2200      	movs	r2, #0
 80135de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	2200      	movs	r2, #0
 80135e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80135ea:	2300      	movs	r3, #0
 80135ec:	e000      	b.n	80135f0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80135ee:	2302      	movs	r3, #2
  }
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	3728      	adds	r7, #40	; 0x28
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}
 80135f8:	00010004 	.word	0x00010004

080135fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80135fc:	b480      	push	{r7}
 80135fe:	b083      	sub	sp, #12
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801360a:	b2db      	uxtb	r3, r3
}
 801360c:	4618      	mov	r0, r3
 801360e:	370c      	adds	r7, #12
 8013610:	46bd      	mov	sp, r7
 8013612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013616:	4770      	bx	lr

08013618 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8013618:	b480      	push	{r7}
 801361a:	b083      	sub	sp, #12
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8013624:	4618      	mov	r0, r3
 8013626:	370c      	adds	r7, #12
 8013628:	46bd      	mov	sp, r7
 801362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362e:	4770      	bx	lr

08013630 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b088      	sub	sp, #32
 8013634:	af02      	add	r7, sp, #8
 8013636:	60f8      	str	r0, [r7, #12]
 8013638:	607a      	str	r2, [r7, #4]
 801363a:	603b      	str	r3, [r7, #0]
 801363c:	460b      	mov	r3, r1
 801363e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013644:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	2b08      	cmp	r3, #8
 801364a:	d006      	beq.n	801365a <I2C_MasterRequestWrite+0x2a>
 801364c:	697b      	ldr	r3, [r7, #20]
 801364e:	2b01      	cmp	r3, #1
 8013650:	d003      	beq.n	801365a <I2C_MasterRequestWrite+0x2a>
 8013652:	697b      	ldr	r3, [r7, #20]
 8013654:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8013658:	d108      	bne.n	801366c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	681a      	ldr	r2, [r3, #0]
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013668:	601a      	str	r2, [r3, #0]
 801366a:	e00b      	b.n	8013684 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013670:	2b12      	cmp	r3, #18
 8013672:	d107      	bne.n	8013684 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	681a      	ldr	r2, [r3, #0]
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013682:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	9300      	str	r3, [sp, #0]
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	2200      	movs	r2, #0
 801368c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013690:	68f8      	ldr	r0, [r7, #12]
 8013692:	f000 f91d 	bl	80138d0 <I2C_WaitOnFlagUntilTimeout>
 8013696:	4603      	mov	r3, r0
 8013698:	2b00      	cmp	r3, #0
 801369a:	d00d      	beq.n	80136b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80136a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80136aa:	d103      	bne.n	80136b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80136b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80136b4:	2303      	movs	r3, #3
 80136b6:	e035      	b.n	8013724 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	691b      	ldr	r3, [r3, #16]
 80136bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80136c0:	d108      	bne.n	80136d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80136c2:	897b      	ldrh	r3, [r7, #10]
 80136c4:	b2db      	uxtb	r3, r3
 80136c6:	461a      	mov	r2, r3
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80136d0:	611a      	str	r2, [r3, #16]
 80136d2:	e01b      	b.n	801370c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80136d4:	897b      	ldrh	r3, [r7, #10]
 80136d6:	11db      	asrs	r3, r3, #7
 80136d8:	b2db      	uxtb	r3, r3
 80136da:	f003 0306 	and.w	r3, r3, #6
 80136de:	b2db      	uxtb	r3, r3
 80136e0:	f063 030f 	orn	r3, r3, #15
 80136e4:	b2da      	uxtb	r2, r3
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	687a      	ldr	r2, [r7, #4]
 80136f0:	490e      	ldr	r1, [pc, #56]	; (801372c <I2C_MasterRequestWrite+0xfc>)
 80136f2:	68f8      	ldr	r0, [r7, #12]
 80136f4:	f000 f943 	bl	801397e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80136f8:	4603      	mov	r3, r0
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d001      	beq.n	8013702 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80136fe:	2301      	movs	r3, #1
 8013700:	e010      	b.n	8013724 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8013702:	897b      	ldrh	r3, [r7, #10]
 8013704:	b2da      	uxtb	r2, r3
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801370c:	683b      	ldr	r3, [r7, #0]
 801370e:	687a      	ldr	r2, [r7, #4]
 8013710:	4907      	ldr	r1, [pc, #28]	; (8013730 <I2C_MasterRequestWrite+0x100>)
 8013712:	68f8      	ldr	r0, [r7, #12]
 8013714:	f000 f933 	bl	801397e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8013718:	4603      	mov	r3, r0
 801371a:	2b00      	cmp	r3, #0
 801371c:	d001      	beq.n	8013722 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 801371e:	2301      	movs	r3, #1
 8013720:	e000      	b.n	8013724 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8013722:	2300      	movs	r3, #0
}
 8013724:	4618      	mov	r0, r3
 8013726:	3718      	adds	r7, #24
 8013728:	46bd      	mov	sp, r7
 801372a:	bd80      	pop	{r7, pc}
 801372c:	00010008 	.word	0x00010008
 8013730:	00010002 	.word	0x00010002

08013734 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b088      	sub	sp, #32
 8013738:	af02      	add	r7, sp, #8
 801373a:	60f8      	str	r0, [r7, #12]
 801373c:	607a      	str	r2, [r7, #4]
 801373e:	603b      	str	r3, [r7, #0]
 8013740:	460b      	mov	r3, r1
 8013742:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013748:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	681a      	ldr	r2, [r3, #0]
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013758:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801375a:	697b      	ldr	r3, [r7, #20]
 801375c:	2b08      	cmp	r3, #8
 801375e:	d006      	beq.n	801376e <I2C_MasterRequestRead+0x3a>
 8013760:	697b      	ldr	r3, [r7, #20]
 8013762:	2b01      	cmp	r3, #1
 8013764:	d003      	beq.n	801376e <I2C_MasterRequestRead+0x3a>
 8013766:	697b      	ldr	r3, [r7, #20]
 8013768:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801376c:	d108      	bne.n	8013780 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	681a      	ldr	r2, [r3, #0]
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801377c:	601a      	str	r2, [r3, #0]
 801377e:	e00b      	b.n	8013798 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013784:	2b11      	cmp	r3, #17
 8013786:	d107      	bne.n	8013798 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	681a      	ldr	r2, [r3, #0]
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013796:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	9300      	str	r3, [sp, #0]
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2200      	movs	r2, #0
 80137a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80137a4:	68f8      	ldr	r0, [r7, #12]
 80137a6:	f000 f893 	bl	80138d0 <I2C_WaitOnFlagUntilTimeout>
 80137aa:	4603      	mov	r3, r0
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d00d      	beq.n	80137cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80137ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80137be:	d103      	bne.n	80137c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80137c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80137c8:	2303      	movs	r3, #3
 80137ca:	e079      	b.n	80138c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	691b      	ldr	r3, [r3, #16]
 80137d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80137d4:	d108      	bne.n	80137e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80137d6:	897b      	ldrh	r3, [r7, #10]
 80137d8:	b2db      	uxtb	r3, r3
 80137da:	f043 0301 	orr.w	r3, r3, #1
 80137de:	b2da      	uxtb	r2, r3
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	611a      	str	r2, [r3, #16]
 80137e6:	e05f      	b.n	80138a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80137e8:	897b      	ldrh	r3, [r7, #10]
 80137ea:	11db      	asrs	r3, r3, #7
 80137ec:	b2db      	uxtb	r3, r3
 80137ee:	f003 0306 	and.w	r3, r3, #6
 80137f2:	b2db      	uxtb	r3, r3
 80137f4:	f063 030f 	orn	r3, r3, #15
 80137f8:	b2da      	uxtb	r2, r3
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8013800:	683b      	ldr	r3, [r7, #0]
 8013802:	687a      	ldr	r2, [r7, #4]
 8013804:	4930      	ldr	r1, [pc, #192]	; (80138c8 <I2C_MasterRequestRead+0x194>)
 8013806:	68f8      	ldr	r0, [r7, #12]
 8013808:	f000 f8b9 	bl	801397e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801380c:	4603      	mov	r3, r0
 801380e:	2b00      	cmp	r3, #0
 8013810:	d001      	beq.n	8013816 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8013812:	2301      	movs	r3, #1
 8013814:	e054      	b.n	80138c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8013816:	897b      	ldrh	r3, [r7, #10]
 8013818:	b2da      	uxtb	r2, r3
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013820:	683b      	ldr	r3, [r7, #0]
 8013822:	687a      	ldr	r2, [r7, #4]
 8013824:	4929      	ldr	r1, [pc, #164]	; (80138cc <I2C_MasterRequestRead+0x198>)
 8013826:	68f8      	ldr	r0, [r7, #12]
 8013828:	f000 f8a9 	bl	801397e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801382c:	4603      	mov	r3, r0
 801382e:	2b00      	cmp	r3, #0
 8013830:	d001      	beq.n	8013836 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8013832:	2301      	movs	r3, #1
 8013834:	e044      	b.n	80138c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8013836:	2300      	movs	r3, #0
 8013838:	613b      	str	r3, [r7, #16]
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	695b      	ldr	r3, [r3, #20]
 8013840:	613b      	str	r3, [r7, #16]
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	699b      	ldr	r3, [r3, #24]
 8013848:	613b      	str	r3, [r7, #16]
 801384a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	681a      	ldr	r2, [r3, #0]
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801385a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	9300      	str	r3, [sp, #0]
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	2200      	movs	r2, #0
 8013864:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013868:	68f8      	ldr	r0, [r7, #12]
 801386a:	f000 f831 	bl	80138d0 <I2C_WaitOnFlagUntilTimeout>
 801386e:	4603      	mov	r3, r0
 8013870:	2b00      	cmp	r3, #0
 8013872:	d00d      	beq.n	8013890 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801387e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013882:	d103      	bne.n	801388c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	f44f 7200 	mov.w	r2, #512	; 0x200
 801388a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 801388c:	2303      	movs	r3, #3
 801388e:	e017      	b.n	80138c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8013890:	897b      	ldrh	r3, [r7, #10]
 8013892:	11db      	asrs	r3, r3, #7
 8013894:	b2db      	uxtb	r3, r3
 8013896:	f003 0306 	and.w	r3, r3, #6
 801389a:	b2db      	uxtb	r3, r3
 801389c:	f063 030e 	orn	r3, r3, #14
 80138a0:	b2da      	uxtb	r2, r3
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	687a      	ldr	r2, [r7, #4]
 80138ac:	4907      	ldr	r1, [pc, #28]	; (80138cc <I2C_MasterRequestRead+0x198>)
 80138ae:	68f8      	ldr	r0, [r7, #12]
 80138b0:	f000 f865 	bl	801397e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80138b4:	4603      	mov	r3, r0
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d001      	beq.n	80138be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80138ba:	2301      	movs	r3, #1
 80138bc:	e000      	b.n	80138c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80138be:	2300      	movs	r3, #0
}
 80138c0:	4618      	mov	r0, r3
 80138c2:	3718      	adds	r7, #24
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}
 80138c8:	00010008 	.word	0x00010008
 80138cc:	00010002 	.word	0x00010002

080138d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b084      	sub	sp, #16
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	60f8      	str	r0, [r7, #12]
 80138d8:	60b9      	str	r1, [r7, #8]
 80138da:	603b      	str	r3, [r7, #0]
 80138dc:	4613      	mov	r3, r2
 80138de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80138e0:	e025      	b.n	801392e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138e8:	d021      	beq.n	801392e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80138ea:	f7fe fe2b 	bl	8012544 <HAL_GetTick>
 80138ee:	4602      	mov	r2, r0
 80138f0:	69bb      	ldr	r3, [r7, #24]
 80138f2:	1ad3      	subs	r3, r2, r3
 80138f4:	683a      	ldr	r2, [r7, #0]
 80138f6:	429a      	cmp	r2, r3
 80138f8:	d302      	bcc.n	8013900 <I2C_WaitOnFlagUntilTimeout+0x30>
 80138fa:	683b      	ldr	r3, [r7, #0]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d116      	bne.n	801392e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	2200      	movs	r2, #0
 8013904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	2220      	movs	r2, #32
 801390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	2200      	movs	r2, #0
 8013912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801391a:	f043 0220 	orr.w	r2, r3, #32
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	2200      	movs	r2, #0
 8013926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801392a:	2301      	movs	r3, #1
 801392c:	e023      	b.n	8013976 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801392e:	68bb      	ldr	r3, [r7, #8]
 8013930:	0c1b      	lsrs	r3, r3, #16
 8013932:	b2db      	uxtb	r3, r3
 8013934:	2b01      	cmp	r3, #1
 8013936:	d10d      	bne.n	8013954 <I2C_WaitOnFlagUntilTimeout+0x84>
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	695b      	ldr	r3, [r3, #20]
 801393e:	43da      	mvns	r2, r3
 8013940:	68bb      	ldr	r3, [r7, #8]
 8013942:	4013      	ands	r3, r2
 8013944:	b29b      	uxth	r3, r3
 8013946:	2b00      	cmp	r3, #0
 8013948:	bf0c      	ite	eq
 801394a:	2301      	moveq	r3, #1
 801394c:	2300      	movne	r3, #0
 801394e:	b2db      	uxtb	r3, r3
 8013950:	461a      	mov	r2, r3
 8013952:	e00c      	b.n	801396e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	699b      	ldr	r3, [r3, #24]
 801395a:	43da      	mvns	r2, r3
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	4013      	ands	r3, r2
 8013960:	b29b      	uxth	r3, r3
 8013962:	2b00      	cmp	r3, #0
 8013964:	bf0c      	ite	eq
 8013966:	2301      	moveq	r3, #1
 8013968:	2300      	movne	r3, #0
 801396a:	b2db      	uxtb	r3, r3
 801396c:	461a      	mov	r2, r3
 801396e:	79fb      	ldrb	r3, [r7, #7]
 8013970:	429a      	cmp	r2, r3
 8013972:	d0b6      	beq.n	80138e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013974:	2300      	movs	r3, #0
}
 8013976:	4618      	mov	r0, r3
 8013978:	3710      	adds	r7, #16
 801397a:	46bd      	mov	sp, r7
 801397c:	bd80      	pop	{r7, pc}

0801397e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801397e:	b580      	push	{r7, lr}
 8013980:	b084      	sub	sp, #16
 8013982:	af00      	add	r7, sp, #0
 8013984:	60f8      	str	r0, [r7, #12]
 8013986:	60b9      	str	r1, [r7, #8]
 8013988:	607a      	str	r2, [r7, #4]
 801398a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801398c:	e051      	b.n	8013a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	695b      	ldr	r3, [r3, #20]
 8013994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801399c:	d123      	bne.n	80139e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	681a      	ldr	r2, [r3, #0]
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80139ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80139b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	2200      	movs	r2, #0
 80139bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	2220      	movs	r2, #32
 80139c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	2200      	movs	r2, #0
 80139ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139d2:	f043 0204 	orr.w	r2, r3, #4
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	2200      	movs	r2, #0
 80139de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80139e2:	2301      	movs	r3, #1
 80139e4:	e046      	b.n	8013a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139ec:	d021      	beq.n	8013a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80139ee:	f7fe fda9 	bl	8012544 <HAL_GetTick>
 80139f2:	4602      	mov	r2, r0
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	1ad3      	subs	r3, r2, r3
 80139f8:	687a      	ldr	r2, [r7, #4]
 80139fa:	429a      	cmp	r2, r3
 80139fc:	d302      	bcc.n	8013a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d116      	bne.n	8013a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	2200      	movs	r2, #0
 8013a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	2220      	movs	r2, #32
 8013a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	2200      	movs	r2, #0
 8013a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a1e:	f043 0220 	orr.w	r2, r3, #32
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	2200      	movs	r2, #0
 8013a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013a2e:	2301      	movs	r3, #1
 8013a30:	e020      	b.n	8013a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	0c1b      	lsrs	r3, r3, #16
 8013a36:	b2db      	uxtb	r3, r3
 8013a38:	2b01      	cmp	r3, #1
 8013a3a:	d10c      	bne.n	8013a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	695b      	ldr	r3, [r3, #20]
 8013a42:	43da      	mvns	r2, r3
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	4013      	ands	r3, r2
 8013a48:	b29b      	uxth	r3, r3
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	bf14      	ite	ne
 8013a4e:	2301      	movne	r3, #1
 8013a50:	2300      	moveq	r3, #0
 8013a52:	b2db      	uxtb	r3, r3
 8013a54:	e00b      	b.n	8013a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	699b      	ldr	r3, [r3, #24]
 8013a5c:	43da      	mvns	r2, r3
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	4013      	ands	r3, r2
 8013a62:	b29b      	uxth	r3, r3
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	bf14      	ite	ne
 8013a68:	2301      	movne	r3, #1
 8013a6a:	2300      	moveq	r3, #0
 8013a6c:	b2db      	uxtb	r3, r3
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d18d      	bne.n	801398e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8013a72:	2300      	movs	r3, #0
}
 8013a74:	4618      	mov	r0, r3
 8013a76:	3710      	adds	r7, #16
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bd80      	pop	{r7, pc}

08013a7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b084      	sub	sp, #16
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	60f8      	str	r0, [r7, #12]
 8013a84:	60b9      	str	r1, [r7, #8]
 8013a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8013a88:	e02d      	b.n	8013ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8013a8a:	68f8      	ldr	r0, [r7, #12]
 8013a8c:	f000 f8ce 	bl	8013c2c <I2C_IsAcknowledgeFailed>
 8013a90:	4603      	mov	r3, r0
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d001      	beq.n	8013a9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8013a96:	2301      	movs	r3, #1
 8013a98:	e02d      	b.n	8013af6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aa0:	d021      	beq.n	8013ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013aa2:	f7fe fd4f 	bl	8012544 <HAL_GetTick>
 8013aa6:	4602      	mov	r2, r0
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	1ad3      	subs	r3, r2, r3
 8013aac:	68ba      	ldr	r2, [r7, #8]
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d302      	bcc.n	8013ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8013ab2:	68bb      	ldr	r3, [r7, #8]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d116      	bne.n	8013ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	2200      	movs	r2, #0
 8013abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	2220      	movs	r2, #32
 8013ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	2200      	movs	r2, #0
 8013aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ad2:	f043 0220 	orr.w	r2, r3, #32
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	2200      	movs	r2, #0
 8013ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013ae2:	2301      	movs	r3, #1
 8013ae4:	e007      	b.n	8013af6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	695b      	ldr	r3, [r3, #20]
 8013aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013af0:	2b80      	cmp	r3, #128	; 0x80
 8013af2:	d1ca      	bne.n	8013a8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013af4:	2300      	movs	r3, #0
}
 8013af6:	4618      	mov	r0, r3
 8013af8:	3710      	adds	r7, #16
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}

08013afe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013afe:	b580      	push	{r7, lr}
 8013b00:	b084      	sub	sp, #16
 8013b02:	af00      	add	r7, sp, #0
 8013b04:	60f8      	str	r0, [r7, #12]
 8013b06:	60b9      	str	r1, [r7, #8]
 8013b08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8013b0a:	e02d      	b.n	8013b68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8013b0c:	68f8      	ldr	r0, [r7, #12]
 8013b0e:	f000 f88d 	bl	8013c2c <I2C_IsAcknowledgeFailed>
 8013b12:	4603      	mov	r3, r0
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d001      	beq.n	8013b1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8013b18:	2301      	movs	r3, #1
 8013b1a:	e02d      	b.n	8013b78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013b1c:	68bb      	ldr	r3, [r7, #8]
 8013b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b22:	d021      	beq.n	8013b68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013b24:	f7fe fd0e 	bl	8012544 <HAL_GetTick>
 8013b28:	4602      	mov	r2, r0
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	1ad3      	subs	r3, r2, r3
 8013b2e:	68ba      	ldr	r2, [r7, #8]
 8013b30:	429a      	cmp	r2, r3
 8013b32:	d302      	bcc.n	8013b3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d116      	bne.n	8013b68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	2220      	movs	r2, #32
 8013b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b54:	f043 0220 	orr.w	r2, r3, #32
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013b64:	2301      	movs	r3, #1
 8013b66:	e007      	b.n	8013b78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	695b      	ldr	r3, [r3, #20]
 8013b6e:	f003 0304 	and.w	r3, r3, #4
 8013b72:	2b04      	cmp	r3, #4
 8013b74:	d1ca      	bne.n	8013b0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013b76:	2300      	movs	r3, #0
}
 8013b78:	4618      	mov	r0, r3
 8013b7a:	3710      	adds	r7, #16
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	bd80      	pop	{r7, pc}

08013b80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b084      	sub	sp, #16
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	60f8      	str	r0, [r7, #12]
 8013b88:	60b9      	str	r1, [r7, #8]
 8013b8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8013b8c:	e042      	b.n	8013c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	695b      	ldr	r3, [r3, #20]
 8013b94:	f003 0310 	and.w	r3, r3, #16
 8013b98:	2b10      	cmp	r3, #16
 8013b9a:	d119      	bne.n	8013bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	f06f 0210 	mvn.w	r2, #16
 8013ba4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	2200      	movs	r2, #0
 8013baa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	2220      	movs	r2, #32
 8013bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8013bcc:	2301      	movs	r3, #1
 8013bce:	e029      	b.n	8013c24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013bd0:	f7fe fcb8 	bl	8012544 <HAL_GetTick>
 8013bd4:	4602      	mov	r2, r0
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	1ad3      	subs	r3, r2, r3
 8013bda:	68ba      	ldr	r2, [r7, #8]
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d302      	bcc.n	8013be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d116      	bne.n	8013c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	2200      	movs	r2, #0
 8013bea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	2220      	movs	r2, #32
 8013bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c00:	f043 0220 	orr.w	r2, r3, #32
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8013c10:	2301      	movs	r3, #1
 8013c12:	e007      	b.n	8013c24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	695b      	ldr	r3, [r3, #20]
 8013c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c1e:	2b40      	cmp	r3, #64	; 0x40
 8013c20:	d1b5      	bne.n	8013b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8013c22:	2300      	movs	r3, #0
}
 8013c24:	4618      	mov	r0, r3
 8013c26:	3710      	adds	r7, #16
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}

08013c2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8013c2c:	b480      	push	{r7}
 8013c2e:	b083      	sub	sp, #12
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	695b      	ldr	r3, [r3, #20]
 8013c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013c42:	d11b      	bne.n	8013c7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013c4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	2200      	movs	r2, #0
 8013c52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	2220      	movs	r2, #32
 8013c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2200      	movs	r2, #0
 8013c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c68:	f043 0204 	orr.w	r2, r3, #4
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2200      	movs	r2, #0
 8013c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8013c78:	2301      	movs	r3, #1
 8013c7a:	e000      	b.n	8013c7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8013c7c:	2300      	movs	r3, #0
}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	370c      	adds	r7, #12
 8013c82:	46bd      	mov	sp, r7
 8013c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c88:	4770      	bx	lr
	...

08013c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b086      	sub	sp, #24
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d101      	bne.n	8013c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8013c9a:	2301      	movs	r3, #1
 8013c9c:	e264      	b.n	8014168 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	f003 0301 	and.w	r3, r3, #1
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d075      	beq.n	8013d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013caa:	4ba3      	ldr	r3, [pc, #652]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013cac:	689b      	ldr	r3, [r3, #8]
 8013cae:	f003 030c 	and.w	r3, r3, #12
 8013cb2:	2b04      	cmp	r3, #4
 8013cb4:	d00c      	beq.n	8013cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013cb6:	4ba0      	ldr	r3, [pc, #640]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013cb8:	689b      	ldr	r3, [r3, #8]
 8013cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013cbe:	2b08      	cmp	r3, #8
 8013cc0:	d112      	bne.n	8013ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013cc2:	4b9d      	ldr	r3, [pc, #628]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013cc4:	685b      	ldr	r3, [r3, #4]
 8013cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013cce:	d10b      	bne.n	8013ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013cd0:	4b99      	ldr	r3, [pc, #612]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d05b      	beq.n	8013d94 <HAL_RCC_OscConfig+0x108>
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	685b      	ldr	r3, [r3, #4]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d157      	bne.n	8013d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8013ce4:	2301      	movs	r3, #1
 8013ce6:	e23f      	b.n	8014168 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	685b      	ldr	r3, [r3, #4]
 8013cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013cf0:	d106      	bne.n	8013d00 <HAL_RCC_OscConfig+0x74>
 8013cf2:	4b91      	ldr	r3, [pc, #580]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	4a90      	ldr	r2, [pc, #576]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013cfc:	6013      	str	r3, [r2, #0]
 8013cfe:	e01d      	b.n	8013d3c <HAL_RCC_OscConfig+0xb0>
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	685b      	ldr	r3, [r3, #4]
 8013d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013d08:	d10c      	bne.n	8013d24 <HAL_RCC_OscConfig+0x98>
 8013d0a:	4b8b      	ldr	r3, [pc, #556]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	4a8a      	ldr	r2, [pc, #552]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8013d14:	6013      	str	r3, [r2, #0]
 8013d16:	4b88      	ldr	r3, [pc, #544]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	4a87      	ldr	r2, [pc, #540]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013d20:	6013      	str	r3, [r2, #0]
 8013d22:	e00b      	b.n	8013d3c <HAL_RCC_OscConfig+0xb0>
 8013d24:	4b84      	ldr	r3, [pc, #528]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	4a83      	ldr	r2, [pc, #524]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013d2e:	6013      	str	r3, [r2, #0]
 8013d30:	4b81      	ldr	r3, [pc, #516]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	4a80      	ldr	r2, [pc, #512]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	685b      	ldr	r3, [r3, #4]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d013      	beq.n	8013d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013d44:	f7fe fbfe 	bl	8012544 <HAL_GetTick>
 8013d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013d4a:	e008      	b.n	8013d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013d4c:	f7fe fbfa 	bl	8012544 <HAL_GetTick>
 8013d50:	4602      	mov	r2, r0
 8013d52:	693b      	ldr	r3, [r7, #16]
 8013d54:	1ad3      	subs	r3, r2, r3
 8013d56:	2b64      	cmp	r3, #100	; 0x64
 8013d58:	d901      	bls.n	8013d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8013d5a:	2303      	movs	r3, #3
 8013d5c:	e204      	b.n	8014168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013d5e:	4b76      	ldr	r3, [pc, #472]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d0f0      	beq.n	8013d4c <HAL_RCC_OscConfig+0xc0>
 8013d6a:	e014      	b.n	8013d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013d6c:	f7fe fbea 	bl	8012544 <HAL_GetTick>
 8013d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013d72:	e008      	b.n	8013d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013d74:	f7fe fbe6 	bl	8012544 <HAL_GetTick>
 8013d78:	4602      	mov	r2, r0
 8013d7a:	693b      	ldr	r3, [r7, #16]
 8013d7c:	1ad3      	subs	r3, r2, r3
 8013d7e:	2b64      	cmp	r3, #100	; 0x64
 8013d80:	d901      	bls.n	8013d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013d82:	2303      	movs	r3, #3
 8013d84:	e1f0      	b.n	8014168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8013d86:	4b6c      	ldr	r3, [pc, #432]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d1f0      	bne.n	8013d74 <HAL_RCC_OscConfig+0xe8>
 8013d92:	e000      	b.n	8013d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	f003 0302 	and.w	r3, r3, #2
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d063      	beq.n	8013e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013da2:	4b65      	ldr	r3, [pc, #404]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013da4:	689b      	ldr	r3, [r3, #8]
 8013da6:	f003 030c 	and.w	r3, r3, #12
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d00b      	beq.n	8013dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013dae:	4b62      	ldr	r3, [pc, #392]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013db0:	689b      	ldr	r3, [r3, #8]
 8013db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8013db6:	2b08      	cmp	r3, #8
 8013db8:	d11c      	bne.n	8013df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013dba:	4b5f      	ldr	r3, [pc, #380]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013dbc:	685b      	ldr	r3, [r3, #4]
 8013dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d116      	bne.n	8013df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013dc6:	4b5c      	ldr	r3, [pc, #368]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	f003 0302 	and.w	r3, r3, #2
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d005      	beq.n	8013dde <HAL_RCC_OscConfig+0x152>
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	68db      	ldr	r3, [r3, #12]
 8013dd6:	2b01      	cmp	r3, #1
 8013dd8:	d001      	beq.n	8013dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8013dda:	2301      	movs	r3, #1
 8013ddc:	e1c4      	b.n	8014168 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013dde:	4b56      	ldr	r3, [pc, #344]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	691b      	ldr	r3, [r3, #16]
 8013dea:	00db      	lsls	r3, r3, #3
 8013dec:	4952      	ldr	r1, [pc, #328]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013dee:	4313      	orrs	r3, r2
 8013df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013df2:	e03a      	b.n	8013e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	68db      	ldr	r3, [r3, #12]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d020      	beq.n	8013e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013dfc:	4b4f      	ldr	r3, [pc, #316]	; (8013f3c <HAL_RCC_OscConfig+0x2b0>)
 8013dfe:	2201      	movs	r2, #1
 8013e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013e02:	f7fe fb9f 	bl	8012544 <HAL_GetTick>
 8013e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013e08:	e008      	b.n	8013e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013e0a:	f7fe fb9b 	bl	8012544 <HAL_GetTick>
 8013e0e:	4602      	mov	r2, r0
 8013e10:	693b      	ldr	r3, [r7, #16]
 8013e12:	1ad3      	subs	r3, r2, r3
 8013e14:	2b02      	cmp	r3, #2
 8013e16:	d901      	bls.n	8013e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013e18:	2303      	movs	r3, #3
 8013e1a:	e1a5      	b.n	8014168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013e1c:	4b46      	ldr	r3, [pc, #280]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	f003 0302 	and.w	r3, r3, #2
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d0f0      	beq.n	8013e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013e28:	4b43      	ldr	r3, [pc, #268]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	691b      	ldr	r3, [r3, #16]
 8013e34:	00db      	lsls	r3, r3, #3
 8013e36:	4940      	ldr	r1, [pc, #256]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013e38:	4313      	orrs	r3, r2
 8013e3a:	600b      	str	r3, [r1, #0]
 8013e3c:	e015      	b.n	8013e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013e3e:	4b3f      	ldr	r3, [pc, #252]	; (8013f3c <HAL_RCC_OscConfig+0x2b0>)
 8013e40:	2200      	movs	r2, #0
 8013e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013e44:	f7fe fb7e 	bl	8012544 <HAL_GetTick>
 8013e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013e4a:	e008      	b.n	8013e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013e4c:	f7fe fb7a 	bl	8012544 <HAL_GetTick>
 8013e50:	4602      	mov	r2, r0
 8013e52:	693b      	ldr	r3, [r7, #16]
 8013e54:	1ad3      	subs	r3, r2, r3
 8013e56:	2b02      	cmp	r3, #2
 8013e58:	d901      	bls.n	8013e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8013e5a:	2303      	movs	r3, #3
 8013e5c:	e184      	b.n	8014168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013e5e:	4b36      	ldr	r3, [pc, #216]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	f003 0302 	and.w	r3, r3, #2
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d1f0      	bne.n	8013e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	f003 0308 	and.w	r3, r3, #8
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d030      	beq.n	8013ed8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	695b      	ldr	r3, [r3, #20]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d016      	beq.n	8013eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013e7e:	4b30      	ldr	r3, [pc, #192]	; (8013f40 <HAL_RCC_OscConfig+0x2b4>)
 8013e80:	2201      	movs	r2, #1
 8013e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013e84:	f7fe fb5e 	bl	8012544 <HAL_GetTick>
 8013e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013e8a:	e008      	b.n	8013e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013e8c:	f7fe fb5a 	bl	8012544 <HAL_GetTick>
 8013e90:	4602      	mov	r2, r0
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	1ad3      	subs	r3, r2, r3
 8013e96:	2b02      	cmp	r3, #2
 8013e98:	d901      	bls.n	8013e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8013e9a:	2303      	movs	r3, #3
 8013e9c:	e164      	b.n	8014168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013e9e:	4b26      	ldr	r3, [pc, #152]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ea2:	f003 0302 	and.w	r3, r3, #2
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d0f0      	beq.n	8013e8c <HAL_RCC_OscConfig+0x200>
 8013eaa:	e015      	b.n	8013ed8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013eac:	4b24      	ldr	r3, [pc, #144]	; (8013f40 <HAL_RCC_OscConfig+0x2b4>)
 8013eae:	2200      	movs	r2, #0
 8013eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013eb2:	f7fe fb47 	bl	8012544 <HAL_GetTick>
 8013eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013eb8:	e008      	b.n	8013ecc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013eba:	f7fe fb43 	bl	8012544 <HAL_GetTick>
 8013ebe:	4602      	mov	r2, r0
 8013ec0:	693b      	ldr	r3, [r7, #16]
 8013ec2:	1ad3      	subs	r3, r2, r3
 8013ec4:	2b02      	cmp	r3, #2
 8013ec6:	d901      	bls.n	8013ecc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8013ec8:	2303      	movs	r3, #3
 8013eca:	e14d      	b.n	8014168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013ecc:	4b1a      	ldr	r3, [pc, #104]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ed0:	f003 0302 	and.w	r3, r3, #2
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d1f0      	bne.n	8013eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	f003 0304 	and.w	r3, r3, #4
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	f000 80a0 	beq.w	8014026 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013eea:	4b13      	ldr	r3, [pc, #76]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d10f      	bne.n	8013f16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	60bb      	str	r3, [r7, #8]
 8013efa:	4b0f      	ldr	r3, [pc, #60]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013efe:	4a0e      	ldr	r2, [pc, #56]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013f04:	6413      	str	r3, [r2, #64]	; 0x40
 8013f06:	4b0c      	ldr	r3, [pc, #48]	; (8013f38 <HAL_RCC_OscConfig+0x2ac>)
 8013f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013f0e:	60bb      	str	r3, [r7, #8]
 8013f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013f12:	2301      	movs	r3, #1
 8013f14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013f16:	4b0b      	ldr	r3, [pc, #44]	; (8013f44 <HAL_RCC_OscConfig+0x2b8>)
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d121      	bne.n	8013f66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013f22:	4b08      	ldr	r3, [pc, #32]	; (8013f44 <HAL_RCC_OscConfig+0x2b8>)
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	4a07      	ldr	r2, [pc, #28]	; (8013f44 <HAL_RCC_OscConfig+0x2b8>)
 8013f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013f2e:	f7fe fb09 	bl	8012544 <HAL_GetTick>
 8013f32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013f34:	e011      	b.n	8013f5a <HAL_RCC_OscConfig+0x2ce>
 8013f36:	bf00      	nop
 8013f38:	40023800 	.word	0x40023800
 8013f3c:	42470000 	.word	0x42470000
 8013f40:	42470e80 	.word	0x42470e80
 8013f44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013f48:	f7fe fafc 	bl	8012544 <HAL_GetTick>
 8013f4c:	4602      	mov	r2, r0
 8013f4e:	693b      	ldr	r3, [r7, #16]
 8013f50:	1ad3      	subs	r3, r2, r3
 8013f52:	2b02      	cmp	r3, #2
 8013f54:	d901      	bls.n	8013f5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8013f56:	2303      	movs	r3, #3
 8013f58:	e106      	b.n	8014168 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013f5a:	4b85      	ldr	r3, [pc, #532]	; (8014170 <HAL_RCC_OscConfig+0x4e4>)
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d0f0      	beq.n	8013f48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	689b      	ldr	r3, [r3, #8]
 8013f6a:	2b01      	cmp	r3, #1
 8013f6c:	d106      	bne.n	8013f7c <HAL_RCC_OscConfig+0x2f0>
 8013f6e:	4b81      	ldr	r3, [pc, #516]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 8013f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f72:	4a80      	ldr	r2, [pc, #512]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 8013f74:	f043 0301 	orr.w	r3, r3, #1
 8013f78:	6713      	str	r3, [r2, #112]	; 0x70
 8013f7a:	e01c      	b.n	8013fb6 <HAL_RCC_OscConfig+0x32a>
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	689b      	ldr	r3, [r3, #8]
 8013f80:	2b05      	cmp	r3, #5
 8013f82:	d10c      	bne.n	8013f9e <HAL_RCC_OscConfig+0x312>
 8013f84:	4b7b      	ldr	r3, [pc, #492]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 8013f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f88:	4a7a      	ldr	r2, [pc, #488]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 8013f8a:	f043 0304 	orr.w	r3, r3, #4
 8013f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8013f90:	4b78      	ldr	r3, [pc, #480]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 8013f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f94:	4a77      	ldr	r2, [pc, #476]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 8013f96:	f043 0301 	orr.w	r3, r3, #1
 8013f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8013f9c:	e00b      	b.n	8013fb6 <HAL_RCC_OscConfig+0x32a>
 8013f9e:	4b75      	ldr	r3, [pc, #468]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 8013fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fa2:	4a74      	ldr	r2, [pc, #464]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 8013fa4:	f023 0301 	bic.w	r3, r3, #1
 8013fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8013faa:	4b72      	ldr	r3, [pc, #456]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 8013fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fae:	4a71      	ldr	r2, [pc, #452]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 8013fb0:	f023 0304 	bic.w	r3, r3, #4
 8013fb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	689b      	ldr	r3, [r3, #8]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d015      	beq.n	8013fea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013fbe:	f7fe fac1 	bl	8012544 <HAL_GetTick>
 8013fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013fc4:	e00a      	b.n	8013fdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013fc6:	f7fe fabd 	bl	8012544 <HAL_GetTick>
 8013fca:	4602      	mov	r2, r0
 8013fcc:	693b      	ldr	r3, [r7, #16]
 8013fce:	1ad3      	subs	r3, r2, r3
 8013fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8013fd4:	4293      	cmp	r3, r2
 8013fd6:	d901      	bls.n	8013fdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8013fd8:	2303      	movs	r3, #3
 8013fda:	e0c5      	b.n	8014168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013fdc:	4b65      	ldr	r3, [pc, #404]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 8013fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fe0:	f003 0302 	and.w	r3, r3, #2
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d0ee      	beq.n	8013fc6 <HAL_RCC_OscConfig+0x33a>
 8013fe8:	e014      	b.n	8014014 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013fea:	f7fe faab 	bl	8012544 <HAL_GetTick>
 8013fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013ff0:	e00a      	b.n	8014008 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013ff2:	f7fe faa7 	bl	8012544 <HAL_GetTick>
 8013ff6:	4602      	mov	r2, r0
 8013ff8:	693b      	ldr	r3, [r7, #16]
 8013ffa:	1ad3      	subs	r3, r2, r3
 8013ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8014000:	4293      	cmp	r3, r2
 8014002:	d901      	bls.n	8014008 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8014004:	2303      	movs	r3, #3
 8014006:	e0af      	b.n	8014168 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8014008:	4b5a      	ldr	r3, [pc, #360]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 801400a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801400c:	f003 0302 	and.w	r3, r3, #2
 8014010:	2b00      	cmp	r3, #0
 8014012:	d1ee      	bne.n	8013ff2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8014014:	7dfb      	ldrb	r3, [r7, #23]
 8014016:	2b01      	cmp	r3, #1
 8014018:	d105      	bne.n	8014026 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801401a:	4b56      	ldr	r3, [pc, #344]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 801401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801401e:	4a55      	ldr	r2, [pc, #340]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 8014020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014024:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	699b      	ldr	r3, [r3, #24]
 801402a:	2b00      	cmp	r3, #0
 801402c:	f000 809b 	beq.w	8014166 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8014030:	4b50      	ldr	r3, [pc, #320]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 8014032:	689b      	ldr	r3, [r3, #8]
 8014034:	f003 030c 	and.w	r3, r3, #12
 8014038:	2b08      	cmp	r3, #8
 801403a:	d05c      	beq.n	80140f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	699b      	ldr	r3, [r3, #24]
 8014040:	2b02      	cmp	r3, #2
 8014042:	d141      	bne.n	80140c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014044:	4b4c      	ldr	r3, [pc, #304]	; (8014178 <HAL_RCC_OscConfig+0x4ec>)
 8014046:	2200      	movs	r2, #0
 8014048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801404a:	f7fe fa7b 	bl	8012544 <HAL_GetTick>
 801404e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014050:	e008      	b.n	8014064 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014052:	f7fe fa77 	bl	8012544 <HAL_GetTick>
 8014056:	4602      	mov	r2, r0
 8014058:	693b      	ldr	r3, [r7, #16]
 801405a:	1ad3      	subs	r3, r2, r3
 801405c:	2b02      	cmp	r3, #2
 801405e:	d901      	bls.n	8014064 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8014060:	2303      	movs	r3, #3
 8014062:	e081      	b.n	8014168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8014064:	4b43      	ldr	r3, [pc, #268]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801406c:	2b00      	cmp	r3, #0
 801406e:	d1f0      	bne.n	8014052 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	69da      	ldr	r2, [r3, #28]
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6a1b      	ldr	r3, [r3, #32]
 8014078:	431a      	orrs	r2, r3
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801407e:	019b      	lsls	r3, r3, #6
 8014080:	431a      	orrs	r2, r3
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014086:	085b      	lsrs	r3, r3, #1
 8014088:	3b01      	subs	r3, #1
 801408a:	041b      	lsls	r3, r3, #16
 801408c:	431a      	orrs	r2, r3
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014092:	061b      	lsls	r3, r3, #24
 8014094:	4937      	ldr	r1, [pc, #220]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 8014096:	4313      	orrs	r3, r2
 8014098:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801409a:	4b37      	ldr	r3, [pc, #220]	; (8014178 <HAL_RCC_OscConfig+0x4ec>)
 801409c:	2201      	movs	r2, #1
 801409e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80140a0:	f7fe fa50 	bl	8012544 <HAL_GetTick>
 80140a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80140a6:	e008      	b.n	80140ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80140a8:	f7fe fa4c 	bl	8012544 <HAL_GetTick>
 80140ac:	4602      	mov	r2, r0
 80140ae:	693b      	ldr	r3, [r7, #16]
 80140b0:	1ad3      	subs	r3, r2, r3
 80140b2:	2b02      	cmp	r3, #2
 80140b4:	d901      	bls.n	80140ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80140b6:	2303      	movs	r3, #3
 80140b8:	e056      	b.n	8014168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80140ba:	4b2e      	ldr	r3, [pc, #184]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d0f0      	beq.n	80140a8 <HAL_RCC_OscConfig+0x41c>
 80140c6:	e04e      	b.n	8014166 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80140c8:	4b2b      	ldr	r3, [pc, #172]	; (8014178 <HAL_RCC_OscConfig+0x4ec>)
 80140ca:	2200      	movs	r2, #0
 80140cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80140ce:	f7fe fa39 	bl	8012544 <HAL_GetTick>
 80140d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80140d4:	e008      	b.n	80140e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80140d6:	f7fe fa35 	bl	8012544 <HAL_GetTick>
 80140da:	4602      	mov	r2, r0
 80140dc:	693b      	ldr	r3, [r7, #16]
 80140de:	1ad3      	subs	r3, r2, r3
 80140e0:	2b02      	cmp	r3, #2
 80140e2:	d901      	bls.n	80140e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80140e4:	2303      	movs	r3, #3
 80140e6:	e03f      	b.n	8014168 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80140e8:	4b22      	ldr	r3, [pc, #136]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d1f0      	bne.n	80140d6 <HAL_RCC_OscConfig+0x44a>
 80140f4:	e037      	b.n	8014166 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	699b      	ldr	r3, [r3, #24]
 80140fa:	2b01      	cmp	r3, #1
 80140fc:	d101      	bne.n	8014102 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80140fe:	2301      	movs	r3, #1
 8014100:	e032      	b.n	8014168 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8014102:	4b1c      	ldr	r3, [pc, #112]	; (8014174 <HAL_RCC_OscConfig+0x4e8>)
 8014104:	685b      	ldr	r3, [r3, #4]
 8014106:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	699b      	ldr	r3, [r3, #24]
 801410c:	2b01      	cmp	r3, #1
 801410e:	d028      	beq.n	8014162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801411a:	429a      	cmp	r2, r3
 801411c:	d121      	bne.n	8014162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014128:	429a      	cmp	r2, r3
 801412a:	d11a      	bne.n	8014162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801412c:	68fa      	ldr	r2, [r7, #12]
 801412e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8014132:	4013      	ands	r3, r2
 8014134:	687a      	ldr	r2, [r7, #4]
 8014136:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014138:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801413a:	4293      	cmp	r3, r2
 801413c:	d111      	bne.n	8014162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014148:	085b      	lsrs	r3, r3, #1
 801414a:	3b01      	subs	r3, #1
 801414c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801414e:	429a      	cmp	r2, r3
 8014150:	d107      	bne.n	8014162 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801415c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801415e:	429a      	cmp	r2, r3
 8014160:	d001      	beq.n	8014166 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8014162:	2301      	movs	r3, #1
 8014164:	e000      	b.n	8014168 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8014166:	2300      	movs	r3, #0
}
 8014168:	4618      	mov	r0, r3
 801416a:	3718      	adds	r7, #24
 801416c:	46bd      	mov	sp, r7
 801416e:	bd80      	pop	{r7, pc}
 8014170:	40007000 	.word	0x40007000
 8014174:	40023800 	.word	0x40023800
 8014178:	42470060 	.word	0x42470060

0801417c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b084      	sub	sp, #16
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
 8014184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d101      	bne.n	8014190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801418c:	2301      	movs	r3, #1
 801418e:	e0cc      	b.n	801432a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014190:	4b68      	ldr	r3, [pc, #416]	; (8014334 <HAL_RCC_ClockConfig+0x1b8>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	f003 0307 	and.w	r3, r3, #7
 8014198:	683a      	ldr	r2, [r7, #0]
 801419a:	429a      	cmp	r2, r3
 801419c:	d90c      	bls.n	80141b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801419e:	4b65      	ldr	r3, [pc, #404]	; (8014334 <HAL_RCC_ClockConfig+0x1b8>)
 80141a0:	683a      	ldr	r2, [r7, #0]
 80141a2:	b2d2      	uxtb	r2, r2
 80141a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80141a6:	4b63      	ldr	r3, [pc, #396]	; (8014334 <HAL_RCC_ClockConfig+0x1b8>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	f003 0307 	and.w	r3, r3, #7
 80141ae:	683a      	ldr	r2, [r7, #0]
 80141b0:	429a      	cmp	r2, r3
 80141b2:	d001      	beq.n	80141b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80141b4:	2301      	movs	r3, #1
 80141b6:	e0b8      	b.n	801432a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	f003 0302 	and.w	r3, r3, #2
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d020      	beq.n	8014206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	f003 0304 	and.w	r3, r3, #4
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d005      	beq.n	80141dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80141d0:	4b59      	ldr	r3, [pc, #356]	; (8014338 <HAL_RCC_ClockConfig+0x1bc>)
 80141d2:	689b      	ldr	r3, [r3, #8]
 80141d4:	4a58      	ldr	r2, [pc, #352]	; (8014338 <HAL_RCC_ClockConfig+0x1bc>)
 80141d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80141da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	f003 0308 	and.w	r3, r3, #8
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d005      	beq.n	80141f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80141e8:	4b53      	ldr	r3, [pc, #332]	; (8014338 <HAL_RCC_ClockConfig+0x1bc>)
 80141ea:	689b      	ldr	r3, [r3, #8]
 80141ec:	4a52      	ldr	r2, [pc, #328]	; (8014338 <HAL_RCC_ClockConfig+0x1bc>)
 80141ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80141f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80141f4:	4b50      	ldr	r3, [pc, #320]	; (8014338 <HAL_RCC_ClockConfig+0x1bc>)
 80141f6:	689b      	ldr	r3, [r3, #8]
 80141f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	689b      	ldr	r3, [r3, #8]
 8014200:	494d      	ldr	r1, [pc, #308]	; (8014338 <HAL_RCC_ClockConfig+0x1bc>)
 8014202:	4313      	orrs	r3, r2
 8014204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	f003 0301 	and.w	r3, r3, #1
 801420e:	2b00      	cmp	r3, #0
 8014210:	d044      	beq.n	801429c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	685b      	ldr	r3, [r3, #4]
 8014216:	2b01      	cmp	r3, #1
 8014218:	d107      	bne.n	801422a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801421a:	4b47      	ldr	r3, [pc, #284]	; (8014338 <HAL_RCC_ClockConfig+0x1bc>)
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014222:	2b00      	cmp	r3, #0
 8014224:	d119      	bne.n	801425a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014226:	2301      	movs	r3, #1
 8014228:	e07f      	b.n	801432a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	685b      	ldr	r3, [r3, #4]
 801422e:	2b02      	cmp	r3, #2
 8014230:	d003      	beq.n	801423a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8014236:	2b03      	cmp	r3, #3
 8014238:	d107      	bne.n	801424a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801423a:	4b3f      	ldr	r3, [pc, #252]	; (8014338 <HAL_RCC_ClockConfig+0x1bc>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014242:	2b00      	cmp	r3, #0
 8014244:	d109      	bne.n	801425a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014246:	2301      	movs	r3, #1
 8014248:	e06f      	b.n	801432a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801424a:	4b3b      	ldr	r3, [pc, #236]	; (8014338 <HAL_RCC_ClockConfig+0x1bc>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	f003 0302 	and.w	r3, r3, #2
 8014252:	2b00      	cmp	r3, #0
 8014254:	d101      	bne.n	801425a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8014256:	2301      	movs	r3, #1
 8014258:	e067      	b.n	801432a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801425a:	4b37      	ldr	r3, [pc, #220]	; (8014338 <HAL_RCC_ClockConfig+0x1bc>)
 801425c:	689b      	ldr	r3, [r3, #8]
 801425e:	f023 0203 	bic.w	r2, r3, #3
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	685b      	ldr	r3, [r3, #4]
 8014266:	4934      	ldr	r1, [pc, #208]	; (8014338 <HAL_RCC_ClockConfig+0x1bc>)
 8014268:	4313      	orrs	r3, r2
 801426a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801426c:	f7fe f96a 	bl	8012544 <HAL_GetTick>
 8014270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014272:	e00a      	b.n	801428a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014274:	f7fe f966 	bl	8012544 <HAL_GetTick>
 8014278:	4602      	mov	r2, r0
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	1ad3      	subs	r3, r2, r3
 801427e:	f241 3288 	movw	r2, #5000	; 0x1388
 8014282:	4293      	cmp	r3, r2
 8014284:	d901      	bls.n	801428a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8014286:	2303      	movs	r3, #3
 8014288:	e04f      	b.n	801432a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801428a:	4b2b      	ldr	r3, [pc, #172]	; (8014338 <HAL_RCC_ClockConfig+0x1bc>)
 801428c:	689b      	ldr	r3, [r3, #8]
 801428e:	f003 020c 	and.w	r2, r3, #12
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	685b      	ldr	r3, [r3, #4]
 8014296:	009b      	lsls	r3, r3, #2
 8014298:	429a      	cmp	r2, r3
 801429a:	d1eb      	bne.n	8014274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801429c:	4b25      	ldr	r3, [pc, #148]	; (8014334 <HAL_RCC_ClockConfig+0x1b8>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	f003 0307 	and.w	r3, r3, #7
 80142a4:	683a      	ldr	r2, [r7, #0]
 80142a6:	429a      	cmp	r2, r3
 80142a8:	d20c      	bcs.n	80142c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80142aa:	4b22      	ldr	r3, [pc, #136]	; (8014334 <HAL_RCC_ClockConfig+0x1b8>)
 80142ac:	683a      	ldr	r2, [r7, #0]
 80142ae:	b2d2      	uxtb	r2, r2
 80142b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80142b2:	4b20      	ldr	r3, [pc, #128]	; (8014334 <HAL_RCC_ClockConfig+0x1b8>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	f003 0307 	and.w	r3, r3, #7
 80142ba:	683a      	ldr	r2, [r7, #0]
 80142bc:	429a      	cmp	r2, r3
 80142be:	d001      	beq.n	80142c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80142c0:	2301      	movs	r3, #1
 80142c2:	e032      	b.n	801432a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	f003 0304 	and.w	r3, r3, #4
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d008      	beq.n	80142e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80142d0:	4b19      	ldr	r3, [pc, #100]	; (8014338 <HAL_RCC_ClockConfig+0x1bc>)
 80142d2:	689b      	ldr	r3, [r3, #8]
 80142d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	68db      	ldr	r3, [r3, #12]
 80142dc:	4916      	ldr	r1, [pc, #88]	; (8014338 <HAL_RCC_ClockConfig+0x1bc>)
 80142de:	4313      	orrs	r3, r2
 80142e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	f003 0308 	and.w	r3, r3, #8
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d009      	beq.n	8014302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80142ee:	4b12      	ldr	r3, [pc, #72]	; (8014338 <HAL_RCC_ClockConfig+0x1bc>)
 80142f0:	689b      	ldr	r3, [r3, #8]
 80142f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	691b      	ldr	r3, [r3, #16]
 80142fa:	00db      	lsls	r3, r3, #3
 80142fc:	490e      	ldr	r1, [pc, #56]	; (8014338 <HAL_RCC_ClockConfig+0x1bc>)
 80142fe:	4313      	orrs	r3, r2
 8014300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014302:	f000 f821 	bl	8014348 <HAL_RCC_GetSysClockFreq>
 8014306:	4602      	mov	r2, r0
 8014308:	4b0b      	ldr	r3, [pc, #44]	; (8014338 <HAL_RCC_ClockConfig+0x1bc>)
 801430a:	689b      	ldr	r3, [r3, #8]
 801430c:	091b      	lsrs	r3, r3, #4
 801430e:	f003 030f 	and.w	r3, r3, #15
 8014312:	490a      	ldr	r1, [pc, #40]	; (801433c <HAL_RCC_ClockConfig+0x1c0>)
 8014314:	5ccb      	ldrb	r3, [r1, r3]
 8014316:	fa22 f303 	lsr.w	r3, r2, r3
 801431a:	4a09      	ldr	r2, [pc, #36]	; (8014340 <HAL_RCC_ClockConfig+0x1c4>)
 801431c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801431e:	4b09      	ldr	r3, [pc, #36]	; (8014344 <HAL_RCC_ClockConfig+0x1c8>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	4618      	mov	r0, r3
 8014324:	f7fe f8ca 	bl	80124bc <HAL_InitTick>

  return HAL_OK;
 8014328:	2300      	movs	r3, #0
}
 801432a:	4618      	mov	r0, r3
 801432c:	3710      	adds	r7, #16
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}
 8014332:	bf00      	nop
 8014334:	40023c00 	.word	0x40023c00
 8014338:	40023800 	.word	0x40023800
 801433c:	08015dc0 	.word	0x08015dc0
 8014340:	20000018 	.word	0x20000018
 8014344:	20000080 	.word	0x20000080

08014348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014348:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801434c:	b084      	sub	sp, #16
 801434e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8014350:	2300      	movs	r3, #0
 8014352:	607b      	str	r3, [r7, #4]
 8014354:	2300      	movs	r3, #0
 8014356:	60fb      	str	r3, [r7, #12]
 8014358:	2300      	movs	r3, #0
 801435a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801435c:	2300      	movs	r3, #0
 801435e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8014360:	4b67      	ldr	r3, [pc, #412]	; (8014500 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014362:	689b      	ldr	r3, [r3, #8]
 8014364:	f003 030c 	and.w	r3, r3, #12
 8014368:	2b08      	cmp	r3, #8
 801436a:	d00d      	beq.n	8014388 <HAL_RCC_GetSysClockFreq+0x40>
 801436c:	2b08      	cmp	r3, #8
 801436e:	f200 80bd 	bhi.w	80144ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8014372:	2b00      	cmp	r3, #0
 8014374:	d002      	beq.n	801437c <HAL_RCC_GetSysClockFreq+0x34>
 8014376:	2b04      	cmp	r3, #4
 8014378:	d003      	beq.n	8014382 <HAL_RCC_GetSysClockFreq+0x3a>
 801437a:	e0b7      	b.n	80144ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801437c:	4b61      	ldr	r3, [pc, #388]	; (8014504 <HAL_RCC_GetSysClockFreq+0x1bc>)
 801437e:	60bb      	str	r3, [r7, #8]
       break;
 8014380:	e0b7      	b.n	80144f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8014382:	4b61      	ldr	r3, [pc, #388]	; (8014508 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8014384:	60bb      	str	r3, [r7, #8]
      break;
 8014386:	e0b4      	b.n	80144f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8014388:	4b5d      	ldr	r3, [pc, #372]	; (8014500 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801438a:	685b      	ldr	r3, [r3, #4]
 801438c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014390:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8014392:	4b5b      	ldr	r3, [pc, #364]	; (8014500 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8014394:	685b      	ldr	r3, [r3, #4]
 8014396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801439a:	2b00      	cmp	r3, #0
 801439c:	d04d      	beq.n	801443a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801439e:	4b58      	ldr	r3, [pc, #352]	; (8014500 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80143a0:	685b      	ldr	r3, [r3, #4]
 80143a2:	099b      	lsrs	r3, r3, #6
 80143a4:	461a      	mov	r2, r3
 80143a6:	f04f 0300 	mov.w	r3, #0
 80143aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80143ae:	f04f 0100 	mov.w	r1, #0
 80143b2:	ea02 0800 	and.w	r8, r2, r0
 80143b6:	ea03 0901 	and.w	r9, r3, r1
 80143ba:	4640      	mov	r0, r8
 80143bc:	4649      	mov	r1, r9
 80143be:	f04f 0200 	mov.w	r2, #0
 80143c2:	f04f 0300 	mov.w	r3, #0
 80143c6:	014b      	lsls	r3, r1, #5
 80143c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80143cc:	0142      	lsls	r2, r0, #5
 80143ce:	4610      	mov	r0, r2
 80143d0:	4619      	mov	r1, r3
 80143d2:	ebb0 0008 	subs.w	r0, r0, r8
 80143d6:	eb61 0109 	sbc.w	r1, r1, r9
 80143da:	f04f 0200 	mov.w	r2, #0
 80143de:	f04f 0300 	mov.w	r3, #0
 80143e2:	018b      	lsls	r3, r1, #6
 80143e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80143e8:	0182      	lsls	r2, r0, #6
 80143ea:	1a12      	subs	r2, r2, r0
 80143ec:	eb63 0301 	sbc.w	r3, r3, r1
 80143f0:	f04f 0000 	mov.w	r0, #0
 80143f4:	f04f 0100 	mov.w	r1, #0
 80143f8:	00d9      	lsls	r1, r3, #3
 80143fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80143fe:	00d0      	lsls	r0, r2, #3
 8014400:	4602      	mov	r2, r0
 8014402:	460b      	mov	r3, r1
 8014404:	eb12 0208 	adds.w	r2, r2, r8
 8014408:	eb43 0309 	adc.w	r3, r3, r9
 801440c:	f04f 0000 	mov.w	r0, #0
 8014410:	f04f 0100 	mov.w	r1, #0
 8014414:	0259      	lsls	r1, r3, #9
 8014416:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 801441a:	0250      	lsls	r0, r2, #9
 801441c:	4602      	mov	r2, r0
 801441e:	460b      	mov	r3, r1
 8014420:	4610      	mov	r0, r2
 8014422:	4619      	mov	r1, r3
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	461a      	mov	r2, r3
 8014428:	f04f 0300 	mov.w	r3, #0
 801442c:	f7ec fb6e 	bl	8000b0c <__aeabi_uldivmod>
 8014430:	4602      	mov	r2, r0
 8014432:	460b      	mov	r3, r1
 8014434:	4613      	mov	r3, r2
 8014436:	60fb      	str	r3, [r7, #12]
 8014438:	e04a      	b.n	80144d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801443a:	4b31      	ldr	r3, [pc, #196]	; (8014500 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801443c:	685b      	ldr	r3, [r3, #4]
 801443e:	099b      	lsrs	r3, r3, #6
 8014440:	461a      	mov	r2, r3
 8014442:	f04f 0300 	mov.w	r3, #0
 8014446:	f240 10ff 	movw	r0, #511	; 0x1ff
 801444a:	f04f 0100 	mov.w	r1, #0
 801444e:	ea02 0400 	and.w	r4, r2, r0
 8014452:	ea03 0501 	and.w	r5, r3, r1
 8014456:	4620      	mov	r0, r4
 8014458:	4629      	mov	r1, r5
 801445a:	f04f 0200 	mov.w	r2, #0
 801445e:	f04f 0300 	mov.w	r3, #0
 8014462:	014b      	lsls	r3, r1, #5
 8014464:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8014468:	0142      	lsls	r2, r0, #5
 801446a:	4610      	mov	r0, r2
 801446c:	4619      	mov	r1, r3
 801446e:	1b00      	subs	r0, r0, r4
 8014470:	eb61 0105 	sbc.w	r1, r1, r5
 8014474:	f04f 0200 	mov.w	r2, #0
 8014478:	f04f 0300 	mov.w	r3, #0
 801447c:	018b      	lsls	r3, r1, #6
 801447e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8014482:	0182      	lsls	r2, r0, #6
 8014484:	1a12      	subs	r2, r2, r0
 8014486:	eb63 0301 	sbc.w	r3, r3, r1
 801448a:	f04f 0000 	mov.w	r0, #0
 801448e:	f04f 0100 	mov.w	r1, #0
 8014492:	00d9      	lsls	r1, r3, #3
 8014494:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014498:	00d0      	lsls	r0, r2, #3
 801449a:	4602      	mov	r2, r0
 801449c:	460b      	mov	r3, r1
 801449e:	1912      	adds	r2, r2, r4
 80144a0:	eb45 0303 	adc.w	r3, r5, r3
 80144a4:	f04f 0000 	mov.w	r0, #0
 80144a8:	f04f 0100 	mov.w	r1, #0
 80144ac:	0299      	lsls	r1, r3, #10
 80144ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80144b2:	0290      	lsls	r0, r2, #10
 80144b4:	4602      	mov	r2, r0
 80144b6:	460b      	mov	r3, r1
 80144b8:	4610      	mov	r0, r2
 80144ba:	4619      	mov	r1, r3
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	461a      	mov	r2, r3
 80144c0:	f04f 0300 	mov.w	r3, #0
 80144c4:	f7ec fb22 	bl	8000b0c <__aeabi_uldivmod>
 80144c8:	4602      	mov	r2, r0
 80144ca:	460b      	mov	r3, r1
 80144cc:	4613      	mov	r3, r2
 80144ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80144d0:	4b0b      	ldr	r3, [pc, #44]	; (8014500 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80144d2:	685b      	ldr	r3, [r3, #4]
 80144d4:	0c1b      	lsrs	r3, r3, #16
 80144d6:	f003 0303 	and.w	r3, r3, #3
 80144da:	3301      	adds	r3, #1
 80144dc:	005b      	lsls	r3, r3, #1
 80144de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80144e0:	68fa      	ldr	r2, [r7, #12]
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80144e8:	60bb      	str	r3, [r7, #8]
      break;
 80144ea:	e002      	b.n	80144f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80144ec:	4b05      	ldr	r3, [pc, #20]	; (8014504 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80144ee:	60bb      	str	r3, [r7, #8]
      break;
 80144f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80144f2:	68bb      	ldr	r3, [r7, #8]
}
 80144f4:	4618      	mov	r0, r3
 80144f6:	3710      	adds	r7, #16
 80144f8:	46bd      	mov	sp, r7
 80144fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80144fe:	bf00      	nop
 8014500:	40023800 	.word	0x40023800
 8014504:	00f42400 	.word	0x00f42400
 8014508:	007a1200 	.word	0x007a1200

0801450c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801450c:	b480      	push	{r7}
 801450e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014510:	4b03      	ldr	r3, [pc, #12]	; (8014520 <HAL_RCC_GetHCLKFreq+0x14>)
 8014512:	681b      	ldr	r3, [r3, #0]
}
 8014514:	4618      	mov	r0, r3
 8014516:	46bd      	mov	sp, r7
 8014518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451c:	4770      	bx	lr
 801451e:	bf00      	nop
 8014520:	20000018 	.word	0x20000018

08014524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014524:	b580      	push	{r7, lr}
 8014526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8014528:	f7ff fff0 	bl	801450c <HAL_RCC_GetHCLKFreq>
 801452c:	4602      	mov	r2, r0
 801452e:	4b05      	ldr	r3, [pc, #20]	; (8014544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8014530:	689b      	ldr	r3, [r3, #8]
 8014532:	0a9b      	lsrs	r3, r3, #10
 8014534:	f003 0307 	and.w	r3, r3, #7
 8014538:	4903      	ldr	r1, [pc, #12]	; (8014548 <HAL_RCC_GetPCLK1Freq+0x24>)
 801453a:	5ccb      	ldrb	r3, [r1, r3]
 801453c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014540:	4618      	mov	r0, r3
 8014542:	bd80      	pop	{r7, pc}
 8014544:	40023800 	.word	0x40023800
 8014548:	08015dd0 	.word	0x08015dd0

0801454c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8014550:	f7ff ffdc 	bl	801450c <HAL_RCC_GetHCLKFreq>
 8014554:	4602      	mov	r2, r0
 8014556:	4b05      	ldr	r3, [pc, #20]	; (801456c <HAL_RCC_GetPCLK2Freq+0x20>)
 8014558:	689b      	ldr	r3, [r3, #8]
 801455a:	0b5b      	lsrs	r3, r3, #13
 801455c:	f003 0307 	and.w	r3, r3, #7
 8014560:	4903      	ldr	r1, [pc, #12]	; (8014570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8014562:	5ccb      	ldrb	r3, [r1, r3]
 8014564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014568:	4618      	mov	r0, r3
 801456a:	bd80      	pop	{r7, pc}
 801456c:	40023800 	.word	0x40023800
 8014570:	08015dd0 	.word	0x08015dd0

08014574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b082      	sub	sp, #8
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d101      	bne.n	8014586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014582:	2301      	movs	r3, #1
 8014584:	e03f      	b.n	8014606 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801458c:	b2db      	uxtb	r3, r3
 801458e:	2b00      	cmp	r3, #0
 8014590:	d106      	bne.n	80145a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	2200      	movs	r2, #0
 8014596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801459a:	6878      	ldr	r0, [r7, #4]
 801459c:	f7ed f86c 	bl	8001678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	2224      	movs	r2, #36	; 0x24
 80145a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	68da      	ldr	r2, [r3, #12]
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80145b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f000 f929 	bl	8014810 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	691a      	ldr	r2, [r3, #16]
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80145cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	695a      	ldr	r2, [r3, #20]
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80145dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	68da      	ldr	r2, [r3, #12]
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80145ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	2200      	movs	r2, #0
 80145f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	2220      	movs	r2, #32
 80145f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	2220      	movs	r2, #32
 8014600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8014604:	2300      	movs	r3, #0
}
 8014606:	4618      	mov	r0, r3
 8014608:	3708      	adds	r7, #8
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}

0801460e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801460e:	b580      	push	{r7, lr}
 8014610:	b08a      	sub	sp, #40	; 0x28
 8014612:	af02      	add	r7, sp, #8
 8014614:	60f8      	str	r0, [r7, #12]
 8014616:	60b9      	str	r1, [r7, #8]
 8014618:	603b      	str	r3, [r7, #0]
 801461a:	4613      	mov	r3, r2
 801461c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801461e:	2300      	movs	r3, #0
 8014620:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014628:	b2db      	uxtb	r3, r3
 801462a:	2b20      	cmp	r3, #32
 801462c:	d17c      	bne.n	8014728 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801462e:	68bb      	ldr	r3, [r7, #8]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d002      	beq.n	801463a <HAL_UART_Transmit+0x2c>
 8014634:	88fb      	ldrh	r3, [r7, #6]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d101      	bne.n	801463e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801463a:	2301      	movs	r3, #1
 801463c:	e075      	b.n	801472a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014644:	2b01      	cmp	r3, #1
 8014646:	d101      	bne.n	801464c <HAL_UART_Transmit+0x3e>
 8014648:	2302      	movs	r3, #2
 801464a:	e06e      	b.n	801472a <HAL_UART_Transmit+0x11c>
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	2201      	movs	r2, #1
 8014650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	2200      	movs	r2, #0
 8014658:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	2221      	movs	r2, #33	; 0x21
 801465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014662:	f7fd ff6f 	bl	8012544 <HAL_GetTick>
 8014666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	88fa      	ldrh	r2, [r7, #6]
 801466c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	88fa      	ldrh	r2, [r7, #6]
 8014672:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	689b      	ldr	r3, [r3, #8]
 8014678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801467c:	d108      	bne.n	8014690 <HAL_UART_Transmit+0x82>
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	691b      	ldr	r3, [r3, #16]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d104      	bne.n	8014690 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8014686:	2300      	movs	r3, #0
 8014688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801468a:	68bb      	ldr	r3, [r7, #8]
 801468c:	61bb      	str	r3, [r7, #24]
 801468e:	e003      	b.n	8014698 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8014690:	68bb      	ldr	r3, [r7, #8]
 8014692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014694:	2300      	movs	r3, #0
 8014696:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	2200      	movs	r2, #0
 801469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80146a0:	e02a      	b.n	80146f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80146a2:	683b      	ldr	r3, [r7, #0]
 80146a4:	9300      	str	r3, [sp, #0]
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	2200      	movs	r2, #0
 80146aa:	2180      	movs	r1, #128	; 0x80
 80146ac:	68f8      	ldr	r0, [r7, #12]
 80146ae:	f000 f840 	bl	8014732 <UART_WaitOnFlagUntilTimeout>
 80146b2:	4603      	mov	r3, r0
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d001      	beq.n	80146bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80146b8:	2303      	movs	r3, #3
 80146ba:	e036      	b.n	801472a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80146bc:	69fb      	ldr	r3, [r7, #28]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d10b      	bne.n	80146da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80146c2:	69bb      	ldr	r3, [r7, #24]
 80146c4:	881b      	ldrh	r3, [r3, #0]
 80146c6:	461a      	mov	r2, r3
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80146d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80146d2:	69bb      	ldr	r3, [r7, #24]
 80146d4:	3302      	adds	r3, #2
 80146d6:	61bb      	str	r3, [r7, #24]
 80146d8:	e007      	b.n	80146ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80146da:	69fb      	ldr	r3, [r7, #28]
 80146dc:	781a      	ldrb	r2, [r3, #0]
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80146e4:	69fb      	ldr	r3, [r7, #28]
 80146e6:	3301      	adds	r3, #1
 80146e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80146ee:	b29b      	uxth	r3, r3
 80146f0:	3b01      	subs	r3, #1
 80146f2:	b29a      	uxth	r2, r3
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80146fc:	b29b      	uxth	r3, r3
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d1cf      	bne.n	80146a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	9300      	str	r3, [sp, #0]
 8014706:	697b      	ldr	r3, [r7, #20]
 8014708:	2200      	movs	r2, #0
 801470a:	2140      	movs	r1, #64	; 0x40
 801470c:	68f8      	ldr	r0, [r7, #12]
 801470e:	f000 f810 	bl	8014732 <UART_WaitOnFlagUntilTimeout>
 8014712:	4603      	mov	r3, r0
 8014714:	2b00      	cmp	r3, #0
 8014716:	d001      	beq.n	801471c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8014718:	2303      	movs	r3, #3
 801471a:	e006      	b.n	801472a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	2220      	movs	r2, #32
 8014720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8014724:	2300      	movs	r3, #0
 8014726:	e000      	b.n	801472a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8014728:	2302      	movs	r3, #2
  }
}
 801472a:	4618      	mov	r0, r3
 801472c:	3720      	adds	r7, #32
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}

08014732 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8014732:	b580      	push	{r7, lr}
 8014734:	b090      	sub	sp, #64	; 0x40
 8014736:	af00      	add	r7, sp, #0
 8014738:	60f8      	str	r0, [r7, #12]
 801473a:	60b9      	str	r1, [r7, #8]
 801473c:	603b      	str	r3, [r7, #0]
 801473e:	4613      	mov	r3, r2
 8014740:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014742:	e050      	b.n	80147e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014746:	f1b3 3fff 	cmp.w	r3, #4294967295
 801474a:	d04c      	beq.n	80147e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801474c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801474e:	2b00      	cmp	r3, #0
 8014750:	d007      	beq.n	8014762 <UART_WaitOnFlagUntilTimeout+0x30>
 8014752:	f7fd fef7 	bl	8012544 <HAL_GetTick>
 8014756:	4602      	mov	r2, r0
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	1ad3      	subs	r3, r2, r3
 801475c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801475e:	429a      	cmp	r2, r3
 8014760:	d241      	bcs.n	80147e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	330c      	adds	r3, #12
 8014768:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801476c:	e853 3f00 	ldrex	r3, [r3]
 8014770:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014778:	63fb      	str	r3, [r7, #60]	; 0x3c
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	330c      	adds	r3, #12
 8014780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014782:	637a      	str	r2, [r7, #52]	; 0x34
 8014784:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014786:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801478a:	e841 2300 	strex	r3, r2, [r1]
 801478e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014792:	2b00      	cmp	r3, #0
 8014794:	d1e5      	bne.n	8014762 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	3314      	adds	r3, #20
 801479c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	e853 3f00 	ldrex	r3, [r3]
 80147a4:	613b      	str	r3, [r7, #16]
   return(result);
 80147a6:	693b      	ldr	r3, [r7, #16]
 80147a8:	f023 0301 	bic.w	r3, r3, #1
 80147ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	3314      	adds	r3, #20
 80147b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147b6:	623a      	str	r2, [r7, #32]
 80147b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147ba:	69f9      	ldr	r1, [r7, #28]
 80147bc:	6a3a      	ldr	r2, [r7, #32]
 80147be:	e841 2300 	strex	r3, r2, [r1]
 80147c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80147c4:	69bb      	ldr	r3, [r7, #24]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d1e5      	bne.n	8014796 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	2220      	movs	r2, #32
 80147ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	2220      	movs	r2, #32
 80147d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	2200      	movs	r2, #0
 80147de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80147e2:	2303      	movs	r3, #3
 80147e4:	e00f      	b.n	8014806 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	681a      	ldr	r2, [r3, #0]
 80147ec:	68bb      	ldr	r3, [r7, #8]
 80147ee:	4013      	ands	r3, r2
 80147f0:	68ba      	ldr	r2, [r7, #8]
 80147f2:	429a      	cmp	r2, r3
 80147f4:	bf0c      	ite	eq
 80147f6:	2301      	moveq	r3, #1
 80147f8:	2300      	movne	r3, #0
 80147fa:	b2db      	uxtb	r3, r3
 80147fc:	461a      	mov	r2, r3
 80147fe:	79fb      	ldrb	r3, [r7, #7]
 8014800:	429a      	cmp	r2, r3
 8014802:	d09f      	beq.n	8014744 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8014804:	2300      	movs	r3, #0
}
 8014806:	4618      	mov	r0, r3
 8014808:	3740      	adds	r7, #64	; 0x40
 801480a:	46bd      	mov	sp, r7
 801480c:	bd80      	pop	{r7, pc}
	...

08014810 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014814:	b09f      	sub	sp, #124	; 0x7c
 8014816:	af00      	add	r7, sp, #0
 8014818:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801481a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	691b      	ldr	r3, [r3, #16]
 8014820:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8014824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014826:	68d9      	ldr	r1, [r3, #12]
 8014828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801482a:	681a      	ldr	r2, [r3, #0]
 801482c:	ea40 0301 	orr.w	r3, r0, r1
 8014830:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8014832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014834:	689a      	ldr	r2, [r3, #8]
 8014836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014838:	691b      	ldr	r3, [r3, #16]
 801483a:	431a      	orrs	r2, r3
 801483c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801483e:	695b      	ldr	r3, [r3, #20]
 8014840:	431a      	orrs	r2, r3
 8014842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014844:	69db      	ldr	r3, [r3, #28]
 8014846:	4313      	orrs	r3, r2
 8014848:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 801484a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	68db      	ldr	r3, [r3, #12]
 8014850:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8014854:	f021 010c 	bic.w	r1, r1, #12
 8014858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801485a:	681a      	ldr	r2, [r3, #0]
 801485c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801485e:	430b      	orrs	r3, r1
 8014860:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8014862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	695b      	ldr	r3, [r3, #20]
 8014868:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801486c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801486e:	6999      	ldr	r1, [r3, #24]
 8014870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014872:	681a      	ldr	r2, [r3, #0]
 8014874:	ea40 0301 	orr.w	r3, r0, r1
 8014878:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801487a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801487c:	681a      	ldr	r2, [r3, #0]
 801487e:	4bc5      	ldr	r3, [pc, #788]	; (8014b94 <UART_SetConfig+0x384>)
 8014880:	429a      	cmp	r2, r3
 8014882:	d004      	beq.n	801488e <UART_SetConfig+0x7e>
 8014884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014886:	681a      	ldr	r2, [r3, #0]
 8014888:	4bc3      	ldr	r3, [pc, #780]	; (8014b98 <UART_SetConfig+0x388>)
 801488a:	429a      	cmp	r2, r3
 801488c:	d103      	bne.n	8014896 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801488e:	f7ff fe5d 	bl	801454c <HAL_RCC_GetPCLK2Freq>
 8014892:	6778      	str	r0, [r7, #116]	; 0x74
 8014894:	e002      	b.n	801489c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8014896:	f7ff fe45 	bl	8014524 <HAL_RCC_GetPCLK1Freq>
 801489a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801489c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801489e:	69db      	ldr	r3, [r3, #28]
 80148a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80148a4:	f040 80b6 	bne.w	8014a14 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80148a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80148aa:	461c      	mov	r4, r3
 80148ac:	f04f 0500 	mov.w	r5, #0
 80148b0:	4622      	mov	r2, r4
 80148b2:	462b      	mov	r3, r5
 80148b4:	1891      	adds	r1, r2, r2
 80148b6:	6439      	str	r1, [r7, #64]	; 0x40
 80148b8:	415b      	adcs	r3, r3
 80148ba:	647b      	str	r3, [r7, #68]	; 0x44
 80148bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80148c0:	1912      	adds	r2, r2, r4
 80148c2:	eb45 0303 	adc.w	r3, r5, r3
 80148c6:	f04f 0000 	mov.w	r0, #0
 80148ca:	f04f 0100 	mov.w	r1, #0
 80148ce:	00d9      	lsls	r1, r3, #3
 80148d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80148d4:	00d0      	lsls	r0, r2, #3
 80148d6:	4602      	mov	r2, r0
 80148d8:	460b      	mov	r3, r1
 80148da:	1911      	adds	r1, r2, r4
 80148dc:	6639      	str	r1, [r7, #96]	; 0x60
 80148de:	416b      	adcs	r3, r5
 80148e0:	667b      	str	r3, [r7, #100]	; 0x64
 80148e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80148e4:	685b      	ldr	r3, [r3, #4]
 80148e6:	461a      	mov	r2, r3
 80148e8:	f04f 0300 	mov.w	r3, #0
 80148ec:	1891      	adds	r1, r2, r2
 80148ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80148f0:	415b      	adcs	r3, r3
 80148f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80148f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80148f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80148fc:	f7ec f906 	bl	8000b0c <__aeabi_uldivmod>
 8014900:	4602      	mov	r2, r0
 8014902:	460b      	mov	r3, r1
 8014904:	4ba5      	ldr	r3, [pc, #660]	; (8014b9c <UART_SetConfig+0x38c>)
 8014906:	fba3 2302 	umull	r2, r3, r3, r2
 801490a:	095b      	lsrs	r3, r3, #5
 801490c:	011e      	lsls	r6, r3, #4
 801490e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014910:	461c      	mov	r4, r3
 8014912:	f04f 0500 	mov.w	r5, #0
 8014916:	4622      	mov	r2, r4
 8014918:	462b      	mov	r3, r5
 801491a:	1891      	adds	r1, r2, r2
 801491c:	6339      	str	r1, [r7, #48]	; 0x30
 801491e:	415b      	adcs	r3, r3
 8014920:	637b      	str	r3, [r7, #52]	; 0x34
 8014922:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8014926:	1912      	adds	r2, r2, r4
 8014928:	eb45 0303 	adc.w	r3, r5, r3
 801492c:	f04f 0000 	mov.w	r0, #0
 8014930:	f04f 0100 	mov.w	r1, #0
 8014934:	00d9      	lsls	r1, r3, #3
 8014936:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801493a:	00d0      	lsls	r0, r2, #3
 801493c:	4602      	mov	r2, r0
 801493e:	460b      	mov	r3, r1
 8014940:	1911      	adds	r1, r2, r4
 8014942:	65b9      	str	r1, [r7, #88]	; 0x58
 8014944:	416b      	adcs	r3, r5
 8014946:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801494a:	685b      	ldr	r3, [r3, #4]
 801494c:	461a      	mov	r2, r3
 801494e:	f04f 0300 	mov.w	r3, #0
 8014952:	1891      	adds	r1, r2, r2
 8014954:	62b9      	str	r1, [r7, #40]	; 0x28
 8014956:	415b      	adcs	r3, r3
 8014958:	62fb      	str	r3, [r7, #44]	; 0x2c
 801495a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801495e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8014962:	f7ec f8d3 	bl	8000b0c <__aeabi_uldivmod>
 8014966:	4602      	mov	r2, r0
 8014968:	460b      	mov	r3, r1
 801496a:	4b8c      	ldr	r3, [pc, #560]	; (8014b9c <UART_SetConfig+0x38c>)
 801496c:	fba3 1302 	umull	r1, r3, r3, r2
 8014970:	095b      	lsrs	r3, r3, #5
 8014972:	2164      	movs	r1, #100	; 0x64
 8014974:	fb01 f303 	mul.w	r3, r1, r3
 8014978:	1ad3      	subs	r3, r2, r3
 801497a:	00db      	lsls	r3, r3, #3
 801497c:	3332      	adds	r3, #50	; 0x32
 801497e:	4a87      	ldr	r2, [pc, #540]	; (8014b9c <UART_SetConfig+0x38c>)
 8014980:	fba2 2303 	umull	r2, r3, r2, r3
 8014984:	095b      	lsrs	r3, r3, #5
 8014986:	005b      	lsls	r3, r3, #1
 8014988:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801498c:	441e      	add	r6, r3
 801498e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014990:	4618      	mov	r0, r3
 8014992:	f04f 0100 	mov.w	r1, #0
 8014996:	4602      	mov	r2, r0
 8014998:	460b      	mov	r3, r1
 801499a:	1894      	adds	r4, r2, r2
 801499c:	623c      	str	r4, [r7, #32]
 801499e:	415b      	adcs	r3, r3
 80149a0:	627b      	str	r3, [r7, #36]	; 0x24
 80149a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80149a6:	1812      	adds	r2, r2, r0
 80149a8:	eb41 0303 	adc.w	r3, r1, r3
 80149ac:	f04f 0400 	mov.w	r4, #0
 80149b0:	f04f 0500 	mov.w	r5, #0
 80149b4:	00dd      	lsls	r5, r3, #3
 80149b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80149ba:	00d4      	lsls	r4, r2, #3
 80149bc:	4622      	mov	r2, r4
 80149be:	462b      	mov	r3, r5
 80149c0:	1814      	adds	r4, r2, r0
 80149c2:	653c      	str	r4, [r7, #80]	; 0x50
 80149c4:	414b      	adcs	r3, r1
 80149c6:	657b      	str	r3, [r7, #84]	; 0x54
 80149c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80149ca:	685b      	ldr	r3, [r3, #4]
 80149cc:	461a      	mov	r2, r3
 80149ce:	f04f 0300 	mov.w	r3, #0
 80149d2:	1891      	adds	r1, r2, r2
 80149d4:	61b9      	str	r1, [r7, #24]
 80149d6:	415b      	adcs	r3, r3
 80149d8:	61fb      	str	r3, [r7, #28]
 80149da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80149de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80149e2:	f7ec f893 	bl	8000b0c <__aeabi_uldivmod>
 80149e6:	4602      	mov	r2, r0
 80149e8:	460b      	mov	r3, r1
 80149ea:	4b6c      	ldr	r3, [pc, #432]	; (8014b9c <UART_SetConfig+0x38c>)
 80149ec:	fba3 1302 	umull	r1, r3, r3, r2
 80149f0:	095b      	lsrs	r3, r3, #5
 80149f2:	2164      	movs	r1, #100	; 0x64
 80149f4:	fb01 f303 	mul.w	r3, r1, r3
 80149f8:	1ad3      	subs	r3, r2, r3
 80149fa:	00db      	lsls	r3, r3, #3
 80149fc:	3332      	adds	r3, #50	; 0x32
 80149fe:	4a67      	ldr	r2, [pc, #412]	; (8014b9c <UART_SetConfig+0x38c>)
 8014a00:	fba2 2303 	umull	r2, r3, r2, r3
 8014a04:	095b      	lsrs	r3, r3, #5
 8014a06:	f003 0207 	and.w	r2, r3, #7
 8014a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	4432      	add	r2, r6
 8014a10:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8014a12:	e0b9      	b.n	8014b88 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014a16:	461c      	mov	r4, r3
 8014a18:	f04f 0500 	mov.w	r5, #0
 8014a1c:	4622      	mov	r2, r4
 8014a1e:	462b      	mov	r3, r5
 8014a20:	1891      	adds	r1, r2, r2
 8014a22:	6139      	str	r1, [r7, #16]
 8014a24:	415b      	adcs	r3, r3
 8014a26:	617b      	str	r3, [r7, #20]
 8014a28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014a2c:	1912      	adds	r2, r2, r4
 8014a2e:	eb45 0303 	adc.w	r3, r5, r3
 8014a32:	f04f 0000 	mov.w	r0, #0
 8014a36:	f04f 0100 	mov.w	r1, #0
 8014a3a:	00d9      	lsls	r1, r3, #3
 8014a3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014a40:	00d0      	lsls	r0, r2, #3
 8014a42:	4602      	mov	r2, r0
 8014a44:	460b      	mov	r3, r1
 8014a46:	eb12 0804 	adds.w	r8, r2, r4
 8014a4a:	eb43 0905 	adc.w	r9, r3, r5
 8014a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014a50:	685b      	ldr	r3, [r3, #4]
 8014a52:	4618      	mov	r0, r3
 8014a54:	f04f 0100 	mov.w	r1, #0
 8014a58:	f04f 0200 	mov.w	r2, #0
 8014a5c:	f04f 0300 	mov.w	r3, #0
 8014a60:	008b      	lsls	r3, r1, #2
 8014a62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014a66:	0082      	lsls	r2, r0, #2
 8014a68:	4640      	mov	r0, r8
 8014a6a:	4649      	mov	r1, r9
 8014a6c:	f7ec f84e 	bl	8000b0c <__aeabi_uldivmod>
 8014a70:	4602      	mov	r2, r0
 8014a72:	460b      	mov	r3, r1
 8014a74:	4b49      	ldr	r3, [pc, #292]	; (8014b9c <UART_SetConfig+0x38c>)
 8014a76:	fba3 2302 	umull	r2, r3, r3, r2
 8014a7a:	095b      	lsrs	r3, r3, #5
 8014a7c:	011e      	lsls	r6, r3, #4
 8014a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014a80:	4618      	mov	r0, r3
 8014a82:	f04f 0100 	mov.w	r1, #0
 8014a86:	4602      	mov	r2, r0
 8014a88:	460b      	mov	r3, r1
 8014a8a:	1894      	adds	r4, r2, r2
 8014a8c:	60bc      	str	r4, [r7, #8]
 8014a8e:	415b      	adcs	r3, r3
 8014a90:	60fb      	str	r3, [r7, #12]
 8014a92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014a96:	1812      	adds	r2, r2, r0
 8014a98:	eb41 0303 	adc.w	r3, r1, r3
 8014a9c:	f04f 0400 	mov.w	r4, #0
 8014aa0:	f04f 0500 	mov.w	r5, #0
 8014aa4:	00dd      	lsls	r5, r3, #3
 8014aa6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014aaa:	00d4      	lsls	r4, r2, #3
 8014aac:	4622      	mov	r2, r4
 8014aae:	462b      	mov	r3, r5
 8014ab0:	1814      	adds	r4, r2, r0
 8014ab2:	64bc      	str	r4, [r7, #72]	; 0x48
 8014ab4:	414b      	adcs	r3, r1
 8014ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014aba:	685b      	ldr	r3, [r3, #4]
 8014abc:	4618      	mov	r0, r3
 8014abe:	f04f 0100 	mov.w	r1, #0
 8014ac2:	f04f 0200 	mov.w	r2, #0
 8014ac6:	f04f 0300 	mov.w	r3, #0
 8014aca:	008b      	lsls	r3, r1, #2
 8014acc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014ad0:	0082      	lsls	r2, r0, #2
 8014ad2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8014ad6:	f7ec f819 	bl	8000b0c <__aeabi_uldivmod>
 8014ada:	4602      	mov	r2, r0
 8014adc:	460b      	mov	r3, r1
 8014ade:	4b2f      	ldr	r3, [pc, #188]	; (8014b9c <UART_SetConfig+0x38c>)
 8014ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8014ae4:	095b      	lsrs	r3, r3, #5
 8014ae6:	2164      	movs	r1, #100	; 0x64
 8014ae8:	fb01 f303 	mul.w	r3, r1, r3
 8014aec:	1ad3      	subs	r3, r2, r3
 8014aee:	011b      	lsls	r3, r3, #4
 8014af0:	3332      	adds	r3, #50	; 0x32
 8014af2:	4a2a      	ldr	r2, [pc, #168]	; (8014b9c <UART_SetConfig+0x38c>)
 8014af4:	fba2 2303 	umull	r2, r3, r2, r3
 8014af8:	095b      	lsrs	r3, r3, #5
 8014afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014afe:	441e      	add	r6, r3
 8014b00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014b02:	4618      	mov	r0, r3
 8014b04:	f04f 0100 	mov.w	r1, #0
 8014b08:	4602      	mov	r2, r0
 8014b0a:	460b      	mov	r3, r1
 8014b0c:	1894      	adds	r4, r2, r2
 8014b0e:	603c      	str	r4, [r7, #0]
 8014b10:	415b      	adcs	r3, r3
 8014b12:	607b      	str	r3, [r7, #4]
 8014b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014b18:	1812      	adds	r2, r2, r0
 8014b1a:	eb41 0303 	adc.w	r3, r1, r3
 8014b1e:	f04f 0400 	mov.w	r4, #0
 8014b22:	f04f 0500 	mov.w	r5, #0
 8014b26:	00dd      	lsls	r5, r3, #3
 8014b28:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014b2c:	00d4      	lsls	r4, r2, #3
 8014b2e:	4622      	mov	r2, r4
 8014b30:	462b      	mov	r3, r5
 8014b32:	eb12 0a00 	adds.w	sl, r2, r0
 8014b36:	eb43 0b01 	adc.w	fp, r3, r1
 8014b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014b3c:	685b      	ldr	r3, [r3, #4]
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f04f 0100 	mov.w	r1, #0
 8014b44:	f04f 0200 	mov.w	r2, #0
 8014b48:	f04f 0300 	mov.w	r3, #0
 8014b4c:	008b      	lsls	r3, r1, #2
 8014b4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014b52:	0082      	lsls	r2, r0, #2
 8014b54:	4650      	mov	r0, sl
 8014b56:	4659      	mov	r1, fp
 8014b58:	f7eb ffd8 	bl	8000b0c <__aeabi_uldivmod>
 8014b5c:	4602      	mov	r2, r0
 8014b5e:	460b      	mov	r3, r1
 8014b60:	4b0e      	ldr	r3, [pc, #56]	; (8014b9c <UART_SetConfig+0x38c>)
 8014b62:	fba3 1302 	umull	r1, r3, r3, r2
 8014b66:	095b      	lsrs	r3, r3, #5
 8014b68:	2164      	movs	r1, #100	; 0x64
 8014b6a:	fb01 f303 	mul.w	r3, r1, r3
 8014b6e:	1ad3      	subs	r3, r2, r3
 8014b70:	011b      	lsls	r3, r3, #4
 8014b72:	3332      	adds	r3, #50	; 0x32
 8014b74:	4a09      	ldr	r2, [pc, #36]	; (8014b9c <UART_SetConfig+0x38c>)
 8014b76:	fba2 2303 	umull	r2, r3, r2, r3
 8014b7a:	095b      	lsrs	r3, r3, #5
 8014b7c:	f003 020f 	and.w	r2, r3, #15
 8014b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	4432      	add	r2, r6
 8014b86:	609a      	str	r2, [r3, #8]
}
 8014b88:	bf00      	nop
 8014b8a:	377c      	adds	r7, #124	; 0x7c
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b92:	bf00      	nop
 8014b94:	40011000 	.word	0x40011000
 8014b98:	40011400 	.word	0x40011400
 8014b9c:	51eb851f 	.word	0x51eb851f

08014ba0 <__errno>:
 8014ba0:	4b01      	ldr	r3, [pc, #4]	; (8014ba8 <__errno+0x8>)
 8014ba2:	6818      	ldr	r0, [r3, #0]
 8014ba4:	4770      	bx	lr
 8014ba6:	bf00      	nop
 8014ba8:	20000088 	.word	0x20000088

08014bac <__libc_init_array>:
 8014bac:	b570      	push	{r4, r5, r6, lr}
 8014bae:	4d0d      	ldr	r5, [pc, #52]	; (8014be4 <__libc_init_array+0x38>)
 8014bb0:	4c0d      	ldr	r4, [pc, #52]	; (8014be8 <__libc_init_array+0x3c>)
 8014bb2:	1b64      	subs	r4, r4, r5
 8014bb4:	10a4      	asrs	r4, r4, #2
 8014bb6:	2600      	movs	r6, #0
 8014bb8:	42a6      	cmp	r6, r4
 8014bba:	d109      	bne.n	8014bd0 <__libc_init_array+0x24>
 8014bbc:	4d0b      	ldr	r5, [pc, #44]	; (8014bec <__libc_init_array+0x40>)
 8014bbe:	4c0c      	ldr	r4, [pc, #48]	; (8014bf0 <__libc_init_array+0x44>)
 8014bc0:	f001 f80e 	bl	8015be0 <_init>
 8014bc4:	1b64      	subs	r4, r4, r5
 8014bc6:	10a4      	asrs	r4, r4, #2
 8014bc8:	2600      	movs	r6, #0
 8014bca:	42a6      	cmp	r6, r4
 8014bcc:	d105      	bne.n	8014bda <__libc_init_array+0x2e>
 8014bce:	bd70      	pop	{r4, r5, r6, pc}
 8014bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8014bd4:	4798      	blx	r3
 8014bd6:	3601      	adds	r6, #1
 8014bd8:	e7ee      	b.n	8014bb8 <__libc_init_array+0xc>
 8014bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8014bde:	4798      	blx	r3
 8014be0:	3601      	adds	r6, #1
 8014be2:	e7f2      	b.n	8014bca <__libc_init_array+0x1e>
 8014be4:	08015e78 	.word	0x08015e78
 8014be8:	08015e78 	.word	0x08015e78
 8014bec:	08015e78 	.word	0x08015e78
 8014bf0:	08015e7c 	.word	0x08015e7c

08014bf4 <memcpy>:
 8014bf4:	440a      	add	r2, r1
 8014bf6:	4291      	cmp	r1, r2
 8014bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8014bfc:	d100      	bne.n	8014c00 <memcpy+0xc>
 8014bfe:	4770      	bx	lr
 8014c00:	b510      	push	{r4, lr}
 8014c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014c0a:	4291      	cmp	r1, r2
 8014c0c:	d1f9      	bne.n	8014c02 <memcpy+0xe>
 8014c0e:	bd10      	pop	{r4, pc}

08014c10 <memset>:
 8014c10:	4402      	add	r2, r0
 8014c12:	4603      	mov	r3, r0
 8014c14:	4293      	cmp	r3, r2
 8014c16:	d100      	bne.n	8014c1a <memset+0xa>
 8014c18:	4770      	bx	lr
 8014c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8014c1e:	e7f9      	b.n	8014c14 <memset+0x4>

08014c20 <iprintf>:
 8014c20:	b40f      	push	{r0, r1, r2, r3}
 8014c22:	4b0a      	ldr	r3, [pc, #40]	; (8014c4c <iprintf+0x2c>)
 8014c24:	b513      	push	{r0, r1, r4, lr}
 8014c26:	681c      	ldr	r4, [r3, #0]
 8014c28:	b124      	cbz	r4, 8014c34 <iprintf+0x14>
 8014c2a:	69a3      	ldr	r3, [r4, #24]
 8014c2c:	b913      	cbnz	r3, 8014c34 <iprintf+0x14>
 8014c2e:	4620      	mov	r0, r4
 8014c30:	f000 fa72 	bl	8015118 <__sinit>
 8014c34:	ab05      	add	r3, sp, #20
 8014c36:	9a04      	ldr	r2, [sp, #16]
 8014c38:	68a1      	ldr	r1, [r4, #8]
 8014c3a:	9301      	str	r3, [sp, #4]
 8014c3c:	4620      	mov	r0, r4
 8014c3e:	f000 fc43 	bl	80154c8 <_vfiprintf_r>
 8014c42:	b002      	add	sp, #8
 8014c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c48:	b004      	add	sp, #16
 8014c4a:	4770      	bx	lr
 8014c4c:	20000088 	.word	0x20000088

08014c50 <_puts_r>:
 8014c50:	b570      	push	{r4, r5, r6, lr}
 8014c52:	460e      	mov	r6, r1
 8014c54:	4605      	mov	r5, r0
 8014c56:	b118      	cbz	r0, 8014c60 <_puts_r+0x10>
 8014c58:	6983      	ldr	r3, [r0, #24]
 8014c5a:	b90b      	cbnz	r3, 8014c60 <_puts_r+0x10>
 8014c5c:	f000 fa5c 	bl	8015118 <__sinit>
 8014c60:	69ab      	ldr	r3, [r5, #24]
 8014c62:	68ac      	ldr	r4, [r5, #8]
 8014c64:	b913      	cbnz	r3, 8014c6c <_puts_r+0x1c>
 8014c66:	4628      	mov	r0, r5
 8014c68:	f000 fa56 	bl	8015118 <__sinit>
 8014c6c:	4b2c      	ldr	r3, [pc, #176]	; (8014d20 <_puts_r+0xd0>)
 8014c6e:	429c      	cmp	r4, r3
 8014c70:	d120      	bne.n	8014cb4 <_puts_r+0x64>
 8014c72:	686c      	ldr	r4, [r5, #4]
 8014c74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014c76:	07db      	lsls	r3, r3, #31
 8014c78:	d405      	bmi.n	8014c86 <_puts_r+0x36>
 8014c7a:	89a3      	ldrh	r3, [r4, #12]
 8014c7c:	0598      	lsls	r0, r3, #22
 8014c7e:	d402      	bmi.n	8014c86 <_puts_r+0x36>
 8014c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c82:	f000 fae7 	bl	8015254 <__retarget_lock_acquire_recursive>
 8014c86:	89a3      	ldrh	r3, [r4, #12]
 8014c88:	0719      	lsls	r1, r3, #28
 8014c8a:	d51d      	bpl.n	8014cc8 <_puts_r+0x78>
 8014c8c:	6923      	ldr	r3, [r4, #16]
 8014c8e:	b1db      	cbz	r3, 8014cc8 <_puts_r+0x78>
 8014c90:	3e01      	subs	r6, #1
 8014c92:	68a3      	ldr	r3, [r4, #8]
 8014c94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014c98:	3b01      	subs	r3, #1
 8014c9a:	60a3      	str	r3, [r4, #8]
 8014c9c:	bb39      	cbnz	r1, 8014cee <_puts_r+0x9e>
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	da38      	bge.n	8014d14 <_puts_r+0xc4>
 8014ca2:	4622      	mov	r2, r4
 8014ca4:	210a      	movs	r1, #10
 8014ca6:	4628      	mov	r0, r5
 8014ca8:	f000 f85c 	bl	8014d64 <__swbuf_r>
 8014cac:	3001      	adds	r0, #1
 8014cae:	d011      	beq.n	8014cd4 <_puts_r+0x84>
 8014cb0:	250a      	movs	r5, #10
 8014cb2:	e011      	b.n	8014cd8 <_puts_r+0x88>
 8014cb4:	4b1b      	ldr	r3, [pc, #108]	; (8014d24 <_puts_r+0xd4>)
 8014cb6:	429c      	cmp	r4, r3
 8014cb8:	d101      	bne.n	8014cbe <_puts_r+0x6e>
 8014cba:	68ac      	ldr	r4, [r5, #8]
 8014cbc:	e7da      	b.n	8014c74 <_puts_r+0x24>
 8014cbe:	4b1a      	ldr	r3, [pc, #104]	; (8014d28 <_puts_r+0xd8>)
 8014cc0:	429c      	cmp	r4, r3
 8014cc2:	bf08      	it	eq
 8014cc4:	68ec      	ldreq	r4, [r5, #12]
 8014cc6:	e7d5      	b.n	8014c74 <_puts_r+0x24>
 8014cc8:	4621      	mov	r1, r4
 8014cca:	4628      	mov	r0, r5
 8014ccc:	f000 f89c 	bl	8014e08 <__swsetup_r>
 8014cd0:	2800      	cmp	r0, #0
 8014cd2:	d0dd      	beq.n	8014c90 <_puts_r+0x40>
 8014cd4:	f04f 35ff 	mov.w	r5, #4294967295
 8014cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014cda:	07da      	lsls	r2, r3, #31
 8014cdc:	d405      	bmi.n	8014cea <_puts_r+0x9a>
 8014cde:	89a3      	ldrh	r3, [r4, #12]
 8014ce0:	059b      	lsls	r3, r3, #22
 8014ce2:	d402      	bmi.n	8014cea <_puts_r+0x9a>
 8014ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ce6:	f000 fab6 	bl	8015256 <__retarget_lock_release_recursive>
 8014cea:	4628      	mov	r0, r5
 8014cec:	bd70      	pop	{r4, r5, r6, pc}
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	da04      	bge.n	8014cfc <_puts_r+0xac>
 8014cf2:	69a2      	ldr	r2, [r4, #24]
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	dc06      	bgt.n	8014d06 <_puts_r+0xb6>
 8014cf8:	290a      	cmp	r1, #10
 8014cfa:	d004      	beq.n	8014d06 <_puts_r+0xb6>
 8014cfc:	6823      	ldr	r3, [r4, #0]
 8014cfe:	1c5a      	adds	r2, r3, #1
 8014d00:	6022      	str	r2, [r4, #0]
 8014d02:	7019      	strb	r1, [r3, #0]
 8014d04:	e7c5      	b.n	8014c92 <_puts_r+0x42>
 8014d06:	4622      	mov	r2, r4
 8014d08:	4628      	mov	r0, r5
 8014d0a:	f000 f82b 	bl	8014d64 <__swbuf_r>
 8014d0e:	3001      	adds	r0, #1
 8014d10:	d1bf      	bne.n	8014c92 <_puts_r+0x42>
 8014d12:	e7df      	b.n	8014cd4 <_puts_r+0x84>
 8014d14:	6823      	ldr	r3, [r4, #0]
 8014d16:	250a      	movs	r5, #10
 8014d18:	1c5a      	adds	r2, r3, #1
 8014d1a:	6022      	str	r2, [r4, #0]
 8014d1c:	701d      	strb	r5, [r3, #0]
 8014d1e:	e7db      	b.n	8014cd8 <_puts_r+0x88>
 8014d20:	08015dfc 	.word	0x08015dfc
 8014d24:	08015e1c 	.word	0x08015e1c
 8014d28:	08015ddc 	.word	0x08015ddc

08014d2c <puts>:
 8014d2c:	4b02      	ldr	r3, [pc, #8]	; (8014d38 <puts+0xc>)
 8014d2e:	4601      	mov	r1, r0
 8014d30:	6818      	ldr	r0, [r3, #0]
 8014d32:	f7ff bf8d 	b.w	8014c50 <_puts_r>
 8014d36:	bf00      	nop
 8014d38:	20000088 	.word	0x20000088

08014d3c <strncpy>:
 8014d3c:	b510      	push	{r4, lr}
 8014d3e:	3901      	subs	r1, #1
 8014d40:	4603      	mov	r3, r0
 8014d42:	b132      	cbz	r2, 8014d52 <strncpy+0x16>
 8014d44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014d48:	f803 4b01 	strb.w	r4, [r3], #1
 8014d4c:	3a01      	subs	r2, #1
 8014d4e:	2c00      	cmp	r4, #0
 8014d50:	d1f7      	bne.n	8014d42 <strncpy+0x6>
 8014d52:	441a      	add	r2, r3
 8014d54:	2100      	movs	r1, #0
 8014d56:	4293      	cmp	r3, r2
 8014d58:	d100      	bne.n	8014d5c <strncpy+0x20>
 8014d5a:	bd10      	pop	{r4, pc}
 8014d5c:	f803 1b01 	strb.w	r1, [r3], #1
 8014d60:	e7f9      	b.n	8014d56 <strncpy+0x1a>
	...

08014d64 <__swbuf_r>:
 8014d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d66:	460e      	mov	r6, r1
 8014d68:	4614      	mov	r4, r2
 8014d6a:	4605      	mov	r5, r0
 8014d6c:	b118      	cbz	r0, 8014d76 <__swbuf_r+0x12>
 8014d6e:	6983      	ldr	r3, [r0, #24]
 8014d70:	b90b      	cbnz	r3, 8014d76 <__swbuf_r+0x12>
 8014d72:	f000 f9d1 	bl	8015118 <__sinit>
 8014d76:	4b21      	ldr	r3, [pc, #132]	; (8014dfc <__swbuf_r+0x98>)
 8014d78:	429c      	cmp	r4, r3
 8014d7a:	d12b      	bne.n	8014dd4 <__swbuf_r+0x70>
 8014d7c:	686c      	ldr	r4, [r5, #4]
 8014d7e:	69a3      	ldr	r3, [r4, #24]
 8014d80:	60a3      	str	r3, [r4, #8]
 8014d82:	89a3      	ldrh	r3, [r4, #12]
 8014d84:	071a      	lsls	r2, r3, #28
 8014d86:	d52f      	bpl.n	8014de8 <__swbuf_r+0x84>
 8014d88:	6923      	ldr	r3, [r4, #16]
 8014d8a:	b36b      	cbz	r3, 8014de8 <__swbuf_r+0x84>
 8014d8c:	6923      	ldr	r3, [r4, #16]
 8014d8e:	6820      	ldr	r0, [r4, #0]
 8014d90:	1ac0      	subs	r0, r0, r3
 8014d92:	6963      	ldr	r3, [r4, #20]
 8014d94:	b2f6      	uxtb	r6, r6
 8014d96:	4283      	cmp	r3, r0
 8014d98:	4637      	mov	r7, r6
 8014d9a:	dc04      	bgt.n	8014da6 <__swbuf_r+0x42>
 8014d9c:	4621      	mov	r1, r4
 8014d9e:	4628      	mov	r0, r5
 8014da0:	f000 f926 	bl	8014ff0 <_fflush_r>
 8014da4:	bb30      	cbnz	r0, 8014df4 <__swbuf_r+0x90>
 8014da6:	68a3      	ldr	r3, [r4, #8]
 8014da8:	3b01      	subs	r3, #1
 8014daa:	60a3      	str	r3, [r4, #8]
 8014dac:	6823      	ldr	r3, [r4, #0]
 8014dae:	1c5a      	adds	r2, r3, #1
 8014db0:	6022      	str	r2, [r4, #0]
 8014db2:	701e      	strb	r6, [r3, #0]
 8014db4:	6963      	ldr	r3, [r4, #20]
 8014db6:	3001      	adds	r0, #1
 8014db8:	4283      	cmp	r3, r0
 8014dba:	d004      	beq.n	8014dc6 <__swbuf_r+0x62>
 8014dbc:	89a3      	ldrh	r3, [r4, #12]
 8014dbe:	07db      	lsls	r3, r3, #31
 8014dc0:	d506      	bpl.n	8014dd0 <__swbuf_r+0x6c>
 8014dc2:	2e0a      	cmp	r6, #10
 8014dc4:	d104      	bne.n	8014dd0 <__swbuf_r+0x6c>
 8014dc6:	4621      	mov	r1, r4
 8014dc8:	4628      	mov	r0, r5
 8014dca:	f000 f911 	bl	8014ff0 <_fflush_r>
 8014dce:	b988      	cbnz	r0, 8014df4 <__swbuf_r+0x90>
 8014dd0:	4638      	mov	r0, r7
 8014dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dd4:	4b0a      	ldr	r3, [pc, #40]	; (8014e00 <__swbuf_r+0x9c>)
 8014dd6:	429c      	cmp	r4, r3
 8014dd8:	d101      	bne.n	8014dde <__swbuf_r+0x7a>
 8014dda:	68ac      	ldr	r4, [r5, #8]
 8014ddc:	e7cf      	b.n	8014d7e <__swbuf_r+0x1a>
 8014dde:	4b09      	ldr	r3, [pc, #36]	; (8014e04 <__swbuf_r+0xa0>)
 8014de0:	429c      	cmp	r4, r3
 8014de2:	bf08      	it	eq
 8014de4:	68ec      	ldreq	r4, [r5, #12]
 8014de6:	e7ca      	b.n	8014d7e <__swbuf_r+0x1a>
 8014de8:	4621      	mov	r1, r4
 8014dea:	4628      	mov	r0, r5
 8014dec:	f000 f80c 	bl	8014e08 <__swsetup_r>
 8014df0:	2800      	cmp	r0, #0
 8014df2:	d0cb      	beq.n	8014d8c <__swbuf_r+0x28>
 8014df4:	f04f 37ff 	mov.w	r7, #4294967295
 8014df8:	e7ea      	b.n	8014dd0 <__swbuf_r+0x6c>
 8014dfa:	bf00      	nop
 8014dfc:	08015dfc 	.word	0x08015dfc
 8014e00:	08015e1c 	.word	0x08015e1c
 8014e04:	08015ddc 	.word	0x08015ddc

08014e08 <__swsetup_r>:
 8014e08:	4b32      	ldr	r3, [pc, #200]	; (8014ed4 <__swsetup_r+0xcc>)
 8014e0a:	b570      	push	{r4, r5, r6, lr}
 8014e0c:	681d      	ldr	r5, [r3, #0]
 8014e0e:	4606      	mov	r6, r0
 8014e10:	460c      	mov	r4, r1
 8014e12:	b125      	cbz	r5, 8014e1e <__swsetup_r+0x16>
 8014e14:	69ab      	ldr	r3, [r5, #24]
 8014e16:	b913      	cbnz	r3, 8014e1e <__swsetup_r+0x16>
 8014e18:	4628      	mov	r0, r5
 8014e1a:	f000 f97d 	bl	8015118 <__sinit>
 8014e1e:	4b2e      	ldr	r3, [pc, #184]	; (8014ed8 <__swsetup_r+0xd0>)
 8014e20:	429c      	cmp	r4, r3
 8014e22:	d10f      	bne.n	8014e44 <__swsetup_r+0x3c>
 8014e24:	686c      	ldr	r4, [r5, #4]
 8014e26:	89a3      	ldrh	r3, [r4, #12]
 8014e28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014e2c:	0719      	lsls	r1, r3, #28
 8014e2e:	d42c      	bmi.n	8014e8a <__swsetup_r+0x82>
 8014e30:	06dd      	lsls	r5, r3, #27
 8014e32:	d411      	bmi.n	8014e58 <__swsetup_r+0x50>
 8014e34:	2309      	movs	r3, #9
 8014e36:	6033      	str	r3, [r6, #0]
 8014e38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014e3c:	81a3      	strh	r3, [r4, #12]
 8014e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8014e42:	e03e      	b.n	8014ec2 <__swsetup_r+0xba>
 8014e44:	4b25      	ldr	r3, [pc, #148]	; (8014edc <__swsetup_r+0xd4>)
 8014e46:	429c      	cmp	r4, r3
 8014e48:	d101      	bne.n	8014e4e <__swsetup_r+0x46>
 8014e4a:	68ac      	ldr	r4, [r5, #8]
 8014e4c:	e7eb      	b.n	8014e26 <__swsetup_r+0x1e>
 8014e4e:	4b24      	ldr	r3, [pc, #144]	; (8014ee0 <__swsetup_r+0xd8>)
 8014e50:	429c      	cmp	r4, r3
 8014e52:	bf08      	it	eq
 8014e54:	68ec      	ldreq	r4, [r5, #12]
 8014e56:	e7e6      	b.n	8014e26 <__swsetup_r+0x1e>
 8014e58:	0758      	lsls	r0, r3, #29
 8014e5a:	d512      	bpl.n	8014e82 <__swsetup_r+0x7a>
 8014e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014e5e:	b141      	cbz	r1, 8014e72 <__swsetup_r+0x6a>
 8014e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e64:	4299      	cmp	r1, r3
 8014e66:	d002      	beq.n	8014e6e <__swsetup_r+0x66>
 8014e68:	4630      	mov	r0, r6
 8014e6a:	f000 fa59 	bl	8015320 <_free_r>
 8014e6e:	2300      	movs	r3, #0
 8014e70:	6363      	str	r3, [r4, #52]	; 0x34
 8014e72:	89a3      	ldrh	r3, [r4, #12]
 8014e74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014e78:	81a3      	strh	r3, [r4, #12]
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	6063      	str	r3, [r4, #4]
 8014e7e:	6923      	ldr	r3, [r4, #16]
 8014e80:	6023      	str	r3, [r4, #0]
 8014e82:	89a3      	ldrh	r3, [r4, #12]
 8014e84:	f043 0308 	orr.w	r3, r3, #8
 8014e88:	81a3      	strh	r3, [r4, #12]
 8014e8a:	6923      	ldr	r3, [r4, #16]
 8014e8c:	b94b      	cbnz	r3, 8014ea2 <__swsetup_r+0x9a>
 8014e8e:	89a3      	ldrh	r3, [r4, #12]
 8014e90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014e98:	d003      	beq.n	8014ea2 <__swsetup_r+0x9a>
 8014e9a:	4621      	mov	r1, r4
 8014e9c:	4630      	mov	r0, r6
 8014e9e:	f000 f9ff 	bl	80152a0 <__smakebuf_r>
 8014ea2:	89a0      	ldrh	r0, [r4, #12]
 8014ea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014ea8:	f010 0301 	ands.w	r3, r0, #1
 8014eac:	d00a      	beq.n	8014ec4 <__swsetup_r+0xbc>
 8014eae:	2300      	movs	r3, #0
 8014eb0:	60a3      	str	r3, [r4, #8]
 8014eb2:	6963      	ldr	r3, [r4, #20]
 8014eb4:	425b      	negs	r3, r3
 8014eb6:	61a3      	str	r3, [r4, #24]
 8014eb8:	6923      	ldr	r3, [r4, #16]
 8014eba:	b943      	cbnz	r3, 8014ece <__swsetup_r+0xc6>
 8014ebc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014ec0:	d1ba      	bne.n	8014e38 <__swsetup_r+0x30>
 8014ec2:	bd70      	pop	{r4, r5, r6, pc}
 8014ec4:	0781      	lsls	r1, r0, #30
 8014ec6:	bf58      	it	pl
 8014ec8:	6963      	ldrpl	r3, [r4, #20]
 8014eca:	60a3      	str	r3, [r4, #8]
 8014ecc:	e7f4      	b.n	8014eb8 <__swsetup_r+0xb0>
 8014ece:	2000      	movs	r0, #0
 8014ed0:	e7f7      	b.n	8014ec2 <__swsetup_r+0xba>
 8014ed2:	bf00      	nop
 8014ed4:	20000088 	.word	0x20000088
 8014ed8:	08015dfc 	.word	0x08015dfc
 8014edc:	08015e1c 	.word	0x08015e1c
 8014ee0:	08015ddc 	.word	0x08015ddc

08014ee4 <__sflush_r>:
 8014ee4:	898a      	ldrh	r2, [r1, #12]
 8014ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eea:	4605      	mov	r5, r0
 8014eec:	0710      	lsls	r0, r2, #28
 8014eee:	460c      	mov	r4, r1
 8014ef0:	d458      	bmi.n	8014fa4 <__sflush_r+0xc0>
 8014ef2:	684b      	ldr	r3, [r1, #4]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	dc05      	bgt.n	8014f04 <__sflush_r+0x20>
 8014ef8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	dc02      	bgt.n	8014f04 <__sflush_r+0x20>
 8014efe:	2000      	movs	r0, #0
 8014f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f06:	2e00      	cmp	r6, #0
 8014f08:	d0f9      	beq.n	8014efe <__sflush_r+0x1a>
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014f10:	682f      	ldr	r7, [r5, #0]
 8014f12:	602b      	str	r3, [r5, #0]
 8014f14:	d032      	beq.n	8014f7c <__sflush_r+0x98>
 8014f16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014f18:	89a3      	ldrh	r3, [r4, #12]
 8014f1a:	075a      	lsls	r2, r3, #29
 8014f1c:	d505      	bpl.n	8014f2a <__sflush_r+0x46>
 8014f1e:	6863      	ldr	r3, [r4, #4]
 8014f20:	1ac0      	subs	r0, r0, r3
 8014f22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f24:	b10b      	cbz	r3, 8014f2a <__sflush_r+0x46>
 8014f26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014f28:	1ac0      	subs	r0, r0, r3
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	4602      	mov	r2, r0
 8014f2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f30:	6a21      	ldr	r1, [r4, #32]
 8014f32:	4628      	mov	r0, r5
 8014f34:	47b0      	blx	r6
 8014f36:	1c43      	adds	r3, r0, #1
 8014f38:	89a3      	ldrh	r3, [r4, #12]
 8014f3a:	d106      	bne.n	8014f4a <__sflush_r+0x66>
 8014f3c:	6829      	ldr	r1, [r5, #0]
 8014f3e:	291d      	cmp	r1, #29
 8014f40:	d82c      	bhi.n	8014f9c <__sflush_r+0xb8>
 8014f42:	4a2a      	ldr	r2, [pc, #168]	; (8014fec <__sflush_r+0x108>)
 8014f44:	40ca      	lsrs	r2, r1
 8014f46:	07d6      	lsls	r6, r2, #31
 8014f48:	d528      	bpl.n	8014f9c <__sflush_r+0xb8>
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	6062      	str	r2, [r4, #4]
 8014f4e:	04d9      	lsls	r1, r3, #19
 8014f50:	6922      	ldr	r2, [r4, #16]
 8014f52:	6022      	str	r2, [r4, #0]
 8014f54:	d504      	bpl.n	8014f60 <__sflush_r+0x7c>
 8014f56:	1c42      	adds	r2, r0, #1
 8014f58:	d101      	bne.n	8014f5e <__sflush_r+0x7a>
 8014f5a:	682b      	ldr	r3, [r5, #0]
 8014f5c:	b903      	cbnz	r3, 8014f60 <__sflush_r+0x7c>
 8014f5e:	6560      	str	r0, [r4, #84]	; 0x54
 8014f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f62:	602f      	str	r7, [r5, #0]
 8014f64:	2900      	cmp	r1, #0
 8014f66:	d0ca      	beq.n	8014efe <__sflush_r+0x1a>
 8014f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014f6c:	4299      	cmp	r1, r3
 8014f6e:	d002      	beq.n	8014f76 <__sflush_r+0x92>
 8014f70:	4628      	mov	r0, r5
 8014f72:	f000 f9d5 	bl	8015320 <_free_r>
 8014f76:	2000      	movs	r0, #0
 8014f78:	6360      	str	r0, [r4, #52]	; 0x34
 8014f7a:	e7c1      	b.n	8014f00 <__sflush_r+0x1c>
 8014f7c:	6a21      	ldr	r1, [r4, #32]
 8014f7e:	2301      	movs	r3, #1
 8014f80:	4628      	mov	r0, r5
 8014f82:	47b0      	blx	r6
 8014f84:	1c41      	adds	r1, r0, #1
 8014f86:	d1c7      	bne.n	8014f18 <__sflush_r+0x34>
 8014f88:	682b      	ldr	r3, [r5, #0]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d0c4      	beq.n	8014f18 <__sflush_r+0x34>
 8014f8e:	2b1d      	cmp	r3, #29
 8014f90:	d001      	beq.n	8014f96 <__sflush_r+0xb2>
 8014f92:	2b16      	cmp	r3, #22
 8014f94:	d101      	bne.n	8014f9a <__sflush_r+0xb6>
 8014f96:	602f      	str	r7, [r5, #0]
 8014f98:	e7b1      	b.n	8014efe <__sflush_r+0x1a>
 8014f9a:	89a3      	ldrh	r3, [r4, #12]
 8014f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fa0:	81a3      	strh	r3, [r4, #12]
 8014fa2:	e7ad      	b.n	8014f00 <__sflush_r+0x1c>
 8014fa4:	690f      	ldr	r7, [r1, #16]
 8014fa6:	2f00      	cmp	r7, #0
 8014fa8:	d0a9      	beq.n	8014efe <__sflush_r+0x1a>
 8014faa:	0793      	lsls	r3, r2, #30
 8014fac:	680e      	ldr	r6, [r1, #0]
 8014fae:	bf08      	it	eq
 8014fb0:	694b      	ldreq	r3, [r1, #20]
 8014fb2:	600f      	str	r7, [r1, #0]
 8014fb4:	bf18      	it	ne
 8014fb6:	2300      	movne	r3, #0
 8014fb8:	eba6 0807 	sub.w	r8, r6, r7
 8014fbc:	608b      	str	r3, [r1, #8]
 8014fbe:	f1b8 0f00 	cmp.w	r8, #0
 8014fc2:	dd9c      	ble.n	8014efe <__sflush_r+0x1a>
 8014fc4:	6a21      	ldr	r1, [r4, #32]
 8014fc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014fc8:	4643      	mov	r3, r8
 8014fca:	463a      	mov	r2, r7
 8014fcc:	4628      	mov	r0, r5
 8014fce:	47b0      	blx	r6
 8014fd0:	2800      	cmp	r0, #0
 8014fd2:	dc06      	bgt.n	8014fe2 <__sflush_r+0xfe>
 8014fd4:	89a3      	ldrh	r3, [r4, #12]
 8014fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fda:	81a3      	strh	r3, [r4, #12]
 8014fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8014fe0:	e78e      	b.n	8014f00 <__sflush_r+0x1c>
 8014fe2:	4407      	add	r7, r0
 8014fe4:	eba8 0800 	sub.w	r8, r8, r0
 8014fe8:	e7e9      	b.n	8014fbe <__sflush_r+0xda>
 8014fea:	bf00      	nop
 8014fec:	20400001 	.word	0x20400001

08014ff0 <_fflush_r>:
 8014ff0:	b538      	push	{r3, r4, r5, lr}
 8014ff2:	690b      	ldr	r3, [r1, #16]
 8014ff4:	4605      	mov	r5, r0
 8014ff6:	460c      	mov	r4, r1
 8014ff8:	b913      	cbnz	r3, 8015000 <_fflush_r+0x10>
 8014ffa:	2500      	movs	r5, #0
 8014ffc:	4628      	mov	r0, r5
 8014ffe:	bd38      	pop	{r3, r4, r5, pc}
 8015000:	b118      	cbz	r0, 801500a <_fflush_r+0x1a>
 8015002:	6983      	ldr	r3, [r0, #24]
 8015004:	b90b      	cbnz	r3, 801500a <_fflush_r+0x1a>
 8015006:	f000 f887 	bl	8015118 <__sinit>
 801500a:	4b14      	ldr	r3, [pc, #80]	; (801505c <_fflush_r+0x6c>)
 801500c:	429c      	cmp	r4, r3
 801500e:	d11b      	bne.n	8015048 <_fflush_r+0x58>
 8015010:	686c      	ldr	r4, [r5, #4]
 8015012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d0ef      	beq.n	8014ffa <_fflush_r+0xa>
 801501a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801501c:	07d0      	lsls	r0, r2, #31
 801501e:	d404      	bmi.n	801502a <_fflush_r+0x3a>
 8015020:	0599      	lsls	r1, r3, #22
 8015022:	d402      	bmi.n	801502a <_fflush_r+0x3a>
 8015024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015026:	f000 f915 	bl	8015254 <__retarget_lock_acquire_recursive>
 801502a:	4628      	mov	r0, r5
 801502c:	4621      	mov	r1, r4
 801502e:	f7ff ff59 	bl	8014ee4 <__sflush_r>
 8015032:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015034:	07da      	lsls	r2, r3, #31
 8015036:	4605      	mov	r5, r0
 8015038:	d4e0      	bmi.n	8014ffc <_fflush_r+0xc>
 801503a:	89a3      	ldrh	r3, [r4, #12]
 801503c:	059b      	lsls	r3, r3, #22
 801503e:	d4dd      	bmi.n	8014ffc <_fflush_r+0xc>
 8015040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015042:	f000 f908 	bl	8015256 <__retarget_lock_release_recursive>
 8015046:	e7d9      	b.n	8014ffc <_fflush_r+0xc>
 8015048:	4b05      	ldr	r3, [pc, #20]	; (8015060 <_fflush_r+0x70>)
 801504a:	429c      	cmp	r4, r3
 801504c:	d101      	bne.n	8015052 <_fflush_r+0x62>
 801504e:	68ac      	ldr	r4, [r5, #8]
 8015050:	e7df      	b.n	8015012 <_fflush_r+0x22>
 8015052:	4b04      	ldr	r3, [pc, #16]	; (8015064 <_fflush_r+0x74>)
 8015054:	429c      	cmp	r4, r3
 8015056:	bf08      	it	eq
 8015058:	68ec      	ldreq	r4, [r5, #12]
 801505a:	e7da      	b.n	8015012 <_fflush_r+0x22>
 801505c:	08015dfc 	.word	0x08015dfc
 8015060:	08015e1c 	.word	0x08015e1c
 8015064:	08015ddc 	.word	0x08015ddc

08015068 <std>:
 8015068:	2300      	movs	r3, #0
 801506a:	b510      	push	{r4, lr}
 801506c:	4604      	mov	r4, r0
 801506e:	e9c0 3300 	strd	r3, r3, [r0]
 8015072:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015076:	6083      	str	r3, [r0, #8]
 8015078:	8181      	strh	r1, [r0, #12]
 801507a:	6643      	str	r3, [r0, #100]	; 0x64
 801507c:	81c2      	strh	r2, [r0, #14]
 801507e:	6183      	str	r3, [r0, #24]
 8015080:	4619      	mov	r1, r3
 8015082:	2208      	movs	r2, #8
 8015084:	305c      	adds	r0, #92	; 0x5c
 8015086:	f7ff fdc3 	bl	8014c10 <memset>
 801508a:	4b05      	ldr	r3, [pc, #20]	; (80150a0 <std+0x38>)
 801508c:	6263      	str	r3, [r4, #36]	; 0x24
 801508e:	4b05      	ldr	r3, [pc, #20]	; (80150a4 <std+0x3c>)
 8015090:	62a3      	str	r3, [r4, #40]	; 0x28
 8015092:	4b05      	ldr	r3, [pc, #20]	; (80150a8 <std+0x40>)
 8015094:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015096:	4b05      	ldr	r3, [pc, #20]	; (80150ac <std+0x44>)
 8015098:	6224      	str	r4, [r4, #32]
 801509a:	6323      	str	r3, [r4, #48]	; 0x30
 801509c:	bd10      	pop	{r4, pc}
 801509e:	bf00      	nop
 80150a0:	08015a71 	.word	0x08015a71
 80150a4:	08015a93 	.word	0x08015a93
 80150a8:	08015acb 	.word	0x08015acb
 80150ac:	08015aef 	.word	0x08015aef

080150b0 <_cleanup_r>:
 80150b0:	4901      	ldr	r1, [pc, #4]	; (80150b8 <_cleanup_r+0x8>)
 80150b2:	f000 b8af 	b.w	8015214 <_fwalk_reent>
 80150b6:	bf00      	nop
 80150b8:	08014ff1 	.word	0x08014ff1

080150bc <__sfmoreglue>:
 80150bc:	b570      	push	{r4, r5, r6, lr}
 80150be:	1e4a      	subs	r2, r1, #1
 80150c0:	2568      	movs	r5, #104	; 0x68
 80150c2:	4355      	muls	r5, r2
 80150c4:	460e      	mov	r6, r1
 80150c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80150ca:	f000 f979 	bl	80153c0 <_malloc_r>
 80150ce:	4604      	mov	r4, r0
 80150d0:	b140      	cbz	r0, 80150e4 <__sfmoreglue+0x28>
 80150d2:	2100      	movs	r1, #0
 80150d4:	e9c0 1600 	strd	r1, r6, [r0]
 80150d8:	300c      	adds	r0, #12
 80150da:	60a0      	str	r0, [r4, #8]
 80150dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80150e0:	f7ff fd96 	bl	8014c10 <memset>
 80150e4:	4620      	mov	r0, r4
 80150e6:	bd70      	pop	{r4, r5, r6, pc}

080150e8 <__sfp_lock_acquire>:
 80150e8:	4801      	ldr	r0, [pc, #4]	; (80150f0 <__sfp_lock_acquire+0x8>)
 80150ea:	f000 b8b3 	b.w	8015254 <__retarget_lock_acquire_recursive>
 80150ee:	bf00      	nop
 80150f0:	200073f8 	.word	0x200073f8

080150f4 <__sfp_lock_release>:
 80150f4:	4801      	ldr	r0, [pc, #4]	; (80150fc <__sfp_lock_release+0x8>)
 80150f6:	f000 b8ae 	b.w	8015256 <__retarget_lock_release_recursive>
 80150fa:	bf00      	nop
 80150fc:	200073f8 	.word	0x200073f8

08015100 <__sinit_lock_acquire>:
 8015100:	4801      	ldr	r0, [pc, #4]	; (8015108 <__sinit_lock_acquire+0x8>)
 8015102:	f000 b8a7 	b.w	8015254 <__retarget_lock_acquire_recursive>
 8015106:	bf00      	nop
 8015108:	200073f3 	.word	0x200073f3

0801510c <__sinit_lock_release>:
 801510c:	4801      	ldr	r0, [pc, #4]	; (8015114 <__sinit_lock_release+0x8>)
 801510e:	f000 b8a2 	b.w	8015256 <__retarget_lock_release_recursive>
 8015112:	bf00      	nop
 8015114:	200073f3 	.word	0x200073f3

08015118 <__sinit>:
 8015118:	b510      	push	{r4, lr}
 801511a:	4604      	mov	r4, r0
 801511c:	f7ff fff0 	bl	8015100 <__sinit_lock_acquire>
 8015120:	69a3      	ldr	r3, [r4, #24]
 8015122:	b11b      	cbz	r3, 801512c <__sinit+0x14>
 8015124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015128:	f7ff bff0 	b.w	801510c <__sinit_lock_release>
 801512c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015130:	6523      	str	r3, [r4, #80]	; 0x50
 8015132:	4b13      	ldr	r3, [pc, #76]	; (8015180 <__sinit+0x68>)
 8015134:	4a13      	ldr	r2, [pc, #76]	; (8015184 <__sinit+0x6c>)
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	62a2      	str	r2, [r4, #40]	; 0x28
 801513a:	42a3      	cmp	r3, r4
 801513c:	bf04      	itt	eq
 801513e:	2301      	moveq	r3, #1
 8015140:	61a3      	streq	r3, [r4, #24]
 8015142:	4620      	mov	r0, r4
 8015144:	f000 f820 	bl	8015188 <__sfp>
 8015148:	6060      	str	r0, [r4, #4]
 801514a:	4620      	mov	r0, r4
 801514c:	f000 f81c 	bl	8015188 <__sfp>
 8015150:	60a0      	str	r0, [r4, #8]
 8015152:	4620      	mov	r0, r4
 8015154:	f000 f818 	bl	8015188 <__sfp>
 8015158:	2200      	movs	r2, #0
 801515a:	60e0      	str	r0, [r4, #12]
 801515c:	2104      	movs	r1, #4
 801515e:	6860      	ldr	r0, [r4, #4]
 8015160:	f7ff ff82 	bl	8015068 <std>
 8015164:	68a0      	ldr	r0, [r4, #8]
 8015166:	2201      	movs	r2, #1
 8015168:	2109      	movs	r1, #9
 801516a:	f7ff ff7d 	bl	8015068 <std>
 801516e:	68e0      	ldr	r0, [r4, #12]
 8015170:	2202      	movs	r2, #2
 8015172:	2112      	movs	r1, #18
 8015174:	f7ff ff78 	bl	8015068 <std>
 8015178:	2301      	movs	r3, #1
 801517a:	61a3      	str	r3, [r4, #24]
 801517c:	e7d2      	b.n	8015124 <__sinit+0xc>
 801517e:	bf00      	nop
 8015180:	08015dd8 	.word	0x08015dd8
 8015184:	080150b1 	.word	0x080150b1

08015188 <__sfp>:
 8015188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801518a:	4607      	mov	r7, r0
 801518c:	f7ff ffac 	bl	80150e8 <__sfp_lock_acquire>
 8015190:	4b1e      	ldr	r3, [pc, #120]	; (801520c <__sfp+0x84>)
 8015192:	681e      	ldr	r6, [r3, #0]
 8015194:	69b3      	ldr	r3, [r6, #24]
 8015196:	b913      	cbnz	r3, 801519e <__sfp+0x16>
 8015198:	4630      	mov	r0, r6
 801519a:	f7ff ffbd 	bl	8015118 <__sinit>
 801519e:	3648      	adds	r6, #72	; 0x48
 80151a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80151a4:	3b01      	subs	r3, #1
 80151a6:	d503      	bpl.n	80151b0 <__sfp+0x28>
 80151a8:	6833      	ldr	r3, [r6, #0]
 80151aa:	b30b      	cbz	r3, 80151f0 <__sfp+0x68>
 80151ac:	6836      	ldr	r6, [r6, #0]
 80151ae:	e7f7      	b.n	80151a0 <__sfp+0x18>
 80151b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80151b4:	b9d5      	cbnz	r5, 80151ec <__sfp+0x64>
 80151b6:	4b16      	ldr	r3, [pc, #88]	; (8015210 <__sfp+0x88>)
 80151b8:	60e3      	str	r3, [r4, #12]
 80151ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80151be:	6665      	str	r5, [r4, #100]	; 0x64
 80151c0:	f000 f847 	bl	8015252 <__retarget_lock_init_recursive>
 80151c4:	f7ff ff96 	bl	80150f4 <__sfp_lock_release>
 80151c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80151cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80151d0:	6025      	str	r5, [r4, #0]
 80151d2:	61a5      	str	r5, [r4, #24]
 80151d4:	2208      	movs	r2, #8
 80151d6:	4629      	mov	r1, r5
 80151d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80151dc:	f7ff fd18 	bl	8014c10 <memset>
 80151e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80151e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80151e8:	4620      	mov	r0, r4
 80151ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151ec:	3468      	adds	r4, #104	; 0x68
 80151ee:	e7d9      	b.n	80151a4 <__sfp+0x1c>
 80151f0:	2104      	movs	r1, #4
 80151f2:	4638      	mov	r0, r7
 80151f4:	f7ff ff62 	bl	80150bc <__sfmoreglue>
 80151f8:	4604      	mov	r4, r0
 80151fa:	6030      	str	r0, [r6, #0]
 80151fc:	2800      	cmp	r0, #0
 80151fe:	d1d5      	bne.n	80151ac <__sfp+0x24>
 8015200:	f7ff ff78 	bl	80150f4 <__sfp_lock_release>
 8015204:	230c      	movs	r3, #12
 8015206:	603b      	str	r3, [r7, #0]
 8015208:	e7ee      	b.n	80151e8 <__sfp+0x60>
 801520a:	bf00      	nop
 801520c:	08015dd8 	.word	0x08015dd8
 8015210:	ffff0001 	.word	0xffff0001

08015214 <_fwalk_reent>:
 8015214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015218:	4606      	mov	r6, r0
 801521a:	4688      	mov	r8, r1
 801521c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015220:	2700      	movs	r7, #0
 8015222:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015226:	f1b9 0901 	subs.w	r9, r9, #1
 801522a:	d505      	bpl.n	8015238 <_fwalk_reent+0x24>
 801522c:	6824      	ldr	r4, [r4, #0]
 801522e:	2c00      	cmp	r4, #0
 8015230:	d1f7      	bne.n	8015222 <_fwalk_reent+0xe>
 8015232:	4638      	mov	r0, r7
 8015234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015238:	89ab      	ldrh	r3, [r5, #12]
 801523a:	2b01      	cmp	r3, #1
 801523c:	d907      	bls.n	801524e <_fwalk_reent+0x3a>
 801523e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015242:	3301      	adds	r3, #1
 8015244:	d003      	beq.n	801524e <_fwalk_reent+0x3a>
 8015246:	4629      	mov	r1, r5
 8015248:	4630      	mov	r0, r6
 801524a:	47c0      	blx	r8
 801524c:	4307      	orrs	r7, r0
 801524e:	3568      	adds	r5, #104	; 0x68
 8015250:	e7e9      	b.n	8015226 <_fwalk_reent+0x12>

08015252 <__retarget_lock_init_recursive>:
 8015252:	4770      	bx	lr

08015254 <__retarget_lock_acquire_recursive>:
 8015254:	4770      	bx	lr

08015256 <__retarget_lock_release_recursive>:
 8015256:	4770      	bx	lr

08015258 <__swhatbuf_r>:
 8015258:	b570      	push	{r4, r5, r6, lr}
 801525a:	460e      	mov	r6, r1
 801525c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015260:	2900      	cmp	r1, #0
 8015262:	b096      	sub	sp, #88	; 0x58
 8015264:	4614      	mov	r4, r2
 8015266:	461d      	mov	r5, r3
 8015268:	da07      	bge.n	801527a <__swhatbuf_r+0x22>
 801526a:	2300      	movs	r3, #0
 801526c:	602b      	str	r3, [r5, #0]
 801526e:	89b3      	ldrh	r3, [r6, #12]
 8015270:	061a      	lsls	r2, r3, #24
 8015272:	d410      	bmi.n	8015296 <__swhatbuf_r+0x3e>
 8015274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015278:	e00e      	b.n	8015298 <__swhatbuf_r+0x40>
 801527a:	466a      	mov	r2, sp
 801527c:	f000 fc5e 	bl	8015b3c <_fstat_r>
 8015280:	2800      	cmp	r0, #0
 8015282:	dbf2      	blt.n	801526a <__swhatbuf_r+0x12>
 8015284:	9a01      	ldr	r2, [sp, #4]
 8015286:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801528a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801528e:	425a      	negs	r2, r3
 8015290:	415a      	adcs	r2, r3
 8015292:	602a      	str	r2, [r5, #0]
 8015294:	e7ee      	b.n	8015274 <__swhatbuf_r+0x1c>
 8015296:	2340      	movs	r3, #64	; 0x40
 8015298:	2000      	movs	r0, #0
 801529a:	6023      	str	r3, [r4, #0]
 801529c:	b016      	add	sp, #88	; 0x58
 801529e:	bd70      	pop	{r4, r5, r6, pc}

080152a0 <__smakebuf_r>:
 80152a0:	898b      	ldrh	r3, [r1, #12]
 80152a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80152a4:	079d      	lsls	r5, r3, #30
 80152a6:	4606      	mov	r6, r0
 80152a8:	460c      	mov	r4, r1
 80152aa:	d507      	bpl.n	80152bc <__smakebuf_r+0x1c>
 80152ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80152b0:	6023      	str	r3, [r4, #0]
 80152b2:	6123      	str	r3, [r4, #16]
 80152b4:	2301      	movs	r3, #1
 80152b6:	6163      	str	r3, [r4, #20]
 80152b8:	b002      	add	sp, #8
 80152ba:	bd70      	pop	{r4, r5, r6, pc}
 80152bc:	ab01      	add	r3, sp, #4
 80152be:	466a      	mov	r2, sp
 80152c0:	f7ff ffca 	bl	8015258 <__swhatbuf_r>
 80152c4:	9900      	ldr	r1, [sp, #0]
 80152c6:	4605      	mov	r5, r0
 80152c8:	4630      	mov	r0, r6
 80152ca:	f000 f879 	bl	80153c0 <_malloc_r>
 80152ce:	b948      	cbnz	r0, 80152e4 <__smakebuf_r+0x44>
 80152d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152d4:	059a      	lsls	r2, r3, #22
 80152d6:	d4ef      	bmi.n	80152b8 <__smakebuf_r+0x18>
 80152d8:	f023 0303 	bic.w	r3, r3, #3
 80152dc:	f043 0302 	orr.w	r3, r3, #2
 80152e0:	81a3      	strh	r3, [r4, #12]
 80152e2:	e7e3      	b.n	80152ac <__smakebuf_r+0xc>
 80152e4:	4b0d      	ldr	r3, [pc, #52]	; (801531c <__smakebuf_r+0x7c>)
 80152e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80152e8:	89a3      	ldrh	r3, [r4, #12]
 80152ea:	6020      	str	r0, [r4, #0]
 80152ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152f0:	81a3      	strh	r3, [r4, #12]
 80152f2:	9b00      	ldr	r3, [sp, #0]
 80152f4:	6163      	str	r3, [r4, #20]
 80152f6:	9b01      	ldr	r3, [sp, #4]
 80152f8:	6120      	str	r0, [r4, #16]
 80152fa:	b15b      	cbz	r3, 8015314 <__smakebuf_r+0x74>
 80152fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015300:	4630      	mov	r0, r6
 8015302:	f000 fc2d 	bl	8015b60 <_isatty_r>
 8015306:	b128      	cbz	r0, 8015314 <__smakebuf_r+0x74>
 8015308:	89a3      	ldrh	r3, [r4, #12]
 801530a:	f023 0303 	bic.w	r3, r3, #3
 801530e:	f043 0301 	orr.w	r3, r3, #1
 8015312:	81a3      	strh	r3, [r4, #12]
 8015314:	89a0      	ldrh	r0, [r4, #12]
 8015316:	4305      	orrs	r5, r0
 8015318:	81a5      	strh	r5, [r4, #12]
 801531a:	e7cd      	b.n	80152b8 <__smakebuf_r+0x18>
 801531c:	080150b1 	.word	0x080150b1

08015320 <_free_r>:
 8015320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015322:	2900      	cmp	r1, #0
 8015324:	d048      	beq.n	80153b8 <_free_r+0x98>
 8015326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801532a:	9001      	str	r0, [sp, #4]
 801532c:	2b00      	cmp	r3, #0
 801532e:	f1a1 0404 	sub.w	r4, r1, #4
 8015332:	bfb8      	it	lt
 8015334:	18e4      	addlt	r4, r4, r3
 8015336:	f000 fc35 	bl	8015ba4 <__malloc_lock>
 801533a:	4a20      	ldr	r2, [pc, #128]	; (80153bc <_free_r+0x9c>)
 801533c:	9801      	ldr	r0, [sp, #4]
 801533e:	6813      	ldr	r3, [r2, #0]
 8015340:	4615      	mov	r5, r2
 8015342:	b933      	cbnz	r3, 8015352 <_free_r+0x32>
 8015344:	6063      	str	r3, [r4, #4]
 8015346:	6014      	str	r4, [r2, #0]
 8015348:	b003      	add	sp, #12
 801534a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801534e:	f000 bc2f 	b.w	8015bb0 <__malloc_unlock>
 8015352:	42a3      	cmp	r3, r4
 8015354:	d90b      	bls.n	801536e <_free_r+0x4e>
 8015356:	6821      	ldr	r1, [r4, #0]
 8015358:	1862      	adds	r2, r4, r1
 801535a:	4293      	cmp	r3, r2
 801535c:	bf04      	itt	eq
 801535e:	681a      	ldreq	r2, [r3, #0]
 8015360:	685b      	ldreq	r3, [r3, #4]
 8015362:	6063      	str	r3, [r4, #4]
 8015364:	bf04      	itt	eq
 8015366:	1852      	addeq	r2, r2, r1
 8015368:	6022      	streq	r2, [r4, #0]
 801536a:	602c      	str	r4, [r5, #0]
 801536c:	e7ec      	b.n	8015348 <_free_r+0x28>
 801536e:	461a      	mov	r2, r3
 8015370:	685b      	ldr	r3, [r3, #4]
 8015372:	b10b      	cbz	r3, 8015378 <_free_r+0x58>
 8015374:	42a3      	cmp	r3, r4
 8015376:	d9fa      	bls.n	801536e <_free_r+0x4e>
 8015378:	6811      	ldr	r1, [r2, #0]
 801537a:	1855      	adds	r5, r2, r1
 801537c:	42a5      	cmp	r5, r4
 801537e:	d10b      	bne.n	8015398 <_free_r+0x78>
 8015380:	6824      	ldr	r4, [r4, #0]
 8015382:	4421      	add	r1, r4
 8015384:	1854      	adds	r4, r2, r1
 8015386:	42a3      	cmp	r3, r4
 8015388:	6011      	str	r1, [r2, #0]
 801538a:	d1dd      	bne.n	8015348 <_free_r+0x28>
 801538c:	681c      	ldr	r4, [r3, #0]
 801538e:	685b      	ldr	r3, [r3, #4]
 8015390:	6053      	str	r3, [r2, #4]
 8015392:	4421      	add	r1, r4
 8015394:	6011      	str	r1, [r2, #0]
 8015396:	e7d7      	b.n	8015348 <_free_r+0x28>
 8015398:	d902      	bls.n	80153a0 <_free_r+0x80>
 801539a:	230c      	movs	r3, #12
 801539c:	6003      	str	r3, [r0, #0]
 801539e:	e7d3      	b.n	8015348 <_free_r+0x28>
 80153a0:	6825      	ldr	r5, [r4, #0]
 80153a2:	1961      	adds	r1, r4, r5
 80153a4:	428b      	cmp	r3, r1
 80153a6:	bf04      	itt	eq
 80153a8:	6819      	ldreq	r1, [r3, #0]
 80153aa:	685b      	ldreq	r3, [r3, #4]
 80153ac:	6063      	str	r3, [r4, #4]
 80153ae:	bf04      	itt	eq
 80153b0:	1949      	addeq	r1, r1, r5
 80153b2:	6021      	streq	r1, [r4, #0]
 80153b4:	6054      	str	r4, [r2, #4]
 80153b6:	e7c7      	b.n	8015348 <_free_r+0x28>
 80153b8:	b003      	add	sp, #12
 80153ba:	bd30      	pop	{r4, r5, pc}
 80153bc:	20007030 	.word	0x20007030

080153c0 <_malloc_r>:
 80153c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153c2:	1ccd      	adds	r5, r1, #3
 80153c4:	f025 0503 	bic.w	r5, r5, #3
 80153c8:	3508      	adds	r5, #8
 80153ca:	2d0c      	cmp	r5, #12
 80153cc:	bf38      	it	cc
 80153ce:	250c      	movcc	r5, #12
 80153d0:	2d00      	cmp	r5, #0
 80153d2:	4606      	mov	r6, r0
 80153d4:	db01      	blt.n	80153da <_malloc_r+0x1a>
 80153d6:	42a9      	cmp	r1, r5
 80153d8:	d903      	bls.n	80153e2 <_malloc_r+0x22>
 80153da:	230c      	movs	r3, #12
 80153dc:	6033      	str	r3, [r6, #0]
 80153de:	2000      	movs	r0, #0
 80153e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153e2:	f000 fbdf 	bl	8015ba4 <__malloc_lock>
 80153e6:	4921      	ldr	r1, [pc, #132]	; (801546c <_malloc_r+0xac>)
 80153e8:	680a      	ldr	r2, [r1, #0]
 80153ea:	4614      	mov	r4, r2
 80153ec:	b99c      	cbnz	r4, 8015416 <_malloc_r+0x56>
 80153ee:	4f20      	ldr	r7, [pc, #128]	; (8015470 <_malloc_r+0xb0>)
 80153f0:	683b      	ldr	r3, [r7, #0]
 80153f2:	b923      	cbnz	r3, 80153fe <_malloc_r+0x3e>
 80153f4:	4621      	mov	r1, r4
 80153f6:	4630      	mov	r0, r6
 80153f8:	f000 fb2a 	bl	8015a50 <_sbrk_r>
 80153fc:	6038      	str	r0, [r7, #0]
 80153fe:	4629      	mov	r1, r5
 8015400:	4630      	mov	r0, r6
 8015402:	f000 fb25 	bl	8015a50 <_sbrk_r>
 8015406:	1c43      	adds	r3, r0, #1
 8015408:	d123      	bne.n	8015452 <_malloc_r+0x92>
 801540a:	230c      	movs	r3, #12
 801540c:	6033      	str	r3, [r6, #0]
 801540e:	4630      	mov	r0, r6
 8015410:	f000 fbce 	bl	8015bb0 <__malloc_unlock>
 8015414:	e7e3      	b.n	80153de <_malloc_r+0x1e>
 8015416:	6823      	ldr	r3, [r4, #0]
 8015418:	1b5b      	subs	r3, r3, r5
 801541a:	d417      	bmi.n	801544c <_malloc_r+0x8c>
 801541c:	2b0b      	cmp	r3, #11
 801541e:	d903      	bls.n	8015428 <_malloc_r+0x68>
 8015420:	6023      	str	r3, [r4, #0]
 8015422:	441c      	add	r4, r3
 8015424:	6025      	str	r5, [r4, #0]
 8015426:	e004      	b.n	8015432 <_malloc_r+0x72>
 8015428:	6863      	ldr	r3, [r4, #4]
 801542a:	42a2      	cmp	r2, r4
 801542c:	bf0c      	ite	eq
 801542e:	600b      	streq	r3, [r1, #0]
 8015430:	6053      	strne	r3, [r2, #4]
 8015432:	4630      	mov	r0, r6
 8015434:	f000 fbbc 	bl	8015bb0 <__malloc_unlock>
 8015438:	f104 000b 	add.w	r0, r4, #11
 801543c:	1d23      	adds	r3, r4, #4
 801543e:	f020 0007 	bic.w	r0, r0, #7
 8015442:	1ac2      	subs	r2, r0, r3
 8015444:	d0cc      	beq.n	80153e0 <_malloc_r+0x20>
 8015446:	1a1b      	subs	r3, r3, r0
 8015448:	50a3      	str	r3, [r4, r2]
 801544a:	e7c9      	b.n	80153e0 <_malloc_r+0x20>
 801544c:	4622      	mov	r2, r4
 801544e:	6864      	ldr	r4, [r4, #4]
 8015450:	e7cc      	b.n	80153ec <_malloc_r+0x2c>
 8015452:	1cc4      	adds	r4, r0, #3
 8015454:	f024 0403 	bic.w	r4, r4, #3
 8015458:	42a0      	cmp	r0, r4
 801545a:	d0e3      	beq.n	8015424 <_malloc_r+0x64>
 801545c:	1a21      	subs	r1, r4, r0
 801545e:	4630      	mov	r0, r6
 8015460:	f000 faf6 	bl	8015a50 <_sbrk_r>
 8015464:	3001      	adds	r0, #1
 8015466:	d1dd      	bne.n	8015424 <_malloc_r+0x64>
 8015468:	e7cf      	b.n	801540a <_malloc_r+0x4a>
 801546a:	bf00      	nop
 801546c:	20007030 	.word	0x20007030
 8015470:	20007034 	.word	0x20007034

08015474 <__sfputc_r>:
 8015474:	6893      	ldr	r3, [r2, #8]
 8015476:	3b01      	subs	r3, #1
 8015478:	2b00      	cmp	r3, #0
 801547a:	b410      	push	{r4}
 801547c:	6093      	str	r3, [r2, #8]
 801547e:	da08      	bge.n	8015492 <__sfputc_r+0x1e>
 8015480:	6994      	ldr	r4, [r2, #24]
 8015482:	42a3      	cmp	r3, r4
 8015484:	db01      	blt.n	801548a <__sfputc_r+0x16>
 8015486:	290a      	cmp	r1, #10
 8015488:	d103      	bne.n	8015492 <__sfputc_r+0x1e>
 801548a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801548e:	f7ff bc69 	b.w	8014d64 <__swbuf_r>
 8015492:	6813      	ldr	r3, [r2, #0]
 8015494:	1c58      	adds	r0, r3, #1
 8015496:	6010      	str	r0, [r2, #0]
 8015498:	7019      	strb	r1, [r3, #0]
 801549a:	4608      	mov	r0, r1
 801549c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154a0:	4770      	bx	lr

080154a2 <__sfputs_r>:
 80154a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154a4:	4606      	mov	r6, r0
 80154a6:	460f      	mov	r7, r1
 80154a8:	4614      	mov	r4, r2
 80154aa:	18d5      	adds	r5, r2, r3
 80154ac:	42ac      	cmp	r4, r5
 80154ae:	d101      	bne.n	80154b4 <__sfputs_r+0x12>
 80154b0:	2000      	movs	r0, #0
 80154b2:	e007      	b.n	80154c4 <__sfputs_r+0x22>
 80154b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154b8:	463a      	mov	r2, r7
 80154ba:	4630      	mov	r0, r6
 80154bc:	f7ff ffda 	bl	8015474 <__sfputc_r>
 80154c0:	1c43      	adds	r3, r0, #1
 80154c2:	d1f3      	bne.n	80154ac <__sfputs_r+0xa>
 80154c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080154c8 <_vfiprintf_r>:
 80154c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154cc:	460d      	mov	r5, r1
 80154ce:	b09d      	sub	sp, #116	; 0x74
 80154d0:	4614      	mov	r4, r2
 80154d2:	4698      	mov	r8, r3
 80154d4:	4606      	mov	r6, r0
 80154d6:	b118      	cbz	r0, 80154e0 <_vfiprintf_r+0x18>
 80154d8:	6983      	ldr	r3, [r0, #24]
 80154da:	b90b      	cbnz	r3, 80154e0 <_vfiprintf_r+0x18>
 80154dc:	f7ff fe1c 	bl	8015118 <__sinit>
 80154e0:	4b89      	ldr	r3, [pc, #548]	; (8015708 <_vfiprintf_r+0x240>)
 80154e2:	429d      	cmp	r5, r3
 80154e4:	d11b      	bne.n	801551e <_vfiprintf_r+0x56>
 80154e6:	6875      	ldr	r5, [r6, #4]
 80154e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80154ea:	07d9      	lsls	r1, r3, #31
 80154ec:	d405      	bmi.n	80154fa <_vfiprintf_r+0x32>
 80154ee:	89ab      	ldrh	r3, [r5, #12]
 80154f0:	059a      	lsls	r2, r3, #22
 80154f2:	d402      	bmi.n	80154fa <_vfiprintf_r+0x32>
 80154f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80154f6:	f7ff fead 	bl	8015254 <__retarget_lock_acquire_recursive>
 80154fa:	89ab      	ldrh	r3, [r5, #12]
 80154fc:	071b      	lsls	r3, r3, #28
 80154fe:	d501      	bpl.n	8015504 <_vfiprintf_r+0x3c>
 8015500:	692b      	ldr	r3, [r5, #16]
 8015502:	b9eb      	cbnz	r3, 8015540 <_vfiprintf_r+0x78>
 8015504:	4629      	mov	r1, r5
 8015506:	4630      	mov	r0, r6
 8015508:	f7ff fc7e 	bl	8014e08 <__swsetup_r>
 801550c:	b1c0      	cbz	r0, 8015540 <_vfiprintf_r+0x78>
 801550e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015510:	07dc      	lsls	r4, r3, #31
 8015512:	d50e      	bpl.n	8015532 <_vfiprintf_r+0x6a>
 8015514:	f04f 30ff 	mov.w	r0, #4294967295
 8015518:	b01d      	add	sp, #116	; 0x74
 801551a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801551e:	4b7b      	ldr	r3, [pc, #492]	; (801570c <_vfiprintf_r+0x244>)
 8015520:	429d      	cmp	r5, r3
 8015522:	d101      	bne.n	8015528 <_vfiprintf_r+0x60>
 8015524:	68b5      	ldr	r5, [r6, #8]
 8015526:	e7df      	b.n	80154e8 <_vfiprintf_r+0x20>
 8015528:	4b79      	ldr	r3, [pc, #484]	; (8015710 <_vfiprintf_r+0x248>)
 801552a:	429d      	cmp	r5, r3
 801552c:	bf08      	it	eq
 801552e:	68f5      	ldreq	r5, [r6, #12]
 8015530:	e7da      	b.n	80154e8 <_vfiprintf_r+0x20>
 8015532:	89ab      	ldrh	r3, [r5, #12]
 8015534:	0598      	lsls	r0, r3, #22
 8015536:	d4ed      	bmi.n	8015514 <_vfiprintf_r+0x4c>
 8015538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801553a:	f7ff fe8c 	bl	8015256 <__retarget_lock_release_recursive>
 801553e:	e7e9      	b.n	8015514 <_vfiprintf_r+0x4c>
 8015540:	2300      	movs	r3, #0
 8015542:	9309      	str	r3, [sp, #36]	; 0x24
 8015544:	2320      	movs	r3, #32
 8015546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801554a:	f8cd 800c 	str.w	r8, [sp, #12]
 801554e:	2330      	movs	r3, #48	; 0x30
 8015550:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015714 <_vfiprintf_r+0x24c>
 8015554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015558:	f04f 0901 	mov.w	r9, #1
 801555c:	4623      	mov	r3, r4
 801555e:	469a      	mov	sl, r3
 8015560:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015564:	b10a      	cbz	r2, 801556a <_vfiprintf_r+0xa2>
 8015566:	2a25      	cmp	r2, #37	; 0x25
 8015568:	d1f9      	bne.n	801555e <_vfiprintf_r+0x96>
 801556a:	ebba 0b04 	subs.w	fp, sl, r4
 801556e:	d00b      	beq.n	8015588 <_vfiprintf_r+0xc0>
 8015570:	465b      	mov	r3, fp
 8015572:	4622      	mov	r2, r4
 8015574:	4629      	mov	r1, r5
 8015576:	4630      	mov	r0, r6
 8015578:	f7ff ff93 	bl	80154a2 <__sfputs_r>
 801557c:	3001      	adds	r0, #1
 801557e:	f000 80aa 	beq.w	80156d6 <_vfiprintf_r+0x20e>
 8015582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015584:	445a      	add	r2, fp
 8015586:	9209      	str	r2, [sp, #36]	; 0x24
 8015588:	f89a 3000 	ldrb.w	r3, [sl]
 801558c:	2b00      	cmp	r3, #0
 801558e:	f000 80a2 	beq.w	80156d6 <_vfiprintf_r+0x20e>
 8015592:	2300      	movs	r3, #0
 8015594:	f04f 32ff 	mov.w	r2, #4294967295
 8015598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801559c:	f10a 0a01 	add.w	sl, sl, #1
 80155a0:	9304      	str	r3, [sp, #16]
 80155a2:	9307      	str	r3, [sp, #28]
 80155a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80155a8:	931a      	str	r3, [sp, #104]	; 0x68
 80155aa:	4654      	mov	r4, sl
 80155ac:	2205      	movs	r2, #5
 80155ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155b2:	4858      	ldr	r0, [pc, #352]	; (8015714 <_vfiprintf_r+0x24c>)
 80155b4:	f7ea fe14 	bl	80001e0 <memchr>
 80155b8:	9a04      	ldr	r2, [sp, #16]
 80155ba:	b9d8      	cbnz	r0, 80155f4 <_vfiprintf_r+0x12c>
 80155bc:	06d1      	lsls	r1, r2, #27
 80155be:	bf44      	itt	mi
 80155c0:	2320      	movmi	r3, #32
 80155c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80155c6:	0713      	lsls	r3, r2, #28
 80155c8:	bf44      	itt	mi
 80155ca:	232b      	movmi	r3, #43	; 0x2b
 80155cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80155d0:	f89a 3000 	ldrb.w	r3, [sl]
 80155d4:	2b2a      	cmp	r3, #42	; 0x2a
 80155d6:	d015      	beq.n	8015604 <_vfiprintf_r+0x13c>
 80155d8:	9a07      	ldr	r2, [sp, #28]
 80155da:	4654      	mov	r4, sl
 80155dc:	2000      	movs	r0, #0
 80155de:	f04f 0c0a 	mov.w	ip, #10
 80155e2:	4621      	mov	r1, r4
 80155e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80155e8:	3b30      	subs	r3, #48	; 0x30
 80155ea:	2b09      	cmp	r3, #9
 80155ec:	d94e      	bls.n	801568c <_vfiprintf_r+0x1c4>
 80155ee:	b1b0      	cbz	r0, 801561e <_vfiprintf_r+0x156>
 80155f0:	9207      	str	r2, [sp, #28]
 80155f2:	e014      	b.n	801561e <_vfiprintf_r+0x156>
 80155f4:	eba0 0308 	sub.w	r3, r0, r8
 80155f8:	fa09 f303 	lsl.w	r3, r9, r3
 80155fc:	4313      	orrs	r3, r2
 80155fe:	9304      	str	r3, [sp, #16]
 8015600:	46a2      	mov	sl, r4
 8015602:	e7d2      	b.n	80155aa <_vfiprintf_r+0xe2>
 8015604:	9b03      	ldr	r3, [sp, #12]
 8015606:	1d19      	adds	r1, r3, #4
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	9103      	str	r1, [sp, #12]
 801560c:	2b00      	cmp	r3, #0
 801560e:	bfbb      	ittet	lt
 8015610:	425b      	neglt	r3, r3
 8015612:	f042 0202 	orrlt.w	r2, r2, #2
 8015616:	9307      	strge	r3, [sp, #28]
 8015618:	9307      	strlt	r3, [sp, #28]
 801561a:	bfb8      	it	lt
 801561c:	9204      	strlt	r2, [sp, #16]
 801561e:	7823      	ldrb	r3, [r4, #0]
 8015620:	2b2e      	cmp	r3, #46	; 0x2e
 8015622:	d10c      	bne.n	801563e <_vfiprintf_r+0x176>
 8015624:	7863      	ldrb	r3, [r4, #1]
 8015626:	2b2a      	cmp	r3, #42	; 0x2a
 8015628:	d135      	bne.n	8015696 <_vfiprintf_r+0x1ce>
 801562a:	9b03      	ldr	r3, [sp, #12]
 801562c:	1d1a      	adds	r2, r3, #4
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	9203      	str	r2, [sp, #12]
 8015632:	2b00      	cmp	r3, #0
 8015634:	bfb8      	it	lt
 8015636:	f04f 33ff 	movlt.w	r3, #4294967295
 801563a:	3402      	adds	r4, #2
 801563c:	9305      	str	r3, [sp, #20]
 801563e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015724 <_vfiprintf_r+0x25c>
 8015642:	7821      	ldrb	r1, [r4, #0]
 8015644:	2203      	movs	r2, #3
 8015646:	4650      	mov	r0, sl
 8015648:	f7ea fdca 	bl	80001e0 <memchr>
 801564c:	b140      	cbz	r0, 8015660 <_vfiprintf_r+0x198>
 801564e:	2340      	movs	r3, #64	; 0x40
 8015650:	eba0 000a 	sub.w	r0, r0, sl
 8015654:	fa03 f000 	lsl.w	r0, r3, r0
 8015658:	9b04      	ldr	r3, [sp, #16]
 801565a:	4303      	orrs	r3, r0
 801565c:	3401      	adds	r4, #1
 801565e:	9304      	str	r3, [sp, #16]
 8015660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015664:	482c      	ldr	r0, [pc, #176]	; (8015718 <_vfiprintf_r+0x250>)
 8015666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801566a:	2206      	movs	r2, #6
 801566c:	f7ea fdb8 	bl	80001e0 <memchr>
 8015670:	2800      	cmp	r0, #0
 8015672:	d03f      	beq.n	80156f4 <_vfiprintf_r+0x22c>
 8015674:	4b29      	ldr	r3, [pc, #164]	; (801571c <_vfiprintf_r+0x254>)
 8015676:	bb1b      	cbnz	r3, 80156c0 <_vfiprintf_r+0x1f8>
 8015678:	9b03      	ldr	r3, [sp, #12]
 801567a:	3307      	adds	r3, #7
 801567c:	f023 0307 	bic.w	r3, r3, #7
 8015680:	3308      	adds	r3, #8
 8015682:	9303      	str	r3, [sp, #12]
 8015684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015686:	443b      	add	r3, r7
 8015688:	9309      	str	r3, [sp, #36]	; 0x24
 801568a:	e767      	b.n	801555c <_vfiprintf_r+0x94>
 801568c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015690:	460c      	mov	r4, r1
 8015692:	2001      	movs	r0, #1
 8015694:	e7a5      	b.n	80155e2 <_vfiprintf_r+0x11a>
 8015696:	2300      	movs	r3, #0
 8015698:	3401      	adds	r4, #1
 801569a:	9305      	str	r3, [sp, #20]
 801569c:	4619      	mov	r1, r3
 801569e:	f04f 0c0a 	mov.w	ip, #10
 80156a2:	4620      	mov	r0, r4
 80156a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80156a8:	3a30      	subs	r2, #48	; 0x30
 80156aa:	2a09      	cmp	r2, #9
 80156ac:	d903      	bls.n	80156b6 <_vfiprintf_r+0x1ee>
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d0c5      	beq.n	801563e <_vfiprintf_r+0x176>
 80156b2:	9105      	str	r1, [sp, #20]
 80156b4:	e7c3      	b.n	801563e <_vfiprintf_r+0x176>
 80156b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80156ba:	4604      	mov	r4, r0
 80156bc:	2301      	movs	r3, #1
 80156be:	e7f0      	b.n	80156a2 <_vfiprintf_r+0x1da>
 80156c0:	ab03      	add	r3, sp, #12
 80156c2:	9300      	str	r3, [sp, #0]
 80156c4:	462a      	mov	r2, r5
 80156c6:	4b16      	ldr	r3, [pc, #88]	; (8015720 <_vfiprintf_r+0x258>)
 80156c8:	a904      	add	r1, sp, #16
 80156ca:	4630      	mov	r0, r6
 80156cc:	f3af 8000 	nop.w
 80156d0:	4607      	mov	r7, r0
 80156d2:	1c78      	adds	r0, r7, #1
 80156d4:	d1d6      	bne.n	8015684 <_vfiprintf_r+0x1bc>
 80156d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80156d8:	07d9      	lsls	r1, r3, #31
 80156da:	d405      	bmi.n	80156e8 <_vfiprintf_r+0x220>
 80156dc:	89ab      	ldrh	r3, [r5, #12]
 80156de:	059a      	lsls	r2, r3, #22
 80156e0:	d402      	bmi.n	80156e8 <_vfiprintf_r+0x220>
 80156e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80156e4:	f7ff fdb7 	bl	8015256 <__retarget_lock_release_recursive>
 80156e8:	89ab      	ldrh	r3, [r5, #12]
 80156ea:	065b      	lsls	r3, r3, #25
 80156ec:	f53f af12 	bmi.w	8015514 <_vfiprintf_r+0x4c>
 80156f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80156f2:	e711      	b.n	8015518 <_vfiprintf_r+0x50>
 80156f4:	ab03      	add	r3, sp, #12
 80156f6:	9300      	str	r3, [sp, #0]
 80156f8:	462a      	mov	r2, r5
 80156fa:	4b09      	ldr	r3, [pc, #36]	; (8015720 <_vfiprintf_r+0x258>)
 80156fc:	a904      	add	r1, sp, #16
 80156fe:	4630      	mov	r0, r6
 8015700:	f000 f880 	bl	8015804 <_printf_i>
 8015704:	e7e4      	b.n	80156d0 <_vfiprintf_r+0x208>
 8015706:	bf00      	nop
 8015708:	08015dfc 	.word	0x08015dfc
 801570c:	08015e1c 	.word	0x08015e1c
 8015710:	08015ddc 	.word	0x08015ddc
 8015714:	08015e3c 	.word	0x08015e3c
 8015718:	08015e46 	.word	0x08015e46
 801571c:	00000000 	.word	0x00000000
 8015720:	080154a3 	.word	0x080154a3
 8015724:	08015e42 	.word	0x08015e42

08015728 <_printf_common>:
 8015728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801572c:	4616      	mov	r6, r2
 801572e:	4699      	mov	r9, r3
 8015730:	688a      	ldr	r2, [r1, #8]
 8015732:	690b      	ldr	r3, [r1, #16]
 8015734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015738:	4293      	cmp	r3, r2
 801573a:	bfb8      	it	lt
 801573c:	4613      	movlt	r3, r2
 801573e:	6033      	str	r3, [r6, #0]
 8015740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015744:	4607      	mov	r7, r0
 8015746:	460c      	mov	r4, r1
 8015748:	b10a      	cbz	r2, 801574e <_printf_common+0x26>
 801574a:	3301      	adds	r3, #1
 801574c:	6033      	str	r3, [r6, #0]
 801574e:	6823      	ldr	r3, [r4, #0]
 8015750:	0699      	lsls	r1, r3, #26
 8015752:	bf42      	ittt	mi
 8015754:	6833      	ldrmi	r3, [r6, #0]
 8015756:	3302      	addmi	r3, #2
 8015758:	6033      	strmi	r3, [r6, #0]
 801575a:	6825      	ldr	r5, [r4, #0]
 801575c:	f015 0506 	ands.w	r5, r5, #6
 8015760:	d106      	bne.n	8015770 <_printf_common+0x48>
 8015762:	f104 0a19 	add.w	sl, r4, #25
 8015766:	68e3      	ldr	r3, [r4, #12]
 8015768:	6832      	ldr	r2, [r6, #0]
 801576a:	1a9b      	subs	r3, r3, r2
 801576c:	42ab      	cmp	r3, r5
 801576e:	dc26      	bgt.n	80157be <_printf_common+0x96>
 8015770:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015774:	1e13      	subs	r3, r2, #0
 8015776:	6822      	ldr	r2, [r4, #0]
 8015778:	bf18      	it	ne
 801577a:	2301      	movne	r3, #1
 801577c:	0692      	lsls	r2, r2, #26
 801577e:	d42b      	bmi.n	80157d8 <_printf_common+0xb0>
 8015780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015784:	4649      	mov	r1, r9
 8015786:	4638      	mov	r0, r7
 8015788:	47c0      	blx	r8
 801578a:	3001      	adds	r0, #1
 801578c:	d01e      	beq.n	80157cc <_printf_common+0xa4>
 801578e:	6823      	ldr	r3, [r4, #0]
 8015790:	68e5      	ldr	r5, [r4, #12]
 8015792:	6832      	ldr	r2, [r6, #0]
 8015794:	f003 0306 	and.w	r3, r3, #6
 8015798:	2b04      	cmp	r3, #4
 801579a:	bf08      	it	eq
 801579c:	1aad      	subeq	r5, r5, r2
 801579e:	68a3      	ldr	r3, [r4, #8]
 80157a0:	6922      	ldr	r2, [r4, #16]
 80157a2:	bf0c      	ite	eq
 80157a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80157a8:	2500      	movne	r5, #0
 80157aa:	4293      	cmp	r3, r2
 80157ac:	bfc4      	itt	gt
 80157ae:	1a9b      	subgt	r3, r3, r2
 80157b0:	18ed      	addgt	r5, r5, r3
 80157b2:	2600      	movs	r6, #0
 80157b4:	341a      	adds	r4, #26
 80157b6:	42b5      	cmp	r5, r6
 80157b8:	d11a      	bne.n	80157f0 <_printf_common+0xc8>
 80157ba:	2000      	movs	r0, #0
 80157bc:	e008      	b.n	80157d0 <_printf_common+0xa8>
 80157be:	2301      	movs	r3, #1
 80157c0:	4652      	mov	r2, sl
 80157c2:	4649      	mov	r1, r9
 80157c4:	4638      	mov	r0, r7
 80157c6:	47c0      	blx	r8
 80157c8:	3001      	adds	r0, #1
 80157ca:	d103      	bne.n	80157d4 <_printf_common+0xac>
 80157cc:	f04f 30ff 	mov.w	r0, #4294967295
 80157d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157d4:	3501      	adds	r5, #1
 80157d6:	e7c6      	b.n	8015766 <_printf_common+0x3e>
 80157d8:	18e1      	adds	r1, r4, r3
 80157da:	1c5a      	adds	r2, r3, #1
 80157dc:	2030      	movs	r0, #48	; 0x30
 80157de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80157e2:	4422      	add	r2, r4
 80157e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80157e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80157ec:	3302      	adds	r3, #2
 80157ee:	e7c7      	b.n	8015780 <_printf_common+0x58>
 80157f0:	2301      	movs	r3, #1
 80157f2:	4622      	mov	r2, r4
 80157f4:	4649      	mov	r1, r9
 80157f6:	4638      	mov	r0, r7
 80157f8:	47c0      	blx	r8
 80157fa:	3001      	adds	r0, #1
 80157fc:	d0e6      	beq.n	80157cc <_printf_common+0xa4>
 80157fe:	3601      	adds	r6, #1
 8015800:	e7d9      	b.n	80157b6 <_printf_common+0x8e>
	...

08015804 <_printf_i>:
 8015804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015808:	460c      	mov	r4, r1
 801580a:	4691      	mov	r9, r2
 801580c:	7e27      	ldrb	r7, [r4, #24]
 801580e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015810:	2f78      	cmp	r7, #120	; 0x78
 8015812:	4680      	mov	r8, r0
 8015814:	469a      	mov	sl, r3
 8015816:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801581a:	d807      	bhi.n	801582c <_printf_i+0x28>
 801581c:	2f62      	cmp	r7, #98	; 0x62
 801581e:	d80a      	bhi.n	8015836 <_printf_i+0x32>
 8015820:	2f00      	cmp	r7, #0
 8015822:	f000 80d8 	beq.w	80159d6 <_printf_i+0x1d2>
 8015826:	2f58      	cmp	r7, #88	; 0x58
 8015828:	f000 80a3 	beq.w	8015972 <_printf_i+0x16e>
 801582c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015834:	e03a      	b.n	80158ac <_printf_i+0xa8>
 8015836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801583a:	2b15      	cmp	r3, #21
 801583c:	d8f6      	bhi.n	801582c <_printf_i+0x28>
 801583e:	a001      	add	r0, pc, #4	; (adr r0, 8015844 <_printf_i+0x40>)
 8015840:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015844:	0801589d 	.word	0x0801589d
 8015848:	080158b1 	.word	0x080158b1
 801584c:	0801582d 	.word	0x0801582d
 8015850:	0801582d 	.word	0x0801582d
 8015854:	0801582d 	.word	0x0801582d
 8015858:	0801582d 	.word	0x0801582d
 801585c:	080158b1 	.word	0x080158b1
 8015860:	0801582d 	.word	0x0801582d
 8015864:	0801582d 	.word	0x0801582d
 8015868:	0801582d 	.word	0x0801582d
 801586c:	0801582d 	.word	0x0801582d
 8015870:	080159bd 	.word	0x080159bd
 8015874:	080158e1 	.word	0x080158e1
 8015878:	0801599f 	.word	0x0801599f
 801587c:	0801582d 	.word	0x0801582d
 8015880:	0801582d 	.word	0x0801582d
 8015884:	080159df 	.word	0x080159df
 8015888:	0801582d 	.word	0x0801582d
 801588c:	080158e1 	.word	0x080158e1
 8015890:	0801582d 	.word	0x0801582d
 8015894:	0801582d 	.word	0x0801582d
 8015898:	080159a7 	.word	0x080159a7
 801589c:	680b      	ldr	r3, [r1, #0]
 801589e:	1d1a      	adds	r2, r3, #4
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	600a      	str	r2, [r1, #0]
 80158a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80158a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80158ac:	2301      	movs	r3, #1
 80158ae:	e0a3      	b.n	80159f8 <_printf_i+0x1f4>
 80158b0:	6825      	ldr	r5, [r4, #0]
 80158b2:	6808      	ldr	r0, [r1, #0]
 80158b4:	062e      	lsls	r6, r5, #24
 80158b6:	f100 0304 	add.w	r3, r0, #4
 80158ba:	d50a      	bpl.n	80158d2 <_printf_i+0xce>
 80158bc:	6805      	ldr	r5, [r0, #0]
 80158be:	600b      	str	r3, [r1, #0]
 80158c0:	2d00      	cmp	r5, #0
 80158c2:	da03      	bge.n	80158cc <_printf_i+0xc8>
 80158c4:	232d      	movs	r3, #45	; 0x2d
 80158c6:	426d      	negs	r5, r5
 80158c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80158cc:	485e      	ldr	r0, [pc, #376]	; (8015a48 <_printf_i+0x244>)
 80158ce:	230a      	movs	r3, #10
 80158d0:	e019      	b.n	8015906 <_printf_i+0x102>
 80158d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80158d6:	6805      	ldr	r5, [r0, #0]
 80158d8:	600b      	str	r3, [r1, #0]
 80158da:	bf18      	it	ne
 80158dc:	b22d      	sxthne	r5, r5
 80158de:	e7ef      	b.n	80158c0 <_printf_i+0xbc>
 80158e0:	680b      	ldr	r3, [r1, #0]
 80158e2:	6825      	ldr	r5, [r4, #0]
 80158e4:	1d18      	adds	r0, r3, #4
 80158e6:	6008      	str	r0, [r1, #0]
 80158e8:	0628      	lsls	r0, r5, #24
 80158ea:	d501      	bpl.n	80158f0 <_printf_i+0xec>
 80158ec:	681d      	ldr	r5, [r3, #0]
 80158ee:	e002      	b.n	80158f6 <_printf_i+0xf2>
 80158f0:	0669      	lsls	r1, r5, #25
 80158f2:	d5fb      	bpl.n	80158ec <_printf_i+0xe8>
 80158f4:	881d      	ldrh	r5, [r3, #0]
 80158f6:	4854      	ldr	r0, [pc, #336]	; (8015a48 <_printf_i+0x244>)
 80158f8:	2f6f      	cmp	r7, #111	; 0x6f
 80158fa:	bf0c      	ite	eq
 80158fc:	2308      	moveq	r3, #8
 80158fe:	230a      	movne	r3, #10
 8015900:	2100      	movs	r1, #0
 8015902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015906:	6866      	ldr	r6, [r4, #4]
 8015908:	60a6      	str	r6, [r4, #8]
 801590a:	2e00      	cmp	r6, #0
 801590c:	bfa2      	ittt	ge
 801590e:	6821      	ldrge	r1, [r4, #0]
 8015910:	f021 0104 	bicge.w	r1, r1, #4
 8015914:	6021      	strge	r1, [r4, #0]
 8015916:	b90d      	cbnz	r5, 801591c <_printf_i+0x118>
 8015918:	2e00      	cmp	r6, #0
 801591a:	d04d      	beq.n	80159b8 <_printf_i+0x1b4>
 801591c:	4616      	mov	r6, r2
 801591e:	fbb5 f1f3 	udiv	r1, r5, r3
 8015922:	fb03 5711 	mls	r7, r3, r1, r5
 8015926:	5dc7      	ldrb	r7, [r0, r7]
 8015928:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801592c:	462f      	mov	r7, r5
 801592e:	42bb      	cmp	r3, r7
 8015930:	460d      	mov	r5, r1
 8015932:	d9f4      	bls.n	801591e <_printf_i+0x11a>
 8015934:	2b08      	cmp	r3, #8
 8015936:	d10b      	bne.n	8015950 <_printf_i+0x14c>
 8015938:	6823      	ldr	r3, [r4, #0]
 801593a:	07df      	lsls	r7, r3, #31
 801593c:	d508      	bpl.n	8015950 <_printf_i+0x14c>
 801593e:	6923      	ldr	r3, [r4, #16]
 8015940:	6861      	ldr	r1, [r4, #4]
 8015942:	4299      	cmp	r1, r3
 8015944:	bfde      	ittt	le
 8015946:	2330      	movle	r3, #48	; 0x30
 8015948:	f806 3c01 	strble.w	r3, [r6, #-1]
 801594c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015950:	1b92      	subs	r2, r2, r6
 8015952:	6122      	str	r2, [r4, #16]
 8015954:	f8cd a000 	str.w	sl, [sp]
 8015958:	464b      	mov	r3, r9
 801595a:	aa03      	add	r2, sp, #12
 801595c:	4621      	mov	r1, r4
 801595e:	4640      	mov	r0, r8
 8015960:	f7ff fee2 	bl	8015728 <_printf_common>
 8015964:	3001      	adds	r0, #1
 8015966:	d14c      	bne.n	8015a02 <_printf_i+0x1fe>
 8015968:	f04f 30ff 	mov.w	r0, #4294967295
 801596c:	b004      	add	sp, #16
 801596e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015972:	4835      	ldr	r0, [pc, #212]	; (8015a48 <_printf_i+0x244>)
 8015974:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015978:	6823      	ldr	r3, [r4, #0]
 801597a:	680e      	ldr	r6, [r1, #0]
 801597c:	061f      	lsls	r7, r3, #24
 801597e:	f856 5b04 	ldr.w	r5, [r6], #4
 8015982:	600e      	str	r6, [r1, #0]
 8015984:	d514      	bpl.n	80159b0 <_printf_i+0x1ac>
 8015986:	07d9      	lsls	r1, r3, #31
 8015988:	bf44      	itt	mi
 801598a:	f043 0320 	orrmi.w	r3, r3, #32
 801598e:	6023      	strmi	r3, [r4, #0]
 8015990:	b91d      	cbnz	r5, 801599a <_printf_i+0x196>
 8015992:	6823      	ldr	r3, [r4, #0]
 8015994:	f023 0320 	bic.w	r3, r3, #32
 8015998:	6023      	str	r3, [r4, #0]
 801599a:	2310      	movs	r3, #16
 801599c:	e7b0      	b.n	8015900 <_printf_i+0xfc>
 801599e:	6823      	ldr	r3, [r4, #0]
 80159a0:	f043 0320 	orr.w	r3, r3, #32
 80159a4:	6023      	str	r3, [r4, #0]
 80159a6:	2378      	movs	r3, #120	; 0x78
 80159a8:	4828      	ldr	r0, [pc, #160]	; (8015a4c <_printf_i+0x248>)
 80159aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80159ae:	e7e3      	b.n	8015978 <_printf_i+0x174>
 80159b0:	065e      	lsls	r6, r3, #25
 80159b2:	bf48      	it	mi
 80159b4:	b2ad      	uxthmi	r5, r5
 80159b6:	e7e6      	b.n	8015986 <_printf_i+0x182>
 80159b8:	4616      	mov	r6, r2
 80159ba:	e7bb      	b.n	8015934 <_printf_i+0x130>
 80159bc:	680b      	ldr	r3, [r1, #0]
 80159be:	6826      	ldr	r6, [r4, #0]
 80159c0:	6960      	ldr	r0, [r4, #20]
 80159c2:	1d1d      	adds	r5, r3, #4
 80159c4:	600d      	str	r5, [r1, #0]
 80159c6:	0635      	lsls	r5, r6, #24
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	d501      	bpl.n	80159d0 <_printf_i+0x1cc>
 80159cc:	6018      	str	r0, [r3, #0]
 80159ce:	e002      	b.n	80159d6 <_printf_i+0x1d2>
 80159d0:	0671      	lsls	r1, r6, #25
 80159d2:	d5fb      	bpl.n	80159cc <_printf_i+0x1c8>
 80159d4:	8018      	strh	r0, [r3, #0]
 80159d6:	2300      	movs	r3, #0
 80159d8:	6123      	str	r3, [r4, #16]
 80159da:	4616      	mov	r6, r2
 80159dc:	e7ba      	b.n	8015954 <_printf_i+0x150>
 80159de:	680b      	ldr	r3, [r1, #0]
 80159e0:	1d1a      	adds	r2, r3, #4
 80159e2:	600a      	str	r2, [r1, #0]
 80159e4:	681e      	ldr	r6, [r3, #0]
 80159e6:	6862      	ldr	r2, [r4, #4]
 80159e8:	2100      	movs	r1, #0
 80159ea:	4630      	mov	r0, r6
 80159ec:	f7ea fbf8 	bl	80001e0 <memchr>
 80159f0:	b108      	cbz	r0, 80159f6 <_printf_i+0x1f2>
 80159f2:	1b80      	subs	r0, r0, r6
 80159f4:	6060      	str	r0, [r4, #4]
 80159f6:	6863      	ldr	r3, [r4, #4]
 80159f8:	6123      	str	r3, [r4, #16]
 80159fa:	2300      	movs	r3, #0
 80159fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a00:	e7a8      	b.n	8015954 <_printf_i+0x150>
 8015a02:	6923      	ldr	r3, [r4, #16]
 8015a04:	4632      	mov	r2, r6
 8015a06:	4649      	mov	r1, r9
 8015a08:	4640      	mov	r0, r8
 8015a0a:	47d0      	blx	sl
 8015a0c:	3001      	adds	r0, #1
 8015a0e:	d0ab      	beq.n	8015968 <_printf_i+0x164>
 8015a10:	6823      	ldr	r3, [r4, #0]
 8015a12:	079b      	lsls	r3, r3, #30
 8015a14:	d413      	bmi.n	8015a3e <_printf_i+0x23a>
 8015a16:	68e0      	ldr	r0, [r4, #12]
 8015a18:	9b03      	ldr	r3, [sp, #12]
 8015a1a:	4298      	cmp	r0, r3
 8015a1c:	bfb8      	it	lt
 8015a1e:	4618      	movlt	r0, r3
 8015a20:	e7a4      	b.n	801596c <_printf_i+0x168>
 8015a22:	2301      	movs	r3, #1
 8015a24:	4632      	mov	r2, r6
 8015a26:	4649      	mov	r1, r9
 8015a28:	4640      	mov	r0, r8
 8015a2a:	47d0      	blx	sl
 8015a2c:	3001      	adds	r0, #1
 8015a2e:	d09b      	beq.n	8015968 <_printf_i+0x164>
 8015a30:	3501      	adds	r5, #1
 8015a32:	68e3      	ldr	r3, [r4, #12]
 8015a34:	9903      	ldr	r1, [sp, #12]
 8015a36:	1a5b      	subs	r3, r3, r1
 8015a38:	42ab      	cmp	r3, r5
 8015a3a:	dcf2      	bgt.n	8015a22 <_printf_i+0x21e>
 8015a3c:	e7eb      	b.n	8015a16 <_printf_i+0x212>
 8015a3e:	2500      	movs	r5, #0
 8015a40:	f104 0619 	add.w	r6, r4, #25
 8015a44:	e7f5      	b.n	8015a32 <_printf_i+0x22e>
 8015a46:	bf00      	nop
 8015a48:	08015e4d 	.word	0x08015e4d
 8015a4c:	08015e5e 	.word	0x08015e5e

08015a50 <_sbrk_r>:
 8015a50:	b538      	push	{r3, r4, r5, lr}
 8015a52:	4d06      	ldr	r5, [pc, #24]	; (8015a6c <_sbrk_r+0x1c>)
 8015a54:	2300      	movs	r3, #0
 8015a56:	4604      	mov	r4, r0
 8015a58:	4608      	mov	r0, r1
 8015a5a:	602b      	str	r3, [r5, #0]
 8015a5c:	f7ec f90c 	bl	8001c78 <_sbrk>
 8015a60:	1c43      	adds	r3, r0, #1
 8015a62:	d102      	bne.n	8015a6a <_sbrk_r+0x1a>
 8015a64:	682b      	ldr	r3, [r5, #0]
 8015a66:	b103      	cbz	r3, 8015a6a <_sbrk_r+0x1a>
 8015a68:	6023      	str	r3, [r4, #0]
 8015a6a:	bd38      	pop	{r3, r4, r5, pc}
 8015a6c:	200073fc 	.word	0x200073fc

08015a70 <__sread>:
 8015a70:	b510      	push	{r4, lr}
 8015a72:	460c      	mov	r4, r1
 8015a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a78:	f000 f8a0 	bl	8015bbc <_read_r>
 8015a7c:	2800      	cmp	r0, #0
 8015a7e:	bfab      	itete	ge
 8015a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015a82:	89a3      	ldrhlt	r3, [r4, #12]
 8015a84:	181b      	addge	r3, r3, r0
 8015a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015a8a:	bfac      	ite	ge
 8015a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8015a8e:	81a3      	strhlt	r3, [r4, #12]
 8015a90:	bd10      	pop	{r4, pc}

08015a92 <__swrite>:
 8015a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a96:	461f      	mov	r7, r3
 8015a98:	898b      	ldrh	r3, [r1, #12]
 8015a9a:	05db      	lsls	r3, r3, #23
 8015a9c:	4605      	mov	r5, r0
 8015a9e:	460c      	mov	r4, r1
 8015aa0:	4616      	mov	r6, r2
 8015aa2:	d505      	bpl.n	8015ab0 <__swrite+0x1e>
 8015aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015aa8:	2302      	movs	r3, #2
 8015aaa:	2200      	movs	r2, #0
 8015aac:	f000 f868 	bl	8015b80 <_lseek_r>
 8015ab0:	89a3      	ldrh	r3, [r4, #12]
 8015ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015aba:	81a3      	strh	r3, [r4, #12]
 8015abc:	4632      	mov	r2, r6
 8015abe:	463b      	mov	r3, r7
 8015ac0:	4628      	mov	r0, r5
 8015ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ac6:	f000 b817 	b.w	8015af8 <_write_r>

08015aca <__sseek>:
 8015aca:	b510      	push	{r4, lr}
 8015acc:	460c      	mov	r4, r1
 8015ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ad2:	f000 f855 	bl	8015b80 <_lseek_r>
 8015ad6:	1c43      	adds	r3, r0, #1
 8015ad8:	89a3      	ldrh	r3, [r4, #12]
 8015ada:	bf15      	itete	ne
 8015adc:	6560      	strne	r0, [r4, #84]	; 0x54
 8015ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015ae6:	81a3      	strheq	r3, [r4, #12]
 8015ae8:	bf18      	it	ne
 8015aea:	81a3      	strhne	r3, [r4, #12]
 8015aec:	bd10      	pop	{r4, pc}

08015aee <__sclose>:
 8015aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015af2:	f000 b813 	b.w	8015b1c <_close_r>
	...

08015af8 <_write_r>:
 8015af8:	b538      	push	{r3, r4, r5, lr}
 8015afa:	4d07      	ldr	r5, [pc, #28]	; (8015b18 <_write_r+0x20>)
 8015afc:	4604      	mov	r4, r0
 8015afe:	4608      	mov	r0, r1
 8015b00:	4611      	mov	r1, r2
 8015b02:	2200      	movs	r2, #0
 8015b04:	602a      	str	r2, [r5, #0]
 8015b06:	461a      	mov	r2, r3
 8015b08:	f7ec f865 	bl	8001bd6 <_write>
 8015b0c:	1c43      	adds	r3, r0, #1
 8015b0e:	d102      	bne.n	8015b16 <_write_r+0x1e>
 8015b10:	682b      	ldr	r3, [r5, #0]
 8015b12:	b103      	cbz	r3, 8015b16 <_write_r+0x1e>
 8015b14:	6023      	str	r3, [r4, #0]
 8015b16:	bd38      	pop	{r3, r4, r5, pc}
 8015b18:	200073fc 	.word	0x200073fc

08015b1c <_close_r>:
 8015b1c:	b538      	push	{r3, r4, r5, lr}
 8015b1e:	4d06      	ldr	r5, [pc, #24]	; (8015b38 <_close_r+0x1c>)
 8015b20:	2300      	movs	r3, #0
 8015b22:	4604      	mov	r4, r0
 8015b24:	4608      	mov	r0, r1
 8015b26:	602b      	str	r3, [r5, #0]
 8015b28:	f7ec f871 	bl	8001c0e <_close>
 8015b2c:	1c43      	adds	r3, r0, #1
 8015b2e:	d102      	bne.n	8015b36 <_close_r+0x1a>
 8015b30:	682b      	ldr	r3, [r5, #0]
 8015b32:	b103      	cbz	r3, 8015b36 <_close_r+0x1a>
 8015b34:	6023      	str	r3, [r4, #0]
 8015b36:	bd38      	pop	{r3, r4, r5, pc}
 8015b38:	200073fc 	.word	0x200073fc

08015b3c <_fstat_r>:
 8015b3c:	b538      	push	{r3, r4, r5, lr}
 8015b3e:	4d07      	ldr	r5, [pc, #28]	; (8015b5c <_fstat_r+0x20>)
 8015b40:	2300      	movs	r3, #0
 8015b42:	4604      	mov	r4, r0
 8015b44:	4608      	mov	r0, r1
 8015b46:	4611      	mov	r1, r2
 8015b48:	602b      	str	r3, [r5, #0]
 8015b4a:	f7ec f86c 	bl	8001c26 <_fstat>
 8015b4e:	1c43      	adds	r3, r0, #1
 8015b50:	d102      	bne.n	8015b58 <_fstat_r+0x1c>
 8015b52:	682b      	ldr	r3, [r5, #0]
 8015b54:	b103      	cbz	r3, 8015b58 <_fstat_r+0x1c>
 8015b56:	6023      	str	r3, [r4, #0]
 8015b58:	bd38      	pop	{r3, r4, r5, pc}
 8015b5a:	bf00      	nop
 8015b5c:	200073fc 	.word	0x200073fc

08015b60 <_isatty_r>:
 8015b60:	b538      	push	{r3, r4, r5, lr}
 8015b62:	4d06      	ldr	r5, [pc, #24]	; (8015b7c <_isatty_r+0x1c>)
 8015b64:	2300      	movs	r3, #0
 8015b66:	4604      	mov	r4, r0
 8015b68:	4608      	mov	r0, r1
 8015b6a:	602b      	str	r3, [r5, #0]
 8015b6c:	f7ec f86b 	bl	8001c46 <_isatty>
 8015b70:	1c43      	adds	r3, r0, #1
 8015b72:	d102      	bne.n	8015b7a <_isatty_r+0x1a>
 8015b74:	682b      	ldr	r3, [r5, #0]
 8015b76:	b103      	cbz	r3, 8015b7a <_isatty_r+0x1a>
 8015b78:	6023      	str	r3, [r4, #0]
 8015b7a:	bd38      	pop	{r3, r4, r5, pc}
 8015b7c:	200073fc 	.word	0x200073fc

08015b80 <_lseek_r>:
 8015b80:	b538      	push	{r3, r4, r5, lr}
 8015b82:	4d07      	ldr	r5, [pc, #28]	; (8015ba0 <_lseek_r+0x20>)
 8015b84:	4604      	mov	r4, r0
 8015b86:	4608      	mov	r0, r1
 8015b88:	4611      	mov	r1, r2
 8015b8a:	2200      	movs	r2, #0
 8015b8c:	602a      	str	r2, [r5, #0]
 8015b8e:	461a      	mov	r2, r3
 8015b90:	f7ec f864 	bl	8001c5c <_lseek>
 8015b94:	1c43      	adds	r3, r0, #1
 8015b96:	d102      	bne.n	8015b9e <_lseek_r+0x1e>
 8015b98:	682b      	ldr	r3, [r5, #0]
 8015b9a:	b103      	cbz	r3, 8015b9e <_lseek_r+0x1e>
 8015b9c:	6023      	str	r3, [r4, #0]
 8015b9e:	bd38      	pop	{r3, r4, r5, pc}
 8015ba0:	200073fc 	.word	0x200073fc

08015ba4 <__malloc_lock>:
 8015ba4:	4801      	ldr	r0, [pc, #4]	; (8015bac <__malloc_lock+0x8>)
 8015ba6:	f7ff bb55 	b.w	8015254 <__retarget_lock_acquire_recursive>
 8015baa:	bf00      	nop
 8015bac:	200073f4 	.word	0x200073f4

08015bb0 <__malloc_unlock>:
 8015bb0:	4801      	ldr	r0, [pc, #4]	; (8015bb8 <__malloc_unlock+0x8>)
 8015bb2:	f7ff bb50 	b.w	8015256 <__retarget_lock_release_recursive>
 8015bb6:	bf00      	nop
 8015bb8:	200073f4 	.word	0x200073f4

08015bbc <_read_r>:
 8015bbc:	b538      	push	{r3, r4, r5, lr}
 8015bbe:	4d07      	ldr	r5, [pc, #28]	; (8015bdc <_read_r+0x20>)
 8015bc0:	4604      	mov	r4, r0
 8015bc2:	4608      	mov	r0, r1
 8015bc4:	4611      	mov	r1, r2
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	602a      	str	r2, [r5, #0]
 8015bca:	461a      	mov	r2, r3
 8015bcc:	f7eb ffe6 	bl	8001b9c <_read>
 8015bd0:	1c43      	adds	r3, r0, #1
 8015bd2:	d102      	bne.n	8015bda <_read_r+0x1e>
 8015bd4:	682b      	ldr	r3, [r5, #0]
 8015bd6:	b103      	cbz	r3, 8015bda <_read_r+0x1e>
 8015bd8:	6023      	str	r3, [r4, #0]
 8015bda:	bd38      	pop	{r3, r4, r5, pc}
 8015bdc:	200073fc 	.word	0x200073fc

08015be0 <_init>:
 8015be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015be2:	bf00      	nop
 8015be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015be6:	bc08      	pop	{r3}
 8015be8:	469e      	mov	lr, r3
 8015bea:	4770      	bx	lr

08015bec <_fini>:
 8015bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bee:	bf00      	nop
 8015bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015bf2:	bc08      	pop	{r3}
 8015bf4:	469e      	mov	lr, r3
 8015bf6:	4770      	bx	lr
