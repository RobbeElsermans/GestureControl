
singleGestureControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000151d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08015370  08015370  00025370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080155dc  080155dc  000300e4  2**0
                  CONTENTS
  4 .ARM          00000008  080155dc  080155dc  000255dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080155e4  080155e4  000300e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080155e4  080155e4  000255e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080155e8  080155e8  000255e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  080155ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007220  200000e8  080156d0  000300e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007308  080156d0  00037308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00066b02  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d33  00000000  00000000  00096c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  0009c950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001860  00000000  00000000  0009e3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020944  00000000  00000000  0009fc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002611b  00000000  00000000  000c0544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7cb9  00000000  00000000  000e665f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019e318  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076cc  00000000  00000000  0019e36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e8 	.word	0x200000e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015358 	.word	0x08015358

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ec 	.word	0x200000ec
 80001dc:	08015358 	.word	0x08015358

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9b9 	b.w	8000614 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <MX_TOF_Init>:
static void stop_sensor(uint8_t sensor);
static void getResult(uint8_t sensor, RANGING_SENSOR_Result_t * result);
static long getDistance(uint8_t sensor, RANGING_SENSOR_Result_t * result);

void MX_TOF_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L3A2_MultiSensorRanging_Init();
 800061c:	f000 f99a 	bl	8000954 <MX_53L3A2_MultiSensorRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b0c4      	sub	sp, #272	; 0x110
 8000628:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN TOF_Process_PreTreatment */
	RANGING_SENSOR_Result_t Result[3];
	int dis0 = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	int dis1 = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	int dis2 = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	int threshold = 1000;
 800063c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000640:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	int minDistanceObject = 300;
 8000644:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000648:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	int maxDistanceObject = 1000;
 800064c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000650:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	float timerMeasurment = 0;
 8000654:	f04f 0300 	mov.w	r3, #0
 8000658:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	bool timerMeasurementSet = false;
 800065c:	2300      	movs	r3, #0
 800065e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	int timerMeasurmentTimeout = 2000; //2 seconden
 8000662:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000666:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	bool ObjectPresent = false;
 800066a:	2300      	movs	r3, #0
 800066c:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
	  //Enkel de 1ste sensor (Center) opstarten
	  /*	Hier zeggen we welk profiel we willen gebruiken
	   * 	bv.
	   *
	   */
	start_sensor(VL53L3A2_DEV_CENTER);
 8000670:	2001      	movs	r0, #1
 8000672:	f000 f9d3 	bl	8000a1c <start_sensor>

  //MX_53L3A2_MultiSensorRanging_Process();

  /* USER CODE BEGIN TOF_Process_PostTreatment */
	while(1){
		HAL_Delay(100);
 8000676:	2064      	movs	r0, #100	; 0x64
 8000678:	f011 fb2c 	bl	8011cd4 <HAL_Delay>
		getResult(VL53L3A2_DEV_CENTER, Result);
 800067c:	463b      	mov	r3, r7
 800067e:	4619      	mov	r1, r3
 8000680:	2001      	movs	r0, #1
 8000682:	f000 fa33 	bl	8000aec <getResult>
		dis1 = getDistance(VL53L3A2_DEV_CENTER, Result);
 8000686:	463b      	mov	r3, r7
 8000688:	4619      	mov	r1, r3
 800068a:	2001      	movs	r0, #1
 800068c:	f000 fa44 	bl	8000b18 <getDistance>
 8000690:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8

		if(ObjectPresent)
 8000694:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8000698:	2b00      	cmp	r3, #0
 800069a:	d017      	beq.n	80006cc <MX_TOF_Process+0xa8>
		{
			getResult(VL53L3A2_DEV_LEFT, Result);
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	2000      	movs	r0, #0
 80006a2:	f000 fa23 	bl	8000aec <getResult>
			dis0 = getDistance(VL53L3A2_DEV_LEFT, Result);
 80006a6:	463b      	mov	r3, r7
 80006a8:	4619      	mov	r1, r3
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 fa34 	bl	8000b18 <getDistance>
 80006b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

			getResult(VL53L3A2_DEV_RIGHT, Result);
 80006b4:	463b      	mov	r3, r7
 80006b6:	4619      	mov	r1, r3
 80006b8:	2002      	movs	r0, #2
 80006ba:	f000 fa17 	bl	8000aec <getResult>
			dis2 = getDistance(VL53L3A2_DEV_RIGHT, Result);
 80006be:	463b      	mov	r3, r7
 80006c0:	4619      	mov	r1, r3
 80006c2:	2002      	movs	r0, #2
 80006c4:	f000 fa28 	bl	8000b18 <getDistance>
 80006c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
		}
		//Bug van 1ste meeting dat deze fout is (Een te hoge waarden)
		if(dis1 >= 17760520)
 80006cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80006d0:	4a96      	ldr	r2, [pc, #600]	; (800092c <MX_TOF_Process+0x308>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	dd0b      	ble.n	80006ee <MX_TOF_Process+0xca>
		{
			HAL_Delay(4);
 80006d6:	2004      	movs	r0, #4
 80006d8:	f011 fafc 	bl	8011cd4 <HAL_Delay>
			getResult(VL53L3A2_DEV_CENTER, Result);
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	2001      	movs	r0, #1
 80006e2:	f000 fa03 	bl	8000aec <getResult>
			dis1 = (long)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Distance[0];
 80006e6:	463b      	mov	r3, r7
 80006e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80006ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		}

		  /*	als dist1 onder de 1000 mm komt voor 3 seconden, dan is er een object.
		   * 	+ er mag geen foutcode 12 zijn
		   */
		if((dis1 <= maxDistanceObject) && (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Status[0] != 12 && !ObjectPresent){
 80006ee:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80006f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80006f6:	429a      	cmp	r2, r3
 80006f8:	dc54      	bgt.n	80007a4 <MX_TOF_Process+0x180>
 80006fa:	463b      	mov	r3, r7
 80006fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b0c      	cmp	r3, #12
 8000702:	d04f      	beq.n	80007a4 <MX_TOF_Process+0x180>
 8000704:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8000708:	f083 0301 	eor.w	r3, r3, #1
 800070c:	b2db      	uxtb	r3, r3
 800070e:	2b00      	cmp	r3, #0
 8000710:	d048      	beq.n	80007a4 <MX_TOF_Process+0x180>
			if(!timerMeasurementSet){
 8000712:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000716:	f083 0301 	eor.w	r3, r3, #1
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b00      	cmp	r3, #0
 800071e:	d016      	beq.n	800074e <MX_TOF_Process+0x12a>
				timerMeasurementSet = true;
 8000720:	2301      	movs	r3, #1
 8000722:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				timerMeasurment = HAL_GetTick();
 8000726:	f011 fac9 	bl	8011cbc <HAL_GetTick>
 800072a:	ee07 0a90 	vmov	s15, r0
 800072e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000732:	edc7 7a3c 	vstr	s15, [r7, #240]	; 0xf0
				printf("Timer object %d ", timerMeasurementSet);
 8000736:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800073a:	4619      	mov	r1, r3
 800073c:	487c      	ldr	r0, [pc, #496]	; (8000930 <MX_TOF_Process+0x30c>)
 800073e:	f013 fe2b 	bl	8014398 <iprintf>
				printf("Timer object is set");
 8000742:	487c      	ldr	r0, [pc, #496]	; (8000934 <MX_TOF_Process+0x310>)
 8000744:	f013 fe28 	bl	8014398 <iprintf>
				printf("\r\n");
 8000748:	487b      	ldr	r0, [pc, #492]	; (8000938 <MX_TOF_Process+0x314>)
 800074a:	f013 feab 	bl	80144a4 <puts>
			}
			if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 800074e:	f011 fab5 	bl	8011cbc <HAL_GetTick>
 8000752:	ee07 0a90 	vmov	s15, r0
 8000756:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800075a:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 800075e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000766:	ee07 3a90 	vmov	s15, r3
 800076a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800076e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000776:	db2c      	blt.n	80007d2 <MX_TOF_Process+0x1ae>
			{
				timerMeasurementSet = false;
 8000778:	2300      	movs	r3, #0
 800077a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

				//Persoon naderd en staat dicht genoeg
				//Start andere sensoren ook op
				ObjectPresent = true;
 800077e:	2301      	movs	r3, #1
 8000780:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
				start_sensor(VL53L3A2_DEV_LEFT);
 8000784:	2000      	movs	r0, #0
 8000786:	f000 f949 	bl	8000a1c <start_sensor>
				start_sensor(VL53L3A2_DEV_RIGHT);
 800078a:	2002      	movs	r0, #2
 800078c:	f000 f946 	bl	8000a1c <start_sensor>

				printf("Object %d", ObjectPresent);
 8000790:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8000794:	4619      	mov	r1, r3
 8000796:	4869      	ldr	r0, [pc, #420]	; (800093c <MX_TOF_Process+0x318>)
 8000798:	f013 fdfe 	bl	8014398 <iprintf>
				printf("\r\n");
 800079c:	4866      	ldr	r0, [pc, #408]	; (8000938 <MX_TOF_Process+0x314>)
 800079e:	f013 fe81 	bl	80144a4 <puts>
			if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 80007a2:	e016      	b.n	80007d2 <MX_TOF_Process+0x1ae>
			}
		}
		else
		{
			if(timerMeasurementSet && !ObjectPresent){
 80007a4:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d012      	beq.n	80007d2 <MX_TOF_Process+0x1ae>
 80007ac:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 80007b0:	f083 0301 	eor.w	r3, r3, #1
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d00b      	beq.n	80007d2 <MX_TOF_Process+0x1ae>
				timerMeasurementSet = false;
 80007ba:	2300      	movs	r3, #0
 80007bc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				printf("Timer object %d ", timerMeasurementSet);
 80007c0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80007c4:	4619      	mov	r1, r3
 80007c6:	485a      	ldr	r0, [pc, #360]	; (8000930 <MX_TOF_Process+0x30c>)
 80007c8:	f013 fde6 	bl	8014398 <iprintf>
				printf("\r\n");
 80007cc:	485a      	ldr	r0, [pc, #360]	; (8000938 <MX_TOF_Process+0x314>)
 80007ce:	f013 fe69 	bl	80144a4 <puts>
			}
		}


		if( (dis1 >= maxDistanceObject) && ObjectPresent){
 80007d2:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80007d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80007da:	429a      	cmp	r2, r3
 80007dc:	db4f      	blt.n	800087e <MX_TOF_Process+0x25a>
 80007de:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d04b      	beq.n	800087e <MX_TOF_Process+0x25a>

			if(timerMeasurementSet == false){
 80007e6:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80007ea:	f083 0301 	eor.w	r3, r3, #1
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d016      	beq.n	8000822 <MX_TOF_Process+0x1fe>
				timerMeasurementSet = true;
 80007f4:	2301      	movs	r3, #1
 80007f6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				timerMeasurment = HAL_GetTick();
 80007fa:	f011 fa5f 	bl	8011cbc <HAL_GetTick>
 80007fe:	ee07 0a90 	vmov	s15, r0
 8000802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000806:	edc7 7a3c 	vstr	s15, [r7, #240]	; 0xf0
				printf("Timer no object %d ", timerMeasurementSet);
 800080a:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800080e:	4619      	mov	r1, r3
 8000810:	484b      	ldr	r0, [pc, #300]	; (8000940 <MX_TOF_Process+0x31c>)
 8000812:	f013 fdc1 	bl	8014398 <iprintf>
				printf("Timer no object is set");
 8000816:	484b      	ldr	r0, [pc, #300]	; (8000944 <MX_TOF_Process+0x320>)
 8000818:	f013 fdbe 	bl	8014398 <iprintf>
				printf("\r\n");
 800081c:	4846      	ldr	r0, [pc, #280]	; (8000938 <MX_TOF_Process+0x314>)
 800081e:	f013 fe41 	bl	80144a4 <puts>
			}

			if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 8000822:	f011 fa4b 	bl	8011cbc <HAL_GetTick>
 8000826:	ee07 0a90 	vmov	s15, r0
 800082a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800082e:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 8000832:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800083a:	ee07 3a90 	vmov	s15, r3
 800083e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000842:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800084a:	db2c      	blt.n	80008a6 <MX_TOF_Process+0x282>
			{
				timerMeasurementSet = false;
 800084c:	2300      	movs	r3, #0
 800084e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

				ObjectPresent = false;
 8000852:	2300      	movs	r3, #0
 8000854:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
				stop_sensor(VL53L3A2_DEV_LEFT);
 8000858:	2000      	movs	r0, #0
 800085a:	f000 f91f 	bl	8000a9c <stop_sensor>
				stop_sensor(VL53L3A2_DEV_RIGHT);
 800085e:	2002      	movs	r0, #2
 8000860:	f000 f91c 	bl	8000a9c <stop_sensor>
				HAL_Delay(10);
 8000864:	200a      	movs	r0, #10
 8000866:	f011 fa35 	bl	8011cd4 <HAL_Delay>
				printf("Object %d", ObjectPresent);
 800086a:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800086e:	4619      	mov	r1, r3
 8000870:	4832      	ldr	r0, [pc, #200]	; (800093c <MX_TOF_Process+0x318>)
 8000872:	f013 fd91 	bl	8014398 <iprintf>
				printf("\r\n");
 8000876:	4830      	ldr	r0, [pc, #192]	; (8000938 <MX_TOF_Process+0x314>)
 8000878:	f013 fe14 	bl	80144a4 <puts>
			if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 800087c:	e013      	b.n	80008a6 <MX_TOF_Process+0x282>
			}
		}
		else
		{
			if(timerMeasurementSet && ObjectPresent){
 800087e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000882:	2b00      	cmp	r3, #0
 8000884:	d00f      	beq.n	80008a6 <MX_TOF_Process+0x282>
 8000886:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800088a:	2b00      	cmp	r3, #0
 800088c:	d00b      	beq.n	80008a6 <MX_TOF_Process+0x282>
				timerMeasurementSet = false;
 800088e:	2300      	movs	r3, #0
 8000890:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				printf("Timer no object %d ", timerMeasurementSet);
 8000894:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000898:	4619      	mov	r1, r3
 800089a:	4829      	ldr	r0, [pc, #164]	; (8000940 <MX_TOF_Process+0x31c>)
 800089c:	f013 fd7c 	bl	8014398 <iprintf>
				printf("\r\n");
 80008a0:	4825      	ldr	r0, [pc, #148]	; (8000938 <MX_TOF_Process+0x314>)
 80008a2:	f013 fdff 	bl	80144a4 <puts>

		  //Ticks
		  // long x = HAL_GetTick();
		  //printf("Ticks: %ld ", x);

		if(!ObjectPresent){
 80008a6:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 80008aa:	f083 0301 	eor.w	r3, r3, #1
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d008      	beq.n	80008c6 <MX_TOF_Process+0x2a2>
			printf(" %d ",dis1);
 80008b4:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80008b8:	4823      	ldr	r0, [pc, #140]	; (8000948 <MX_TOF_Process+0x324>)
 80008ba:	f013 fd6d 	bl	8014398 <iprintf>
			printf("\r\n");
 80008be:	481e      	ldr	r0, [pc, #120]	; (8000938 <MX_TOF_Process+0x314>)
 80008c0:	f013 fdf0 	bl	80144a4 <puts>
 80008c4:	e022      	b.n	800090c <MX_TOF_Process+0x2e8>
		}
		else{
			uint8_t obj0 = (uint8_t)Result[VL53L3A2_DEV_LEFT].ZoneResult[0].NumberOfTargets;
 80008c6:	463b      	mov	r3, r7
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
			uint8_t obj1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].NumberOfTargets;
 80008ce:	463b      	mov	r3, r7
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
			uint8_t obj2 = (uint8_t)Result[VL53L3A2_DEV_RIGHT].ZoneResult[0].NumberOfTargets;
 80008d6:	463b      	mov	r3, r7
 80008d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008dc:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
			printf("left: %d obj: %d \t center: %d obj: %d \t right: %d obj: %d",dis0,obj0,dis1,obj1,dis2,obj2);
 80008e0:	f897 10db 	ldrb.w	r1, [r7, #219]	; 0xdb
 80008e4:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80008e8:	f897 20d9 	ldrb.w	r2, [r7, #217]	; 0xd9
 80008ec:	9202      	str	r2, [sp, #8]
 80008ee:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80008f2:	9201      	str	r2, [sp, #4]
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80008fa:	460a      	mov	r2, r1
 80008fc:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8000900:	4812      	ldr	r0, [pc, #72]	; (800094c <MX_TOF_Process+0x328>)
 8000902:	f013 fd49 	bl	8014398 <iprintf>
			printf("\r\n");
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_TOF_Process+0x314>)
 8000908:	f013 fdcc 	bl	80144a4 <puts>
		}

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, ObjectPresent);
 800090c:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8000910:	461a      	mov	r2, r3
 8000912:	2120      	movs	r1, #32
 8000914:	480e      	ldr	r0, [pc, #56]	; (8000950 <MX_TOF_Process+0x32c>)
 8000916:	f011 fd67 	bl	80123e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_O_GPIO_Port, L_O_Pin, ObjectPresent);
 800091a:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800091e:	461a      	mov	r2, r3
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	480b      	ldr	r0, [pc, #44]	; (8000950 <MX_TOF_Process+0x32c>)
 8000924:	f011 fd60 	bl	80123e8 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000928:	e6a5      	b.n	8000676 <MX_TOF_Process+0x52>
 800092a:	bf00      	nop
 800092c:	010f0107 	.word	0x010f0107
 8000930:	08015388 	.word	0x08015388
 8000934:	0801539c 	.word	0x0801539c
 8000938:	080153b0 	.word	0x080153b0
 800093c:	080153b4 	.word	0x080153b4
 8000940:	080153c0 	.word	0x080153c0
 8000944:	080153d4 	.word	0x080153d4
 8000948:	080153ec 	.word	0x080153ec
 800094c:	080153f4 	.word	0x080153f4
 8000950:	40020000 	.word	0x40020000

08000954 <MX_53L3A2_MultiSensorRanging_Init>:
	  }
  /* USER CODE END TOF_Process_PostTreatment */
}

static void MX_53L3A2_MultiSensorRanging_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  uint8_t device;
  uint16_t i2c_addr;
  uint32_t id;

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800095a:	2000      	movs	r0, #0
 800095c:	f000 faba 	bl	8000ed4 <BSP_COM_Init>

  printf("53L3A2 Gesture Control\r\n");
 8000960:	482a      	ldr	r0, [pc, #168]	; (8000a0c <MX_53L3A2_MultiSensorRanging_Init+0xb8>)
 8000962:	f013 fd9f 	bl	80144a4 <puts>

  /* put all the devices in shutdown mode */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8000966:	2300      	movs	r3, #0
 8000968:	71fb      	strb	r3, [r7, #7]
 800096a:	e007      	b.n	800097c <MX_53L3A2_MultiSensorRanging_Init+0x28>
  {
    VL53L3A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_OFF);
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2101      	movs	r1, #1
 8000970:	4618      	mov	r0, r3
 8000972:	f001 f8a1 	bl	8001ab8 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	3301      	adds	r3, #1
 800097a:	71fb      	strb	r3, [r7, #7]
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d9f4      	bls.n	800096c <MX_53L3A2_MultiSensorRanging_Init+0x18>

  /* power on the devices one at a time, initialize them and change their address.
   * once the address is updated, the communication with the devices is checked
   * reading its ID.
   */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8000982:	2300      	movs	r3, #0
 8000984:	71fb      	strb	r3, [r7, #7]
 8000986:	e039      	b.n	80009fc <MX_53L3A2_MultiSensorRanging_Init+0xa8>
  {
    VL53L3A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_ON);
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f001 f893 	bl	8001ab8 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
    status = VL53L3A2_RANGING_SENSOR_Init(device);
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 ff7b 	bl	8001890 <VL53L3A2_RANGING_SENSOR_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	4a1c      	ldr	r2, [pc, #112]	; (8000a10 <MX_53L3A2_MultiSensorRanging_Init+0xbc>)
 800099e:	6013      	str	r3, [r2, #0]

    /* 0: not detected, 1: detected */
    ToF_Present[device] = (status != BSP_ERROR_NONE) ? 0 : 1;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MX_53L3A2_MultiSensorRanging_Init+0xbc>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	bf0c      	ite	eq
 80009a8:	2301      	moveq	r3, #1
 80009aa:	2300      	movne	r3, #0
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	4611      	mov	r1, r2
 80009b2:	4a18      	ldr	r2, [pc, #96]	; (8000a14 <MX_53L3A2_MultiSensorRanging_Init+0xc0>)
 80009b4:	54d1      	strb	r1, [r2, r3]

    /* skip this device if init not successful */
    if (ToF_Present[device] == 0) continue;
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <MX_53L3A2_MultiSensorRanging_Init+0xc0>)
 80009ba:	5cd3      	ldrb	r3, [r2, r3]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d019      	beq.n	80009f4 <MX_53L3A2_MultiSensorRanging_Init+0xa0>

    /* left: 0x54, center: 0x56, right: 0x58 */
    i2c_addr = (RANGING_SENSOR_VL53L3CX_ADDRESS + (device + 1) * 2);
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	3301      	adds	r3, #1
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	3329      	adds	r3, #41	; 0x29
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	80bb      	strh	r3, [r7, #4]
    VL53L3A2_RANGING_SENSOR_SetAddress(device, i2c_addr);
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	88ba      	ldrh	r2, [r7, #4]
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 f847 	bl	8001a68 <VL53L3A2_RANGING_SENSOR_SetAddress>

    /* check the communication with the device reading the ID */
    VL53L3A2_RANGING_SENSOR_ReadID(device, &id);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	463a      	mov	r2, r7
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 ff7b 	bl	80018dc <VL53L3A2_RANGING_SENSOR_ReadID>
    printf("ToF sensor %d - ID: %04lX\r\n", device, (unsigned long)id);
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	4619      	mov	r1, r3
 80009ec:	480a      	ldr	r0, [pc, #40]	; (8000a18 <MX_53L3A2_MultiSensorRanging_Init+0xc4>)
 80009ee:	f013 fcd3 	bl	8014398 <iprintf>
 80009f2:	e000      	b.n	80009f6 <MX_53L3A2_MultiSensorRanging_Init+0xa2>
    if (ToF_Present[device] == 0) continue;
 80009f4:	bf00      	nop
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	3301      	adds	r3, #1
 80009fa:	71fb      	strb	r3, [r7, #7]
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d9c2      	bls.n	8000988 <MX_53L3A2_MultiSensorRanging_Init+0x34>
  }
}
 8000a02:	bf00      	nop
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	08015430 	.word	0x08015430
 8000a10:	20000104 	.word	0x20000104
 8000a14:	20000108 	.word	0x20000108
 8000a18:	08015448 	.word	0x08015448

08000a1c <start_sensor>:
      (long)Result->ZoneResult[i].Distance[0]);
  }
  printf ("\r\n");
}

static void start_sensor(uint8_t sensor){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
	RANGING_SENSOR_ProfileConfig_t Profile;

	Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 8000a26:	2302      	movs	r3, #2
 8000a28:	60fb      	str	r3, [r7, #12]
	Profile.TimingBudget = 30; /* 16 ms < TimingBudget < 500 ms */
 8000a2a:	231e      	movs	r3, #30
 8000a2c:	613b      	str	r3, [r7, #16]
	Profile.Frequency = 0; /* not necessary in simple ranging */
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
	Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
 8000a32:	2301      	movs	r3, #1
 8000a34:	61bb      	str	r3, [r7, #24]
	Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 8000a36:	2301      	movs	r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]

	VL53L3A2_RANGING_SENSOR_ConfigProfile(sensor, &Profile);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	f107 020c 	add.w	r2, r7, #12
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 ff72 	bl	800192c <VL53L3A2_RANGING_SENSOR_ConfigProfile>
	status = VL53L3A2_RANGING_SENSOR_Start(sensor, RS_MODE_BLOCKING_CONTINUOUS);
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 ffbd 	bl	80019cc <VL53L3A2_RANGING_SENSOR_Start>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <start_sensor+0x70>)
 8000a56:	6013      	str	r3, [r2, #0]
    if (status != BSP_ERROR_NONE)
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <start_sensor+0x70>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d008      	beq.n	8000a72 <start_sensor+0x56>
    {
    	printf("VL53L3A2_RANGING_SENSOR_Start failed for sensor %s \r\n", TofDevStr[sensor]);
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <start_sensor+0x74>)
 8000a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480a      	ldr	r0, [pc, #40]	; (8000a94 <start_sensor+0x78>)
 8000a6c:	f013 fc94 	bl	8014398 <iprintf>
		while(1);
 8000a70:	e7fe      	b.n	8000a70 <start_sensor+0x54>
    }
    else
	{
    	printf("sensor %s\t opgestart \r\n", TofDevStr[sensor]);
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <start_sensor+0x74>)
 8000a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4806      	ldr	r0, [pc, #24]	; (8000a98 <start_sensor+0x7c>)
 8000a7e:	f013 fc8b 	bl	8014398 <iprintf>
	}
}
 8000a82:	bf00      	nop
 8000a84:	3720      	adds	r7, #32
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000104 	.word	0x20000104
 8000a90:	20000000 	.word	0x20000000
 8000a94:	08015490 	.word	0x08015490
 8000a98:	080154c8 	.word	0x080154c8

08000a9c <stop_sensor>:

static void stop_sensor(uint8_t sensor){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	status = VL53L3A2_RANGING_SENSOR_Stop(sensor);
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 ffb7 	bl	8001a1c <VL53L3A2_RANGING_SENSOR_Stop>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <stop_sensor+0x40>)
 8000ab2:	6013      	str	r3, [r2, #0]
    if (status != BSP_ERROR_NONE)
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <stop_sensor+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <stop_sensor+0x28>
    {
    	printf("VL53L3A2_RANGING_SENSOR_Stop failed\r\n");
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <stop_sensor+0x44>)
 8000abe:	f013 fcf1 	bl	80144a4 <puts>
		while(1);
 8000ac2:	e7fe      	b.n	8000ac2 <stop_sensor+0x26>
    }
    else
	{
    	printf("sensor %s\t afgezet \r\n", TofDevStr[sensor]);
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <stop_sensor+0x48>)
 8000ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <stop_sensor+0x4c>)
 8000ad0:	f013 fc62 	bl	8014398 <iprintf>
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000104 	.word	0x20000104
 8000ae0:	080154e0 	.word	0x080154e0
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	08015508 	.word	0x08015508

08000aec <getResult>:

static void getResult(uint8_t sensor, RANGING_SENSOR_Result_t *result){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
	VL53L3A2_RANGING_SENSOR_GetDistance(sensor, &result[sensor]);
 8000af8:	79f8      	ldrb	r0, [r7, #7]
 8000afa:	79fa      	ldrb	r2, [r7, #7]
 8000afc:	4613      	mov	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	4413      	add	r3, r2
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	461a      	mov	r2, r3
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	4413      	add	r3, r2
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f000 ff36 	bl	800197c <VL53L3A2_RANGING_SENSOR_GetDistance>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <getDistance>:

static long getDistance(uint8_t sensor, RANGING_SENSOR_Result_t * result){
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
	long distance = (long)result[sensor].ZoneResult[0].Distance[0];
 8000b24:	79fa      	ldrb	r2, [r7, #7]
 8000b26:	4613      	mov	r3, r2
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	4413      	add	r3, r2
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	60fb      	str	r3, [r7, #12]
	return distance;
 8000b38:	68fb      	ldr	r3, [r7, #12]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4a:	f011 f851 	bl	8011bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4e:	f000 f809 	bl	8000b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b52:	f000 f89d 	bl	8000c90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b56:	f000 f871 	bl	8000c3c <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  MX_TOF_Init();
 8000b5a:	f7ff fd5d 	bl	8000618 <MX_TOF_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_TOF_Process();
 8000b5e:	f7ff fd61 	bl	8000624 <MX_TOF_Process>
 8000b62:	e7fc      	b.n	8000b5e <main+0x18>

08000b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b094      	sub	sp, #80	; 0x50
 8000b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6a:	f107 0320 	add.w	r3, r7, #32
 8000b6e:	2230      	movs	r2, #48	; 0x30
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f013 fc08 	bl	8014388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <SystemClock_Config+0xd0>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	4a28      	ldr	r2, [pc, #160]	; (8000c34 <SystemClock_Config+0xd0>)
 8000b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b96:	6413      	str	r3, [r2, #64]	; 0x40
 8000b98:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <SystemClock_Config+0xd0>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <SystemClock_Config+0xd4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bb0:	4a21      	ldr	r2, [pc, #132]	; (8000c38 <SystemClock_Config+0xd4>)
 8000bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <SystemClock_Config+0xd4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bcc:	2310      	movs	r3, #16
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bd8:	2310      	movs	r3, #16
 8000bda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bdc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000be0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000be2:	2304      	movs	r3, #4
 8000be4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000be6:	2307      	movs	r3, #7
 8000be8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bea:	f107 0320 	add.w	r3, r7, #32
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f012 fc08 	bl	8013404 <HAL_RCC_OscConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bfa:	f000 f8cb 	bl	8000d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	230f      	movs	r3, #15
 8000c00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c02:	2302      	movs	r3, #2
 8000c04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f012 fe6a 	bl	80138f4 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c26:	f000 f8b5 	bl	8000d94 <Error_Handler>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3750      	adds	r7, #80	; 0x50
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40007000 	.word	0x40007000

08000c3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <MX_USART2_UART_Init+0x50>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_USART2_UART_Init+0x4c>)
 8000c74:	f013 f83a 	bl	8013cec <HAL_UART_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c7e:	f000 f889 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200070b0 	.word	0x200070b0
 8000c8c:	40004400 	.word	0x40004400

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b37      	ldr	r3, [pc, #220]	; (8000d88 <MX_GPIO_Init+0xf8>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a36      	ldr	r2, [pc, #216]	; (8000d88 <MX_GPIO_Init+0xf8>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b34      	ldr	r3, [pc, #208]	; (8000d88 <MX_GPIO_Init+0xf8>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <MX_GPIO_Init+0xf8>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a2f      	ldr	r2, [pc, #188]	; (8000d88 <MX_GPIO_Init+0xf8>)
 8000ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <MX_GPIO_Init+0xf8>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <MX_GPIO_Init+0xf8>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a28      	ldr	r2, [pc, #160]	; (8000d88 <MX_GPIO_Init+0xf8>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <MX_GPIO_Init+0xf8>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <MX_GPIO_Init+0xf8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a21      	ldr	r2, [pc, #132]	; (8000d88 <MX_GPIO_Init+0xf8>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <MX_GPIO_Init+0xf8>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2120      	movs	r1, #32
 8000d1a:	481c      	ldr	r0, [pc, #112]	; (8000d8c <MX_GPIO_Init+0xfc>)
 8000d1c:	f011 fb64 	bl	80123e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L_O_GPIO_Port, L_O_Pin, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2180      	movs	r1, #128	; 0x80
 8000d24:	4819      	ldr	r0, [pc, #100]	; (8000d8c <MX_GPIO_Init+0xfc>)
 8000d26:	f011 fb5f 	bl	80123e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d30:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4813      	ldr	r0, [pc, #76]	; (8000d90 <MX_GPIO_Init+0x100>)
 8000d42:	f011 f8d1 	bl	8011ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d46:	2320      	movs	r3, #32
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480b      	ldr	r0, [pc, #44]	; (8000d8c <MX_GPIO_Init+0xfc>)
 8000d5e:	f011 f8c3 	bl	8011ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_O_Pin */
   GPIO_InitStruct.Pin = L_O_Pin;
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(L_O_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_GPIO_Init+0xfc>)
 8000d7a:	f011 f8b5 	bl	8011ee8 <HAL_GPIO_Init>

}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	; 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40020800 	.word	0x40020800

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a0f      	ldr	r2, [pc, #60]	; (8000dec <HAL_MspInit+0x4c>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HAL_MspInit+0x4c>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_MspInit+0x4c>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_MspInit+0x4c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dde:	2007      	movs	r0, #7
 8000de0:	f011 f84e 	bl	8011e80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800

08000df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <HAL_UART_MspInit+0x84>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d12b      	bne.n	8000e6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <HAL_UART_MspInit+0x88>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <HAL_UART_MspInit+0x88>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_UART_MspInit+0x88>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_UART_MspInit+0x88>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <HAL_UART_MspInit+0x88>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_UART_MspInit+0x88>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <HAL_UART_MspInit+0x8c>)
 8000e66:	f011 f83f 	bl	8011ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3728      	adds	r7, #40	; 0x28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40004400 	.word	0x40004400
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <NMI_Handler+0x4>

08000e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <MemManage_Handler+0x4>

08000e92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <UsageFault_Handler+0x4>

08000e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ecc:	f010 fee2 	bl	8011c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d903      	bls.n	8000ef0 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ee8:	f06f 0301 	mvn.w	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	e025      	b.n	8000f3c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	4914      	ldr	r1, [pc, #80]	; (8000f48 <BSP_COM_Init+0x74>)
 8000ef6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <BSP_COM_Init+0x78>)
 8000efc:	4613      	mov	r3, r2
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	4413      	add	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4403      	add	r3, r0
 8000f06:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8000f08:	79fa      	ldrb	r2, [r7, #7]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	011b      	lsls	r3, r3, #4
 8000f0e:	4413      	add	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <BSP_COM_Init+0x78>)
 8000f14:	4413      	add	r3, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f864 	bl	8000fe4 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8000f1c:	79fa      	ldrb	r2, [r7, #7]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	4413      	add	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <BSP_COM_Init+0x78>)
 8000f28:	4413      	add	r3, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f810 	bl	8000f50 <MX_USART2_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000f36:	f06f 0303 	mvn.w	r3, #3
 8000f3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000000c 	.word	0x2000000c
 8000f4c:	200070b0 	.word	0x200070b0

08000f50 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <MX_USART2_UART_Init+0x58>)
 8000f60:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f68:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	220c      	movs	r2, #12
 8000f80:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f012 feac 	bl	8013cec <HAL_UART_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40004400 	.word	0x40004400

08000fac <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* For IAR and ARM Compiler 5 and 6 */
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <__io_putchar+0x30>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4613      	mov	r3, r2
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	4413      	add	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <__io_putchar+0x34>)
 8000fc4:	1898      	adds	r0, r3, r2
 8000fc6:	1d39      	adds	r1, r7, #4
 8000fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f012 feda 	bl	8013d86 <HAL_UART_Transmit>
  return ch;
 8000fd2:	687b      	ldr	r3, [r7, #4]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	2000010b 	.word	0x2000010b
 8000fe0:	200070b0 	.word	0x200070b0

08000fe4 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	; (800106c <USART2_MspInit+0x88>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	4a1d      	ldr	r2, [pc, #116]	; (800106c <USART2_MspInit+0x88>)
 8000ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <USART2_MspInit+0x88>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <USART2_MspInit+0x88>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	4a16      	ldr	r2, [pc, #88]	; (800106c <USART2_MspInit+0x88>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6313      	str	r3, [r2, #48]	; 0x30
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <USART2_MspInit+0x88>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8001024:	2304      	movs	r3, #4
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8001034:	2307      	movs	r3, #7
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	480c      	ldr	r0, [pc, #48]	; (8001070 <USART2_MspInit+0x8c>)
 8001040:	f010 ff52 	bl	8011ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8001044:	2308      	movs	r3, #8
 8001046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8001054:	2307      	movs	r3, #7
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4804      	ldr	r0, [pc, #16]	; (8001070 <USART2_MspInit+0x8c>)
 8001060:	f010 ff42 	bl	8011ee8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000

08001074 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <BSP_I2C1_Init+0x58>)
 8001080:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <BSP_I2C1_Init+0x5c>)
 8001082:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <BSP_I2C1_Init+0x60>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	4912      	ldr	r1, [pc, #72]	; (80010d4 <BSP_I2C1_Init+0x60>)
 800108c:	600a      	str	r2, [r1, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d117      	bne.n	80010c2 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001092:	480e      	ldr	r0, [pc, #56]	; (80010cc <BSP_I2C1_Init+0x58>)
 8001094:	f011 fe6e 	bl	8012d74 <HAL_I2C_GetState>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d111      	bne.n	80010c2 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800109e:	480b      	ldr	r0, [pc, #44]	; (80010cc <BSP_I2C1_Init+0x58>)
 80010a0:	f000 f8d2 	bl	8001248 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10b      	bne.n	80010c2 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80010aa:	4808      	ldr	r0, [pc, #32]	; (80010cc <BSP_I2C1_Init+0x58>)
 80010ac:	f000 f898 	bl	80011e0 <MX_I2C1_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80010b6:	f06f 0307 	mvn.w	r3, #7
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	e001      	b.n	80010c2 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80010c2:	687b      	ldr	r3, [r7, #4]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	2000705c 	.word	0x2000705c
 80010d0:	40005400 	.word	0x40005400
 80010d4:	2000010c 	.word	0x2000010c

080010d8 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <BSP_I2C1_DeInit+0x48>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d014      	beq.n	8001114 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <BSP_I2C1_DeInit+0x48>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <BSP_I2C1_DeInit+0x48>)
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <BSP_I2C1_DeInit+0x48>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d10b      	bne.n	8001114 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80010fc:	4809      	ldr	r0, [pc, #36]	; (8001124 <BSP_I2C1_DeInit+0x4c>)
 80010fe:	f000 f8ed 	bl	80012dc <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001102:	4808      	ldr	r0, [pc, #32]	; (8001124 <BSP_I2C1_DeInit+0x4c>)
 8001104:	f011 face 	bl	80126a4 <HAL_I2C_DeInit>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800110e:	f06f 0307 	mvn.w	r3, #7
 8001112:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001114:	687b      	ldr	r3, [r7, #4]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2000010c 	.word	0x2000010c
 8001124:	2000705c 	.word	0x2000705c

08001128 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af02      	add	r7, sp, #8
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	80fb      	strh	r3, [r7, #6]
 8001134:	4613      	mov	r3, r2
 8001136:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800113c:	88bb      	ldrh	r3, [r7, #4]
 800113e:	88f9      	ldrh	r1, [r7, #6]
 8001140:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001144:	9200      	str	r2, [sp, #0]
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	480b      	ldr	r0, [pc, #44]	; (8001178 <BSP_I2C1_Send+0x50>)
 800114a:	f011 faef 	bl	801272c <HAL_I2C_Master_Transmit>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00c      	beq.n	800116e <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001154:	4808      	ldr	r0, [pc, #32]	; (8001178 <BSP_I2C1_Send+0x50>)
 8001156:	f011 fe1b 	bl	8012d90 <HAL_I2C_GetError>
 800115a:	4603      	mov	r3, r0
 800115c:	2b04      	cmp	r3, #4
 800115e:	d003      	beq.n	8001168 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001160:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	e002      	b.n	800116e <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001168:	f06f 0303 	mvn.w	r3, #3
 800116c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2000705c 	.word	0x2000705c

0800117c <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af02      	add	r7, sp, #8
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	80fb      	strh	r3, [r7, #6]
 8001188:	4613      	mov	r3, r2
 800118a:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001190:	88bb      	ldrh	r3, [r7, #4]
 8001192:	88f9      	ldrh	r1, [r7, #6]
 8001194:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001198:	9200      	str	r2, [sp, #0]
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	480b      	ldr	r0, [pc, #44]	; (80011cc <BSP_I2C1_Recv+0x50>)
 800119e:	f011 fbc3 	bl	8012928 <HAL_I2C_Master_Receive>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00c      	beq.n	80011c2 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80011a8:	4808      	ldr	r0, [pc, #32]	; (80011cc <BSP_I2C1_Recv+0x50>)
 80011aa:	f011 fdf1 	bl	8012d90 <HAL_I2C_GetError>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d003      	beq.n	80011bc <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80011b4:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	e002      	b.n	80011c2 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80011bc:	f06f 0303 	mvn.w	r3, #3
 80011c0:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	2000705c 	.word	0x2000705c

080011d0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80011d4:	f010 fd72 	bl	8011cbc <HAL_GetTick>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a14      	ldr	r2, [pc, #80]	; (8001240 <MX_I2C1_Init+0x60>)
 80011f0:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a13      	ldr	r2, [pc, #76]	; (8001244 <MX_I2C1_Init+0x64>)
 80011f6:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800120a:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f011 f8f9 	bl	801241c <HAL_I2C_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001234:	7bfb      	ldrb	r3, [r7, #15]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40005400 	.word	0x40005400
 8001244:	000186a0 	.word	0x000186a0

08001248 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <I2C1_MspInit+0x8c>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <I2C1_MspInit+0x8c>)
 800125a:	f043 0302 	orr.w	r3, r3, #2
 800125e:	6313      	str	r3, [r2, #48]	; 0x30
 8001260:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <I2C1_MspInit+0x8c>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800126c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001272:	2312      	movs	r3, #18
 8001274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800127e:	2304      	movs	r3, #4
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	4813      	ldr	r0, [pc, #76]	; (80012d8 <I2C1_MspInit+0x90>)
 800128a:	f010 fe2d 	bl	8011ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800128e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001294:	2312      	movs	r3, #18
 8001296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80012a0:	2304      	movs	r3, #4
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	480b      	ldr	r0, [pc, #44]	; (80012d8 <I2C1_MspInit+0x90>)
 80012ac:	f010 fe1c 	bl	8011ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <I2C1_MspInit+0x8c>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <I2C1_MspInit+0x8c>)
 80012ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012be:	6413      	str	r3, [r2, #64]	; 0x40
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <I2C1_MspInit+0x8c>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	; 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020400 	.word	0x40020400

080012dc <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <I2C1_MspDeInit+0x30>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	4a08      	ldr	r2, [pc, #32]	; (800130c <I2C1_MspDeInit+0x30>)
 80012ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012ee:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80012f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f4:	4806      	ldr	r0, [pc, #24]	; (8001310 <I2C1_MspDeInit+0x34>)
 80012f6:	f010 ff7b 	bl	80121f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80012fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012fe:	4804      	ldr	r0, [pc, #16]	; (8001310 <I2C1_MspDeInit+0x34>)
 8001300:	f010 ff76 	bl	80121f0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	40020400 	.word	0x40020400

08001314 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e00a      	b.n	800133c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001326:	f3af 8000 	nop.w
 800132a:	4601      	mov	r1, r0
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	60ba      	str	r2, [r7, #8]
 8001332:	b2ca      	uxtb	r2, r1
 8001334:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	dbf0      	blt.n	8001326 <_read+0x12>
	}

return len;
 8001344:	687b      	ldr	r3, [r7, #4]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b086      	sub	sp, #24
 8001352:	af00      	add	r7, sp, #0
 8001354:	60f8      	str	r0, [r7, #12]
 8001356:	60b9      	str	r1, [r7, #8]
 8001358:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	e009      	b.n	8001374 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	60ba      	str	r2, [r7, #8]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fe1f 	bl	8000fac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	429a      	cmp	r2, r3
 800137a:	dbf1      	blt.n	8001360 <_write+0x12>
	}
	return len;
 800137c:	687b      	ldr	r3, [r7, #4]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <_close>:

int _close(int file)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
	return -1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ae:	605a      	str	r2, [r3, #4]
	return 0;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_isatty>:

int _isatty(int file)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
	return 1;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
	return 0;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f8:	4a14      	ldr	r2, [pc, #80]	; (800144c <_sbrk+0x5c>)
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <_sbrk+0x60>)
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <_sbrk+0x64>)
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <_sbrk+0x68>)
 8001410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	429a      	cmp	r2, r3
 800141e:	d207      	bcs.n	8001430 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001420:	f012 ff7a 	bl	8014318 <__errno>
 8001424:	4603      	mov	r3, r0
 8001426:	220c      	movs	r2, #12
 8001428:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	e009      	b.n	8001444 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <_sbrk+0x64>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	4a05      	ldr	r2, [pc, #20]	; (8001454 <_sbrk+0x64>)
 8001440:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20018000 	.word	0x20018000
 8001450:	00000400 	.word	0x00000400
 8001454:	20000110 	.word	0x20000110
 8001458:	20007308 	.word	0x20007308

0800145c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <SystemInit+0x20>)
 8001462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <SystemInit+0x20>)
 8001468:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800146c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001486:	490e      	ldr	r1, [pc, #56]	; (80014c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800149c:	4c0b      	ldr	r4, [pc, #44]	; (80014cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014aa:	f7ff ffd7 	bl	800145c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ae:	f012 ff39 	bl	8014324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b2:	f7ff fb48 	bl	8000b46 <main>
  bx  lr    
 80014b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 80014c4:	080155ec 	.word	0x080155ec
  ldr r2, =_sbss
 80014c8:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 80014cc:	20007308 	.word	0x20007308

080014d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC_IRQHandler>
	...

080014d4 <VL53L3A2_Init>:
  * @brief Initialize X-NUCLEO-53L3A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L3A2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
  int32_t status = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 80014de:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <VL53L3A2_Init+0xe4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	1c5a      	adds	r2, r3, #1
 80014e4:	4934      	ldr	r1, [pc, #208]	; (80015b8 <VL53L3A2_Init+0xe4>)
 80014e6:	600a      	str	r2, [r1, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d154      	bne.n	8001596 <VL53L3A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 80014ec:	f000 f8d4 	bl	8001698 <_I2cFailRecover>
 80014f0:	4602      	mov	r2, r0
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	607b      	str	r3, [r7, #4]
    status |= VL53L3A2_I2C_Init();
 80014f8:	f7ff fdbc 	bl	8001074 <BSP_I2C1_Init>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4313      	orrs	r3, r2
 8001502:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d147      	bne.n	800159a <VL53L3A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 800150a:	463a      	mov	r2, r7
 800150c:	2302      	movs	r3, #2
 800150e:	2100      	movs	r1, #0
 8001510:	2086      	movs	r0, #134	; 0x86
 8001512:	f000 f963 	bl	80017dc <_ExpanderRd>
 8001516:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d13f      	bne.n	800159e <VL53L3A2_Init+0xca>
 800151e:	783b      	ldrb	r3, [r7, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d13c      	bne.n	800159e <VL53L3A2_Init+0xca>
 8001524:	787b      	ldrb	r3, [r7, #1]
 8001526:	2b16      	cmp	r3, #22
 8001528:	d139      	bne.n	800159e <VL53L3A2_Init+0xca>
	  {
      VL53L3A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 800152a:	463a      	mov	r2, r7
 800152c:	2302      	movs	r3, #2
 800152e:	2100      	movs	r1, #0
 8001530:	2084      	movs	r0, #132	; 0x84
 8001532:	f000 f953 	bl	80017dc <_ExpanderRd>
 8001536:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d131      	bne.n	80015a2 <VL53L3A2_Init+0xce>
 800153e:	783b      	ldrb	r3, [r7, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d12e      	bne.n	80015a2 <VL53L3A2_Init+0xce>
 8001544:	787b      	ldrb	r3, [r7, #1]
 8001546:	2b16      	cmp	r3, #22
 8001548:	d12b      	bne.n	80015a2 <VL53L3A2_Init+0xce>
	  {
		  VL53L3A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <VL53L3A2_Init+0xe8>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 8001550:	23ff      	movs	r3, #255	; 0xff
 8001552:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 8001554:	23ff      	movs	r3, #255	; 0xff
 8001556:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 8001558:	463a      	mov	r2, r7
 800155a:	2302      	movs	r3, #2
 800155c:	2114      	movs	r1, #20
 800155e:	2086      	movs	r0, #134	; 0x86
 8001560:	f000 f96e 	bl	8001840 <_ExpanderWR>
 8001564:	6078      	str	r0, [r7, #4]

	  if (status)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d11c      	bne.n	80015a6 <VL53L3A2_Init+0xd2>
	  {
		VL53L3A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 800156c:	23ff      	movs	r3, #255	; 0xff
 800156e:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 8001570:	23bf      	movs	r3, #191	; 0xbf
 8001572:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 8001574:	463a      	mov	r2, r7
 8001576:	2302      	movs	r3, #2
 8001578:	2114      	movs	r1, #20
 800157a:	2084      	movs	r0, #132	; 0x84
 800157c:	f000 f960 	bl	8001840 <_ExpanderWR>
 8001580:	6078      	str	r0, [r7, #4]

	  if (status)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d110      	bne.n	80015aa <VL53L3A2_Init+0xd6>
		VL53L3A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <VL53L3A2_Init+0xe8>)
 800158a:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 800158e:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 8001590:	f000 f904 	bl	800179c <_ExpandersSetAllIO>
 8001594:	6078      	str	r0, [r7, #4]
	  {
		VL53L3A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 8001596:	bf00      	nop
 8001598:	e008      	b.n	80015ac <VL53L3A2_Init+0xd8>
      goto done_err;
 800159a:	bf00      	nop
 800159c:	e006      	b.n	80015ac <VL53L3A2_Init+0xd8>
      goto done_err;
 800159e:	bf00      	nop
 80015a0:	e004      	b.n	80015ac <VL53L3A2_Init+0xd8>
		  goto done_err;
 80015a2:	bf00      	nop
 80015a4:	e002      	b.n	80015ac <VL53L3A2_Init+0xd8>
		goto done_err;
 80015a6:	bf00      	nop
 80015a8:	e000      	b.n	80015ac <VL53L3A2_Init+0xd8>
		goto done_err;
 80015aa:	bf00      	nop
  return status;
 80015ac:	687b      	ldr	r3, [r7, #4]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000114 	.word	0x20000114
 80015bc:	20000118 	.word	0x20000118

080015c0 <VL53L3A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L3A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L3A2_ResetId(uint8_t DevNo, uint8_t state)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	460a      	mov	r2, r1
 80015ca:	71fb      	strb	r3, [r7, #7]
 80015cc:	4613      	mov	r3, r2
 80015ce:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d037      	beq.n	8001646 <VL53L3A2_ResetId+0x86>
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	dc4e      	bgt.n	8001678 <VL53L3A2_ResetId+0xb8>
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d01a      	beq.n	8001614 <VL53L3A2_ResetId+0x54>
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d14a      	bne.n	8001678 <VL53L3A2_ResetId+0xb8>
  {
    case VL53L3A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 80015e2:	4b2a      	ldr	r3, [pc, #168]	; (800168c <VL53L3A2_ResetId+0xcc>)
 80015e4:	78db      	ldrb	r3, [r3, #3]
 80015e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b27      	ldr	r3, [pc, #156]	; (800168c <VL53L3A2_ResetId+0xcc>)
 80015ee:	70da      	strb	r2, [r3, #3]

      if (state)
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d006      	beq.n	8001604 <VL53L3A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 80015f6:	4b25      	ldr	r3, [pc, #148]	; (800168c <VL53L3A2_ResetId+0xcc>)
 80015f8:	78db      	ldrb	r3, [r3, #3]
 80015fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	4b22      	ldr	r3, [pc, #136]	; (800168c <VL53L3A2_ResetId+0xcc>)
 8001602:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8001604:	2301      	movs	r3, #1
 8001606:	4a22      	ldr	r2, [pc, #136]	; (8001690 <VL53L3A2_ResetId+0xd0>)
 8001608:	2113      	movs	r1, #19
 800160a:	2084      	movs	r0, #132	; 0x84
 800160c:	f000 f918 	bl	8001840 <_ExpanderWR>
 8001610:	60f8      	str	r0, [r7, #12]
      break;
 8001612:	e035      	b.n	8001680 <VL53L3A2_ResetId+0xc0>

    case VL53L3A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 8001614:	4b1d      	ldr	r3, [pc, #116]	; (800168c <VL53L3A2_ResetId+0xcc>)
 8001616:	785b      	ldrb	r3, [r3, #1]
 8001618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4b1b      	ldr	r3, [pc, #108]	; (800168c <VL53L3A2_ResetId+0xcc>)
 8001620:	705a      	strb	r2, [r3, #1]

      if (state)
 8001622:	79bb      	ldrb	r3, [r7, #6]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <VL53L3A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 8001628:	4b18      	ldr	r3, [pc, #96]	; (800168c <VL53L3A2_ResetId+0xcc>)
 800162a:	785b      	ldrb	r3, [r3, #1]
 800162c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <VL53L3A2_ResetId+0xcc>)
 8001634:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8001636:	2301      	movs	r3, #1
 8001638:	4a16      	ldr	r2, [pc, #88]	; (8001694 <VL53L3A2_ResetId+0xd4>)
 800163a:	2113      	movs	r1, #19
 800163c:	2086      	movs	r0, #134	; 0x86
 800163e:	f000 f8ff 	bl	8001840 <_ExpanderWR>
 8001642:	60f8      	str	r0, [r7, #12]
      break;
 8001644:	e01c      	b.n	8001680 <VL53L3A2_ResetId+0xc0>

    case VL53L3A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <VL53L3A2_ResetId+0xcc>)
 8001648:	785b      	ldrb	r3, [r3, #1]
 800164a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <VL53L3A2_ResetId+0xcc>)
 8001652:	705a      	strb	r2, [r3, #1]

      if (state)
 8001654:	79bb      	ldrb	r3, [r7, #6]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d006      	beq.n	8001668 <VL53L3A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <VL53L3A2_ResetId+0xcc>)
 800165c:	785b      	ldrb	r3, [r3, #1]
 800165e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <VL53L3A2_ResetId+0xcc>)
 8001666:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8001668:	2301      	movs	r3, #1
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <VL53L3A2_ResetId+0xd4>)
 800166c:	2113      	movs	r1, #19
 800166e:	2086      	movs	r0, #134	; 0x86
 8001670:	f000 f8e6 	bl	8001840 <_ExpanderWR>
 8001674:	60f8      	str	r0, [r7, #12]
      break;
 8001676:	e003      	b.n	8001680 <VL53L3A2_ResetId+0xc0>

    default:
      VL53L3A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 8001678:	f04f 33ff 	mov.w	r3, #4294967295
 800167c:	60fb      	str	r3, [r7, #12]
      goto done;
 800167e:	e000      	b.n	8001682 <VL53L3A2_ResetId+0xc2>
  if (status)
  {
    VL53L3A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 8001680:	bf00      	nop
  return status;
 8001682:	68fb      	ldr	r3, [r7, #12]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000118 	.word	0x20000118
 8001690:	2000011b 	.word	0x2000011b
 8001694:	20000119 	.word	0x20000119

08001698 <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	77bb      	strb	r3, [r7, #30]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 80016a2:	4b3b      	ldr	r3, [pc, #236]	; (8001790 <_I2cFailRecover+0xf8>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e06b      	b.n	8001786 <_I2cFailRecover+0xee>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b38      	ldr	r3, [pc, #224]	; (8001794 <_I2cFailRecover+0xfc>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a37      	ldr	r2, [pc, #220]	; (8001794 <_I2cFailRecover+0xfc>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b35      	ldr	r3, [pc, #212]	; (8001794 <_I2cFailRecover+0xfc>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = VL53L3A2_I2C_SCL_GPIO_PIN;
 80016ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016d0:	2311      	movs	r3, #17
 80016d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L3A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	4619      	mov	r1, r3
 80016de:	482e      	ldr	r0, [pc, #184]	; (8001798 <_I2cFailRecover+0x100>)
 80016e0:	f010 fc02 	bl	8011ee8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L3A2_I2C_SDA_GPIO_PIN;
 80016e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016ea:	2311      	movs	r3, #17
 80016ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ee:	2301      	movs	r3, #1
 80016f0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L3A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	4619      	mov	r1, r3
 80016f8:	4827      	ldr	r0, [pc, #156]	; (8001798 <_I2cFailRecover+0x100>)
 80016fa:	f010 fbf5 	bl	8011ee8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 80016fe:	2201      	movs	r2, #1
 8001700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001704:	4824      	ldr	r0, [pc, #144]	; (8001798 <_I2cFailRecover+0x100>)
 8001706:	f010 fe6f 	bl	80123e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L3A2_I2C_SDA_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001710:	4821      	ldr	r0, [pc, #132]	; (8001798 <_I2cFailRecover+0x100>)
 8001712:	f010 fe69 	bl	80123e8 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 8001716:	2300      	movs	r3, #0
 8001718:	77fb      	strb	r3, [r7, #31]
 800171a:	e014      	b.n	8001746 <_I2cFailRecover+0xae>
    {
      HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001722:	481d      	ldr	r0, [pc, #116]	; (8001798 <_I2cFailRecover+0x100>)
 8001724:	f010 fe60 	bl	80123e8 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001728:	2001      	movs	r0, #1
 800172a:	f010 fad3 	bl	8011cd4 <HAL_Delay>
      HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 800172e:	2201      	movs	r2, #1
 8001730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001734:	4818      	ldr	r0, [pc, #96]	; (8001798 <_I2cFailRecover+0x100>)
 8001736:	f010 fe57 	bl	80123e8 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 800173a:	2001      	movs	r0, #1
 800173c:	f010 faca 	bl	8011cd4 <HAL_Delay>
    for (i = 0; i < 10U; i++)
 8001740:	7ffb      	ldrb	r3, [r7, #31]
 8001742:	3301      	adds	r3, #1
 8001744:	77fb      	strb	r3, [r7, #31]
 8001746:	7ffb      	ldrb	r3, [r7, #31]
 8001748:	2b09      	cmp	r3, #9
 800174a:	d9e7      	bls.n	800171c <_I2cFailRecover+0x84>
    }
    retry_cnt++;
 800174c:	7fbb      	ldrb	r3, [r7, #30]
 800174e:	3301      	adds	r3, #1
 8001750:	77bb      	strb	r3, [r7, #30]
  } while ((HAL_GPIO_ReadPin(VL53L3A2_I2C_SDA_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 8001752:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001756:	4810      	ldr	r0, [pc, #64]	; (8001798 <_I2cFailRecover+0x100>)
 8001758:	f010 fe2e 	bl	80123b8 <HAL_GPIO_ReadPin>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <_I2cFailRecover+0xd0>
 8001762:	7fbb      	ldrb	r3, [r7, #30]
 8001764:	2b06      	cmp	r3, #6
 8001766:	d9d6      	bls.n	8001716 <_I2cFailRecover+0x7e>

  if (HAL_GPIO_ReadPin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 8001768:	f44f 7100 	mov.w	r1, #512	; 0x200
 800176c:	480a      	ldr	r0, [pc, #40]	; (8001798 <_I2cFailRecover+0x100>)
 800176e:	f010 fe23 	bl	80123b8 <HAL_GPIO_ReadPin>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d102      	bne.n	800177e <_I2cFailRecover+0xe6>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8001778:	f06f 0304 	mvn.w	r3, #4
 800177c:	e003      	b.n	8001786 <_I2cFailRecover+0xee>
  }

  is_already_init = 1U;
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <_I2cFailRecover+0xf8>)
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3720      	adds	r7, #32
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	2000011c 	.word	0x2000011c
 8001794:	40023800 	.word	0x40023800
 8001798:	40020400 	.word	0x40020400

0800179c <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 80017a2:	2302      	movs	r3, #2
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <_ExpandersSetAllIO+0x38>)
 80017a6:	2112      	movs	r1, #18
 80017a8:	2086      	movs	r0, #134	; 0x86
 80017aa:	f000 f849 	bl	8001840 <_ExpanderWR>
 80017ae:	6078      	str	r0, [r7, #4]

  if (status)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d107      	bne.n	80017c6 <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 80017b6:	2302      	movs	r3, #2
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <_ExpandersSetAllIO+0x3c>)
 80017ba:	2112      	movs	r1, #18
 80017bc:	2084      	movs	r0, #132	; 0x84
 80017be:	f000 f83f 	bl	8001840 <_ExpanderWR>
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	e000      	b.n	80017c8 <_ExpandersSetAllIO+0x2c>
    goto done_err;
 80017c6:	bf00      	nop

done_err:
  return status;
 80017c8:	687b      	ldr	r3, [r7, #4]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000118 	.word	0x20000118
 80017d8:	2000011a 	.word	0x2000011a

080017dc <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	74fb      	strb	r3, [r7, #19]
  VL53L3A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L3A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	b299      	uxth	r1, r3
 80017f4:	f107 0213 	add.w	r2, r7, #19
 80017f8:	2364      	movs	r3, #100	; 0x64
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2301      	movs	r3, #1
 80017fe:	480f      	ldr	r0, [pc, #60]	; (800183c <_ExpanderRd+0x60>)
 8001800:	f010 ff94 	bl	801272c <HAL_I2C_Master_Transmit>
 8001804:	4603      	mov	r3, r0
 8001806:	617b      	str	r3, [r7, #20]

    if (status)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d110      	bne.n	8001830 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L3A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	b299      	uxth	r1, r3
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b29a      	uxth	r2, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2064      	movs	r0, #100	; 0x64
 800181a:	fb00 f303 	mul.w	r3, r0, r3
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	4613      	mov	r3, r2
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <_ExpanderRd+0x60>)
 8001826:	f011 f87f 	bl	8012928 <HAL_I2C_Master_Receive>
 800182a:	4603      	mov	r3, r0
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	e000      	b.n	8001832 <_ExpanderRd+0x56>
      break;
 8001830:	bf00      	nop
  } while (0);

  VL53L3A2_PutI2cBus();

  return status;
 8001832:	697b      	ldr	r3, [r7, #20]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	2000705c 	.word	0x2000705c

08001840 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	; 0x30
 8001844:	af02      	add	r7, sp, #8
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	3301      	adds	r3, #1
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	4618      	mov	r0, r3
 8001860:	f012 fd84 	bl	801436c <memcpy>

  VL53L3A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L3A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	b299      	uxth	r1, r3
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	3301      	adds	r3, #1
 800186e:	b29b      	uxth	r3, r3
 8001870:	f107 0214 	add.w	r2, r7, #20
 8001874:	2064      	movs	r0, #100	; 0x64
 8001876:	9000      	str	r0, [sp, #0]
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <_ExpanderWR+0x4c>)
 800187a:	f010 ff57 	bl	801272c <HAL_I2C_Master_Transmit>
 800187e:	4603      	mov	r3, r0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L3A2_PutI2cBus();

  return status;
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001884:	4618      	mov	r0, r3
 8001886:	3728      	adds	r7, #40	; 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000705c 	.word	0x2000705c

08001890 <VL53L3A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d903      	bls.n	80018a6 <VL53L3A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800189e:	f06f 0301 	mvn.w	r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	e014      	b.n	80018d0 <VL53L3A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L3A2_Init() != 0)
 80018a6:	f7ff fe15 	bl	80014d4 <VL53L3A2_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <VL53L3A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80018b0:	f06f 0303 	mvn.w	r3, #3
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	e00b      	b.n	80018d0 <VL53L3A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L3A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 80018b8:	2101      	movs	r1, #1
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f8fc 	bl	8001ab8 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L3A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 80018c0:	2100      	movs	r1, #0
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f8f8 	bl	8001ab8 <VL53L3A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L3CX_Probe(Instance);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f935 	bl	8001b38 <VL53L3CX_Probe>
 80018ce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80018d0:	68fb      	ldr	r3, [r7, #12]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <VL53L3A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d903      	bls.n	80018f4 <VL53L3A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018ec:	f06f 0301 	mvn.w	r3, #1
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	e012      	b.n	800191a <VL53L3A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->ReadID(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <VL53L3A2_RANGING_SENSOR_ReadID+0x48>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	490b      	ldr	r1, [pc, #44]	; (8001928 <VL53L3A2_RANGING_SENSOR_ReadID+0x4c>)
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001902:	6839      	ldr	r1, [r7, #0]
 8001904:	4610      	mov	r0, r2
 8001906:	4798      	blx	r3
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	da03      	bge.n	8001916 <VL53L3A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800190e:	f06f 0304 	mvn.w	r3, #4
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	e001      	b.n	800191a <VL53L3A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000012c 	.word	0x2000012c
 8001928:	20000120 	.word	0x20000120

0800192c <VL53L3A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d903      	bls.n	8001944 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800193c:	f06f 0301 	mvn.w	r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	e012      	b.n	800196a <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x48>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	490b      	ldr	r1, [pc, #44]	; (8001978 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001952:	6839      	ldr	r1, [r7, #0]
 8001954:	4610      	mov	r0, r2
 8001956:	4798      	blx	r3
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	da03      	bge.n	8001966 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800195e:	f06f 0304 	mvn.w	r3, #4
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	e001      	b.n	800196a <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2000012c 	.word	0x2000012c
 8001978:	20000120 	.word	0x20000120

0800197c <VL53L3A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d903      	bls.n	8001994 <VL53L3A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800198c:	f06f 0301 	mvn.w	r3, #1
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	e012      	b.n	80019ba <VL53L3A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->GetDistance(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <VL53L3A2_RANGING_SENSOR_GetDistance+0x48>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	490b      	ldr	r1, [pc, #44]	; (80019c8 <VL53L3A2_RANGING_SENSOR_GetDistance+0x4c>)
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80019a2:	6839      	ldr	r1, [r7, #0]
 80019a4:	4610      	mov	r0, r2
 80019a6:	4798      	blx	r3
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	da03      	bge.n	80019b6 <VL53L3A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80019ae:	f06f 0304 	mvn.w	r3, #4
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e001      	b.n	80019ba <VL53L3A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80019ba:	68fb      	ldr	r3, [r7, #12]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	2000012c 	.word	0x2000012c
 80019c8:	20000120 	.word	0x20000120

080019cc <VL53L3A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d903      	bls.n	80019e4 <VL53L3A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019dc:	f06f 0301 	mvn.w	r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	e012      	b.n	8001a0a <VL53L3A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->Start(VL53L3A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <VL53L3A2_RANGING_SENSOR_Start+0x48>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	490b      	ldr	r1, [pc, #44]	; (8001a18 <VL53L3A2_RANGING_SENSOR_Start+0x4c>)
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80019f2:	6839      	ldr	r1, [r7, #0]
 80019f4:	4610      	mov	r0, r2
 80019f6:	4798      	blx	r3
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	da03      	bge.n	8001a06 <VL53L3A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80019fe:	f06f 0304 	mvn.w	r3, #4
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	e001      	b.n	8001a0a <VL53L3A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	2000012c 	.word	0x2000012c
 8001a18:	20000120 	.word	0x20000120

08001a1c <VL53L3A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d903      	bls.n	8001a32 <VL53L3A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a2a:	f06f 0301 	mvn.w	r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	e011      	b.n	8001a56 <VL53L3A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->Stop(VL53L3A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <VL53L3A2_RANGING_SENSOR_Stop+0x44>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	490a      	ldr	r1, [pc, #40]	; (8001a64 <VL53L3A2_RANGING_SENSOR_Stop+0x48>)
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a40:	4610      	mov	r0, r2
 8001a42:	4798      	blx	r3
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da03      	bge.n	8001a52 <VL53L3A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a4a:	f06f 0304 	mvn.w	r3, #4
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	e001      	b.n	8001a56 <VL53L3A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001a56:	68fb      	ldr	r3, [r7, #12]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	2000012c 	.word	0x2000012c
 8001a64:	20000120 	.word	0x20000120

08001a68 <VL53L3A2_RANGING_SENSOR_SetAddress>:
  * @param Instance    Ranging sensor instance.
  * @param Address     New I2C address.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_SetAddress(uint32_t Instance, uint32_t Address)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d903      	bls.n	8001a80 <VL53L3A2_RANGING_SENSOR_SetAddress+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a78:	f06f 0301 	mvn.w	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	e012      	b.n	8001aa6 <VL53L3A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->SetAddress(VL53L3A2_RANGING_SENSOR_CompObj[Instance], Address) < 0)
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <VL53L3A2_RANGING_SENSOR_SetAddress+0x48>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	490b      	ldr	r1, [pc, #44]	; (8001ab4 <VL53L3A2_RANGING_SENSOR_SetAddress+0x4c>)
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a8e:	6839      	ldr	r1, [r7, #0]
 8001a90:	4610      	mov	r0, r2
 8001a92:	4798      	blx	r3
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	da03      	bge.n	8001aa2 <VL53L3A2_RANGING_SENSOR_SetAddress+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a9a:	f06f 0304 	mvn.w	r3, #4
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	e001      	b.n	8001aa6 <VL53L3A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	2000012c 	.word	0x2000012c
 8001ab4:	20000120 	.word	0x20000120

08001ab8 <VL53L3A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d903      	bls.n	8001ad0 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ac8:	f06f 0301 	mvn.w	r3, #1
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	e02e      	b.n	8001b2e <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d112      	bne.n	8001afc <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L3A2_ResetId((uint8_t)Instance, 1) < 0)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2101      	movs	r1, #1
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fd6f 	bl	80015c0 <VL53L3A2_ResetId>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	da03      	bge.n	8001af0 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001ae8:	f06f 0303 	mvn.w	r3, #3
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	e01e      	b.n	8001b2e <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001af0:	2002      	movs	r0, #2
 8001af2:	f010 f8ef 	bl	8011cd4 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	e018      	b.n	8001b2e <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d112      	bne.n	8001b28 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L3A2_ResetId((uint8_t)Instance, 0) < 0)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fd59 	bl	80015c0 <VL53L3A2_ResetId>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	da03      	bge.n	8001b1c <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b14:	f06f 0303 	mvn.w	r3, #3
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	e008      	b.n	8001b2e <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001b1c:	2002      	movs	r0, #2
 8001b1e:	f010 f8d9 	bl	8011cd4 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	e002      	b.n	8001b2e <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b28:	f06f 0301 	mvn.w	r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <VL53L3CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L3CX_Probe(uint32_t Instance)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  VL53L3CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L3CX_Object_t   VL53L3CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L3CX_ADDRESS;
 8001b40:	2352      	movs	r3, #82	; 0x52
 8001b42:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L3A2_I2C_Init;
 8001b44:	4b38      	ldr	r3, [pc, #224]	; (8001c28 <VL53L3CX_Probe+0xf0>)
 8001b46:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L3A2_I2C_DeInit;
 8001b48:	4b38      	ldr	r3, [pc, #224]	; (8001c2c <VL53L3CX_Probe+0xf4>)
 8001b4a:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L3A2_I2C_WriteReg;
 8001b4c:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <VL53L3CX_Probe+0xf8>)
 8001b4e:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L3A2_I2C_ReadReg;
 8001b50:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <VL53L3CX_Probe+0xfc>)
 8001b52:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L3A2_GetTick;
 8001b54:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <VL53L3CX_Probe+0x100>)
 8001b56:	623b      	str	r3, [r7, #32]

  if (VL53L3CX_RegisterBusIO(&(VL53L3CXObj[Instance]), &IOCtx) != VL53L3CX_OK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f242 42f0 	movw	r2, #9456	; 0x24f0
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	4a36      	ldr	r2, [pc, #216]	; (8001c3c <VL53L3CX_Probe+0x104>)
 8001b64:	4413      	add	r3, r2
 8001b66:	f107 020c 	add.w	r2, r7, #12
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f00f fbf2 	bl	8011356 <VL53L3CX_RegisterBusIO>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <VL53L3CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001b78:	f06f 0304 	mvn.w	r3, #4
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7e:	e04d      	b.n	8001c1c <VL53L3CX_Probe+0xe4>
  }
  else if (VL53L3CX_ReadID(&(VL53L3CXObj[Instance]), &id) != VL53L3CX_OK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f242 42f0 	movw	r2, #9456	; 0x24f0
 8001b86:	fb02 f303 	mul.w	r3, r2, r3
 8001b8a:	4a2c      	ldr	r2, [pc, #176]	; (8001c3c <VL53L3CX_Probe+0x104>)
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f107 0208 	add.w	r2, r7, #8
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f00f fc90 	bl	80114ba <VL53L3CX_ReadID>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <VL53L3CX_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001ba0:	f06f 0304 	mvn.w	r3, #4
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba6:	e039      	b.n	8001c1c <VL53L3CX_Probe+0xe4>
  }
  else
  {
    if (id != VL53L3CX_ID)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f64e 22aa 	movw	r2, #60074	; 0xeaaa
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d003      	beq.n	8001bba <VL53L3CX_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001bb2:	f06f 0306 	mvn.w	r3, #6
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb8:	e030      	b.n	8001c1c <VL53L3CX_Probe+0xe4>
    }
    else
    {
      VL53L3A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L3CX_RANGING_SENSOR_Driver;
 8001bba:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <VL53L3CX_Probe+0x108>)
 8001bbc:	4a21      	ldr	r2, [pc, #132]	; (8001c44 <VL53L3CX_Probe+0x10c>)
 8001bbe:	601a      	str	r2, [r3, #0]
      VL53L3A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L3CXObj[Instance]);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f242 42f0 	movw	r2, #9456	; 0x24f0
 8001bc6:	fb02 f303 	mul.w	r3, r2, r3
 8001bca:	4a1c      	ldr	r2, [pc, #112]	; (8001c3c <VL53L3CX_Probe+0x104>)
 8001bcc:	441a      	add	r2, r3
 8001bce:	491e      	ldr	r1, [pc, #120]	; (8001c48 <VL53L3CX_Probe+0x110>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L3A2_RANGING_SENSOR_Drv->Init(VL53L3A2_RANGING_SENSOR_CompObj[Instance]) != VL53L3CX_OK)
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <VL53L3CX_Probe+0x108>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	491a      	ldr	r1, [pc, #104]	; (8001c48 <VL53L3CX_Probe+0x110>)
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001be4:	4610      	mov	r0, r2
 8001be6:	4798      	blx	r3
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <VL53L3CX_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001bee:	f06f 0304 	mvn.w	r3, #4
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf4:	e012      	b.n	8001c1c <VL53L3CX_Probe+0xe4>
      }
      else if (VL53L3A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L3A2_RANGING_SENSOR_CompObj[Instance], &VL53L3A2_RANGING_SENSOR_Cap) != VL53L3CX_OK)
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <VL53L3CX_Probe+0x108>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4912      	ldr	r1, [pc, #72]	; (8001c48 <VL53L3CX_Probe+0x110>)
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c04:	4911      	ldr	r1, [pc, #68]	; (8001c4c <VL53L3CX_Probe+0x114>)
 8001c06:	4610      	mov	r0, r2
 8001c08:	4798      	blx	r3
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <VL53L3CX_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001c10:	f06f 0304 	mvn.w	r3, #4
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
 8001c16:	e001      	b.n	8001c1c <VL53L3CX_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3728      	adds	r7, #40	; 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	08001075 	.word	0x08001075
 8001c2c:	080010d9 	.word	0x080010d9
 8001c30:	08001129 	.word	0x08001129
 8001c34:	0800117d 	.word	0x0800117d
 8001c38:	080011d1 	.word	0x080011d1
 8001c3c:	20000140 	.word	0x20000140
 8001c40:	2000012c 	.word	0x2000012c
 8001c44:	20000040 	.word	0x20000040
 8001c48:	20000120 	.word	0x20000120
 8001c4c:	20000130 	.word	0x20000130

08001c50 <VL53LX_SetDeviceAddress>:
}



VL53LX_Error VL53LX_SetDeviceAddress(VL53LX_DEV Dev, uint8_t DeviceAddress)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3318      	adds	r3, #24
 8001c64:	613b      	str	r3, [r7, #16]
	VL53LX_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8001c6c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53LX_WrByte(Dev, VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	085b      	lsrs	r3, r3, #1
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	2101      	movs	r1, #1
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f00f f98b 	bl	8010f94 <VL53LX_WrByte>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	085b      	lsrs	r3, r3, #1
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001c92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <VL53LX_DataInit>:


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 8001caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d105      	bne.n	8001cbe <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f001 fcba 	bl	800362e <VL53LX_data_init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 8001cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d107      	bne.n	8001cd6 <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 8001cc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cca:	2102      	movs	r1, #2
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f887 	bl	8001de0 <SetPresetModeL3CX>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 8001cd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001cde:	f248 2135 	movw	r1, #33333	; 0x8235
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f980 	bl	8001fe8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 8001cec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10a      	bne.n	8001d0a <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3318      	adds	r3, #24
 8001cf8:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8001d00:	220c      	movs	r2, #12
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f012 fb3f 	bl	8014388 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d105      	bne.n	8001d1e <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 8001d12:	2102      	movs	r1, #2
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f003 fdb0 	bl	800587a <VL53LX_set_dmax_mode>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 8001d1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d105      	bne.n	8001d32 <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 8001d26:	2100      	movs	r1, #0
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 ff41 	bl	8002bb0 <VL53LX_SmudgeCorrectionEnable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001d32:	2320      	movs	r3, #32
 8001d34:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	7bfa      	ldrb	r2, [r7, #15]
 8001d3a:	76da      	strb	r2, [r3, #27]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8001d42:	3320      	adds	r3, #32
 8001d44:	2202      	movs	r2, #2
 8001d46:	701a      	strb	r2, [r3, #0]
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 8001d48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 8001d60:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f00e fd5c 	bl	8010822 <VL53LX_poll_for_boot_completion>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 8001d8c:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <ComputeDevicePresetMode+0x60>)
 8001d8e:	f107 0308 	add.w	r3, r7, #8
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	4611      	mov	r1, r2
 8001d96:	8019      	strh	r1, [r3, #0]
 8001d98:	3302      	adds	r3, #2
 8001d9a:	0c12      	lsrs	r2, r2, #16
 8001d9c:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d002      	beq.n	8001daa <ComputeDevicePresetMode+0x2e>
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d003      	beq.n	8001db0 <ComputeDevicePresetMode+0x34>
 8001da8:	e005      	b.n	8001db6 <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]
		break;
 8001dae:	e004      	b.n	8001dba <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
		break;
 8001db4:	e001      	b.n	8001dba <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 8001db6:	2302      	movs	r3, #2
 8001db8:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	f107 0210 	add.w	r2, r7, #16
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	701a      	strb	r2, [r3, #0]

	return Status;
 8001dca:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	08015520 	.word	0x08015520

08001de0 <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b08e      	sub	sp, #56	; 0x38
 8001de4:	af04      	add	r7, sp, #16
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	460b      	mov	r3, r1
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001e04:	2320      	movs	r3, #32
 8001e06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 8001e0a:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8001e0e:	7afb      	ldrb	r3, [r7, #11]
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ffb2 	bl	8001d7c <ComputeDevicePresetMode>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 8001e1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d112      	bne.n	8001e4c <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 8001e26:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001e2a:	f107 001c 	add.w	r0, r7, #28
 8001e2e:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	f107 0318 	add.w	r3, r7, #24
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	4603      	mov	r3, r0
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f002 f859 	bl	8003ef8 <VL53LX_get_preset_mode_timing_cfg>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 8001e4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d112      	bne.n	8001e7a <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 8001e54:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001e58:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8001e5a:	69fd      	ldr	r5, [r7, #28]
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	9102      	str	r1, [sp, #8]
 8001e64:	9201      	str	r2, [sp, #4]
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	462b      	mov	r3, r5
 8001e6a:	4622      	mov	r2, r4
 8001e6c:	4601      	mov	r1, r0
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f002 f8a3 	bl	8003fba <VL53LX_set_preset_mode>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001e7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d103      	bne.n	8001e8a <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001e88:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 8001e8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3728      	adds	r7, #40	; 0x28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bdb0      	pop	{r4, r5, r7, pc}

08001e96 <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b085      	sub	sp, #20
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3318      	adds	r3, #24
 8001ea6:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f893 3393 	ldrb.w	r3, [r3, #915]	; 0x393
 8001eae:	2baa      	cmp	r3, #170	; 0xaa
 8001eb0:	d106      	bne.n	8001ec0 <IsL4+0x2a>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	f893 3392 	ldrb.w	r3, [r3, #914]	; 0x392
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001eb8:	2beb      	cmp	r3, #235	; 0xeb
 8001eba:	d101      	bne.n	8001ec0 <IsL4+0x2a>
		devL4 = 1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
	return devL4;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <CheckValidRectRoi>:

static VL53LX_Error CheckValidRectRoi(VL53LX_UserRoi_t ROI)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b085      	sub	sp, #20
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001eda:	793b      	ldrb	r3, [r7, #4]
 8001edc:	2b0f      	cmp	r3, #15
 8001ede:	d808      	bhi.n	8001ef2 <CheckValidRectRoi+0x24>
 8001ee0:	797b      	ldrb	r3, [r7, #5]
 8001ee2:	2b0f      	cmp	r3, #15
 8001ee4:	d805      	bhi.n	8001ef2 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001ee6:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001ee8:	2b0f      	cmp	r3, #15
 8001eea:	d802      	bhi.n	8001ef2 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	2b0f      	cmp	r3, #15
 8001ef0:	d901      	bls.n	8001ef6 <CheckValidRectRoi+0x28>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001ef2:	23fc      	movs	r3, #252	; 0xfc
 8001ef4:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8001ef6:	793a      	ldrb	r2, [r7, #4]
 8001ef8:	79bb      	ldrb	r3, [r7, #6]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d803      	bhi.n	8001f06 <CheckValidRectRoi+0x38>
 8001efe:	797a      	ldrb	r2, [r7, #5]
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d201      	bcs.n	8001f0a <CheckValidRectRoi+0x3c>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001f06:	23fc      	movs	r3, #252	; 0xfc
 8001f08:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <VL53LX_SetDistanceMode>:


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b088      	sub	sp, #32
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d008      	beq.n	8001f4e <VL53LX_SetDistanceMode+0x34>
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d005      	beq.n	8001f4e <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d002      	beq.n	8001f4e <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 8001f48:	f06f 0303 	mvn.w	r3, #3
 8001f4c:	e048      	b.n	8001fe0 <VL53LX_SetDistanceMode+0xc6>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ffa1 	bl	8001e96 <IsL4>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <VL53LX_SetDistanceMode+0x4c>
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d102      	bne.n	8001f66 <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 8001f60:	f06f 0303 	mvn.w	r3, #3
 8001f64:	e03c      	b.n	8001fe0 <VL53LX_SetDistanceMode+0xc6>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6a:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001f6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10a      	bne.n	8001f8a <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	f107 0210 	add.w	r2, r7, #16
 8001f7c:	f107 010c 	add.w	r1, r7, #12
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f001 fe92 	bl	8003caa <VL53LX_get_timeouts_us>
 8001f86:	4603      	mov	r3, r0
 8001f88:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 8001f8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d107      	bne.n	8001fa2 <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4619      	mov	r1, r3
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff21 	bl	8001de0 <SetPresetModeL3CX>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 8001fa2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d105      	bne.n	8001fb6 <VL53LX_SetDistanceMode+0x9c>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8001fb0:	3320      	adds	r3, #32
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	701a      	strb	r2, [r3, #0]
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001fb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10e      	bne.n	8001fdc <VL53LX_SetDistanceMode+0xc2>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8001fbe:	68f9      	ldr	r1, [r7, #12]
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f001 fe37 	bl	8003c38 <VL53LX_set_timeouts_us>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 8001fce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d102      	bne.n	8001fdc <VL53LX_SetDistanceMode+0xc2>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001fdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3720      	adds	r7, #32
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8002004:	4b31      	ldr	r3, [pc, #196]	; (80020cc <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 8002006:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4a31      	ldr	r2, [pc, #196]	; (80020d0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d902      	bls.n	8002016 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002010:	23fc      	movs	r3, #252	; 0xfc
 8002012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53LX_ERROR_NONE)
 8002016:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10b      	bne.n	8002036 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	f107 0210 	add.w	r2, r7, #16
 8002026:	f107 010c 	add.w	r1, r7, #12
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f001 fe3d 	bl	8003caa <VL53LX_get_timeouts_us>
 8002030:	4603      	mov	r3, r0
 8002032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 8002036:	f240 63a4 	movw	r3, #1700	; 0x6a4
 800203a:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 800203c:	2306      	movs	r3, #6
 800203e:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff28 	bl	8001e96 <IsL4>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 800204c:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 800204e:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	429a      	cmp	r2, r3
 8002056:	d803      	bhi.n	8002060 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002058:	23fc      	movs	r3, #252	; 0xfc
 800205a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800205e:	e003      	b.n	8002068 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8002066:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 8002068:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800206c:	2b00      	cmp	r3, #0
 800206e:	d11c      	bne.n	80020aa <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	6a3a      	ldr	r2, [r7, #32]
 8002074:	429a      	cmp	r2, r3
 8002076:	d203      	bcs.n	8002080 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 8002078:	23fc      	movs	r3, #252	; 0xfc
 800207a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800207e:	e00d      	b.n	800209c <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	fbb2 f3f3 	udiv	r3, r2, r3
 8002088:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 800208a:	68f9      	ldr	r1, [r7, #12]
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f001 fdd1 	bl	8003c38 <VL53LX_set_timeouts_us>
 8002096:	4603      	mov	r3, r0
 8002098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 800209c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	629a      	str	r2, [r3, #40]	; 0x28
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 80020aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd6>
		VL53LXDevDataSet(Dev,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80020b8:	3324      	adds	r3, #36	; 0x24
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	601a      	str	r2, [r3, #0]
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80020be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3728      	adds	r7, #40	; 0x28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	00086470 	.word	0x00086470
 80020d0:	00989680 	.word	0x00989680
 80020d4:	00030d40 	.word	0x00030d40

080020d8 <VL53LX_SetUserROI>:



VL53LX_Error VL53LX_SetUserROI(VL53LX_DEV Dev,
		VL53LX_UserRoi_t *pRoi)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b092      	sub	sp, #72	; 0x48
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53LX_zone_config_t  zone_cfg;
	uint8_t x_centre, y_centre, width, height;

	Status = CheckValidRectRoi(*pRoi);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	2300      	movs	r3, #0
 80020ee:	4613      	mov	r3, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff feec 	bl	8001ece <CheckValidRectRoi>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (Status != VL53LX_ERROR_NONE)
 80020fc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <VL53LX_SetUserROI+0x32>
		return VL53LX_ERROR_INVALID_PARAMS;
 8002104:	f06f 0303 	mvn.w	r3, #3
 8002108:	e050      	b.n	80021ac <VL53LX_SetUserROI+0xd4>

	x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	789b      	ldrb	r3, [r3, #2]
 800210e:	461a      	mov	r2, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4413      	add	r3, r2
 8002116:	3301      	adds	r3, #1
 8002118:	0fda      	lsrs	r2, r3, #31
 800211a:	4413      	add	r3, r2
 800211c:	105b      	asrs	r3, r3, #1
 800211e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	785b      	ldrb	r3, [r3, #1]
 8002126:	461a      	mov	r2, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	78db      	ldrb	r3, [r3, #3]
 800212c:	4413      	add	r3, r2
 800212e:	3301      	adds	r3, #1
 8002130:	0fda      	lsrs	r2, r3, #31
 8002132:	4413      	add	r3, r2
 8002134:	105b      	asrs	r3, r3, #1
 8002136:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	width =    (pRoi->BotRightX - pRoi->TopLeftX);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	789a      	ldrb	r2, [r3, #2]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	785a      	ldrb	r2, [r3, #1]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	78db      	ldrb	r3, [r3, #3]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	zone_cfg.max_zones = 1;
 8002156:	2301      	movs	r3, #1
 8002158:	733b      	strb	r3, [r7, #12]
	zone_cfg.active_zones = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	737b      	strb	r3, [r7, #13]
	zone_cfg.user_zones[0].x_centre = x_centre;
 800215e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002162:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	zone_cfg.user_zones[0].y_centre = y_centre;
 8002166:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800216a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	zone_cfg.user_zones[0].width = width;
 800216e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002172:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	zone_cfg.user_zones[0].height = height;
 8002176:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800217a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if ((width < 3) || (height < 3))
 800217e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002182:	2b02      	cmp	r3, #2
 8002184:	d903      	bls.n	800218e <VL53LX_SetUserROI+0xb6>
 8002186:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800218a:	2b02      	cmp	r3, #2
 800218c:	d803      	bhi.n	8002196 <VL53LX_SetUserROI+0xbe>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 800218e:	23fc      	movs	r3, #252	; 0xfc
 8002190:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002194:	e008      	b.n	80021a8 <VL53LX_SetUserROI+0xd0>
	else
		Status =  VL53LX_set_zone_config(Dev, &zone_cfg);
 8002196:	f107 030c 	add.w	r3, r7, #12
 800219a:	4619      	mov	r1, r3
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f001 fe68 	bl	8003e72 <VL53LX_set_zone_config>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	LOG_FUNCTION_END(Status);
	return Status;
 80021a8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3748      	adds	r7, #72	; 0x48
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80021bc:	2300      	movs	r3, #0
 80021be:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3318      	adds	r3, #24
 80021c4:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f001 f90c 	bl	80033e4 <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80021cc:	2300      	movs	r3, #0
 80021ce:	75bb      	strb	r3, [r7, #22]
 80021d0:	e01a      	b.n	8002208 <VL53LX_StartMeasurement+0x54>
		pdev->PreviousRangeMilliMeter[i] = 0;
 80021d2:	7dbb      	ldrb	r3, [r7, #22]
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80021da:	3308      	adds	r3, #8
 80021dc:	2100      	movs	r1, #0
 80021de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 80021e2:	7dbb      	ldrb	r3, [r7, #22]
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80021ec:	3318      	adds	r3, #24
 80021ee:	22ff      	movs	r2, #255	; 0xff
 80021f0:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 80021f2:	7dbb      	ldrb	r3, [r7, #22]
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80021fc:	331c      	adds	r3, #28
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002202:	7dbb      	ldrb	r3, [r7, #22]
 8002204:	3301      	adds	r3, #1
 8002206:	75bb      	strb	r3, [r7, #22]
 8002208:	7dbb      	ldrb	r3, [r7, #22]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d9e1      	bls.n	80021d2 <VL53LX_StartMeasurement+0x1e>
	}
	pdev->PreviousStreamCount = 0;
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002214:	3321      	adds	r3, #33	; 0x21
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = 0;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002220:	3320      	adds	r3, #32
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7edb      	ldrb	r3, [r3, #27]
 800222a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 800222c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d107      	bne.n	8002244 <VL53LX_StartMeasurement+0x90>
		Status = VL53LX_init_and_start_range(
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	2206      	movs	r2, #6
 8002238:	4619      	mov	r1, r3
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f001 ff80 	bl	8004140 <VL53LX_init_and_start_range>
 8002240:	4603      	mov	r3, r0
 8002242:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 8002244:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <VL53LX_StopMeasurement>:

VL53LX_Error VL53LX_StopMeasurement(VL53LX_DEV Dev)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002258:	2300      	movs	r3, #0
 800225a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_stop_range(Dev);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f002 f9f9 	bl	8004654 <VL53LX_stop_range>
 8002262:	4603      	mov	r3, r0
 8002264:	73fb      	strb	r3, [r7, #15]

	VL53LX_unload_patch(Dev);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f001 f9ac 	bl	80035c4 <VL53LX_unload_patch>

	LOG_FUNCTION_END(Status);
	return Status;
 800226c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <VL53LX_ClearInterruptAndStartMeasurement>:


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7edb      	ldrb	r3, [r3, #27]
 8002288:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 800228a:	7bbb      	ldrb	r3, [r7, #14]
 800228c:	4619      	mov	r1, r3
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f002 fedc 	bl	800504c <VL53LX_clear_interrupt_and_enable_next_range>
 8002294:	4603      	mov	r3, r0
 8002296:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8002298:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <VL53LX_GetMeasurementDataReady>:


VL53LX_Error VL53LX_GetMeasurementDataReady(VL53LX_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_is_new_data_ready(Dev, pMeasurementDataReady);
 80022b2:	6839      	ldr	r1, [r7, #0]
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f00e fa7a 	bl	80107ae <VL53LX_is_new_data_ready>
 80022ba:	4603      	mov	r3, r0
 80022bc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80022be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <ConvertStatusHisto>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	3b05      	subs	r3, #5
 80022da:	2b12      	cmp	r3, #18
 80022dc:	d840      	bhi.n	8002360 <ConvertStatusHisto+0x94>
 80022de:	a201      	add	r2, pc, #4	; (adr r2, 80022e4 <ConvertStatusHisto+0x18>)
 80022e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e4:	08002331 	.word	0x08002331
 80022e8:	08002337 	.word	0x08002337
 80022ec:	08002343 	.word	0x08002343
 80022f0:	08002361 	.word	0x08002361
 80022f4:	0800235b 	.word	0x0800235b
 80022f8:	08002361 	.word	0x08002361
 80022fc:	08002361 	.word	0x08002361
 8002300:	08002361 	.word	0x08002361
 8002304:	08002361 	.word	0x08002361
 8002308:	08002361 	.word	0x08002361
 800230c:	08002361 	.word	0x08002361
 8002310:	08002361 	.word	0x08002361
 8002314:	08002361 	.word	0x08002361
 8002318:	08002361 	.word	0x08002361
 800231c:	0800233d 	.word	0x0800233d
 8002320:	0800234f 	.word	0x0800234f
 8002324:	08002361 	.word	0x08002361
 8002328:	08002355 	.word	0x08002355
 800232c:	08002349 	.word	0x08002349
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002330:	2304      	movs	r3, #4
 8002332:	73fb      	strb	r3, [r7, #15]
		break;
 8002334:	e016      	b.n	8002364 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 8002336:	2301      	movs	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
		break;
 800233a:	e013      	b.n	8002364 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 800233c:	2306      	movs	r3, #6
 800233e:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 8002340:	e010      	b.n	8002364 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8002342:	2307      	movs	r3, #7
 8002344:	73fb      	strb	r3, [r7, #15]
		break;
 8002346:	e00d      	b.n	8002364 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8002348:	230c      	movs	r3, #12
 800234a:	73fb      	strb	r3, [r7, #15]
		break;
 800234c:	e00a      	b.n	8002364 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 800234e:	2307      	movs	r3, #7
 8002350:	73fb      	strb	r3, [r7, #15]
		break;
 8002352:	e007      	b.n	8002364 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8002354:	230b      	movs	r3, #11
 8002356:	73fb      	strb	r3, [r7, #15]
		break;
 8002358:	e004      	b.n	8002364 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 800235a:	2300      	movs	r3, #0
 800235c:	73fb      	strb	r3, [r7, #15]
		break;
 800235e:	e001      	b.n	8002364 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 8002360:	23ff      	movs	r3, #255	; 0xff
 8002362:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8002364:	7bfb      	ldrb	r3, [r7, #15]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop

08002374 <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08e      	sub	sp, #56	; 0x38
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	4608      	mov	r0, r1
 800237e:	4611      	mov	r1, r2
 8002380:	461a      	mov	r2, r3
 8002382:	4603      	mov	r3, r0
 8002384:	70fb      	strb	r3, [r7, #3]
 8002386:	460b      	mov	r3, r1
 8002388:	70bb      	strb	r3, [r7, #2]
 800238a:	4613      	mov	r3, r2
 800238c:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800238e:	2300      	movs	r3, #0
 8002390:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	VL53LX_LLDriverData_t *pdev =
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3318      	adds	r3, #24
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	33f8      	adds	r3, #248	; 0xf8
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 80023a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 80023b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80023b6:	025b      	lsls	r3, r3, #9
 80023b8:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 80023ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023bc:	6a3a      	ldr	r2, [r7, #32]
 80023be:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 80023c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023c2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80023c4:	025b      	lsls	r3, r3, #9
 80023c6:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 80023c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 80023ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023d0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80023d2:	025b      	lsls	r3, r3, #9
 80023d4:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 80023d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 80023dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023de:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80023e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e4:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 80023e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e8:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80023ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ee:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 80023f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f2:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 80023f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f8:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 80023fa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80023fe:	2b11      	cmp	r3, #17
 8002400:	d009      	beq.n	8002416 <SetTargetData+0xa2>
 8002402:	2b11      	cmp	r3, #17
 8002404:	dc0f      	bgt.n	8002426 <SetTargetData+0xb2>
 8002406:	2b03      	cmp	r3, #3
 8002408:	dc02      	bgt.n	8002410 <SetTargetData+0x9c>
 800240a:	2b00      	cmp	r3, #0
 800240c:	dc03      	bgt.n	8002416 <SetTargetData+0xa2>
 800240e:	e00a      	b.n	8002426 <SetTargetData+0xb2>
 8002410:	2b0d      	cmp	r3, #13
 8002412:	d004      	beq.n	800241e <SetTargetData+0xaa>
 8002414:	e007      	b.n	8002426 <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 8002416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002418:	2205      	movs	r2, #5
 800241a:	749a      	strb	r2, [r3, #18]
		break;
 800241c:	e006      	b.n	800242c <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 800241e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002420:	220d      	movs	r2, #13
 8002422:	749a      	strb	r2, [r3, #18]
		break;
 8002424:	e002      	b.n	800242c <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 8002426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002428:	2200      	movs	r2, #0
 800242a:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 800242c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800242e:	7c9b      	ldrb	r3, [r3, #18]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d117      	bne.n	8002464 <SetTargetData+0xf0>
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d114      	bne.n	8002464 <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 800243a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800243c:	22ff      	movs	r2, #255	; 0xff
 800243e:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 8002440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002442:	2200      	movs	r2, #0
 8002444:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 8002446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002448:	2200      	movs	r2, #0
 800244a:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 800244c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800244e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002452:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 8002454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002456:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800245a:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 800245c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800245e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002462:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 8002464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002466:	7c9b      	ldrb	r3, [r3, #18]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d108      	bne.n	800247e <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 800246c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff2b 	bl	80022cc <ConvertStatusHisto>
 8002476:	4603      	mov	r3, r0
 8002478:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 800247a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800247c:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 800247e:	f107 030c 	add.w	r3, r7, #12
 8002482:	461a      	mov	r2, r3
 8002484:	f248 0191 	movw	r1, #32913	; 0x8091
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f003 fa37 	bl	80058fc <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 800248e:	78bb      	ldrb	r3, [r7, #2]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 800249c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800249e:	8a1b      	ldrh	r3, [r3, #16]
 80024a0:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	86bb      	strh	r3, [r7, #52]	; 0x34

	pRangeData->ExtendedRange = 0;
 80024a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a8:	2200      	movs	r2, #0
 80024aa:	74da      	strb	r2, [r3, #19]

	if ((active_results != 1) ||
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d106      	bne.n	80024c0 <SetTargetData+0x14c>
		(pdev->PreviousRangeActiveResults != 1))
 80024b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80024b8:	3320      	adds	r3, #32
 80024ba:	781b      	ldrb	r3, [r3, #0]
	if ((active_results != 1) ||
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d001      	beq.n	80024c4 <SetTargetData+0x150>
		ExtendedRangeEnabled = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 81dc 	beq.w	8002884 <SetTargetData+0x510>
		(pRangeData->RangeStatus ==
 80024cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ce:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 80024d0:	2b07      	cmp	r3, #7
 80024d2:	d004      	beq.n	80024de <SetTargetData+0x16a>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 80024d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024d6:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 80024d8:	2b04      	cmp	r3, #4
 80024da:	f040 81d3 	bne.w	8002884 <SetTargetData+0x510>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 80024de:	787b      	ldrb	r3, [r7, #1]
 80024e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80024e8:	3318      	adds	r3, #24
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b07      	cmp	r3, #7
 80024ee:	d01c      	beq.n	800252a <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 80024f0:	787b      	ldrb	r3, [r7, #1]
 80024f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80024fa:	3318      	adds	r3, #24
 80024fc:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d013      	beq.n	800252a <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8002502:	787b      	ldrb	r3, [r7, #1]
 8002504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002506:	4413      	add	r3, r2
 8002508:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800250c:	3318      	adds	r3, #24
 800250e:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8002510:	2b00      	cmp	r3, #0
 8002512:	f040 81b7 	bne.w	8002884 <SetTargetData+0x510>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 8002516:	787b      	ldrb	r3, [r7, #1]
 8002518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251a:	4413      	add	r3, r2
 800251c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002520:	331c      	adds	r3, #28
 8002522:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 8002524:	2b01      	cmp	r3, #1
 8002526:	f040 81ad 	bne.w	8002884 <SetTargetData+0x510>
	{
		if (((pdev->PreviousStreamCount) ==
 800252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002530:	3321      	adds	r3, #33	; 0x21
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 8002536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002538:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 800253c:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 800253e:	429a      	cmp	r2, r3
 8002540:	d00c      	beq.n	800255c <SetTargetData+0x1e8>
		|| ((pdev->PreviousStreamCount) ==
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002548:	3321      	adds	r3, #33	; 0x21
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8002554:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8002556:	429a      	cmp	r2, r3
 8002558:	f040 816b 	bne.w	8002832 <SetTargetData+0x4be>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 800255c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800255e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002562:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002568:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800256c:	3308      	adds	r3, #8
 800256e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002572:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	b29b      	uxth	r3, r3
 8002578:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 800257a:	2301      	movs	r3, #1
 800257c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		switch (pdev->preset_mode) {
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	785b      	ldrb	r3, [r3, #1]
 8002584:	2b21      	cmp	r3, #33	; 0x21
 8002586:	d008      	beq.n	800259a <SetTargetData+0x226>
 8002588:	2b21      	cmp	r3, #33	; 0x21
 800258a:	f300 814e 	bgt.w	800282a <SetTargetData+0x4b6>
 800258e:	2b1b      	cmp	r3, #27
 8002590:	f000 80d7 	beq.w	8002742 <SetTargetData+0x3ce>
 8002594:	2b1e      	cmp	r3, #30
 8002596:	d004      	beq.n	80025a2 <SetTargetData+0x22e>
 8002598:	e147      	b.n	800282a <SetTargetData+0x4b6>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 80025a0:	e148      	b.n	8002834 <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 80025a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a4:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 80025a8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	dd0e      	ble.n	80025ce <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 80025b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b2:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 80025b6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	da07      	bge.n	80025ce <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 80025be:	7dfb      	ldrb	r3, [r7, #23]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d104      	bne.n	80025ce <SetTargetData+0x25a>
					sequency == 1) {
					AddOffset =
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 80025ca:	86bb      	strh	r3, [r7, #52]	; 0x34
 80025cc:	e0b8      	b.n	8002740 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80025ce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 80025d8:	425b      	negs	r3, r3
 80025da:	429a      	cmp	r2, r3
 80025dc:	da0f      	bge.n	80025fe <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80025de:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80025e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e4:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 80025e8:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 80025ea:	429a      	cmp	r2, r3
 80025ec:	dd07      	ble.n	80025fe <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d104      	bne.n	80025fe <SetTargetData+0x28a>
					sequency == 0) {
					AddOffset =
 80025f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f6:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 80025fa:	86bb      	strh	r3, [r7, #52]	; 0x34
 80025fc:	e0a0      	b.n	8002740 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8002604:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002608:	429a      	cmp	r2, r3
 800260a:	dd0e      	ble.n	800262a <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 800260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260e:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8002612:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002616:	429a      	cmp	r2, r3
 8002618:	da07      	bge.n	800262a <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 800261a:	7dfb      	ldrb	r3, [r7, #23]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d104      	bne.n	800262a <SetTargetData+0x2b6>
					sequency == 0) {
					AddOffset =
 8002620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002622:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8002626:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002628:	e08a      	b.n	8002740 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 800262a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8002634:	425b      	negs	r3, r3
 8002636:	429a      	cmp	r2, r3
 8002638:	da0f      	bge.n	800265a <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 800263a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800263e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002640:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8002644:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8002646:	429a      	cmp	r2, r3
 8002648:	dd07      	ble.n	800265a <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 800264a:	7dfb      	ldrb	r3, [r7, #23]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d104      	bne.n	800265a <SetTargetData+0x2e6>
					sequency == 1) {
					AddOffset =
 8002650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002652:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002656:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002658:	e072      	b.n	8002740 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002660:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002664:	429a      	cmp	r2, r3
 8002666:	dd0e      	ble.n	8002686 <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 800266e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002672:	429a      	cmp	r2, r3
 8002674:	da07      	bge.n	8002686 <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8002676:	7dfb      	ldrb	r3, [r7, #23]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d104      	bne.n	8002686 <SetTargetData+0x312>
					sequency == 1) {
					AddOffset =
 800267c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002682:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002684:	e05c      	b.n	8002740 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8002686:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268c:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002690:	425b      	negs	r3, r3
 8002692:	429a      	cmp	r2, r3
 8002694:	da0f      	bge.n	80026b6 <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8002696:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 80026a0:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 80026a2:	429a      	cmp	r2, r3
 80026a4:	dd07      	ble.n	80026b6 <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 80026a6:	7dfb      	ldrb	r3, [r7, #23]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d104      	bne.n	80026b6 <SetTargetData+0x342>
					sequency == 0) {
					AddOffset =
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80026b2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80026b4:	e044      	b.n	8002740 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 80026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b8:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80026bc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	dd0e      	ble.n	80026e2 <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 80026c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c6:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 80026ca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	da07      	bge.n	80026e2 <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d104      	bne.n	80026e2 <SetTargetData+0x36e>
					sequency == 0) {
					AddOffset =
 80026d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026da:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 80026de:	86bb      	strh	r3, [r7, #52]	; 0x34
 80026e0:	e02e      	b.n	8002740 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80026e2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80026ec:	425b      	negs	r3, r3
 80026ee:	429a      	cmp	r2, r3
 80026f0:	da0f      	bge.n	8002712 <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 80026f2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 80026fc:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 80026fe:	429a      	cmp	r2, r3
 8002700:	dd07      	ble.n	8002712 <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8002702:	7dfb      	ldrb	r3, [r7, #23]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d104      	bne.n	8002712 <SetTargetData+0x39e>
					sequency == 1) {
					AddOffset =
 8002708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800270e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002710:	e016      	b.n	8002740 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002714:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8002718:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800271c:	429a      	cmp	r2, r3
 800271e:	da0b      	bge.n	8002738 <SetTargetData+0x3c4>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8002720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002722:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002726:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800272a:	429a      	cmp	r2, r3
 800272c:	dd04      	ble.n	8002738 <SetTargetData+0x3c4>
					AddOffset =
 800272e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002730:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8002734:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002736:	e003      	b.n	8002740 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 800273e:	e079      	b.n	8002834 <SetTargetData+0x4c0>
 8002740:	e078      	b.n	8002834 <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8002748:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800274c:	429a      	cmp	r2, r3
 800274e:	dd0e      	ble.n	800276e <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8002750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002752:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8002756:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800275a:	429a      	cmp	r2, r3
 800275c:	da07      	bge.n	800276e <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 800275e:	7dfb      	ldrb	r3, [r7, #23]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d104      	bne.n	800276e <SetTargetData+0x3fa>
					sequency == 0) {
					AddOffset =
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800276a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800276c:	e05c      	b.n	8002828 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 800276e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002774:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8002778:	425b      	negs	r3, r3
 800277a:	429a      	cmp	r2, r3
 800277c:	da0f      	bge.n	800279e <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 800277e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002784:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8002788:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 800278a:	429a      	cmp	r2, r3
 800278c:	dd07      	ble.n	800279e <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d104      	bne.n	800279e <SetTargetData+0x42a>
					sequency == 1) {
					AddOffset =
 8002794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002796:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800279a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800279c:	e044      	b.n	8002828 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 80027a4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	dd0e      	ble.n	80027ca <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80027ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ae:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80027b2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	da07      	bge.n	80027ca <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d104      	bne.n	80027ca <SetTargetData+0x456>
					sequency == 1) {
					AddOffset =
 80027c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c2:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 80027c6:	86bb      	strh	r3, [r7, #52]	; 0x34
 80027c8:	e02e      	b.n	8002828 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80027ca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d0:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 80027d4:	425b      	negs	r3, r3
 80027d6:	429a      	cmp	r2, r3
 80027d8:	da0f      	bge.n	80027fa <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80027da:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e0:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 80027e4:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 80027e6:	429a      	cmp	r2, r3
 80027e8:	dd07      	ble.n	80027fa <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 80027ea:	7dfb      	ldrb	r3, [r7, #23]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d104      	bne.n	80027fa <SetTargetData+0x486>
					sequency == 0) {
					AddOffset =
 80027f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f2:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 80027f6:	86bb      	strh	r3, [r7, #52]	; 0x34
 80027f8:	e016      	b.n	8002828 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8002800:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002804:	429a      	cmp	r2, r3
 8002806:	da0b      	bge.n	8002820 <SetTargetData+0x4ac>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 800280e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002812:	429a      	cmp	r2, r3
 8002814:	dd04      	ble.n	8002820 <SetTargetData+0x4ac>
					AddOffset =
 8002816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002818:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800281c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800281e:	e003      	b.n	8002828 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002826:	e005      	b.n	8002834 <SetTargetData+0x4c0>
 8002828:	e004      	b.n	8002834 <SetTargetData+0x4c0>

			default:
				uwr_status = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002830:	e000      	b.n	8002834 <SetTargetData+0x4c0>
			}
		}
 8002832:	bf00      	nop

		if (uwr_status) {
 8002834:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002838:	2b00      	cmp	r3, #0
 800283a:	d023      	beq.n	8002884 <SetTargetData+0x510>
			pRangeData->RangeMilliMeter += AddOffset;
 800283c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800283e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002842:	b29a      	uxth	r2, r3
 8002844:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002846:	4413      	add	r3, r2
 8002848:	b29b      	uxth	r3, r3
 800284a:	b21a      	sxth	r2, r3
 800284c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800284e:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8002850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002852:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002856:	b29a      	uxth	r2, r3
 8002858:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800285a:	4413      	add	r3, r2
 800285c:	b29b      	uxth	r3, r3
 800285e:	b21a      	sxth	r2, r3
 8002860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002862:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8002864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800286a:	b29a      	uxth	r2, r3
 800286c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800286e:	4413      	add	r3, r2
 8002870:	b29b      	uxth	r3, r3
 8002872:	b21a      	sxth	r2, r3
 8002874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002876:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 8002878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800287a:	2201      	movs	r2, #1
 800287c:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 800287e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002880:	2200      	movs	r2, #0
 8002882:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8002884:	787b      	ldrb	r3, [r7, #1]
 8002886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002888:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800288c:	3308      	adds	r3, #8
 800288e:	8ab9      	ldrh	r1, [r7, #20]
 8002890:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 8002894:	787b      	ldrb	r3, [r7, #1]
 8002896:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002898:	7c91      	ldrb	r1, [r2, #18]
 800289a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800289c:	4413      	add	r3, r2
 800289e:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80028a2:	3318      	adds	r3, #24
 80028a4:	460a      	mov	r2, r1
 80028a6:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 80028a8:	787b      	ldrb	r3, [r7, #1]
 80028aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028ac:	7cd1      	ldrb	r1, [r2, #19]
 80028ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80028b6:	331c      	adds	r3, #28
 80028b8:	460a      	mov	r2, r1
 80028ba:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 80028bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028be:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80028c2:	3320      	adds	r3, #32
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	701a      	strb	r2, [r3, #0]

	Range = pRangeData->RangeMilliMeter;
 80028c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ca:	8a1b      	ldrh	r3, [r3, #16]
 80028cc:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 80028ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d0:	7c9b      	ldrb	r3, [r3, #18]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d110      	bne.n	80028f8 <SetTargetData+0x584>
 80028d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	da0c      	bge.n	80028f8 <SetTargetData+0x584>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 80028de:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <SetTargetData+0x590>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	da03      	bge.n	80028f2 <SetTargetData+0x57e>
			pRangeData->RangeStatus =
 80028ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ec:	220e      	movs	r2, #14
 80028ee:	749a      	strb	r2, [r3, #18]
 80028f0:	e002      	b.n	80028f8 <SetTargetData+0x584>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 80028f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028f4:	2200      	movs	r2, #0
 80028f6:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 80028f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3738      	adds	r7, #56	; 0x38
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000014 	.word	0x20000014

08002908 <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b08f      	sub	sp, #60	; 0x3c
 800290c:	af04      	add	r7, sp, #16
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3318      	adds	r3, #24
 8002918:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800291a:	2300      	movs	r3, #0
 800291c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	7c9a      	ldrb	r2, [r3, #18]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


	pMultiRangingData->TimeStamp = 0;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	78da      	ldrb	r2, [r3, #3]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	7c9b      	ldrb	r3, [r3, #18]
 8002946:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 8002948:	7ffb      	ldrb	r3, [r7, #31]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d103      	bne.n	8002956 <SetMeasurementData+0x4e>

		iteration = 1;
 800294e:	2301      	movs	r3, #1
 8002950:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002954:	e002      	b.n	800295c <SetMeasurementData+0x54>
	else
		iteration = ActiveResults;
 8002956:	7ffb      	ldrb	r3, [r7, #31]
 8002958:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for (i = 0; i < iteration; i++) {
 800295c:	2300      	movs	r3, #0
 800295e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002962:	e035      	b.n	80029d0 <SetMeasurementData+0xc8>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 8002964:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	3308      	adds	r3, #8
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 8002978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800297c:	224c      	movs	r2, #76	; 0x4c
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	3310      	adds	r3, #16
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	4413      	add	r3, r2
 8002988:	3304      	adds	r3, #4
 800298a:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 800298c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002990:	2b00      	cmp	r3, #0
 8002992:	d113      	bne.n	80029bc <SetMeasurementData+0xb4>
			Status = SetTargetData(Dev, ActiveResults,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	7918      	ldrb	r0, [r3, #4]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	7c1b      	ldrb	r3, [r3, #16]
 800299c:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 80029a0:	7ff9      	ldrb	r1, [r7, #31]
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	9202      	str	r2, [sp, #8]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	9201      	str	r2, [sp, #4]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	4623      	mov	r3, r4
 80029ae:	4602      	mov	r2, r0
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f7ff fcdf 	bl	8002374 <SetTargetData>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	for (i = 0; i < iteration; i++) {
 80029c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ca:	3301      	adds	r3, #1
 80029cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80029d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80029d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029d8:	429a      	cmp	r2, r3
 80029da:	d3c3      	bcc.n	8002964 <SetMeasurementData+0x5c>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	f893 243f 	ldrb.w	r2, [r3, #1087]	; 0x43f
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80029e8:	3321      	adds	r3, #33	; 0x21
 80029ea:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 80029ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80029f4:	e01f      	b.n	8002a36 <SetMeasurementData+0x12e>
		pdev->PreviousRangeMilliMeter[i] = 0;
 80029f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029fa:	6a3a      	ldr	r2, [r7, #32]
 80029fc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8002a00:	3308      	adds	r3, #8
 8002a02:	2100      	movs	r1, #0
 8002a04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8002a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a0c:	6a3a      	ldr	r2, [r7, #32]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002a14:	3318      	adds	r3, #24
 8002a16:	22ff      	movs	r2, #255	; 0xff
 8002a18:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8002a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a1e:	6a3a      	ldr	r2, [r7, #32]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002a26:	331c      	adds	r3, #28
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a30:	3301      	adds	r3, #1
 8002a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d9db      	bls.n	80029f6 <SetMeasurementData+0xee>
	}

	return Status;
 8002a3e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	372c      	adds	r7, #44	; 0x2c
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd90      	pop	{r4, r7, pc}

08002a4a <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b086      	sub	sp, #24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3318      	adds	r3, #24
 8002a5c:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002a64:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8002a66:	225c      	movs	r2, #92	; 0x5c
 8002a68:	21ff      	movs	r1, #255	; 0xff
 8002a6a:	6838      	ldr	r0, [r7, #0]
 8002a6c:	f011 fc8c 	bl	8014388 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	2102      	movs	r1, #2
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f001 fee7 	bl	8004848 <VL53LX_get_device_results>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	68f9      	ldr	r1, [r7, #12]
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ff40 	bl	8002908 <SetMeasurementData>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 8002a8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <VL53LX_PerformRefSpadManagement>:
	return Status;
}


VL53LX_Error VL53LX_PerformRefSpadManagement(VL53LX_DEV Dev)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b090      	sub	sp, #64	; 0x40
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8002aa6:	f240 3305 	movw	r3, #773	; 0x305
 8002aaa:	81bb      	strh	r3, [r7, #12]
	VL53LX_customer_nvm_managed_t *pc;
	VL53LX_DistanceModes DistanceMode;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3318      	adds	r3, #24
 8002ab0:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab4:	3348      	adds	r3, #72	; 0x48
 8002ab6:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53LX_ERROR_NONE) {
 8002ab8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d11c      	bne.n	8002afa <VL53LX_PerformRefSpadManagement+0x62>
		DistanceMode = VL53LXDevDataGet(Dev,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002ac6:	3320      	adds	r3, #32
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.DistanceMode);
		Status = VL53LX_run_ref_spad_char(Dev, &RawStatus);
 8002ace:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f8e3 	bl	8002ca0 <VL53LX_run_ref_spad_char>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53LX_ERROR_NONE)
 8002ae0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d108      	bne.n	8002afa <VL53LX_PerformRefSpadManagement+0x62>
			Status = VL53LX_SetDistanceMode(Dev, DistanceMode);
 8002ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002aec:	4619      	mov	r1, r3
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff fa13 	bl	8001f1a <VL53LX_SetDistanceMode>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8002afa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002afe:	f113 0f1d 	cmn.w	r3, #29
 8002b02:	d14e      	bne.n	8002ba2 <VL53LX_PerformRefSpadManagement+0x10a>

		Status = VL53LX_read_nvm_raw_data(Dev,
 8002b04:	f107 0310 	add.w	r3, r7, #16
 8002b08:	2206      	movs	r2, #6
 8002b0a:	2128      	movs	r1, #40	; 0x28
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f00c f991 	bl	800ee34 <VL53LX_read_nvm_raw_data>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53LX_ERROR_NONE)
 8002b18:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <VL53LX_PerformRefSpadManagement+0x9c>
			Status = VL53LX_WriteMulti(Dev,
 8002b20:	f107 020c 	add.w	r2, r7, #12
 8002b24:	2302      	movs	r3, #2
 8002b26:	2114      	movs	r1, #20
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f00e f9c7 	bl	8010ebc <VL53LX_WriteMulti>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53LX_ERROR_NONE) {
 8002b34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d105      	bne.n	8002b48 <VL53LX_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8002b3c:	7b3a      	ldrb	r2, [r7, #12]
 8002b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b40:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 8002b42:	7b7a      	ldrb	r2, [r7, #13]
 8002b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b46:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8002b48:	f107 0310 	add.w	r3, r7, #16
 8002b4c:	3310      	adds	r3, #16
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c



		if (Status == VL53LX_ERROR_NONE)
 8002b50:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d108      	bne.n	8002b6a <VL53LX_PerformRefSpadManagement+0xd2>
			Status = VL53LX_WriteMulti(Dev,
 8002b58:	2306      	movs	r3, #6
 8002b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b5c:	210d      	movs	r1, #13
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f00e f9ac 	bl	8010ebc <VL53LX_WriteMulti>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53LX_ERROR_NONE) {
 8002b6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d117      	bne.n	8002ba2 <VL53LX_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 8002b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b78:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8002b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7c:	785a      	ldrb	r2, [r3, #1]
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b80:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 8002b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b84:	789a      	ldrb	r2, [r3, #2]
 8002b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b88:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8002b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8c:	78da      	ldrb	r2, [r3, #3]
 8002b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b90:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8002b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b94:	791a      	ldrb	r2, [r3, #4]
 8002b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b98:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	795a      	ldrb	r2, [r3, #5]
 8002b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba0:	715a      	strb	r2, [r3, #5]
		}

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002ba2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3740      	adds	r7, #64	; 0x40
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <VL53LX_SmudgeCorrectionEnable>:


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d84a      	bhi.n	8002c68 <VL53LX_SmudgeCorrectionEnable+0xb8>
 8002bd2:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <VL53LX_SmudgeCorrectionEnable+0x28>)
 8002bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd8:	08002be9 	.word	0x08002be9
 8002bdc:	08002c09 	.word	0x08002c09
 8002be0:	08002c29 	.word	0x08002c29
 8002be4:	08002c49 	.word	0x08002c49
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f003 fd92 	bl	8006712 <VL53LX_dynamic_xtalk_correction_disable>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f003 fda4 	bl	8006740 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f003 fdcd 	bl	800679c <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002c02:	4603      	mov	r3, r0
 8002c04:	733b      	strb	r3, [r7, #12]
		break;
 8002c06:	e032      	b.n	8002c6e <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f003 fd6b 	bl	80066e4 <VL53LX_dynamic_xtalk_correction_enable>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f003 fdd9 	bl	80067ca <VL53LX_dynamic_xtalk_correction_apply_enable>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f003 fdbd 	bl	800679c <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002c22:	4603      	mov	r3, r0
 8002c24:	733b      	strb	r3, [r7, #12]
		break;
 8002c26:	e022      	b.n	8002c6e <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f003 fd5b 	bl	80066e4 <VL53LX_dynamic_xtalk_correction_enable>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f003 fdc9 	bl	80067ca <VL53LX_dynamic_xtalk_correction_apply_enable>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f003 fd96 	bl	800676e <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 8002c42:	4603      	mov	r3, r0
 8002c44:	733b      	strb	r3, [r7, #12]
		break;
 8002c46:	e012      	b.n	8002c6e <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f003 fd4b 	bl	80066e4 <VL53LX_dynamic_xtalk_correction_enable>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f003 fd74 	bl	8006740 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f003 fd9d 	bl	800679c <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002c62:	4603      	mov	r3, r0
 8002c64:	733b      	strb	r3, [r7, #12]
		break;
 8002c66:	e002      	b.n	8002c6e <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002c68:	23fc      	movs	r3, #252	; 0xfc
 8002c6a:	73fb      	strb	r3, [r7, #15]
		break;
 8002c6c:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 8002c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10d      	bne.n	8002c92 <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8002c76:	7bbb      	ldrb	r3, [r7, #14]
 8002c78:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8002c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8002c82:	7b7b      	ldrb	r3, [r7, #13]
 8002c84:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8002c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8002c8e:	7b3b      	ldrb	r3, [r7, #12]
 8002c90:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop

08002ca0 <VL53LX_run_ref_spad_char>:


VL53LX_Error VL53LX_run_ref_spad_char(
	VL53LX_DEV        Dev,
	VL53LX_Error     *pcal_status)
{
 8002ca0:	b5b0      	push	{r4, r5, r7, lr}
 8002ca2:	b08c      	sub	sp, #48	; 0x30
 8002ca4:	af04      	add	r7, sp, #16
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3318      	adds	r3, #24
 8002cb2:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53LX_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cba:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8002cbc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d104      	bne.n	8002cce <VL53LX_run_ref_spad_char+0x2e>
		status = VL53LX_enable_powerforce(Dev);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f005 fd62 	bl	800878e <VL53LX_enable_powerforce>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 8002cce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d117      	bne.n	8002d06 <VL53LX_run_ref_spad_char+0x66>
		status =
		VL53LX_set_ref_spad_char_config(
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	7858      	ldrb	r0, [r3, #1]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	685c      	ldr	r4, [r3, #4]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	891d      	ldrh	r5, [r3, #8]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	899b      	ldrh	r3, [r3, #12]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	8952      	ldrh	r2, [r2, #10]
 8002cea:	69b9      	ldr	r1, [r7, #24]
 8002cec:	f8b1 12de 	ldrh.w	r1, [r1, #734]	; 0x2de
 8002cf0:	9102      	str	r1, [sp, #8]
 8002cf2:	9201      	str	r2, [sp, #4]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	462b      	mov	r3, r5
 8002cf8:	4622      	mov	r2, r4
 8002cfa:	4601      	mov	r1, r0
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f007 fb71 	bl	800a3e4 <VL53LX_set_ref_spad_char_config>
 8002d02:	4603      	mov	r3, r0
 8002d04:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53LX_ERROR_NONE)
 8002d06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d107      	bne.n	8002d1e <VL53LX_run_ref_spad_char+0x7e>
		status = VL53LX_run_device_test(
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	4619      	mov	r1, r3
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f890 	bl	8002e3a <VL53LX_run_device_test>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53LX_ERROR_NONE)
 8002d1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d108      	bne.n	8002d38 <VL53LX_run_ref_spad_char+0x98>
		status =
		VL53LX_ReadMulti(
 8002d26:	f107 020c 	add.w	r2, r7, #12
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	21d9      	movs	r1, #217	; 0xd9
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f00e f8fa 	bl	8010f28 <VL53LX_ReadMulti>
 8002d34:	4603      	mov	r3, r0
 8002d36:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53LX_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53LX_ERROR_NONE) {
 8002d38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10a      	bne.n	8002d56 <VL53LX_run_ref_spad_char+0xb6>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8002d40:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8002d48:	331f      	adds	r3, #31
 8002d4a:	701a      	strb	r2, [r3, #0]
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8002d4c:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8002d54:	701a      	strb	r2, [r3, #0]
	}



	if (status == VL53LX_ERROR_NONE)
 8002d56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d108      	bne.n	8002d70 <VL53LX_run_ref_spad_char+0xd0>
		status =
			VL53LX_WriteMulti(
 8002d5e:	f107 020c 	add.w	r2, r7, #12
 8002d62:	2302      	movs	r3, #2
 8002d64:	2114      	movs	r1, #20
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f00e f8a8 	bl	8010ebc <VL53LX_WriteMulti>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8002d70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d107      	bne.n	8002d88 <VL53LX_run_ref_spad_char+0xe8>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8002d78:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8002d80:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53LX_ERROR_NONE)
 8002d88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d108      	bne.n	8002da2 <VL53LX_run_ref_spad_char+0x102>
		status =
			VL53LX_ReadMulti(
 8002d90:	f107 020c 	add.w	r2, r7, #12
 8002d94:	2306      	movs	r3, #6
 8002d96:	21ac      	movs	r1, #172	; 0xac
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f00e f8c5 	bl	8010f28 <VL53LX_ReadMulti>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53LX_ERROR_NONE)
 8002da2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d108      	bne.n	8002dbc <VL53LX_run_ref_spad_char+0x11c>
		status =
			VL53LX_WriteMulti(
 8002daa:	f107 020c 	add.w	r2, r7, #12
 8002dae:	2306      	movs	r3, #6
 8002db0:	210d      	movs	r1, #13
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f00e f882 	bl	8010ebc <VL53LX_WriteMulti>
 8002db8:	4603      	mov	r3, r0
 8002dba:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53LX_ERROR_NONE) {
 8002dbc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d117      	bne.n	8002df4 <VL53LX_run_ref_spad_char+0x154>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8002dc4:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8002dcc:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8002dd4:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8002ddc:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8002de4:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8002dec:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53LX_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53LX_ERROR_NONE) {
 8002df4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d114      	bne.n	8002e26 <VL53LX_run_ref_spad_char+0x186>

		switch (pdev->sys_results.result__range_status) {
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 8002e02:	2b10      	cmp	r3, #16
 8002e04:	d00c      	beq.n	8002e20 <VL53LX_run_ref_spad_char+0x180>
 8002e06:	2b10      	cmp	r3, #16
 8002e08:	dc0e      	bgt.n	8002e28 <VL53LX_run_ref_spad_char+0x188>
 8002e0a:	2b0e      	cmp	r3, #14
 8002e0c:	d002      	beq.n	8002e14 <VL53LX_run_ref_spad_char+0x174>
 8002e0e:	2b0f      	cmp	r3, #15
 8002e10:	d003      	beq.n	8002e1a <VL53LX_run_ref_spad_char+0x17a>
 8002e12:	e009      	b.n	8002e28 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53LX_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8002e14:	23e4      	movs	r3, #228	; 0xe4
 8002e16:	77fb      	strb	r3, [r7, #31]
			break;
 8002e18:	e006      	b.n	8002e28 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8002e1a:	23e3      	movs	r3, #227	; 0xe3
 8002e1c:	77fb      	strb	r3, [r7, #31]
			break;
 8002e1e:	e003      	b.n	8002e28 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8002e20:	23e2      	movs	r3, #226	; 0xe2
 8002e22:	77fb      	strb	r3, [r7, #31]
			break;
 8002e24:	e000      	b.n	8002e28 <VL53LX_run_ref_spad_char+0x188>
		}
	}
 8002e26:	bf00      	nop



	*pcal_status = status;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	7ffa      	ldrb	r2, [r7, #31]
 8002e2c:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8002e2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bdb0      	pop	{r4, r5, r7, pc}

08002e3a <VL53LX_run_device_test>:


VL53LX_Error VL53LX_run_device_test(
	VL53LX_DEV             Dev,
	VL53LX_DeviceTestMode  device_test_mode)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b086      	sub	sp, #24
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3318      	adds	r3, #24
 8002e4e:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8002e54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d108      	bne.n	8002e6e <VL53LX_run_device_test+0x34>
		status =
			VL53LX_RdByte(
 8002e5c:	f107 030b 	add.w	r3, r7, #11
 8002e60:	461a      	mov	r2, r3
 8002e62:	2130      	movs	r1, #48	; 0x30
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f00e f8f1 	bl	801104c <VL53LX_RdByte>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53LX_ERROR_NONE)
 8002e6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d103      	bne.n	8002e7e <VL53LX_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8002e76:	7afa      	ldrb	r2, [r7, #11]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a


	if (status == VL53LX_ERROR_NONE)
 8002e7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <VL53LX_run_device_test+0x5a>
		status = VL53LX_start_test(
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	4619      	mov	r1, r3
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f005 fc03 	bl	8008696 <VL53LX_start_test>
 8002e90:	4603      	mov	r3, r0
 8002e92:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53LX_ERROR_NONE)
 8002e94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d104      	bne.n	8002ea6 <VL53LX_run_device_test+0x6c>
		status = VL53LX_wait_for_test_completion(Dev);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f00d fc4d 	bl	801073c <VL53LX_wait_for_test_completion>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8002ea6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d108      	bne.n	8002ec0 <VL53LX_run_device_test+0x86>
		status =
			VL53LX_ReadMulti(
 8002eae:	f107 020c 	add.w	r2, r7, #12
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	2189      	movs	r1, #137	; 0x89
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f00e f836 	bl	8010f28 <VL53LX_ReadMulti>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8002ec0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d107      	bne.n	8002ed8 <VL53LX_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8002ec8:	7b3a      	ldrb	r2, [r7, #12]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		pdev->sys_results.result__report_status = comms_buffer[1];
 8002ed0:	7b7a      	ldrb	r2, [r7, #13]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
	}



	pdev->sys_results.result__range_status &=
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53LX_ERROR_NONE) {
 8002eea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d108      	bne.n	8002f04 <VL53LX_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53LX_ERROR_NONE)
 8002ef2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d104      	bne.n	8002f04 <VL53LX_run_device_test+0xca>
			status = VL53LX_clear_interrupt(Dev);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f005 fc6b 	bl	80087d6 <VL53LX_clear_interrupt>
 8002f00:	4603      	mov	r3, r0
 8002f02:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53LX_ERROR_NONE)
 8002f04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <VL53LX_run_device_test+0xde>
		status =
			VL53LX_start_test(
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f005 fbc1 	bl	8008696 <VL53LX_start_test>
 8002f14:	4603      	mov	r3, r0
 8002f16:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8002f18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	785b      	ldrb	r3, [r3, #1]
 8002f36:	2b21      	cmp	r3, #33	; 0x21
 8002f38:	d006      	beq.n	8002f48 <select_offset_per_vcsel+0x24>
 8002f3a:	2b21      	cmp	r3, #33	; 0x21
 8002f3c:	dc2a      	bgt.n	8002f94 <select_offset_per_vcsel+0x70>
 8002f3e:	2b1b      	cmp	r3, #27
 8002f40:	d01b      	beq.n	8002f7a <select_offset_per_vcsel+0x56>
 8002f42:	2b1e      	cmp	r3, #30
 8002f44:	d00c      	beq.n	8002f60 <select_offset_per_vcsel+0x3c>
 8002f46:	e025      	b.n	8002f94 <select_offset_per_vcsel+0x70>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f58:	3302      	adds	r3, #2
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	817b      	strh	r3, [r7, #10]
		break;
 8002f5e:	e02b      	b.n	8002fb8 <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f66:	3304      	adds	r3, #4
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f72:	3306      	adds	r3, #6
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	817b      	strh	r3, [r7, #10]
		break;
 8002f78:	e01e      	b.n	8002fb8 <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f80:	3308      	adds	r3, #8
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f8c:	330a      	adds	r3, #10
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	817b      	strh	r3, [r7, #10]
		break;
 8002f92:	e011      	b.n	8002fb8 <select_offset_per_vcsel+0x94>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f9a:	3308      	adds	r3, #8
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002fa6:	330a      	adds	r3, #10
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8002fac:	23fc      	movs	r3, #252	; 0xfc
 8002fae:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	801a      	strh	r2, [r3, #0]
		break;
 8002fb6:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002fbe:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 8002fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10b      	bne.n	8002fe0 <select_offset_per_vcsel+0xbc>
		*poffset = (isc & 0x01) ? tA : tB;
 8002fc8:	7a7b      	ldrb	r3, [r7, #9]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <select_offset_per_vcsel+0xb4>
 8002fd2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002fd6:	e001      	b.n	8002fdc <select_offset_per_vcsel+0xb8>
 8002fd8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	8013      	strh	r3, [r2, #0]

	return status;
 8002fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8002ff0:	b490      	push	{r4, r7}
 8002ff2:	b08a      	sub	sp, #40	; 0x28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	460b      	mov	r3, r1
 8003000:	71fb      	strb	r3, [r7, #7]
 8003002:	4613      	mov	r3, r2
 8003004:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	b29b      	uxth	r3, r3
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003022:	e021      	b.n	8003068 <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8003024:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	461a      	mov	r2, r3
 8003030:	0052      	lsls	r2, r2, #1
 8003032:	441a      	add	r2, r3
 8003034:	00d3      	lsls	r3, r2, #3
 8003036:	461a      	mov	r2, r3
 8003038:	460b      	mov	r3, r1
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	440b      	add	r3, r1
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	4413      	add	r3, r2
 8003042:	4423      	add	r3, r4
 8003044:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8003048:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 800304c:	6a3a      	ldr	r2, [r7, #32]
 800304e:	4413      	add	r3, r2
 8003050:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8003052:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	3206      	adds	r2, #6
 8003058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	4413      	add	r3, r2
 8003060:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003062:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003064:	3301      	adds	r3, #1
 8003066:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003068:	79bb      	ldrb	r3, [r7, #6]
 800306a:	b29b      	uxth	r3, r3
 800306c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800306e:	429a      	cmp	r2, r3
 8003070:	d3d8      	bcc.n	8003024 <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d047      	beq.n	8003108 <vl53lx_diff_histo_stddev+0x118>
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d044      	beq.n	8003108 <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	b29b      	uxth	r3, r3
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003086:	e03a      	b.n	80030fe <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8003088:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	461a      	mov	r2, r3
 8003094:	0052      	lsls	r2, r2, #1
 8003096:	441a      	add	r2, r3
 8003098:	00d3      	lsls	r3, r2, #3
 800309a:	461a      	mov	r2, r3
 800309c:	460b      	mov	r3, r1
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	440b      	add	r3, r1
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	4413      	add	r3, r2
 80030a6:	4423      	add	r3, r4
 80030a8:	f203 7304 	addw	r3, r3, #1796	; 0x704
 80030ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80030b0:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030b8:	fb02 f203 	mul.w	r2, r2, r3
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	fb92 f3f3 	sdiv	r3, r2, r3
 80030c2:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 80030c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	3206      	adds	r2, #6
 80030ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030d2:	fb02 f203 	mul.w	r2, r2, r3
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80030dc:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 80030de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	69b9      	ldr	r1, [r7, #24]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 80030e8:	69b8      	ldr	r0, [r7, #24]
 80030ea:	6979      	ldr	r1, [r7, #20]
 80030ec:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	441a      	add	r2, r3
 80030f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f6:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 80030f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030fa:	3301      	adds	r3, #1
 80030fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80030fe:	79bb      	ldrb	r3, [r7, #6]
 8003100:	b29b      	uxth	r3, r3
 8003102:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003104:	429a      	cmp	r2, r3
 8003106:	d3bf      	bcc.n	8003088 <vl53lx_diff_histo_stddev+0x98>
	}
}
 8003108:	bf00      	nop
 800310a:	3728      	adds	r7, #40	; 0x28
 800310c:	46bd      	mov	sp, r7
 800310e:	bc90      	pop	{r4, r7}
 8003110:	4770      	bx	lr

08003112 <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 8003112:	b5b0      	push	{r4, r5, r7, lr}
 8003114:	b08c      	sub	sp, #48	; 0x30
 8003116:	af02      	add	r7, sp, #8
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3318      	adds	r3, #24
 8003120:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8003130:	2300      	movs	r3, #0
 8003132:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 8003136:	2300      	movs	r3, #0
 8003138:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8003142:	2318      	movs	r3, #24
 8003144:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8003146:	f107 0314 	add.w	r3, r7, #20
 800314a:	461a      	mov	r2, r3
 800314c:	f248 018f 	movw	r1, #32911	; 0x808f
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f002 fbd3 	bl	80058fc <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8003156:	f107 0310 	add.w	r3, r7, #16
 800315a:	461a      	mov	r2, r3
 800315c:	f248 018e 	movw	r1, #32910	; 0x808e
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f002 fbcb 	bl	80058fc <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800316c:	330d      	adds	r3, #13
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f040 811a 	bne.w	80033aa <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8003190:	7efb      	ldrb	r3, [r7, #27]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	b2db      	uxtb	r3, r3
 8003196:	7eba      	ldrb	r2, [r7, #26]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80031a2:	330c      	adds	r3, #12
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d008      	beq.n	80031bc <vl53lx_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80031b0:	330c      	adds	r3, #12
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	3b01      	subs	r3, #1
 80031b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ba:	e004      	b.n	80031c6 <vl53lx_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 80031c6:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80031ca:	7efb      	ldrb	r3, [r7, #27]
 80031cc:	69f8      	ldr	r0, [r7, #28]
 80031ce:	461a      	mov	r2, r3
 80031d0:	0052      	lsls	r2, r2, #1
 80031d2:	441a      	add	r2, r3
 80031d4:	0153      	lsls	r3, r2, #5
 80031d6:	461a      	mov	r2, r3
 80031d8:	460b      	mov	r3, r1
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	440b      	add	r3, r1
 80031de:	019b      	lsls	r3, r3, #6
 80031e0:	4413      	add	r3, r2
 80031e2:	4403      	add	r3, r0
 80031e4:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	dd0c      	ble.n	8003208 <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 80031ee:	7e79      	ldrb	r1, [r7, #25]
 80031f0:	7efa      	ldrb	r2, [r7, #27]
 80031f2:	f107 030c 	add.w	r3, r7, #12
 80031f6:	9301      	str	r3, [sp, #4]
 80031f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	460b      	mov	r3, r1
 8003200:	6839      	ldr	r1, [r7, #0]
 8003202:	69f8      	ldr	r0, [r7, #28]
 8003204:	f7ff fef4 	bl	8002ff0 <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	429a      	cmp	r2, r3
 800320e:	db23      	blt.n	8003258 <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003216:	3310      	adds	r3, #16
 8003218:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f011 f8b2 	bl	8014388 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800322a:	330c      	adds	r3, #12
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]

			recom_been_reset = 1;
 8003230:	2301      	movs	r3, #1
 8003232:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8003236:	7efb      	ldrb	r3, [r7, #27]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d106      	bne.n	800324a <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003242:	330d      	adds	r3, #13
 8003244:	2206      	movs	r2, #6
 8003246:	701a      	strb	r2, [r3, #0]
 8003248:	e034      	b.n	80032b4 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003250:	330d      	adds	r3, #13
 8003252:	2207      	movs	r2, #7
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	e02d      	b.n	80032b4 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800325e:	330c      	adds	r3, #12
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 8003264:	2300      	movs	r3, #0
 8003266:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800326a:	e01e      	b.n	80032aa <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 800326c:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 8003270:	7e39      	ldrb	r1, [r7, #24]
 8003272:	7efb      	ldrb	r3, [r7, #27]
 8003274:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	3006      	adds	r0, #6
 800327c:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8003280:	69f8      	ldr	r0, [r7, #28]
 8003282:	461a      	mov	r2, r3
 8003284:	0052      	lsls	r2, r2, #1
 8003286:	441a      	add	r2, r3
 8003288:	00d3      	lsls	r3, r2, #3
 800328a:	461a      	mov	r2, r3
 800328c:	460b      	mov	r3, r1
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	440b      	add	r3, r1
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	4413      	add	r3, r2
 8003296:	442b      	add	r3, r5
 8003298:	f203 7304 	addw	r3, r3, #1796	; 0x704
 800329c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 80032a0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80032a4:	3301      	adds	r3, #1
 80032a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80032aa:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80032ae:	7ebb      	ldrb	r3, [r7, #26]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d3db      	bcc.n	800326c <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80032ba:	330c      	adds	r3, #12
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d109      	bne.n	80032dc <vl53lx_histo_merge+0x1ca>
 80032c8:	7efb      	ldrb	r3, [r7, #27]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d106      	bne.n	80032dc <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80032d4:	330c      	adds	r3, #12
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	e00e      	b.n	80032fa <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 80032dc:	7efb      	ldrb	r3, [r7, #27]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d10b      	bne.n	80032fa <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80032e8:	330c      	adds	r3, #12
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	3301      	adds	r3, #1
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80032f6:	330c      	adds	r3, #12
 80032f8:	701a      	strb	r2, [r3, #0]

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 80032fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d102      	bne.n	8003308 <vl53lx_histo_merge+0x1f6>
 8003302:	7efb      	ldrb	r3, [r7, #27]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d069      	beq.n	80033dc <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800330e:	330d      	adds	r3, #13
 8003310:	781b      	ldrb	r3, [r3, #0]
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8003312:	2b00      	cmp	r3, #0
 8003314:	d162      	bne.n	80033dc <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 8003316:	2300      	movs	r3, #0
 8003318:	84fb      	strh	r3, [r7, #38]	; 0x26
 800331a:	e008      	b.n	800332e <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 800331c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	3206      	adds	r2, #6
 8003322:	2100      	movs	r1, #0
 8003324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8003328:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800332a:	3301      	adds	r3, #1
 800332c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800332e:	7ebb      	ldrb	r3, [r7, #26]
 8003330:	b29b      	uxth	r3, r3
 8003332:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003334:	429a      	cmp	r2, r3
 8003336:	d3f1      	bcc.n	800331c <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 8003338:	2300      	movs	r3, #0
 800333a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800333c:	e02f      	b.n	800339e <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 800333e:	2300      	movs	r3, #0
 8003340:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003344:	e023      	b.n	800338e <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 8003346:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	3206      	adds	r2, #6
 800334c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 8003350:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003354:	7efb      	ldrb	r3, [r7, #27]
 8003356:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8003358:	69fc      	ldr	r4, [r7, #28]
 800335a:	461a      	mov	r2, r3
 800335c:	0052      	lsls	r2, r2, #1
 800335e:	441a      	add	r2, r3
 8003360:	00d3      	lsls	r3, r2, #3
 8003362:	461a      	mov	r2, r3
 8003364:	460b      	mov	r3, r1
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	440b      	add	r3, r1
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	4413      	add	r3, r2
 800336e:	442b      	add	r3, r5
 8003370:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8003374:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8003378:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800337a:	18c1      	adds	r1, r0, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	3206      	adds	r2, #6
 8003380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 8003384:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003388:	3301      	adds	r3, #1
 800338a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800338e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	429a      	cmp	r2, r3
 8003396:	dbd6      	blt.n	8003346 <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 8003398:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800339a:	3301      	adds	r3, #1
 800339c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800339e:	7ebb      	ldrb	r3, [r7, #26]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d3ca      	bcc.n	800333e <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 80033a8:	e018      	b.n	80033dc <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80033b0:	330d      	adds	r3, #13
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80033be:	330d      	adds	r3, #13
 80033c0:	701a      	strb	r2, [r3, #0]
		if (pdev->pos_before_next_recom == 255)
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80033c8:	330d      	adds	r3, #13
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2bff      	cmp	r3, #255	; 0xff
 80033ce:	d105      	bne.n	80033dc <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80033d6:	330d      	adds	r3, #13
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
}
 80033dc:	bf00      	nop
 80033de:	3728      	adds	r7, #40	; 0x28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bdb0      	pop	{r4, r5, r7, pc}

080033e4 <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b0c6      	sub	sp, #280	; 0x118
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	1d3b      	adds	r3, r7, #4
 80033ec:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80033fa:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d108      	bne.n	8003414 <VL53LX_load_patch+0x30>
		status = VL53LX_WrByte(Dev,
 8003402:	1d3b      	adds	r3, r7, #4
 8003404:	2200      	movs	r2, #0
 8003406:	2185      	movs	r1, #133	; 0x85
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	f00d fdc3 	bl	8010f94 <VL53LX_WrByte>
 800340e:	4603      	mov	r3, r0
 8003410:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003414:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003418:	2b00      	cmp	r3, #0
 800341a:	d103      	bne.n	8003424 <VL53LX_load_patch+0x40>
		VL53LX_enable_powerforce(Dev);
 800341c:	1d3b      	adds	r3, r7, #4
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	f005 f9b5 	bl	800878e <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 8003424:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8003428:	1d3b      	adds	r3, r7, #4
 800342a:	f248 018c 	movw	r1, #32908	; 0x808c
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	f002 fa64 	bl	80058fc <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8003434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003438:	2b03      	cmp	r3, #3
 800343a:	d81b      	bhi.n	8003474 <VL53LX_load_patch+0x90>
 800343c:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <VL53LX_load_patch+0x60>)
 800343e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003442:	bf00      	nop
 8003444:	08003455 	.word	0x08003455
 8003448:	0800345d 	.word	0x0800345d
 800344c:	08003465 	.word	0x08003465
 8003450:	0800346d 	.word	0x0800346d
	case 0:
		patch_power = 0x00;
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800345a:	e00e      	b.n	800347a <VL53LX_load_patch+0x96>
	case 1:
		patch_power = 0x10;
 800345c:	2310      	movs	r3, #16
 800345e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003462:	e00a      	b.n	800347a <VL53LX_load_patch+0x96>
	case 2:
		patch_power = 0x20;
 8003464:	2320      	movs	r3, #32
 8003466:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800346a:	e006      	b.n	800347a <VL53LX_load_patch+0x96>
	case 3:
		patch_power = 0x40;
 800346c:	2340      	movs	r3, #64	; 0x40
 800346e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003472:	e002      	b.n	800347a <VL53LX_load_patch+0x96>
	default:
		patch_power = 0x00;
 8003474:	2300      	movs	r3, #0
 8003476:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 800347a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800347e:	2b00      	cmp	r3, #0
 8003480:	d125      	bne.n	80034ce <VL53LX_load_patch+0xea>

		comms_buffer[0] = 0x29;
 8003482:	f107 030c 	add.w	r3, r7, #12
 8003486:	2229      	movs	r2, #41	; 0x29
 8003488:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 800348a:	f107 030c 	add.w	r3, r7, #12
 800348e:	22c9      	movs	r2, #201	; 0xc9
 8003490:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8003492:	f107 030c 	add.w	r3, r7, #12
 8003496:	220e      	movs	r2, #14
 8003498:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800349a:	f107 030c 	add.w	r3, r7, #12
 800349e:	2240      	movs	r2, #64	; 0x40
 80034a0:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 80034a2:	f107 030c 	add.w	r3, r7, #12
 80034a6:	2228      	movs	r2, #40	; 0x28
 80034a8:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 80034aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	f107 030c 	add.w	r3, r7, #12
 80034b4:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 80034b6:	f107 020c 	add.w	r2, r7, #12
 80034ba:	1d38      	adds	r0, r7, #4
 80034bc:	2306      	movs	r3, #6
 80034be:	f240 4176 	movw	r1, #1142	; 0x476
 80034c2:	6800      	ldr	r0, [r0, #0]
 80034c4:	f00d fcfa 	bl	8010ebc <VL53LX_WriteMulti>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 80034ce:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d123      	bne.n	800351e <VL53LX_load_patch+0x13a>
		comms_buffer[0] = 0x03;
 80034d6:	f107 030c 	add.w	r3, r7, #12
 80034da:	2203      	movs	r2, #3
 80034dc:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 80034de:	f107 030c 	add.w	r3, r7, #12
 80034e2:	226d      	movs	r2, #109	; 0x6d
 80034e4:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 80034e6:	f107 030c 	add.w	r3, r7, #12
 80034ea:	2203      	movs	r2, #3
 80034ec:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 80034ee:	f107 030c 	add.w	r3, r7, #12
 80034f2:	226f      	movs	r2, #111	; 0x6f
 80034f4:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 80034f6:	f107 030c 	add.w	r3, r7, #12
 80034fa:	2207      	movs	r2, #7
 80034fc:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 80034fe:	f107 030c 	add.w	r3, r7, #12
 8003502:	2229      	movs	r2, #41	; 0x29
 8003504:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 8003506:	f107 020c 	add.w	r2, r7, #12
 800350a:	1d38      	adds	r0, r7, #4
 800350c:	2306      	movs	r3, #6
 800350e:	f240 4196 	movw	r1, #1174	; 0x496
 8003512:	6800      	ldr	r0, [r0, #0]
 8003514:	f00d fcd2 	bl	8010ebc <VL53LX_WriteMulti>
 8003518:	4603      	mov	r3, r0
 800351a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 800351e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003522:	2b00      	cmp	r3, #0
 8003524:	d113      	bne.n	800354e <VL53LX_load_patch+0x16a>
		comms_buffer[0] = 0x00;
 8003526:	f107 030c 	add.w	r3, r7, #12
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800352e:	f107 030c 	add.w	r3, r7, #12
 8003532:	2207      	movs	r2, #7
 8003534:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8003536:	f107 020c 	add.w	r2, r7, #12
 800353a:	1d38      	adds	r0, r7, #4
 800353c:	2302      	movs	r3, #2
 800353e:	f240 4172 	movw	r1, #1138	; 0x472
 8003542:	6800      	ldr	r0, [r0, #0]
 8003544:	f00d fcba 	bl	8010ebc <VL53LX_WriteMulti>
 8003548:	4603      	mov	r3, r0
 800354a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 800354e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003552:	2b00      	cmp	r3, #0
 8003554:	d113      	bne.n	800357e <VL53LX_load_patch+0x19a>
		comms_buffer[0] = 0x00;
 8003556:	f107 030c 	add.w	r3, r7, #12
 800355a:	2200      	movs	r2, #0
 800355c:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800355e:	f107 030c 	add.w	r3, r7, #12
 8003562:	2207      	movs	r2, #7
 8003564:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8003566:	f107 020c 	add.w	r2, r7, #12
 800356a:	1d38      	adds	r0, r7, #4
 800356c:	2302      	movs	r3, #2
 800356e:	f240 4174 	movw	r1, #1140	; 0x474
 8003572:	6800      	ldr	r0, [r0, #0]
 8003574:	f00d fca2 	bl	8010ebc <VL53LX_WriteMulti>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 800357e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <VL53LX_load_patch+0x1b6>
		status = VL53LX_WrByte(Dev,
 8003586:	1d3b      	adds	r3, r7, #4
 8003588:	2201      	movs	r2, #1
 800358a:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	f00d fd00 	bl	8010f94 <VL53LX_WrByte>
 8003594:	4603      	mov	r3, r0
 8003596:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 800359a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d108      	bne.n	80035b4 <VL53LX_load_patch+0x1d0>
		status = VL53LX_WrByte(Dev,
 80035a2:	1d3b      	adds	r3, r7, #4
 80035a4:	2201      	movs	r2, #1
 80035a6:	2185      	movs	r1, #133	; 0x85
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	f00d fcf3 	bl	8010f94 <VL53LX_WrByte>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 80035b4:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop

080035c4 <VL53LX_unload_patch>:

VL53LX_Error VL53LX_unload_patch(VL53LX_DEV Dev)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 80035cc:	2300      	movs	r3, #0
 80035ce:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE)
 80035d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d106      	bne.n	80035e6 <VL53LX_unload_patch+0x22>
		status = VL53LX_WrByte(Dev,
 80035d8:	2200      	movs	r2, #0
 80035da:	2185      	movs	r1, #133	; 0x85
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f00d fcd9 	bl	8010f94 <VL53LX_WrByte>
 80035e2:	4603      	mov	r3, r0
 80035e4:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 80035e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d102      	bne.n	80035f4 <VL53LX_unload_patch+0x30>
		VL53LX_disable_powerforce(Dev);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f005 f8df 	bl	80087b2 <VL53LX_disable_powerforce>

	if (status == VL53LX_ERROR_NONE)
 80035f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d107      	bne.n	800360c <VL53LX_unload_patch+0x48>
		status = VL53LX_WrByte(Dev,
 80035fc:	2200      	movs	r2, #0
 80035fe:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f00d fcc6 	bl	8010f94 <VL53LX_WrByte>
 8003608:	4603      	mov	r3, r0
 800360a:	73fb      	strb	r3, [r7, #15]
		VL53LX_PATCH__CTRL, 0x00);

	if (status == VL53LX_ERROR_NONE)
 800360c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d106      	bne.n	8003622 <VL53LX_unload_patch+0x5e>
		status = VL53LX_WrByte(Dev,
 8003614:	2201      	movs	r2, #1
 8003616:	2185      	movs	r1, #133	; 0x85
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f00d fcbb 	bl	8010f94 <VL53LX_WrByte>
 800361e:	4603      	mov	r3, r0
 8003620:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8003622:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800362e:	b5b0      	push	{r4, r5, r7, lr}
 8003630:	b08a      	sub	sp, #40	; 0x28
 8003632:	af04      	add	r7, sp, #16
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800363a:	2300      	movs	r3, #0
 800363c:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3318      	adds	r3, #24
 8003642:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800364a:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 8003650:	2162      	movs	r1, #98	; 0x62
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f004 f920 	bl	8007898 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2204      	movs	r2, #4
 800365c:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2205      	movs	r2, #5
 8003668:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	pres->zone_results.active_zones    = 0;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003674:	2300      	movs	r3, #0
 8003676:	75bb      	strb	r3, [r7, #22]
 8003678:	e01b      	b.n	80036b2 <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 800367a:	7dba      	ldrb	r2, [r7, #22]
 800367c:	4613      	mov	r3, r2
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4413      	add	r3, r2
 800368c:	3308      	adds	r3, #8
 800368e:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2200      	movs	r2, #0
 8003694:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2200      	movs	r2, #0
 800369a:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2200      	movs	r2, #0
 80036a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80036ac:	7dbb      	ldrb	r3, [r7, #22]
 80036ae:	3301      	adds	r3, #1
 80036b0:	75bb      	strb	r3, [r7, #22]
 80036b2:	7dbb      	ldrb	r3, [r7, #22]
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d9e0      	bls.n	800367a <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2205      	movs	r2, #5
 80036bc:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
	pres->zone_hists.active_zones      = 0;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2205      	movs	r2, #5
 80036cc:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
	pres->zone_cal.active_zones        = 0;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80036d8:	2300      	movs	r3, #0
 80036da:	75bb      	strb	r3, [r7, #22]
 80036dc:	e039      	b.n	8003752 <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 80036de:	7dba      	ldrb	r2, [r7, #22]
 80036e0:	68f9      	ldr	r1, [r7, #12]
 80036e2:	4613      	mov	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	f503 7365 	add.w	r3, r3, #916	; 0x394
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 80036f4:	7dba      	ldrb	r2, [r7, #22]
 80036f6:	68f9      	ldr	r1, [r7, #12]
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 800370a:	7dba      	ldrb	r2, [r7, #22]
 800370c:	68f9      	ldr	r1, [r7, #12]
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 8003720:	7dba      	ldrb	r2, [r7, #22]
 8003722:	68f9      	ldr	r1, [r7, #12]
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 8003736:	7dba      	ldrb	r2, [r7, #22]
 8003738:	68f9      	ldr	r1, [r7, #12]
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 800374c:	7dbb      	ldrb	r3, [r7, #22]
 800374e:	3301      	adds	r3, #1
 8003750:	75bb      	strb	r3, [r7, #22]
 8003752:	7dbb      	ldrb	r3, [r7, #22]
 8003754:	2b04      	cmp	r3, #4
 8003756:	d9c2      	bls.n	80036de <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	2200      	movs	r2, #0
 800375c:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	221e      	movs	r2, #30
 8003762:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	2200      	movs	r2, #0
 8003768:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2200      	movs	r2, #0
 800376e:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2201      	movs	r2, #1
 8003774:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2201      	movs	r2, #1
 800377a:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2201      	movs	r2, #1
 8003780:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003788:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003790:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8003798:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	2264      	movs	r2, #100	; 0x64
 800379e:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80037a6:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80037b6:	3302      	adds	r3, #2
 80037b8:	2203      	movs	r2, #3
 80037ba:	701a      	strb	r2, [r3, #0]
	pdev->offset_results.active_results = 0;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80037c2:	3303      	adds	r3, #3
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]



	pdev->gain_cal.standard_ranging_gain_factor =
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f240 72db 	movw	r2, #2011	; 0x7db
 80037ce:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f240 72c3 	movw	r2, #1987	; 0x7c3
 80037d8:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f004 f83f 	bl	8007860 <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80037e8:	3310      	adds	r3, #16
 80037ea:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80037ee:	2100      	movs	r1, #0
 80037f0:	4618      	mov	r0, r3
 80037f2:	f010 fdc9 	bl	8014388 <memset>
	pdev->bin_rec_pos = 0;
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80037fc:	330c      	adds	r3, #12
 80037fe:	2200      	movs	r2, #0
 8003800:	701a      	strb	r2, [r3, #0]
	pdev->pos_before_next_recom = 0;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003808:	330d      	adds	r3, #13
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 800380e:	78fb      	ldrb	r3, [r7, #3]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <VL53LX_data_init+0x1f8>
 8003814:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d104      	bne.n	8003826 <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f8b7 	bl	8003990 <VL53LX_read_p2p_data>
 8003822:	4603      	mov	r3, r0
 8003824:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8003826:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d107      	bne.n	800383e <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003834:	4618      	mov	r0, r3
 8003836:	f002 ffdf 	bl	80067f8 <VL53LX_init_refspadchar_config_struct>
 800383a:	4603      	mov	r3, r0
 800383c:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 800383e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d107      	bne.n	8003856 <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800384c:	4618      	mov	r0, r3
 800384e:	f002 fff7 	bl	8006840 <VL53LX_init_ssc_config_struct>
 8003852:	4603      	mov	r3, r0
 8003854:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003856:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10b      	bne.n	8003876 <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800386a:	4619      	mov	r1, r3
 800386c:	4610      	mov	r0, r2
 800386e:	f003 f808 	bl	8006882 <VL53LX_init_xtalk_config_struct>
 8003872:	4603      	mov	r3, r0
 8003874:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003876:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d107      	bne.n	800388e <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8003884:	4618      	mov	r0, r3
 8003886:	f003 f86f 	bl	8006968 <VL53LX_init_xtalk_extract_config_struct>
 800388a:	4603      	mov	r3, r0
 800388c:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 800388e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d107      	bne.n	80038a6 <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800389c:	4618      	mov	r0, r3
 800389e:	f003 f892 	bl	80069c6 <VL53LX_init_offset_cal_config_struct>
 80038a2:	4603      	mov	r3, r0
 80038a4:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 80038a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d107      	bne.n	80038be <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80038b4:	4618      	mov	r0, r3
 80038b6:	f003 f8ad 	bl	8006a14 <VL53LX_init_zone_cal_config_struct>
 80038ba:	4603      	mov	r3, r0
 80038bc:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 80038be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10b      	bne.n	80038de <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80038d2:	4619      	mov	r1, r3
 80038d4:	4610      	mov	r0, r2
 80038d6:	f003 f8c1 	bl	8006a5c <VL53LX_init_hist_post_process_config_struct>
 80038da:	4603      	mov	r3, r0
 80038dc:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 80038de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d107      	bne.n	80038f6 <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80038ec:	4618      	mov	r0, r3
 80038ee:	f003 fac0 	bl	8006e72 <VL53LX_init_hist_gen3_dmax_config_struct>
 80038f2:	4603      	mov	r3, r0
 80038f4:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 80038f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <VL53LX_data_init+0x2de>
		status = VL53LX_init_tuning_parm_storage_struct(
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	33f8      	adds	r3, #248	; 0xf8
 8003902:	4618      	mov	r0, r3
 8003904:	f003 f919 	bl	8006b3a <VL53LX_init_tuning_parm_storage_struct>
 8003908:	4603      	mov	r3, r0
 800390a:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 800390c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d116      	bne.n	8003942 <VL53LX_data_init+0x314>
		status = VL53LX_set_preset_mode(
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	7858      	ldrb	r0, [r3, #1]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	8b1c      	ldrh	r4, [r3, #24]
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	689d      	ldr	r5, [r3, #8]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	6912      	ldr	r2, [r2, #16]
 8003928:	6939      	ldr	r1, [r7, #16]
 800392a:	6949      	ldr	r1, [r1, #20]
 800392c:	9102      	str	r1, [sp, #8]
 800392e:	9201      	str	r2, [sp, #4]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	462b      	mov	r3, r5
 8003934:	4622      	mov	r2, r4
 8003936:	4601      	mov	r1, r0
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fb3e 	bl	8003fba <VL53LX_set_preset_mode>
 800393e:	4603      	mov	r3, r0
 8003940:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003948:	461a      	mov	r2, r3
 800394a:	2118      	movs	r1, #24
 800394c:	2000      	movs	r0, #0
 800394e:	f008 fa30 	bl	800bdb2 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8003958:	461a      	mov	r2, r3
 800395a:	2118      	movs	r1, #24
 800395c:	2000      	movs	r0, #0
 800395e:	f008 fa28 	bl	800bdb2 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 8003968:	461a      	mov	r2, r3
 800396a:	210c      	movs	r1, #12
 800396c:	2000      	movs	r0, #0
 800396e:	f004 fd33 	bl	80083d8 <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f007 fc24 	bl	800b1c0 <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f007 fb3b 	bl	800aff4 <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f007 fc47 	bl	800b212 <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8003984:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bdb0      	pop	{r4, r5, r7, pc}

08003990 <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b091      	sub	sp, #68	; 0x44
 8003994:	af04      	add	r7, sp, #16
 8003996:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8003998:	2300      	movs	r3, #0
 800399a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3318      	adds	r3, #24
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ae:	3348      	adds	r3, #72	; 0x48
 80039b0:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	339c      	adds	r3, #156	; 0x9c
 80039b6:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80039b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d109      	bne.n	80039d4 <VL53LX_read_p2p_data+0x44>
		status = VL53LX_get_static_nvm_managed(
 80039c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c2:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80039c6:	4619      	mov	r1, r3
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f00b fbb0 	bl	800f12e <VL53LX_get_static_nvm_managed>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 80039d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d108      	bne.n	80039ee <VL53LX_read_p2p_data+0x5e>
		status = VL53LX_get_customer_nvm_managed(
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	3348      	adds	r3, #72	; 0x48
 80039e0:	4619      	mov	r1, r3
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f00b fce1 	bl	800f3aa <VL53LX_get_customer_nvm_managed>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 80039ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d117      	bne.n	8003a26 <VL53LX_read_p2p_data+0x96>

		status = VL53LX_get_nvm_copy_data(
 80039f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f8:	f203 3392 	addw	r3, r3, #914	; 0x392
 80039fc:	4619      	mov	r1, r3
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f00c fbdd 	bl	80101be <VL53LX_get_nvm_copy_data>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 8003a0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d109      	bne.n	8003a26 <VL53LX_read_p2p_data+0x96>
			VL53LX_copy_rtn_good_spads_to_buffer(
 8003a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a14:	f203 3292 	addw	r2, r3, #914	; 0x392
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4610      	mov	r0, r2
 8003a22:	f004 fa2f 	bl	8007e84 <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 8003a26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10e      	bne.n	8003a4c <VL53LX_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	895b      	ldrh	r3, [r3, #10]
 8003a32:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 8003a4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d108      	bne.n	8003a66 <VL53LX_read_p2p_data+0xd6>
		status =
			VL53LX_read_nvm_optical_centre(
 8003a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a56:	33c0      	adds	r3, #192	; 0xc0
 8003a58:	4619      	mov	r1, r3
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f00b fa1b 	bl	800ee96 <VL53LX_read_nvm_optical_centre>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 8003a66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d108      	bne.n	8003a80 <VL53LX_read_p2p_data+0xf0>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	3360      	adds	r3, #96	; 0x60
 8003a72:	4619      	mov	r1, r3
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f00b fa31 	bl	800eedc <VL53LX_read_nvm_cal_peak_rate_map>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 8003a80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d12d      	bne.n	8003ae4 <VL53LX_read_p2p_data+0x154>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	339c      	adds	r3, #156	; 0x9c
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f00b fa4a 	bl	800ef28 <VL53LX_read_nvm_additional_offset_cal_data>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	889b      	ldrh	r3, [r3, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d120      	bne.n	8003ae4 <VL53LX_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d11c      	bne.n	8003ae4 <VL53LX_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	2280      	movs	r2, #128	; 0x80
 8003aae:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003ab6:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	f893 03c2 	ldrb.w	r0, [r3, #962]	; 0x3c2
 8003abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac0:	f893 43c3 	ldrb.w	r4, [r3, #963]	; 0x3c3
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac6:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003aca:	69fa      	ldr	r2, [r7, #28]
 8003acc:	69f9      	ldr	r1, [r7, #28]
 8003ace:	3102      	adds	r1, #2
 8003ad0:	9103      	str	r1, [sp, #12]
 8003ad2:	9202      	str	r2, [sp, #8]
 8003ad4:	2238      	movs	r2, #56	; 0x38
 8003ad6:	9201      	str	r2, [sp, #4]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	23ff      	movs	r3, #255	; 0xff
 8003adc:	22c7      	movs	r2, #199	; 0xc7
 8003ade:	4621      	mov	r1, r4
 8003ae0:	f006 f97a 	bl	8009dd8 <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 8003ae4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d12f      	bne.n	8003b4c <VL53LX_read_p2p_data+0x1bc>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 8003aec:	f107 030c 	add.w	r3, r7, #12
 8003af0:	461a      	mov	r2, r3
 8003af2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f00b fa39 	bl	800ef6e <VL53LX_read_nvm_fmt_range_results_data>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 8003b02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d120      	bne.n	8003b4c <VL53LX_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8003b0a:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8003b12:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8003b1a:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8003b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d006      	beq.n	8003b3a <VL53LX_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8003b38:	e003      	b.n	8003b42 <VL53LX_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	2214      	movs	r2, #20
 8003b3e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b48:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 8003b4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10b      	bne.n	8003b6c <VL53LX_read_p2p_data+0x1dc>
		status =
			VL53LX_RdWord(
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	21de      	movs	r1, #222	; 0xde
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f00d faa7 	bl	80110b4 <VL53LX_RdWord>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8003b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b76:	d204      	bcs.n	8003b82 <VL53LX_read_p2p_data+0x1f2>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7a:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8003b7e:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
	}



	if (status == VL53LX_ERROR_NONE)
 8003b82:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d108      	bne.n	8003b9c <VL53LX_read_p2p_data+0x20c>
		status =
			VL53LX_get_mode_mitigation_roi(
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	33bc      	adds	r3, #188	; 0xbc
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f91a 	bl	8003dca <VL53LX_get_mode_mitigation_roi>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d114      	bne.n	8003bd0 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8003ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10f      	bne.n	8003bd0 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8003bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8003bd0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3734      	adds	r7, #52	; 0x34
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd90      	pop	{r4, r7, pc}

08003bdc <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3318      	adds	r3, #24
 8003bee:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <VL53LX_set_inter_measurement_period_ms+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003bfe:	23f1      	movs	r3, #241	; 0xf1
 8003c00:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 8003c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10e      	bne.n	8003c28 <VL53LX_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003c16:	3304      	adds	r3, #4
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	}

	LOG_FUNCTION_END(status);

	return status;
 8003c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3318      	adds	r3, #24
 8003c4e:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <VL53LX_set_timeouts_us+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003c5a:	23f1      	movs	r3, #241	; 0xf1
 8003c5c:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 8003c5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d11b      	bne.n	8003c9e <VL53LX_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f8b3 12de 	ldrh.w	r1, [r3, #734]	; 0x2de
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	f502 724d 	add.w	r2, r2, #820	; 0x334
 8003c8a:	9201      	str	r2, [sp, #4]
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	68b8      	ldr	r0, [r7, #8]
 8003c96:	f004 ff42 	bl	8008b1e <VL53LX_calc_timeout_register_values>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8003c9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b088      	sub	sp, #32
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3318      	adds	r3, #24
 8003cc0:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <VL53LX_get_timeouts_us+0x2e>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003cd4:	23f1      	movs	r3, #241	; 0xf1
 8003cd6:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 8003cd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d14a      	bne.n	8003d76 <VL53LX_get_timeouts_us+0xcc>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	f8b3 22de 	ldrh.w	r2, [r3, #734]	; 0x2de
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f004 fd8e 	bl	8008810 <VL53LX_calc_macro_period_us>
 8003cf4:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
			VL53LX_calc_timeout_us(
 8003cfc:	6979      	ldr	r1, [r7, #20]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f004 fe4d 	bl	800899e <VL53LX_calc_timeout_us>
 8003d04:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		timeout_encoded =
 8003d10:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8003d12:	8a7b      	ldrh	r3, [r7, #18]
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8003d1e:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8003d20:	4413      	add	r3, r2
 8003d22:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8003d24:	8a7b      	ldrh	r3, [r7, #18]
 8003d26:	6979      	ldr	r1, [r7, #20]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f004 fe9d 	bl	8008a68 <VL53LX_calc_decoded_timeout_us>
 8003d2e:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
		timeout_encoded =
 8003d3a:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8003d3c:	8a7b      	ldrh	r3, [r7, #18]
 8003d3e:	021b      	lsls	r3, r3, #8
 8003d40:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8003d48:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8003d4a:	4413      	add	r3, r2
 8003d4c:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8003d4e:	8a7b      	ldrh	r3, [r7, #18]
 8003d50:	6979      	ldr	r1, [r7, #20]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f004 fe88 	bl	8008a68 <VL53LX_calc_decoded_timeout_us>
 8003d58:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8003d76:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3720      	adds	r7, #32
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3318      	adds	r3, #24
 8003d94:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	7858      	ldrb	r0, [r3, #1]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	7819      	ldrb	r1, [r3, #0]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f203 335b 	addw	r3, r3, #859	; 0x35b
 8003da4:	461a      	mov	r2, r3
 8003da6:	f005 fe94 	bl	8009ad2 <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	7898      	ldrb	r0, [r3, #2]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	78d9      	ldrb	r1, [r3, #3]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8003db8:	461a      	mov	r2, r3
 8003dba:	f005 fec9 	bl	8009b50 <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8003dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b086      	sub	sp, #24
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3318      	adds	r3, #24
 8003ddc:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f893 33c2 	ldrb.w	r3, [r3, #962]	; 0x3c2
 8003df0:	f107 020e 	add.w	r2, r7, #14
 8003df4:	f107 010d 	add.w	r1, r7, #13
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f008 f883 	bl	800bf04 <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8003dfe:	7bba      	ldrb	r2, [r7, #14]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8003e04:	7b7a      	ldrb	r2, [r7, #13]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f893 33c3 	ldrb.w	r3, [r3, #963]	; 0x3c3
 8003e10:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8003e28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <VL53LX_init_zone_config_histogram_bins>:

VL53LX_Error VL53LX_init_zone_config_histogram_bins(
	VL53LX_zone_config_t   *pdata)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8003e40:	2300      	movs	r3, #0
 8003e42:	73fb      	strb	r3, [r7, #15]
 8003e44:	e008      	b.n	8003e58 <VL53LX_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	for (i = 0; i < pdata->max_zones; i++)
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	3301      	adds	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	7bfa      	ldrb	r2, [r7, #15]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d3f1      	bcc.n	8003e46 <VL53LX_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 8003e62:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <VL53LX_set_zone_config>:

VL53LX_Error VL53LX_set_zone_config(
	VL53LX_DEV                 Dev,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
 8003e7a:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3318      	adds	r3, #24
 8003e84:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	331c      	adds	r3, #28
 8003e90:	2214      	movs	r2, #20
 8003e92:	4619      	mov	r1, r3
 8003e94:	f010 fa6a 	bl	801436c <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	781a      	ldrb	r2, [r3, #0]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	785a      	ldrb	r2, [r3, #1]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53LX_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	33c2      	adds	r3, #194	; 0xc2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ffbf 	bl	8003e34 <VL53LX_init_zone_config_histogram_bins>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	785b      	ldrb	r3, [r3, #1]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d104      	bne.n	8003ecc <VL53LX_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8003eca:	e00f      	b.n	8003eec <VL53LX_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53LX_MAX_USER_ZONES)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	785b      	ldrb	r3, [r3, #1]
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d807      	bhi.n	8003ee4 <VL53LX_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	785b      	ldrb	r3, [r3, #1]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8003ee2:	e003      	b.n	8003eec <VL53LX_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2206      	movs	r2, #6
 8003ee8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
				VL53LX_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8003eec:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	460b      	mov	r3, r1
 8003f06:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3318      	adds	r3, #24
 8003f10:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8003f12:	7afb      	ldrb	r3, [r7, #11]
 8003f14:	2b21      	cmp	r3, #33	; 0x21
 8003f16:	d030      	beq.n	8003f7a <VL53LX_get_preset_mode_timing_cfg+0x82>
 8003f18:	2b21      	cmp	r3, #33	; 0x21
 8003f1a:	dc43      	bgt.n	8003fa4 <VL53LX_get_preset_mode_timing_cfg+0xac>
 8003f1c:	2b1b      	cmp	r3, #27
 8003f1e:	d002      	beq.n	8003f26 <VL53LX_get_preset_mode_timing_cfg+0x2e>
 8003f20:	2b1e      	cmp	r3, #30
 8003f22:	d015      	beq.n	8003f50 <VL53LX_get_preset_mode_timing_cfg+0x58>
 8003f24:	e03e      	b.n	8003fa4 <VL53LX_get_preset_mode_timing_cfg+0xac>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
		*pphasecal_config_timeout_us =
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	601a      	str	r2, [r3, #0]

	break;
 8003f4e:	e02c      	b.n	8003faa <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
		*pphasecal_config_timeout_us =
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	601a      	str	r2, [r3, #0]
	break;
 8003f78:	e017      	b.n	8003faa <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
		*pphasecal_config_timeout_us =
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	601a      	str	r2, [r3, #0]
	break;
 8003fa2:	e002      	b.n	8003faa <VL53LX_get_preset_mode_timing_cfg+0xb2>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003fa4:	23fc      	movs	r3, #252	; 0xfc
 8003fa6:	75fb      	strb	r3, [r7, #23]
		break;
 8003fa8:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8003faa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b096      	sub	sp, #88	; 0x58
 8003fbe:	af06      	add	r7, sp, #24
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	607b      	str	r3, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	72fb      	strb	r3, [r7, #11]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_LLDriverData_t *pdev =
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	3318      	adds	r3, #24
 8003fd6:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003fde:	637b      	str	r3, [r7, #52]	; 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003fe6:	633b      	str	r3, [r7, #48]	; 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8003fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fea:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff2:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8003ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffa:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004002:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8004006:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8004008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800400e:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004012:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004016:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8004018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401a:	33c2      	adds	r3, #194	; 0xc2
 800401c:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800401e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004020:	33f8      	adds	r3, #248	; 0xf8
 8004022:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	7afa      	ldrb	r2, [r7, #11]
 8004028:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800402e:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004034:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004038:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800403a:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 800403c:	2103      	movs	r1, #3
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f003 fc2a 	bl	8007898 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8004044:	7afb      	ldrb	r3, [r7, #11]
 8004046:	2b21      	cmp	r3, #33	; 0x21
 8004048:	d02e      	beq.n	80040a8 <VL53LX_set_preset_mode+0xee>
 800404a:	2b21      	cmp	r3, #33	; 0x21
 800404c:	dc40      	bgt.n	80040d0 <VL53LX_set_preset_mode+0x116>
 800404e:	2b1b      	cmp	r3, #27
 8004050:	d002      	beq.n	8004058 <VL53LX_set_preset_mode+0x9e>
 8004052:	2b1e      	cmp	r3, #30
 8004054:	d014      	beq.n	8004080 <VL53LX_set_preset_mode+0xc6>
 8004056:	e03b      	b.n	80040d0 <VL53LX_set_preset_mode+0x116>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	9304      	str	r3, [sp, #16]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	9303      	str	r3, [sp, #12]
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	9302      	str	r3, [sp, #8]
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	9301      	str	r3, [sp, #4]
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004070:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004072:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004074:	f003 f941 	bl	80072fa <VL53LX_preset_mode_histogram_long_range>
 8004078:	4603      	mov	r3, r0
 800407a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800407e:	e02b      	b.n	80040d8 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	9304      	str	r3, [sp, #16]
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	9303      	str	r3, [sp, #12]
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	9302      	str	r3, [sp, #8]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	9301      	str	r3, [sp, #4]
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004098:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800409a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800409c:	f003 f9cb 	bl	8007436 <VL53LX_preset_mode_histogram_medium_range>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80040a6:	e017      	b.n	80040d8 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	9304      	str	r3, [sp, #16]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	9303      	str	r3, [sp, #12]
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	9302      	str	r3, [sp, #8]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040c4:	f003 fa55 	bl	8007572 <VL53LX_preset_mode_histogram_short_range>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80040ce:	e003      	b.n	80040d8 <VL53LX_set_preset_mode+0x11e>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 80040d0:	23fc      	movs	r3, #252	; 0xfc
 80040d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 80040d6:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 80040d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d105      	bne.n	80040ec <VL53LX_set_preset_mode+0x132>

		pstatic->dss_config__target_total_rate_mcps =
 80040e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e2:	893a      	ldrh	r2, [r7, #8]
 80040e4:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	893a      	ldrh	r2, [r7, #8]
 80040ea:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 80040ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d108      	bne.n	8004106 <VL53LX_set_preset_mode+0x14c>
		status =
			VL53LX_set_timeouts_us(
 80040f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f7ff fd9c 	bl	8003c38 <VL53LX_set_timeouts_us>
 8004100:	4603      	mov	r3, r0
 8004102:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 8004106:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <VL53LX_set_preset_mode+0x162>
		status =
			VL53LX_set_inter_measurement_period_ms(
 800410e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f7ff fd63 	bl	8003bdc <VL53LX_set_inter_measurement_period_ms>
 8004116:	4603      	mov	r3, r0
 8004118:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 800411c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8004122:	3301      	adds	r3, #1
 8004124:	b2da      	uxtb	r2, r3
 8004126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004128:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 800412c:	4619      	mov	r1, r3
 800412e:	4610      	mov	r0, r2
 8004130:	f003 ffc8 	bl	80080c4 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8004134:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004138:	4618      	mov	r0, r3
 800413a:	3740      	adds	r7, #64	; 0x40
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b0d2      	sub	sp, #328	; 0x148
 8004144:	af00      	add	r7, sp, #0
 8004146:	1d3b      	adds	r3, r7, #4
 8004148:	6018      	str	r0, [r3, #0]
 800414a:	4608      	mov	r0, r1
 800414c:	4611      	mov	r1, r2
 800414e:	1cfb      	adds	r3, r7, #3
 8004150:	4602      	mov	r2, r0
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	1cbb      	adds	r3, r7, #2
 8004156:	460a      	mov	r2, r1
 8004158:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800415a:	2300      	movs	r3, #0
 800415c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8004160:	1d3b      	adds	r3, r7, #4
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3318      	adds	r3, #24
 8004166:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53LX_LLDriverResults_t  *pres =
 800416a:	1d3b      	adds	r3, r7, #4
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8004172:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8004176:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800417a:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 800417e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8004182:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004186:	3348      	adds	r3, #72	; 0x48
 8004188:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800418c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004190:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 8004194:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8004198:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800419c:	f203 331e 	addw	r3, r3, #798	; 0x31e
 80041a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80041a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80041a8:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80041ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80041b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80041b4:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80041b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80041bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80041c0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80041c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 80041c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80041cc:	332c      	adds	r3, #44	; 0x2c
 80041ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 80041d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80041d6:	3348      	adds	r3, #72	; 0x48
 80041d8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 80041dc:	f107 030c 	add.w	r3, r7, #12
 80041e0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 80041fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004200:	1cfa      	adds	r2, r7, #3
 8004202:	7812      	ldrb	r2, [r2, #0]
 8004204:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8004206:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800420a:	791b      	ldrb	r3, [r3, #4]
 800420c:	b25b      	sxtb	r3, r3
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8004214:	1cfb      	adds	r3, r7, #3
 8004216:	f993 3000 	ldrsb.w	r3, [r3]
 800421a:	4313      	orrs	r3, r2
 800421c:	b25b      	sxtb	r3, r3
 800421e:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8004220:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004224:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8004226:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800422a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53LX_set_user_zone(
 800422e:	3336      	adds	r3, #54	; 0x36
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004236:	4413      	add	r3, r2
 8004238:	1d9a      	adds	r2, r3, #6
 800423a:	1d3b      	adds	r3, r7, #4
 800423c:	4611      	mov	r1, r2
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	f7ff fd9f 	bl	8003d82 <VL53LX_set_user_zone>
 8004244:	4603      	mov	r3, r0
 8004246:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 800424a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800424e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d016      	beq.n	8004284 <VL53LX_init_and_start_range+0x144>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 8004256:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800425a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800425e:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800426c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004270:	4413      	add	r3, r2
 8004272:	1c9a      	adds	r2, r3, #2
 8004274:	1d3b      	adds	r3, r7, #4
 8004276:	4611      	mov	r1, r2
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	f001 fad7 	bl	800582c <VL53LX_set_zone_dss_config>
 800427e:	4603      	mov	r3, r0
 8004280:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8004284:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004288:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10d      	bne.n	80042b0 <VL53LX_init_and_start_range+0x170>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8004294:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 800429c:	2b01      	cmp	r3, #1
 800429e:	d107      	bne.n	80042b0 <VL53LX_init_and_start_range+0x170>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 80042a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80042a4:	f8b3 22a4 	ldrh.w	r2, [r3, #676]	; 0x2a4
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80042a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80042ac:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 80042b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80042b4:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80042b8:	3312      	adds	r3, #18
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2bff      	cmp	r3, #255	; 0xff
 80042be:	d106      	bne.n	80042ce <VL53LX_init_and_start_range+0x18e>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 80042c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80042c4:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80042c8:	3312      	adds	r3, #18
 80042ca:	2200      	movs	r2, #0
 80042cc:	701a      	strb	r2, [r3, #0]


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80042ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80042d2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80042d6:	3311      	adds	r3, #17
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d133      	bne.n	8004346 <VL53LX_init_and_start_range+0x206>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 80042de:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80042e2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80042e6:	3312      	adds	r3, #18
 80042e8:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d12b      	bne.n	8004346 <VL53LX_init_and_start_range+0x206>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 80042ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80042f2:	f893 2320 	ldrb.w	r2, [r3, #800]	; 0x320
		pdev->low_power_auto_data.saved_interrupt_config =
 80042f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80042fa:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80042fe:	3313      	adds	r3, #19
 8004300:	701a      	strb	r2, [r3, #0]

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8004302:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004306:	2220      	movs	r2, #32
 8004308:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		if ((pdev->dyn_cfg.system__sequence_config & (
 800430c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004310:	f893 335d 	ldrb.w	r3, [r3, #861]	; 0x35d
 8004314:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004318:	2b00      	cmp	r3, #0
 800431a:	d109      	bne.n	8004330 <VL53LX_init_and_start_range+0x1f0>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 800431c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004320:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004324:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8004326:	b21a      	sxth	r2, r3
 8004328:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800432c:	825a      	strh	r2, [r3, #18]
 800432e:	e003      	b.n	8004338 <VL53LX_init_and_start_range+0x1f8>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8004330:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004334:	2200      	movs	r2, #0
 8004336:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8004338:	1cbb      	adds	r3, r7, #2
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b04      	cmp	r3, #4
 800433e:	d802      	bhi.n	8004346 <VL53LX_init_and_start_range+0x206>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8004340:	1cbb      	adds	r3, r7, #2
 8004342:	2205      	movs	r2, #5
 8004344:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004346:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800434a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800434e:	3311      	adds	r3, #17
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d114      	bne.n	8004380 <VL53LX_init_and_start_range+0x240>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8004356:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800435a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800435e:	3312      	adds	r3, #18
 8004360:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004362:	2b01      	cmp	r3, #1
 8004364:	d10c      	bne.n	8004380 <VL53LX_init_and_start_range+0x240>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8004366:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800436a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800436e:	3313      	adds	r3, #19
 8004370:	781a      	ldrb	r2, [r3, #0]
		pdev->gen_cfg.system__interrupt_config_gpio =
 8004372:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004376:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 800437a:	1cbb      	adds	r3, r7, #2
 800437c:	2206      	movs	r2, #6
 800437e:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 8004380:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004384:	2b00      	cmp	r3, #0
 8004386:	d106      	bne.n	8004396 <VL53LX_init_and_start_range+0x256>
		status = VL53LX_save_cfg_data(Dev);
 8004388:	1d3b      	adds	r3, r7, #4
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	f005 fe8e 	bl	800a0ac <VL53LX_save_cfg_data>
 8004390:	4603      	mov	r3, r0
 8004392:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 8004396:	1cbb      	adds	r3, r7, #2
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	3b01      	subs	r3, #1
 800439c:	2b05      	cmp	r3, #5
 800439e:	d827      	bhi.n	80043f0 <VL53LX_init_and_start_range+0x2b0>
 80043a0:	a201      	add	r2, pc, #4	; (adr r2, 80043a8 <VL53LX_init_and_start_range+0x268>)
 80043a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a6:	bf00      	nop
 80043a8:	080043e9 	.word	0x080043e9
 80043ac:	080043e1 	.word	0x080043e1
 80043b0:	080043d9 	.word	0x080043d9
 80043b4:	080043d1 	.word	0x080043d1
 80043b8:	080043c9 	.word	0x080043c9
 80043bc:	080043c1 	.word	0x080043c1
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80043c6:	e017      	b.n	80043f8 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 80043c8:	230d      	movs	r3, #13
 80043ca:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80043ce:	e013      	b.n	80043f8 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 80043d0:	2324      	movs	r3, #36	; 0x24
 80043d2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80043d6:	e00f      	b.n	80043f8 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 80043d8:	2344      	movs	r3, #68	; 0x44
 80043da:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80043de:	e00b      	b.n	80043f8 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 80043e0:	235a      	movs	r3, #90	; 0x5a
 80043e2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80043e6:	e007      	b.n	80043f8 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 80043e8:	2371      	movs	r3, #113	; 0x71
 80043ea:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80043ee:	e003      	b.n	80043f8 <VL53LX_init_and_start_range+0x2b8>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 80043f0:	2383      	movs	r3, #131	; 0x83
 80043f2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80043f6:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 80043f8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80043fc:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8004400:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8004404:	f107 030c 	add.w	r3, r7, #12
 8004408:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 800440c:	2300      	movs	r3, #0
 800440e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8004412:	e00b      	b.n	800442c <VL53LX_init_and_start_range+0x2ec>
		*pbuffer++ = 0;
 8004414:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800441e:	2200      	movs	r2, #0
 8004420:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8004422:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8004426:	3301      	adds	r3, #1
 8004428:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800442c:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8004430:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8004434:	429a      	cmp	r2, r3
 8004436:	d3ed      	bcc.n	8004414 <VL53LX_init_and_start_range+0x2d4>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 8004438:	1cbb      	adds	r3, r7, #2
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b05      	cmp	r3, #5
 800443e:	d917      	bls.n	8004470 <VL53LX_init_and_start_range+0x330>
 8004440:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004444:	2b00      	cmp	r3, #0
 8004446:	d113      	bne.n	8004470 <VL53LX_init_and_start_range+0x330>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004448:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800444c:	f1c3 0301 	rsb	r3, r3, #1
 8004450:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004454:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 8004458:	f107 020c 	add.w	r2, r7, #12
 800445c:	4413      	add	r3, r2
 800445e:	461a      	mov	r2, r3
 8004460:	210b      	movs	r1, #11
 8004462:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8004466:	f00a fdad 	bl	800efc4 <VL53LX_i2c_encode_static_nvm_managed>
 800446a:	4603      	mov	r3, r0
 800446c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8004470:	1cbb      	adds	r3, r7, #2
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b04      	cmp	r3, #4
 8004476:	d917      	bls.n	80044a8 <VL53LX_init_and_start_range+0x368>
 8004478:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800447c:	2b00      	cmp	r3, #0
 800447e:	d113      	bne.n	80044a8 <VL53LX_init_and_start_range+0x368>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004480:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004484:	f1c3 030d 	rsb	r3, r3, #13
 8004488:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800448c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 8004490:	f107 020c 	add.w	r2, r7, #12
 8004494:	4413      	add	r3, r2
 8004496:	461a      	mov	r2, r3
 8004498:	2117      	movs	r1, #23
 800449a:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800449e:	f00a fe6d 	bl	800f17c <VL53LX_i2c_encode_customer_nvm_managed>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 80044a8:	1cbb      	adds	r3, r7, #2
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d917      	bls.n	80044e0 <VL53LX_init_and_start_range+0x3a0>
 80044b0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d113      	bne.n	80044e0 <VL53LX_init_and_start_range+0x3a0>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80044b8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80044bc:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 80044c0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80044c4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_config(
 80044c8:	f107 020c 	add.w	r2, r7, #12
 80044cc:	4413      	add	r3, r2
 80044ce:	461a      	mov	r2, r3
 80044d0:	2120      	movs	r1, #32
 80044d2:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80044d6:	f00a ffb3 	bl	800f440 <VL53LX_i2c_encode_static_config>
 80044da:	4603      	mov	r3, r0
 80044dc:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80044e0:	1cbb      	adds	r3, r7, #2
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d917      	bls.n	8004518 <VL53LX_init_and_start_range+0x3d8>
 80044e8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d113      	bne.n	8004518 <VL53LX_init_and_start_range+0x3d8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80044f0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80044f4:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 80044f8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80044fc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_general_config(
 8004500:	f107 020c 	add.w	r2, r7, #12
 8004504:	4413      	add	r3, r2
 8004506:	461a      	mov	r2, r3
 8004508:	2116      	movs	r1, #22
 800450a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800450e:	f00b f87a 	bl	800f606 <VL53LX_i2c_encode_general_config>
 8004512:	4603      	mov	r3, r0
 8004514:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8004518:	1cbb      	adds	r3, r7, #2
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d917      	bls.n	8004550 <VL53LX_init_and_start_range+0x410>
 8004520:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004524:	2b00      	cmp	r3, #0
 8004526:	d113      	bne.n	8004550 <VL53LX_init_and_start_range+0x410>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004528:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800452c:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8004530:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004534:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_timing_config(
 8004538:	f107 020c 	add.w	r2, r7, #12
 800453c:	4413      	add	r3, r2
 800453e:	461a      	mov	r2, r3
 8004540:	2117      	movs	r1, #23
 8004542:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8004546:	f00b f8e2 	bl	800f70e <VL53LX_i2c_encode_timing_config>
 800454a:	4603      	mov	r3, r0
 800454c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8004550:	1cbb      	adds	r3, r7, #2
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d036      	beq.n	80045c6 <VL53LX_init_and_start_range+0x486>
 8004558:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800455c:	2b00      	cmp	r3, #0
 800455e:	d132      	bne.n	80045c6 <VL53LX_init_and_start_range+0x486>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004560:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004564:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8004568:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 800456c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004570:	791b      	ldrb	r3, [r3, #4]
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d017      	beq.n	80045aa <VL53LX_init_and_start_range+0x46a>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800457e:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	b2da      	uxtb	r2, r3
 8004586:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800458a:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 800458c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004590:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	b2da      	uxtb	r2, r3
 8004598:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800459c:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 800459e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a2:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 80045a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045a8:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80045aa:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_dynamic_config(
 80045ae:	f107 020c 	add.w	r2, r7, #12
 80045b2:	4413      	add	r3, r2
 80045b4:	461a      	mov	r2, r3
 80045b6:	2112      	movs	r1, #18
 80045b8:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80045bc:	f00b f929 	bl	800f812 <VL53LX_i2c_encode_dynamic_config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 80045c6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d113      	bne.n	80045f6 <VL53LX_init_and_start_range+0x4b6>

		i2c_buffer_offset_bytes =
 80045ce:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80045d2:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 80045d6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80045da:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_system_control(
 80045de:	f107 020c 	add.w	r2, r7, #12
 80045e2:	4413      	add	r3, r2
 80045e4:	461a      	mov	r2, r3
 80045e6:	2105      	movs	r1, #5
 80045e8:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80045ec:	f00b f996 	bl	800f91c <VL53LX_i2c_encode_system_control>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 80045f6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10c      	bne.n	8004618 <VL53LX_init_and_start_range+0x4d8>
		status =
			VL53LX_WriteMulti(
 80045fe:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8004602:	f107 020c 	add.w	r2, r7, #12
 8004606:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 800460a:	1d38      	adds	r0, r7, #4
 800460c:	6800      	ldr	r0, [r0, #0]
 800460e:	f00c fc55 	bl	8010ebc <VL53LX_WriteMulti>
 8004612:	4603      	mov	r3, r0
 8004614:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 8004618:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <VL53LX_init_and_start_range+0x4ee>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 8004620:	1d3b      	adds	r3, r7, #4
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	f003 f968 	bl	80078f8 <VL53LX_update_ll_driver_rd_state>
 8004628:	4603      	mov	r3, r0
 800462a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53LX_ERROR_NONE)
 800462e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004632:	2b00      	cmp	r3, #0
 8004634:	d106      	bne.n	8004644 <VL53LX_init_and_start_range+0x504>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 8004636:	1d3b      	adds	r3, r7, #4
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	f003 fafd 	bl	8007c38 <VL53LX_update_ll_driver_cfg_state>
 800463e:	4603      	mov	r3, r0
 8004640:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 8004644:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8004648:	4618      	mov	r0, r3
 800464a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop

08004654 <VL53LX_stop_range>:


VL53LX_Error VL53LX_stop_range(
	VL53LX_DEV     Dev)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800465c:	2300      	movs	r3, #0
 800465e:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev =
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3318      	adds	r3, #24
 8004664:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800466c:	60fb      	str	r3, [r7, #12]
			VL53LXDevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8004674:	b25b      	sxtb	r3, r3
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	b25b      	sxtb	r3, r3
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800467c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004680:	b25b      	sxtb	r3, r3
 8004682:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
			 VL53LX_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53LX_set_system_control(
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004690:	4619      	mov	r1, r3
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f00b f97d 	bl	800f992 <VL53LX_set_system_control>
 8004698:	4603      	mov	r3, r0
 800469a:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53LX_init_ll_driver_state(
 80046ae:	2103      	movs	r1, #3
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f003 f8f1 	bl	8007898 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 80046bc:	3301      	adds	r3, #1
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80046c6:	4619      	mov	r1, r3
 80046c8:	4610      	mov	r0, r2
 80046ca:	f003 fcfb 	bl	80080c4 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f003 fd2d 	bl	800812e <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80046da:	3311      	adds	r3, #17
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d102      	bne.n	80046e8 <VL53LX_stop_range+0x94>
		VL53LX_low_power_auto_data_stop_range(Dev);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f006 fddc 	bl	800b2a0 <VL53LX_low_power_auto_data_stop_range>

	return status;
 80046e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b0c8      	sub	sp, #288	; 0x120
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	1d3b      	adds	r3, r7, #4
 80046fc:	6018      	str	r0, [r3, #0]
 80046fe:	460a      	mov	r2, r1
 8004700:	1cfb      	adds	r3, r7, #3
 8004702:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004704:	2300      	movs	r3, #0
 8004706:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800470a:	1d3b      	adds	r3, r7, #4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3318      	adds	r3, #24
 8004710:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 8004714:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004718:	f203 3366 	addw	r3, r3, #870	; 0x366
 800471c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 8004720:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004724:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8004728:	3318      	adds	r3, #24
 800472a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800472e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004732:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8004736:	331c      	adds	r3, #28
 8004738:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 800473c:	2388      	movs	r3, #136	; 0x88
 800473e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8004742:	2300      	movs	r3, #0
 8004744:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 800474e:	1cfb      	adds	r3, r7, #3
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d008      	beq.n	8004768 <VL53LX_get_measurement_results+0x74>
 8004756:	2b02      	cmp	r3, #2
 8004758:	d10d      	bne.n	8004776 <VL53LX_get_measurement_results+0x82>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800475a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800475e:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8004762:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8004766:	e00a      	b.n	800477e <VL53LX_get_measurement_results+0x8a>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8004768:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800476c:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8004770:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8004774:	e003      	b.n	800477e <VL53LX_get_measurement_results+0x8a>
	default:
		i2c_buffer_size_bytes =
 8004776:	232c      	movs	r3, #44	; 0x2c
 8004778:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800477c:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 800477e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10c      	bne.n	80047a0 <VL53LX_get_measurement_results+0xac>
		status =
			VL53LX_ReadMulti(
 8004786:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800478a:	f107 0208 	add.w	r2, r7, #8
 800478e:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8004792:	1d38      	adds	r0, r7, #4
 8004794:	6800      	ldr	r0, [r0, #0]
 8004796:	f00c fbc7 	bl	8010f28 <VL53LX_ReadMulti>
 800479a:	4603      	mov	r3, r0
 800479c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 80047a0:	1cfb      	adds	r3, r7, #3
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d917      	bls.n	80047d8 <VL53LX_get_measurement_results+0xe4>
 80047a8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d113      	bne.n	80047d8 <VL53LX_get_measurement_results+0xe4>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80047b0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80047b4:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 80047b8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80047bc:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_debug_results(
 80047c0:	f107 0208 	add.w	r2, r7, #8
 80047c4:	4413      	add	r3, r2
 80047c6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80047ca:	4619      	mov	r1, r3
 80047cc:	2038      	movs	r0, #56	; 0x38
 80047ce:	f00b fa5e 	bl	800fc8e <VL53LX_i2c_decode_debug_results>
 80047d2:	4603      	mov	r3, r0
 80047d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 80047d8:	1cfb      	adds	r3, r7, #3
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d017      	beq.n	8004810 <VL53LX_get_measurement_results+0x11c>
 80047e0:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d113      	bne.n	8004810 <VL53LX_get_measurement_results+0x11c>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80047e8:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80047ec:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80047f0:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80047f4:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_core_results(
 80047f8:	f107 0208 	add.w	r2, r7, #8
 80047fc:	4413      	add	r3, r2
 80047fe:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004802:	4619      	mov	r1, r3
 8004804:	2021      	movs	r0, #33	; 0x21
 8004806:	f00b f9e1 	bl	800fbcc <VL53LX_i2c_decode_core_results>
 800480a:	4603      	mov	r3, r0
 800480c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 8004810:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8004814:	2b00      	cmp	r3, #0
 8004816:	d110      	bne.n	800483a <VL53LX_get_measurement_results+0x146>

		i2c_buffer_offset_bytes = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800481e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_system_results(
 8004822:	f107 0208 	add.w	r2, r7, #8
 8004826:	4413      	add	r3, r2
 8004828:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800482c:	4619      	mov	r1, r3
 800482e:	202c      	movs	r0, #44	; 0x2c
 8004830:	f00b f8d6 	bl	800f9e0 <VL53LX_i2c_decode_system_results>
 8004834:	4603      	mov	r3, r0
 8004836:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800483a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800483e:	4618      	mov	r0, r3
 8004840:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 8004848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800484c:	b0a0      	sub	sp, #128	; 0x80
 800484e:	af06      	add	r7, sp, #24
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	460b      	mov	r3, r1
 8004854:	607a      	str	r2, [r7, #4]
 8004856:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004858:	2300      	movs	r3, #0
 800485a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53LX_LLDriverData_t *pdev =
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3318      	adds	r3, #24
 8004862:	663b      	str	r3, [r7, #96]	; 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800486a:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 800486c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800486e:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 8004870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004872:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004876:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 8004878:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800487a:	332c      	adds	r3, #44	; 0x2c
 800487c:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 800487e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004880:	33c2      	adds	r3, #194	; 0xc2
 8004882:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 8004884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004886:	f503 734c 	add.w	r3, r3, #816	; 0x330
 800488a:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 800488c:	f107 0314 	add.w	r3, r7, #20
 8004890:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8004892:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004894:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004898:	643b      	str	r3, [r7, #64]	; 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 800489a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800489c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80048a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 80048a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048a4:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80048a8:	3310      	adds	r3, #16
 80048aa:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 80048ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048b2:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 80048b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048b6:	3348      	adds	r3, #72	; 0x48
 80048b8:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 80048ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048bc:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80048c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 80048c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048c4:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 80048c8:	331c      	adds	r3, #28
 80048ca:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 80048cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ce:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 8290 	beq.w	8004dfc <VL53LX_get_device_results+0x5b4>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 80048dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048e2:	4619      	mov	r1, r3
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fbcb 	bl	8005080 <VL53LX_get_histogram_bin_data>
 80048ea:	4603      	mov	r3, r0
 80048ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 80048f0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d118      	bne.n	800492a <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 80048f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fa:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d114      	bne.n	800492a <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 8004900:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004902:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 800490a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004912:	4413      	add	r3, r2
 8004914:	1d1a      	adds	r2, r3, #4
 8004916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004918:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f004 f976 	bl	8008c10 <VL53LX_hist_copy_and_scale_ambient_info>
 8004924:	4603      	mov	r3, r0
 8004926:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 800492a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800492e:	2b00      	cmp	r3, #0
 8004930:	f040 8206 	bne.w	8004d40 <VL53LX_get_device_results+0x4f8>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8004934:	f107 0313 	add.w	r3, r7, #19
 8004938:	4619      	mov	r1, r3
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f006 fdd5 	bl	800b4ea <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8004940:	7cfb      	ldrb	r3, [r7, #19]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 8004946:	2301      	movs	r3, #1
 8004948:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 800494a:	7cfb      	ldrb	r3, [r7, #19]
 800494c:	3b01      	subs	r3, #1
 800494e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 8004952:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004954:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8004958:	2b01      	cmp	r3, #1
 800495a:	d107      	bne.n	800496c <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 800495c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	3202      	adds	r2, #2
 8004964:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8004968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496a:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 800496c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800496e:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 8004972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004974:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 8004976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800497c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f004 f84a 	bl	8008a1c <VL53LX_calc_crosstalk_plane_offset_with_margin>
 8004988:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 800498a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800498c:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800498e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004990:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8004994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004996:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800499e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a0:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 80049a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049a4:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 80049a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049a8:	f883 2255 	strb.w	r2, [r3, #597]	; 0x255
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 80049ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ae:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 80049b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049b2:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 80049b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b8:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 80049ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049bc:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 80049c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049c2:	f8b3 22fe 	ldrh.w	r2, [r3, #766]	; 0x2fe
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 80049c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049c8:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 80049cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049ce:	f893 2331 	ldrb.w	r2, [r3, #817]	; 0x331
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 80049d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049d4:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 80049d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049da:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 80049de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e0:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 80049e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e4:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 80049e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ea:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 80049ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ee:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 80049f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f2:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 80049f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f6:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 80049f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049fa:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 80049fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049fe:	f203 3292 	addw	r2, r3, #914	; 0x392
 8004a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a04:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	f003 fa3a 	bl	8007e84 <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8004a10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a12:	795b      	ldrb	r3, [r3, #5]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d002      	beq.n	8004a1e <VL53LX_get_device_results+0x1d6>
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d02e      	beq.n	8004a7a <VL53LX_get_device_results+0x232>
 8004a1c:	e03d      	b.n	8004a9a <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8004a1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a20:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8004a24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8004a34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a36:	f893 e3c2 	ldrb.w	lr, [r3, #962]	; 0x3c2
 8004a3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a3c:	f893 83c3 	ldrb.w	r8, [r3, #963]	; 0x3c3
 8004a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a42:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a48:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 8004a4c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004a4e:	319c      	adds	r1, #156	; 0x9c
 8004a50:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004a52:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 8004a56:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 8004a5a:	b2a4      	uxth	r4, r4
 8004a5c:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8004a5e:	351c      	adds	r5, #28
 8004a60:	9505      	str	r5, [sp, #20]
 8004a62:	9404      	str	r4, [sp, #16]
 8004a64:	9003      	str	r0, [sp, #12]
 8004a66:	9102      	str	r1, [sp, #8]
 8004a68:	9201      	str	r2, [sp, #4]
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	4643      	mov	r3, r8
 8004a6e:	4672      	mov	r2, lr
 8004a70:	4661      	mov	r1, ip
 8004a72:	4630      	mov	r0, r6
 8004a74:	f004 ff7d 	bl	8009972 <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 8004a78:	e013      	b.n	8004aa2 <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8004a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a7c:	331c      	adds	r3, #28
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004a82:	f7fe fa4f 	bl	8002f24 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 8004a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a88:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	b21a      	sxth	r2, r3
 8004a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a96:	839a      	strh	r2, [r3, #28]
		break;
 8004a98:	e003      	b.n	8004aa2 <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 8004a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	839a      	strh	r2, [r3, #28]
		break;
 8004aa0:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 8004aa2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f040 814c 	bne.w	8004d44 <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 8004aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aae:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 8004ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab4:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 8004ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aba:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8004abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac0:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		VL53LX_calc_max_effective_spads(
 8004ac4:	b29c      	uxth	r4, r3
 8004ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac8:	f203 236a 	addw	r3, r3, #618	; 0x26a
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	4623      	mov	r3, r4
 8004ad0:	f005 f8f4 	bl	8009cbc <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 8004ad4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ad6:	799b      	ldrb	r3, [r3, #6]
 8004ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ada:	4619      	mov	r1, r3
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 fee2 	bl	80058a6 <VL53LX_get_dmax_calibration_data>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 8004ae8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f040 812b 	bne.w	8004d48 <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 8004af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004af4:	f503 7515 	add.w	r5, r3, #596	; 0x254
 8004af8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004afa:	f503 7605 	add.w	r6, r3, #532	; 0x214
 8004afe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b06:	f202 521c 	addw	r2, r2, #1308	; 0x51c
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8004b0a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004b0c:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
				pdev->wArea2,
 8004b10:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004b12:	f500 50d0 	add.w	r0, r0, #6656	; 0x1a00
		status = VL53LX_ipp_hist_process_data(
 8004b16:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004b18:	9405      	str	r4, [sp, #20]
 8004b1a:	f107 0413 	add.w	r4, r7, #19
 8004b1e:	9404      	str	r4, [sp, #16]
 8004b20:	9003      	str	r0, [sp, #12]
 8004b22:	9102      	str	r1, [sp, #8]
 8004b24:	9201      	str	r2, [sp, #4]
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	4633      	mov	r3, r6
 8004b2a:	462a      	mov	r2, r5
 8004b2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f00c fbf0 	bl	8011314 <VL53LX_ipp_hist_process_data>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b3c:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d150      	bne.n	8004be6 <VL53LX_get_device_results+0x39e>
			(histo_merge_nb > 1))
 8004b44:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d94d      	bls.n	8004be6 <VL53LX_get_device_results+0x39e>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004b50:	e045      	b.n	8004bde <VL53LX_get_device_results+0x396>
			pdata = &(presults->VL53LX_p_003[i]);
 8004b52:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004b56:	224c      	movs	r2, #76	; 0x4c
 8004b58:	fb02 f303 	mul.w	r3, r2, r3
 8004b5c:	3310      	adds	r3, #16
 8004b5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b60:	4413      	add	r3, r2
 8004b62:	3304      	adds	r3, #4
 8004b64:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	7cfa      	ldrb	r2, [r7, #19]
 8004b6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	7cfa      	ldrb	r2, [r7, #19]
 8004b7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	7cfa      	ldrb	r2, [r7, #19]
 8004b88:	fb93 f2f2 	sdiv	r2, r3, r2
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004b94:	461a      	mov	r2, r3
 8004b96:	7cfb      	ldrb	r3, [r7, #19]
 8004b98:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	7cfb      	ldrb	r3, [r7, #19]
 8004baa:	fb92 f3f3 	sdiv	r3, r2, r3
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004bb8:	461a      	mov	r2, r3
 8004bba:	7cfb      	ldrb	r3, [r7, #19]
 8004bbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	7cfa      	ldrb	r2, [r7, #19]
 8004bcc:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8004bd4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004bd8:	3301      	adds	r3, #1
 8004bda:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004bde:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d9b5      	bls.n	8004b52 <VL53LX_get_device_results+0x30a>
		}


		if (status != VL53LX_ERROR_NONE)
 8004be6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f040 80ae 	bne.w	8004d4c <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 8004bf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bf2:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8004bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bf8:	f503 7171 	add.w	r1, r3, #964	; 0x3c4
 8004bfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bfe:	330e      	adds	r3, #14
 8004c00:	461a      	mov	r2, r3
 8004c02:	f004 fe80 	bl	8009906 <VL53LX_hist_wrap_dmax>
 8004c06:	4603      	mov	r3, r0
 8004c08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 8004c0c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f040 809d 	bne.w	8004d50 <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8004c16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8004c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c28:	4413      	add	r3, r2
 8004c2a:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8004c2c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 8004c30:	4613      	mov	r3, r2
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004c3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c3e:	4413      	add	r3, r2
 8004c40:	f103 0208 	add.w	r2, r3, #8
 8004c44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f004 fa10 	bl	800906c <VL53LX_hist_phase_consistency_check>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 8004c52:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d17c      	bne.n	8004d54 <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8004c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8004c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c6c:	4413      	add	r3, r2
 8004c6e:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8004c70:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8004c74:	4613      	mov	r3, r2
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004c80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c82:	4413      	add	r3, r2
 8004c84:	f103 0208 	add.w	r2, r3, #8
 8004c88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f004 fde1 	bl	8009856 <VL53LX_hist_xmonitor_consistency_check>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 8004c9a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d15a      	bne.n	8004d58 <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 8004ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ca4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8004cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cae:	2205      	movs	r2, #5
 8004cb0:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 8004cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cb4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8004cb8:	3301      	adds	r3, #1
 8004cba:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8004cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbe:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8004cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004cc6:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8004cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cca:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
		if (zid <
 8004cce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d222      	bcs.n	8004d1c <VL53LX_get_device_results+0x4d4>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 8004cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			phist_info =
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cde:	4413      	add	r3, r2
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8004ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce6:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8004ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cea:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8004cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cee:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8004cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf2:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8004cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf6:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 8004cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cfc:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 8004cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d00:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53LX_p_005 =
 8004d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d06:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8004d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 8004d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d10:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8004d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d14:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 8004d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d1a:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 8004d1c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d11b      	bne.n	8004d5c <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 8004d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d26:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
 8004d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d2c:	f203 3266 	addw	r2, r3, #870	; 0x366
 8004d30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d32:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8004d36:	3318      	adds	r3, #24
 8004d38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d3a:	f005 f91c 	bl	8009f76 <VL53LX_hist_copy_results_to_sys_and_core>
 8004d3e:	e00e      	b.n	8004d5e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004d40:	bf00      	nop
 8004d42:	e00c      	b.n	8004d5e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004d44:	bf00      	nop
 8004d46:	e00a      	b.n	8004d5e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004d48:	bf00      	nop
 8004d4a:	e008      	b.n	8004d5e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004d4c:	bf00      	nop
 8004d4e:	e006      	b.n	8004d5e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004d50:	bf00      	nop
 8004d52:	e004      	b.n	8004d5e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004d54:	bf00      	nop
 8004d56:	e002      	b.n	8004d5e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004d58:	bf00      	nop
 8004d5a:	e000      	b.n	8004d5e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004d5c:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 8004d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d60:	785b      	ldrb	r3, [r3, #1]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d036      	beq.n	8004dd4 <VL53LX_get_device_results+0x58c>
			if (pstate->rd_device_state !=
 8004d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d68:	79db      	ldrb	r3, [r3, #7]
 8004d6a:	2b06      	cmp	r3, #6
 8004d6c:	d00a      	beq.n	8004d84 <VL53LX_get_device_results+0x53c>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 8004d6e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <VL53LX_get_device_results+0x53c>
					status = VL53LX_dynamic_zone_update(
 8004d76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f005 f9d0 	bl	800a11e <VL53LX_dynamic_zone_update>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004d84:	2300      	movs	r3, #0
 8004d86:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004d8a:	e015      	b.n	8004db8 <VL53LX_get_device_results+0x570>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8004d8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d8e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 8004d92:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <VL53LX_get_device_results+0x556>
 8004d9a:	2103      	movs	r1, #3
 8004d9c:	e000      	b.n	8004da0 <VL53LX_get_device_results+0x558>
 8004d9e:	2101      	movs	r1, #1
 8004da0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004da4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004da6:	4413      	add	r3, r2
 8004da8:	460a      	mov	r2, r1
 8004daa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004dae:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004db2:	3301      	adds	r3, #1
 8004db4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004db8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d9e5      	bls.n	8004d8c <VL53LX_get_device_results+0x544>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 8004dc0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d105      	bne.n	8004dd4 <VL53LX_get_device_results+0x58c>
				status = VL53LX_multizone_hist_bins_update(Dev);
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f005 fa22 	bl	800a212 <VL53LX_multizone_hist_bins_update>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 8004dd4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d105      	bne.n	8004de8 <VL53LX_get_device_results+0x5a0>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f005 fe79 	bl	800aad4 <VL53LX_dynamic_xtalk_correction_corrector>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (pdev->tuning_parms.tp_hist_merge == 1)
 8004de8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dea:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d151      	bne.n	8004e96 <VL53LX_get_device_results+0x64e>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8004df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	e04c      	b.n	8004e96 <VL53LX_get_device_results+0x64e>
	} else {

		if (status == VL53LX_ERROR_NONE)
 8004dfc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d107      	bne.n	8004e14 <VL53LX_get_device_results+0x5cc>
			status = VL53LX_get_measurement_results(
 8004e04:	7afb      	ldrb	r3, [r7, #11]
 8004e06:	4619      	mov	r1, r3
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f7ff fc73 	bl	80046f4 <VL53LX_get_measurement_results>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 8004e14:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10d      	bne.n	8004e38 <VL53LX_get_device_results+0x5f0>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8004e1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e1e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 8004e22:	4618      	mov	r0, r3
 8004e24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e26:	f203 3166 	addw	r1, r3, #870	; 0x366
 8004e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e2c:	f503 5299 	add.w	r2, r3, #4896	; 0x1320
 8004e30:	3218      	adds	r2, #24
 8004e32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e34:	f000 fb86 	bl	8005544 <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d12a      	bne.n	8004e96 <VL53LX_get_device_results+0x64e>

			if ((status == VL53LX_ERROR_NONE) &&
 8004e40:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10d      	bne.n	8004e64 <VL53LX_get_device_results+0x61c>
				(pL->low_power_auto_range_count == 0)) {
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d109      	bne.n	8004e64 <VL53LX_get_device_results+0x61c>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f006 fa70 	bl	800b336 <VL53LX_low_power_auto_setup_manual_calibration>
 8004e56:	4603      	mov	r3, r0
 8004e58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	2201      	movs	r2, #1
 8004e60:	709a      	strb	r2, [r3, #2]
 8004e62:	e00a      	b.n	8004e7a <VL53LX_get_device_results+0x632>
			} else if ((status == VL53LX_ERROR_NONE) &&
 8004e64:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d106      	bne.n	8004e7a <VL53LX_get_device_results+0x632>
				(pL->low_power_auto_range_count == 1)) {
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d102      	bne.n	8004e7a <VL53LX_get_device_results+0x632>
				pL->low_power_auto_range_count = 2;
 8004e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e76:	2202      	movs	r2, #2
 8004e78:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7c:	789b      	ldrb	r3, [r3, #2]
 8004e7e:	2bff      	cmp	r3, #255	; 0xff
 8004e80:	d009      	beq.n	8004e96 <VL53LX_get_device_results+0x64e>
 8004e82:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d105      	bne.n	8004e96 <VL53LX_get_device_results+0x64e>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f006 faa5 	bl	800b3da <VL53LX_low_power_auto_update_DSS>
 8004e90:	4603      	mov	r3, r0
 8004e92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8004e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e98:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e9e:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8004ea0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ea2:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8004ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ea8:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8004eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eac:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8004eb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eb2:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 8004eb4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f040 80b0 	bne.w	800501e <VL53LX_get_device_results+0x7d6>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8004ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec0:	2205      	movs	r2, #5
 8004ec2:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8004ec6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ec8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8004ecc:	3301      	adds	r3, #1
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ed2:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
		zid = pdev->ll_state.rd_zone_id;
 8004ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ed8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (zid < pres->zone_results.max_zones) {
 8004ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ee2:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8004ee6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004eea:	429a      	cmp	r2, r3
 8004eec:	f080 8097 	bcs.w	800501e <VL53LX_get_device_results+0x7d6>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 8004ef0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
			pobjects =
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004f00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f02:	4413      	add	r3, r2
 8004f04:	3308      	adds	r3, #8
 8004f06:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8004f08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f0a:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8004f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f0e:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8004f10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f12:	785a      	ldrb	r2, [r3, #1]
 8004f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f16:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8004f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f1a:	789a      	ldrb	r2, [r3, #2]
 8004f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f1e:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8004f20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f22:	78da      	ldrb	r2, [r3, #3]
 8004f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f26:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 8004f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f2a:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 8004f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f30:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 8004f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f34:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 8004f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f3a:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 8004f3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f3e:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 8004f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8004f48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f4a:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 8004f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 8004f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f56:	7c5a      	ldrb	r2, [r3, #17]
 8004f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f5a:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8004f5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f5e:	7c9a      	ldrb	r2, [r3, #18]
 8004f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f62:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8004f64:	2300      	movs	r3, #0
 8004f66:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004f6a:	e052      	b.n	8005012 <VL53LX_get_device_results+0x7ca>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004f6c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004f70:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004f74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f76:	204c      	movs	r0, #76	; 0x4c
 8004f78:	fb00 f303 	mul.w	r3, r0, r3
 8004f7c:	440b      	add	r3, r1
 8004f7e:	3338      	adds	r3, #56	; 0x38
 8004f80:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004f82:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004f84:	4613      	mov	r3, r2
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4403      	add	r3, r0
 8004f8e:	3308      	adds	r3, #8
 8004f90:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004f92:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004f96:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004f9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f9c:	204c      	movs	r0, #76	; 0x4c
 8004f9e:	fb00 f303 	mul.w	r3, r0, r3
 8004fa2:	440b      	add	r3, r1
 8004fa4:	333c      	adds	r3, #60	; 0x3c
 8004fa6:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004fa8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004faa:	4613      	mov	r3, r2
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4403      	add	r3, r0
 8004fb4:	330c      	adds	r3, #12
 8004fb6:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004fb8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004fbc:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004fc0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fc2:	204c      	movs	r0, #76	; 0x4c
 8004fc4:	fb00 f303 	mul.w	r3, r0, r3
 8004fc8:	440b      	add	r3, r1
 8004fca:	3354      	adds	r3, #84	; 0x54
 8004fcc:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004fce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	3310      	adds	r3, #16
 8004fdc:	4602      	mov	r2, r0
 8004fde:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 8004fe0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].range_status =
 8004fe4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].range_status;
 8004fe8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fea:	204c      	movs	r0, #76	; 0x4c
 8004fec:	fb00 f303 	mul.w	r3, r0, r3
 8004ff0:	440b      	add	r3, r1
 8004ff2:	335e      	adds	r3, #94	; 0x5e
 8004ff4:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 8004ff6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	3312      	adds	r3, #18
 8005004:	4602      	mov	r2, r0
 8005006:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8005008:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800500c:	3301      	adds	r3, #1
 800500e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005012:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005014:	7c9b      	ldrb	r3, [r3, #18]
 8005016:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800501a:	429a      	cmp	r2, r3
 800501c:	d3a6      	bcc.n	8004f6c <VL53LX_get_device_results+0x724>
		}
	}



	memcpy(
 800501e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8005022:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f00f f9a1 	bl	801436c <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 800502a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800502e:	2b00      	cmp	r3, #0
 8005030:	d105      	bne.n	800503e <VL53LX_get_device_results+0x7f6>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f002 fd4e 	bl	8007ad4 <VL53LX_check_ll_driver_rd_state>
 8005038:	4603      	mov	r3, r0
 800503a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800503e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8005042:	4618      	mov	r0, r3
 8005044:	3768      	adds	r7, #104	; 0x68
 8005046:	46bd      	mov	sp, r7
 8005048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800504c <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8005058:	2300      	movs	r3, #0
 800505a:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 800505c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d107      	bne.n	8005074 <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 8005064:	78fb      	ldrb	r3, [r7, #3]
 8005066:	2203      	movs	r2, #3
 8005068:	4619      	mov	r1, r3
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff f868 	bl	8004140 <VL53LX_init_and_start_range>
 8005070:	4603      	mov	r3, r0
 8005072:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8005074:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b0d2      	sub	sp, #328	; 0x148
 8005084:	af00      	add	r7, sp, #0
 8005086:	1d3b      	adds	r3, r7, #4
 8005088:	6018      	str	r0, [r3, #0]
 800508a:	463b      	mov	r3, r7
 800508c:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800508e:	2300      	movs	r3, #0
 8005090:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev =
 8005094:	1d3b      	adds	r3, r7, #4
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3318      	adds	r3, #24
 800509a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 800509e:	1d3b      	adds	r3, r7, #4
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80050a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 80050aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050ae:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80050b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 80050b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050ba:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80050be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 80050c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050c6:	f203 331e 	addw	r3, r3, #798	; 0x31e
 80050ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 80050ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050d2:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80050d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 80050da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80050de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 80050e2:	f107 030c 	add.w	r3, r7, #12
 80050e6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 80050ea:	2300      	movs	r3, #0
 80050ec:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 80050f6:	2300      	movs	r3, #0
 80050f8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c

	uint32_t   pll_period_us            = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8005108:	2300      	movs	r3, #0
 800510a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t    i                        = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b

	int32_t    hist_merge				= 0;
 8005114:	f107 0308 	add.w	r3, r7, #8
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800511c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <VL53LX_get_histogram_bin_data+0xba>
		status = VL53LX_ReadMulti(
 8005124:	1d38      	adds	r0, r7, #4
 8005126:	2353      	movs	r3, #83	; 0x53
 8005128:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800512c:	2188      	movs	r1, #136	; 0x88
 800512e:	6800      	ldr	r0, [r0, #0]
 8005130:	f00b fefa 	bl	8010f28 <VL53LX_ReadMulti>
 8005134:	4603      	mov	r3, r0
 8005136:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 800513a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800513e:	781a      	ldrb	r2, [r3, #0]
 8005140:	463b      	mov	r3, r7
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8005148:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800514c:	785a      	ldrb	r2, [r3, #1]
 800514e:	463b      	mov	r3, r7
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8005156:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800515a:	789a      	ldrb	r2, [r3, #2]
 800515c:	463b      	mov	r3, r7
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 8005164:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005168:	78da      	ldrb	r2, [r3, #3]
 800516a:	463b      	mov	r3, r7
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 8005172:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005176:	3304      	adds	r3, #4
 8005178:	4619      	mov	r1, r3
 800517a:	2002      	movs	r0, #2
 800517c:	f003 f9aa 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 8005180:	4603      	mov	r3, r0
 8005182:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8005184:	463b      	mov	r3, r7
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 800518c:	234e      	movs	r3, #78	; 0x4e
 800518e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8005192:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005196:	f107 020c 	add.w	r2, r7, #12
 800519a:	4413      	add	r3, r2
 800519c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 80051a0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80051a4:	2002      	movs	r0, #2
 80051a6:	f003 f995 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 80051aa:	4603      	mov	r3, r0
 80051ac:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 80051ae:	463b      	mov	r3, r7
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 80051b6:	2350      	movs	r3, #80	; 0x50
 80051b8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 80051bc:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80051c0:	f107 020c 	add.w	r2, r7, #12
 80051c4:	5cd2      	ldrb	r2, [r2, r3]
 80051c6:	463b      	mov	r3, r7
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 80051ce:	463b      	mov	r3, r7
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 80051d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051da:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 80051de:	331c      	adds	r3, #28
 80051e0:	801a      	strh	r2, [r3, #0]
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 80051e2:	463b      	mov	r3, r7
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 80051ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051ee:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 80051f2:	331e      	adds	r3, #30
 80051f4:	701a      	strb	r2, [r3, #0]



	i2c_buffer_offset_bytes =
 80051f6:	2351      	movs	r3, #81	; 0x51
 80051f8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 80051fc:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005200:	f107 020c 	add.w	r2, r7, #12
 8005204:	5cd3      	ldrb	r3, [r2, r3]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 800520c:	2352      	movs	r3, #82	; 0x52
 800520e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8005212:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005216:	f107 020c 	add.w	r2, r7, #12
 800521a:	5cd2      	ldrb	r2, [r2, r3]
 800521c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8005220:	4413      	add	r3, r2
 8005222:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8005226:	234d      	movs	r3, #77	; 0x4d
 8005228:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 800522c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005230:	f107 020c 	add.w	r2, r7, #12
 8005234:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8005238:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 800523a:	2306      	movs	r3, #6
 800523c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8005240:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005244:	f107 020c 	add.w	r2, r7, #12
 8005248:	4413      	add	r3, r2
 800524a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 800524e:	2300      	movs	r3, #0
 8005250:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005254:	e017      	b.n	8005286 <VL53LX_get_histogram_bin_data+0x206>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8005256:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800525a:	2003      	movs	r0, #3
 800525c:	f003 f9d9 	bl	8008612 <VL53LX_i2c_decode_uint32_t>
 8005260:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8005262:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8005266:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8005268:	463b      	mov	r3, r7
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3206      	adds	r2, #6
 800526e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8005272:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005276:	3303      	adds	r3, #3
 8005278:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 800527c:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8005280:	3301      	adds	r3, #1
 8005282:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005286:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800528a:	2b17      	cmp	r3, #23
 800528c:	d9e3      	bls.n	8005256 <VL53LX_get_histogram_bin_data+0x1d6>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 800528e:	f107 0208 	add.w	r2, r7, #8
 8005292:	1d3b      	adds	r3, r7, #4
 8005294:	f248 018d 	movw	r1, #32909	; 0x808d
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	f000 fb2f 	bl	80058fc <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 800529e:	463b      	mov	r3, r7
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d118      	bne.n	80052dc <VL53LX_get_histogram_bin_data+0x25c>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80052aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052ae:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80052b2:	3310      	adds	r3, #16
 80052b4:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80052b8:	2100      	movs	r1, #0
 80052ba:	4618      	mov	r0, r3
 80052bc:	f00f f864 	bl	8014388 <memset>
		pdev->bin_rec_pos = 0;
 80052c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052c4:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80052c8:	330c      	adds	r3, #12
 80052ca:	2200      	movs	r2, #0
 80052cc:	701a      	strb	r2, [r3, #0]
		pdev->pos_before_next_recom = 0;
 80052ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052d2:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80052d6:	330d      	adds	r3, #13
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
	}

	if (hist_merge == 1)
 80052dc:	f107 0308 	add.w	r3, r7, #8
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d105      	bne.n	80052f2 <VL53LX_get_histogram_bin_data+0x272>
		vl53lx_histo_merge(Dev, pdata);
 80052e6:	463a      	mov	r2, r7
 80052e8:	1d3b      	adds	r3, r7, #4
 80052ea:	6811      	ldr	r1, [r2, #0]
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	f7fd ff10 	bl	8003112 <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 80052f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052f6:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80052fa:	463b      	mov	r3, r7
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 8005300:	463b      	mov	r3, r7
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2200      	movs	r2, #0
 8005306:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8005308:	463b      	mov	r3, r7
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2218      	movs	r2, #24
 800530e:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8005310:	463b      	mov	r3, r7
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2218      	movs	r2, #24
 8005316:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8005318:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800531c:	78da      	ldrb	r2, [r3, #3]
 800531e:	463b      	mov	r3, r7
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8005326:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800532a:	799b      	ldrb	r3, [r3, #6]
 800532c:	b29b      	uxth	r3, r3
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8005332:	463b      	mov	r3, r7
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 800533a:	463b      	mov	r3, r7
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8005342:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005346:	7c1b      	ldrb	r3, [r3, #16]
 8005348:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 800534a:	4413      	add	r3, r2
 800534c:	b29a      	uxth	r2, r3
 800534e:	463b      	mov	r3, r7
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8005356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800535a:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 800535c:	463b      	mov	r3, r7
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 8005364:	463a      	mov	r2, r7
 8005366:	1d3b      	adds	r3, r7, #4
 8005368:	6811      	ldr	r1, [r2, #0]
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	f003 fd20 	bl	8008db0 <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8005370:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005374:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005378:	2b00      	cmp	r3, #0
 800537a:	d114      	bne.n	80053a6 <VL53LX_get_histogram_bin_data+0x326>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 800537c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005380:	791b      	ldrb	r3, [r3, #4]
 8005382:	b29b      	uxth	r3, r3
 8005384:	021b      	lsls	r3, r3, #8
 8005386:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 8005388:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800538c:	795b      	ldrb	r3, [r3, #5]
 800538e:	b29b      	uxth	r3, r3
		encoded_timeout =
 8005390:	4413      	add	r3, r2
 8005392:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 8005396:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800539a:	799a      	ldrb	r2, [r3, #6]
 800539c:	463b      	mov	r3, r7
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80053a4:	e013      	b.n	80053ce <VL53LX_get_histogram_bin_data+0x34e>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 80053a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053aa:	79db      	ldrb	r3, [r3, #7]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 80053b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053b6:	7a1b      	ldrb	r3, [r3, #8]
 80053b8:	b29b      	uxth	r3, r3
		encoded_timeout =
 80053ba:	4413      	add	r3, r2
 80053bc:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 80053c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053c4:	7a5a      	ldrb	r2, [r3, #9]
 80053c6:	463b      	mov	r3, r7
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 80053ce:	463b      	mov	r3, r7
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2200      	movs	r2, #0
 80053d4:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 80053d6:	2300      	movs	r3, #0
 80053d8:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 80053dc:	e016      	b.n	800540c <VL53LX_get_histogram_bin_data+0x38c>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 80053de:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80053e2:	463a      	mov	r2, r7
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	4413      	add	r3, r2
 80053e8:	7b1b      	ldrb	r3, [r3, #12]
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	2b07      	cmp	r3, #7
 80053f0:	d107      	bne.n	8005402 <VL53LX_get_histogram_bin_data+0x382>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 80053f2:	463b      	mov	r3, r7
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	7adb      	ldrb	r3, [r3, #11]
 80053f8:	3304      	adds	r3, #4
 80053fa:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 80053fc:	463b      	mov	r3, r7
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8005402:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8005406:	3301      	adds	r3, #1
 8005408:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 800540c:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8005410:	2b05      	cmp	r3, #5
 8005412:	d9e4      	bls.n	80053de <VL53LX_get_histogram_bin_data+0x35e>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 8005414:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005418:	4618      	mov	r0, r3
 800541a:	f003 fb6a 	bl	8008af2 <VL53LX_decode_timeout>
 800541e:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8005420:	463b      	mov	r3, r7
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 8005428:	463b      	mov	r3, r7
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8005430:	4618      	mov	r0, r3
 8005432:	f006 f89a 	bl	800b56a <VL53LX_calc_pll_period_us>
 8005436:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 800543a:	463b      	mov	r3, r7
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005442:	3301      	adds	r3, #1
 8005444:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8005448:	463b      	mov	r3, r7
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53LX_duration_maths(
 8005450:	4619      	mov	r1, r3
 8005452:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005456:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800545a:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800545e:	f006 f89b 	bl	800b598 <VL53LX_duration_maths>
 8005462:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 8005464:	463b      	mov	r3, r7
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 800546c:	463b      	mov	r3, r7
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2200      	movs	r2, #0
 8005472:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 8005476:	463b      	mov	r3, r7
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	f006 f9a4 	bl	800b7c6 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 800547e:	463b      	mov	r3, r7
 8005480:	6818      	ldr	r0, [r3, #0]
 8005482:	f006 fdb0 	bl	800bfe6 <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 8005486:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800548a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800548e:	463b      	mov	r3, r7
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8005494:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005498:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800549c:	463b      	mov	r3, r7
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 80054a2:	463b      	mov	r3, r7
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	789b      	ldrb	r3, [r3, #2]
 80054a8:	461a      	mov	r2, r3
 80054aa:	4613      	mov	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80054b6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80054ba:	4413      	add	r3, r2
 80054bc:	3302      	adds	r3, #2
 80054be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 80054c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c6:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 80054c8:	463b      	mov	r3, r7
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 80054d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054d4:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 80054d6:	463b      	mov	r3, r7
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 80054de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054e2:	2200      	movs	r2, #0
 80054e4:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 80054e6:	463b      	mov	r3, r7
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80054ee:	f003 031f 	and.w	r3, r3, #31
 80054f2:	2b11      	cmp	r3, #17
 80054f4:	bf8c      	ite	hi
 80054f6:	2201      	movhi	r2, #1
 80054f8:	2200      	movls	r2, #0
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	2a00      	cmp	r2, #0
 80054fe:	d118      	bne.n	8005532 <VL53LX_get_histogram_bin_data+0x4b2>
 8005500:	2201      	movs	r2, #1
 8005502:	409a      	lsls	r2, r3
 8005504:	4b0e      	ldr	r3, [pc, #56]	; (8005540 <VL53LX_get_histogram_bin_data+0x4c0>)
 8005506:	4013      	ands	r3, r2
 8005508:	2b00      	cmp	r3, #0
 800550a:	bf14      	ite	ne
 800550c:	2301      	movne	r3, #1
 800550e:	2300      	moveq	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00d      	beq.n	8005532 <VL53LX_get_histogram_bin_data+0x4b2>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8005516:	463b      	mov	r3, r7
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800551e:	f003 031f 	and.w	r3, r3, #31
 8005522:	b2da      	uxtb	r2, r3
 8005524:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005528:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 800552a:	23fa      	movs	r3, #250	; 0xfa
 800552c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 8005530:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005532:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8005536:	4618      	mov	r0, r3
 8005538:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	0002200e 	.word	0x0002200e

08005544 <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 8005544:	b480      	push	{r7}
 8005546:	b08b      	sub	sp, #44	; 0x2c
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8005552:	2300      	movs	r3, #0
 8005554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	2200      	movs	r2, #0
 8005564:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	78da      	ldrb	r2, [r3, #3]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2200      	movs	r2, #0
 8005572:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2204      	movs	r2, #4
 8005578:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2201      	movs	r2, #1
 800557e:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	8a1b      	ldrh	r3, [r3, #16]
 8005584:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	8a9b      	ldrh	r3, [r3, #20]
 800558a:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	8a5b      	ldrh	r3, [r3, #18]
 8005590:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 8005592:	2300      	movs	r3, #0
 8005594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005598:	e00b      	b.n	80055b2 <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 800559a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	4413      	add	r3, r2
 80055a4:	2200      	movs	r2, #0
 80055a6:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 80055a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055ac:	3301      	adds	r3, #1
 80055ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80055b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d9ef      	bls.n	800559a <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	3314      	adds	r3, #20
 80055be:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 80055c0:	2300      	movs	r3, #0
 80055c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80055c6:	e0fe      	b.n	80057c6 <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80055ce:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	2200      	movs	r2, #0
 80055d4:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	78db      	ldrb	r3, [r3, #3]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10a      	bne.n	80055f4 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	785b      	ldrb	r3, [r3, #1]
 80055e2:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 80055e6:	2b09      	cmp	r3, #9
 80055e8:	d104      	bne.n	80055f4 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	2213      	movs	r2, #19
 80055ee:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80055f2:	e007      	b.n	8005604 <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	f003 031f 	and.w	r3, r3, #31
 80055fc:	b2da      	uxtb	r2, r3
			pdata->range_status =
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	2200      	movs	r2, #0
 8005608:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	2200      	movs	r2, #0
 800560e:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	2200      	movs	r2, #0
 8005614:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	2200      	movs	r2, #0
 800561a:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	2200      	movs	r2, #0
 8005620:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	2200      	movs	r2, #0
 8005626:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8005628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 8005630:	2b01      	cmp	r3, #1
 8005632:	d05c      	beq.n	80056ee <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 8005634:	e0a8      	b.n	8005788 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	789b      	ldrb	r3, [r3, #2]
 800563a:	2b07      	cmp	r3, #7
 800563c:	d103      	bne.n	8005646 <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	8a7a      	ldrh	r2, [r7, #18]
 8005642:	82da      	strh	r2, [r3, #22]
 8005644:	e00b      	b.n	800565e <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	789b      	ldrb	r3, [r3, #2]
 800564a:	2b08      	cmp	r3, #8
 800564c:	d103      	bne.n	8005656 <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	8aba      	ldrh	r2, [r7, #20]
 8005652:	82da      	strh	r2, [r3, #22]
 8005654:	e003      	b.n	800565e <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	8afa      	ldrh	r2, [r7, #22]
 8005662:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	895b      	ldrh	r3, [r3, #10]
 8005678:	015b      	lsls	r3, r3, #5
 800567a:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005682:	d302      	bcc.n	800568a <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8005684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005688:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	b29a      	uxth	r2, r3
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 80056a0:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	fb02 f303 	mul.w	r3, r2, r3
 80056aa:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056b2:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	da01      	bge.n	80056be <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 80056ba:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80056be:	12db      	asrs	r3, r3, #11
 80056c0:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	b21a      	sxth	r2, r3
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 80056ec:	e04c      	b.n	8005788 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005704:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	8bdb      	ldrh	r3, [r3, #30]
 8005712:	015b      	lsls	r3, r3, #5
 8005714:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571c:	d302      	bcc.n	8005724 <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 800571e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005722:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	b29a      	uxth	r2, r3
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 800573a:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	fb02 f303 	mul.w	r3, r2, r3
 8005744:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800574c:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	2b00      	cmp	r3, #0
 8005752:	da01      	bge.n	8005758 <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 8005754:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005758:	12db      	asrs	r3, r3, #11
 800575a:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	b21a      	sxth	r2, r3
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8005786:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	334c      	adds	r3, #76	; 0x4c
 80057ba:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 80057bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057c0:	3301      	adds	r3, #1
 80057c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80057c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	f67f aefc 	bls.w	80055c8 <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2200      	movs	r2, #0
 80057d4:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	785b      	ldrb	r3, [r3, #1]
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	2b11      	cmp	r3, #17
 80057e0:	bf8c      	ite	hi
 80057e2:	2201      	movhi	r2, #1
 80057e4:	2200      	movls	r2, #0
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	2a00      	cmp	r2, #0
 80057ea:	d116      	bne.n	800581a <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
 80057ec:	2201      	movs	r2, #1
 80057ee:	409a      	lsls	r2, r3
 80057f0:	4b0d      	ldr	r3, [pc, #52]	; (8005828 <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 80057f2:	4013      	ands	r3, r2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	bf14      	ite	ne
 80057f8:	2301      	movne	r3, #1
 80057fa:	2300      	moveq	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00b      	beq.n	800581a <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	785b      	ldrb	r3, [r3, #1]
 8005806:	f003 031f 	and.w	r3, r3, #31
 800580a:	b2da      	uxtb	r2, r3
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 8005818:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800581a:	bf00      	nop
 800581c:	372c      	adds	r7, #44	; 0x2c
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	0002200e 	.word	0x0002200e

0800582c <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005836:	2300      	movs	r3, #0
 8005838:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3318      	adds	r3, #24
 800583e:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	332c      	adds	r3, #44	; 0x2c
 8005844:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b05      	cmp	r3, #5
 800584c:	d109      	bne.n	8005862 <VL53LX_set_zone_dss_config+0x36>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	2202      	movs	r2, #2
 8005852:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
 8005860:	e003      	b.n	800586a <VL53LX_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 800586a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800586e:	4618      	mov	r0, r3
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	460b      	mov	r3, r1
 8005884:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005886:	2300      	movs	r3, #0
 8005888:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	3318      	adds	r3, #24
 800588e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	78fa      	ldrb	r2, [r7, #3]
 8005894:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8005896:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b086      	sub	sp, #24
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	460b      	mov	r3, r1
 80058b0:	607a      	str	r2, [r7, #4]
 80058b2:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80058b4:	2300      	movs	r3, #0
 80058b6:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3318      	adds	r3, #24
 80058bc:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 80058be:	7afb      	ldrb	r3, [r7, #11]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d009      	beq.n	80058d8 <VL53LX_get_dmax_calibration_data+0x32>
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d10f      	bne.n	80058e8 <VL53LX_get_dmax_calibration_data+0x42>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 80058cc:	220a      	movs	r2, #10
 80058ce:	4619      	mov	r1, r3
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f00e fd4b 	bl	801436c <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 80058d6:	e00a      	b.n	80058ee <VL53LX_get_dmax_calibration_data+0x48>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 80058dc:	220a      	movs	r2, #10
 80058de:	4619      	mov	r1, r3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f00e fd43 	bl	801436c <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 80058e6:	e002      	b.n	80058ee <VL53LX_get_dmax_calibration_data+0x48>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 80058e8:	23fc      	movs	r3, #252	; 0xfc
 80058ea:	75fb      	strb	r3, [r7, #23]
	break;
 80058ec:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80058ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b089      	sub	sp, #36	; 0x24
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	460b      	mov	r3, r1
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800590a:	2300      	movs	r3, #0
 800590c:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	3318      	adds	r3, #24
 8005912:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800591a:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8005922:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8005924:	897b      	ldrh	r3, [r7, #10]
 8005926:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800592a:	2bb9      	cmp	r3, #185	; 0xb9
 800592c:	f200 86ca 	bhi.w	80066c4 <VL53LX_get_tuning_parm+0xdc8>
 8005930:	a201      	add	r2, pc, #4	; (adr r2, 8005938 <VL53LX_get_tuning_parm+0x3c>)
 8005932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005936:	bf00      	nop
 8005938:	08005c21 	.word	0x08005c21
 800593c:	08005c31 	.word	0x08005c31
 8005940:	08005c41 	.word	0x08005c41
 8005944:	08005c51 	.word	0x08005c51
 8005948:	08005c5f 	.word	0x08005c5f
 800594c:	08005c6d 	.word	0x08005c6d
 8005950:	08005c7b 	.word	0x08005c7b
 8005954:	08005c89 	.word	0x08005c89
 8005958:	08005c97 	.word	0x08005c97
 800595c:	08005ca5 	.word	0x08005ca5
 8005960:	08005cb3 	.word	0x08005cb3
 8005964:	08005cbf 	.word	0x08005cbf
 8005968:	08005ccd 	.word	0x08005ccd
 800596c:	08005cdb 	.word	0x08005cdb
 8005970:	08005ce7 	.word	0x08005ce7
 8005974:	08005cf5 	.word	0x08005cf5
 8005978:	08005d03 	.word	0x08005d03
 800597c:	08005d13 	.word	0x08005d13
 8005980:	08005d23 	.word	0x08005d23
 8005984:	08005d31 	.word	0x08005d31
 8005988:	08005d41 	.word	0x08005d41
 800598c:	08005d4f 	.word	0x08005d4f
 8005990:	08005d5f 	.word	0x08005d5f
 8005994:	08005d6f 	.word	0x08005d6f
 8005998:	08005d7f 	.word	0x08005d7f
 800599c:	08005d8f 	.word	0x08005d8f
 80059a0:	08005d9f 	.word	0x08005d9f
 80059a4:	08005daf 	.word	0x08005daf
 80059a8:	08005dbf 	.word	0x08005dbf
 80059ac:	08005dcf 	.word	0x08005dcf
 80059b0:	08005ddf 	.word	0x08005ddf
 80059b4:	08005ded 	.word	0x08005ded
 80059b8:	08005dfd 	.word	0x08005dfd
 80059bc:	08005e0d 	.word	0x08005e0d
 80059c0:	08005e1d 	.word	0x08005e1d
 80059c4:	08005e2d 	.word	0x08005e2d
 80059c8:	08005e3d 	.word	0x08005e3d
 80059cc:	08005e4d 	.word	0x08005e4d
 80059d0:	08005e5d 	.word	0x08005e5d
 80059d4:	08005e6d 	.word	0x08005e6d
 80059d8:	08005e7d 	.word	0x08005e7d
 80059dc:	08005e8d 	.word	0x08005e8d
 80059e0:	08005e9d 	.word	0x08005e9d
 80059e4:	08005ead 	.word	0x08005ead
 80059e8:	08005ebd 	.word	0x08005ebd
 80059ec:	08005ecd 	.word	0x08005ecd
 80059f0:	08005edb 	.word	0x08005edb
 80059f4:	08005ee9 	.word	0x08005ee9
 80059f8:	08005ef7 	.word	0x08005ef7
 80059fc:	08005f05 	.word	0x08005f05
 8005a00:	08005f13 	.word	0x08005f13
 8005a04:	08005f21 	.word	0x08005f21
 8005a08:	08005f2f 	.word	0x08005f2f
 8005a0c:	08005f3d 	.word	0x08005f3d
 8005a10:	08005f4b 	.word	0x08005f4b
 8005a14:	08005f59 	.word	0x08005f59
 8005a18:	08005f67 	.word	0x08005f67
 8005a1c:	08005f75 	.word	0x08005f75
 8005a20:	08005f83 	.word	0x08005f83
 8005a24:	08005f91 	.word	0x08005f91
 8005a28:	08005f9f 	.word	0x08005f9f
 8005a2c:	08005fad 	.word	0x08005fad
 8005a30:	08005fbb 	.word	0x08005fbb
 8005a34:	08005fc9 	.word	0x08005fc9
 8005a38:	08005fd7 	.word	0x08005fd7
 8005a3c:	08005fe5 	.word	0x08005fe5
 8005a40:	08005ff3 	.word	0x08005ff3
 8005a44:	08006001 	.word	0x08006001
 8005a48:	0800600f 	.word	0x0800600f
 8005a4c:	0800601d 	.word	0x0800601d
 8005a50:	0800602b 	.word	0x0800602b
 8005a54:	08006039 	.word	0x08006039
 8005a58:	08006047 	.word	0x08006047
 8005a5c:	08006055 	.word	0x08006055
 8005a60:	08006061 	.word	0x08006061
 8005a64:	0800606f 	.word	0x0800606f
 8005a68:	0800607d 	.word	0x0800607d
 8005a6c:	08006089 	.word	0x08006089
 8005a70:	08006095 	.word	0x08006095
 8005a74:	080060a1 	.word	0x080060a1
 8005a78:	080060ad 	.word	0x080060ad
 8005a7c:	080060b9 	.word	0x080060b9
 8005a80:	080060c5 	.word	0x080060c5
 8005a84:	080060d3 	.word	0x080060d3
 8005a88:	080060e1 	.word	0x080060e1
 8005a8c:	080060ef 	.word	0x080060ef
 8005a90:	080060fd 	.word	0x080060fd
 8005a94:	0800610b 	.word	0x0800610b
 8005a98:	08006119 	.word	0x08006119
 8005a9c:	08006127 	.word	0x08006127
 8005aa0:	08006135 	.word	0x08006135
 8005aa4:	08006143 	.word	0x08006143
 8005aa8:	08006151 	.word	0x08006151
 8005aac:	0800615f 	.word	0x0800615f
 8005ab0:	0800616d 	.word	0x0800616d
 8005ab4:	0800617b 	.word	0x0800617b
 8005ab8:	08006189 	.word	0x08006189
 8005abc:	08006197 	.word	0x08006197
 8005ac0:	080061a5 	.word	0x080061a5
 8005ac4:	080061b3 	.word	0x080061b3
 8005ac8:	080061c1 	.word	0x080061c1
 8005acc:	080061cf 	.word	0x080061cf
 8005ad0:	080061dd 	.word	0x080061dd
 8005ad4:	080061eb 	.word	0x080061eb
 8005ad8:	080061f9 	.word	0x080061f9
 8005adc:	08006207 	.word	0x08006207
 8005ae0:	08006215 	.word	0x08006215
 8005ae4:	08006223 	.word	0x08006223
 8005ae8:	08006231 	.word	0x08006231
 8005aec:	0800623f 	.word	0x0800623f
 8005af0:	0800624d 	.word	0x0800624d
 8005af4:	0800625b 	.word	0x0800625b
 8005af8:	08006269 	.word	0x08006269
 8005afc:	08006277 	.word	0x08006277
 8005b00:	08006285 	.word	0x08006285
 8005b04:	08006293 	.word	0x08006293
 8005b08:	080062a1 	.word	0x080062a1
 8005b0c:	080062af 	.word	0x080062af
 8005b10:	080062bd 	.word	0x080062bd
 8005b14:	080062cf 	.word	0x080062cf
 8005b18:	080062e1 	.word	0x080062e1
 8005b1c:	080062f1 	.word	0x080062f1
 8005b20:	08006303 	.word	0x08006303
 8005b24:	08006315 	.word	0x08006315
 8005b28:	08006327 	.word	0x08006327
 8005b2c:	08006339 	.word	0x08006339
 8005b30:	0800634b 	.word	0x0800634b
 8005b34:	0800635d 	.word	0x0800635d
 8005b38:	08006371 	.word	0x08006371
 8005b3c:	08006383 	.word	0x08006383
 8005b40:	08006395 	.word	0x08006395
 8005b44:	080063a7 	.word	0x080063a7
 8005b48:	080063b9 	.word	0x080063b9
 8005b4c:	080063cb 	.word	0x080063cb
 8005b50:	080063dd 	.word	0x080063dd
 8005b54:	080063ef 	.word	0x080063ef
 8005b58:	08006401 	.word	0x08006401
 8005b5c:	08006413 	.word	0x08006413
 8005b60:	08006421 	.word	0x08006421
 8005b64:	0800642f 	.word	0x0800642f
 8005b68:	0800643d 	.word	0x0800643d
 8005b6c:	0800644b 	.word	0x0800644b
 8005b70:	08006459 	.word	0x08006459
 8005b74:	08006467 	.word	0x08006467
 8005b78:	08006475 	.word	0x08006475
 8005b7c:	08006487 	.word	0x08006487
 8005b80:	08006495 	.word	0x08006495
 8005b84:	080064a3 	.word	0x080064a3
 8005b88:	080064b1 	.word	0x080064b1
 8005b8c:	080064bf 	.word	0x080064bf
 8005b90:	080064cd 	.word	0x080064cd
 8005b94:	080064db 	.word	0x080064db
 8005b98:	080064e9 	.word	0x080064e9
 8005b9c:	080064f7 	.word	0x080064f7
 8005ba0:	08006505 	.word	0x08006505
 8005ba4:	08006513 	.word	0x08006513
 8005ba8:	08006521 	.word	0x08006521
 8005bac:	0800652f 	.word	0x0800652f
 8005bb0:	0800653d 	.word	0x0800653d
 8005bb4:	0800654b 	.word	0x0800654b
 8005bb8:	08006559 	.word	0x08006559
 8005bbc:	08006567 	.word	0x08006567
 8005bc0:	08006575 	.word	0x08006575
 8005bc4:	08006583 	.word	0x08006583
 8005bc8:	08006591 	.word	0x08006591
 8005bcc:	0800659f 	.word	0x0800659f
 8005bd0:	080065ad 	.word	0x080065ad
 8005bd4:	080065bb 	.word	0x080065bb
 8005bd8:	080065c9 	.word	0x080065c9
 8005bdc:	080065d7 	.word	0x080065d7
 8005be0:	080065e5 	.word	0x080065e5
 8005be4:	080065f3 	.word	0x080065f3
 8005be8:	08006601 	.word	0x08006601
 8005bec:	0800660f 	.word	0x0800660f
 8005bf0:	0800661d 	.word	0x0800661d
 8005bf4:	0800662b 	.word	0x0800662b
 8005bf8:	08006639 	.word	0x08006639
 8005bfc:	08006647 	.word	0x08006647
 8005c00:	08006655 	.word	0x08006655
 8005c04:	08006663 	.word	0x08006663
 8005c08:	08006671 	.word	0x08006671
 8005c0c:	0800667f 	.word	0x0800667f
 8005c10:	0800668d 	.word	0x0800668d
 8005c14:	0800669b 	.word	0x0800669b
 8005c18:	080066a9 	.word	0x080066a9
 8005c1c:	080066b7 	.word	0x080066b7

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	601a      	str	r2, [r3, #0]
	break;
 8005c2c:	f000 bd51 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 8005c36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	601a      	str	r2, [r3, #0]
	break;
 8005c3c:	f000 bd49 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8005c46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	601a      	str	r2, [r3, #0]
	break;
 8005c4c:	f000 bd41 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	601a      	str	r2, [r3, #0]
	break;
 8005c5a:	f000 bd3a 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	601a      	str	r2, [r3, #0]
	break;
 8005c68:	f000 bd33 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	789b      	ldrb	r3, [r3, #2]
 8005c70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	601a      	str	r2, [r3, #0]
	break;
 8005c76:	f000 bd2c 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	78db      	ldrb	r3, [r3, #3]
 8005c7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	601a      	str	r2, [r3, #0]
	break;
 8005c84:	f000 bd25 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	791b      	ldrb	r3, [r3, #4]
 8005c8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	601a      	str	r2, [r3, #0]
	break;
 8005c92:	f000 bd1e 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	795b      	ldrb	r3, [r3, #5]
 8005c9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	601a      	str	r2, [r3, #0]
	break;
 8005ca0:	f000 bd17 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	799b      	ldrb	r3, [r3, #6]
 8005ca8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	601a      	str	r2, [r3, #0]
	break;
 8005cae:	f000 bd10 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	601a      	str	r2, [r3, #0]
	break;
 8005cba:	f000 bd0a 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	891b      	ldrh	r3, [r3, #8]
 8005cc2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	601a      	str	r2, [r3, #0]
	break;
 8005cc8:	f000 bd03 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	8a1b      	ldrh	r3, [r3, #16]
 8005cd0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	601a      	str	r2, [r3, #0]
	break;
 8005cd6:	f000 bcfc 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	601a      	str	r2, [r3, #0]
	break;
 8005ce2:	f000 bcf6 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	7e1b      	ldrb	r3, [r3, #24]
 8005cea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	601a      	str	r2, [r3, #0]
	break;
 8005cf0:	f000 bcef 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	8b5b      	ldrh	r3, [r3, #26]
 8005cf8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	601a      	str	r2, [r3, #0]
	break;
 8005cfe:	f000 bce8 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8005d08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	601a      	str	r2, [r3, #0]
	break;
 8005d0e:	f000 bce0 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005d18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	601a      	str	r2, [r3, #0]
	break;
 8005d1e:	f000 bcd8 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	601a      	str	r2, [r3, #0]
	break;
 8005d2c:	f000 bcd1 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005d36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	601a      	str	r2, [r3, #0]
	break;
 8005d3c:	f000 bcc9 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	601a      	str	r2, [r3, #0]
	break;
 8005d4a:	f000 bcc2 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8005d54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	601a      	str	r2, [r3, #0]
	break;
 8005d5a:	f000 bcba 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8005d64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	601a      	str	r2, [r3, #0]
	break;
 8005d6a:	f000 bcb2 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8005d74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	601a      	str	r2, [r3, #0]
	break;
 8005d7a:	f000 bcaa 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8005d84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	601a      	str	r2, [r3, #0]
	break;
 8005d8a:	f000 bca2 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8005d94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	601a      	str	r2, [r3, #0]
	break;
 8005d9a:	f000 bc9a 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8005da4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	601a      	str	r2, [r3, #0]
	break;
 8005daa:	f000 bc92 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	f9b3 32a6 	ldrsh.w	r3, [r3, #678]	; 0x2a6
		*ptuning_parm_value = (int32_t)(
 8005db4:	461a      	mov	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	601a      	str	r2, [r3, #0]
	break;
 8005dba:	f000 bc8a 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	f9b3 32a8 	ldrsh.w	r3, [r3, #680]	; 0x2a8
		*ptuning_parm_value = (int32_t)(
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	601a      	str	r2, [r3, #0]
	break;
 8005dca:	f000 bc82 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8005dd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
	break;
 8005dda:	f000 bc7a 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	601a      	str	r2, [r3, #0]
	break;
 8005de8:	f000 bc73 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
		*ptuning_parm_value = (int32_t)(
 8005df2:	461a      	mov	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	601a      	str	r2, [r3, #0]
	break;
 8005df8:	f000 bc6b 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	601a      	str	r2, [r3, #0]
	break;
 8005e08:	f000 bc63 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	f9b3 329e 	ldrsh.w	r3, [r3, #670]	; 0x29e
 8005e12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	601a      	str	r2, [r3, #0]
	break;
 8005e18:	f000 bc5b 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8005e22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	601a      	str	r2, [r3, #0]
	break;
 8005e28:	f000 bc53 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8005e32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	601a      	str	r2, [r3, #0]
	break;
 8005e38:	f000 bc4b 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8005e42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	601a      	str	r2, [r3, #0]
	break;
 8005e48:	f000 bc43 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8005e52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	601a      	str	r2, [r3, #0]
	break;
 8005e58:	f000 bc3b 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8005e62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	601a      	str	r2, [r3, #0]
	break;
 8005e68:	f000 bc33 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 8005e72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	601a      	str	r2, [r3, #0]
	break;
 8005e78:	f000 bc2b 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8005e82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	601a      	str	r2, [r3, #0]
	break;
 8005e88:	f000 bc23 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8005e92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	601a      	str	r2, [r3, #0]
	break;
 8005e98:	f000 bc1b 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
		*ptuning_parm_value = (int32_t)(
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	601a      	str	r2, [r3, #0]
	break;
 8005ea8:	f000 bc13 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8005eb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	601a      	str	r2, [r3, #0]
	break;
 8005eb8:	f000 bc0b 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
		*ptuning_parm_value = (int32_t)(
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	601a      	str	r2, [r3, #0]
	break;
 8005ec8:	f000 bc03 	b.w	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8005ed2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	601a      	str	r2, [r3, #0]
	break;
 8005ed8:	e3fb      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8005ee0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	601a      	str	r2, [r3, #0]
	break;
 8005ee6:	e3f4      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8005eee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	601a      	str	r2, [r3, #0]
	break;
 8005ef4:	e3ed      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 8005efc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	601a      	str	r2, [r3, #0]
	break;
 8005f02:	e3e6      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 8005f0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	601a      	str	r2, [r3, #0]
	break;
 8005f10:	e3df      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8005f18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	601a      	str	r2, [r3, #0]
	break;
 8005f1e:	e3d8      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8005f26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	601a      	str	r2, [r3, #0]
	break;
 8005f2c:	e3d1      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	f9b3 32a0 	ldrsh.w	r3, [r3, #672]	; 0x2a0
 8005f34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	601a      	str	r2, [r3, #0]
	break;
 8005f3a:	e3ca      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8005f42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	601a      	str	r2, [r3, #0]
	break;
 8005f48:	e3c3      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8005f50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	601a      	str	r2, [r3, #0]
	break;
 8005f56:	e3bc      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8005f5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	601a      	str	r2, [r3, #0]
	break;
 8005f64:	e3b5      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005f6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	601a      	str	r2, [r3, #0]
	break;
 8005f72:	e3ae      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8005f7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	601a      	str	r2, [r3, #0]
	break;
 8005f80:	e3a7      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8005f88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	601a      	str	r2, [r3, #0]
	break;
 8005f8e:	e3a0      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8005f96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	601a      	str	r2, [r3, #0]
	break;
 8005f9c:	e399      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	f893 3254 	ldrb.w	r3, [r3, #596]	; 0x254
 8005fa4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	601a      	str	r2, [r3, #0]
	break;
 8005faa:	e392      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	f8b3 3260 	ldrh.w	r3, [r3, #608]	; 0x260
 8005fb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	601a      	str	r2, [r3, #0]
	break;
 8005fb8:	e38b      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	f8b3 3262 	ldrh.w	r3, [r3, #610]	; 0x262
 8005fc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	601a      	str	r2, [r3, #0]
	break;
 8005fc6:	e384      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005fce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]
	break;
 8005fd4:	e37d      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	f8b3 3266 	ldrh.w	r3, [r3, #614]	; 0x266
 8005fdc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	601a      	str	r2, [r3, #0]
	break;
 8005fe2:	e376      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 8005fea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	601a      	str	r2, [r3, #0]
	break;
 8005ff0:	e36f      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005ff8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	601a      	str	r2, [r3, #0]
	break;
 8005ffe:	e368      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8006006:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	601a      	str	r2, [r3, #0]
	break;
 800600c:	e361      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8006014:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	601a      	str	r2, [r3, #0]
	break;
 800601a:	e35a      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8006022:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	601a      	str	r2, [r3, #0]
	break;
 8006028:	e353      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8006030:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	601a      	str	r2, [r3, #0]
	break;
 8006036:	e34c      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800603e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	601a      	str	r2, [r3, #0]
	break;
 8006044:	e345      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800604c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	601a      	str	r2, [r3, #0]
	break;
 8006052:	e33e      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	7c1b      	ldrb	r3, [r3, #16]
 8006058:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	601a      	str	r2, [r3, #0]
	break;
 800605e:	e338      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006066:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	601a      	str	r2, [r3, #0]
	break;
 800606c:	e331      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006074:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	601a      	str	r2, [r3, #0]
	break;
 800607a:	e32a      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	601a      	str	r2, [r3, #0]
	break;
 8006086:	e324      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	601a      	str	r2, [r3, #0]
	break;
 8006092:	e31e      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	8adb      	ldrh	r3, [r3, #22]
 8006098:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	601a      	str	r2, [r3, #0]
	break;
 800609e:	e318      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	8b1b      	ldrh	r3, [r3, #24]
 80060a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	601a      	str	r2, [r3, #0]
	break;
 80060aa:	e312      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	601a      	str	r2, [r3, #0]
	break;
 80060b6:	e30c      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	601a      	str	r2, [r3, #0]
	break;
 80060c2:	e306      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80060ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	601a      	str	r2, [r3, #0]
	break;
 80060d0:	e2ff      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	601a      	str	r2, [r3, #0]
	break;
 80060de:	e2f8      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	601a      	str	r2, [r3, #0]
	break;
 80060ec:	e2f1      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	601a      	str	r2, [r3, #0]
	break;
 80060fa:	e2ea      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	f893 32c0 	ldrb.w	r3, [r3, #704]	; 0x2c0
 8006102:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	601a      	str	r2, [r3, #0]
	break;
 8006108:	e2e3      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 8006110:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	601a      	str	r2, [r3, #0]
	break;
 8006116:	e2dc      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
 800611e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	601a      	str	r2, [r3, #0]
	break;
 8006124:	e2d5      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	; 0x2c4
 800612c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	601a      	str	r2, [r3, #0]
	break;
 8006132:	e2ce      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800613a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	601a      	str	r2, [r3, #0]
	break;
 8006140:	e2c7      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006148:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	601a      	str	r2, [r3, #0]
	break;
 800614e:	e2c0      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	f8b3 32d4 	ldrh.w	r3, [r3, #724]	; 0x2d4
 8006156:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	601a      	str	r2, [r3, #0]
	break;
 800615c:	e2b9      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8006164:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	601a      	str	r2, [r3, #0]
	break;
 800616a:	e2b2      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	; 0x2d6
 8006172:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	601a      	str	r2, [r3, #0]
	break;
 8006178:	e2ab      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 8006180:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	601a      	str	r2, [r3, #0]
	break;
 8006186:	e2a4      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 800618e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	601a      	str	r2, [r3, #0]
	break;
 8006194:	e29d      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 800619c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	601a      	str	r2, [r3, #0]
	break;
 80061a2:	e296      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 80061aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	601a      	str	r2, [r3, #0]
	break;
 80061b0:	e28f      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 80061b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	601a      	str	r2, [r3, #0]
	break;
 80061be:	e288      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 80061c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	601a      	str	r2, [r3, #0]
	break;
 80061cc:	e281      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 80061d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	601a      	str	r2, [r3, #0]
	break;
 80061da:	e27a      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80061e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	601a      	str	r2, [r3, #0]
	break;
 80061e8:	e273      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80061f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	601a      	str	r2, [r3, #0]
	break;
 80061f6:	e26c      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80061fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	601a      	str	r2, [r3, #0]
	break;
 8006204:	e265      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800620c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	601a      	str	r2, [r3, #0]
	break;
 8006212:	e25e      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800621a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	601a      	str	r2, [r3, #0]
	break;
 8006220:	e257      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006228:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	601a      	str	r2, [r3, #0]
	break;
 800622e:	e250      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8006236:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	601a      	str	r2, [r3, #0]
	break;
 800623c:	e249      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006244:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	601a      	str	r2, [r3, #0]
	break;
 800624a:	e242      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8006252:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	601a      	str	r2, [r3, #0]
	break;
 8006258:	e23b      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006260:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	601a      	str	r2, [r3, #0]
	break;
 8006266:	e234      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800626e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	601a      	str	r2, [r3, #0]
	break;
 8006274:	e22d      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800627c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	601a      	str	r2, [r3, #0]
	break;
 8006282:	e226      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800628a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	601a      	str	r2, [r3, #0]
	break;
 8006290:	e21f      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8006298:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	601a      	str	r2, [r3, #0]
	break;
 800629e:	e218      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80062a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	601a      	str	r2, [r3, #0]
	break;
 80062ac:	e211      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80062b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	601a      	str	r2, [r3, #0]
	break;
 80062ba:	e20a      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80062c2:	3318      	adds	r3, #24
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	601a      	str	r2, [r3, #0]
	break;
 80062cc:	e201      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80062d4:	331c      	adds	r3, #28
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	601a      	str	r2, [r3, #0]
	break;
 80062de:	e1f8      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	601a      	str	r2, [r3, #0]
	break;
 80062ee:	e1f0      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80062f6:	3304      	adds	r3, #4
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	601a      	str	r2, [r3, #0]
	break;
 8006300:	e1e7      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006308:	3308      	adds	r3, #8
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	601a      	str	r2, [r3, #0]
	break;
 8006312:	e1de      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800631a:	330c      	adds	r3, #12
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	601a      	str	r2, [r3, #0]
	break;
 8006324:	e1d5      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800632c:	3310      	adds	r3, #16
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	601a      	str	r2, [r3, #0]
	break;
 8006336:	e1cc      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800633e:	3314      	adds	r3, #20
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	601a      	str	r2, [r3, #0]
	break;
 8006348:	e1c3      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006350:	331c      	adds	r3, #28
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	601a      	str	r2, [r3, #0]
	break;
 800635a:	e1ba      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006362:	331e      	adds	r3, #30
 8006364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006368:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	601a      	str	r2, [r3, #0]
	break;
 800636e:	e1b0      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800637a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	601a      	str	r2, [r3, #0]
	break;
 8006380:	e1a7      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006388:	3302      	adds	r3, #2
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	601a      	str	r2, [r3, #0]
	break;
 8006392:	e19e      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800639a:	3316      	adds	r3, #22
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	601a      	str	r2, [r3, #0]
	break;
 80063a4:	e195      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80063ac:	3318      	adds	r3, #24
 80063ae:	681b      	ldr	r3, [r3, #0]
		*ptuning_parm_value = (int32_t)(
 80063b0:	461a      	mov	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	601a      	str	r2, [r3, #0]
	break;
 80063b6:	e18c      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80063be:	3304      	adds	r3, #4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	601a      	str	r2, [r3, #0]
	break;
 80063c8:	e183      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80063d0:	3308      	adds	r3, #8
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	601a      	str	r2, [r3, #0]
	break;
 80063da:	e17a      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80063e2:	330c      	adds	r3, #12
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	601a      	str	r2, [r3, #0]
	break;
 80063ec:	e171      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80063f4:	3310      	adds	r3, #16
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	601a      	str	r2, [r3, #0]
	break;
 80063fe:	e168      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8006406:	3310      	adds	r3, #16
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	601a      	str	r2, [r3, #0]
	break;
 8006410:	e15f      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006418:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	601a      	str	r2, [r3, #0]
	break;
 800641e:	e158      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8006426:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	601a      	str	r2, [r3, #0]
	break;
 800642c:	e151      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 8006434:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	601a      	str	r2, [r3, #0]
	break;
 800643a:	e14a      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8006442:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	601a      	str	r2, [r3, #0]
	break;
 8006448:	e143      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8006450:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	601a      	str	r2, [r3, #0]
	break;
 8006456:	e13c      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800645e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	601a      	str	r2, [r3, #0]
	break;
 8006464:	e135      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800646c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	601a      	str	r2, [r3, #0]
	break;
 8006472:	e12e      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800647a:	3314      	adds	r3, #20
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	601a      	str	r2, [r3, #0]
	break;
 8006484:	e125      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	f893 3185 	ldrb.w	r3, [r3, #389]	; 0x185
 800648c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	601a      	str	r2, [r3, #0]
	break;
 8006492:	e11e      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	f9b3 3186 	ldrsh.w	r3, [r3, #390]	; 0x186
 800649a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	601a      	str	r2, [r3, #0]
	break;
 80064a0:	e117      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	; 0x188
 80064a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	601a      	str	r2, [r3, #0]
	break;
 80064ae:	e110      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	; 0x18a
 80064b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	601a      	str	r2, [r3, #0]
	break;
 80064bc:	e109      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	; 0x18c
 80064c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	601a      	str	r2, [r3, #0]
	break;
 80064ca:	e102      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	; 0x18e
 80064d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	601a      	str	r2, [r3, #0]
	break;
 80064d8:	e0fb      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	; 0x190
 80064e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	601a      	str	r2, [r3, #0]
	break;
 80064e6:	e0f4      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 80064ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	601a      	str	r2, [r3, #0]
	break;
 80064f4:	e0ed      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	; 0x194
 80064fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	601a      	str	r2, [r3, #0]
	break;
 8006502:	e0e6      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	f9b3 3196 	ldrsh.w	r3, [r3, #406]	; 0x196
 800650a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	601a      	str	r2, [r3, #0]
	break;
 8006510:	e0df      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	f9b3 3198 	ldrsh.w	r3, [r3, #408]	; 0x198
 8006518:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	601a      	str	r2, [r3, #0]
	break;
 800651e:	e0d8      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	; 0x19a
 8006526:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	601a      	str	r2, [r3, #0]
	break;
 800652c:	e0d1      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	; 0x19c
 8006534:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	601a      	str	r2, [r3, #0]
	break;
 800653a:	e0ca      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	; 0x19e
 8006542:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	601a      	str	r2, [r3, #0]
	break;
 8006548:	e0c3      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	f9b3 31a0 	ldrsh.w	r3, [r3, #416]	; 0x1a0
 8006550:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	601a      	str	r2, [r3, #0]
	break;
 8006556:	e0bc      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	f9b3 31a2 	ldrsh.w	r3, [r3, #418]	; 0x1a2
 800655e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	601a      	str	r2, [r3, #0]
	break;
 8006564:	e0b5      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	f9b3 31a4 	ldrsh.w	r3, [r3, #420]	; 0x1a4
 800656c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	601a      	str	r2, [r3, #0]
	break;
 8006572:	e0ae      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	f9b3 31a6 	ldrsh.w	r3, [r3, #422]	; 0x1a6
 800657a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	601a      	str	r2, [r3, #0]
	break;
 8006580:	e0a7      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	; 0x1a8
 8006588:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	601a      	str	r2, [r3, #0]
	break;
 800658e:	e0a0      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	f9b3 31aa 	ldrsh.w	r3, [r3, #426]	; 0x1aa
 8006596:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	601a      	str	r2, [r3, #0]
	break;
 800659c:	e099      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	; 0x1ac
 80065a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	601a      	str	r2, [r3, #0]
	break;
 80065aa:	e092      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	f9b3 31ae 	ldrsh.w	r3, [r3, #430]	; 0x1ae
 80065b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	601a      	str	r2, [r3, #0]
	break;
 80065b8:	e08b      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	f9b3 31b0 	ldrsh.w	r3, [r3, #432]	; 0x1b0
 80065c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	601a      	str	r2, [r3, #0]
	break;
 80065c6:	e084      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	; 0x1b2
 80065ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	601a      	str	r2, [r3, #0]
	break;
 80065d4:	e07d      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	f9b3 31b4 	ldrsh.w	r3, [r3, #436]	; 0x1b4
 80065dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	601a      	str	r2, [r3, #0]
	break;
 80065e2:	e076      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	f9b3 31b6 	ldrsh.w	r3, [r3, #438]	; 0x1b6
 80065ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	601a      	str	r2, [r3, #0]
	break;
 80065f0:	e06f      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	f9b3 31b8 	ldrsh.w	r3, [r3, #440]	; 0x1b8
 80065f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	601a      	str	r2, [r3, #0]
	break;
 80065fe:	e068      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	f9b3 31ba 	ldrsh.w	r3, [r3, #442]	; 0x1ba
 8006606:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	601a      	str	r2, [r3, #0]
	break;
 800660c:	e061      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	f9b3 31bc 	ldrsh.w	r3, [r3, #444]	; 0x1bc
 8006614:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	601a      	str	r2, [r3, #0]
	break;
 800661a:	e05a      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 8006622:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	601a      	str	r2, [r3, #0]
	break;
 8006628:	e053      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 8006630:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	601a      	str	r2, [r3, #0]
	break;
 8006636:	e04c      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 800663e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	601a      	str	r2, [r3, #0]
	break;
 8006644:	e045      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 800664c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	601a      	str	r2, [r3, #0]
	break;
 8006652:	e03e      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 800665a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	601a      	str	r2, [r3, #0]
	break;
 8006660:	e037      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 8006668:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	601a      	str	r2, [r3, #0]
	break;
 800666e:	e030      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 8006676:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	601a      	str	r2, [r3, #0]
	break;
 800667c:	e029      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 8006684:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	601a      	str	r2, [r3, #0]
	break;
 800668a:	e022      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 8006692:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	601a      	str	r2, [r3, #0]
	break;
 8006698:	e01b      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 80066a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	601a      	str	r2, [r3, #0]
	break;
 80066a6:	e014      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 80066ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	601a      	str	r2, [r3, #0]
	break;
 80066b4:	e00d      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 80066bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	601a      	str	r2, [r3, #0]
	break;
 80066c2:	e006      	b.n	80066d2 <VL53LX_get_tuning_parm+0xdd6>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80066ca:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 80066cc:	23fc      	movs	r3, #252	; 0xfc
 80066ce:	77fb      	strb	r3, [r7, #31]
	break;
 80066d0:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80066d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3724      	adds	r7, #36	; 0x24
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop

080066e4 <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80066ec:	2300      	movs	r3, #0
 80066ee:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3318      	adds	r3, #24
 80066f4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80066fc:	3314      	adds	r3, #20
 80066fe:	2201      	movs	r2, #1
 8006700:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006702:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 8006712:	b480      	push	{r7}
 8006714:	b085      	sub	sp, #20
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800671a:	2300      	movs	r3, #0
 800671c:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3318      	adds	r3, #24
 8006722:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800672a:	3314      	adds	r3, #20
 800672c:	2200      	movs	r2, #0
 800672e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006748:	2300      	movs	r3, #0
 800674a:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3318      	adds	r3, #24
 8006750:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006758:	3315      	adds	r3, #21
 800675a:	2200      	movs	r2, #0
 800675c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800675e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006776:	2300      	movs	r3, #0
 8006778:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	3318      	adds	r3, #24
 800677e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006786:	3316      	adds	r3, #22
 8006788:	2201      	movs	r2, #1
 800678a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800678c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80067a4:	2300      	movs	r3, #0
 80067a6:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3318      	adds	r3, #24
 80067ac:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80067b4:	3316      	adds	r3, #22
 80067b6:	2200      	movs	r2, #0
 80067b8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80067ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b085      	sub	sp, #20
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80067d2:	2300      	movs	r3, #0
 80067d4:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	3318      	adds	r3, #24
 80067da:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80067e2:	3315      	adds	r3, #21
 80067e4:	2201      	movs	r2, #1
 80067e6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80067e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006800:	2300      	movs	r3, #0
 8006802:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2208      	movs	r2, #8
 8006808:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	220b      	movs	r2, #11
 800680e:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006816:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800681e:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8006826:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800682e:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006830:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006848:	2300      	movs	r3, #0
 800684a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2212      	movs	r2, #18
 8006856:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	220f      	movs	r2, #15
 800685c:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2202      	movs	r2, #2
 8006862:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800686a:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	220c      	movs	r2, #12
 8006870:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006872:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800688c:	2300      	movs	r3, #0
 800688e:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	895b      	ldrh	r3, [r3, #10]
 8006894:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	895b      	ldrh	r3, [r3, #10]
 80068b2:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2200      	movs	r2, #0
 80068d0:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2200      	movs	r2, #0
 80068d6:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2240      	movs	r2, #64	; 0x40
 80068dc:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10d      	bne.n	8006902 <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d108      	bne.n	8006902 <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d103      	bne.n	8006902 <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2200      	movs	r2, #0
 80068fe:	741a      	strb	r2, [r3, #16]
 8006900:	e002      	b.n	8006908 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2201      	movs	r2, #1
 8006906:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 8006908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d114      	bne.n	800693a <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 8006914:	2b01      	cmp	r3, #1
 8006916:	d110      	bne.n	800693a <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	6818      	ldr	r0, [r3, #0]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	7d9b      	ldrb	r3, [r3, #22]
 800692c:	f001 ffa0 	bl	8008870 <VL53LX_calc_range_ignore_threshold>
 8006930:	4603      	mov	r3, r0
 8006932:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	831a      	strh	r2, [r3, #24]
 8006938:	e002      	b.n	8006940 <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2200      	movs	r2, #0
 800693e:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8006946:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2232      	movs	r2, #50	; 0x32
 800694c:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006954:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	228c      	movs	r2, #140	; 0x8c
 800695a:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800695c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006970:	2300      	movs	r3, #0
 8006972:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800697a:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006982:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2207      	movs	r2, #7
 8006988:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006990:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f242 7210 	movw	r2, #10000	; 0x2710
 8006998:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f64f 72ba 	movw	r2, #65466	; 0xffba
 80069a0:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2246      	movs	r2, #70	; 0x46
 80069a6:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80069ae:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	228c      	movs	r2, #140	; 0x8c
 80069b4:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 80069b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b085      	sub	sp, #20
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80069d8:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f643 2298 	movw	r2, #15000	; 0x3a98
 80069e0:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80069e8:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80069f0:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2208      	movs	r2, #8
 80069f6:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2228      	movs	r2, #40	; 0x28
 80069fc:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2209      	movs	r2, #9
 8006a02:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006a26:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006a2e:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a36:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006a3e:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2210      	movs	r2, #16
 8006a44:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2208      	movs	r2, #8
 8006a4a:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	6039      	str	r1, [r7, #0]
 8006a66:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2204      	movs	r2, #4
 8006a70:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2201      	movs	r2, #1
 8006a76:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2202      	movs	r2, #2
 8006a82:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2201      	movs	r2, #1
 8006a88:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2250      	movs	r2, #80	; 0x50
 8006a8e:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2264      	movs	r2, #100	; 0x64
 8006a94:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	f241 023d 	movw	r2, #4157	; 0x103d
 8006a9c:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2210      	movs	r2, #16
 8006aa2:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	2232      	movs	r2, #50	; 0x32
 8006aa8:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2264      	movs	r2, #100	; 0x64
 8006aae:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	22b4      	movs	r2, #180	; 0xb4
 8006aba:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8006ac8:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2208      	movs	r2, #8
 8006ace:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2288      	movs	r2, #136	; 0x88
 8006ad6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2208      	movs	r2, #8
 8006ade:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006af0:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2200      	movs	r2, #0
 8006af6:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	79fa      	ldrb	r2, [r7, #7]
 8006afc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8006b06:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2232      	movs	r2, #50	; 0x32
 8006b0c:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006b14:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	228c      	movs	r2, #140	; 0x8c
 8006b1a:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2250      	movs	r2, #80	; 0x50
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2232      	movs	r2, #50	; 0x32
 8006b28:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 8006b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	221e      	movs	r2, #30
 8006b4a:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	220e      	movs	r2, #14
 8006b50:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f642 7294 	movw	r2, #12180	; 0x2f94
 8006b58:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	220e      	movs	r2, #14
 8006b5e:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	220a      	movs	r2, #10
 8006b64:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2206      	movs	r2, #6
 8006b6a:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	220e      	movs	r2, #14
 8006b70:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	220a      	movs	r2, #10
 8006b76:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2206      	movs	r2, #6
 8006b7c:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2209      	movs	r2, #9
 8006b82:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2205      	movs	r2, #5
 8006b88:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2203      	movs	r2, #3
 8006b8e:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2206      	movs	r2, #6
 8006b94:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2206      	movs	r2, #6
 8006b9a:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2206      	movs	r2, #6
 8006ba0:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2221      	movs	r2, #33	; 0x21
 8006bac:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	223c      	movs	r2, #60	; 0x3c
 8006bbe:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	223c      	movs	r2, #60	; 0x3c
 8006bc4:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	223c      	movs	r2, #60	; 0x3c
 8006bca:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2280      	movs	r2, #128	; 0x80
 8006bd0:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2280      	movs	r2, #128	; 0x80
 8006bd6:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2280      	movs	r2, #128	; 0x80
 8006bdc:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2208      	movs	r2, #8
 8006be2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2210      	movs	r2, #16
 8006bea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006c24:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f640 22be 	movw	r2, #2750	; 0xabe
 8006c2e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	22fa      	movs	r2, #250	; 0xfa
 8006c36:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c40:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006c4a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8006c54:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006c5e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8006c68:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f64f 7238 	movw	r2, #65336	; 0xff38
 8006c72:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	22c8      	movs	r2, #200	; 0xc8
 8006c7a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8006c84:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8006c96:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f640 32ea 	movw	r2, #3050	; 0xbea
 8006ca0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8006caa:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f640 32ea 	movw	r2, #3050	; 0xbea
 8006cb4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8006cbe:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f641 0238 	movw	r2, #6200	; 0x1838
 8006cc8:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	22fa      	movs	r2, #250	; 0xfa
 8006ce0:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006cea:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8006cf4:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f241 1294 	movw	r2, #4500	; 0x1194
 8006cfe:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f64f 7238 	movw	r2, #65336	; 0xff38
 8006d08:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	22c8      	movs	r2, #200	; 0xc8
 8006d10:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f640 720a 	movw	r2, #3850	; 0xf0a
 8006d3a:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8006d44:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f640 720a 	movw	r2, #3850	; 0xf0a
 8006d4e:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006d90:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006d98:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006da0:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006da8:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006db0:	639a      	str	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006db8:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f242 3228 	movw	r2, #9000	; 0x2328
 8006dc0:	641a      	str	r2, [r3, #64]	; 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f241 7270 	movw	r2, #6000	; 0x1770
 8006dc8:	645a      	str	r2, [r3, #68]	; 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006dd0:	649a      	str	r2, [r3, #72]	; 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f242 3228 	movw	r2, #9000	; 0x2328
 8006dd8:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f241 7270 	movw	r2, #6000	; 0x1770
 8006de0:	651a      	str	r2, [r3, #80]	; 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006de8:	655a      	str	r2, [r3, #84]	; 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006df0:	659a      	str	r2, [r3, #88]	; 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006df8:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006e00:	661a      	str	r2, [r3, #96]	; 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006e08:	665a      	str	r2, [r3, #100]	; 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f24f 6218 	movw	r2, #63000	; 0xf618
 8006e10:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006e18:	671a      	str	r2, [r3, #112]	; 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006e20:	675a      	str	r2, [r3, #116]	; 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006e28:	679a      	str	r2, [r3, #120]	; 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	669a      	str	r2, [r3, #104]	; 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006e36:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006e3e:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006e56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2206      	movs	r2, #6
 8006e5e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b085      	sub	sp, #20
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006e84:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2238      	movs	r2, #56	; 0x38
 8006e8a:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2270      	movs	r2, #112	; 0x70
 8006e96:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2210      	movs	r2, #16
 8006e9c:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2264      	movs	r2, #100	; 0x64
 8006ea2:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006eaa:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	220f      	movs	r2, #15
 8006eb0:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2234      	movs	r2, #52	; 0x34
 8006eb6:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	22c8      	movs	r2, #200	; 0xc8
 8006ebc:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006ec4:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006ecc:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b087      	sub	sp, #28
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	60b9      	str	r1, [r7, #8]
 8006ee8:	607a      	str	r2, [r7, #4]
 8006eea:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006eec:	2300      	movs	r3, #0
 8006eee:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006ef6:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2211      	movs	r2, #17
 8006f38:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2202      	movs	r2, #2
 8006f4a:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2208      	movs	r2, #8
 8006f50:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8006f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f64:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	22ff      	movs	r2, #255	; 0xff
 8006f92:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8006f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9e:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	220b      	movs	r2, #11
 8006fcc:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2202      	movs	r2, #2
 8006fda:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	220d      	movs	r2, #13
 8006fe0:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8007008:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2238      	movs	r2, #56	; 0x38
 8007014:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	22ff      	movs	r2, #255	; 0xff
 800701a:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2200      	movs	r2, #0
 8007026:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	221a      	movs	r2, #26
 800702c:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2200      	movs	r2, #0
 8007032:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	2220      	movs	r2, #32
 8007038:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2201      	movs	r2, #1
 800703e:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	22cc      	movs	r2, #204	; 0xcc
 8007044:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	220b      	movs	r2, #11
 800704a:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	2201      	movs	r2, #1
 8007050:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	22f5      	movs	r2, #245	; 0xf5
 8007056:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	2209      	movs	r2, #9
 800705c:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2208      	movs	r2, #8
 8007072:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2278      	movs	r2, #120	; 0x78
 8007078:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2200      	movs	r2, #0
 800707e:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2200      	movs	r2, #0
 8007084:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2207      	movs	r2, #7
 800708a:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	2221      	movs	r2, #33	; 0x21
 8007090:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2243      	movs	r2, #67	; 0x43
 8007096:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2210      	movs	r2, #16
 800709c:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2232      	movs	r2, #50	; 0x32
 80070a2:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2254      	movs	r2, #84	; 0x54
 80070a8:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2207      	movs	r2, #7
 80070ae:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	2221      	movs	r2, #33	; 0x21
 80070b4:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2243      	movs	r2, #67	; 0x43
 80070ba:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2210      	movs	r2, #16
 80070c0:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2202      	movs	r2, #2
 80070c6:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2243      	movs	r2, #67	; 0x43
 80070cc:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2205      	movs	r2, #5
 80070d2:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2200      	movs	r2, #0
 80070d8:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2207      	movs	r2, #7
 80070de:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2221      	movs	r2, #33	; 0x21
 80070e4:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2243      	movs	r2, #67	; 0x43
 80070ea:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2210      	movs	r2, #16
 80070f0:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	2232      	movs	r2, #50	; 0x32
 80070f6:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2254      	movs	r2, #84	; 0x54
 80070fc:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007104:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800710c:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2200      	movs	r2, #0
 8007112:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8007114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007116:	2205      	movs	r2, #5
 8007118:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 800711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711c:	2200      	movs	r2, #0
 800711e:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8007120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007122:	220f      	movs	r2, #15
 8007124:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8007126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007128:	220f      	movs	r2, #15
 800712a:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 800712c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712e:	2208      	movs	r2, #8
 8007130:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8007132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007134:	2208      	movs	r2, #8
 8007136:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	2201      	movs	r2, #1
 800713c:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	2200      	movs	r2, #0
 8007142:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	2200      	movs	r2, #0
 8007148:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	2200      	movs	r2, #0
 800714e:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8007150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007152:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	220b      	movs	r2, #11
 800715e:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	2209      	movs	r2, #9
 8007164:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8007166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007168:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 800716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007170:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	2201      	movs	r2, #1
 800717a:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8007186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007188:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	22c7      	movs	r2, #199	; 0xc7
 8007194:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	22ff      	movs	r2, #255	; 0xff
 800719a:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	22db      	movs	r2, #219	; 0xdb
 80071a0:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	2202      	movs	r2, #2
 80071a6:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	2200      	movs	r2, #0
 80071ac:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	2201      	movs	r2, #1
 80071b2:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	2201      	movs	r2, #1
 80071b8:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	2221      	movs	r2, #33	; 0x21
 80071be:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 80071c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b090      	sub	sp, #64	; 0x40
 80071d4:	af0a      	add	r7, sp, #40	; 0x28
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80071de:	2300      	movs	r3, #0
 80071e0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	9303      	str	r3, [sp, #12]
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	9302      	str	r3, [sp, #8]
 80071ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	68b8      	ldr	r0, [r7, #8]
 80071fa:	f7ff fe70 	bl	8006ede <VL53LX_preset_mode_standard_ranging>
 80071fe:	4603      	mov	r3, r0
 8007200:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007202:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d171      	bne.n	80072ee <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007210:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	9308      	str	r3, [sp, #32]
 8007216:	2305      	movs	r3, #5
 8007218:	9307      	str	r3, [sp, #28]
 800721a:	2304      	movs	r3, #4
 800721c:	9306      	str	r3, [sp, #24]
 800721e:	2303      	movs	r3, #3
 8007220:	9305      	str	r3, [sp, #20]
 8007222:	2302      	movs	r3, #2
 8007224:	9304      	str	r3, [sp, #16]
 8007226:	2301      	movs	r3, #1
 8007228:	9303      	str	r3, [sp, #12]
 800722a:	2300      	movs	r3, #0
 800722c:	9302      	str	r3, [sp, #8]
 800722e:	2304      	movs	r3, #4
 8007230:	9301      	str	r3, [sp, #4]
 8007232:	2303      	movs	r3, #3
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	2302      	movs	r3, #2
 8007238:	2201      	movs	r2, #1
 800723a:	2100      	movs	r1, #0
 800723c:	2007      	movs	r0, #7
 800723e:	f000 ffab 	bl	8008198 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	3302      	adds	r3, #2
 8007246:	9308      	str	r3, [sp, #32]
 8007248:	2305      	movs	r3, #5
 800724a:	9307      	str	r3, [sp, #28]
 800724c:	2304      	movs	r3, #4
 800724e:	9306      	str	r3, [sp, #24]
 8007250:	2303      	movs	r3, #3
 8007252:	9305      	str	r3, [sp, #20]
 8007254:	2302      	movs	r3, #2
 8007256:	9304      	str	r3, [sp, #16]
 8007258:	2301      	movs	r3, #1
 800725a:	9303      	str	r3, [sp, #12]
 800725c:	2300      	movs	r3, #0
 800725e:	9302      	str	r3, [sp, #8]
 8007260:	2304      	movs	r3, #4
 8007262:	9301      	str	r3, [sp, #4]
 8007264:	2303      	movs	r3, #3
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	2302      	movs	r3, #2
 800726a:	2201      	movs	r2, #1
 800726c:	2100      	movs	r1, #0
 800726e:	2007      	movs	r0, #7
 8007270:	f001 f822 	bl	80082b8 <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	2209      	movs	r2, #9
 8007278:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	220b      	movs	r2, #11
 800727e:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	2209      	movs	r2, #9
 8007284:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	220b      	movs	r2, #11
 800728a:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	2200      	movs	r2, #0
 8007290:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	2220      	movs	r2, #32
 8007296:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	2200      	movs	r2, #0
 800729c:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	221a      	movs	r2, #26
 80072a2:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	2200      	movs	r2, #0
 80072a8:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	2228      	movs	r2, #40	; 0x28
 80072ae:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	2200      	movs	r2, #0
 80072b4:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	2221      	movs	r2, #33	; 0x21
 80072ba:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	22f5      	movs	r2, #245	; 0xf5
 80072c0:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2208      	movs	r2, #8
 80072c6:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2288      	movs	r2, #136	; 0x88
 80072ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 80072d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	68b9      	ldr	r1, [r7, #8]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f9e6 	bl	80076ae <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	229b      	movs	r2, #155	; 0x9b
 80072e6:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80072e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ea:	2226      	movs	r2, #38	; 0x26
 80072ec:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80072ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b090      	sub	sp, #64	; 0x40
 80072fe:	af0a      	add	r7, sp, #40	; 0x28
 8007300:	60f8      	str	r0, [r7, #12]
 8007302:	60b9      	str	r1, [r7, #8]
 8007304:	607a      	str	r2, [r7, #4]
 8007306:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007308:	2300      	movs	r3, #0
 800730a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	9304      	str	r3, [sp, #16]
 8007310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007312:	9303      	str	r3, [sp, #12]
 8007314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007316:	9302      	str	r3, [sp, #8]
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	9301      	str	r3, [sp, #4]
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	68b9      	ldr	r1, [r7, #8]
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f7ff ff52 	bl	80071d0 <VL53LX_preset_mode_histogram_ranging>
 800732c:	4603      	mov	r3, r0
 800732e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007330:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d178      	bne.n	800742a <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	9308      	str	r3, [sp, #32]
 800733c:	2305      	movs	r3, #5
 800733e:	9307      	str	r3, [sp, #28]
 8007340:	2304      	movs	r3, #4
 8007342:	9306      	str	r3, [sp, #24]
 8007344:	2303      	movs	r3, #3
 8007346:	9305      	str	r3, [sp, #20]
 8007348:	2302      	movs	r3, #2
 800734a:	9304      	str	r3, [sp, #16]
 800734c:	2301      	movs	r3, #1
 800734e:	9303      	str	r3, [sp, #12]
 8007350:	2300      	movs	r3, #0
 8007352:	9302      	str	r3, [sp, #8]
 8007354:	2304      	movs	r3, #4
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	2303      	movs	r3, #3
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	2302      	movs	r3, #2
 800735e:	2201      	movs	r2, #1
 8007360:	2100      	movs	r1, #0
 8007362:	2007      	movs	r0, #7
 8007364:	f000 ff18 	bl	8008198 <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	3302      	adds	r3, #2
 800736c:	9308      	str	r3, [sp, #32]
 800736e:	2305      	movs	r3, #5
 8007370:	9307      	str	r3, [sp, #28]
 8007372:	2304      	movs	r3, #4
 8007374:	9306      	str	r3, [sp, #24]
 8007376:	2303      	movs	r3, #3
 8007378:	9305      	str	r3, [sp, #20]
 800737a:	2302      	movs	r3, #2
 800737c:	9304      	str	r3, [sp, #16]
 800737e:	2301      	movs	r3, #1
 8007380:	9303      	str	r3, [sp, #12]
 8007382:	2300      	movs	r3, #0
 8007384:	9302      	str	r3, [sp, #8]
 8007386:	2304      	movs	r3, #4
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	2303      	movs	r3, #3
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	2302      	movs	r3, #2
 8007390:	2201      	movs	r2, #1
 8007392:	2100      	movs	r1, #0
 8007394:	2007      	movs	r0, #7
 8007396:	f000 ff8f 	bl	80082b8 <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	68b9      	ldr	r1, [r7, #8]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f982 	bl	80076ae <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	2209      	movs	r2, #9
 80073ae:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	220b      	movs	r2, #11
 80073b4:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	2200      	movs	r2, #0
 80073ba:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	2221      	movs	r2, #33	; 0x21
 80073c0:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	2200      	movs	r2, #0
 80073c6:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	221b      	movs	r2, #27
 80073cc:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	2200      	movs	r2, #0
 80073d2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	2229      	movs	r2, #41	; 0x29
 80073d8:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	2200      	movs	r2, #0
 80073de:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	2222      	movs	r2, #34	; 0x22
 80073e4:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2209      	movs	r2, #9
 80073ea:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	22f5      	movs	r2, #245	; 0xf5
 80073f0:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	2209      	movs	r2, #9
 80073f6:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	220b      	movs	r2, #11
 80073fc:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2208      	movs	r2, #8
 8007412:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2288      	movs	r2, #136	; 0x88
 800741a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	229b      	movs	r2, #155	; 0x9b
 8007422:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	2226      	movs	r2, #38	; 0x26
 8007428:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800742a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b090      	sub	sp, #64	; 0x40
 800743a:	af0a      	add	r7, sp, #40	; 0x28
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	607a      	str	r2, [r7, #4]
 8007442:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007444:	2300      	movs	r3, #0
 8007446:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744a:	9304      	str	r3, [sp, #16]
 800744c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744e:	9303      	str	r3, [sp, #12]
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	9302      	str	r3, [sp, #8]
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	9301      	str	r3, [sp, #4]
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	68b9      	ldr	r1, [r7, #8]
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f7ff feb4 	bl	80071d0 <VL53LX_preset_mode_histogram_ranging>
 8007468:	4603      	mov	r3, r0
 800746a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 800746c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d178      	bne.n	8007566 <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	9308      	str	r3, [sp, #32]
 8007478:	2303      	movs	r3, #3
 800747a:	9307      	str	r3, [sp, #28]
 800747c:	2302      	movs	r3, #2
 800747e:	9306      	str	r3, [sp, #24]
 8007480:	2301      	movs	r3, #1
 8007482:	9305      	str	r3, [sp, #20]
 8007484:	2302      	movs	r3, #2
 8007486:	9304      	str	r3, [sp, #16]
 8007488:	2301      	movs	r3, #1
 800748a:	9303      	str	r3, [sp, #12]
 800748c:	2300      	movs	r3, #0
 800748e:	9302      	str	r3, [sp, #8]
 8007490:	2302      	movs	r3, #2
 8007492:	9301      	str	r3, [sp, #4]
 8007494:	2302      	movs	r3, #2
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	2301      	movs	r3, #1
 800749a:	2201      	movs	r2, #1
 800749c:	2100      	movs	r1, #0
 800749e:	2007      	movs	r0, #7
 80074a0:	f000 fe7a 	bl	8008198 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	3302      	adds	r3, #2
 80074a8:	9308      	str	r3, [sp, #32]
 80074aa:	2303      	movs	r3, #3
 80074ac:	9307      	str	r3, [sp, #28]
 80074ae:	2302      	movs	r3, #2
 80074b0:	9306      	str	r3, [sp, #24]
 80074b2:	2301      	movs	r3, #1
 80074b4:	9305      	str	r3, [sp, #20]
 80074b6:	2302      	movs	r3, #2
 80074b8:	9304      	str	r3, [sp, #16]
 80074ba:	2301      	movs	r3, #1
 80074bc:	9303      	str	r3, [sp, #12]
 80074be:	2300      	movs	r3, #0
 80074c0:	9302      	str	r3, [sp, #8]
 80074c2:	2302      	movs	r3, #2
 80074c4:	9301      	str	r3, [sp, #4]
 80074c6:	2302      	movs	r3, #2
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	2301      	movs	r3, #1
 80074cc:	2201      	movs	r2, #1
 80074ce:	2100      	movs	r1, #0
 80074d0:	2007      	movs	r0, #7
 80074d2:	f000 fef1 	bl	80082b8 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	68b9      	ldr	r1, [r7, #8]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f8e4 	bl	80076ae <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	2205      	movs	r2, #5
 80074ea:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	2207      	movs	r2, #7
 80074f0:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 80074f8:	6a3b      	ldr	r3, [r7, #32]
 80074fa:	2236      	movs	r2, #54	; 0x36
 80074fc:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	2200      	movs	r2, #0
 8007502:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	2228      	movs	r2, #40	; 0x28
 8007508:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	2200      	movs	r2, #0
 800750e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	2244      	movs	r2, #68	; 0x44
 8007514:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	2200      	movs	r2, #0
 800751a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	2233      	movs	r2, #51	; 0x33
 8007520:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2205      	movs	r2, #5
 8007526:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	22f5      	movs	r2, #245	; 0xf5
 800752c:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	2205      	movs	r2, #5
 8007532:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	2207      	movs	r2, #7
 8007538:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 800753a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753c:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 8007542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007544:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2208      	movs	r2, #8
 800754e:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2248      	movs	r2, #72	; 0x48
 8007556:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	229b      	movs	r2, #155	; 0x9b
 800755e:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007562:	2226      	movs	r2, #38	; 0x26
 8007564:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8007566:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b090      	sub	sp, #64	; 0x40
 8007576:	af0a      	add	r7, sp, #40	; 0x28
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	607a      	str	r2, [r7, #4]
 800757e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007580:	2300      	movs	r3, #0
 8007582:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	9304      	str	r3, [sp, #16]
 8007588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758a:	9303      	str	r3, [sp, #12]
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	9302      	str	r3, [sp, #8]
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	9301      	str	r3, [sp, #4]
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	68b9      	ldr	r1, [r7, #8]
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f7ff fe16 	bl	80071d0 <VL53LX_preset_mode_histogram_ranging>
 80075a4:	4603      	mov	r3, r0
 80075a6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80075a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d178      	bne.n	80076a2 <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	9308      	str	r3, [sp, #32]
 80075b4:	2302      	movs	r3, #2
 80075b6:	9307      	str	r3, [sp, #28]
 80075b8:	2302      	movs	r3, #2
 80075ba:	9306      	str	r3, [sp, #24]
 80075bc:	2301      	movs	r3, #1
 80075be:	9305      	str	r3, [sp, #20]
 80075c0:	2301      	movs	r3, #1
 80075c2:	9304      	str	r3, [sp, #16]
 80075c4:	2301      	movs	r3, #1
 80075c6:	9303      	str	r3, [sp, #12]
 80075c8:	2300      	movs	r3, #0
 80075ca:	9302      	str	r3, [sp, #8]
 80075cc:	2301      	movs	r3, #1
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	2301      	movs	r3, #1
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	2301      	movs	r3, #1
 80075d6:	2200      	movs	r2, #0
 80075d8:	2107      	movs	r1, #7
 80075da:	2007      	movs	r0, #7
 80075dc:	f000 fddc 	bl	8008198 <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80075e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e2:	3302      	adds	r3, #2
 80075e4:	9308      	str	r3, [sp, #32]
 80075e6:	2302      	movs	r3, #2
 80075e8:	9307      	str	r3, [sp, #28]
 80075ea:	2302      	movs	r3, #2
 80075ec:	9306      	str	r3, [sp, #24]
 80075ee:	2301      	movs	r3, #1
 80075f0:	9305      	str	r3, [sp, #20]
 80075f2:	2301      	movs	r3, #1
 80075f4:	9304      	str	r3, [sp, #16]
 80075f6:	2301      	movs	r3, #1
 80075f8:	9303      	str	r3, [sp, #12]
 80075fa:	2300      	movs	r3, #0
 80075fc:	9302      	str	r3, [sp, #8]
 80075fe:	2301      	movs	r3, #1
 8007600:	9301      	str	r3, [sp, #4]
 8007602:	2301      	movs	r3, #1
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	2301      	movs	r3, #1
 8007608:	2200      	movs	r2, #0
 800760a:	2107      	movs	r1, #7
 800760c:	2007      	movs	r0, #7
 800760e:	f000 fe53 	bl	80082b8 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	68b9      	ldr	r1, [r7, #8]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f846 	bl	80076ae <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	2203      	movs	r2, #3
 8007626:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	2205      	movs	r2, #5
 800762c:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	2200      	movs	r2, #0
 8007632:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	2252      	movs	r2, #82	; 0x52
 8007638:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	2200      	movs	r2, #0
 800763e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	2237      	movs	r2, #55	; 0x37
 8007644:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	2200      	movs	r2, #0
 800764a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	2266      	movs	r2, #102	; 0x66
 8007650:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	2200      	movs	r2, #0
 8007656:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8007658:	6a3b      	ldr	r3, [r7, #32]
 800765a:	2244      	movs	r2, #68	; 0x44
 800765c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2203      	movs	r2, #3
 8007662:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	22f5      	movs	r2, #245	; 0xf5
 8007668:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	2203      	movs	r2, #3
 800766e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	2205      	movs	r2, #5
 8007674:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8007676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007678:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800767e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007680:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2208      	movs	r2, #8
 800768a:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2228      	movs	r2, #40	; 0x28
 8007692:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8007696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007698:	22bb      	movs	r2, #187	; 0xbb
 800769a:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	2226      	movs	r2, #38	; 0x26
 80076a0:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80076a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b085      	sub	sp, #20
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	607a      	str	r2, [r7, #4]
 80076ba:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	79db      	ldrb	r3, [r3, #7]
 80076f0:	b29b      	uxth	r3, r3
				<< 8)
 80076f2:	021b      	lsls	r3, r3, #8
 80076f4:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	7a1b      	ldrb	r3, [r3, #8]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	4413      	add	r3, r2
 80076fe:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	785b      	ldrb	r3, [r3, #1]
 8007738:	b29b      	uxth	r3, r3
				<< 8)
 800773a:	021b      	lsls	r3, r3, #8
 800773c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	789b      	ldrb	r3, [r3, #2]
 8007742:	b29b      	uxth	r3, r3
 8007744:	4413      	add	r3, r2
 8007746:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	78db      	ldrb	r3, [r3, #3]
 8007750:	b29b      	uxth	r3, r3
				<< 8)
 8007752:	021b      	lsls	r3, r3, #8
 8007754:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	791b      	ldrb	r3, [r3, #4]
 800775a:	b29b      	uxth	r3, r3
 800775c:	4413      	add	r3, r2
 800775e:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 800778c:	bf00      	nop
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	79db      	ldrb	r3, [r3, #7]
 80077d8:	b29b      	uxth	r3, r3
				<< 8)
 80077da:	021b      	lsls	r3, r3, #8
 80077dc:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	7a1b      	ldrb	r3, [r3, #8]
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	4413      	add	r3, r2
 80077e6:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	785b      	ldrb	r3, [r3, #1]
 8007818:	b29b      	uxth	r3, r3
				<< 8)
 800781a:	021b      	lsls	r3, r3, #8
 800781c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	789b      	ldrb	r3, [r3, #2]
 8007822:	b29b      	uxth	r3, r3
 8007824:	4413      	add	r3, r2
 8007826:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	78db      	ldrb	r3, [r3, #3]
 8007830:	b29b      	uxth	r3, r3
				<< 8)
 8007832:	021b      	lsls	r3, r3, #8
 8007834:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	791b      	ldrb	r3, [r3, #4]
 800783a:	b29b      	uxth	r3, r3
 800783c:	4413      	add	r3, r2
 800783e:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 8007854:	bf00      	nop
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3318      	adds	r3, #24
 800786c:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800788c:	bf00      	nop
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3318      	adds	r3, #24
 80078a8:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	332c      	adds	r3, #44	; 0x2c
 80078ae:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	78fa      	ldrb	r2, [r7, #3]
 80078b4:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2200      	movs	r2, #0
 80078ba:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2202      	movs	r2, #2
 80078c0:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2200      	movs	r2, #0
 80078c6:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	2200      	movs	r2, #0
 80078cc:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	78fa      	ldrb	r2, [r7, #3]
 80078d2:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2200      	movs	r2, #0
 80078d8:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2202      	movs	r2, #2
 80078de:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2200      	movs	r2, #0
 80078e4:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	2200      	movs	r2, #0
 80078ea:	735a      	strb	r2, [r3, #13]

}
 80078ec:	bf00      	nop
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 8007900:	2300      	movs	r3, #0
 8007902:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	3318      	adds	r3, #24
 8007908:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	332c      	adds	r3, #44	; 0x2c
 800790e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d115      	bne.n	800794a <VL53LX_update_ll_driver_rd_state+0x52>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2203      	movs	r2, #3
 8007922:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2202      	movs	r2, #2
 800793a:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	735a      	strb	r2, [r3, #13]
 8007948:	e0be      	b.n	8007ac8 <VL53LX_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	7a1b      	ldrb	r3, [r3, #8]
 800794e:	2bff      	cmp	r3, #255	; 0xff
 8007950:	d103      	bne.n	800795a <VL53LX_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2280      	movs	r2, #128	; 0x80
 8007956:	721a      	strb	r2, [r3, #8]
 8007958:	e005      	b.n	8007966 <VL53LX_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	7a1b      	ldrb	r3, [r3, #8]
 800795e:	3301      	adds	r3, #1
 8007960:	b2da      	uxtb	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	7a19      	ldrb	r1, [r3, #8]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f103 0209 	add.w	r2, r3, #9
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	330a      	adds	r3, #10
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f002 fcf6 	bl	800a366 <VL53LX_update_internal_stream_counters>
 800797a:	4603      	mov	r3, r0
 800797c:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	7adb      	ldrb	r3, [r3, #11]
 8007982:	f083 0302 	eor.w	r3, r3, #2
 8007986:	b2da      	uxtb	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	79db      	ldrb	r3, [r3, #7]
 8007990:	3b03      	subs	r3, #3
 8007992:	2b05      	cmp	r3, #5
 8007994:	f200 8082 	bhi.w	8007a9c <VL53LX_update_ll_driver_rd_state+0x1a4>
 8007998:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <VL53LX_update_ll_driver_rd_state+0xa8>)
 800799a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799e:	bf00      	nop
 80079a0:	080079b9 	.word	0x080079b9
 80079a4:	08007a9d 	.word	0x08007a9d
 80079a8:	08007a9d 	.word	0x08007a9d
 80079ac:	08007a0b 	.word	0x08007a0b
 80079b0:	08007a41 	.word	0x08007a41
 80079b4:	08007a6b 	.word	0x08007a6b

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	f893 335e 	ldrb.w	r3, [r3, #862]	; 0x35e
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	dd03      	ble.n	80079ce <VL53LX_update_ll_driver_rd_state+0xd6>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2206      	movs	r2, #6
 80079ca:	71da      	strb	r2, [r3, #7]
 80079cc:	e00d      	b.n	80079ea <VL53LX_update_ll_driver_rd_state+0xf2>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 80079d8:	429a      	cmp	r2, r3
 80079da:	d303      	bcc.n	80079e4 <VL53LX_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2208      	movs	r2, #8
 80079e0:	71da      	strb	r2, [r3, #7]
 80079e2:	e002      	b.n	80079ea <VL53LX_update_ll_driver_rd_state+0xf2>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2207      	movs	r2, #7
 80079e8:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	735a      	strb	r2, [r3, #13]

			break;
 8007a08:	e05e      	b.n	8007ac8 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d303      	bcc.n	8007a38 <VL53LX_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2208      	movs	r2, #8
 8007a34:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8007a36:	e047      	b.n	8007ac8 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2207      	movs	r2, #7
 8007a3c:	71da      	strb	r2, [r3, #7]
			break;
 8007a3e:	e043      	b.n	8007ac8 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	7b5b      	ldrb	r3, [r3, #13]
 8007a44:	3301      	adds	r3, #1
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d303      	bcc.n	8007a62 <VL53LX_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2208      	movs	r2, #8
 8007a5e:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8007a60:	e032      	b.n	8007ac8 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2207      	movs	r2, #7
 8007a66:	71da      	strb	r2, [r3, #7]
			break;
 8007a68:	e02e      	b.n	8007ac8 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	7b1b      	ldrb	r3, [r3, #12]
 8007a74:	f083 0301 	eor.w	r3, r3, #1
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d303      	bcc.n	8007a94 <VL53LX_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2208      	movs	r2, #8
 8007a90:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 8007a92:	e019      	b.n	8007ac8 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2207      	movs	r2, #7
 8007a98:	71da      	strb	r2, [r3, #7]
			break;
 8007a9a:	e015      	b.n	8007ac8 <VL53LX_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2203      	movs	r2, #3
 8007aa0:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	735a      	strb	r2, [r3, #13]
			break;
 8007ac6:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 8007ac8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b08d      	sub	sp, #52	; 0x34
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8007adc:	2300      	movs	r3, #0
 8007ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t  *pdev =
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	3318      	adds	r3, #24
 8007ae6:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007aee:	627b      	str	r3, [r7, #36]	; 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	332c      	adds	r3, #44	; 0x2c
 8007af4:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	f203 3366 	addw	r3, r3, #870	; 0x366
 8007afc:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 8007afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b04:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8007b0c:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 8007b16:	2300      	movs	r3, #0
 8007b18:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8007b2c:	f003 031f 	and.w	r3, r3, #31
 8007b30:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	78db      	ldrb	r3, [r3, #3]
 8007b36:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 8007b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3a:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007b3e:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	bf14      	ite	ne
 8007b46:	2301      	movne	r3, #1
 8007b48:	2300      	moveq	r3, #0
 8007b4a:	b2db      	uxtb	r3, r3
	histogram_mode =
 8007b4c:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8007b52:	111b      	asrs	r3, r3, #4
 8007b54:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8007b56:	f003 0302 	and.w	r3, r3, #2
 8007b5a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 8007b5e:	7c7b      	ldrb	r3, [r7, #17]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d008      	beq.n	8007b76 <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8007b6a:	111b      	asrs	r3, r3, #4
 8007b6c:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 8007b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b78:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007b7c:	f003 0320 	and.w	r3, r3, #32
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d04e      	beq.n	8007c22 <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 8007b84:	6a3b      	ldr	r3, [r7, #32]
 8007b86:	79db      	ldrb	r3, [r3, #7]
 8007b88:	2b06      	cmp	r3, #6
 8007b8a:	d109      	bne.n	8007ba0 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 8007b8c:	7c7b      	ldrb	r3, [r7, #17]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d14a      	bne.n	8007c28 <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 8007b92:	7cfb      	ldrb	r3, [r7, #19]
 8007b94:	2b12      	cmp	r3, #18
 8007b96:	d047      	beq.n	8007c28 <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8007b98:	23ef      	movs	r3, #239	; 0xef
 8007b9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007b9e:	e043      	b.n	8007c28 <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	7a1b      	ldrb	r3, [r3, #8]
 8007ba4:	7cba      	ldrb	r2, [r7, #18]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d002      	beq.n	8007bb0 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 8007baa:	23ee      	movs	r3, #238	; 0xee
 8007bac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	7adb      	ldrb	r3, [r3, #11]
 8007bb4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d002      	beq.n	8007bc2 <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8007bbc:	23ed      	movs	r3, #237	; 0xed
 8007bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	7b5b      	ldrb	r3, [r3, #13]
 8007bc6:	4619      	mov	r1, r3
		expected_stream_count =
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	460b      	mov	r3, r1
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	440b      	add	r3, r1
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	4413      	add	r3, r2
 8007bd4:	3302      	adds	r3, #2
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	7b5b      	ldrb	r3, [r3, #13]
 8007bde:	4619      	mov	r1, r3
		expected_gph_id =
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	460b      	mov	r3, r1
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	440b      	add	r3, r1
 8007be8:	005b      	lsls	r3, r3, #1
 8007bea:	4413      	add	r3, r2
 8007bec:	3303      	adds	r3, #3
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 8007bf2:	7c3a      	ldrb	r2, [r7, #16]
 8007bf4:	7cbb      	ldrb	r3, [r7, #18]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d00a      	beq.n	8007c10 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 8007bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfc:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d102      	bne.n	8007c0a <VL53LX_check_ll_driver_rd_state+0x136>
 8007c04:	7cbb      	ldrb	r3, [r7, #18]
 8007c06:	2bff      	cmp	r3, #255	; 0xff
 8007c08:	d002      	beq.n	8007c10 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 8007c0a:	23ec      	movs	r3, #236	; 0xec
 8007c0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 8007c10:	7bfa      	ldrb	r2, [r7, #15]
 8007c12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d005      	beq.n	8007c26 <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 8007c1a:	23eb      	movs	r3, #235	; 0xeb
 8007c1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007c20:	e002      	b.n	8007c28 <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 8007c22:	bf00      	nop
 8007c24:	e000      	b.n	8007c28 <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 8007c26:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8007c28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3734      	adds	r7, #52	; 0x34
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b088      	sub	sp, #32
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8007c40:	2300      	movs	r3, #0
 8007c42:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3318      	adds	r3, #24
 8007c48:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007c50:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	332c      	adds	r3, #44	; 0x2c
 8007c56:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8007c5e:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d11b      	bne.n	8007ca6 <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	2203      	movs	r2, #3
 8007c72:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	2200      	movs	r2, #0
 8007c78:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	2200      	movs	r2, #0
 8007c84:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	2200      	movs	r2, #0
 8007c96:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	773b      	strb	r3, [r7, #28]
 8007ca4:	e0b1      	b.n	8007e0a <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	791b      	ldrb	r3, [r3, #4]
 8007caa:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	799b      	ldrb	r3, [r3, #6]
 8007cb0:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	785b      	ldrb	r3, [r3, #1]
 8007cb6:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	785b      	ldrb	r3, [r3, #1]
 8007cbc:	2bff      	cmp	r3, #255	; 0xff
 8007cbe:	d103      	bne.n	8007cc8 <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2280      	movs	r2, #128	; 0x80
 8007cc4:	705a      	strb	r2, [r3, #1]
 8007cc6:	e005      	b.n	8007cd4 <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	785b      	ldrb	r3, [r3, #1]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	7859      	ldrb	r1, [r3, #1]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	1c9a      	adds	r2, r3, #2
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	3303      	adds	r3, #3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f002 fb40 	bl	800a366 <VL53LX_update_internal_stream_counters>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	791b      	ldrb	r3, [r3, #4]
 8007cee:	f083 0302 	eor.w	r3, r3, #2
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b05      	cmp	r3, #5
 8007cfe:	d053      	beq.n	8007da8 <VL53LX_update_ll_driver_cfg_state+0x170>
 8007d00:	2b05      	cmp	r3, #5
 8007d02:	dc69      	bgt.n	8007dd8 <VL53LX_update_ll_driver_cfg_state+0x1a0>
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d002      	beq.n	8007d0e <VL53LX_update_ll_driver_cfg_state+0xd6>
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	d02d      	beq.n	8007d68 <VL53LX_update_ll_driver_cfg_state+0x130>
 8007d0c:	e064      	b.n	8007dd8 <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	2201      	movs	r2, #1
 8007d12:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d909      	bls.n	8007d36 <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	2200      	movs	r2, #0
 8007d26:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	795b      	ldrb	r3, [r3, #5]
 8007d2c:	f083 0301 	eor.w	r3, r3, #1
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d106      	bne.n	8007d54 <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	70da      	strb	r2, [r3, #3]
 8007d52:	e005      	b.n	8007d60 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	2200      	movs	r2, #0
 8007d58:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	2204      	movs	r2, #4
 8007d64:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 8007d66:	e050      	b.n	8007e0a <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	799b      	ldrb	r3, [r3, #6]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	b2da      	uxtb	r2, r3
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d940      	bls.n	8007e04 <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	2200      	movs	r2, #0
 8007d86:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	795b      	ldrb	r3, [r3, #5]
 8007d8c:	f083 0301 	eor.w	r3, r3, #1
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d031      	beq.n	8007e04 <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	2205      	movs	r2, #5
 8007da4:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 8007da6:	e02d      	b.n	8007e04 <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	799b      	ldrb	r3, [r3, #6]
 8007dac:	3301      	adds	r3, #1
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d922      	bls.n	8007e08 <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	795b      	ldrb	r3, [r3, #5]
 8007dcc:	f083 0301 	eor.w	r3, r3, #1
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	715a      	strb	r2, [r3, #5]
			}
			break;
 8007dd6:	e017      	b.n	8007e08 <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	2203      	movs	r2, #3
 8007ddc:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	2200      	movs	r2, #0
 8007de2:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	2200      	movs	r2, #0
 8007de8:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	2200      	movs	r2, #0
 8007dee:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	2202      	movs	r2, #2
 8007df4:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	719a      	strb	r2, [r3, #6]
			break;
 8007e02:	e002      	b.n	8007e0a <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007e04:	bf00      	nop
 8007e06:	e000      	b.n	8007e0a <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007e08:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d11d      	bne.n	8007e50 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007e14:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 8007e16:	7f3b      	ldrb	r3, [r7, #28]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	b2d8      	uxtb	r0, r3
 8007e1c:	68f9      	ldr	r1, [r7, #12]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4413      	add	r3, r2
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	440b      	add	r3, r1
 8007e28:	3302      	adds	r3, #2
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	7b5b      	ldrb	r3, [r3, #13]
 8007e32:	4619      	mov	r1, r3
 8007e34:	7f7b      	ldrb	r3, [r7, #29]
 8007e36:	f083 0302 	eor.w	r3, r3, #2
 8007e3a:	b2d8      	uxtb	r0, r3
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	440b      	add	r3, r1
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	4413      	add	r3, r2
 8007e48:	3303      	adds	r3, #3
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	701a      	strb	r2, [r3, #0]
 8007e4e:	e013      	b.n	8007e78 <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007e50:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 8007e52:	68f9      	ldr	r1, [r7, #12]
 8007e54:	4613      	mov	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	005b      	lsls	r3, r3, #1
 8007e5c:	440b      	add	r3, r1
 8007e5e:	3302      	adds	r3, #2
 8007e60:	7f3a      	ldrb	r2, [r7, #28]
 8007e62:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 8007e64:	7fba      	ldrb	r2, [r7, #30]
 8007e66:	68f9      	ldr	r1, [r7, #12]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	440b      	add	r3, r1
 8007e72:	3303      	adds	r3, #3
 8007e74:	7f7a      	ldrb	r2, [r7, #29]
 8007e76:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 8007e78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3720      	adds	r7, #32
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	7c1a      	ldrb	r2, [r3, #16]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	7c52      	ldrb	r2, [r2, #17]
 8007e9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	3302      	adds	r3, #2
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	7c92      	ldrb	r2, [r2, #18]
 8007ea8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	3303      	adds	r3, #3
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	7cd2      	ldrb	r2, [r2, #19]
 8007eb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	7d12      	ldrb	r2, [r2, #20]
 8007ebc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	3305      	adds	r3, #5
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	7d52      	ldrb	r2, [r2, #21]
 8007ec6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	3306      	adds	r3, #6
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	7d92      	ldrb	r2, [r2, #22]
 8007ed0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	3307      	adds	r3, #7
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	7dd2      	ldrb	r2, [r2, #23]
 8007eda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	3308      	adds	r3, #8
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	7e12      	ldrb	r2, [r2, #24]
 8007ee4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	3309      	adds	r3, #9
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	7e52      	ldrb	r2, [r2, #25]
 8007eee:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	330a      	adds	r3, #10
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	7e92      	ldrb	r2, [r2, #26]
 8007ef8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	330b      	adds	r3, #11
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	7ed2      	ldrb	r2, [r2, #27]
 8007f02:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	330c      	adds	r3, #12
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	7f12      	ldrb	r2, [r2, #28]
 8007f0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	330d      	adds	r3, #13
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	7f52      	ldrb	r2, [r2, #29]
 8007f16:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	330e      	adds	r3, #14
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	7f92      	ldrb	r2, [r2, #30]
 8007f20:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	330f      	adds	r3, #15
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	7fd2      	ldrb	r2, [r2, #31]
 8007f2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	3310      	adds	r3, #16
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007f36:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	3311      	adds	r3, #17
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007f42:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	3312      	adds	r3, #18
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8007f4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	3313      	adds	r3, #19
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8007f5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	3314      	adds	r3, #20
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007f66:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	3315      	adds	r3, #21
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007f72:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	3316      	adds	r3, #22
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8007f7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	3317      	adds	r3, #23
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8007f8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	3318      	adds	r3, #24
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8007f96:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	3319      	adds	r3, #25
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8007fa2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	331a      	adds	r3, #26
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8007fae:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	331b      	adds	r3, #27
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8007fba:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	331c      	adds	r3, #28
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007fc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	331d      	adds	r3, #29
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007fd2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	331e      	adds	r3, #30
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8007fde:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	331f      	adds	r3, #31
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8007fea:	701a      	strb	r2, [r3, #0]
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	22ff      	movs	r2, #255	; 0xff
 8008004:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	22ff      	movs	r2, #255	; 0xff
 800800a:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	22ff      	movs	r2, #255	; 0xff
 8008010:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	22ff      	movs	r2, #255	; 0xff
 8008016:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800801e:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008026:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800802e:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008036:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800803e:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008046:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800804e:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008056:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800805e:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008066:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800806e:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008076:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800807e:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008086:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800808e:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008096:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800809e:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080a6:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080ae:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	22ff      	movs	r2, #255	; 0xff
 80080b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	4603      	mov	r3, r0
 80080cc:	6039      	str	r1, [r7, #0]
 80080ce:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	2205      	movs	r2, #5
 80080d8:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	79fa      	ldrb	r2, [r7, #7]
 80080de:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 80080e0:	2300      	movs	r3, #0
 80080e2:	73fb      	strb	r3, [r7, #15]
 80080e4:	e017      	b.n	8008116 <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 80080e6:	7bfa      	ldrb	r2, [r7, #15]
 80080e8:	4613      	mov	r3, r2
 80080ea:	011b      	lsls	r3, r3, #4
 80080ec:	4413      	add	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	4413      	add	r3, r2
 80080f4:	3304      	adds	r3, #4
 80080f6:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2203      	movs	r2, #3
 80080fc:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2203      	movs	r2, #3
 8008102:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2204      	movs	r2, #4
 8008108:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	2200      	movs	r2, #0
 800810e:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8008110:	7bfb      	ldrb	r3, [r7, #15]
 8008112:	3301      	adds	r3, #1
 8008114:	73fb      	strb	r3, [r7, #15]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	7bfa      	ldrb	r2, [r7, #15]
 800811c:	429a      	cmp	r2, r3
 800811e:	d3e2      	bcc.n	80080e6 <V53L1_init_zone_results_structure+0x22>
	}
}
 8008120:	bf00      	nop
 8008122:	bf00      	nop
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53LX_DEV              Dev)
{
 800812e:	b480      	push	{r7}
 8008130:	b087      	sub	sp, #28
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverResults_t  *pres =
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800813c:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800813e:	2300      	movs	r3, #0
 8008140:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53LX_MAX_USER_ZONES;
 8008142:	2305      	movs	r3, #5
 8008144:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800814c:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800814e:	2300      	movs	r3, #0
 8008150:	75fb      	strb	r3, [r7, #23]
 8008152:	e016      	b.n	8008182 <V53L1_init_zone_dss_configs+0x54>
		pdata->VL53LX_p_003[z].dss_mode =
 8008154:	7dfa      	ldrb	r2, [r7, #23]
 8008156:	68b9      	ldr	r1, [r7, #8]
 8008158:	4613      	mov	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	005b      	lsls	r3, r3, #1
 8008160:	440b      	add	r3, r1
 8008162:	3304      	adds	r3, #4
 8008164:	2201      	movs	r2, #1
 8008166:	701a      	strb	r2, [r3, #0]
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53LX_p_003[z].dss_requested_effective_spad_count = 0;
 8008168:	7dfa      	ldrb	r2, [r7, #23]
 800816a:	68b9      	ldr	r1, [r7, #8]
 800816c:	4613      	mov	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	005b      	lsls	r3, r3, #1
 8008174:	440b      	add	r3, r1
 8008176:	3306      	adds	r3, #6
 8008178:	2200      	movs	r2, #0
 800817a:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 800817c:	7dfb      	ldrb	r3, [r7, #23]
 800817e:	3301      	adds	r3, #1
 8008180:	75fb      	strb	r3, [r7, #23]
 8008182:	7dfa      	ldrb	r2, [r7, #23]
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	429a      	cmp	r2, r3
 8008188:	d3e4      	bcc.n	8008154 <V53L1_init_zone_dss_configs+0x26>
	}
}
 800818a:	bf00      	nop
 800818c:	bf00      	nop
 800818e:	371c      	adds	r7, #28
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 8008198:	b490      	push	{r4, r7}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	4604      	mov	r4, r0
 80081a0:	4608      	mov	r0, r1
 80081a2:	4611      	mov	r1, r2
 80081a4:	461a      	mov	r2, r3
 80081a6:	4623      	mov	r3, r4
 80081a8:	71fb      	strb	r3, [r7, #7]
 80081aa:	4603      	mov	r3, r0
 80081ac:	71bb      	strb	r3, [r7, #6]
 80081ae:	460b      	mov	r3, r1
 80081b0:	717b      	strb	r3, [r7, #5]
 80081b2:	4613      	mov	r3, r2
 80081b4:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 80081b6:	79bb      	ldrb	r3, [r7, #6]
 80081b8:	011b      	lsls	r3, r3, #4
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	79fb      	ldrb	r3, [r7, #7]
 80081be:	4413      	add	r3, r2
 80081c0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 80081c6:	793b      	ldrb	r3, [r7, #4]
 80081c8:	011b      	lsls	r3, r3, #4
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	797b      	ldrb	r3, [r7, #5]
 80081ce:	4413      	add	r3, r2
 80081d0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 80081d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d4:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 80081d6:	7d3b      	ldrb	r3, [r7, #20]
 80081d8:	011b      	lsls	r3, r3, #4
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	7c3b      	ldrb	r3, [r7, #16]
 80081de:	4413      	add	r3, r2
 80081e0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 80081e6:	7f3b      	ldrb	r3, [r7, #28]
 80081e8:	011b      	lsls	r3, r3, #4
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	7e3b      	ldrb	r3, [r7, #24]
 80081ee:	4413      	add	r3, r2
 80081f0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 80081f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081fa:	011b      	lsls	r3, r3, #4
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008202:	4413      	add	r3, r2
 8008204:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800820a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800820e:	011b      	lsls	r3, r3, #4
 8008210:	b2da      	uxtb	r2, r3
 8008212:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008216:	4413      	add	r3, r2
 8008218:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800821a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821c:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800821e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008220:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800822e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008230:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008244:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8008246:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800824a:	011b      	lsls	r3, r3, #4
 800824c:	b2da      	uxtb	r2, r3
 800824e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008252:	4413      	add	r3, r2
 8008254:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8008256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008258:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008260:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8008262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008264:	2200      	movs	r2, #0
 8008266:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8008268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826a:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8008270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008272:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008276:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800827c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827e:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 8008284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008286:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800828c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828e:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 8008290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008292:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 8008294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008296:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 8008298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800829e:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 80082a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082a6:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	2200      	movs	r2, #0
 80082ac:	701a      	strb	r2, [r3, #0]

}
 80082ae:	bf00      	nop
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bc90      	pop	{r4, r7}
 80082b6:	4770      	bx	lr

080082b8 <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 80082b8:	b490      	push	{r4, r7}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4604      	mov	r4, r0
 80082c0:	4608      	mov	r0, r1
 80082c2:	4611      	mov	r1, r2
 80082c4:	461a      	mov	r2, r3
 80082c6:	4623      	mov	r3, r4
 80082c8:	71fb      	strb	r3, [r7, #7]
 80082ca:	4603      	mov	r3, r0
 80082cc:	71bb      	strb	r3, [r7, #6]
 80082ce:	460b      	mov	r3, r1
 80082d0:	717b      	strb	r3, [r7, #5]
 80082d2:	4613      	mov	r3, r2
 80082d4:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 80082d6:	79bb      	ldrb	r3, [r7, #6]
 80082d8:	011b      	lsls	r3, r3, #4
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	79fb      	ldrb	r3, [r7, #7]
 80082de:	4413      	add	r3, r2
 80082e0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 80082e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e4:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 80082e6:	793b      	ldrb	r3, [r7, #4]
 80082e8:	011b      	lsls	r3, r3, #4
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	797b      	ldrb	r3, [r7, #5]
 80082ee:	4413      	add	r3, r2
 80082f0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 80082f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f4:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 80082f6:	7d3b      	ldrb	r3, [r7, #20]
 80082f8:	011b      	lsls	r3, r3, #4
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	7c3b      	ldrb	r3, [r7, #16]
 80082fe:	4413      	add	r3, r2
 8008300:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8008306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008308:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800830e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008310:	789a      	ldrb	r2, [r3, #2]
 8008312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008314:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	78da      	ldrb	r2, [r3, #3]
 800831a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831c:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8008322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008324:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	789a      	ldrb	r2, [r3, #2]
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	78da      	ldrb	r2, [r3, #3]
 8008332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008334:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	791a      	ldrb	r2, [r3, #4]
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008344:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8008346:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800834a:	011b      	lsls	r3, r3, #4
 800834c:	b2da      	uxtb	r2, r3
 800834e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008352:	4413      	add	r3, r2
 8008354:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008360:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 8008362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008364:	2200      	movs	r2, #0
 8008366:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 8008368:	7f3b      	ldrb	r3, [r7, #28]
 800836a:	011b      	lsls	r3, r3, #4
 800836c:	b2da      	uxtb	r2, r3
 800836e:	7e3b      	ldrb	r3, [r7, #24]
 8008370:	4413      	add	r3, r2
 8008372:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 8008374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008376:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 8008378:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800837c:	011b      	lsls	r3, r3, #4
 800837e:	b2da      	uxtb	r2, r3
 8008380:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008384:	4413      	add	r3, r2
 8008386:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 8008388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838a:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800838c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008390:	011b      	lsls	r3, r3, #4
 8008392:	b2da      	uxtb	r2, r3
 8008394:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008398:	4413      	add	r3, r2
 800839a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800839c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839e:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	7bda      	ldrb	r2, [r3, #15]
 80083a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a6:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 80083a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083aa:	7c1a      	ldrb	r2, [r3, #16]
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 80083b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b2:	7c5a      	ldrb	r2, [r3, #17]
 80083b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b6:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 80083b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083be:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 80083c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083c6:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 80083c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ca:	2200      	movs	r2, #0
 80083cc:	701a      	strb	r2, [r3, #0]
}
 80083ce:	bf00      	nop
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bc90      	pop	{r4, r7}
 80083d6:	4770      	bx	lr

080083d8 <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 80083d8:	b480      	push	{r7}
 80083da:	b087      	sub	sp, #28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	460b      	mov	r3, r1
 80083e2:	607a      	str	r2, [r7, #4]
 80083e4:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	220c      	movs	r2, #12
 8008400:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 8008402:	897b      	ldrh	r3, [r7, #10]
 8008404:	b2da      	uxtb	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_015                = 0;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 8008438:	2300      	movs	r3, #0
 800843a:	82fb      	strh	r3, [r7, #22]
 800843c:	e015      	b.n	800846a <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 800843e:	8afa      	ldrh	r2, [r7, #22]
 8008440:	897b      	ldrh	r3, [r7, #10]
 8008442:	429a      	cmp	r2, r3
 8008444:	d207      	bcs.n	8008456 <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 8008446:	8afb      	ldrh	r3, [r7, #22]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	3302      	adds	r3, #2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	605a      	str	r2, [r3, #4]
 8008454:	e006      	b.n	8008464 <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 8008456:	8afb      	ldrh	r3, [r7, #22]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	3302      	adds	r3, #2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	2200      	movs	r2, #0
 8008462:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 8008464:	8afb      	ldrh	r3, [r7, #22]
 8008466:	3301      	adds	r3, #1
 8008468:	82fb      	strh	r3, [r7, #22]
 800846a:	8afb      	ldrh	r3, [r7, #22]
 800846c:	2b0b      	cmp	r3, #11
 800846e:	d9e6      	bls.n	800843e <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 8008470:	bf00      	nop
 8008472:	bf00      	nop
 8008474:	371c      	adds	r7, #28
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800847e:	b480      	push	{r7}
 8008480:	b085      	sub	sp, #20
 8008482:	af00      	add	r7, sp, #0
 8008484:	4603      	mov	r3, r0
 8008486:	603a      	str	r2, [r7, #0]
 8008488:	80fb      	strh	r3, [r7, #6]
 800848a:	460b      	mov	r3, r1
 800848c:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800848e:	2300      	movs	r3, #0
 8008490:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 8008496:	88fb      	ldrh	r3, [r7, #6]
 8008498:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800849a:	2300      	movs	r3, #0
 800849c:	81fb      	strh	r3, [r7, #14]
 800849e:	e00e      	b.n	80084be <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80084a0:	88ba      	ldrh	r2, [r7, #4]
 80084a2:	89fb      	ldrh	r3, [r7, #14]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	3b01      	subs	r3, #1
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	4413      	add	r3, r2
 80084ac:	89ba      	ldrh	r2, [r7, #12]
 80084ae:	b2d2      	uxtb	r2, r2
 80084b0:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80084b2:	89bb      	ldrh	r3, [r7, #12]
 80084b4:	0a1b      	lsrs	r3, r3, #8
 80084b6:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 80084b8:	89fb      	ldrh	r3, [r7, #14]
 80084ba:	3301      	adds	r3, #1
 80084bc:	81fb      	strh	r3, [r7, #14]
 80084be:	89fa      	ldrh	r2, [r7, #14]
 80084c0:	88bb      	ldrh	r3, [r7, #4]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d3ec      	bcc.n	80084a0 <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 80084c6:	bf00      	nop
 80084c8:	bf00      	nop
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	4603      	mov	r3, r0
 80084dc:	6039      	str	r1, [r7, #0]
 80084de:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 80084e0:	2300      	movs	r3, #0
 80084e2:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 80084e4:	e00a      	b.n	80084fc <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 80084e6:	89fb      	ldrh	r3, [r7, #14]
 80084e8:	021b      	lsls	r3, r3, #8
 80084ea:	b21a      	sxth	r2, r3
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	1c59      	adds	r1, r3, #1
 80084f0:	6039      	str	r1, [r7, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	b21b      	sxth	r3, r3
 80084f6:	4313      	orrs	r3, r2
 80084f8:	b21b      	sxth	r3, r3
 80084fa:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 80084fc:	88fb      	ldrh	r3, [r7, #6]
 80084fe:	1e5a      	subs	r2, r3, #1
 8008500:	80fa      	strh	r2, [r7, #6]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1ef      	bne.n	80084e6 <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 8008506:	89fb      	ldrh	r3, [r7, #14]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	603a      	str	r2, [r7, #0]
 800851e:	80fb      	strh	r3, [r7, #6]
 8008520:	460b      	mov	r3, r1
 8008522:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8008524:	2300      	movs	r3, #0
 8008526:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 800852c:	88fb      	ldrh	r3, [r7, #6]
 800852e:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8008530:	2300      	movs	r3, #0
 8008532:	81fb      	strh	r3, [r7, #14]
 8008534:	e00f      	b.n	8008556 <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008536:	88ba      	ldrh	r2, [r7, #4]
 8008538:	89fb      	ldrh	r3, [r7, #14]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	3b01      	subs	r3, #1
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	4413      	add	r3, r2
 8008542:	89ba      	ldrh	r2, [r7, #12]
 8008544:	b2d2      	uxtb	r2, r2
 8008546:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008548:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800854c:	121b      	asrs	r3, r3, #8
 800854e:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8008550:	89fb      	ldrh	r3, [r7, #14]
 8008552:	3301      	adds	r3, #1
 8008554:	81fb      	strh	r3, [r7, #14]
 8008556:	89fa      	ldrh	r2, [r7, #14]
 8008558:	88bb      	ldrh	r3, [r7, #4]
 800855a:	429a      	cmp	r2, r3
 800855c:	d3eb      	bcc.n	8008536 <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 800855e:	bf00      	nop
 8008560:	bf00      	nop
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	4603      	mov	r3, r0
 8008574:	6039      	str	r1, [r7, #0]
 8008576:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 8008578:	2300      	movs	r3, #0
 800857a:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	b25b      	sxtb	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	da0e      	bge.n	80085a4 <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 8008586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800858a:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800858c:	e00a      	b.n	80085a4 <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800858e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008592:	021b      	lsls	r3, r3, #8
 8008594:	b21a      	sxth	r2, r3
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	1c59      	adds	r1, r3, #1
 800859a:	6039      	str	r1, [r7, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	b21b      	sxth	r3, r3
 80085a0:	4313      	orrs	r3, r2
 80085a2:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 80085a4:	88fb      	ldrh	r3, [r7, #6]
 80085a6:	1e5a      	subs	r2, r3, #1
 80085a8:	80fa      	strh	r2, [r7, #6]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1ef      	bne.n	800858e <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 80085ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80085be:	b480      	push	{r7}
 80085c0:	b087      	sub	sp, #28
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	60f8      	str	r0, [r7, #12]
 80085c6:	460b      	mov	r3, r1
 80085c8:	607a      	str	r2, [r7, #4]
 80085ca:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 80085cc:	2300      	movs	r3, #0
 80085ce:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 80085d8:	2300      	movs	r3, #0
 80085da:	82fb      	strh	r3, [r7, #22]
 80085dc:	e00e      	b.n	80085fc <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80085de:	897a      	ldrh	r2, [r7, #10]
 80085e0:	8afb      	ldrh	r3, [r7, #22]
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	3b01      	subs	r3, #1
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	4413      	add	r3, r2
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	b2d2      	uxtb	r2, r2
 80085ee:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	0a1b      	lsrs	r3, r3, #8
 80085f4:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 80085f6:	8afb      	ldrh	r3, [r7, #22]
 80085f8:	3301      	adds	r3, #1
 80085fa:	82fb      	strh	r3, [r7, #22]
 80085fc:	8afa      	ldrh	r2, [r7, #22]
 80085fe:	897b      	ldrh	r3, [r7, #10]
 8008600:	429a      	cmp	r2, r3
 8008602:	d3ec      	bcc.n	80085de <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008612:	b480      	push	{r7}
 8008614:	b085      	sub	sp, #20
 8008616:	af00      	add	r7, sp, #0
 8008618:	4603      	mov	r3, r0
 800861a:	6039      	str	r1, [r7, #0]
 800861c:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800861e:	2300      	movs	r3, #0
 8008620:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 8008622:	e007      	b.n	8008634 <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	021a      	lsls	r2, r3, #8
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	1c59      	adds	r1, r3, #1
 800862c:	6039      	str	r1, [r7, #0]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	4313      	orrs	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 8008634:	88fb      	ldrh	r3, [r7, #6]
 8008636:	1e5a      	subs	r2, r3, #1
 8008638:	80fa      	strh	r2, [r7, #6]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1f2      	bne.n	8008624 <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 800863e:	68fb      	ldr	r3, [r7, #12]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	4603      	mov	r3, r0
 8008654:	6039      	str	r1, [r7, #0]
 8008656:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 8008658:	2300      	movs	r3, #0
 800865a:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	b25b      	sxtb	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	da0b      	bge.n	800867e <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 8008666:	f04f 33ff 	mov.w	r3, #4294967295
 800866a:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800866c:	e007      	b.n	800867e <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	021a      	lsls	r2, r3, #8
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	1c59      	adds	r1, r3, #1
 8008676:	6039      	str	r1, [r7, #0]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	4313      	orrs	r3, r2
 800867c:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800867e:	88fb      	ldrh	r3, [r7, #6]
 8008680:	1e5a      	subs	r2, r3, #1
 8008682:	80fa      	strh	r2, [r7, #6]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1f2      	bne.n	800866e <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 8008688:	68fb      	ldr	r3, [r7, #12]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr

08008696 <VL53LX_start_test>:


VL53LX_Error VL53LX_start_test(
	VL53LX_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	460b      	mov	r3, r1
 80086a0:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80086a2:	2300      	movs	r3, #0
 80086a4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE) {
 80086a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d107      	bne.n	80086be <VL53LX_start_test+0x28>
		status = VL53LX_WrByte(
 80086ae:	78fb      	ldrb	r3, [r7, #3]
 80086b0:	461a      	mov	r2, r3
 80086b2:	2127      	movs	r1, #39	; 0x27
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f008 fc6d 	bl	8010f94 <VL53LX_WrByte>
 80086ba:	4603      	mov	r3, r0
 80086bc:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 80086be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b084      	sub	sp, #16
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	460b      	mov	r3, r1
 80086d4:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 80086d6:	2300      	movs	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3318      	adds	r3, #24
 80086de:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	78fa      	ldrb	r2, [r7, #3]
 80086e4:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362

	status = VL53LX_WrByte(
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	f893 3362 	ldrb.w	r3, [r3, #866]	; 0x362
 80086ee:	461a      	mov	r2, r3
 80086f0:	2185      	movs	r1, #133	; 0x85
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f008 fc4e 	bl	8010f94 <VL53LX_WrByte>
 80086f8:	4603      	mov	r3, r0
 80086fa:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 80086fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008710:	2300      	movs	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 8008714:	2101      	movs	r1, #1
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7ff ffd7 	bl	80086ca <VL53LX_set_firmware_enable_register>
 800871c:	4603      	mov	r3, r0
 800871e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008720:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008734:	2300      	movs	r3, #0
 8008736:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 8008738:	2100      	movs	r1, #0
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7ff ffc5 	bl	80086ca <VL53LX_set_firmware_enable_register>
 8008740:	4603      	mov	r3, r0
 8008742:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008744:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	460b      	mov	r3, r1
 800875a:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800875c:	2300      	movs	r3, #0
 800875e:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3318      	adds	r3, #24
 8008764:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	78fa      	ldrb	r2, [r7, #3]
 800876a:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360

	status = VL53LX_WrByte(
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	f893 3360 	ldrb.w	r3, [r3, #864]	; 0x360
 8008774:	461a      	mov	r2, r3
 8008776:	2183      	movs	r1, #131	; 0x83
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f008 fc0b 	bl	8010f94 <VL53LX_WrByte>
 800877e:	4603      	mov	r3, r0
 8008780:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 8008782:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b084      	sub	sp, #16
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008796:	2300      	movs	r3, #0
 8008798:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 800879a:	2101      	movs	r1, #1
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7ff ffd7 	bl	8008750 <VL53LX_set_powerforce_register>
 80087a2:	4603      	mov	r3, r0
 80087a4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80087a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b084      	sub	sp, #16
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80087ba:	2300      	movs	r3, #0
 80087bc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 80087be:	2100      	movs	r1, #0
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7ff ffc5 	bl	8008750 <VL53LX_set_powerforce_register>
 80087c6:	4603      	mov	r3, r0
 80087c8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80087ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <VL53LX_clear_interrupt>:


VL53LX_Error VL53LX_clear_interrupt(
	VL53LX_DEV    Dev)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80087de:	2300      	movs	r3, #0
 80087e0:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	3318      	adds	r3, #24
 80087e6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53LX_CLEAR_RANGE_INT;
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363

	status = VL53LX_WrByte(
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 80087f6:	461a      	mov	r2, r3
 80087f8:	2186      	movs	r1, #134	; 0x86
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f008 fbca 	bl	8010f94 <VL53LX_WrByte>
 8008800:	4603      	mov	r3, r0
 8008802:	73fb      	strb	r3, [r7, #15]
				VL53LX_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 8008804:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	460a      	mov	r2, r1
 800881a:	80fb      	strh	r3, [r7, #6]
 800881c:	4613      	mov	r3, r2
 800881e:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 8008820:	2300      	movs	r3, #0
 8008822:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 8008824:	2300      	movs	r3, #0
 8008826:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800882c:	88fb      	ldrh	r3, [r7, #6]
 800882e:	4618      	mov	r0, r3
 8008830:	f002 fe9b 	bl	800b56a <VL53LX_calc_pll_period_us>
 8008834:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 8008836:	797b      	ldrb	r3, [r7, #5]
 8008838:	4618      	mov	r0, r3
 800883a:	f003 fa69 	bl	800bd10 <VL53LX_decode_vcsel_period>
 800883e:	4603      	mov	r3, r0
 8008840:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	4613      	mov	r3, r2
 8008846:	00db      	lsls	r3, r3, #3
 8008848:	4413      	add	r3, r2
 800884a:	021b      	lsls	r3, r3, #8
 800884c:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	099b      	lsrs	r3, r3, #6
 8008852:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 8008854:	7cfa      	ldrb	r2, [r7, #19]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	fb02 f303 	mul.w	r3, r2, r3
 800885c:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	099b      	lsrs	r3, r3, #6
 8008862:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 8008864:	68fb      	ldr	r3, [r7, #12]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3718      	adds	r7, #24
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8008870:	b480      	push	{r7}
 8008872:	b089      	sub	sp, #36	; 0x24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	4608      	mov	r0, r1
 800887a:	4611      	mov	r1, r2
 800887c:	461a      	mov	r2, r3
 800887e:	4603      	mov	r3, r0
 8008880:	817b      	strh	r3, [r7, #10]
 8008882:	460b      	mov	r3, r1
 8008884:	813b      	strh	r3, [r7, #8]
 8008886:	4613      	mov	r3, r2
 8008888:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800888a:	2300      	movs	r3, #0
 800888c:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 8008892:	2300      	movs	r3, #0
 8008894:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8008896:	2300      	movs	r3, #0
 8008898:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	011b      	lsls	r3, r3, #4
 80088a2:	4a23      	ldr	r2, [pc, #140]	; (8008930 <VL53LX_calc_range_ignore_threshold+0xc0>)
 80088a4:	fb82 1203 	smull	r1, r2, r2, r3
 80088a8:	1192      	asrs	r2, r2, #6
 80088aa:	17db      	asrs	r3, r3, #31
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 80088b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	da03      	bge.n	80088c0 <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 80088b8:	897b      	ldrh	r3, [r7, #10]
 80088ba:	425b      	negs	r3, r3
 80088bc:	b29b      	uxth	r3, r3
 80088be:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 80088c0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	da03      	bge.n	80088d0 <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 80088c8:	893b      	ldrh	r3, [r7, #8]
 80088ca:	425b      	negs	r3, r3
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 80088d0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80088d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80088d8:	4413      	add	r3, r2
 80088da:	015b      	lsls	r3, r3, #5
 80088dc:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	4a13      	ldr	r2, [pc, #76]	; (8008930 <VL53LX_calc_range_ignore_threshold+0xc0>)
 80088e2:	fb82 1203 	smull	r1, r2, r2, r3
 80088e6:	1192      	asrs	r2, r2, #6
 80088e8:	17db      	asrs	r3, r3, #31
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	4413      	add	r3, r2
 80088f4:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 80088f6:	79fa      	ldrb	r2, [r7, #7]
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	fb02 f303 	mul.w	r3, r2, r3
 80088fe:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	3310      	adds	r3, #16
 8008904:	2b00      	cmp	r3, #0
 8008906:	da00      	bge.n	800890a <VL53LX_calc_range_ignore_threshold+0x9a>
 8008908:	331f      	adds	r3, #31
 800890a:	115b      	asrs	r3, r3, #5
 800890c:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008914:	db03      	blt.n	800891e <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8008916:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800891a:	83fb      	strh	r3, [r7, #30]
 800891c:	e001      	b.n	8008922 <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8008922:	8bfb      	ldrh	r3, [r7, #30]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3724      	adds	r7, #36	; 0x24
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	10624dd3 	.word	0x10624dd3

08008934 <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800893e:	2300      	movs	r3, #0
 8008940:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d102      	bne.n	800894e <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	60fb      	str	r3, [r7, #12]
 800894c:	e008      	b.n	8008960 <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	031a      	lsls	r2, r3, #12
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	085b      	lsrs	r3, r3, #1
 8008956:	441a      	add	r2, r3
		timeout_mclks   =
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	fbb2 f3f3 	udiv	r3, r2, r3
 800895e:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8008960:	68fb      	ldr	r3, [r7, #12]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800897c:	2300      	movs	r3, #0
 800897e:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff ffd6 	bl	8008934 <VL53LX_calc_timeout_mclks>
 8008988:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f000 f885 	bl	8008a9a <VL53LX_encode_timeout>
 8008990:	4603      	mov	r3, r0
 8008992:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8008994:	897b      	ldrh	r3, [r7, #10]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800899e:	b4f0      	push	{r4, r5, r6, r7}
 80089a0:	b086      	sub	sp, #24
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
 80089a6:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 80089ac:	f04f 0200 	mov.w	r2, #0
 80089b0:	f04f 0300 	mov.w	r3, #0
 80089b4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f04f 0100 	mov.w	r1, #0
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	461a      	mov	r2, r3
 80089c4:	f04f 0300 	mov.w	r3, #0
 80089c8:	fb02 fc01 	mul.w	ip, r2, r1
 80089cc:	fb00 f603 	mul.w	r6, r0, r3
 80089d0:	4466      	add	r6, ip
 80089d2:	fba0 2302 	umull	r2, r3, r0, r2
 80089d6:	18f1      	adds	r1, r6, r3
 80089d8:	460b      	mov	r3, r1
 80089da:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80089de:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 80089e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80089e6:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 80089ea:	f143 0500 	adc.w	r5, r3, #0
 80089ee:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 80089f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80089f6:	f04f 0200 	mov.w	r2, #0
 80089fa:	f04f 0300 	mov.w	r3, #0
 80089fe:	0b02      	lsrs	r2, r0, #12
 8008a00:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8008a04:	0b0b      	lsrs	r3, r1, #12
 8008a06:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 8008a0e:	697b      	ldr	r3, [r7, #20]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3718      	adds	r7, #24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bcf0      	pop	{r4, r5, r6, r7}
 8008a18:	4770      	bx	lr
	...

08008a1c <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 8008a30:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 8008a34:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 8008a36:	4413      	add	r3, r2
 8008a38:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	da02      	bge.n	8008a46 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 8008a40:	2300      	movs	r3, #0
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	e005      	b.n	8008a52 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a4c:	db01      	blt.n	8008a52 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 8008a4e:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 8008a50:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 8008a56:	68bb      	ldr	r3, [r7, #8]

}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	0003ffff 	.word	0x0003ffff

08008a68 <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	4603      	mov	r3, r0
 8008a70:	6039      	str	r1, [r7, #0]
 8008a72:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 8008a74:	2300      	movs	r3, #0
 8008a76:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 8008a7c:	88fb      	ldrh	r3, [r7, #6]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 f837 	bl	8008af2 <VL53LX_decode_timeout>
 8008a84:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f7ff ff88 	bl	800899e <VL53LX_calc_timeout_us>
 8008a8e:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8008a90:	68bb      	ldr	r3, [r7, #8]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b087      	sub	sp, #28
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d017      	beq.n	8008ae4 <VL53LX_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008aba:	e005      	b.n	8008ac8 <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	085b      	lsrs	r3, r3, #1
 8008ac0:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008ac2:	89fb      	ldrh	r3, [r7, #14]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1f4      	bne.n	8008abc <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008ad2:	89fb      	ldrh	r3, [r7, #14]
 8008ad4:	021b      	lsls	r3, r3, #8
 8008ad6:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008ae0:	4413      	add	r3, r2
 8008ae2:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008ae4:	8afb      	ldrh	r3, [r7, #22]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	371c      	adds	r7, #28
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b085      	sub	sp, #20
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	4603      	mov	r3, r0
 8008afa:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008b00:	88fb      	ldrh	r3, [r7, #6]
 8008b02:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008b04:	88fa      	ldrh	r2, [r7, #6]
 8008b06:	0a12      	lsrs	r2, r2, #8
 8008b08:	b292      	uxth	r2, r2
 8008b0a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008b10:	68fb      	ldr	r3, [r7, #12]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b088      	sub	sp, #32
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	60f8      	str	r0, [r7, #12]
 8008b26:	60b9      	str	r1, [r7, #8]
 8008b28:	607a      	str	r2, [r7, #4]
 8008b2a:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8008b30:	2300      	movs	r3, #0
 8008b32:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8008b34:	2300      	movs	r3, #0
 8008b36:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8008b3c:	887b      	ldrh	r3, [r7, #2]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d102      	bne.n	8008b48 <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8008b42:	23f1      	movs	r3, #241	; 0xf1
 8008b44:	77fb      	strb	r3, [r7, #31]
 8008b46:	e05d      	b.n	8008c04 <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 8008b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4a:	799a      	ldrb	r2, [r3, #6]
 8008b4c:	887b      	ldrh	r3, [r7, #2]
 8008b4e:	4611      	mov	r1, r2
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7ff fe5d 	bl	8008810 <VL53LX_calc_macro_period_us>
 8008b56:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 8008b58:	6979      	ldr	r1, [r7, #20]
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f7ff feea 	bl	8008934 <VL53LX_calc_timeout_mclks>
 8008b60:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	2bff      	cmp	r3, #255	; 0xff
 8008b66:	d901      	bls.n	8008b6c <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8008b68:	23ff      	movs	r3, #255	; 0xff
 8008b6a:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8008b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b72:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8008b74:	6979      	ldr	r1, [r7, #20]
 8008b76:	68b8      	ldr	r0, [r7, #8]
 8008b78:	f7ff fef9 	bl	800896e <VL53LX_calc_encoded_timeout>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008b80:	8a7b      	ldrh	r3, [r7, #18]
 8008b82:	0a1b      	lsrs	r3, r3, #8
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8008b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8a:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008b8c:	8a7b      	ldrh	r3, [r7, #18]
 8008b8e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8008b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b92:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8008b94:	6979      	ldr	r1, [r7, #20]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7ff fee9 	bl	800896e <VL53LX_calc_encoded_timeout>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008ba0:	8a7b      	ldrh	r3, [r7, #18]
 8008ba2:	0a1b      	lsrs	r3, r3, #8
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008baa:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008bac:	8a7b      	ldrh	r3, [r7, #18]
 8008bae:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8008bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb2:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 8008bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb6:	7a5a      	ldrb	r2, [r3, #9]
 8008bb8:	887b      	ldrh	r3, [r7, #2]
 8008bba:	4611      	mov	r1, r2
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff fe27 	bl	8008810 <VL53LX_calc_macro_period_us>
 8008bc2:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 8008bc4:	6979      	ldr	r1, [r7, #20]
 8008bc6:	68b8      	ldr	r0, [r7, #8]
 8008bc8:	f7ff fed1 	bl	800896e <VL53LX_calc_encoded_timeout>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008bd0:	8a7b      	ldrh	r3, [r7, #18]
 8008bd2:	0a1b      	lsrs	r3, r3, #8
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8008bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bda:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008bdc:	8a7b      	ldrh	r3, [r7, #18]
 8008bde:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8008be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be2:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 8008be4:	6979      	ldr	r1, [r7, #20]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7ff fec1 	bl	800896e <VL53LX_calc_encoded_timeout>
 8008bec:	4603      	mov	r3, r0
 8008bee:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008bf0:	8a7b      	ldrh	r3, [r7, #18]
 8008bf2:	0a1b      	lsrs	r3, r3, #8
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8008bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfa:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008bfc:	8a7b      	ldrh	r3, [r7, #18]
 8008bfe:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8008c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c02:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8008c04:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3720      	adds	r7, #32
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 8008c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c14:	b08b      	sub	sp, #44	; 0x2c
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27

	int64_t  evts              = 0;
 8008c22:	f04f 0000 	mov.w	r0, #0
 8008c26:	f04f 0100 	mov.w	r1, #0
 8008c2a:	e9c7 0106 	strd	r0, r1, [r7, #24]
	int64_t  tmpi              = 0;
 8008c2e:	f04f 0000 	mov.w	r0, #0
 8008c32:	f04f 0100 	mov.w	r1, #0
 8008c36:	e9c7 0104 	strd	r0, r1, [r7, #16]
	int64_t  tmpo              = 0;
 8008c3a:	f04f 0000 	mov.w	r0, #0
 8008c3e:	f04f 0100 	mov.w	r1, #0
 8008c42:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 8008c46:	6879      	ldr	r1, [r7, #4]
 8008c48:	8849      	ldrh	r1, [r1, #2]
 8008c4a:	2900      	cmp	r1, #0
 8008c4c:	d103      	bne.n	8008c56 <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8008c4e:	23f1      	movs	r3, #241	; 0xf1
 8008c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c54:	e0a5      	b.n	8008da2 <VL53LX_hist_copy_and_scale_ambient_info+0x192>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	7849      	ldrb	r1, [r1, #1]
 8008c5a:	2900      	cmp	r1, #0
 8008c5c:	f000 80a1 	beq.w	8008da2 <VL53LX_hist_copy_and_scale_ambient_info+0x192>
			podata->number_of_ambient_bins == 0) {
 8008c60:	6839      	ldr	r1, [r7, #0]
 8008c62:	7ac9      	ldrb	r1, [r1, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 8008c64:	2900      	cmp	r1, #0
 8008c66:	f040 809c 	bne.w	8008da2 <VL53LX_hist_copy_and_scale_ambient_info+0x192>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	f8d1 1088 	ldr.w	r1, [r1, #136]	; 0x88
 8008c70:	4608      	mov	r0, r1
 8008c72:	f04f 0100 	mov.w	r1, #0
 8008c76:	f110 0a01 	adds.w	sl, r0, #1
 8008c7a:	f141 0b00 	adc.w	fp, r1, #0
 8008c7e:	e9c7 ab02 	strd	sl, fp, [r7, #8]
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 8008c82:	6839      	ldr	r1, [r7, #0]
 8008c84:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
 8008c88:	b288      	uxth	r0, r1
 8008c8a:	f04f 0100 	mov.w	r1, #0
			tmpo   *=
 8008c8e:	68fe      	ldr	r6, [r7, #12]
 8008c90:	fb00 fc06 	mul.w	ip, r0, r6
 8008c94:	68be      	ldr	r6, [r7, #8]
 8008c96:	fb01 f606 	mul.w	r6, r1, r6
 8008c9a:	44b4      	add	ip, r6
 8008c9c:	68be      	ldr	r6, [r7, #8]
 8008c9e:	fba6 0100 	umull	r0, r1, r6, r0
 8008ca2:	eb0c 0601 	add.w	r6, ip, r1
 8008ca6:	4631      	mov	r1, r6
 8008ca8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8008cac:	e9c7 0102 	strd	r0, r1, [r7, #8]

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8008cb0:	6879      	ldr	r1, [r7, #4]
 8008cb2:	6889      	ldr	r1, [r1, #8]
 8008cb4:	4608      	mov	r0, r1
 8008cb6:	f04f 0100 	mov.w	r1, #0
 8008cba:	1c44      	adds	r4, r0, #1
 8008cbc:	f141 0500 	adc.w	r5, r1, #0
 8008cc0:	e9c7 4504 	strd	r4, r5, [r7, #16]
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 8008cc4:	6879      	ldr	r1, [r7, #4]
 8008cc6:	8849      	ldrh	r1, [r1, #2]
 8008cc8:	b288      	uxth	r0, r1
 8008cca:	f04f 0100 	mov.w	r1, #0
			tmpi   *=
 8008cce:	697c      	ldr	r4, [r7, #20]
 8008cd0:	fb00 f504 	mul.w	r5, r0, r4
 8008cd4:	693c      	ldr	r4, [r7, #16]
 8008cd6:	fb01 f404 	mul.w	r4, r1, r4
 8008cda:	442c      	add	r4, r5
 8008cdc:	693d      	ldr	r5, [r7, #16]
 8008cde:	fba5 0100 	umull	r0, r1, r5, r0
 8008ce2:	440c      	add	r4, r1
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8008cea:	e9c7 0104 	strd	r0, r1, [r7, #16]

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 8008cee:	6879      	ldr	r1, [r7, #4]
 8008cf0:	68c9      	ldr	r1, [r1, #12]
 8008cf2:	4608      	mov	r0, r1
 8008cf4:	ea4f 71e0 	mov.w	r1, r0, asr #31
			evts  = tmpo *
 8008cf8:	68fc      	ldr	r4, [r7, #12]
 8008cfa:	fb00 f504 	mul.w	r5, r0, r4
 8008cfe:	68bc      	ldr	r4, [r7, #8]
 8008d00:	fb01 f404 	mul.w	r4, r1, r4
 8008d04:	442c      	add	r4, r5
 8008d06:	68bd      	ldr	r5, [r7, #8]
 8008d08:	fba5 0100 	umull	r0, r1, r5, r0
 8008d0c:	440c      	add	r4, r1
 8008d0e:	4621      	mov	r1, r4
 8008d10:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8008d14:	e9c7 0106 	strd	r0, r1, [r7, #24]
			evts += (tmpi/2);
 8008d18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008d1c:	0fcc      	lsrs	r4, r1, #31
 8008d1e:	f04f 0500 	mov.w	r5, #0
 8008d22:	1822      	adds	r2, r4, r0
 8008d24:	eb45 0301 	adc.w	r3, r5, r1
 8008d28:	f04f 0000 	mov.w	r0, #0
 8008d2c:	f04f 0100 	mov.w	r1, #0
 8008d30:	0850      	lsrs	r0, r2, #1
 8008d32:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8008d36:	1059      	asrs	r1, r3, #1
 8008d38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d3c:	eb12 0800 	adds.w	r8, r2, r0
 8008d40:	eb43 0901 	adc.w	r9, r3, r1
 8008d44:	e9c7 8906 	strd	r8, r9, [r7, #24]


			if (tmpi != 0)
 8008d48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	d009      	beq.n	8008d64 <VL53LX_hist_copy_and_scale_ambient_info+0x154>
				evts = do_division_s(evts, tmpi);
 8008d50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008d58:	f7f7 fa92 	bl	8000280 <__aeabi_ldivmod>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	e9c7 2306 	strd	r2, r3, [r7, #24]

			podata->ambient_events_sum = (int32_t)evts;
 8008d64:	69ba      	ldr	r2, [r7, #24]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53LX_p_028 =
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 +=
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	7852      	ldrb	r2, [r2, #1]
 8008d82:	0852      	lsrs	r2, r2, #1
 8008d84:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 8008d86:	441a      	add	r2, r3
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 /=
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 8008d98:	fb93 f2f2 	sdiv	r2, r3, r2
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 8008da2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	372c      	adds	r7, #44	; 0x2c
 8008daa:	46bd      	mov	sp, r7
 8008dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008db0 <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b087      	sub	sp, #28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	3318      	adds	r3, #24
 8008dbe:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	; 0x2fa
	amb_thresh_low  = 1024 *
 8008dd2:	029b      	lsls	r3, r3, #10
 8008dd4:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
	amb_thresh_high = 1024 *
 8008ddc:	029b      	lsls	r3, r3, #10
 8008dde:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f040 8095 	bne.w	8008f1a <VL53LX_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
		pdata->bin_seq[5] =
 8008df6:	091b      	lsrs	r3, r3, #4
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
 8008e04:	f003 030f 	and.w	r3, r3, #15
 8008e08:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
		pdata->bin_seq[3] =
 8008e14:	091b      	lsrs	r3, r3, #4
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
 8008e22:	f003 030f 	and.w	r3, r3, #15
 8008e26:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
		pdata->bin_seq[1] =
 8008e32:	091b      	lsrs	r3, r3, #4
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
 8008e40:	f003 030f 	and.w	r3, r3, #15
 8008e44:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	da2c      	bge.n	8008eb0 <VL53LX_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			pdata->bin_seq[5] =
 8008e5c:	091b      	lsrs	r3, r3, #4
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			& 0x0F;
 8008e6a:	f003 030f 	and.w	r3, r3, #15
 8008e6e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			pdata->bin_seq[3] =
 8008e7a:	091b      	lsrs	r3, r3, #4
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			& 0x0F;
 8008e88:	f003 030f 	and.w	r3, r3, #15
 8008e8c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			pdata->bin_seq[1] =
 8008e98:	091b      	lsrs	r3, r3, #4
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			& 0x0F;
 8008ea6:	f003 030f 	and.w	r3, r3, #15
 8008eaa:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	f340 80c2 	ble.w	8009042 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			pdata->bin_seq[5] =
 8008ec4:	091b      	lsrs	r3, r3, #4
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			& 0x0F;
 8008ed2:	f003 030f 	and.w	r3, r3, #15
 8008ed6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			pdata->bin_seq[3] =
 8008ee2:	091b      	lsrs	r3, r3, #4
 8008ee4:	b2da      	uxtb	r2, r3
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			& 0x0F;
 8008ef0:	f003 030f 	and.w	r3, r3, #15
 8008ef4:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			pdata->bin_seq[1] =
 8008f00:	091b      	lsrs	r3, r3, #4
 8008f02:	b2da      	uxtb	r2, r3
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			& 0x0F;
 8008f0e:	f003 030f 	and.w	r3, r3, #15
 8008f12:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	731a      	strb	r2, [r3, #12]
 8008f18:	e093      	b.n	8009042 <VL53LX_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	f893 32f1 	ldrb.w	r3, [r3, #753]	; 0x2f1
			& 0x0F;
 8008f20:	f003 030f 	and.w	r3, r3, #15
 8008f24:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
			& 0x0F;
 8008f30:	f003 030f 	and.w	r3, r3, #15
 8008f34:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
		pdata->bin_seq[3] =
 8008f40:	091b      	lsrs	r3, r3, #4
 8008f42:	b2da      	uxtb	r2, r3
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f893 32ef 	ldrb.w	r3, [r3, #751]	; 0x2ef
 8008f4e:	f003 030f 	and.w	r3, r3, #15
 8008f52:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
		pdata->bin_seq[1] =
 8008f5e:	091b      	lsrs	r3, r3, #4
 8008f60:	b2da      	uxtb	r2, r3
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
			& 0x0F;
 8008f6c:	f003 030f 	and.w	r3, r3, #15
 8008f70:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	da2c      	bge.n	8008fdc <VL53LX_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			pdata->bin_seq[5] =
 8008f88:	091b      	lsrs	r3, r3, #4
 8008f8a:	b2da      	uxtb	r2, r3
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			& 0x0F;
 8008f96:	f003 030f 	and.w	r3, r3, #15
 8008f9a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			pdata->bin_seq[3] =
 8008fa6:	091b      	lsrs	r3, r3, #4
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			& 0x0F;
 8008fb4:	f003 030f 	and.w	r3, r3, #15
 8008fb8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			pdata->bin_seq[1] =
 8008fc4:	091b      	lsrs	r3, r3, #4
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			& 0x0F;
 8008fd2:	f003 030f 	and.w	r3, r3, #15
 8008fd6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	dd2c      	ble.n	8009042 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			pdata->bin_seq[5] =
 8008fee:	091b      	lsrs	r3, r3, #4
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			& 0x0F;
 8008ffc:	f003 030f 	and.w	r3, r3, #15
 8009000:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			pdata->bin_seq[3] =
 800900c:	091b      	lsrs	r3, r3, #4
 800900e:	b2da      	uxtb	r2, r3
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			& 0x0F;
 800901a:	f003 030f 	and.w	r3, r3, #15
 800901e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			pdata->bin_seq[1] =
 800902a:	091b      	lsrs	r3, r3, #4
 800902c:	b2da      	uxtb	r2, r3
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			& 0x0F;
 8009038:	f003 030f 	and.w	r3, r3, #15
 800903c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8009042:	2300      	movs	r3, #0
 8009044:	75fb      	strb	r3, [r7, #23]
 8009046:	e007      	b.n	8009058 <VL53LX_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 8009048:	7dfb      	ldrb	r3, [r7, #23]
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	4413      	add	r3, r2
 800904e:	2201      	movs	r2, #1
 8009050:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8009052:	7dfb      	ldrb	r3, [r7, #23]
 8009054:	3301      	adds	r3, #1
 8009056:	75fb      	strb	r3, [r7, #23]
 8009058:	7dfb      	ldrb	r3, [r7, #23]
 800905a:	2b05      	cmp	r3, #5
 800905c:	d9f4      	bls.n	8009048 <VL53LX_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800905e:	bf00      	nop
 8009060:	bf00      	nop
 8009062:	371c      	adds	r7, #28
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 800906c:	b590      	push	{r4, r7, lr}
 800906e:	b093      	sub	sp, #76	; 0x4c
 8009070:	af04      	add	r7, sp, #16
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
 8009078:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800907a:	2300      	movs	r3, #0
 800907c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_LLDriverData_t *pdev =
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	3318      	adds	r3, #24
 8009084:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 8009086:	2300      	movs	r3, #0
 8009088:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 800908c:	2300      	movs	r3, #0
 800908e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 8009092:	2300      	movs	r3, #0
 8009094:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800909e:	2300      	movs	r3, #0
 80090a0:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 80090a2:	2300      	movs	r3, #0
 80090a4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 80090a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80090ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 80090b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b2:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 80090b6:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	f8b3 323a 	ldrh.w	r3, [r3, #570]	; 0x23a
 80090be:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 80090c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c2:	f893 3236 	ldrb.w	r3, [r3, #566]	; 0x236
 80090c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 80090ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80090ce:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 80090d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80090d2:	021b      	lsls	r3, r3, #8
 80090d4:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	785b      	ldrb	r3, [r3, #1]
 80090da:	2b07      	cmp	r3, #7
 80090dc:	d006      	beq.n	80090ec <VL53LX_hist_phase_consistency_check+0x80>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 80090e2:	2b08      	cmp	r3, #8
 80090e4:	d002      	beq.n	80090ec <VL53LX_hist_phase_consistency_check+0x80>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 80090e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80090ea:	e0ec      	b.n	80092c6 <VL53LX_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 80090ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d102      	bne.n	80090f8 <VL53LX_hist_phase_consistency_check+0x8c>
		return status;
 80090f2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80090f6:	e0e6      	b.n	80092c6 <VL53LX_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 80090f8:	2300      	movs	r3, #0
 80090fa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80090fe:	e0d9      	b.n	80092b4 <VL53LX_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8009100:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	214c      	movs	r1, #76	; 0x4c
 8009108:	fb01 f303 	mul.w	r3, r1, r3
 800910c:	4413      	add	r3, r2
 800910e:	335e      	adds	r3, #94	; 0x5e
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	2b09      	cmp	r3, #9
 8009114:	d00b      	beq.n	800912e <VL53LX_hist_phase_consistency_check+0xc2>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 8009116:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	214c      	movs	r1, #76	; 0x4c
 800911e:	fb01 f303 	mul.w	r3, r1, r3
 8009122:	4413      	add	r3, r2
 8009124:	335e      	adds	r3, #94	; 0x5e
 8009126:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8009128:	2b13      	cmp	r3, #19
 800912a:	f040 80bd 	bne.w	80092a8 <VL53LX_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	795b      	ldrb	r3, [r3, #5]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10a      	bne.n	800914c <VL53LX_hist_phase_consistency_check+0xe0>
			prange_curr->VL53LX_p_003[lc].range_status =
 8009136:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	214c      	movs	r1, #76	; 0x4c
 800913e:	fb01 f303 	mul.w	r3, r1, r3
 8009142:	4413      	add	r3, r2
 8009144:	335e      	adds	r3, #94	; 0x5e
 8009146:	2217      	movs	r2, #23
 8009148:	701a      	strb	r2, [r3, #0]
 800914a:	e009      	b.n	8009160 <VL53LX_hist_phase_consistency_check+0xf4>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 800914c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	214c      	movs	r1, #76	; 0x4c
 8009154:	fb01 f303 	mul.w	r3, r1, r3
 8009158:	4413      	add	r3, r2
 800915a:	335e      	adds	r3, #94	; 0x5e
 800915c:	2207      	movs	r2, #7
 800915e:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 8009160:	2300      	movs	r3, #0
 8009162:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009166:	e097      	b.n	8009298 <VL53LX_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 8009168:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800916c:	683a      	ldr	r2, [r7, #0]
 800916e:	214c      	movs	r1, #76	; 0x4c
 8009170:	fb01 f303 	mul.w	r3, r1, r3
 8009174:	4413      	add	r3, r2
 8009176:	3354      	adds	r3, #84	; 0x54
 8009178:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 800917a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	4613      	mov	r3, r2
 8009182:	005b      	lsls	r3, r3, #1
 8009184:	4413      	add	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4403      	add	r3, r0
 800918a:	3310      	adds	r3, #16
 800918c:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 800918e:	4299      	cmp	r1, r3
 8009190:	d915      	bls.n	80091be <VL53LX_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 8009192:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	214c      	movs	r1, #76	; 0x4c
 800919a:	fb01 f303 	mul.w	r3, r1, r3
 800919e:	4413      	add	r3, r2
 80091a0:	3354      	adds	r3, #84	; 0x54
 80091a2:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 80091a4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	4613      	mov	r3, r2
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	4413      	add	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4403      	add	r3, r0
 80091b4:	3310      	adds	r3, #16
 80091b6:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 80091b8:	1acb      	subs	r3, r1, r3
 80091ba:	867b      	strh	r3, [r7, #50]	; 0x32
 80091bc:	e014      	b.n	80091e8 <VL53LX_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 80091be:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	4613      	mov	r3, r2
 80091c6:	005b      	lsls	r3, r3, #1
 80091c8:	4413      	add	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	440b      	add	r3, r1
 80091ce:	3310      	adds	r3, #16
 80091d0:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 80091d2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	204c      	movs	r0, #76	; 0x4c
 80091da:	fb00 f303 	mul.w	r3, r0, r3
 80091de:	440b      	add	r3, r1
 80091e0:	3354      	adds	r3, #84	; 0x54
 80091e2:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 80091e8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80091ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d24e      	bcs.n	800928e <VL53LX_hist_phase_consistency_check+0x222>





				if (status == VL53LX_ERROR_NONE)
 80091f0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d125      	bne.n	8009244 <VL53LX_hist_phase_consistency_check+0x1d8>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 80091f8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53LX_hist_events_consistency_check(
 80091fc:	4613      	mov	r3, r2
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	4413      	add	r3, r2
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	3308      	adds	r3, #8
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 800920a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_events_consistency_check(
 800920e:	224c      	movs	r2, #76	; 0x4c
 8009210:	fb02 f303 	mul.w	r3, r2, r3
 8009214:	3310      	adds	r3, #16
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	4413      	add	r3, r2
 800921a:	3304      	adds	r3, #4
 800921c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800921e:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 8009222:	f107 0217 	add.w	r2, r7, #23
 8009226:	9203      	str	r2, [sp, #12]
 8009228:	f107 021c 	add.w	r2, r7, #28
 800922c:	9202      	str	r2, [sp, #8]
 800922e:	f107 0218 	add.w	r2, r7, #24
 8009232:	9201      	str	r2, [sp, #4]
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	4623      	mov	r3, r4
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	f000 f848 	bl	80092ce <VL53LX_hist_events_consistency_check>
 800923e:	4603      	mov	r3, r0
 8009240:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 8009244:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009248:	2b00      	cmp	r3, #0
 800924a:	d115      	bne.n	8009278 <VL53LX_hist_phase_consistency_check+0x20c>
					range_status ==
 800924c:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 800924e:	2b09      	cmp	r3, #9
 8009250:	d112      	bne.n	8009278 <VL53LX_hist_phase_consistency_check+0x20c>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 8009252:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 8009256:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_merged_pulse_check(
 800925a:	224c      	movs	r2, #76	; 0x4c
 800925c:	fb02 f303 	mul.w	r3, r2, r3
 8009260:	3310      	adds	r3, #16
 8009262:	683a      	ldr	r2, [r7, #0]
 8009264:	4413      	add	r3, r2
 8009266:	3304      	adds	r3, #4
 8009268:	f107 0217 	add.w	r2, r7, #23
 800926c:	4619      	mov	r1, r3
 800926e:	f000 faaf 	bl	80097d0 <VL53LX_hist_merged_pulse_check>
 8009272:	4603      	mov	r3, r0
 8009274:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 8009278:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800927c:	7df8      	ldrb	r0, [r7, #23]
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	214c      	movs	r1, #76	; 0x4c
 8009282:	fb01 f303 	mul.w	r3, r1, r3
 8009286:	4413      	add	r3, r2
 8009288:	335e      	adds	r3, #94	; 0x5e
 800928a:	4602      	mov	r2, r0
 800928c:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800928e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009292:	3301      	adds	r3, #1
 8009294:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	795b      	ldrb	r3, [r3, #5]
 800929c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80092a0:	429a      	cmp	r2, r3
 80092a2:	f4ff af61 	bcc.w	8009168 <VL53LX_hist_phase_consistency_check+0xfc>
 80092a6:	e000      	b.n	80092aa <VL53LX_hist_phase_consistency_check+0x23e>
			continue;
 80092a8:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 80092aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80092ae:	3301      	adds	r3, #1
 80092b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	7c9b      	ldrb	r3, [r3, #18]
 80092b8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80092bc:	429a      	cmp	r2, r3
 80092be:	f4ff af1f 	bcc.w	8009100 <VL53LX_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 80092c2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	373c      	adds	r7, #60	; 0x3c
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd90      	pop	{r4, r7, pc}

080092ce <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 80092ce:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092d2:	b0a8      	sub	sp, #160	; 0xa0
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80092d8:	647b      	str	r3, [r7, #68]	; 0x44
 80092da:	4603      	mov	r3, r0
 80092dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80092e0:	460b      	mov	r3, r1
 80092e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80092e6:	2300      	movs	r3, #0
 80092e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	int64_t   tmpp                   = 0;
 80092ec:	f04f 0200 	mov.w	r2, #0
 80092f0:	f04f 0300 	mov.w	r3, #0
 80092f4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	int64_t   tmpc                   = 0;
 80092f8:	f04f 0200 	mov.w	r2, #0
 80092fc:	f04f 0300 	mov.w	r3, #0
 8009300:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	int64_t   events_scaler          = 0;
 8009304:	f04f 0200 	mov.w	r2, #0
 8009308:	f04f 0300 	mov.w	r3, #0
 800930c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	int64_t   events_scaler_sq       = 0;
 8009310:	f04f 0200 	mov.w	r2, #0
 8009314:	f04f 0300 	mov.w	r3, #0
 8009318:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t   c_signal_events        = 0;
 800931c:	f04f 0200 	mov.w	r2, #0
 8009320:	f04f 0300 	mov.w	r3, #0
 8009324:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	int64_t   c_sig_noise_sq         = 0;
 8009328:	f04f 0200 	mov.w	r2, #0
 800932c:	f04f 0300 	mov.w	r3, #0
 8009330:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t   c_amb_noise_sq         = 0;
 8009334:	f04f 0200 	mov.w	r2, #0
 8009338:	f04f 0300 	mov.w	r3, #0
 800933c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t   p_amb_noise_sq         = 0;
 8009340:	f04f 0200 	mov.w	r2, #0
 8009344:	f04f 0300 	mov.w	r3, #0
 8009348:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	int32_t   p_signal_events        = 0;
 800934c:	2300      	movs	r3, #0
 800934e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t  noise_sq_sum           = 0;
 8009350:	2300      	movs	r3, #0
 8009352:	653b      	str	r3, [r7, #80]	; 0x50



	if (event_sigma == 0) {
 8009354:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009358:	2b00      	cmp	r3, #0
 800935a:	d106      	bne.n	800936a <VL53LX_hist_events_consistency_check+0x9c>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800935c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009360:	2209      	movs	r2, #9
 8009362:	701a      	strb	r2, [r3, #0]
		return status;
 8009364:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8009368:	e22d      	b.n	80097c6 <VL53LX_hist_events_consistency_check+0x4f8>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800936a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	461a      	mov	r2, r3
 8009370:	f04f 0300 	mov.w	r3, #0
 8009374:	f112 0801 	adds.w	r8, r2, #1
 8009378:	f143 0900 	adc.w	r9, r3, #0
 800937c:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 8009380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009382:	885b      	ldrh	r3, [r3, #2]
 8009384:	b29a      	uxth	r2, r3
 8009386:	f04f 0300 	mov.w	r3, #0
 800938a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800938e:	fb02 f001 	mul.w	r0, r2, r1
 8009392:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8009396:	fb03 f101 	mul.w	r1, r3, r1
 800939a:	4408      	add	r0, r1
 800939c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80093a0:	fba1 2302 	umull	r2, r3, r1, r2
 80093a4:	18c1      	adds	r1, r0, r3
 80093a6:	460b      	mov	r3, r1
 80093a8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 80093ac:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 80093b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	461a      	mov	r2, r3
 80093b8:	f04f 0300 	mov.w	r3, #0
 80093bc:	f112 0a01 	adds.w	sl, r2, #1
 80093c0:	f143 0b00 	adc.w	fp, r3, #0
 80093c4:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 80093c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80093cc:	8adb      	ldrh	r3, [r3, #22]
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	f04f 0300 	mov.w	r3, #0
 80093d4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80093d8:	fb02 f001 	mul.w	r0, r2, r1
 80093dc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80093e0:	fb03 f101 	mul.w	r1, r3, r1
 80093e4:	4408      	add	r0, r1
 80093e6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80093ea:	fba1 2302 	umull	r2, r3, r1, r2
 80093ee:	18c1      	adds	r1, r0, r3
 80093f0:	460b      	mov	r3, r1
 80093f2:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 80093f6:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80



	events_scaler  = tmpp * 4096;
 80093fa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80093fe:	f04f 0000 	mov.w	r0, #0
 8009402:	f04f 0100 	mov.w	r1, #0
 8009406:	0319      	lsls	r1, r3, #12
 8009408:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800940c:	0310      	lsls	r0, r2, #12
 800940e:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
	if (tmpc != 0) {
 8009412:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009416:	4313      	orrs	r3, r2
 8009418:	d026      	beq.n	8009468 <VL53LX_hist_events_consistency_check+0x19a>
		events_scaler += (tmpc/2);
 800941a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800941e:	0fcb      	lsrs	r3, r1, #31
 8009420:	461a      	mov	r2, r3
 8009422:	f04f 0300 	mov.w	r3, #0
 8009426:	1814      	adds	r4, r2, r0
 8009428:	eb43 0501 	adc.w	r5, r3, r1
 800942c:	f04f 0200 	mov.w	r2, #0
 8009430:	f04f 0300 	mov.w	r3, #0
 8009434:	0862      	lsrs	r2, r4, #1
 8009436:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800943a:	106b      	asrs	r3, r5, #1
 800943c:	4610      	mov	r0, r2
 800943e:	4619      	mov	r1, r3
 8009440:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009444:	1814      	adds	r4, r2, r0
 8009446:	63bc      	str	r4, [r7, #56]	; 0x38
 8009448:	414b      	adcs	r3, r1
 800944a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800944c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8009450:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		events_scaler  = do_division_s(events_scaler, tmpc);
 8009454:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009458:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800945c:	f7f6 ff10 	bl	8000280 <__aeabi_ldivmod>
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	}

	events_scaler_sq  = events_scaler * events_scaler;
 8009468:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800946c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009470:	fb03 f102 	mul.w	r1, r3, r2
 8009474:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009478:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800947c:	fb03 f302 	mul.w	r3, r3, r2
 8009480:	4419      	add	r1, r3
 8009482:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009486:	fba3 2303 	umull	r2, r3, r3, r3
 800948a:	4419      	add	r1, r3
 800948c:	460b      	mov	r3, r1
 800948e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 8009492:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	events_scaler_sq += 2048;
 8009496:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800949a:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800949e:	6339      	str	r1, [r7, #48]	; 0x30
 80094a0:	f143 0300 	adc.w	r3, r3, #0
 80094a4:	637b      	str	r3, [r7, #52]	; 0x34
 80094a6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80094aa:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	events_scaler_sq /= 4096;
 80094ae:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80094b2:	4610      	mov	r0, r2
 80094b4:	4619      	mov	r1, r3
 80094b6:	2800      	cmp	r0, #0
 80094b8:	f171 0300 	sbcs.w	r3, r1, #0
 80094bc:	da06      	bge.n	80094cc <VL53LX_hist_events_consistency_check+0x1fe>
 80094be:	f640 72ff 	movw	r2, #4095	; 0xfff
 80094c2:	f04f 0300 	mov.w	r3, #0
 80094c6:	1880      	adds	r0, r0, r2
 80094c8:	eb43 0101 	adc.w	r1, r3, r1
 80094cc:	f04f 0200 	mov.w	r2, #0
 80094d0:	f04f 0300 	mov.w	r3, #0
 80094d4:	0b02      	lsrs	r2, r0, #12
 80094d6:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80094da:	130b      	asrs	r3, r1, #12
 80094dc:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 80094e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80094e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e6:	461a      	mov	r2, r3
 80094e8:	f04f 0300 	mov.w	r3, #0
 80094ec:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 80094f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80094f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f6:	4618      	mov	r0, r3
 80094f8:	f04f 0100 	mov.w	r1, #0
 80094fc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009500:	1a14      	subs	r4, r2, r0
 8009502:	62bc      	str	r4, [r7, #40]	; 0x28
 8009504:	eb63 0301 	sbc.w	r3, r3, r1
 8009508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800950a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800950e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events *= (int64_t)events_scaler;
 8009512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009514:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009518:	fb02 f203 	mul.w	r2, r2, r3
 800951c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009520:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009522:	fb01 f303 	mul.w	r3, r1, r3
 8009526:	18d1      	adds	r1, r2, r3
 8009528:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800952a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800952e:	fba2 2303 	umull	r2, r3, r2, r3
 8009532:	4419      	add	r1, r3
 8009534:	460b      	mov	r3, r1
 8009536:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800953a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events += 2048;
 800953e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009542:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009546:	6239      	str	r1, [r7, #32]
 8009548:	f143 0300 	adc.w	r3, r3, #0
 800954c:	627b      	str	r3, [r7, #36]	; 0x24
 800954e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8009552:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events /= 4096;
 8009556:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800955a:	2a00      	cmp	r2, #0
 800955c:	f173 0100 	sbcs.w	r1, r3, #0
 8009560:	da06      	bge.n	8009570 <VL53LX_hist_events_consistency_check+0x2a2>
 8009562:	f640 70ff 	movw	r0, #4095	; 0xfff
 8009566:	f04f 0100 	mov.w	r1, #0
 800956a:	1812      	adds	r2, r2, r0
 800956c:	eb41 0303 	adc.w	r3, r1, r3
 8009570:	f04f 0000 	mov.w	r0, #0
 8009574:	f04f 0100 	mov.w	r1, #0
 8009578:	0b10      	lsrs	r0, r2, #12
 800957a:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800957e:	1319      	asrs	r1, r3, #12
 8009580:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 8009584:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009588:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 800958c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009592:	461a      	mov	r2, r3
 8009594:	f04f 0300 	mov.w	r3, #0
 8009598:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800959a:	fb02 f001 	mul.w	r0, r2, r1
 800959e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80095a0:	fb03 f101 	mul.w	r1, r3, r1
 80095a4:	4401      	add	r1, r0
 80095a6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80095a8:	fba0 2302 	umull	r2, r3, r0, r2
 80095ac:	4419      	add	r1, r3
 80095ae:	460b      	mov	r3, r1
 80095b0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 80095b4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq += 2048;
 80095b8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80095bc:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 80095c0:	61b9      	str	r1, [r7, #24]
 80095c2:	f143 0300 	adc.w	r3, r3, #0
 80095c6:	61fb      	str	r3, [r7, #28]
 80095c8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80095cc:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	c_sig_noise_sq /= 4096;
 80095d0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80095d4:	2a00      	cmp	r2, #0
 80095d6:	f173 0100 	sbcs.w	r1, r3, #0
 80095da:	da06      	bge.n	80095ea <VL53LX_hist_events_consistency_check+0x31c>
 80095dc:	f640 70ff 	movw	r0, #4095	; 0xfff
 80095e0:	f04f 0100 	mov.w	r1, #0
 80095e4:	1812      	adds	r2, r2, r0
 80095e6:	eb41 0303 	adc.w	r3, r1, r3
 80095ea:	f04f 0000 	mov.w	r0, #0
 80095ee:	f04f 0100 	mov.w	r1, #0
 80095f2:	0b10      	lsrs	r0, r2, #12
 80095f4:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80095f8:	1319      	asrs	r1, r3, #12
 80095fa:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 80095fe:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009602:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 8009606:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800960a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960c:	461a      	mov	r2, r3
 800960e:	f04f 0300 	mov.w	r3, #0
 8009612:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009614:	fb02 f001 	mul.w	r0, r2, r1
 8009618:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800961a:	fb03 f101 	mul.w	r1, r3, r1
 800961e:	4401      	add	r1, r0
 8009620:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009622:	fba0 2302 	umull	r2, r3, r0, r2
 8009626:	4419      	add	r1, r3
 8009628:	460b      	mov	r3, r1
 800962a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 800962e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq += 2048;
 8009632:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009636:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800963a:	6139      	str	r1, [r7, #16]
 800963c:	f143 0300 	adc.w	r3, r3, #0
 8009640:	617b      	str	r3, [r7, #20]
 8009642:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009646:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4096;
 800964a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800964e:	2a00      	cmp	r2, #0
 8009650:	f173 0100 	sbcs.w	r1, r3, #0
 8009654:	da06      	bge.n	8009664 <VL53LX_hist_events_consistency_check+0x396>
 8009656:	f640 70ff 	movw	r0, #4095	; 0xfff
 800965a:	f04f 0100 	mov.w	r1, #0
 800965e:	1812      	adds	r2, r2, r0
 8009660:	eb41 0303 	adc.w	r3, r1, r3
 8009664:	f04f 0000 	mov.w	r0, #0
 8009668:	f04f 0100 	mov.w	r1, #0
 800966c:	0b10      	lsrs	r0, r2, #12
 800966e:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009672:	1319      	asrs	r1, r3, #12
 8009674:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60


	c_amb_noise_sq += 2;
 8009678:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800967c:	1c91      	adds	r1, r2, #2
 800967e:	60b9      	str	r1, [r7, #8]
 8009680:	f143 0300 	adc.w	r3, r3, #0
 8009684:	60fb      	str	r3, [r7, #12]
 8009686:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800968a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4;
 800968e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009692:	2a00      	cmp	r2, #0
 8009694:	f173 0100 	sbcs.w	r1, r3, #0
 8009698:	da02      	bge.n	80096a0 <VL53LX_hist_events_consistency_check+0x3d2>
 800969a:	3203      	adds	r2, #3
 800969c:	f143 0300 	adc.w	r3, r3, #0
 80096a0:	f04f 0000 	mov.w	r0, #0
 80096a4:	f04f 0100 	mov.w	r1, #0
 80096a8:	0890      	lsrs	r0, r2, #2
 80096aa:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80096ae:	1099      	asrs	r1, r3, #2
 80096b0:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 80096b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096b6:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 80096b8:	461a      	mov	r2, r3
 80096ba:	f04f 0300 	mov.w	r3, #0
 80096be:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	p_amb_noise_sq += 2;
 80096c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80096c6:	1c91      	adds	r1, r2, #2
 80096c8:	6039      	str	r1, [r7, #0]
 80096ca:	f143 0300 	adc.w	r3, r3, #0
 80096ce:	607b      	str	r3, [r7, #4]
 80096d0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80096d4:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	p_amb_noise_sq /= 4;
 80096d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80096dc:	2a00      	cmp	r2, #0
 80096de:	f173 0100 	sbcs.w	r1, r3, #0
 80096e2:	da02      	bge.n	80096ea <VL53LX_hist_events_consistency_check+0x41c>
 80096e4:	3203      	adds	r2, #3
 80096e6:	f143 0300 	adc.w	r3, r3, #0
 80096ea:	f04f 0000 	mov.w	r0, #0
 80096ee:	f04f 0100 	mov.w	r1, #0
 80096f2:	0890      	lsrs	r0, r2, #2
 80096f4:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80096f8:	1099      	asrs	r1, r3, #2
 80096fa:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 80096fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009700:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 8009702:	6ebb      	ldr	r3, [r7, #104]	; 0x68
		(uint32_t)prange_prev->VL53LX_p_017 +
 8009704:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 8009706:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		(uint32_t)c_sig_noise_sq +
 8009708:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800970a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	noise_sq_sum =
 800970c:	4413      	add	r3, r2
 800970e:	653b      	str	r3, [r7, #80]	; 0x50

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 8009710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009712:	011b      	lsls	r3, r3, #4
 8009714:	4618      	mov	r0, r3
 8009716:	f002 f822 	bl	800b75e <VL53LX_isqrt>
 800971a:	4603      	mov	r3, r0
 800971c:	461a      	mov	r2, r3
	*pevents_tolerance =
 800971e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009722:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 8009724:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800972e:	fb02 f203 	mul.w	r2, r2, r3
 8009732:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009736:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 8009738:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f103 0220 	add.w	r2, r3, #32
 8009742:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009746:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 8009748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	da00      	bge.n	8009754 <VL53LX_hist_events_consistency_check+0x486>
 8009752:	333f      	adds	r3, #63	; 0x3f
 8009754:	119b      	asrs	r3, r3, #6
 8009756:	461a      	mov	r2, r3
 8009758:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800975c:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 800975e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	657b      	str	r3, [r7, #84]	; 0x54
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 8009764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	461a      	mov	r2, r3
 800976a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800976c:	1a9b      	subs	r3, r3, r2
 800976e:	657b      	str	r3, [r7, #84]	; 0x54

	if ((int32_t)c_signal_events > p_signal_events)
 8009770:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009772:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009774:	429a      	cmp	r2, r3
 8009776:	da06      	bge.n	8009786 <VL53LX_hist_events_consistency_check+0x4b8>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 8009778:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800977a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800977c:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800977e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	e005      	b.n	8009792 <VL53LX_hist_events_consistency_check+0x4c4>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 8009786:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009788:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800978a:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800978c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009790:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 8009792:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	429a      	cmp	r2, r3
 80097a0:	dd0b      	ble.n	80097ba <VL53LX_hist_events_consistency_check+0x4ec>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 80097a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80097a6:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 80097a8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d204      	bcs.n	80097ba <VL53LX_hist_events_consistency_check+0x4ec>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 80097b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80097b4:	2214      	movs	r2, #20
 80097b6:	701a      	strb	r2, [r3, #0]
 80097b8:	e003      	b.n	80097c2 <VL53LX_hist_events_consistency_check+0x4f4>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 80097ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80097be:	2209      	movs	r2, #9
 80097c0:	701a      	strb	r2, [r3, #0]





	return status;
 80097c2:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	37a0      	adds	r7, #160	; 0xa0
 80097ca:	46bd      	mov	sp, r7
 80097cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080097d0 <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b087      	sub	sp, #28
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	4603      	mov	r3, r0
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
 80097dc:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 80097de:	2300      	movs	r3, #0
 80097e0:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 80097e2:	2300      	movs	r3, #0
 80097e4:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80097f2:	429a      	cmp	r2, r3
 80097f4:	dd0b      	ble.n	800980e <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8009804:	b29b      	uxth	r3, r3
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	b29b      	uxth	r3, r3
		delta_mm =
 800980a:	82fb      	strh	r3, [r7, #22]
 800980c:	e00a      	b.n	8009824 <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8009814:	b29a      	uxth	r2, r3
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800981c:	b29b      	uxth	r3, r3
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	b29b      	uxth	r3, r3
		delta_mm =
 8009822:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 8009824:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009828:	2b00      	cmp	r3, #0
 800982a:	dd09      	ble.n	8009840 <VL53LX_hist_merged_pulse_check+0x70>
 800982c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009830:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009834:	429a      	cmp	r2, r3
 8009836:	dd03      	ble.n	8009840 <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2216      	movs	r2, #22
 800983c:	701a      	strb	r2, [r3, #0]
 800983e:	e002      	b.n	8009846 <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2209      	movs	r2, #9
 8009844:	701a      	strb	r2, [r3, #0]

	return status;
 8009846:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800984a:	4618      	mov	r0, r3
 800984c:	371c      	adds	r7, #28
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr

08009856 <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b08e      	sub	sp, #56	; 0x38
 800985a:	af04      	add	r7, sp, #16
 800985c:	60f8      	str	r0, [r7, #12]
 800985e:	60b9      	str	r1, [r7, #8]
 8009860:	607a      	str	r2, [r7, #4]
 8009862:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009864:	2300      	movs	r3, #0
 8009866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev =
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	3318      	adds	r3, #24
 800986e:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 8009870:	2300      	movs	r3, #0
 8009872:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 8009874:	2300      	movs	r3, #0
 8009876:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	f893 3250 	ldrb.w	r3, [r3, #592]	; 0x250
 800987e:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 8009880:	6a3b      	ldr	r3, [r7, #32]
 8009882:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 8009886:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800988e:	2b09      	cmp	r3, #9
 8009890:	d009      	beq.n	80098a6 <VL53LX_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 8009898:	2b13      	cmp	r3, #19
 800989a:	d004      	beq.n	80098a6 <VL53LX_hist_xmonitor_consistency_check+0x50>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 80098a2:	2b14      	cmp	r3, #20
 80098a4:	d129      	bne.n	80098fa <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098ac:	2b09      	cmp	r3, #9
 80098ae:	d009      	beq.n	80098c4 <VL53LX_hist_xmonitor_consistency_check+0x6e>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 80098b6:	2b13      	cmp	r3, #19
 80098b8:	d004      	beq.n	80098c4 <VL53LX_hist_xmonitor_consistency_check+0x6e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 80098c0:	2b14      	cmp	r3, #20
 80098c2:	d11a      	bne.n	80098fa <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	2209      	movs	r2, #9
 80098c8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	334a      	adds	r3, #74	; 0x4a
				VL53LX_hist_events_consistency_check(
 80098d6:	8bb9      	ldrh	r1, [r7, #28]
 80098d8:	7ff8      	ldrb	r0, [r7, #31]
 80098da:	9303      	str	r3, [sp, #12]
 80098dc:	f107 0318 	add.w	r3, r7, #24
 80098e0:	9302      	str	r3, [sp, #8]
 80098e2:	f107 0314 	add.w	r3, r7, #20
 80098e6:	9301      	str	r3, [sp, #4]
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	4613      	mov	r3, r2
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	f7ff fced 	bl	80092ce <VL53LX_hist_events_consistency_check>
 80098f4:	4603      	mov	r3, r0
 80098f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 80098fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3728      	adds	r7, #40	; 0x28
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b088      	sub	sp, #32
 800990a:	af00      	add	r7, sp, #0
 800990c:	60f8      	str	r0, [r7, #12]
 800990e:	60b9      	str	r1, [r7, #8]
 8009910:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009912:	2300      	movs	r3, #0
 8009914:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 8009916:	2300      	movs	r3, #0
 8009918:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800991a:	2300      	movs	r3, #0
 800991c:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800992e:	2b00      	cmp	r3, #0
 8009930:	d019      	beq.n	8009966 <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009938:	4618      	mov	r0, r3
 800993a:	f002 f877 	bl	800ba2c <VL53LX_calc_pll_period_mm>
 800993e:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 8009946:	021b      	lsls	r3, r3, #8
 8009948:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	69ba      	ldr	r2, [r7, #24]
 800994e:	fb02 f303 	mul.w	r3, r2, r3
 8009952:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800995a:	0bdb      	lsrs	r3, r3, #15
 800995c:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	b21a      	sxth	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 8009966:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3720      	adds	r7, #32
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 8009972:	b590      	push	{r4, r7, lr}
 8009974:	b08d      	sub	sp, #52	; 0x34
 8009976:	af04      	add	r7, sp, #16
 8009978:	4604      	mov	r4, r0
 800997a:	4608      	mov	r0, r1
 800997c:	4611      	mov	r1, r2
 800997e:	461a      	mov	r2, r3
 8009980:	4623      	mov	r3, r4
 8009982:	80fb      	strh	r3, [r7, #6]
 8009984:	4603      	mov	r3, r0
 8009986:	80bb      	strh	r3, [r7, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	70fb      	strb	r3, [r7, #3]
 800998c:	4613      	mov	r3, r2
 800998e:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 8009990:	2300      	movs	r3, #0
 8009992:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 8009994:	2300      	movs	r3, #0
 8009996:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 8009998:	2300      	movs	r3, #0
 800999a:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800999c:	2300      	movs	r3, #0
 800999e:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 80099a0:	2300      	movs	r3, #0
 80099a2:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 80099a4:	2300      	movs	r3, #0
 80099a6:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 80099b0:	78b9      	ldrb	r1, [r7, #2]
 80099b2:	78f8      	ldrb	r0, [r7, #3]
 80099b4:	f107 030c 	add.w	r3, r7, #12
 80099b8:	9303      	str	r3, [sp, #12]
 80099ba:	f107 030e 	add.w	r3, r7, #14
 80099be:	9302      	str	r3, [sp, #8]
 80099c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80099c4:	9301      	str	r3, [sp, #4]
 80099c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099c8:	9300      	str	r3, [sp, #0]
 80099ca:	23ff      	movs	r3, #255	; 0xff
 80099cc:	22c7      	movs	r2, #199	; 0xc7
 80099ce:	f000 fa03 	bl	8009dd8 <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 80099d2:	89fb      	ldrh	r3, [r7, #14]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d050      	beq.n	8009a7a <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 80099d8:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d04d      	beq.n	8009a7a <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 80099de:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 80099e2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80099e6:	78b9      	ldrb	r1, [r7, #2]
 80099e8:	78f8      	ldrb	r0, [r7, #3]
 80099ea:	f107 0308 	add.w	r3, r7, #8
 80099ee:	9303      	str	r3, [sp, #12]
 80099f0:	f107 030a 	add.w	r3, r7, #10
 80099f4:	9302      	str	r3, [sp, #8]
 80099f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80099fa:	9301      	str	r3, [sp, #4]
 80099fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	4623      	mov	r3, r4
 8009a02:	f000 f9e9 	bl	8009dd8 <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 8009a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a08:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 8009a0a:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 8009a0c:	897b      	ldrh	r3, [r7, #10]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	fb02 f303 	mul.w	r3, r2, r3
 8009a16:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 8009a18:	89fb      	ldrh	r3, [r7, #14]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a22:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 8009a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a26:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 8009a28:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 8009a2a:	893b      	ldrh	r3, [r7, #8]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	fb02 f303 	mul.w	r3, r2, r3
 8009a34:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 8009a36:	89bb      	ldrh	r3, [r7, #12]
 8009a38:	461a      	mov	r2, r3
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a40:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 8009a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a46:	69ba      	ldr	r2, [r7, #24]
 8009a48:	fb02 f303 	mul.w	r3, r2, r3
 8009a4c:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 8009a4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009a52:	697a      	ldr	r2, [r7, #20]
 8009a54:	fb02 f303 	mul.w	r3, r2, r3
 8009a58:	69fa      	ldr	r2, [r7, #28]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8009a5e:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 8009a60:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8009a62:	4413      	add	r3, r2
 8009a64:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d008      	beq.n	8009a7e <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	009a      	lsls	r2, r3, #2
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	fb92 f3f3 	sdiv	r3, r2, r3
 8009a76:	61fb      	str	r3, [r7, #28]
 8009a78:	e002      	b.n	8009a80 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 8009a7a:	bf00      	nop
 8009a7c:	e000      	b.n	8009a80 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 8009a7e:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	b21a      	sxth	r2, r3
 8009a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a86:	801a      	strh	r2, [r3, #0]

}
 8009a88:	bf00      	nop
 8009a8a:	3724      	adds	r7, #36	; 0x24
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd90      	pop	{r4, r7, pc}

08009a90 <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60b9      	str	r1, [r7, #8]
 8009a98:	607a      	str	r2, [r7, #4]
 8009a9a:	603b      	str	r3, [r7, #0]
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 8009aa0:	7bfb      	ldrb	r3, [r7, #15]
 8009aa2:	08db      	lsrs	r3, r3, #3
 8009aa4:	b2da      	uxtb	r2, r3
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 8009aaa:	7bfb      	ldrb	r3, [r7, #15]
 8009aac:	f003 0307 	and.w	r3, r3, #7
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	2301      	movs	r3, #1
 8009abe:	4093      	lsls	r3, r2
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	701a      	strb	r2, [r3, #0]

}
 8009ac6:	bf00      	nop
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b083      	sub	sp, #12
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	4603      	mov	r3, r0
 8009ada:	603a      	str	r2, [r7, #0]
 8009adc:	71fb      	strb	r3, [r7, #7]
 8009ade:	460b      	mov	r3, r1
 8009ae0:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 8009ae2:	79fb      	ldrb	r3, [r7, #7]
 8009ae4:	2b07      	cmp	r3, #7
 8009ae6:	d90a      	bls.n	8009afe <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8009ae8:	79bb      	ldrb	r3, [r7, #6]
 8009aea:	00db      	lsls	r3, r3, #3
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	79fb      	ldrb	r3, [r7, #7]
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	3b71      	subs	r3, #113	; 0x71
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 8009afc:	e00a      	b.n	8009b14 <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8009afe:	79bb      	ldrb	r3, [r7, #6]
 8009b00:	f1c3 030f 	rsb	r3, r3, #15
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	00db      	lsls	r3, r3, #3
 8009b08:	b2da      	uxtb	r2, r3
 8009b0a:	79fb      	ldrb	r3, [r7, #7]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	b2da      	uxtb	r2, r3
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	701a      	strb	r2, [r3, #0]
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	4603      	mov	r3, r0
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
 8009b2c:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
 8009b30:	091b      	lsrs	r3, r3, #4
 8009b32:	b2da      	uxtb	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8009b38:	7bfb      	ldrb	r3, [r7, #15]
 8009b3a:	f003 030f 	and.w	r3, r3, #15
 8009b3e:	b2da      	uxtb	r2, r3
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	701a      	strb	r2, [r3, #0]

}
 8009b44:	bf00      	nop
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4603      	mov	r3, r0
 8009b58:	603a      	str	r2, [r7, #0]
 8009b5a:	71fb      	strb	r3, [r7, #7]
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 8009b60:	79bb      	ldrb	r3, [r7, #6]
 8009b62:	011b      	lsls	r3, r3, #4
 8009b64:	b2da      	uxtb	r2, r3
 8009b66:	79fb      	ldrb	r3, [r7, #7]
 8009b68:	4413      	add	r3, r2
 8009b6a:	b2da      	uxtb	r2, r3
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	701a      	strb	r2, [r3, #0]

}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60ba      	str	r2, [r7, #8]
 8009b84:	607b      	str	r3, [r7, #4]
 8009b86:	4603      	mov	r3, r0
 8009b88:	73fb      	strb	r3, [r7, #15]
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 8009b96:	2300      	movs	r3, #0
 8009b98:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 8009b9e:	f107 0217 	add.w	r2, r7, #23
 8009ba2:	f107 0116 	add.w	r1, r7, #22
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f002 f9ab 	bl	800bf04 <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 8009bae:	f107 0214 	add.w	r2, r7, #20
 8009bb2:	f107 0115 	add.w	r1, r7, #21
 8009bb6:	7bbb      	ldrb	r3, [r7, #14]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7ff ffb1 	bl	8009b20 <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	7d7b      	ldrb	r3, [r7, #21]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	0fd9      	lsrs	r1, r3, #31
 8009bc8:	440b      	add	r3, r1
 8009bca:	105b      	asrs	r3, r3, #1
 8009bcc:	425b      	negs	r3, r3
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	4413      	add	r3, r2
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	b21a      	sxth	r2, r3
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	da02      	bge.n	8009bea <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	2200      	movs	r2, #0
 8009be8:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	7d7b      	ldrb	r3, [r7, #21]
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	4413      	add	r3, r2
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	b21a      	sxth	r2, r3
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c06:	2b0f      	cmp	r3, #15
 8009c08:	dd02      	ble.n	8009c10 <VL53LX_decode_zone_limits+0x94>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 8009c0a:	6a3b      	ldr	r3, [r7, #32]
 8009c0c:	220f      	movs	r2, #15
 8009c0e:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 8009c10:	7dbb      	ldrb	r3, [r7, #22]
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	7d3b      	ldrb	r3, [r7, #20]
 8009c16:	3301      	adds	r3, #1
 8009c18:	0fd9      	lsrs	r1, r3, #31
 8009c1a:	440b      	add	r3, r1
 8009c1c:	105b      	asrs	r3, r3, #1
 8009c1e:	425b      	negs	r3, r3
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	4413      	add	r3, r2
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	b21a      	sxth	r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	da02      	bge.n	8009c3c <VL53LX_decode_zone_limits+0xc0>
		*py_ll = 0;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	7d3b      	ldrb	r3, [r7, #20]
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	4413      	add	r3, r2
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	b21a      	sxth	r2, r3
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 8009c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c58:	2b0f      	cmp	r3, #15
 8009c5a:	dd02      	ble.n	8009c62 <VL53LX_decode_zone_limits+0xe6>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	220f      	movs	r2, #15
 8009c60:	801a      	strh	r2, [r3, #0]
}
 8009c62:	bf00      	nop
 8009c64:	3718      	adds	r7, #24
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 8009c6a:	b480      	push	{r7}
 8009c6c:	b085      	sub	sp, #20
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	4603      	mov	r3, r0
 8009c72:	460a      	mov	r2, r1
 8009c74:	71fb      	strb	r3, [r7, #7]
 8009c76:	4613      	mov	r3, r2
 8009c78:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 8009c7e:	79fb      	ldrb	r3, [r7, #7]
 8009c80:	f003 0303 	and.w	r3, r3, #3
 8009c84:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 8009c86:	79bb      	ldrb	r3, [r7, #6]
 8009c88:	f003 0303 	and.w	r3, r3, #3
 8009c8c:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 8009c8e:	7bbb      	ldrb	r3, [r7, #14]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d104      	bne.n	8009c9e <VL53LX_is_aperture_location+0x34>
 8009c94:	7b7b      	ldrb	r3, [r7, #13]
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d101      	bne.n	8009c9e <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 8009c9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d104      	bne.n	8009cae <VL53LX_is_aperture_location+0x44>
 8009ca4:	7b7b      	ldrb	r3, [r7, #13]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d101      	bne.n	8009cae <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 8009caa:	2301      	movs	r3, #1
 8009cac:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 8009cbc:	b590      	push	{r4, r7, lr}
 8009cbe:	b08b      	sub	sp, #44	; 0x2c
 8009cc0:	af02      	add	r7, sp, #8
 8009cc2:	603a      	str	r2, [r7, #0]
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	71fb      	strb	r3, [r7, #7]
 8009cca:	460b      	mov	r3, r1
 8009ccc:	71bb      	strb	r3, [r7, #6]
 8009cce:	4613      	mov	r3, r2
 8009cd0:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 8009cea:	2300      	movs	r3, #0
 8009cec:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 8009cfe:	f107 0416 	add.w	r4, r7, #22
 8009d02:	f107 0218 	add.w	r2, r7, #24
 8009d06:	79b9      	ldrb	r1, [r7, #6]
 8009d08:	79f8      	ldrb	r0, [r7, #7]
 8009d0a:	f107 0312 	add.w	r3, r7, #18
 8009d0e:	9301      	str	r3, [sp, #4]
 8009d10:	f107 0314 	add.w	r3, r7, #20
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	4623      	mov	r3, r4
 8009d18:	f7ff ff30 	bl	8009b7c <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1e:	2200      	movs	r2, #0
 8009d20:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009d22:	8afb      	ldrh	r3, [r7, #22]
 8009d24:	83bb      	strh	r3, [r7, #28]
 8009d26:	e04c      	b.n	8009dc2 <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009d28:	8b3b      	ldrh	r3, [r7, #24]
 8009d2a:	83fb      	strh	r3, [r7, #30]
 8009d2c:	e03d      	b.n	8009daa <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 8009d2e:	8bbb      	ldrh	r3, [r7, #28]
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	8bfa      	ldrh	r2, [r7, #30]
 8009d34:	b2d1      	uxtb	r1, r2
 8009d36:	f107 0211 	add.w	r2, r7, #17
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7ff fec9 	bl	8009ad2 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009d40:	7c78      	ldrb	r0, [r7, #17]
 8009d42:	f107 030e 	add.w	r3, r7, #14
 8009d46:	f107 020f 	add.w	r2, r7, #15
 8009d4a:	f107 0110 	add.w	r1, r7, #16
 8009d4e:	f7ff fe9f 	bl	8009a90 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009d52:	7c3b      	ldrb	r3, [r7, #16]
 8009d54:	461a      	mov	r2, r3
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	4413      	add	r3, r2
 8009d5a:	781a      	ldrb	r2, [r3, #0]
 8009d5c:	7bbb      	ldrb	r3, [r7, #14]
 8009d5e:	4013      	ands	r3, r2
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d01b      	beq.n	8009d9e <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 8009d66:	8bbb      	ldrh	r3, [r7, #28]
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	8bfa      	ldrh	r2, [r7, #30]
 8009d6c:	b2d2      	uxtb	r2, r2
 8009d6e:	4611      	mov	r1, r2
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7ff ff7a 	bl	8009c6a <VL53LX_is_aperture_location>
 8009d76:	4603      	mov	r3, r0
 8009d78:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009d7a:	7efb      	ldrb	r3, [r7, #27]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d007      	beq.n	8009d90 <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 8009d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d82:	881a      	ldrh	r2, [r3, #0]
 8009d84:	88bb      	ldrh	r3, [r7, #4]
 8009d86:	4413      	add	r3, r2
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8c:	801a      	strh	r2, [r3, #0]
 8009d8e:	e006      	b.n	8009d9e <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 8009d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d92:	881b      	ldrh	r3, [r3, #0]
 8009d94:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009d98:	b29a      	uxth	r2, r3
 8009d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9c:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009d9e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	3301      	adds	r3, #1
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	83fb      	strh	r3, [r7, #30]
 8009daa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009dae:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	ddbb      	ble.n	8009d2e <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009db6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	83bb      	strh	r3, [r7, #28]
 8009dc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009dc6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	ddac      	ble.n	8009d28 <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 8009dce:	bf00      	nop
 8009dd0:	bf00      	nop
 8009dd2:	3724      	adds	r7, #36	; 0x24
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd90      	pop	{r4, r7, pc}

08009dd8 <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 8009dd8:	b590      	push	{r4, r7, lr}
 8009dda:	b08d      	sub	sp, #52	; 0x34
 8009ddc:	af02      	add	r7, sp, #8
 8009dde:	4604      	mov	r4, r0
 8009de0:	4608      	mov	r0, r1
 8009de2:	4611      	mov	r1, r2
 8009de4:	461a      	mov	r2, r3
 8009de6:	4623      	mov	r3, r4
 8009de8:	71fb      	strb	r3, [r7, #7]
 8009dea:	4603      	mov	r3, r0
 8009dec:	71bb      	strb	r3, [r7, #6]
 8009dee:	460b      	mov	r3, r1
 8009df0:	717b      	strb	r3, [r7, #5]
 8009df2:	4613      	mov	r3, r2
 8009df4:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 8009e02:	2300      	movs	r3, #0
 8009e04:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 8009e12:	2300      	movs	r3, #0
 8009e14:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 8009e16:	2300      	movs	r3, #0
 8009e18:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 8009e22:	2300      	movs	r3, #0
 8009e24:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 8009e26:	2300      	movs	r3, #0
 8009e28:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 8009e34:	2300      	movs	r3, #0
 8009e36:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53LX_decode_zone_limits(
 8009e38:	f107 041c 	add.w	r4, r7, #28
 8009e3c:	f107 021e 	add.w	r2, r7, #30
 8009e40:	79b9      	ldrb	r1, [r7, #6]
 8009e42:	79f8      	ldrb	r0, [r7, #7]
 8009e44:	f107 0318 	add.w	r3, r7, #24
 8009e48:	9301      	str	r3, [sp, #4]
 8009e4a:	f107 031a 	add.w	r3, r7, #26
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	4623      	mov	r3, r4
 8009e52:	f7ff fe93 	bl	8009b7c <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 8009e56:	f107 0414 	add.w	r4, r7, #20
 8009e5a:	f107 0216 	add.w	r2, r7, #22
 8009e5e:	7939      	ldrb	r1, [r7, #4]
 8009e60:	7978      	ldrb	r0, [r7, #5]
 8009e62:	f107 0310 	add.w	r3, r7, #16
 8009e66:	9301      	str	r3, [sp, #4]
 8009e68:	f107 0312 	add.w	r3, r7, #18
 8009e6c:	9300      	str	r3, [sp, #0]
 8009e6e:	4623      	mov	r3, r4
 8009e70:	f7ff fe84 	bl	8009b7c <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 8009e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e76:	2200      	movs	r2, #0
 8009e78:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 8009e7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009e80:	8abb      	ldrh	r3, [r7, #20]
 8009e82:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009e84:	e06c      	b.n	8009f60 <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009e86:	8afb      	ldrh	r3, [r7, #22]
 8009e88:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009e8a:	e05d      	b.n	8009f48 <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 8009e8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009e92:	b2d1      	uxtb	r1, r2
 8009e94:	f107 020f 	add.w	r2, r7, #15
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7ff fe1a 	bl	8009ad2 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009e9e:	7bf8      	ldrb	r0, [r7, #15]
 8009ea0:	f107 030c 	add.w	r3, r7, #12
 8009ea4:	f107 020d 	add.w	r2, r7, #13
 8009ea8:	f107 010e 	add.w	r1, r7, #14
 8009eac:	f7ff fdf0 	bl	8009a90 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009eb0:	7bbb      	ldrb	r3, [r7, #14]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb6:	4413      	add	r3, r2
 8009eb8:	781a      	ldrb	r2, [r3, #0]
 8009eba:	7b3b      	ldrb	r3, [r7, #12]
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d03b      	beq.n	8009f3c <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 8009ec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009eca:	b2d2      	uxtb	r2, r2
 8009ecc:	4611      	mov	r1, r2
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7ff fecb 	bl	8009c6a <VL53LX_is_aperture_location>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009eda:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d002      	beq.n	8009ee8 <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 8009ee2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009ee4:	847b      	strh	r3, [r7, #34]	; 0x22
 8009ee6:	e002      	b.n	8009eee <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 8009ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009eec:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 8009eee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009ef2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	db19      	blt.n	8009f2e <VL53LX_calc_mm_effective_spads+0x156>
 8009efa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009efe:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009f02:	429a      	cmp	r2, r3
 8009f04:	dc13      	bgt.n	8009f2e <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8009f06:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 8009f0a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	db0d      	blt.n	8009f2e <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8009f12:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009f16:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	dc07      	bgt.n	8009f2e <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 8009f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f20:	881a      	ldrh	r2, [r3, #0]
 8009f22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f24:	4413      	add	r3, r2
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f2a:	801a      	strh	r2, [r3, #0]
 8009f2c:	e006      	b.n	8009f3c <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 8009f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f30:	881a      	ldrh	r2, [r3, #0]
 8009f32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f34:	4413      	add	r3, r2
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f3a:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009f3c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	3301      	adds	r3, #1
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009f48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009f4c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009f50:	429a      	cmp	r2, r3
 8009f52:	dd9b      	ble.n	8009e8c <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009f54:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009f60:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009f64:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	dd8c      	ble.n	8009e86 <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 8009f6c:	bf00      	nop
 8009f6e:	bf00      	nop
 8009f70:	372c      	adds	r7, #44	; 0x2c
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd90      	pop	{r4, r7, pc}

08009f76 <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b086      	sub	sp, #24
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	60f8      	str	r0, [r7, #12]
 8009f7e:	60b9      	str	r1, [r7, #8]
 8009f80:	607a      	str	r2, [r7, #4]
 8009f82:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7fe f835 	bl	8007ff8 <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	7c9a      	ldrb	r2, [r3, #18]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	3314      	adds	r3, #20
 8009fb8:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 8009fba:	2300      	movs	r3, #0
 8009fbc:	75fb      	strb	r3, [r7, #23]
 8009fbe:	e06b      	b.n	800a098 <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 8009fc0:	7dfb      	ldrb	r3, [r7, #23]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d002      	beq.n	8009fcc <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d034      	beq.n	800a034 <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 8009fca:	e05f      	b.n	800a08c <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800a004:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	8a9a      	ldrh	r2, [r3, #20]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	601a      	str	r2, [r3, #0]

			break;
 800a032:	e02b      	b.n	800a08c <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800a064:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	611a      	str	r2, [r3, #16]
			break;
 800a08a:	bf00      	nop
		}

		pdata++;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	334c      	adds	r3, #76	; 0x4c
 800a090:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800a092:	7dfb      	ldrb	r3, [r7, #23]
 800a094:	3301      	adds	r3, #1
 800a096:	75fb      	strb	r3, [r7, #23]
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	7c9b      	ldrb	r3, [r3, #18]
 800a09c:	7dfa      	ldrb	r2, [r7, #23]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d38e      	bcc.n	8009fc0 <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800a0a2:	bf00      	nop
 800a0a4:	bf00      	nop
 800a0a6:	3718      	adds	r7, #24
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b089      	sub	sp, #36	; 0x24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	3318      	adds	r3, #24
 800a0bc:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a0c4:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800a0cc:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a0d4:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	005b      	lsls	r3, r3, #1
 800a0de:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a0e2:	697a      	ldr	r2, [r7, #20]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	3302      	adds	r3, #2
 800a0e8:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800a10e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3724      	adds	r7, #36	; 0x24
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 800a11e:	b480      	push	{r7}
 800a120:	b08b      	sub	sp, #44	; 0x2c
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
 800a126:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a128:	2300      	movs	r3, #0
 800a12a:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	3318      	adds	r3, #24
 800a130:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a138:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a140:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a148:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800a150:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800a152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a156:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 800a158:	7bfa      	ldrb	r2, [r7, #15]
 800a15a:	6939      	ldr	r1, [r7, #16]
 800a15c:	4613      	mov	r3, r2
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	4413      	add	r3, r2
 800a162:	005b      	lsls	r3, r3, #1
 800a164:	440b      	add	r3, r1
 800a166:	3306      	adds	r3, #6
 800a168:	2200      	movs	r2, #0
 800a16a:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a172:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800a174:	2301      	movs	r3, #1
 800a176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a17a:	e01a      	b.n	800a1b2 <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 800a17c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	214c      	movs	r1, #76	; 0x4c
 800a184:	fb01 f303 	mul.w	r3, r1, r3
 800a188:	4413      	add	r3, r2
 800a18a:	334a      	adds	r3, #74	; 0x4a
 800a18c:	881b      	ldrh	r3, [r3, #0]
 800a18e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a190:	429a      	cmp	r2, r3
 800a192:	d209      	bcs.n	800a1a8 <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 800a194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800a198:	683a      	ldr	r2, [r7, #0]
 800a19a:	214c      	movs	r1, #76	; 0x4c
 800a19c:	fb01 f303 	mul.w	r3, r1, r3
 800a1a0:	4413      	add	r3, r2
 800a1a2:	334a      	adds	r3, #74	; 0x4a
 800a1a4:	881b      	ldrh	r3, [r3, #0]
 800a1a6:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800a1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	7c9b      	ldrb	r3, [r3, #18]
 800a1b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d3de      	bcc.n	800a17c <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 800a1be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d103      	bne.n	800a1cc <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 800a1c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1c8:	623b      	str	r3, [r7, #32]
 800a1ca:	e00e      	b.n	800a1ea <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 800a1cc:	89bb      	ldrh	r3, [r7, #12]
 800a1ce:	039b      	lsls	r3, r3, #14
 800a1d0:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800a1d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1d4:	6a3a      	ldr	r2, [r7, #32]
 800a1d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1da:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800a1dc:	6a3b      	ldr	r3, [r7, #32]
 800a1de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1e2:	d302      	bcc.n	800a1ea <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 800a1e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1e8:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800a1ea:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800a1ec:	6a3b      	ldr	r3, [r7, #32]
 800a1ee:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800a1f0:	6939      	ldr	r1, [r7, #16]
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	4413      	add	r3, r2
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	440b      	add	r3, r1
 800a1fc:	3306      	adds	r3, #6
 800a1fe:	4602      	mov	r2, r0
 800a200:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800a202:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a206:	4618      	mov	r0, r3
 800a208:	372c      	adds	r7, #44	; 0x2c
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b08a      	sub	sp, #40	; 0x28
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a21a:	2300      	movs	r3, #0
 800a21c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	3318      	adds	r3, #24
 800a224:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a226:	6a3b      	ldr	r3, [r7, #32]
 800a228:	332c      	adds	r3, #44	; 0x2c
 800a22a:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	33c2      	adds	r3, #194	; 0xc2
 800a230:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800a238:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	3302      	adds	r3, #2
 800a23e:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	785b      	ldrb	r3, [r3, #1]
 800a244:	f003 0301 	and.w	r3, r3, #1
 800a248:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a24a:	6a3b      	ldr	r3, [r7, #32]
 800a24c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a250:	461a      	mov	r2, r3
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	4413      	add	r3, r2
 800a256:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d11e      	bne.n	800a29c <VL53LX_multizone_hist_bins_update+0x8a>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800a25e:	7bfb      	ldrb	r3, [r7, #15]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d10b      	bne.n	800a27c <VL53LX_multizone_hist_bins_update+0x6a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d05d      	beq.n	800a33e <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	719a      	strb	r2, [r3, #6]
 800a29a:	e050      	b.n	800a33e <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a29c:	6a3b      	ldr	r3, [r7, #32]
 800a29e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d11e      	bne.n	800a2ee <VL53LX_multizone_hist_bins_update+0xdc>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10b      	bne.n	800a2ce <VL53LX_multizone_hist_bins_update+0xbc>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d034      	beq.n	800a33e <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	719a      	strb	r2, [r3, #6]
 800a2ec:	e027      	b.n	800a33e <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a2ee:	6a3b      	ldr	r3, [r7, #32]
 800a2f0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2fe:	2b03      	cmp	r3, #3
 800a300:	d11d      	bne.n	800a33e <VL53LX_multizone_hist_bins_update+0x12c>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800a302:	7bfb      	ldrb	r3, [r7, #15]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10b      	bne.n	800a320 <VL53LX_multizone_hist_bins_update+0x10e>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a320:	7bfb      	ldrb	r3, [r7, #15]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00b      	beq.n	800a33e <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800a33e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a342:	2b00      	cmp	r3, #0
 800a344:	d109      	bne.n	800a35a <VL53LX_multizone_hist_bins_update+0x148>
		VL53LX_copy_hist_bins_to_static_cfg(
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	f203 21fe 	addw	r1, r3, #766	; 0x2fe
 800a34c:	6a3b      	ldr	r3, [r7, #32]
 800a34e:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800a352:	461a      	mov	r2, r3
 800a354:	6978      	ldr	r0, [r7, #20]
 800a356:	f7fd fa1f 	bl	8007798 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800a35a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3728      	adds	r7, #40	; 0x28
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800a366:	b480      	push	{r7}
 800a368:	b089      	sub	sp, #36	; 0x24
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	60f8      	str	r0, [r7, #12]
 800a36e:	607a      	str	r2, [r7, #4]
 800a370:	603b      	str	r3, [r7, #0]
 800a372:	460b      	mov	r3, r1
 800a374:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a376:	2300      	movs	r3, #0
 800a378:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3318      	adds	r3, #24
 800a37e:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a386:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800a388:	7dfb      	ldrb	r3, [r7, #23]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d103      	bne.n	800a396 <VL53LX_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	7afa      	ldrb	r2, [r7, #11]
 800a392:	701a      	strb	r2, [r3, #0]
 800a394:	e01e      	b.n	800a3d4 <VL53LX_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	461a      	mov	r2, r3
 800a39c:	7dfb      	ldrb	r3, [r7, #23]
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d111      	bne.n	800a3c8 <VL53LX_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	2bff      	cmp	r3, #255	; 0xff
 800a3aa:	d103      	bne.n	800a3b4 <VL53LX_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2280      	movs	r2, #128	; 0x80
 800a3b0:	701a      	strb	r2, [r3, #0]
 800a3b2:	e005      	b.n	800a3c0 <VL53LX_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	701a      	strb	r2, [r3, #0]
 800a3c6:	e005      	b.n	800a3d4 <VL53LX_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	b2da      	uxtb	r2, r3
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800a3d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3724      	adds	r7, #36	; 0x24
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <VL53LX_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08a      	sub	sp, #40	; 0x28
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	607a      	str	r2, [r7, #4]
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	72fb      	strb	r3, [r7, #11]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	813b      	strh	r3, [r7, #8]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	3318      	adds	r3, #24
 800a402:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800a404:	2300      	movs	r3, #0
 800a406:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800a408:	2300      	movs	r3, #0
 800a40a:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53LX_calc_macro_period_us(
 800a40c:	7afa      	ldrb	r2, [r7, #11]
 800a40e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a410:	4611      	mov	r1, r2
 800a412:	4618      	mov	r0, r3
 800a414:	f7fe f9fc 	bl	8008810 <VL53LX_calc_macro_period_us>
 800a418:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800a41a:	6a3b      	ldr	r3, [r7, #32]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d101      	bne.n	800a424 <VL53LX_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800a420:	2301      	movs	r3, #1
 800a422:	623b      	str	r3, [r7, #32]


	timeout_mclks = phasecal_timeout_us << 12;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	031b      	lsls	r3, r3, #12
 800a428:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800a42a:	6a3b      	ldr	r3, [r7, #32]
 800a42c:	085b      	lsrs	r3, r3, #1
 800a42e:	69ba      	ldr	r2, [r7, #24]
 800a430:	4413      	add	r3, r2
 800a432:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800a434:	69ba      	ldr	r2, [r7, #24]
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	fbb2 f3f3 	udiv	r3, r2, r3
 800a43c:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	2bff      	cmp	r3, #255	; 0xff
 800a442:	d904      	bls.n	800a44e <VL53LX_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	22ff      	movs	r2, #255	; 0xff
 800a448:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
 800a44c:	e004      	b.n	800a458 <VL53LX_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	7afa      	ldrb	r2, [r7, #11]
 800a45c:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a



	if (status == VL53LX_ERROR_NONE)
 800a460:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10a      	bne.n	800a47e <VL53LX_set_ref_spad_char_config+0x9a>
		status =
			VL53LX_WrByte(
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
 800a46e:	461a      	mov	r2, r3
 800a470:	214b      	movs	r1, #75	; 0x4b
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f006 fd8e 	bl	8010f94 <VL53LX_WrByte>
 800a478:	4603      	mov	r3, r0
 800a47a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53LX_ERROR_NONE)
 800a47e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10a      	bne.n	800a49c <VL53LX_set_ref_spad_char_config+0xb8>
		status =
			VL53LX_WrByte(
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a48c:	461a      	mov	r2, r3
 800a48e:	2160      	movs	r1, #96	; 0x60
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f006 fd7f 	bl	8010f94 <VL53LX_WrByte>
 800a496:	4603      	mov	r3, r0
 800a498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53LX_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a4a2:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a4aa:	757b      	strb	r3, [r7, #21]

	if (status == VL53LX_ERROR_NONE)
 800a4ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d109      	bne.n	800a4c8 <VL53LX_set_ref_spad_char_config+0xe4>
		status =
			VL53LX_WriteMulti(
 800a4b4:	f107 0214 	add.w	r2, r7, #20
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	2178      	movs	r1, #120	; 0x78
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f006 fcfd 	bl	8010ebc <VL53LX_WriteMulti>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	893a      	ldrh	r2, [r7, #8]
 800a4cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53LX_ERROR_NONE)
 800a4d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d108      	bne.n	800a4ea <VL53LX_set_ref_spad_char_config+0x106>
		status =
			VL53LX_WrWord(
 800a4d8:	893b      	ldrh	r3, [r7, #8]
 800a4da:	461a      	mov	r2, r3
 800a4dc:	211c      	movs	r1, #28
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f006 fd82 	bl	8010fe8 <VL53LX_WrWord>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a4ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d108      	bne.n	800a504 <VL53LX_set_ref_spad_char_config+0x120>
		status =
			VL53LX_WrWord(
 800a4f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	2164      	movs	r1, #100	; 0x64
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f006 fd75 	bl	8010fe8 <VL53LX_WrWord>
 800a4fe:	4603      	mov	r3, r0
 800a500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a504:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d108      	bne.n	800a51e <VL53LX_set_ref_spad_char_config+0x13a>
		status =
			VL53LX_WrWord(
 800a50c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a50e:	461a      	mov	r2, r3
 800a510:	2166      	movs	r1, #102	; 0x66
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f006 fd68 	bl	8010fe8 <VL53LX_WrWord>
 800a518:	4603      	mov	r3, r0
 800a51a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800a51e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a522:	4618      	mov	r0, r3
 800a524:	3728      	adds	r7, #40	; 0x28
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800a52a:	b5b0      	push	{r4, r5, r7, lr}
 800a52c:	b090      	sub	sp, #64	; 0x40
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a532:	2300      	movs	r3, #0
 800a534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	3318      	adds	r3, #24
 800a53c:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a544:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_smudge_corrector_config_t *pconfig =
 800a546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a548:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a54c:	3314      	adds	r3, #20
 800a54e:	623b      	str	r3, [r7, #32]
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800a550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a552:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a556:	3318      	adds	r3, #24
 800a558:	61fb      	str	r3, [r7, #28]
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55c:	61bb      	str	r3, [r7, #24]
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a564:	617b      	str	r3, [r7, #20]

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	69db      	ldr	r3, [r3, #28]
 800a56a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53LX_p_016;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800a574:	4413      	add	r3, r2
 800a576:	461a      	mov	r2, r3
 800a578:	f04f 0300 	mov.w	r3, #0
 800a57c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (peak_duration_us == 0)
 800a580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a582:	2b00      	cmp	r3, #0
 800a584:	d102      	bne.n	800a58c <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x62>
		peak_duration_us = 1000;
 800a586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a58a:	63fb      	str	r3, [r7, #60]	; 0x3c
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a58c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	f04f 0400 	mov.w	r4, #0
 800a598:	f04f 0500 	mov.w	r5, #0
 800a59c:	015d      	lsls	r5, r3, #5
 800a59e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a5a2:	0154      	lsls	r4, r2, #5
 800a5a4:	4622      	mov	r2, r4
 800a5a6:	462b      	mov	r3, r5
 800a5a8:	1a12      	subs	r2, r2, r0
 800a5aa:	eb63 0301 	sbc.w	r3, r3, r1
 800a5ae:	f04f 0400 	mov.w	r4, #0
 800a5b2:	f04f 0500 	mov.w	r5, #0
 800a5b6:	009d      	lsls	r5, r3, #2
 800a5b8:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a5bc:	0094      	lsls	r4, r2, #2
 800a5be:	4622      	mov	r2, r4
 800a5c0:	462b      	mov	r3, r5
 800a5c2:	1812      	adds	r2, r2, r0
 800a5c4:	eb41 0303 	adc.w	r3, r1, r3
 800a5c8:	f04f 0000 	mov.w	r0, #0
 800a5cc:	f04f 0100 	mov.w	r1, #0
 800a5d0:	00d9      	lsls	r1, r3, #3
 800a5d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a5d6:	00d0      	lsls	r0, r2, #3
 800a5d8:	4602      	mov	r2, r0
 800a5da:	460b      	mov	r3, r1
 800a5dc:	4610      	mov	r0, r2
 800a5de:	4619      	mov	r1, r3
 800a5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f04f 0300 	mov.w	r3, #0
 800a5e8:	f7f5 fe9a 	bl	8000320 <__aeabi_uldivmod>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a5f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	f04f 0400 	mov.w	r4, #0
 800a600:	f04f 0500 	mov.w	r5, #0
 800a604:	015d      	lsls	r5, r3, #5
 800a606:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a60a:	0154      	lsls	r4, r2, #5
 800a60c:	4622      	mov	r2, r4
 800a60e:	462b      	mov	r3, r5
 800a610:	1a12      	subs	r2, r2, r0
 800a612:	eb63 0301 	sbc.w	r3, r3, r1
 800a616:	f04f 0400 	mov.w	r4, #0
 800a61a:	f04f 0500 	mov.w	r5, #0
 800a61e:	009d      	lsls	r5, r3, #2
 800a620:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a624:	0094      	lsls	r4, r2, #2
 800a626:	4622      	mov	r2, r4
 800a628:	462b      	mov	r3, r5
 800a62a:	1812      	adds	r2, r2, r0
 800a62c:	eb41 0303 	adc.w	r3, r1, r3
 800a630:	f04f 0000 	mov.w	r0, #0
 800a634:	f04f 0100 	mov.w	r1, #0
 800a638:	00d9      	lsls	r1, r3, #3
 800a63a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a63e:	00d0      	lsls	r0, r2, #3
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	4610      	mov	r0, r2
 800a646:	4619      	mov	r1, r3
 800a648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a64a:	461a      	mov	r2, r3
 800a64c:	f04f 0300 	mov.w	r3, #0
 800a650:	f7f5 fe66 	bl	8000320 <__aeabi_uldivmod>
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	e9c7 2302 	strd	r2, r3, [r7, #8]

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800a65c:	6a3b      	ldr	r3, [r7, #32]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	697a      	ldr	r2, [r7, #20]
 800a662:	8ad2      	ldrh	r2, [r2, #22]
 800a664:	fb02 f303 	mul.w	r3, r2, r3
 800a668:	461a      	mov	r2, r3
 800a66a:	f04f 0300 	mov.w	r3, #0
 800a66e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (temp64z == 0)
 800a672:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a676:	4313      	orrs	r3, r2
 800a678:	d105      	bne.n	800a686 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x15c>
		temp64z = 1;
 800a67a:	f04f 0201 	mov.w	r2, #1
 800a67e:	f04f 0300 	mov.w	r3, #0
 800a682:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	temp64a = temp64a * 1000 * 256;
 800a686:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a68a:	4602      	mov	r2, r0
 800a68c:	460b      	mov	r3, r1
 800a68e:	f04f 0400 	mov.w	r4, #0
 800a692:	f04f 0500 	mov.w	r5, #0
 800a696:	015d      	lsls	r5, r3, #5
 800a698:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a69c:	0154      	lsls	r4, r2, #5
 800a69e:	4622      	mov	r2, r4
 800a6a0:	462b      	mov	r3, r5
 800a6a2:	1a12      	subs	r2, r2, r0
 800a6a4:	eb63 0301 	sbc.w	r3, r3, r1
 800a6a8:	f04f 0400 	mov.w	r4, #0
 800a6ac:	f04f 0500 	mov.w	r5, #0
 800a6b0:	009d      	lsls	r5, r3, #2
 800a6b2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a6b6:	0094      	lsls	r4, r2, #2
 800a6b8:	4622      	mov	r2, r4
 800a6ba:	462b      	mov	r3, r5
 800a6bc:	1812      	adds	r2, r2, r0
 800a6be:	eb41 0303 	adc.w	r3, r1, r3
 800a6c2:	f04f 0000 	mov.w	r0, #0
 800a6c6:	f04f 0100 	mov.w	r1, #0
 800a6ca:	02d9      	lsls	r1, r3, #11
 800a6cc:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800a6d0:	02d0      	lsls	r0, r2, #11
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800a6da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a6de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a6e2:	f7f5 fe1d 	bl	8000320 <__aeabi_uldivmod>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = temp64a * 1000 * 256;
 800a6ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	f04f 0400 	mov.w	r4, #0
 800a6fa:	f04f 0500 	mov.w	r5, #0
 800a6fe:	015d      	lsls	r5, r3, #5
 800a700:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a704:	0154      	lsls	r4, r2, #5
 800a706:	4622      	mov	r2, r4
 800a708:	462b      	mov	r3, r5
 800a70a:	1a12      	subs	r2, r2, r0
 800a70c:	eb63 0301 	sbc.w	r3, r3, r1
 800a710:	f04f 0400 	mov.w	r4, #0
 800a714:	f04f 0500 	mov.w	r5, #0
 800a718:	009d      	lsls	r5, r3, #2
 800a71a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a71e:	0094      	lsls	r4, r2, #2
 800a720:	4622      	mov	r2, r4
 800a722:	462b      	mov	r3, r5
 800a724:	1812      	adds	r2, r2, r0
 800a726:	eb41 0303 	adc.w	r3, r1, r3
 800a72a:	f04f 0000 	mov.w	r0, #0
 800a72e:	f04f 0100 	mov.w	r1, #0
 800a732:	02d9      	lsls	r1, r3, #11
 800a734:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800a738:	02d0      	lsls	r0, r2, #11
 800a73a:	4602      	mov	r2, r0
 800a73c:	460b      	mov	r3, r1
 800a73e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800a742:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a746:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a74a:	f7f5 fde9 	bl	8000320 <__aeabi_uldivmod>
 800a74e:	4602      	mov	r2, r0
 800a750:	460b      	mov	r3, r1
 800a752:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pint->required_samples = (uint32_t)temp64a;
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d802      	bhi.n	800a76a <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x240>
		pint->required_samples = 2;
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	2202      	movs	r2, #2
 800a768:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800a76a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3740      	adds	r7, #64	; 0x40
 800a772:	46bd      	mov	sp, r7
 800a774:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a778 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b096      	sub	sp, #88	; 0x58
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a786:	2300      	movs	r3, #0
 800a788:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	3318      	adds	r3, #24
 800a790:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800a792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a794:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a798:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800a79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a79c:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800a7a0:	331c      	adds	r3, #28
 800a7a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800a7a4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d107      	bne.n	800a7bc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x44>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	889b      	ldrh	r3, [r3, #4]
 800a7b0:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	609a      	str	r2, [r3, #8]
 800a7ba:	e002      	b.n	800a7c2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x4a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ca:	899b      	ldrh	r3, [r3, #12]
 800a7cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	89db      	ldrh	r3, [r3, #14]
 800a7d4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d004      	beq.n	800a7ec <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x74>
		(pconfig->scaler_calc_method == 1)) &&
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d126      	bne.n	800a83a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800a7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ee:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d022      	beq.n	800a83a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a7f4:	f107 0317 	add.w	r3, r7, #23
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f000 fe75 	bl	800b4ea <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800a800:	7dfb      	ldrb	r3, [r7, #23]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d101      	bne.n	800a80a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x92>
			histo_merge_nb = 1;
 800a806:	2301      	movs	r3, #1
 800a808:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800a80a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a80c:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800a810:	2b01      	cmp	r3, #1
 800a812:	d003      	beq.n	800a81c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa4>
			orig_xtalk_offset =
 800a814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	653b      	str	r3, [r7, #80]	; 0x50
 800a81a:	e006      	b.n	800a82a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800a81c:	7dfb      	ldrb	r3, [r7, #23]
 800a81e:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800a820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a822:	3202      	adds	r2, #2
 800a824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a828:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800a82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82c:	889b      	ldrh	r3, [r3, #4]
 800a82e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800a832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a834:	88db      	ldrh	r3, [r3, #6]
 800a836:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10a      	bne.n	800a85a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
 800a844:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d106      	bne.n	800a85a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
		pout->gradient_zero_flag |= 0x01;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	795b      	ldrb	r3, [r3, #5]
 800a850:	f043 0301 	orr.w	r3, r3, #1
 800a854:	b2da      	uxtb	r2, r3
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a860:	2b00      	cmp	r3, #0
 800a862:	d10a      	bne.n	800a87a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
 800a864:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d106      	bne.n	800a87a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
		pout->gradient_zero_flag |= 0x02;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	795b      	ldrb	r3, [r3, #5]
 800a870:	f043 0302 	orr.w	r3, r3, #2
 800a874:	b2da      	uxtb	r2, r3
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800a87a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d101      	bne.n	800a884 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10c>
		orig_xtalk_offset = 1;
 800a880:	2301      	movs	r3, #1
 800a882:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d108      	bne.n	800a8a0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x128>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a892:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a89a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800a89e:	e019      	b.n	800a8d4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x15c>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800a8a0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a8a4:	019b      	lsls	r3, r3, #6
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800a8b8:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800a8ba:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800a8be:	019b      	lsls	r3, r3, #6
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a8d2:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d12a      	bne.n	800a934 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1bc>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800a8e6:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800a8ea:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800a8ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8ee:	119b      	asrs	r3, r3, #6
 800a8f0:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a8f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8f8:	db02      	blt.n	800a900 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x188>
			itemp32 = 0xFFFF;
 800a8fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8fe:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800a900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a902:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	689b      	ldr	r3, [r3, #8]
 800a90c:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800a910:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800a914:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800a916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a918:	119b      	asrs	r3, r3, #6
 800a91a:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a91c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a91e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a922:	db02      	blt.n	800a92a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b2>
			itemp32 = 0xFFFF;
 800a924:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a928:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800a92a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a92c:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	81da      	strh	r2, [r3, #14]
 800a932:	e042      	b.n	800a9ba <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>
	} else if (pconfig->scaler_calc_method == 1) {
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d13d      	bne.n	800a9ba <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800a942:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a944:	1ad3      	subs	r3, r2, r3
 800a946:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800a948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	da00      	bge.n	800a950 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d8>
 800a94e:	330f      	adds	r3, #15
 800a950:	111b      	asrs	r3, r3, #4
 800a952:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800a954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800a95a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a95e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a960:	4413      	add	r3, r2
 800a962:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a96a:	db02      	blt.n	800a972 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1fa>
			itemp32 = 0xFFFF;
 800a96c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a970:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800a972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a974:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800a97e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800a984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a986:	4a52      	ldr	r2, [pc, #328]	; (800aad0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x358>)
 800a988:	fb82 1203 	smull	r1, r2, r2, r3
 800a98c:	1152      	asrs	r2, r2, #5
 800a98e:	17db      	asrs	r3, r3, #31
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800a994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800a99a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800a99e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9a0:	4413      	add	r3, r2
 800a9a2:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a9a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9aa:	db02      	blt.n	800a9b2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23a>
			itemp32 = 0xFFFF;
 800a9ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a9b0:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800a9b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9b4:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	785b      	ldrb	r3, [r3, #1]
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d178      	bne.n	800aab4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
 800a9c2:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d074      	beq.n	800aab4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	62bb      	str	r3, [r7, #40]	; 0x28

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a9d6:	f107 0317 	add.w	r3, r7, #23
 800a9da:	4619      	mov	r1, r3
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	f000 fd84 	bl	800b4ea <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800a9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e4:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800a9e8:	627b      	str	r3, [r7, #36]	; 0x24
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800a9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ec:	3308      	adds	r3, #8
 800a9ee:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) &&
 800a9f0:	7dfb      	ldrb	r3, [r7, #23]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d042      	beq.n	800aa7c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800a9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f8:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		if ((histo_merge_nb > 0) &&
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d13d      	bne.n	800aa7c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800aa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d03a      	beq.n	800aa7c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(nXtalk != 0)) {
			cXtalk =
 800aa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	623b      	str	r3, [r7, #32]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa12:	fb02 f203 	mul.w	r2, r2, r3
 800aa16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa18:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa1c:	61fb      	str	r3, [r7, #28]
			if ((max ==  0)||
 800aa1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d004      	beq.n	800aa2e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2b6>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800aa28:	69fa      	ldr	r2, [r7, #28]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d303      	bcc.n	800aa36 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2be>
				pout->new_xtalk_applied_flag = 0;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	2200      	movs	r2, #0
 800aa32:	719a      	strb	r2, [r3, #6]
 800aa34:	e022      	b.n	800aa7c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			else {
				incXtalk = nXtalk / max;
 800aa36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa3e:	61bb      	str	r3, [r7, #24]
				cval = 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800aa44:	2300      	movs	r3, #0
 800aa46:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800aa4a:	e00e      	b.n	800aa6a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2f2>
					cval += incXtalk;
 800aa4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	4413      	add	r3, r2
 800aa52:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800aa54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa58:	601a      	str	r2, [r3, #0]
					pcpo++;
 800aa5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa5c:	3304      	adds	r3, #4
 800aa5e:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800aa60:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800aa64:	3301      	adds	r3, #1
 800aa66:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800aa6a:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa70:	3b01      	subs	r3, #1
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d3ea      	bcc.n	800aa4c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2d4>
				}
				*pcpo = nXtalk;
 800aa76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa7a:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	799b      	ldrb	r3, [r3, #6]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d017      	beq.n	800aab4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800aa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8a:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800aa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa94:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800aa9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9e:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	789b      	ldrb	r3, [r3, #2]
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d105      	bne.n	800aab4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

			pconfig->smudge_corr_apply_enabled = 0;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800aab4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d002      	beq.n	800aac2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x34a>
		pout->smudge_corr_valid = 1;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	2201      	movs	r2, #1
 800aac0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800aac2:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3758      	adds	r7, #88	; 0x58
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	66666667 	.word	0x66666667

0800aad4 <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 800aad4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800aad8:	b09a      	sub	sp, #104	; 0x68
 800aada:	af02      	add	r7, sp, #8
 800aadc:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800aade:	2300      	movs	r3, #0
 800aae0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	3318      	adds	r3, #24
 800aae8:	64bb      	str	r3, [r7, #72]	; 0x48
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800aaf0:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_smudge_corrector_config_t *pconfig =
 800aaf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaf4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800aaf8:	3314      	adds	r3, #20
 800aafa:	643b      	str	r3, [r7, #64]	; 0x40
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800aafc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aafe:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ab02:	3318      	adds	r3, #24
 800ab04:	63fb      	str	r3, [r7, #60]	; 0x3c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 800ab06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab08:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ab0c:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800ab0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab10:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800ab12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab14:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ab18:	633b      	str	r3, [r7, #48]	; 0x30

	uint8_t	run_smudge_detection = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t merging_complete = 0;
 800ab20:	2300      	movs	r3, #0
 800ab22:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t	run_nodetect = 0;
 800ab26:	2300      	movs	r3, #0
 800ab28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t ambient_check = 0;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	int32_t itemp32 = 0;
 800ab32:	2300      	movs	r3, #0
 800ab34:	65bb      	str	r3, [r7, #88]	; 0x58
	uint64_t utemp64 = 0;
 800ab36:	f04f 0200 	mov.w	r2, #0
 800ab3a:	f04f 0300 	mov.w	r3, #0
 800ab3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint8_t continue_processing = CONT_CONTINUE;
 800ab42:	2300      	movs	r3, #0
 800ab44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t xtalk_offset_out = 0;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t xtalk_offset_in = 0;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	61fb      	str	r3, [r7, #28]
	uint32_t current_xtalk = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	61bb      	str	r3, [r7, #24]
	uint32_t smudge_margin_adjusted = 0;
 800ab54:	2300      	movs	r3, #0
 800ab56:	617b      	str	r3, [r7, #20]
	uint8_t i = 0;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t nodetect_index = 0;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800ab64:	f107 030b 	add.w	r3, r7, #11
 800ab68:	4619      	mov	r1, r3
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 fcbd 	bl	800b4ea <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 800ab70:	7afb      	ldrb	r3, [r7, #11]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d004      	beq.n	800ab80 <VL53LX_dynamic_xtalk_correction_corrector+0xac>
		(pdev->tuning_parms.tp_hist_merge != 1))
 800ab76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab78:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	if ((histo_merge_nb == 0) ||
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d001      	beq.n	800ab84 <VL53LX_dynamic_xtalk_correction_corrector+0xb0>
		histo_merge_nb = 1;
 800ab80:	2301      	movs	r3, #1
 800ab82:	72fb      	strb	r3, [r7, #11]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800ab84:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ab86:	f000 faeb 	bl	800b160 <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800ab8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d009      	beq.n	800aba6 <VL53LX_dynamic_xtalk_correction_corrector+0xd2>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 800ab92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab96:	7afa      	ldrb	r2, [r7, #11]
 800ab98:	fb02 f303 	mul.w	r3, r2, r3
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800ab9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab9e:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d901      	bls.n	800abaa <VL53LX_dynamic_xtalk_correction_corrector+0xd6>
 800aba6:	2301      	movs	r3, #1
 800aba8:	e000      	b.n	800abac <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
 800abaa:	2300      	movs	r3, #0
 800abac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800abb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abb2:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d105      	bne.n	800abc6 <VL53LX_dynamic_xtalk_correction_corrector+0xf2>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800abba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abbc:	f893 2184 	ldrb.w	r2, [r3, #388]	; 0x184
 800abc0:	7afb      	ldrb	r3, [r7, #11]
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d101      	bne.n	800abca <VL53LX_dynamic_xtalk_correction_corrector+0xf6>
 800abc6:	2301      	movs	r3, #1
 800abc8:	e000      	b.n	800abcc <VL53LX_dynamic_xtalk_correction_corrector+0xf8>
 800abca:	2300      	movs	r3, #0
	merging_complete =
 800abcc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800abd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abd2:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d10e      	bne.n	800abf6 <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pconfig->smudge_corr_enabled == 1) &&
 800abd8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d00a      	beq.n	800abf6 <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pR->xmonitor.range_status
 800abe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe2:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800abe6:	2b09      	cmp	r3, #9
 800abe8:	d105      	bne.n	800abf6 <VL53LX_dynamic_xtalk_correction_corrector+0x122>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800abea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d001      	beq.n	800abf6 <VL53LX_dynamic_xtalk_correction_corrector+0x122>
 800abf2:	2301      	movs	r3, #1
 800abf4:	e000      	b.n	800abf8 <VL53LX_dynamic_xtalk_correction_corrector+0x124>
 800abf6:	2300      	movs	r3, #0
	run_smudge_detection =
 800abf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		merging_complete;


	if ((pR->xmonitor.range_status
 800abfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abfe:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800ac02:	2b09      	cmp	r3, #9
 800ac04:	f000 809e 	beq.w	800ad44 <VL53LX_dynamic_xtalk_correction_corrector+0x270>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800ac08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac0a:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	f040 8099 	bne.w	800ad44 <VL53LX_dynamic_xtalk_correction_corrector+0x270>

		run_nodetect = 2;
 800ac12:	2302      	movs	r3, #2
 800ac14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		for (i = 0; i < pR->active_results; i++) {
 800ac18:	2300      	movs	r3, #0
 800ac1a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ac1e:	e02d      	b.n	800ac7c <VL53LX_dynamic_xtalk_correction_corrector+0x1a8>
			if (pR->VL53LX_p_003[i].range_status ==
 800ac20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ac24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac26:	214c      	movs	r1, #76	; 0x4c
 800ac28:	fb01 f303 	mul.w	r3, r1, r3
 800ac2c:	4413      	add	r3, r2
 800ac2e:	335e      	adds	r3, #94	; 0x5e
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	2b09      	cmp	r3, #9
 800ac34:	d11d      	bne.n	800ac72 <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 800ac36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ac3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac3c:	214c      	movs	r1, #76	; 0x4c
 800ac3e:	fb01 f303 	mul.w	r3, r1, r3
 800ac42:	4413      	add	r3, r2
 800ac44:	335a      	adds	r3, #90	; 0x5a
 800ac46:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac4a:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800ac4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac4e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 800ac50:	429a      	cmp	r2, r3
 800ac52:	dc03      	bgt.n	800ac5c <VL53LX_dynamic_xtalk_correction_corrector+0x188>
					run_nodetect = 0;
 800ac54:	2300      	movs	r3, #0
 800ac56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ac5a:	e00a      	b.n	800ac72 <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				} else {
					if (run_nodetect == 2) {
 800ac5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d106      	bne.n	800ac72 <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
						run_nodetect = 1;
 800ac64:	2301      	movs	r3, #1
 800ac66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						nodetect_index = i;
 800ac6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ac6e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		for (i = 0; i < pR->active_results; i++) {
 800ac72:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ac76:	3301      	adds	r3, #1
 800ac78:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ac7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac7e:	7c9b      	ldrb	r3, [r3, #18]
 800ac80:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d3cb      	bcc.n	800ac20 <VL53LX_dynamic_xtalk_correction_corrector+0x14c>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800ac88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	d102      	bne.n	800ac96 <VL53LX_dynamic_xtalk_correction_corrector+0x1c2>

			run_nodetect = 0;
 800ac90:	2300      	movs	r3, #0
 800ac92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 800ac96:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
		amr =
 800ac9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac9c:	214c      	movs	r1, #76	; 0x4c
 800ac9e:	fb01 f303 	mul.w	r3, r1, r3
 800aca2:	4413      	add	r3, r2
 800aca4:	3348      	adds	r3, #72	; 0x48
 800aca6:	881b      	ldrh	r3, [r3, #0]
 800aca8:	827b      	strh	r3, [r7, #18]

		if (run_nodetect == 1) {
 800acaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d148      	bne.n	800ad44 <VL53LX_dynamic_xtalk_correction_corrector+0x270>




			utemp64 = 1000 * ((uint64_t)amr);
 800acb2:	8a78      	ldrh	r0, [r7, #18]
 800acb4:	f04f 0100 	mov.w	r1, #0
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	f04f 0400 	mov.w	r4, #0
 800acc0:	f04f 0500 	mov.w	r5, #0
 800acc4:	015d      	lsls	r5, r3, #5
 800acc6:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800acca:	0154      	lsls	r4, r2, #5
 800accc:	4622      	mov	r2, r4
 800acce:	462b      	mov	r3, r5
 800acd0:	1a12      	subs	r2, r2, r0
 800acd2:	eb63 0301 	sbc.w	r3, r3, r1
 800acd6:	f04f 0400 	mov.w	r4, #0
 800acda:	f04f 0500 	mov.w	r5, #0
 800acde:	009d      	lsls	r5, r3, #2
 800ace0:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800ace4:	0094      	lsls	r4, r2, #2
 800ace6:	4622      	mov	r2, r4
 800ace8:	462b      	mov	r3, r5
 800acea:	1812      	adds	r2, r2, r0
 800acec:	eb41 0303 	adc.w	r3, r1, r3
 800acf0:	f04f 0000 	mov.w	r0, #0
 800acf4:	f04f 0100 	mov.w	r1, #0
 800acf8:	00d9      	lsls	r1, r3, #3
 800acfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800acfe:	00d0      	lsls	r0, r2, #3
 800ad00:	4602      	mov	r2, r0
 800ad02:	460b      	mov	r3, r1
 800ad04:	e9c7 2308 	strd	r2, r3, [r7, #32]


			utemp64 = utemp64 << 9;
 800ad08:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ad0c:	f04f 0200 	mov.w	r2, #0
 800ad10:	f04f 0300 	mov.w	r3, #0
 800ad14:	024b      	lsls	r3, r1, #9
 800ad16:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800ad1a:	0242      	lsls	r2, r0, #9
 800ad1c:	e9c7 2308 	strd	r2, r3, [r7, #32]


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800ad20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad24:	461a      	mov	r2, r3
 800ad26:	f04f 0300 	mov.w	r3, #0
 800ad2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ad2e:	4299      	cmp	r1, r3
 800ad30:	bf08      	it	eq
 800ad32:	4290      	cmpeq	r0, r2
 800ad34:	d203      	bcs.n	800ad3e <VL53LX_dynamic_xtalk_correction_corrector+0x26a>
				run_nodetect = 1;
 800ad36:	2301      	movs	r3, #1
 800ad38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ad3c:	e002      	b.n	800ad44 <VL53LX_dynamic_xtalk_correction_corrector+0x270>
			else
				run_nodetect = 0;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		}
	}


	if (run_smudge_detection) {
 800ad44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f000 8101 	beq.w	800af50 <VL53LX_dynamic_xtalk_correction_corrector+0x47c>

		pint->nodetect_counter = 0;
 800ad4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad50:	2200      	movs	r2, #0
 800ad52:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7ff fbe8 	bl	800a52a <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800ad5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad5c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800ad60:	61fb      	str	r3, [r7, #28]
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	60fb      	str	r3, [r7, #12]
		current_xtalk = ((uint32_t)cco) << 2;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	61bb      	str	r3, [r7, #24]


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800ad6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad70:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	617b      	str	r3, [r7, #20]


		itemp32 = xtalk_offset_in - current_xtalk +
 800ad76:	69fa      	ldr	r2, [r7, #28]
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	1ad2      	subs	r2, r2, r3
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	4413      	add	r3, r2
 800ad80:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800ad82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	da02      	bge.n	800ad8e <VL53LX_dynamic_xtalk_correction_corrector+0x2ba>
			itemp32 = itemp32 * (-1);
 800ad88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad8a:	425b      	negs	r3, r3
 800ad8c:	65bb      	str	r3, [r7, #88]	; 0x58


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800ad8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	461a      	mov	r2, r3
 800ad94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ad96:	4293      	cmp	r3, r2
 800ad98:	dd0c      	ble.n	800adb4 <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800ad9a:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted)) {
 800ad9c:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800ad9e:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	da03      	bge.n	800adae <VL53LX_dynamic_xtalk_correction_corrector+0x2da>
				pout->single_xtalk_delta_flag = 1;
 800ada6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada8:	2201      	movs	r2, #1
 800adaa:	709a      	strb	r2, [r3, #2]
 800adac:	e002      	b.n	800adb4 <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800adae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb0:	2202      	movs	r2, #2
 800adb2:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800adb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adbc:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800adbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d906      	bls.n	800add8 <VL53LX_dynamic_xtalk_correction_corrector+0x304>
			pout->sample_limit_exceeded_flag = 1;
 800adca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adcc:	2201      	movs	r2, #1
 800adce:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800add0:	2302      	movs	r3, #2
 800add2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800add6:	e00d      	b.n	800adf4 <VL53LX_dynamic_xtalk_correction_corrector+0x320>
		} else {
			pint->accumulator = pint->accumulator +
 800add8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adda:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	461a      	mov	r2, r3
 800ade2:	f04f 0300 	mov.w	r3, #0
 800ade6:	eb10 0802 	adds.w	r8, r0, r2
 800adea:	eb41 0903 	adc.w	r9, r1, r3
 800adee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adf0:	e9c3 8902 	strd	r8, r9, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800adf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d202      	bcs.n	800ae06 <VL53LX_dynamic_xtalk_correction_corrector+0x332>
			continue_processing = CONT_NEXT_LOOP;
 800ae00:	2301      	movs	r3, #1
 800ae02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800ae06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae08:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ae0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	461a      	mov	r2, r3
 800ae12:	f04f 0300 	mov.w	r3, #0
 800ae16:	f7f5 fa83 	bl	8000320 <__aeabi_uldivmod>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	460b      	mov	r3, r1
		xtalk_offset_out =
 800ae1e:	4613      	mov	r3, r2
 800ae20:	653b      	str	r3, [r7, #80]	; 0x50
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800ae22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	1ad2      	subs	r2, r2, r3
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800ae2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	da02      	bge.n	800ae3a <VL53LX_dynamic_xtalk_correction_corrector+0x366>
			itemp32 = itemp32 * (-1);
 800ae34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae36:	425b      	negs	r3, r3
 800ae38:	65bb      	str	r3, [r7, #88]	; 0x58

		if (continue_processing == CONT_CONTINUE &&
 800ae3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d112      	bne.n	800ae68 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800ae42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae44:	69db      	ldr	r3, [r3, #28]
 800ae46:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800ae48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	db0c      	blt.n	800ae68 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800ae4e:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted))
 800ae50:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800ae52:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800ae54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae56:	429a      	cmp	r2, r3
 800ae58:	da03      	bge.n	800ae62 <VL53LX_dynamic_xtalk_correction_corrector+0x38e>
				pout->averaged_xtalk_delta_flag = 1;
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	70da      	strb	r2, [r3, #3]
 800ae60:	e002      	b.n	800ae68 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800ae62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae64:	2202      	movs	r2, #2
 800ae66:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800ae68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d108      	bne.n	800ae82 <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800ae70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae72:	69db      	ldr	r3, [r3, #28]
 800ae74:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800ae76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	da02      	bge.n	800ae82 <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			)

			continue_processing = CONT_RESET;
 800ae7c:	2302      	movs	r3, #2
 800ae7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



		pout->smudge_corr_clipped = 0;
 800ae82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae84:	2200      	movs	r2, #0
 800ae86:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800ae88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d111      	bne.n	800aeb4 <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800ae90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae92:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00d      	beq.n	800aeb4 <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800ae98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae9a:	6a1b      	ldr	r3, [r3, #32]
 800ae9c:	7afa      	ldrb	r2, [r7, #11]
 800ae9e:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800aea2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d905      	bls.n	800aeb4 <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
				pout->smudge_corr_clipped = 1;
 800aea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeaa:	2201      	movs	r2, #1
 800aeac:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800aeae:	2302      	movs	r3, #2
 800aeb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800aeb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeb6:	7c1b      	ldrb	r3, [r3, #16]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d007      	beq.n	800aecc <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800aebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aebe:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800aec0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d902      	bls.n	800aecc <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			xtalk_offset_out =
 800aec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800aecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aece:	7c1b      	ldrb	r3, [r3, #16]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d107      	bne.n	800aee4 <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800aed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed6:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800aed8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d202      	bcs.n	800aee4 <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			xtalk_offset_out =
 800aede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800aee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aee6:	089b      	lsrs	r3, r3, #2
 800aee8:	653b      	str	r3, [r7, #80]	; 0x50
		if (xtalk_offset_out > 0x3FFFF)
 800aeea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aeec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aef0:	d301      	bcc.n	800aef6 <VL53LX_dynamic_xtalk_correction_corrector+0x422>
			xtalk_offset_out = 0x3FFFF;
 800aef2:	4b3f      	ldr	r3, [pc, #252]	; (800aff0 <VL53LX_dynamic_xtalk_correction_corrector+0x51c>)
 800aef4:	653b      	str	r3, [r7, #80]	; 0x50


		if (continue_processing == CONT_CONTINUE) {
 800aef6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d10d      	bne.n	800af1a <VL53LX_dynamic_xtalk_correction_corrector+0x446>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800aefe:	2300      	movs	r3, #0
 800af00:	9301      	str	r3, [sp, #4]
 800af02:	2301      	movs	r3, #1
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7ff fc33 	bl	800a778 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800af12:	2302      	movs	r3, #2
 800af14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800af18:	e009      	b.n	800af2e <VL53LX_dynamic_xtalk_correction_corrector+0x45a>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800af1a:	2301      	movs	r3, #1
 800af1c:	9301      	str	r3, [sp, #4]
 800af1e:	2301      	movs	r3, #1
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f7ff fc25 	bl	800a778 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800af2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af32:	2b02      	cmp	r3, #2
 800af34:	d10c      	bne.n	800af50 <VL53LX_dynamic_xtalk_correction_corrector+0x47c>
			pint->accumulator = 0;
 800af36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af38:	f04f 0200 	mov.w	r2, #0
 800af3c:	f04f 0300 	mov.w	r3, #0
 800af40:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800af44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af46:	2200      	movs	r2, #0
 800af48:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800af4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af4c:	2200      	movs	r2, #0
 800af4e:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800af50:	2300      	movs	r3, #0
 800af52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (run_nodetect == 1) {
 800af56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d140      	bne.n	800afe0 <VL53LX_dynamic_xtalk_correction_corrector+0x50c>

		pint->nodetect_counter += 1;
 800af5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af60:	691b      	ldr	r3, [r3, #16]
 800af62:	1c5a      	adds	r2, r3, #1
 800af64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af66:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800af68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af6a:	691a      	ldr	r2, [r3, #16]
 800af6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af70:	429a      	cmp	r2, r3
 800af72:	d202      	bcs.n	800af7a <VL53LX_dynamic_xtalk_correction_corrector+0x4a6>
			continue_processing = CONT_NEXT_LOOP;
 800af74:	2301      	movs	r3, #1
 800af76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800af7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af7e:	653b      	str	r3, [r7, #80]	; 0x50

		if (continue_processing == CONT_CONTINUE) {
 800af80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af84:	2b00      	cmp	r3, #0
 800af86:	d110      	bne.n	800afaa <VL53LX_dynamic_xtalk_correction_corrector+0x4d6>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800af88:	2300      	movs	r3, #0
 800af8a:	9301      	str	r3, [sp, #4]
 800af8c:	2300      	movs	r3, #0
 800af8e:	9300      	str	r3, [sp, #0]
 800af90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f7ff fbee 	bl	800a778 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800af9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9e:	2202      	movs	r2, #2
 800afa0:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800afa2:	2302      	movs	r3, #2
 800afa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800afa8:	e009      	b.n	800afbe <VL53LX_dynamic_xtalk_correction_corrector+0x4ea>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800afaa:	2301      	movs	r3, #1
 800afac:	9301      	str	r3, [sp, #4]
 800afae:	2300      	movs	r3, #0
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f7ff fbdd 	bl	800a778 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800afbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afc2:	2b02      	cmp	r3, #2
 800afc4:	d10c      	bne.n	800afe0 <VL53LX_dynamic_xtalk_correction_corrector+0x50c>
			pint->accumulator = 0;
 800afc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800afc8:	f04f 0200 	mov.w	r2, #0
 800afcc:	f04f 0300 	mov.w	r3, #0
 800afd0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800afd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afd6:	2200      	movs	r2, #0
 800afd8:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800afda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afdc:	2200      	movs	r2, #0
 800afde:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800afe0:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3760      	adds	r7, #96	; 0x60
 800afe8:	46bd      	mov	sp, r7
 800afea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800afee:	bf00      	nop
 800aff0:	0003ffff 	.word	0x0003ffff

0800aff4 <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800affc:	2300      	movs	r3, #0
 800affe:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	3318      	adds	r3, #24
 800b004:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800b00c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b014:	3314      	adds	r3, #20
 800b016:	2201      	movs	r2, #1
 800b018:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b020:	3315      	adds	r3, #21
 800b022:	2201      	movs	r2, #1
 800b024:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b02c:	3316      	adds	r3, #22
 800b02e:	2200      	movs	r2, #0
 800b030:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b038:	3318      	adds	r3, #24
 800b03a:	2200      	movs	r2, #0
 800b03c:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b044:	331c      	adds	r3, #28
 800b046:	2264      	movs	r2, #100	; 0x64
 800b048:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b050:	2200      	movs	r2, #0
 800b052:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b05a:	3304      	adds	r3, #4
 800b05c:	2200      	movs	r2, #0
 800b05e:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b066:	3308      	adds	r3, #8
 800b068:	22c8      	movs	r2, #200	; 0xc8
 800b06a:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b072:	330c      	adds	r3, #12
 800b074:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b078:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b080:	3310      	adds	r3, #16
 800b082:	f44f 729a 	mov.w	r2, #308	; 0x134
 800b086:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b08e:	3314      	adds	r3, #20
 800b090:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b094:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b09c:	3318      	adds	r3, #24
 800b09e:	2280      	movs	r2, #128	; 0x80
 800b0a0:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b0a8:	331c      	adds	r3, #28
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	701a      	strb	r2, [r3, #0]
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b0b4:	331e      	adds	r3, #30
 800b0b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0ba:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b0c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0c6:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b0ce:	3302      	adds	r3, #2
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b0da:	3304      	adds	r3, #4
 800b0dc:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
 800b0e0:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b0e8:	3308      	adds	r3, #8
 800b0ea:	2228      	movs	r2, #40	; 0x28
 800b0ec:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b0f4:	330c      	adds	r3, #12
 800b0f6:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800b0fa:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b102:	3310      	adds	r3, #16
 800b104:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b108:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b110:	3314      	adds	r3, #20
 800b112:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b116:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b11e:	3318      	adds	r3, #24
 800b120:	2200      	movs	r2, #0
 800b122:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.required_samples = 0;
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b12a:	331c      	adds	r3, #28
 800b12c:	2200      	movs	r2, #0
 800b12e:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.accumulator = 0;
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	f503 519f 	add.w	r1, r3, #5088	; 0x13e0
 800b136:	f04f 0200 	mov.w	r2, #0
 800b13a:	f04f 0300 	mov.w	r3, #0
 800b13e:	e9c1 2300 	strd	r2, r3, [r1]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b148:	3308      	adds	r3, #8
 800b14a:	2200      	movs	r2, #0
 800b14c:	601a      	str	r2, [r3, #0]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f000 f806 	bl	800b160 <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800b154:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3718      	adds	r7, #24
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b168:	2300      	movs	r3, #0
 800b16a:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b172:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	2200      	movs	r2, #0
 800b178:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	2200      	movs	r2, #0
 800b17e:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	2200      	movs	r2, #0
 800b184:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	2200      	movs	r2, #0
 800b18a:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	2200      	movs	r2, #0
 800b190:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	2200      	movs	r2, #0
 800b196:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	2200      	movs	r2, #0
 800b19c:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800b1b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3714      	adds	r7, #20
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	3318      	adds	r3, #24
 800b1d0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800b1d8:	331c      	adds	r3, #28
 800b1da:	2200      	movs	r2, #0
 800b1dc:	601a      	str	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	801a      	strh	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800b1ee:	3302      	adds	r3, #2
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	801a      	strh	r2, [r3, #0]
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800b1fa:	3304      	adds	r3, #4
 800b1fc:	2218      	movs	r2, #24
 800b1fe:	2100      	movs	r1, #0
 800b200:	4618      	mov	r0, r3
 800b202:	f009 f8c1 	bl	8014388 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800b206:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b212:	b480      	push	{r7}
 800b214:	b085      	sub	sp, #20
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b21a:	2300      	movs	r3, #0
 800b21c:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	3318      	adds	r3, #24
 800b222:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b22a:	3310      	adds	r3, #16
 800b22c:	2203      	movs	r2, #3
 800b22e:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b236:	3311      	adds	r3, #17
 800b238:	2200      	movs	r2, #0
 800b23a:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b242:	3312      	adds	r3, #18
 800b244:	2200      	movs	r2, #0
 800b246:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b24e:	3313      	adds	r3, #19
 800b250:	2200      	movs	r2, #0
 800b252:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b25a:	3314      	adds	r3, #20
 800b25c:	2200      	movs	r2, #0
 800b25e:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b266:	3315      	adds	r3, #21
 800b268:	2200      	movs	r2, #0
 800b26a:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b272:	3316      	adds	r3, #22
 800b274:	2200      	movs	r2, #0
 800b276:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b27e:	3318      	adds	r3, #24
 800b280:	2200      	movs	r2, #0
 800b282:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b28a:	331c      	adds	r3, #28
 800b28c:	2200      	movs	r2, #0
 800b28e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800b290:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b294:	4618      	mov	r0, r3
 800b296:	3714      	adds	r7, #20
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <VL53LX_low_power_auto_data_stop_range>:

VL53LX_Error VL53LX_low_power_auto_data_stop_range(
	VL53LX_DEV                          Dev
	)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	3318      	adds	r3, #24
 800b2b0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b2b8:	3312      	adds	r3, #18
 800b2ba:	22ff      	movs	r2, #255	; 0xff
 800b2bc:	701a      	strb	r2, [r3, #0]

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b2c4:	3316      	adds	r3, #22
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b2d0:	3318      	adds	r3, #24
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b2dc:	331c      	adds	r3, #28
 800b2de:	2200      	movs	r2, #0
 800b2e0:	801a      	strh	r2, [r3, #0]


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b2e8:	3314      	adds	r3, #20
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d007      	beq.n	800b300 <VL53LX_low_power_auto_data_stop_range+0x60>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b2f6:	3314      	adds	r3, #20
 800b2f8:	781a      	ldrb	r2, [r3, #0]
		pdev->stat_nvm.vhv_config__init =
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b306:	3315      	adds	r3, #21
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d007      	beq.n	800b31e <VL53LX_low_power_auto_data_stop_range+0x7e>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b314:	3315      	adds	r3, #21
 800b316:	781a      	ldrb	r2, [r3, #0]
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	2200      	movs	r2, #0
 800b322:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	LOG_FUNCTION_END(status);

	return status;
 800b326:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3714      	adds	r7, #20
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800b336:	b480      	push	{r7}
 800b338:	b085      	sub	sp, #20
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	3318      	adds	r3, #24
 800b342:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b344:	2300      	movs	r3, #0
 800b346:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f893 22e3 	ldrb.w	r2, [r3, #739]	; 0x2e3
	pdev->low_power_auto_data.saved_vhv_init =
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b354:	3314      	adds	r3, #20
 800b356:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
	pdev->low_power_auto_data.saved_vhv_timeout =
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b364:	3315      	adds	r3, #21
 800b366:	701a      	strb	r2, [r3, #0]


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f893 32e3 	ldrb.w	r3, [r3, #739]	; 0x2e3
 800b36e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b372:	b2da      	uxtb	r2, r3
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b380:	f003 0303 	and.w	r3, r3, #3
 800b384:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b38c:	3310      	adds	r3, #16
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b394:	4413      	add	r3, r2
 800b396:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 800b3ac:	331e      	adds	r3, #30
 800b3ae:	781a      	ldrb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result =
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b3b6:	3316      	adds	r3, #22
 800b3b8:	701a      	strb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b3c0:	3316      	adds	r3, #22
 800b3c2:	781a      	ldrb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

	LOG_FUNCTION_END(status);

	return status;
 800b3ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3714      	adds	r7, #20
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr

0800b3da <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800b3da:	b480      	push	{r7}
 800b3dc:	b087      	sub	sp, #28
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	3318      	adds	r3, #24
 800b3e6:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f203 3366 	addw	r3, r3, #870	; 0x366
 800b3ee:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	8a1b      	ldrh	r3, [r3, #16]
 800b3f8:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	891b      	ldrh	r3, [r3, #8]
 800b3fe:	4413      	add	r3, r2
	utemp32a =
 800b400:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b408:	d302      	bcc.n	800b410 <VL53LX_low_power_auto_update_DSS+0x36>
		utemp32a = 0xFFFF;
 800b40a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b40e:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	041b      	lsls	r3, r3, #16
 800b414:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d102      	bne.n	800b426 <VL53LX_low_power_auto_update_DSS+0x4c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b420:	23f1      	movs	r3, #241	; 0xf1
 800b422:	75fb      	strb	r3, [r7, #23]
 800b424:	e03f      	b.n	800b4a6 <VL53LX_low_power_auto_update_DSS+0xcc>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800b42c:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	fbb3 f3f2 	udiv	r3, r3, r2
 800b434:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b43c:	3318      	adds	r3, #24
 800b43e:	693a      	ldr	r2, [r7, #16]
 800b440:	601a      	str	r2, [r3, #0]
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800b448:	041b      	lsls	r3, r3, #16
 800b44a:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b452:	3318      	adds	r3, #24
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d102      	bne.n	800b460 <VL53LX_low_power_auto_update_DSS+0x86>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b45a:	23f1      	movs	r3, #241	; 0xf1
 800b45c:	75fb      	strb	r3, [r7, #23]
 800b45e:	e022      	b.n	800b4a6 <VL53LX_low_power_auto_update_DSS+0xcc>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b466:	3318      	adds	r3, #24
 800b468:	681b      	ldr	r3, [r3, #0]
			utemp32a = utemp32a /
 800b46a:	693a      	ldr	r2, [r7, #16]
 800b46c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b470:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b478:	d302      	bcc.n	800b480 <VL53LX_low_power_auto_update_DSS+0xa6>
				utemp32a = 0xFFFF;
 800b47a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b47e:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b48a:	331c      	adds	r3, #28
 800b48c:	801a      	strh	r2, [r3, #0]


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b494:	331c      	adds	r3, #28
 800b496:	881a      	ldrh	r2, [r3, #0]
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
			pdev->gen_cfg.dss_config__roi_mode_control =
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2202      	movs	r2, #2
 800b4a2:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800b4a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b4aa:	f113 0f0f 	cmn.w	r3, #15
 800b4ae:	d114      	bne.n	800b4da <VL53LX_low_power_auto_update_DSS+0x100>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b4b6:	331c      	adds	r3, #28
 800b4b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b4bc:	801a      	strh	r2, [r3, #0]


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b4c4:	331c      	adds	r3, #28
 800b4c6:	881a      	ldrh	r2, [r3, #0]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
		pdev->gen_cfg.dss_config__roi_mode_control =
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2202      	movs	r2, #2
 800b4d2:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b4da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	371c      	adds	r7, #28
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr

0800b4ea <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800b4ea:	b480      	push	{r7}
 800b4ec:	b087      	sub	sp, #28
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	3318      	adds	r3, #24
 800b4f8:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800b508:	2b07      	cmp	r3, #7
 800b50a:	bf0c      	ite	eq
 800b50c:	2301      	moveq	r3, #1
 800b50e:	2300      	movne	r3, #0
 800b510:	b2db      	uxtb	r3, r3
 800b512:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b514:	2300      	movs	r3, #0
 800b516:	75fb      	strb	r3, [r7, #23]
 800b518:	e019      	b.n	800b54e <VL53LX_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800b51a:	7df9      	ldrb	r1, [r7, #23]
 800b51c:	7bbb      	ldrb	r3, [r7, #14]
 800b51e:	6938      	ldr	r0, [r7, #16]
 800b520:	461a      	mov	r2, r3
 800b522:	0052      	lsls	r2, r2, #1
 800b524:	441a      	add	r2, r3
 800b526:	0153      	lsls	r3, r2, #5
 800b528:	461a      	mov	r2, r3
 800b52a:	460b      	mov	r3, r1
 800b52c:	005b      	lsls	r3, r3, #1
 800b52e:	440b      	add	r3, r1
 800b530:	019b      	lsls	r3, r3, #6
 800b532:	4413      	add	r3, r2
 800b534:	4403      	add	r3, r0
 800b536:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800b53a:	330c      	adds	r3, #12
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	dd02      	ble.n	800b548 <VL53LX_compute_histo_merge_nb+0x5e>
			sum++;
 800b542:	7dbb      	ldrb	r3, [r7, #22]
 800b544:	3301      	adds	r3, #1
 800b546:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b548:	7dfb      	ldrb	r3, [r7, #23]
 800b54a:	3301      	adds	r3, #1
 800b54c:	75fb      	strb	r3, [r7, #23]
 800b54e:	7dfb      	ldrb	r3, [r7, #23]
 800b550:	2b05      	cmp	r3, #5
 800b552:	d9e2      	bls.n	800b51a <VL53LX_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	7dba      	ldrb	r2, [r7, #22]
 800b558:	701a      	strb	r2, [r3, #0]

	return status;
 800b55a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	371c      	adds	r7, #28
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr

0800b56a <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800b56a:	b480      	push	{r7}
 800b56c:	b085      	sub	sp, #20
 800b56e:	af00      	add	r7, sp, #0
 800b570:	4603      	mov	r3, r0
 800b572:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800b574:	2300      	movs	r3, #0
 800b576:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800b578:	88fb      	ldrh	r3, [r7, #6]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d005      	beq.n	800b58a <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800b57e:	88fb      	ldrh	r3, [r7, #6]
 800b580:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b584:	fb92 f3f3 	sdiv	r3, r2, r3
 800b588:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800b58a:	68fb      	ldr	r3, [r7, #12]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3714      	adds	r7, #20
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800b598:	b480      	push	{r7}
 800b59a:	b089      	sub	sp, #36	; 0x24
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
 800b5a4:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800b5a6:	f04f 0200 	mov.w	r2, #0
 800b5aa:	f04f 0300 	mov.w	r3, #0
 800b5ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	fb02 f303 	mul.w	r3, r2, r3
 800b5be:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	0b1b      	lsrs	r3, r3, #12
 800b5c4:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	f04f 0300 	mov.w	r3, #0
 800b5ce:	e9c7 2306 	strd	r2, r3, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	68ba      	ldr	r2, [r7, #8]
 800b5d6:	fb02 f303 	mul.w	r3, r2, r3
 800b5da:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	091b      	lsrs	r3, r3, #4
 800b5e0:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	f04f 0300 	mov.w	r3, #0
 800b5ea:	69f9      	ldr	r1, [r7, #28]
 800b5ec:	fb02 f001 	mul.w	r0, r2, r1
 800b5f0:	69b9      	ldr	r1, [r7, #24]
 800b5f2:	fb03 f101 	mul.w	r1, r3, r1
 800b5f6:	4401      	add	r1, r0
 800b5f8:	69b8      	ldr	r0, [r7, #24]
 800b5fa:	fba0 2302 	umull	r2, r3, r0, r2
 800b5fe:	4419      	add	r1, r3
 800b600:	460b      	mov	r3, r1
 800b602:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800b606:	e9c7 2306 	strd	r2, r3, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800b60a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b60e:	f04f 0200 	mov.w	r2, #0
 800b612:	f04f 0300 	mov.w	r3, #0
 800b616:	0b02      	lsrs	r2, r0, #12
 800b618:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b61c:	0b0b      	lsrs	r3, r1, #12
 800b61e:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800b622:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b626:	2b01      	cmp	r3, #1
 800b628:	bf08      	it	eq
 800b62a:	2a00      	cmpeq	r2, #0
 800b62c:	d305      	bcc.n	800b63a <VL53LX_duration_maths+0xa2>
		tmp_long_int = 0xFFFFFFFF;
 800b62e:	f04f 32ff 	mov.w	r2, #4294967295
 800b632:	f04f 0300 	mov.w	r3, #0
 800b636:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	617b      	str	r3, [r7, #20]

	return duration_us;
 800b63e:	697b      	ldr	r3, [r7, #20]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3724      	adds	r7, #36	; 0x24
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800b64c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b650:	b08e      	sub	sp, #56	; 0x38
 800b652:	af00      	add	r7, sp, #0
 800b654:	60f8      	str	r0, [r7, #12]
 800b656:	460b      	mov	r3, r1
 800b658:	607a      	str	r2, [r7, #4]
 800b65a:	817b      	strh	r3, [r7, #10]
	uint64_t total_hist_counts  = 0;
 800b65c:	f04f 0200 	mov.w	r2, #0
 800b660:	f04f 0300 	mov.w	r3, #0
 800b664:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint64_t xtalk_per_spad     = 0;
 800b668:	f04f 0200 	mov.w	r2, #0
 800b66c:	f04f 0300 	mov.w	r3, #0
 800b670:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint32_t rate_per_spad_kcps = 0;
 800b674:	2300      	movs	r3, #0
 800b676:	627b      	str	r3, [r7, #36]	; 0x24





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	4618      	mov	r0, r3
 800b67c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	f04f 0400 	mov.w	r4, #0
 800b688:	f04f 0500 	mov.w	r5, #0
 800b68c:	015d      	lsls	r5, r3, #5
 800b68e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800b692:	0154      	lsls	r4, r2, #5
 800b694:	4622      	mov	r2, r4
 800b696:	462b      	mov	r3, r5
 800b698:	1a12      	subs	r2, r2, r0
 800b69a:	eb63 0301 	sbc.w	r3, r3, r1
 800b69e:	f04f 0400 	mov.w	r4, #0
 800b6a2:	f04f 0500 	mov.w	r5, #0
 800b6a6:	009d      	lsls	r5, r3, #2
 800b6a8:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800b6ac:	0094      	lsls	r4, r2, #2
 800b6ae:	4622      	mov	r2, r4
 800b6b0:	462b      	mov	r3, r5
 800b6b2:	1812      	adds	r2, r2, r0
 800b6b4:	eb41 0303 	adc.w	r3, r1, r3
 800b6b8:	f04f 0000 	mov.w	r0, #0
 800b6bc:	f04f 0100 	mov.w	r1, #0
 800b6c0:	02d9      	lsls	r1, r3, #11
 800b6c2:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800b6c6:	02d0      	lsls	r0, r2, #11
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
			* 1000 * 256);

	if (num_spads != 0)
 800b6d0:	897b      	ldrh	r3, [r7, #10]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00a      	beq.n	800b6ec <VL53LX_events_per_spad_maths+0xa0>
		total_hist_counts = do_division_u(
 800b6d6:	897a      	ldrh	r2, [r7, #10]
 800b6d8:	f04f 0300 	mov.w	r3, #0
 800b6dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b6e0:	f7f4 fe1e 	bl	8000320 <__aeabi_uldivmod>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d021      	beq.n	800b736 <VL53LX_events_per_spad_maths+0xea>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b6f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800b6f6:	f04f 0200 	mov.w	r2, #0
 800b6fa:	f04f 0300 	mov.w	r3, #0
 800b6fe:	02cb      	lsls	r3, r1, #11
 800b700:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b704:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800b706:	6879      	ldr	r1, [r7, #4]
 800b708:	0849      	lsrs	r1, r1, #1
 800b70a:	4608      	mov	r0, r1
 800b70c:	f04f 0100 	mov.w	r1, #0
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b710:	eb12 0800 	adds.w	r8, r2, r0
 800b714:	eb43 0901 	adc.w	r9, r3, r1
 800b718:	e9c7 8904 	strd	r8, r9, [r7, #16]

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	461a      	mov	r2, r3
 800b720:	f04f 0300 	mov.w	r3, #0
 800b724:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b728:	f7f4 fdfa 	bl	8000320 <__aeabi_uldivmod>
 800b72c:	4602      	mov	r2, r0
 800b72e:	460b      	mov	r3, r1
 800b730:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800b734:	e00b      	b.n	800b74e <VL53LX_events_per_spad_maths+0x102>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800b736:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800b73a:	f04f 0200 	mov.w	r2, #0
 800b73e:	f04f 0300 	mov.w	r3, #0
 800b742:	02cb      	lsls	r3, r1, #11
 800b744:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b748:	02c2      	lsls	r2, r0, #11
 800b74a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800b74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b750:	627b      	str	r3, [r7, #36]	; 0x24

	return rate_per_spad_kcps;
 800b752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b754:	4618      	mov	r0, r3
 800b756:	3738      	adds	r7, #56	; 0x38
 800b758:	46bd      	mov	sp, r7
 800b75a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800b75e <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800b75e:	b480      	push	{r7}
 800b760:	b085      	sub	sp, #20
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800b766:	2300      	movs	r3, #0
 800b768:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b76a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b76e:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800b770:	e002      	b.n	800b778 <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	089b      	lsrs	r3, r3, #2
 800b776:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b778:	68ba      	ldr	r2, [r7, #8]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d8f8      	bhi.n	800b772 <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800b780:	e017      	b.n	800b7b2 <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	4413      	add	r3, r2
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d30b      	bcc.n	800b7a6 <VL53LX_isqrt+0x48>
			num -= res + bit;
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	4413      	add	r3, r2
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	1ad3      	subs	r3, r2, r3
 800b798:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	085b      	lsrs	r3, r3, #1
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	60fb      	str	r3, [r7, #12]
 800b7a4:	e002      	b.n	800b7ac <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	085b      	lsrs	r3, r3, #1
 800b7aa:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	089b      	lsrs	r3, r3, #2
 800b7b0:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1e4      	bne.n	800b782 <VL53LX_isqrt+0x24>
	}

	return res;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3714      	adds	r7, #20
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr

0800b7c6 <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b084      	sub	sp, #16
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f000 fa97 	bl	800bd10 <VL53LX_decode_vcsel_period>
 800b7e2:	4603      	mov	r3, r0
	period = 2048 *
 800b7e4:	02db      	lsls	r3, r3, #11
 800b7e6:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b800:	02db      	lsls	r3, r3, #11
 800b802:	68fa      	ldr	r2, [r7, #12]
 800b804:	4413      	add	r3, r2
 800b806:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b80e:	02db      	lsls	r3, r3, #11
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d009      	beq.n	800b830 <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	fbb3 f2f2 	udiv	r2, r3, r2
 800b824:	68b9      	ldr	r1, [r7, #8]
 800b826:	fb01 f202 	mul.w	r2, r1, r2
 800b82a:	1a9b      	subs	r3, r3, r2
 800b82c:	60fb      	str	r3, [r7, #12]
 800b82e:	e001      	b.n	800b834 <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800b830:	2300      	movs	r3, #0
 800b832:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	b29a      	uxth	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800b83e:	bf00      	nop
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b846:	b580      	push	{r7, lr}
 800b848:	b084      	sub	sp, #16
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
 800b84e:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800b850:	2300      	movs	r3, #0
 800b852:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800b854:	2300      	movs	r3, #0
 800b856:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800b858:	6838      	ldr	r0, [r7, #0]
 800b85a:	f000 fb82 	bl	800bf62 <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b864:	4618      	mov	r0, r3
 800b866:	f7ff ff7a 	bl	800b75e <VL53LX_isqrt>
 800b86a:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800b86c:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	fb02 f303 	mul.w	r3, r2, r3
 800b876:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	3307      	adds	r3, #7
 800b87c:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	111b      	asrs	r3, r3, #4
 800b882:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	4413      	add	r3, r2
 800b88e:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	2200      	movs	r2, #0
 800b894:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	73fb      	strb	r3, [r7, #15]
 800b8a4:	e01e      	b.n	800b8e4 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800b8a6:	7bfa      	ldrb	r2, [r7, #15]
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	3206      	adds	r2, #6
 800b8ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8b0:	68ba      	ldr	r2, [r7, #8]
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	dd13      	ble.n	800b8de <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800b8bc:	7bf9      	ldrb	r1, [r7, #15]
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	3106      	adds	r1, #6
 800b8c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b8c6:	441a      	add	r2, r3
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	b2da      	uxtb	r2, r3
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800b8de:	7bfb      	ldrb	r3, [r7, #15]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	73fb      	strb	r3, [r7, #15]
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	7a9b      	ldrb	r3, [r3, #10]
 800b8e8:	7bfa      	ldrb	r2, [r7, #15]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d3db      	bcc.n	800b8a6 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d01c      	beq.n	800b932 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53LX_p_028 =
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800b90a:	683a      	ldr	r2, [r7, #0]
 800b90c:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800b910:	0852      	lsrs	r2, r2, #1
 800b912:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800b914:	441a      	add	r2, r3
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800b922:	683a      	ldr	r2, [r7, #0]
 800b924:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53LX_p_028 /=
 800b928:	fb93 f2f2 	sdiv	r2, r3, r2
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800b932:	bf00      	nop
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b93a:	b480      	push	{r7}
 800b93c:	b085      	sub	sp, #20
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800b942:	2300      	movs	r3, #0
 800b944:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800b946:	2300      	movs	r3, #0
 800b948:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800b94a:	2300      	movs	r3, #0
 800b94c:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	7b1b      	ldrb	r3, [r3, #12]
 800b952:	f003 0307 	and.w	r3, r3, #7
 800b956:	2b07      	cmp	r3, #7
 800b958:	d13a      	bne.n	800b9d0 <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800b95a:	2300      	movs	r3, #0
 800b95c:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b95e:	2300      	movs	r3, #0
 800b960:	73bb      	strb	r3, [r7, #14]
 800b962:	e01f      	b.n	800b9a4 <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800b964:	7bbb      	ldrb	r3, [r7, #14]
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	4413      	add	r3, r2
 800b96a:	7b1b      	ldrb	r3, [r3, #12]
 800b96c:	f003 0307 	and.w	r3, r3, #7
 800b970:	2b07      	cmp	r3, #7
 800b972:	d014      	beq.n	800b99e <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800b974:	7bba      	ldrb	r2, [r7, #14]
 800b976:	7b7b      	ldrb	r3, [r7, #13]
 800b978:	6879      	ldr	r1, [r7, #4]
 800b97a:	440a      	add	r2, r1
 800b97c:	7b11      	ldrb	r1, [r2, #12]
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	4413      	add	r3, r2
 800b982:	460a      	mov	r2, r1
 800b984:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800b986:	7bba      	ldrb	r2, [r7, #14]
 800b988:	7b7b      	ldrb	r3, [r7, #13]
 800b98a:	6879      	ldr	r1, [r7, #4]
 800b98c:	440a      	add	r2, r1
 800b98e:	7c91      	ldrb	r1, [r2, #18]
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	4413      	add	r3, r2
 800b994:	460a      	mov	r2, r1
 800b996:	749a      	strb	r2, [r3, #18]
				i++;
 800b998:	7b7b      	ldrb	r3, [r7, #13]
 800b99a:	3301      	adds	r3, #1
 800b99c:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b99e:	7bbb      	ldrb	r3, [r7, #14]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	73bb      	strb	r3, [r7, #14]
 800b9a4:	7bbb      	ldrb	r3, [r7, #14]
 800b9a6:	2b05      	cmp	r3, #5
 800b9a8:	d9dc      	bls.n	800b964 <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b9aa:	7b7b      	ldrb	r3, [r7, #13]
 800b9ac:	73bb      	strb	r3, [r7, #14]
 800b9ae:	e00c      	b.n	800b9ca <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800b9b0:	7bbb      	ldrb	r3, [r7, #14]
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	2210      	movs	r2, #16
 800b9b8:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800b9ba:	7bbb      	ldrb	r3, [r7, #14]
 800b9bc:	687a      	ldr	r2, [r7, #4]
 800b9be:	4413      	add	r3, r2
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b9c4:	7bbb      	ldrb	r3, [r7, #14]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	73bb      	strb	r3, [r7, #14]
 800b9ca:	7bbb      	ldrb	r3, [r7, #14]
 800b9cc:	2b05      	cmp	r3, #5
 800b9ce:	d9ef      	bls.n	800b9b0 <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	7adb      	ldrb	r3, [r3, #11]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d023      	beq.n	800ba20 <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	7adb      	ldrb	r3, [r3, #11]
 800b9dc:	73fb      	strb	r3, [r7, #15]
 800b9de:	e00f      	b.n	800ba00 <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800b9e0:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800b9e2:	7bfb      	ldrb	r3, [r7, #15]
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	7ad2      	ldrb	r2, [r2, #11]
 800b9e8:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	3106      	adds	r1, #6
 800b9ee:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	3206      	adds	r2, #6
 800b9f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800b9fa:	7bfb      	ldrb	r3, [r7, #15]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	73fb      	strb	r3, [r7, #15]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800ba04:	7bfa      	ldrb	r2, [r7, #15]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d3ea      	bcc.n	800b9e0 <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800ba12:	1ad3      	subs	r3, r2, r3
 800ba14:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	72da      	strb	r2, [r3, #11]
	}
}
 800ba20:	bf00      	nop
 800ba22:	3714      	adds	r7, #20
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	4603      	mov	r3, r0
 800ba34:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800ba3e:	88fb      	ldrh	r3, [r7, #6]
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7ff fd92 	bl	800b56a <VL53LX_calc_pll_period_us>
 800ba46:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800ba4c:	f249 2257 	movw	r2, #37463	; 0x9257
 800ba50:	fb02 f303 	mul.w	r3, r2, r3
 800ba54:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ba5c:	0c1b      	lsrs	r3, r3, #16
 800ba5e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800ba60:	68bb      	ldr	r3, [r7, #8]
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3710      	adds	r7, #16
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800ba6a:	b480      	push	{r7}
 800ba6c:	b087      	sub	sp, #28
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800ba74:	2300      	movs	r3, #0
 800ba76:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800ba78:	2307      	movs	r3, #7
 800ba7a:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba86:	db03      	blt.n	800ba90 <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800ba88:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800ba8c:	617b      	str	r3, [r7, #20]
 800ba8e:	e004      	b.n	800ba9a <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	dd01      	ble.n	800ba9a <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800baa0:	dd02      	ble.n	800baa8 <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800baa2:	2303      	movs	r3, #3
 800baa4:	613b      	str	r3, [r7, #16]
 800baa6:	e001      	b.n	800baac <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800baa8:	2307      	movs	r3, #7
 800baaa:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d009      	beq.n	800bac6 <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800bab2:	697a      	ldr	r2, [r7, #20]
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	409a      	lsls	r2, r3
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	085b      	lsrs	r3, r3, #1
 800babc:	441a      	add	r2, r3
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bac4:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bacc:	dd02      	ble.n	800bad4 <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	011b      	lsls	r3, r3, #4
 800bad2:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bada:	d302      	bcc.n	800bae2 <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800badc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bae0:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800bae6:	89fb      	ldrh	r3, [r7, #14]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	371c      	adds	r7, #28
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b087      	sub	sp, #28
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	603b      	str	r3, [r7, #0]
 800bb00:	4613      	mov	r3, r2
 800bb02:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800bb04:	2300      	movs	r3, #0
 800bb06:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800bb0c:	88fb      	ldrh	r3, [r7, #6]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d010      	beq.n	800bb34 <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	021a      	lsls	r2, r3, #8
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	fa02 f303 	lsl.w	r3, r2, r3
 800bb1c:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800bb1e:	88fb      	ldrh	r3, [r7, #6]
 800bb20:	085b      	lsrs	r3, r3, #1
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800bb2a:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800bb2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb30:	617b      	str	r3, [r7, #20]
 800bb32:	e004      	b.n	800bb3e <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	fa02 f303 	lsl.w	r3, r2, r3
 800bb3c:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800bb3e:	697a      	ldr	r2, [r7, #20]
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d901      	bls.n	800bb4a <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800bb4e:	8a7b      	ldrh	r3, [r7, #18]
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	371c      	adds	r7, #28
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800bb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb5e:	b089      	sub	sp, #36	; 0x24
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	4606      	mov	r6, r0
 800bb64:	4608      	mov	r0, r1
 800bb66:	4611      	mov	r1, r2
 800bb68:	461a      	mov	r2, r3
 800bb6a:	4633      	mov	r3, r6
 800bb6c:	80fb      	strh	r3, [r7, #6]
 800bb6e:	4603      	mov	r3, r0
 800bb70:	80bb      	strh	r3, [r7, #4]
 800bb72:	460b      	mov	r3, r1
 800bb74:	807b      	strh	r3, [r7, #2]
 800bb76:	4613      	mov	r3, r2
 800bb78:	707b      	strb	r3, [r7, #1]


	uint32_t    pll_period_us = 0;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	61bb      	str	r3, [r7, #24]
	int64_t     tmp_long_int  = 0;
 800bb7e:	f04f 0200 	mov.w	r2, #0
 800bb82:	f04f 0300 	mov.w	r3, #0
 800bb86:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int32_t     range_mm      = 0;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	61fb      	str	r3, [r7, #28]
	int32_t     range_mm_10   = 0;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	60fb      	str	r3, [r7, #12]



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800bb92:	88fb      	ldrh	r3, [r7, #6]
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7ff fce8 	bl	800b56a <VL53LX_calc_pll_period_us>
 800bb9a:	61b8      	str	r0, [r7, #24]



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800bb9c:	88b8      	ldrh	r0, [r7, #4]
 800bb9e:	f04f 0100 	mov.w	r1, #0
 800bba2:	887a      	ldrh	r2, [r7, #2]
 800bba4:	f04f 0300 	mov.w	r3, #0
 800bba8:	1a84      	subs	r4, r0, r2
 800bbaa:	eb61 0503 	sbc.w	r5, r1, r3
 800bbae:	e9c7 4504 	strd	r4, r5, [r7, #16]



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	f04f 0300 	mov.w	r3, #0
 800bbba:	6979      	ldr	r1, [r7, #20]
 800bbbc:	fb02 f001 	mul.w	r0, r2, r1
 800bbc0:	6939      	ldr	r1, [r7, #16]
 800bbc2:	fb03 f101 	mul.w	r1, r3, r1
 800bbc6:	4401      	add	r1, r0
 800bbc8:	6938      	ldr	r0, [r7, #16]
 800bbca:	fba0 2302 	umull	r2, r3, r0, r2
 800bbce:	4419      	add	r1, r3
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800bbd6:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800bbda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bbde:	2a00      	cmp	r2, #0
 800bbe0:	f173 0100 	sbcs.w	r1, r3, #0
 800bbe4:	da06      	bge.n	800bbf4 <VL53LX_range_maths+0x98>
 800bbe6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bbea:	f04f 0100 	mov.w	r1, #0
 800bbee:	1812      	adds	r2, r2, r0
 800bbf0:	eb41 0303 	adc.w	r3, r1, r3
 800bbf4:	f04f 0000 	mov.w	r0, #0
 800bbf8:	f04f 0100 	mov.w	r1, #0
 800bbfc:	0a50      	lsrs	r0, r2, #9
 800bbfe:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800bc02:	1259      	asrs	r1, r3, #9
 800bc04:	e9c7 0104 	strd	r0, r1, [r7, #16]



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	f249 2257 	movw	r2, #37463	; 0x9257
 800bc0e:	fb02 f203 	mul.w	r2, r2, r3
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	2100      	movs	r1, #0
 800bc16:	fb01 f303 	mul.w	r3, r1, r3
 800bc1a:	18d1      	adds	r1, r2, r3
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	f249 2257 	movw	r2, #37463	; 0x9257
 800bc22:	fba3 2302 	umull	r2, r3, r3, r2
 800bc26:	4419      	add	r1, r3
 800bc28:	460b      	mov	r3, r1
 800bc2a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800bc2e:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800bc32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bc36:	2a00      	cmp	r2, #0
 800bc38:	f173 0100 	sbcs.w	r1, r3, #0
 800bc3c:	da05      	bge.n	800bc4a <VL53LX_range_maths+0xee>
 800bc3e:	4832      	ldr	r0, [pc, #200]	; (800bd08 <VL53LX_range_maths+0x1ac>)
 800bc40:	f04f 0100 	mov.w	r1, #0
 800bc44:	1812      	adds	r2, r2, r0
 800bc46:	eb41 0303 	adc.w	r3, r1, r3
 800bc4a:	f04f 0000 	mov.w	r0, #0
 800bc4e:	f04f 0100 	mov.w	r1, #0
 800bc52:	0d90      	lsrs	r0, r2, #22
 800bc54:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800bc58:	1599      	asrs	r1, r3, #22
 800bc5a:	e9c7 0104 	strd	r0, r1, [r7, #16]


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc62:	4413      	add	r3, r2
 800bc64:	61fb      	str	r3, [r7, #28]


	range_mm *= gain_factor;
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc6a:	fb02 f303 	mul.w	r3, r2, r3
 800bc6e:	61fb      	str	r3, [r7, #28]
	range_mm += 0x0400;
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc76:	61fb      	str	r3, [r7, #28]
	range_mm /= 0x0800;
 800bc78:	69fb      	ldr	r3, [r7, #28]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	da01      	bge.n	800bc82 <VL53LX_range_maths+0x126>
 800bc7e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800bc82:	12db      	asrs	r3, r3, #11
 800bc84:	61fb      	str	r3, [r7, #28]


	if (fractional_bits == 0) {
 800bc86:	787b      	ldrb	r3, [r7, #1]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d130      	bne.n	800bcee <VL53LX_range_maths+0x192>
		range_mm_10 = range_mm * 10;
 800bc8c:	69fa      	ldr	r2, [r7, #28]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	4413      	add	r3, r2
 800bc94:	005b      	lsls	r3, r3, #1
 800bc96:	60fb      	str	r3, [r7, #12]
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	da00      	bge.n	800bca0 <VL53LX_range_maths+0x144>
 800bc9e:	3303      	adds	r3, #3
 800bca0:	109b      	asrs	r3, r3, #2
 800bca2:	60fb      	str	r3, [r7, #12]
		if ((range_mm_10 % 10) < 5)
 800bca4:	68f9      	ldr	r1, [r7, #12]
 800bca6:	4b19      	ldr	r3, [pc, #100]	; (800bd0c <VL53LX_range_maths+0x1b0>)
 800bca8:	fb83 2301 	smull	r2, r3, r3, r1
 800bcac:	109a      	asrs	r2, r3, #2
 800bcae:	17cb      	asrs	r3, r1, #31
 800bcb0:	1ad2      	subs	r2, r2, r3
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	4413      	add	r3, r2
 800bcb8:	005b      	lsls	r3, r3, #1
 800bcba:	1aca      	subs	r2, r1, r3
 800bcbc:	2a04      	cmp	r2, #4
 800bcbe:	dc09      	bgt.n	800bcd4 <VL53LX_range_maths+0x178>
			range_mm = (int16_t)(range_mm_10 / 10);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	4a12      	ldr	r2, [pc, #72]	; (800bd0c <VL53LX_range_maths+0x1b0>)
 800bcc4:	fb82 1203 	smull	r1, r2, r2, r3
 800bcc8:	1092      	asrs	r2, r2, #2
 800bcca:	17db      	asrs	r3, r3, #31
 800bccc:	1ad3      	subs	r3, r2, r3
 800bcce:	b21b      	sxth	r3, r3
 800bcd0:	61fb      	str	r3, [r7, #28]
 800bcd2:	e014      	b.n	800bcfe <VL53LX_range_maths+0x1a2>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	4a0d      	ldr	r2, [pc, #52]	; (800bd0c <VL53LX_range_maths+0x1b0>)
 800bcd8:	fb82 1203 	smull	r1, r2, r2, r3
 800bcdc:	1092      	asrs	r2, r2, #2
 800bcde:	17db      	asrs	r3, r3, #31
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	3301      	adds	r3, #1
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	b21b      	sxth	r3, r3
 800bcea:	61fb      	str	r3, [r7, #28]
 800bcec:	e007      	b.n	800bcfe <VL53LX_range_maths+0x1a2>
	} else if (fractional_bits == 1)
 800bcee:	787b      	ldrb	r3, [r7, #1]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d104      	bne.n	800bcfe <VL53LX_range_maths+0x1a2>
		range_mm = range_mm / (0x01 << 1);
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	0fda      	lsrs	r2, r3, #31
 800bcf8:	4413      	add	r3, r2
 800bcfa:	105b      	asrs	r3, r3, #1
 800bcfc:	61fb      	str	r3, [r7, #28]

	return range_mm;
 800bcfe:	69fb      	ldr	r3, [r7, #28]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3724      	adds	r7, #36	; 0x24
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd08:	003fffff 	.word	0x003fffff
 800bd0c:	66666667 	.word	0x66666667

0800bd10 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	4603      	mov	r3, r0
 800bd18:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800bd1e:	79fb      	ldrb	r3, [r7, #7]
 800bd20:	3301      	adds	r3, #1
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	005b      	lsls	r3, r3, #1
 800bd26:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3714      	adds	r7, #20
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr

0800bd36 <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800bd36:	b480      	push	{r7}
 800bd38:	b083      	sub	sp, #12
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
 800bd3e:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53LX_p_015 =
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	781a      	ldrb	r2, [r3, #0]
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	7a5a      	ldrb	r2, [r3, #9]
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	685a      	ldr	r2, [r3, #4]
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	605a      	str	r2, [r3, #4]
}
 800bda6:	bf00      	nop
 800bda8:	370c      	adds	r7, #12
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr

0800bdb2 <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800bdb2:	b480      	push	{r7}
 800bdb4:	b087      	sub	sp, #28
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	60f8      	str	r0, [r7, #12]
 800bdba:	460b      	mov	r3, r1
 800bdbc:	607a      	str	r2, [r7, #4]
 800bdbe:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2203      	movs	r2, #3
 800bdc8:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2203      	movs	r2, #3
 800bdce:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2200      	movs	r2, #0
 800bde0:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2218      	movs	r2, #24
 800bde6:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800bde8:	897b      	ldrh	r3, [r7, #10]
 800bdea:	b2da      	uxtb	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2200      	movs	r2, #0
 800be2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53LX_p_005                       = 0;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53LX_p_015                = 0;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2200      	movs	r2, #0
 800be52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2200      	movs	r2, #0
 800be72:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53LX_p_028             = 0;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2200      	movs	r2, #0
 800be82:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800be86:	2300      	movs	r3, #0
 800be88:	82fb      	strh	r3, [r7, #22]
 800be8a:	e009      	b.n	800bea0 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800be8c:	8afb      	ldrh	r3, [r7, #22]
 800be8e:	8afa      	ldrh	r2, [r7, #22]
 800be90:	b2d1      	uxtb	r1, r2
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	4413      	add	r3, r2
 800be96:	460a      	mov	r2, r1
 800be98:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800be9a:	8afb      	ldrh	r3, [r7, #22]
 800be9c:	3301      	adds	r3, #1
 800be9e:	82fb      	strh	r3, [r7, #22]
 800bea0:	8afb      	ldrh	r3, [r7, #22]
 800bea2:	2b05      	cmp	r3, #5
 800bea4:	d9f2      	bls.n	800be8c <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bea6:	2300      	movs	r3, #0
 800bea8:	82fb      	strh	r3, [r7, #22]
 800beaa:	e007      	b.n	800bebc <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800beac:	8afb      	ldrh	r3, [r7, #22]
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	4413      	add	r3, r2
 800beb2:	2201      	movs	r2, #1
 800beb4:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800beb6:	8afb      	ldrh	r3, [r7, #22]
 800beb8:	3301      	adds	r3, #1
 800beba:	82fb      	strh	r3, [r7, #22]
 800bebc:	8afb      	ldrh	r3, [r7, #22]
 800bebe:	2b05      	cmp	r3, #5
 800bec0:	d9f4      	bls.n	800beac <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800bec2:	2300      	movs	r3, #0
 800bec4:	82fb      	strh	r3, [r7, #22]
 800bec6:	e013      	b.n	800bef0 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800bec8:	8afa      	ldrh	r2, [r7, #22]
 800beca:	897b      	ldrh	r3, [r7, #10]
 800becc:	429a      	cmp	r2, r3
 800bece:	d206      	bcs.n	800bede <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800bed0:	8afa      	ldrh	r2, [r7, #22]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	3206      	adds	r2, #6
 800bed6:	68f9      	ldr	r1, [r7, #12]
 800bed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bedc:	e005      	b.n	800beea <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800bede:	8afa      	ldrh	r2, [r7, #22]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	3206      	adds	r2, #6
 800bee4:	2100      	movs	r1, #0
 800bee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800beea:	8afb      	ldrh	r3, [r7, #22]
 800beec:	3301      	adds	r3, #1
 800beee:	82fb      	strh	r3, [r7, #22]
 800bef0:	8afb      	ldrh	r3, [r7, #22]
 800bef2:	2b17      	cmp	r3, #23
 800bef4:	d9e8      	bls.n	800bec8 <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800bef6:	bf00      	nop
 800bef8:	bf00      	nop
 800befa:	371c      	adds	r7, #28
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	607a      	str	r2, [r7, #4]
 800bf10:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800bf12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	da10      	bge.n	800bf3c <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800bf1a:	7bfb      	ldrb	r3, [r7, #15]
 800bf1c:	43db      	mvns	r3, r3
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	f003 0307 	and.w	r3, r3, #7
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	3308      	adds	r3, #8
 800bf28:	b2da      	uxtb	r2, r3
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800bf2e:	7bfb      	ldrb	r3, [r7, #15]
 800bf30:	3b80      	subs	r3, #128	; 0x80
 800bf32:	10db      	asrs	r3, r3, #3
 800bf34:	b2da      	uxtb	r2, r3
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800bf3a:	e00c      	b.n	800bf56 <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800bf3c:	7bfb      	ldrb	r3, [r7, #15]
 800bf3e:	f003 0307 	and.w	r3, r3, #7
 800bf42:	b2da      	uxtb	r2, r3
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800bf48:	7bfb      	ldrb	r3, [r7, #15]
 800bf4a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800bf4e:	10db      	asrs	r3, r3, #3
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	701a      	strb	r2, [r3, #0]
}
 800bf56:	bf00      	nop
 800bf58:	3714      	adds	r7, #20
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr

0800bf62 <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bf62:	b480      	push	{r7}
 800bf64:	b085      	sub	sp, #20
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800bf6e:	2300      	movs	r3, #0
 800bf70:	73fb      	strb	r3, [r7, #15]
 800bf72:	e02c      	b.n	800bfce <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800bf74:	7bfb      	ldrb	r3, [r7, #15]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d009      	beq.n	800bf8e <VL53LX_hist_find_min_max_bin_values+0x2c>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800bf80:	7bf9      	ldrb	r1, [r7, #15]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	3106      	adds	r1, #6
 800bf86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	db07      	blt.n	800bf9e <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800bf8e:	7bfa      	ldrb	r2, [r7, #15]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	3206      	adds	r2, #6
 800bf94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800bf9e:	7bfb      	ldrb	r3, [r7, #15]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d009      	beq.n	800bfb8 <VL53LX_hist_find_min_max_bin_values+0x56>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800bfaa:	7bf9      	ldrb	r1, [r7, #15]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	3106      	adds	r1, #6
 800bfb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	dc07      	bgt.n	800bfc8 <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800bfb8:	7bfa      	ldrb	r2, [r7, #15]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	3206      	adds	r2, #6
 800bfbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800bfc8:	7bfb      	ldrb	r3, [r7, #15]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	73fb      	strb	r3, [r7, #15]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	7a9b      	ldrb	r3, [r3, #10]
 800bfd2:	7bfa      	ldrb	r2, [r7, #15]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d3cd      	bcc.n	800bf74 <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800bfd8:	bf00      	nop
 800bfda:	bf00      	nop
 800bfdc:	3714      	adds	r7, #20
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr

0800bfe6 <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bfe6:	b480      	push	{r7}
 800bfe8:	b085      	sub	sp, #20
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800bfee:	2300      	movs	r3, #0
 800bff0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	7adb      	ldrb	r3, [r3, #11]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d03a      	beq.n	800c070 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800c00c:	2300      	movs	r3, #0
 800c00e:	73fb      	strb	r3, [r7, #15]
 800c010:	e00e      	b.n	800c030 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c018:	7bf9      	ldrb	r1, [r7, #15]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	3106      	adds	r1, #6
 800c01e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c022:	441a      	add	r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800c02a:	7bfb      	ldrb	r3, [r7, #15]
 800c02c:	3301      	adds	r3, #1
 800c02e:	73fb      	strb	r3, [r7, #15]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	7adb      	ldrb	r3, [r3, #11]
 800c034:	7bfa      	ldrb	r2, [r7, #15]
 800c036:	429a      	cmp	r2, r3
 800c038:	d3eb      	bcc.n	800c012 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	7ad2      	ldrb	r2, [r2, #11]
 800c050:	0852      	lsrs	r2, r2, #1
 800c052:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800c054:	441a      	add	r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800c066:	fb93 f2f2 	sdiv	r2, r3, r2
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800c070:	bf00      	nop
 800c072:	3714      	adds	r7, #20
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800c07c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c080:	b096      	sub	sp, #88	; 0x58
 800c082:	af00      	add	r7, sp, #0
 800c084:	6339      	str	r1, [r7, #48]	; 0x30
 800c086:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c088:	62bb      	str	r3, [r7, #40]	; 0x28
 800c08a:	4603      	mov	r3, r0
 800c08c:	86fb      	strh	r3, [r7, #54]	; 0x36



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800c08e:	2300      	movs	r3, #0
 800c090:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	uint32_t    pll_period_us       = 0;
 800c094:	2300      	movs	r3, #0
 800c096:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t    periods_elapsed     = 0;
 800c098:	2300      	movs	r3, #0
 800c09a:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint32_t    tmp32               = 0;
 800c09c:	2300      	movs	r3, #0
 800c09e:	657b      	str	r3, [r7, #84]	; 0x54
	uint64_t    tmp64               = 0;
 800c0a0:	f04f 0200 	mov.w	r2, #0
 800c0a4:	f04f 0300 	mov.w	r3, #0
 800c0a8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint32_t    amb_thres_delta     = 0;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	63bb      	str	r3, [r7, #56]	; 0x38

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800c0b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800c0b6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800c0bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c0be:	2300      	movs	r3, #0
 800c0c0:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800c0c2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800c0c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800c0ce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800c0d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53LX_p_022            = 0;
 800c0da:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c0dc:	2300      	movs	r3, #0
 800c0de:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800c0e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800c0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	f000 80ab 	beq.w	800c248 <VL53LX_f_001+0x1cc>
		(pbins->total_periods_elapsed      != 0)) {
 800c0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f000 80a5 	beq.w	800c248 <VL53LX_f_001+0x1cc>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800c0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c100:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c104:	4618      	mov	r0, r3
 800c106:	f7ff fa30 	bl	800b56a <VL53LX_calc_pll_period_us>
 800c10a:	6438      	str	r0, [r7, #64]	; 0x40



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800c10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c112:	3301      	adds	r3, #1
 800c114:	63fb      	str	r3, [r7, #60]	; 0x3c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800c116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c11c:	2110      	movs	r1, #16
 800c11e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c120:	f7ff fa3a 	bl	800b598 <VL53LX_duration_maths>
 800c124:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800c126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c128:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4619      	mov	r1, r3
 800c136:	4610      	mov	r0, r2
 800c138:	f7ff fc97 	bl	800ba6a <VL53LX_rate_maths>
 800c13c:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800c13e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c140:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800c142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c144:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800c148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14a:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800c14e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	461a      	mov	r2, r3
 800c154:	f7ff fa7a 	bl	800b64c <VL53LX_events_per_spad_maths>
 800c158:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800c15a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c15c:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800c15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c160:	8adb      	ldrh	r3, [r3, #22]
 800c162:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c164:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800c166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c168:	8adb      	ldrh	r3, [r3, #22]
 800c16a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c16c:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800c16e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c170:	695b      	ldr	r3, [r3, #20]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d068      	beq.n	800c248 <VL53LX_f_001+0x1cc>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800c176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c178:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	f04f 0300 	mov.w	r3, #0
 800c180:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64  *= 1000;
 800c184:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800c188:	4622      	mov	r2, r4
 800c18a:	462b      	mov	r3, r5
 800c18c:	f04f 0000 	mov.w	r0, #0
 800c190:	f04f 0100 	mov.w	r1, #0
 800c194:	0159      	lsls	r1, r3, #5
 800c196:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c19a:	0150      	lsls	r0, r2, #5
 800c19c:	4602      	mov	r2, r0
 800c19e:	460b      	mov	r3, r1
 800c1a0:	1b12      	subs	r2, r2, r4
 800c1a2:	eb63 0305 	sbc.w	r3, r3, r5
 800c1a6:	f04f 0000 	mov.w	r0, #0
 800c1aa:	f04f 0100 	mov.w	r1, #0
 800c1ae:	0099      	lsls	r1, r3, #2
 800c1b0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c1b4:	0090      	lsls	r0, r2, #2
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	1912      	adds	r2, r2, r4
 800c1bc:	eb45 0303 	adc.w	r3, r5, r3
 800c1c0:	f04f 0000 	mov.w	r0, #0
 800c1c4:	f04f 0100 	mov.w	r1, #0
 800c1c8:	00d9      	lsls	r1, r3, #3
 800c1ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c1ce:	00d0      	lsls	r0, r2, #3
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64 <<= (11+1);
 800c1d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c1dc:	f04f 0000 	mov.w	r0, #0
 800c1e0:	f04f 0100 	mov.w	r1, #0
 800c1e4:	0319      	lsls	r1, r3, #12
 800c1e6:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800c1ea:	0310      	lsls	r0, r2, #12
 800c1ec:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
			tmp32 = pdata->VL53LX_p_033/2;
 800c1f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	085b      	lsrs	r3, r3, #1
 800c1f6:	657b      	str	r3, [r7, #84]	; 0x54
			tmp64 += (uint64_t)tmp32;
 800c1f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f04f 0100 	mov.w	r1, #0
 800c200:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c204:	eb12 0800 	adds.w	r8, r2, r0
 800c208:	eb43 0901 	adc.w	r9, r3, r1
 800c20c:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
			tmp64 = do_division_u(tmp64,
 800c210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c212:	695b      	ldr	r3, [r3, #20]
 800c214:	461a      	mov	r2, r3
 800c216:	f04f 0300 	mov.w	r3, #0
 800c21a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c21e:	f7f4 f87f 	bl	8000320 <__aeabi_uldivmod>
 800c222:	4602      	mov	r2, r0
 800c224:	460b      	mov	r3, r1
 800c226:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800c22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22c:	8adb      	ldrh	r3, [r3, #22]
 800c22e:	b298      	uxth	r0, r3
 800c230:	f04f 0100 	mov.w	r1, #0
 800c234:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c238:	428b      	cmp	r3, r1
 800c23a:	bf08      	it	eq
 800c23c:	4282      	cmpeq	r2, r0
 800c23e:	d203      	bcs.n	800c248 <VL53LX_f_001+0x1cc>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800c240:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c244:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c246:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800c248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24a:	881b      	ldrh	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f000 8203 	beq.w	800c658 <VL53LX_f_001+0x5dc>
		(pbins->VL53LX_p_015        != 0) &&
 800c252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c254:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800c258:	2b00      	cmp	r3, #0
 800c25a:	f000 81fd 	beq.w	800c658 <VL53LX_f_001+0x5dc>
		(pcal->ref_reflectance_pc          != 0) &&
 800c25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c260:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800c262:	2b00      	cmp	r3, #0
 800c264:	f000 81f8 	beq.w	800c658 <VL53LX_f_001+0x5dc>
		(pbins->total_periods_elapsed      != 0)) {
 800c268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800c26e:	2b00      	cmp	r3, #0
 800c270:	f000 81f2 	beq.w	800c658 <VL53LX_f_001+0x5dc>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800c274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c276:	885b      	ldrh	r3, [r3, #2]
 800c278:	b29a      	uxth	r2, r3
 800c27a:	f04f 0300 	mov.w	r3, #0
 800c27e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64 *= (1000 * 256);
 800c282:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800c286:	4622      	mov	r2, r4
 800c288:	462b      	mov	r3, r5
 800c28a:	f04f 0000 	mov.w	r0, #0
 800c28e:	f04f 0100 	mov.w	r1, #0
 800c292:	0159      	lsls	r1, r3, #5
 800c294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c298:	0150      	lsls	r0, r2, #5
 800c29a:	4602      	mov	r2, r0
 800c29c:	460b      	mov	r3, r1
 800c29e:	1b12      	subs	r2, r2, r4
 800c2a0:	eb63 0305 	sbc.w	r3, r3, r5
 800c2a4:	f04f 0000 	mov.w	r0, #0
 800c2a8:	f04f 0100 	mov.w	r1, #0
 800c2ac:	0099      	lsls	r1, r3, #2
 800c2ae:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c2b2:	0090      	lsls	r0, r2, #2
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	1912      	adds	r2, r2, r4
 800c2ba:	eb45 0303 	adc.w	r3, r5, r3
 800c2be:	f04f 0000 	mov.w	r0, #0
 800c2c2:	f04f 0100 	mov.w	r1, #0
 800c2c6:	02d9      	lsls	r1, r3, #11
 800c2c8:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800c2cc:	02d0      	lsls	r0, r2, #11
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp32  = pcal->ref__actual_effective_spads/2;
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d8:	881b      	ldrh	r3, [r3, #0]
 800c2da:	085b      	lsrs	r3, r3, #1
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	657b      	str	r3, [r7, #84]	; 0x54
		tmp64 += (uint64_t)tmp32;
 800c2e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f04f 0100 	mov.w	r1, #0
 800c2e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c2ec:	eb12 0a00 	adds.w	sl, r2, r0
 800c2f0:	eb43 0b01 	adc.w	fp, r3, r1
 800c2f4:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800c2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fa:	881b      	ldrh	r3, [r3, #0]
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	f04f 0300 	mov.w	r3, #0
 800c302:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c306:	f7f4 f80b 	bl	8000320 <__aeabi_uldivmod>
 800c30a:	4602      	mov	r2, r0
 800c30c:	460b      	mov	r3, r1
 800c30e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800c312:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c314:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c316:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800c318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c31a:	691b      	ldr	r3, [r3, #16]
 800c31c:	011a      	lsls	r2, r3, #4
 800c31e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c320:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	461a      	mov	r2, r3
 800c328:	f04f 0300 	mov.w	r3, #0
 800c32c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800c330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c332:	695b      	ldr	r3, [r3, #20]
 800c334:	461a      	mov	r2, r3
 800c336:	f04f 0300 	mov.w	r3, #0
 800c33a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c33c:	fb02 f001 	mul.w	r0, r2, r1
 800c340:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c342:	fb03 f101 	mul.w	r1, r3, r1
 800c346:	4401      	add	r1, r0
 800c348:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c34a:	fba0 2302 	umull	r2, r3, r0, r2
 800c34e:	4419      	add	r1, r3
 800c350:	460b      	mov	r3, r1
 800c352:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c356:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c35a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c35c:	8b5b      	ldrh	r3, [r3, #26]
 800c35e:	b29a      	uxth	r2, r3
 800c360:	f04f 0300 	mov.w	r3, #0
 800c364:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c366:	fb02 f001 	mul.w	r0, r2, r1
 800c36a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c36c:	fb03 f101 	mul.w	r1, r3, r1
 800c370:	4401      	add	r1, r0
 800c372:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c374:	fba0 2302 	umull	r2, r3, r0, r2
 800c378:	4419      	add	r1, r3
 800c37a:	460b      	mov	r3, r1
 800c37c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c380:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800c384:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c388:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800c38c:	6239      	str	r1, [r7, #32]
 800c38e:	f143 0300 	adc.w	r3, r3, #0
 800c392:	627b      	str	r3, [r7, #36]	; 0x24
 800c394:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c398:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800c39c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c3a0:	f04f 0200 	mov.w	r2, #0
 800c3a4:	f04f 0300 	mov.w	r3, #0
 800c3a8:	0cc2      	lsrs	r2, r0, #19
 800c3aa:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800c3ae:	0ccb      	lsrs	r3, r1, #19
 800c3b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  +=  500;
 800c3b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c3b8:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800c3bc:	61b9      	str	r1, [r7, #24]
 800c3be:	f143 0300 	adc.w	r3, r3, #0
 800c3c2:	61fb      	str	r3, [r7, #28]
 800c3c4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c3c8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64   = do_division_u(tmp64, 1000);
 800c3cc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c3d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c3d4:	f04f 0300 	mov.w	r3, #0
 800c3d8:	f7f3 ffa2 	bl	8000320 <__aeabi_uldivmod>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	460b      	mov	r3, r1
 800c3e0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800c3e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c3e8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c3ec:	f04f 0100 	mov.w	r1, #0
 800c3f0:	4299      	cmp	r1, r3
 800c3f2:	bf08      	it	eq
 800c3f4:	4290      	cmpeq	r0, r2
 800c3f6:	d205      	bcs.n	800c404 <VL53LX_f_001+0x388>
			tmp64 = 0x00FFFFFF;
 800c3f8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c3fc:	f04f 0300 	mov.w	r3, #0
 800c400:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800c404:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c408:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c40a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	461a      	mov	r2, r3
 800c410:	f04f 0300 	mov.w	r3, #0
 800c414:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800c418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c41a:	691b      	ldr	r3, [r3, #16]
 800c41c:	461a      	mov	r2, r3
 800c41e:	f04f 0300 	mov.w	r3, #0
 800c422:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c424:	fb02 f001 	mul.w	r0, r2, r1
 800c428:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c42a:	fb03 f101 	mul.w	r1, r3, r1
 800c42e:	4401      	add	r1, r0
 800c430:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c432:	fba0 2302 	umull	r2, r3, r0, r2
 800c436:	4419      	add	r1, r3
 800c438:	460b      	mov	r3, r1
 800c43a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c43e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c442:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c444:	8b5b      	ldrh	r3, [r3, #26]
 800c446:	b29a      	uxth	r2, r3
 800c448:	f04f 0300 	mov.w	r3, #0
 800c44c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c44e:	fb02 f001 	mul.w	r0, r2, r1
 800c452:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c454:	fb03 f101 	mul.w	r1, r3, r1
 800c458:	4401      	add	r1, r0
 800c45a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c45c:	fba0 2302 	umull	r2, r3, r0, r2
 800c460:	4419      	add	r1, r3
 800c462:	460b      	mov	r3, r1
 800c464:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c468:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800c46c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c470:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800c474:	6139      	str	r1, [r7, #16]
 800c476:	f143 0300 	adc.w	r3, r3, #0
 800c47a:	617b      	str	r3, [r7, #20]
 800c47c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c480:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800c484:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c488:	f04f 0200 	mov.w	r2, #0
 800c48c:	f04f 0300 	mov.w	r3, #0
 800c490:	0cc2      	lsrs	r2, r0, #19
 800c492:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800c496:	0ccb      	lsrs	r3, r1, #19
 800c498:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48



		tmp64  *= ((uint64_t)target_reflectance *
 800c49c:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 800c49e:	f04f 0100 	mov.w	r1, #0
				   (uint64_t)pcal->coverglass_transmission);
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a4:	891b      	ldrh	r3, [r3, #8]
 800c4a6:	b29a      	uxth	r2, r3
 800c4a8:	f04f 0300 	mov.w	r3, #0
		tmp64  *= ((uint64_t)target_reflectance *
 800c4ac:	fb02 f501 	mul.w	r5, r2, r1
 800c4b0:	fb00 f403 	mul.w	r4, r0, r3
 800c4b4:	442c      	add	r4, r5
 800c4b6:	fba0 2302 	umull	r2, r3, r0, r2
 800c4ba:	18e1      	adds	r1, r4, r3
 800c4bc:	460b      	mov	r3, r1
 800c4be:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c4c0:	fb02 f001 	mul.w	r0, r2, r1
 800c4c4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c4c6:	fb03 f101 	mul.w	r1, r3, r1
 800c4ca:	4401      	add	r1, r0
 800c4cc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c4ce:	fba0 2302 	umull	r2, r3, r0, r2
 800c4d2:	4419      	add	r1, r3
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c4da:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800c4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e0:	88db      	ldrh	r3, [r3, #6]
 800c4e2:	b298      	uxth	r0, r3
 800c4e4:	f04f 0100 	mov.w	r1, #0
 800c4e8:	f04f 0200 	mov.w	r2, #0
 800c4ec:	f04f 0300 	mov.w	r3, #0
 800c4f0:	01cb      	lsls	r3, r1, #7
 800c4f2:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 800c4f6:	01c2      	lsls	r2, r0, #7
 800c4f8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c4fc:	1884      	adds	r4, r0, r2
 800c4fe:	60bc      	str	r4, [r7, #8]
 800c500:	eb41 0303 	adc.w	r3, r1, r3
 800c504:	60fb      	str	r3, [r7, #12]
 800c506:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c50a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800c50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c510:	88db      	ldrh	r3, [r3, #6]
 800c512:	b298      	uxth	r0, r3
 800c514:	f04f 0100 	mov.w	r1, #0
 800c518:	f04f 0200 	mov.w	r2, #0
 800c51c:	f04f 0300 	mov.w	r3, #0
 800c520:	020b      	lsls	r3, r1, #8
 800c522:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c526:	0202      	lsls	r2, r0, #8
 800c528:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c52c:	f7f3 fef8 	bl	8000320 <__aeabi_uldivmod>
 800c530:	4602      	mov	r2, r0
 800c532:	460b      	mov	r3, r1
 800c534:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800c538:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c53c:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800c540:	6039      	str	r1, [r7, #0]
 800c542:	f143 0300 	adc.w	r3, r3, #0
 800c546:	607b      	str	r3, [r7, #4]
 800c548:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c54c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64, 1000);
 800c550:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c558:	f04f 0300 	mov.w	r3, #0
 800c55c:	f7f3 fee0 	bl	8000320 <__aeabi_uldivmod>
 800c560:	4602      	mov	r2, r0
 800c562:	460b      	mov	r3, r1
 800c564:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800c568:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c56c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c570:	f04f 0100 	mov.w	r1, #0
 800c574:	4299      	cmp	r1, r3
 800c576:	bf08      	it	eq
 800c578:	4290      	cmpeq	r0, r2
 800c57a:	d205      	bcs.n	800c588 <VL53LX_f_001+0x50c>
			tmp64 = 0x00FFFFFF;
 800c57c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c580:	f04f 0300 	mov.w	r3, #0
 800c584:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800c588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c58a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c58c:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800c58e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c590:	69db      	ldr	r3, [r3, #28]
 800c592:	021b      	lsls	r3, r3, #8
 800c594:	4618      	mov	r0, r3
 800c596:	f7ff f8e2 	bl	800b75e <VL53LX_isqrt>
 800c59a:	6578      	str	r0, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800c59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59e:	785b      	ldrb	r3, [r3, #1]
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5a4:	fb02 f303 	mul.w	r3, r2, r3
 800c5a8:	657b      	str	r3, [r7, #84]	; 0x54



		if (pdata->VL53LX_p_028 <
 800c5aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5ac:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800c5ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5b0:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d20f      	bcs.n	800c5d6 <VL53LX_f_001+0x55a>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800c5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800c5bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5be:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800c5c0:	1ad3      	subs	r3, r2, r3
 800c5c2:	63bb      	str	r3, [r7, #56]	; 0x38


			amb_thres_delta <<= 8;
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c6:	021b      	lsls	r3, r3, #8
 800c5c8:	63bb      	str	r3, [r7, #56]	; 0x38

			if (tmp32 < amb_thres_delta)
 800c5ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d201      	bcs.n	800c5d6 <VL53LX_f_001+0x55a>
				tmp32 = amb_thres_delta;
 800c5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d4:	657b      	str	r3, [r7, #84]	; 0x54
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800c5d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5d8:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800c5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5dc:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c5de:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e2:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c5e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c5e6:	f000 f83e 	bl	800c666 <VL53LX_f_002>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800c5ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5f0:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800c5f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5f4:	6a1b      	ldr	r3, [r3, #32]
 800c5f6:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800c5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fa:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800c5fe:	461a      	mov	r2, r3
 800c600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c602:	fb02 f303 	mul.w	r3, r2, r3
 800c606:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 += (1 << 3);
 800c608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c60a:	3308      	adds	r3, #8
 800c60c:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 /= (1 << 4);
 800c60e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c610:	091b      	lsrs	r3, r3, #4
 800c612:	657b      	str	r3, [r7, #84]	; 0x54

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800c614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c616:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800c618:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800c61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61c:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c61e:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c622:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c624:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c626:	f000 f81e 	bl	800c666 <VL53LX_f_002>
 800c62a:	4603      	mov	r3, r0
 800c62c:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800c62e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c630:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800c632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c634:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800c638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c63a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800c63e:	429a      	cmp	r2, r3
 800c640:	da05      	bge.n	800c64e <VL53LX_f_001+0x5d2>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800c642:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c644:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800c648:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c64a:	801a      	strh	r2, [r3, #0]
 800c64c:	e004      	b.n	800c658 <VL53LX_f_001+0x5dc>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800c64e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c650:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800c654:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c656:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800c658:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47

}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3758      	adds	r7, #88	; 0x58
 800c660:	46bd      	mov	sp, r7
 800c662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c666 <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b086      	sub	sp, #24
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	60f8      	str	r0, [r7, #12]
 800c66e:	60b9      	str	r1, [r7, #8]
 800c670:	607a      	str	r2, [r7, #4]
 800c672:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800c674:	2300      	movs	r3, #0
 800c676:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800c678:	2300      	movs	r3, #0
 800c67a:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	fb03 f303 	mul.w	r3, r3, r3
 800c688:	693a      	ldr	r2, [r7, #16]
 800c68a:	4413      	add	r3, r2
 800c68c:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800c68e:	6938      	ldr	r0, [r7, #16]
 800c690:	f7ff f865 	bl	800b75e <VL53LX_isqrt>
 800c694:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800c696:	693a      	ldr	r2, [r7, #16]
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	4413      	add	r3, r2
 800c69c:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	011b      	lsls	r3, r3, #4
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7ff f85b 	bl	800b75e <VL53LX_isqrt>
 800c6a8:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	fb02 f303 	mul.w	r3, r2, r3
 800c6b2:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d009      	beq.n	800c6ce <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800c6ba:	697a      	ldr	r2, [r7, #20]
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	4413      	add	r3, r2
 800c6c0:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	005b      	lsls	r3, r3, #1
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6cc:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800c6ce:	697b      	ldr	r3, [r7, #20]

}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3718      	adds	r7, #24
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2218      	movs	r2, #24
 800c6e8:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	73fb      	strb	r3, [r7, #15]
 800c70e:	e01f      	b.n	800c750 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800c710:	7bfb      	ldrb	r3, [r7, #15]
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	4413      	add	r3, r2
 800c716:	2200      	movs	r2, #0
 800c718:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800c71a:	7bfb      	ldrb	r3, [r7, #15]
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	4413      	add	r3, r2
 800c720:	2200      	movs	r2, #0
 800c722:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800c726:	7bfb      	ldrb	r3, [r7, #15]
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	4413      	add	r3, r2
 800c72c:	2200      	movs	r2, #0
 800c72e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800c732:	7bfa      	ldrb	r2, [r7, #15]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	322e      	adds	r2, #46	; 0x2e
 800c738:	2100      	movs	r1, #0
 800c73a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800c73e:	7bfa      	ldrb	r2, [r7, #15]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	3246      	adds	r2, #70	; 0x46
 800c744:	2100      	movs	r1, #0
 800c746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800c74a:	7bfb      	ldrb	r3, [r7, #15]
 800c74c:	3301      	adds	r3, #1
 800c74e:	73fb      	strb	r3, [r7, #15]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	785b      	ldrb	r3, [r3, #1]
 800c754:	7bfa      	ldrb	r2, [r7, #15]
 800c756:	429a      	cmp	r2, r3
 800c758:	d3da      	bcc.n	800c710 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2208      	movs	r2, #8
 800c766:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53LX_p_046             = 0;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800c778:	461a      	mov	r2, r3
 800c77a:	2118      	movs	r1, #24
 800c77c:	2000      	movs	r0, #0
 800c77e:	f7ff fb18 	bl	800bdb2 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800c788:	461a      	mov	r2, r3
 800c78a:	2118      	movs	r1, #24
 800c78c:	2000      	movs	r0, #0
 800c78e:	f7ff fb10 	bl	800bdb2 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800c798:	461a      	mov	r2, r3
 800c79a:	2118      	movs	r1, #24
 800c79c:	2000      	movs	r0, #0
 800c79e:	f7ff fb08 	bl	800bdb2 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	2118      	movs	r1, #24
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	f7ff fb00 	bl	800bdb2 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	2118      	movs	r1, #24
 800c7bc:	2000      	movs	r0, #0
 800c7be:	f7ff faf8 	bl	800bdb2 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800c7c2:	bf00      	nop
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c7ca:	b5b0      	push	{r4, r5, r7, lr}
 800c7cc:	b08c      	sub	sp, #48	; 0x30
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	607a      	str	r2, [r7, #4]
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	81fb      	strh	r3, [r7, #14]
 800c7da:	4613      	mov	r3, r2
 800c7dc:	737b      	strb	r3, [r7, #13]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  lb            = 0;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t  VL53LX_p_001            = 0;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int64_t  tmp          = 0;
 800c7f0:	f04f 0200 	mov.w	r2, #0
 800c7f4:	f04f 0300 	mov.w	r3, #0
 800c7f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int32_t  amb_events   = 0;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	617b      	str	r3, [r7, #20]
	int32_t  VL53LX_p_018       = 0;
 800c800:	2300      	movs	r3, #0
 800c802:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  samples      = 0;
 800c804:	2300      	movs	r3, #0
 800c806:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800c808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c80a:	7a5a      	ldrb	r2, [r3, #9]
 800c80c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c80e:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800c810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c812:	7a1a      	ldrb	r2, [r3, #8]
 800c814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c816:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800c818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c81a:	7a9a      	ldrb	r2, [r3, #10]
 800c81c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c81e:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800c820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c822:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c828:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800c82a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c82c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c830:	4618      	mov	r0, r3
 800c832:	f7ff fa6d 	bl	800bd10 <VL53LX_decode_vcsel_period>
 800c836:	4603      	mov	r3, r0
 800c838:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800c83a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c83c:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800c83e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c840:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c844:	461a      	mov	r2, r3
 800c846:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800c84a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800c84e:	89fa      	ldrh	r2, [r7, #14]
 800c850:	f04f 0300 	mov.w	r3, #0
 800c854:	69f9      	ldr	r1, [r7, #28]
 800c856:	fb02 f001 	mul.w	r0, r2, r1
 800c85a:	69b9      	ldr	r1, [r7, #24]
 800c85c:	fb03 f101 	mul.w	r1, r3, r1
 800c860:	4401      	add	r1, r0
 800c862:	69b8      	ldr	r0, [r7, #24]
 800c864:	fba0 2302 	umull	r2, r3, r0, r2
 800c868:	4419      	add	r1, r3
 800c86a:	460b      	mov	r3, r1
 800c86c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800c870:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp += 2048;
 800c874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c878:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 800c87c:	f143 0500 	adc.w	r5, r3, #0
 800c880:	e9c7 4506 	strd	r4, r5, [r7, #24]
	tmp = do_division_s(tmp, 4096);
 800c884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c888:	2a00      	cmp	r2, #0
 800c88a:	f173 0100 	sbcs.w	r1, r3, #0
 800c88e:	da06      	bge.n	800c89e <VL53LX_f_006+0xd4>
 800c890:	f640 70ff 	movw	r0, #4095	; 0xfff
 800c894:	f04f 0100 	mov.w	r1, #0
 800c898:	1812      	adds	r2, r2, r0
 800c89a:	eb41 0303 	adc.w	r3, r1, r3
 800c89e:	f04f 0000 	mov.w	r0, #0
 800c8a2:	f04f 0100 	mov.w	r1, #0
 800c8a6:	0b10      	lsrs	r0, r2, #12
 800c8a8:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c8ac:	1319      	asrs	r1, r3, #12
 800c8ae:	e9c7 0106 	strd	r0, r1, [r7, #24]
	amb_events = (int32_t)tmp;
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	617b      	str	r3, [r7, #20]



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c8bc:	e062      	b.n	800c984 <VL53LX_f_006+0x1ba>

		VL53LX_p_001 = lb >> 2;
 800c8be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8c2:	089b      	lsrs	r3, r3, #2
 800c8c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800c8c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c8cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8ce:	4413      	add	r3, r2
 800c8d0:	7c9b      	ldrb	r3, [r3, #18]
 800c8d2:	613b      	str	r3, [r7, #16]

		if (samples > 0) {
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	dd4f      	ble.n	800c97a <VL53LX_f_006+0x1b0>

			if (lb < pxtalk->VL53LX_p_021 &&
 800c8da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8dc:	7a9b      	ldrb	r3, [r3, #10]
 800c8de:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d20f      	bcs.n	800c906 <VL53LX_f_006+0x13c>
 800c8e6:	7b7b      	ldrb	r3, [r7, #13]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00c      	beq.n	800c906 <VL53LX_f_006+0x13c>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800c8ec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c8f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8f2:	3206      	adds	r2, #6
 800c8f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	441a      	add	r2, r3
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	fb02 f303 	mul.w	r3, r2, r3
 800c902:	62bb      	str	r3, [r7, #40]	; 0x28
 800c904:	e004      	b.n	800c910 <VL53LX_f_006+0x146>
			else
				VL53LX_p_018 = samples *  amb_events;
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	697a      	ldr	r2, [r7, #20]
 800c90a:	fb02 f303 	mul.w	r3, r2, r3
 800c90e:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800c910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c912:	4618      	mov	r0, r3
 800c914:	f7fe ff23 	bl	800b75e <VL53LX_isqrt>
 800c918:	4603      	mov	r3, r0
 800c91a:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018 += (samples/2);
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	0fda      	lsrs	r2, r3, #31
 800c920:	4413      	add	r3, r2
 800c922:	105b      	asrs	r3, r3, #1
 800c924:	461a      	mov	r2, r3
 800c926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c928:	4413      	add	r3, r2
 800c92a:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= samples;
 800c92c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	fb92 f3f3 	sdiv	r3, r2, r3
 800c934:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 *= ambient_threshold_sigma;
 800c936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c938:	68ba      	ldr	r2, [r7, #8]
 800c93a:	fb02 f303 	mul.w	r3, r2, r3
 800c93e:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += 8;
 800c940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c942:	3308      	adds	r3, #8
 800c944:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= 16;
 800c946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c948:	2b00      	cmp	r3, #0
 800c94a:	da00      	bge.n	800c94e <VL53LX_f_006+0x184>
 800c94c:	330f      	adds	r3, #15
 800c94e:	111b      	asrs	r3, r3, #4
 800c950:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += amb_events;
 800c952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	4413      	add	r3, r2
 800c958:	62bb      	str	r3, [r7, #40]	; 0x28

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800c95a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	429a      	cmp	r2, r3
 800c960:	da01      	bge.n	800c966 <VL53LX_f_006+0x19c>
				VL53LX_p_018 = min_ambient_threshold_events;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	62bb      	str	r3, [r7, #40]	; 0x28

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800c966:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c96a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c96c:	3216      	adds	r2, #22
 800c96e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800c974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c978:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800c97a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c97e:	3301      	adds	r3, #1
 800c980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c986:	7a9b      	ldrb	r3, [r3, #10]
 800c988:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d396      	bcc.n	800c8be <VL53LX_f_006+0xf4>

	}



	palgo->VL53LX_p_039 = 0;
 800c990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c992:	2200      	movs	r2, #0
 800c994:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800c996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c998:	7a1b      	ldrb	r3, [r3, #8]
 800c99a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c99e:	e033      	b.n	800ca08 <VL53LX_f_006+0x23e>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800c9a0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c9a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9a6:	3206      	adds	r2, #6
 800c9a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c9ac:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800c9b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9b2:	3116      	adds	r1, #22
 800c9b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	dd13      	ble.n	800c9e4 <VL53LX_f_006+0x21a>
			palgo->VL53LX_p_040[lb]      = 1;
 800c9bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9c2:	4413      	add	r3, r2
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800c9c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9ce:	4413      	add	r3, r2
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53LX_p_039++;
 800c9d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9d8:	791b      	ldrb	r3, [r3, #4]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	b2da      	uxtb	r2, r3
 800c9de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9e0:	711a      	strb	r2, [r3, #4]
 800c9e2:	e00c      	b.n	800c9fe <VL53LX_f_006+0x234>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800c9e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9ea:	4413      	add	r3, r2
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800c9f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9f6:	4413      	add	r3, r2
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800c9fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca02:	3301      	adds	r3, #1
 800ca04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ca08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca0a:	7a9b      	ldrb	r3, [r3, #10]
 800ca0c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d3c5      	bcc.n	800c9a0 <VL53LX_f_006+0x1d6>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800ca14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3730      	adds	r7, #48	; 0x30
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bdb0      	pop	{r4, r5, r7, pc}

0800ca20 <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800ca30:	2300      	movs	r3, #0
 800ca32:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800ca34:	2300      	movs	r3, #0
 800ca36:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800ca40:	2300      	movs	r3, #0
 800ca42:	73fb      	strb	r3, [r7, #15]
 800ca44:	e02d      	b.n	800caa2 <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800ca46:	7bfb      	ldrb	r3, [r7, #15]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	78d2      	ldrb	r2, [r2, #3]
 800ca4e:	fb93 f1f2 	sdiv	r1, r3, r2
 800ca52:	fb02 f201 	mul.w	r2, r2, r1
 800ca56:	1a9b      	subs	r3, r3, r2
 800ca58:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	789b      	ldrb	r3, [r3, #2]
 800ca5e:	7bfa      	ldrb	r2, [r7, #15]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d21b      	bcs.n	800ca9c <VL53LX_f_007+0x7c>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	789b      	ldrb	r3, [r3, #2]
 800ca68:	7b3a      	ldrb	r2, [r7, #12]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d216      	bcs.n	800ca9c <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800ca6e:	7bfb      	ldrb	r3, [r7, #15]
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	4413      	add	r3, r2
 800ca74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d10f      	bne.n	800ca9c <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800ca7c:	7b3b      	ldrb	r3, [r7, #12]
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	4413      	add	r3, r2
 800ca82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d108      	bne.n	800ca9c <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800ca8a:	7bbb      	ldrb	r3, [r7, #14]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d105      	bne.n	800ca9c <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	7bfa      	ldrb	r2, [r7, #15]
 800ca94:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800ca9c:	7bfb      	ldrb	r3, [r7, #15]
 800ca9e:	3301      	adds	r3, #1
 800caa0:	73fb      	strb	r3, [r7, #15]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	78db      	ldrb	r3, [r3, #3]
 800caa6:	7bfa      	ldrb	r2, [r7, #15]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d3cc      	bcc.n	800ca46 <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800caac:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3714      	adds	r7, #20
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b085      	sub	sp, #20
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cac4:	2300      	movs	r3, #0
 800cac6:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800cac8:	2300      	movs	r3, #0
 800caca:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800cacc:	2300      	movs	r3, #0
 800cace:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800cad0:	2300      	movs	r3, #0
 800cad2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800cada:	73fb      	strb	r3, [r7, #15]
 800cadc:	e05a      	b.n	800cb94 <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	78da      	ldrb	r2, [r3, #3]
 800cae2:	7bfb      	ldrb	r3, [r7, #15]
 800cae4:	fbb3 f1f2 	udiv	r1, r3, r2
 800cae8:	fb02 f201 	mul.w	r2, r2, r1
 800caec:	1a9b      	subs	r3, r3, r2
 800caee:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800caf0:	7bfb      	ldrb	r3, [r7, #15]
 800caf2:	3301      	adds	r3, #1
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	78d2      	ldrb	r2, [r2, #3]
 800caf8:	fb93 f1f2 	sdiv	r1, r3, r2
 800cafc:	fb02 f201 	mul.w	r2, r2, r1
 800cb00:	1a9b      	subs	r3, r3, r2
 800cb02:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	789b      	ldrb	r3, [r3, #2]
 800cb08:	7b7a      	ldrb	r2, [r7, #13]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d23f      	bcs.n	800cb8e <VL53LX_f_008+0xd2>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	789b      	ldrb	r3, [r3, #2]
 800cb12:	7b3a      	ldrb	r2, [r7, #12]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d23a      	bcs.n	800cb8e <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800cb18:	7b7b      	ldrb	r3, [r7, #13]
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d10e      	bne.n	800cb44 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800cb26:	7b3b      	ldrb	r3, [r7, #12]
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	4413      	add	r3, r2
 800cb2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d107      	bne.n	800cb44 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	b2da      	uxtb	r2, r3
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d905      	bls.n	800cb60 <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800cb60:	7b7b      	ldrb	r3, [r7, #13]
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	4413      	add	r3, r2
 800cb66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d009      	beq.n	800cb82 <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800cb6e:	7b7b      	ldrb	r3, [r7, #13]
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	4413      	add	r3, r2
 800cb7a:	460a      	mov	r2, r1
 800cb7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb80:	e005      	b.n	800cb8e <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800cb82:	7b7b      	ldrb	r3, [r7, #13]
 800cb84:	687a      	ldr	r2, [r7, #4]
 800cb86:	4413      	add	r3, r2
 800cb88:	2200      	movs	r2, #0
 800cb8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800cb8e:	7bfb      	ldrb	r3, [r7, #15]
 800cb90:	3301      	adds	r3, #1
 800cb92:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800cb94:	7bfa      	ldrb	r2, [r7, #15]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800cb9c:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800cba2:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800cba4:	429a      	cmp	r2, r3
 800cba6:	db9a      	blt.n	800cade <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800cba8:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3714      	adds	r7, #20
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b087      	sub	sp, #28
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	78db      	ldrb	r3, [r3, #3]
 800cbdc:	3b01      	subs	r3, #1
 800cbde:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800cbe0:	7cbb      	ldrb	r3, [r7, #18]
 800cbe2:	085b      	lsrs	r3, r3, #1
 800cbe4:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800cbec:	75fb      	strb	r3, [r7, #23]
 800cbee:	e0a2      	b.n	800cd36 <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	78da      	ldrb	r2, [r3, #3]
 800cbf4:	7dfb      	ldrb	r3, [r7, #23]
 800cbf6:	fbb3 f1f2 	udiv	r1, r3, r2
 800cbfa:	fb02 f201 	mul.w	r2, r2, r1
 800cbfe:	1a9b      	subs	r3, r3, r2
 800cc00:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800cc02:	7dfb      	ldrb	r3, [r7, #23]
 800cc04:	3301      	adds	r3, #1
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	78d2      	ldrb	r2, [r2, #3]
 800cc0a:	fb93 f1f2 	sdiv	r1, r3, r2
 800cc0e:	fb02 f201 	mul.w	r2, r2, r1
 800cc12:	1a9b      	subs	r3, r3, r2
 800cc14:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	789b      	ldrb	r3, [r3, #2]
 800cc1a:	7d7a      	ldrb	r2, [r7, #21]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	f080 8087 	bcs.w	800cd30 <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800cc26:	7d3a      	ldrb	r2, [r7, #20]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	f080 8081 	bcs.w	800cd30 <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800cc2e:	7d7b      	ldrb	r3, [r7, #21]
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	4413      	add	r3, r2
 800cc34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d12f      	bne.n	800cc9c <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800cc3c:	7d3b      	ldrb	r3, [r7, #20]
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	4413      	add	r3, r2
 800cc42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d028      	beq.n	800cc9c <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800cc4a:	7d3b      	ldrb	r3, [r7, #20]
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	4413      	add	r3, r2
 800cc50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc54:	3b01      	subs	r3, #1
 800cc56:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800cc5e:	7cfa      	ldrb	r2, [r7, #19]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d21b      	bcs.n	800cc9c <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800cc64:	7cfa      	ldrb	r2, [r7, #19]
 800cc66:	4613      	mov	r3, r2
 800cc68:	00db      	lsls	r3, r3, #3
 800cc6a:	4413      	add	r3, r2
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	4413      	add	r3, r2
 800cc76:	3304      	adds	r3, #4
 800cc78:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	7dfa      	ldrb	r2, [r7, #23]
 800cc7e:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800cc80:	7dfb      	ldrb	r3, [r7, #23]
 800cc82:	3301      	adds	r3, #1
 800cc84:	b2da      	uxtb	r2, r3
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	22ff      	movs	r2, #255	; 0xff
 800cc8e:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2200      	movs	r2, #0
 800cc94:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800cc9c:	7d7b      	ldrb	r3, [r7, #21]
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	4413      	add	r3, r2
 800cca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d042      	beq.n	800cd30 <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800ccaa:	7d3b      	ldrb	r3, [r7, #20]
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	4413      	add	r3, r2
 800ccb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d13b      	bne.n	800cd30 <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800ccb8:	7d7b      	ldrb	r3, [r7, #21]
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ccc2:	3b01      	subs	r3, #1
 800ccc4:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800cccc:	7cfa      	ldrb	r2, [r7, #19]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d22e      	bcs.n	800cd30 <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800ccd2:	7cfa      	ldrb	r2, [r7, #19]
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	00db      	lsls	r3, r3, #3
 800ccd8:	4413      	add	r3, r2
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	4413      	add	r3, r2
 800cce4:	3304      	adds	r3, #4
 800cce6:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	7dfa      	ldrb	r2, [r7, #23]
 800ccec:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800ccee:	7dfb      	ldrb	r3, [r7, #23]
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	b2da      	uxtb	r2, r3
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	3301      	adds	r3, #1
 800cd06:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800cd14:	1ad3      	subs	r3, r2, r3
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	3301      	adds	r3, #1
 800cd1a:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	799b      	ldrb	r3, [r3, #6]
 800cd24:	7cba      	ldrb	r2, [r7, #18]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d202      	bcs.n	800cd30 <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	7cba      	ldrb	r2, [r7, #18]
 800cd2e:	719a      	strb	r2, [r3, #6]
		blb++) {
 800cd30:	7dfb      	ldrb	r3, [r7, #23]
 800cd32:	3301      	adds	r3, #1
 800cd34:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800cd36:	7dfa      	ldrb	r2, [r7, #23]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800cd3e:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800cd44:	440b      	add	r3, r1
	for (blb = palgo->VL53LX_p_044;
 800cd46:	429a      	cmp	r2, r3
 800cd48:	f6ff af52 	blt.w	800cbf0 <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cd4c:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800cd50:	4618      	mov	r0, r3
 800cd52:	371c      	adds	r7, #28
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b090      	sub	sp, #64	; 0x40
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	4603      	mov	r3, r0
 800cd64:	6039      	str	r1, [r7, #0]
 800cd66:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800cd6e:	f107 030c 	add.w	r3, r7, #12
 800cd72:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800cd74:	2300      	movs	r3, #0
 800cd76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d965      	bls.n	800ce56 <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800cd8a:	e05f      	b.n	800ce4c <VL53LX_f_016+0xf0>

		swapped = 0;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800cd92:	2301      	movs	r3, #1
 800cd94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cd98:	e051      	b.n	800ce3e <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800cd9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd9e:	1e5a      	subs	r2, r3, #1
 800cda0:	4613      	mov	r3, r2
 800cda2:	00db      	lsls	r3, r3, #3
 800cda4:	4413      	add	r3, r2
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cdac:	683a      	ldr	r2, [r7, #0]
 800cdae:	4413      	add	r3, r2
 800cdb0:	3304      	adds	r3, #4
 800cdb2:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800cdb4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800cdb8:	4613      	mov	r3, r2
 800cdba:	00db      	lsls	r3, r3, #3
 800cdbc:	4413      	add	r3, r2
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cdc4:	683a      	ldr	r2, [r7, #0]
 800cdc6:	4413      	add	r3, r2
 800cdc8:	3304      	adds	r3, #4
 800cdca:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 800cdcc:	79fb      	ldrb	r3, [r7, #7]
 800cdce:	2b02      	cmp	r3, #2
 800cdd0:	d118      	bne.n	800ce04 <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800cdd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd4:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd8:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800cdda:	429a      	cmp	r2, r3
 800cddc:	da2a      	bge.n	800ce34 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800cdde:	2224      	movs	r2, #36	; 0x24
 800cde0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cde2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cde4:	f007 fac2 	bl	801436c <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800cde8:	2224      	movs	r2, #36	; 0x24
 800cdea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cdec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdee:	f007 fabd 	bl	801436c <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800cdf2:	2224      	movs	r2, #36	; 0x24
 800cdf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cdf6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cdf8:	f007 fab8 	bl	801436c <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800ce02:	e017      	b.n	800ce34 <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800ce04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce06:	699a      	ldr	r2, [r3, #24]
 800ce08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0a:	699b      	ldr	r3, [r3, #24]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d911      	bls.n	800ce34 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800ce10:	2224      	movs	r2, #36	; 0x24
 800ce12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce16:	f007 faa9 	bl	801436c <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800ce1a:	2224      	movs	r2, #36	; 0x24
 800ce1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ce1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce20:	f007 faa4 	bl	801436c <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800ce24:	2224      	movs	r2, #36	; 0x24
 800ce26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ce2a:	f007 fa9f 	bl	801436c <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800ce34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ce38:	3301      	adds	r3, #1
 800ce3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800ce44:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d3a6      	bcc.n	800cd9a <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800ce4c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d19b      	bne.n	800cd8c <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800ce54:	e000      	b.n	800ce58 <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800ce56:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800ce58:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3740      	adds	r7, #64	; 0x40
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b087      	sub	sp, #28
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	60b9      	str	r1, [r7, #8]
 800ce6e:	607a      	str	r2, [r7, #4]
 800ce70:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ce72:	2300      	movs	r3, #0
 800ce74:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800ce76:	2300      	movs	r3, #0
 800ce78:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800ce7e:	7bfa      	ldrb	r2, [r7, #15]
 800ce80:	4613      	mov	r3, r2
 800ce82:	00db      	lsls	r3, r3, #3
 800ce84:	4413      	add	r3, r2
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	4413      	add	r3, r2
 800ce90:	3304      	adds	r3, #4
 800ce92:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	2200      	movs	r2, #0
 800ce98:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	75fb      	strb	r3, [r7, #23]
 800cea6:	e01c      	b.n	800cee2 <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	78da      	ldrb	r2, [r3, #3]
 800ceac:	7dfb      	ldrb	r3, [r7, #23]
 800ceae:	fbb3 f1f2 	udiv	r1, r3, r2
 800ceb2:	fb02 f201 	mul.w	r2, r2, r1
 800ceb6:	1a9b      	subs	r3, r3, r2
 800ceb8:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	68da      	ldr	r2, [r3, #12]
 800cebe:	7d79      	ldrb	r1, [r7, #21]
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	3106      	adds	r1, #6
 800cec4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cec8:	441a      	add	r2, r3
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	689a      	ldr	r2, [r3, #8]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	441a      	add	r2, r3
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800cedc:	7dfb      	ldrb	r3, [r7, #23]
 800cede:	3301      	adds	r3, #1
 800cee0:	75fb      	strb	r3, [r7, #23]
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	791b      	ldrb	r3, [r3, #4]
 800cee6:	7dfa      	ldrb	r2, [r7, #23]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d9dd      	bls.n	800cea8 <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	68da      	ldr	r2, [r3, #12]
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800cefa:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	371c      	adds	r7, #28
 800cf02:	46bd      	mov	sp, r7
 800cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf08:	4770      	bx	lr

0800cf0a <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cf0a:	b590      	push	{r4, r7, lr}
 800cf0c:	b08d      	sub	sp, #52	; 0x34
 800cf0e:	af02      	add	r7, sp, #8
 800cf10:	60ba      	str	r2, [r7, #8]
 800cf12:	607b      	str	r3, [r7, #4]
 800cf14:	4603      	mov	r3, r0
 800cf16:	73fb      	strb	r3, [r7, #15]
 800cf18:	460b      	mov	r3, r1
 800cf1a:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 800cf22:	2300      	movs	r3, #0
 800cf24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53LX_p_012 = 0;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800cf30:	2300      	movs	r3, #0
 800cf32:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 800cf34:	2300      	movs	r3, #0
 800cf36:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800cf38:	7bfa      	ldrb	r2, [r7, #15]
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	00db      	lsls	r3, r3, #3
 800cf3e:	4413      	add	r3, r2
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	4413      	add	r3, r2
 800cf4a:	3304      	adds	r3, #4
 800cf4c:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	789b      	ldrb	r3, [r3, #2]
 800cf52:	2bff      	cmp	r3, #255	; 0xff
 800cf54:	d102      	bne.n	800cf5c <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	2201      	movs	r2, #1
 800cf5a:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	789b      	ldrb	r3, [r3, #2]
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	78d2      	ldrb	r2, [r2, #3]
 800cf64:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf68:	fb02 f201 	mul.w	r2, r2, r1
 800cf6c:	1a9b      	subs	r3, r3, r2
 800cf6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53LX_p_012  = (int16_t)i;
 800cf72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf76:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	8c3b      	ldrh	r3, [r7, #32]
 800cf80:	4413      	add	r3, r2
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800cf86:	8c3a      	ldrh	r2, [r7, #32]
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	789b      	ldrb	r3, [r3, #2]
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	1ad3      	subs	r3, r2, r3
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800cf94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf98:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	791b      	ldrb	r3, [r3, #4]
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	8bfb      	ldrh	r3, [r7, #30]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800cfa8:	8bfa      	ldrh	r2, [r7, #30]
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	789b      	ldrb	r3, [r3, #2]
 800cfae:	b29b      	uxth	r3, r3
 800cfb0:	1ad3      	subs	r3, r2, r3
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800cfb6:	8bfa      	ldrh	r2, [r7, #30]
 800cfb8:	8c3b      	ldrh	r3, [r7, #32]
 800cfba:	1ad3      	subs	r3, r2, r3
 800cfbc:	b29b      	uxth	r3, r3
 800cfbe:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 800cfc0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cfc4:	2b03      	cmp	r3, #3
 800cfc6:	dd01      	ble.n	800cfcc <VL53LX_f_015+0xc2>
		window_width = 3;
 800cfc8:	2303      	movs	r3, #3
 800cfca:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800cfcc:	8c3a      	ldrh	r2, [r7, #32]
 800cfce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfd0:	4413      	add	r3, r2
 800cfd2:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800cfd4:	b219      	sxth	r1, r3
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	78da      	ldrb	r2, [r3, #3]
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	3314      	adds	r3, #20
 800cfde:	7bbc      	ldrb	r4, [r7, #14]
 800cfe0:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800cfe4:	9301      	str	r3, [sp, #4]
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	4623      	mov	r3, r4
 800cfec:	f000 f846 	bl	800d07c <VL53LX_f_020>
 800cff0:	4603      	mov	r3, r0
 800cff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800cff6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d114      	bne.n	800d028 <VL53LX_f_015+0x11e>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800cffe:	8bfa      	ldrh	r2, [r7, #30]
 800d000:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d002:	1ad3      	subs	r3, r2, r3
 800d004:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800d006:	b218      	sxth	r0, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	78da      	ldrb	r2, [r3, #3]
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	331c      	adds	r3, #28
 800d010:	7bbc      	ldrb	r4, [r7, #14]
 800d012:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800d016:	9301      	str	r3, [sp, #4]
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	9300      	str	r3, [sp, #0]
 800d01c:	4623      	mov	r3, r4
 800d01e:	f000 f82d 	bl	800d07c <VL53LX_f_020>
 800d022:	4603      	mov	r3, r0
 800d024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	695a      	ldr	r2, [r3, #20]
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	69db      	ldr	r3, [r3, #28]
 800d030:	429a      	cmp	r2, r3
 800d032:	d909      	bls.n	800d048 <VL53LX_f_015+0x13e>
		tmp_phase        = pdata->VL53LX_p_026;
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	695b      	ldr	r3, [r3, #20]
 800d038:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	69da      	ldr	r2, [r3, #28]
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	69ba      	ldr	r2, [r7, #24]
 800d046:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	699a      	ldr	r2, [r3, #24]
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	695b      	ldr	r3, [r3, #20]
 800d050:	429a      	cmp	r2, r3
 800d052:	d203      	bcs.n	800d05c <VL53LX_f_015+0x152>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	699a      	ldr	r2, [r3, #24]
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	699a      	ldr	r2, [r3, #24]
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	69db      	ldr	r3, [r3, #28]
 800d064:	429a      	cmp	r2, r3
 800d066:	d903      	bls.n	800d070 <VL53LX_f_015+0x166>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	699a      	ldr	r2, [r3, #24]
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800d070:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d074:	4618      	mov	r0, r3
 800d076:	372c      	adds	r7, #44	; 0x2c
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd90      	pop	{r4, r7, pc}

0800d07c <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800d07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d080:	b093      	sub	sp, #76	; 0x4c
 800d082:	af00      	add	r7, sp, #0
 800d084:	4616      	mov	r6, r2
 800d086:	461a      	mov	r2, r3
 800d088:	4603      	mov	r3, r0
 800d08a:	83fb      	strh	r3, [r7, #30]
 800d08c:	460b      	mov	r3, r1
 800d08e:	83bb      	strh	r3, [r7, #28]
 800d090:	4633      	mov	r3, r6
 800d092:	76fb      	strb	r3, [r7, #27]
 800d094:	4613      	mov	r3, r2
 800d096:	76bb      	strb	r3, [r7, #26]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d098:	2300      	movs	r3, #0
 800d09a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	int16_t  i            = 0;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  lb            = 0;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	int64_t VL53LX_p_018        = 0;
 800d0aa:	f04f 0200 	mov.w	r2, #0
 800d0ae:	f04f 0300 	mov.w	r3, #0
 800d0b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int64_t event_sum     = 0;
 800d0b6:	f04f 0200 	mov.w	r2, #0
 800d0ba:	f04f 0300 	mov.w	r3, #0
 800d0be:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	int64_t weighted_sum  = 0;
 800d0c2:	f04f 0200 	mov.w	r2, #0
 800d0c6:	f04f 0300 	mov.w	r3, #0
 800d0ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800d0ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d0d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0d4:	601a      	str	r2, [r3, #0]

	if (VL53LX_p_030 != 0)
 800d0d6:	7efb      	ldrb	r3, [r7, #27]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	f000 808b 	beq.w	800d1f4 <VL53LX_f_020+0x178>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d0de:	8bfb      	ldrh	r3, [r7, #30]
 800d0e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d0e4:	e07f      	b.n	800d1e6 <VL53LX_f_020+0x16a>

		if (lb < 0)
 800d0e6:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	da08      	bge.n	800d100 <VL53LX_f_020+0x84>
			i = lb + (int16_t)VL53LX_p_030;
 800d0ee:	7efb      	ldrb	r3, [r7, #27]
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d0f6:	4413      	add	r3, r2
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d0fe:	e009      	b.n	800d114 <VL53LX_f_020+0x98>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800d100:	f9b7 1044 	ldrsh.w	r1, [r7, #68]	; 0x44
 800d104:	7efa      	ldrb	r2, [r7, #27]
 800d106:	fb91 f3f2 	sdiv	r3, r1, r2
 800d10a:	fb02 f303 	mul.w	r3, r2, r3
 800d10e:	1acb      	subs	r3, r1, r3
 800d110:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800d114:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d118:	2b00      	cmp	r3, #0
 800d11a:	db5d      	blt.n	800d1d8 <VL53LX_f_020+0x15c>
 800d11c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d120:	2b17      	cmp	r3, #23
 800d122:	dc59      	bgt.n	800d1d8 <VL53LX_f_020+0x15c>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800d124:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d128:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d12a:	3306      	adds	r3, #6
 800d12c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d130:	4618      	mov	r0, r3
 800d132:	ea4f 71e0 	mov.w	r1, r0, asr #31
				(int64_t)pbins->VL53LX_p_028;
 800d136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d138:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d13c:	461a      	mov	r2, r3
 800d13e:	ea4f 73e2 	mov.w	r3, r2, asr #31
			VL53LX_p_018 =
 800d142:	1a86      	subs	r6, r0, r2
 800d144:	613e      	str	r6, [r7, #16]
 800d146:	eb61 0303 	sbc.w	r3, r1, r3
 800d14a:	617b      	str	r3, [r7, #20]
 800d14c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d150:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800d154:	7ebb      	ldrb	r3, [r7, #26]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d00b      	beq.n	800d172 <VL53LX_f_020+0xf6>
 800d15a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d15e:	2a00      	cmp	r2, #0
 800d160:	f173 0300 	sbcs.w	r3, r3, #0
 800d164:	da05      	bge.n	800d172 <VL53LX_f_020+0xf6>
				VL53LX_p_018 = 0;
 800d166:	f04f 0200 	mov.w	r2, #0
 800d16a:	f04f 0300 	mov.w	r3, #0
 800d16e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			event_sum += VL53LX_p_018;
 800d172:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d176:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d17a:	1886      	adds	r6, r0, r2
 800d17c:	60be      	str	r6, [r7, #8]
 800d17e:	eb41 0303 	adc.w	r3, r1, r3
 800d182:	60fb      	str	r3, [r7, #12]
 800d184:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d188:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800d18c:	f9b7 0044 	ldrsh.w	r0, [r7, #68]	; 0x44
 800d190:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d194:	f04f 0200 	mov.w	r2, #0
 800d198:	f04f 0300 	mov.w	r3, #0
 800d19c:	02cb      	lsls	r3, r1, #11
 800d19e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800d1a2:	02c2      	lsls	r2, r0, #11
 800d1a4:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 800d1a8:	f143 0900 	adc.w	r9, r3, #0
 800d1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ae:	fb09 f203 	mul.w	r2, r9, r3
 800d1b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1b4:	fb08 f303 	mul.w	r3, r8, r3
 800d1b8:	441a      	add	r2, r3
 800d1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1bc:	fba3 0108 	umull	r0, r1, r3, r8
 800d1c0:	1853      	adds	r3, r2, r1
 800d1c2:	4619      	mov	r1, r3
			weighted_sum +=
 800d1c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d1c8:	1816      	adds	r6, r2, r0
 800d1ca:	603e      	str	r6, [r7, #0]
 800d1cc:	414b      	adcs	r3, r1
 800d1ce:	607b      	str	r3, [r7, #4]
 800d1d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d1d8:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	3301      	adds	r3, #1
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d1e6:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800d1ea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	f77f af79 	ble.w	800d0e6 <VL53LX_f_020+0x6a>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800d1f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d1f8:	2a01      	cmp	r2, #1
 800d1fa:	f173 0300 	sbcs.w	r3, r3, #0
 800d1fe:	db33      	blt.n	800d268 <VL53LX_f_020+0x1ec>
		weighted_sum += do_division_s(event_sum, 2);
 800d200:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d204:	0fd9      	lsrs	r1, r3, #31
 800d206:	4608      	mov	r0, r1
 800d208:	f04f 0100 	mov.w	r1, #0
 800d20c:	1884      	adds	r4, r0, r2
 800d20e:	eb41 0503 	adc.w	r5, r1, r3
 800d212:	f04f 0200 	mov.w	r2, #0
 800d216:	f04f 0300 	mov.w	r3, #0
 800d21a:	0862      	lsrs	r2, r4, #1
 800d21c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800d220:	106b      	asrs	r3, r5, #1
 800d222:	4610      	mov	r0, r2
 800d224:	4619      	mov	r1, r3
 800d226:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d22a:	eb12 0a00 	adds.w	sl, r2, r0
 800d22e:	eb43 0b01 	adc.w	fp, r3, r1
 800d232:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800d236:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d23a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d23e:	f7f3 f81f 	bl	8000280 <__aeabi_ldivmod>
 800d242:	4602      	mov	r2, r0
 800d244:	460b      	mov	r3, r1
 800d246:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		if (weighted_sum < 0)
 800d24a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d24e:	2a00      	cmp	r2, #0
 800d250:	f173 0300 	sbcs.w	r3, r3, #0
 800d254:	da05      	bge.n	800d262 <VL53LX_f_020+0x1e6>
			weighted_sum = 0;
 800d256:	f04f 0200 	mov.w	r2, #0
 800d25a:	f04f 0300 	mov.w	r3, #0
 800d25e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		*pphase = (uint32_t)weighted_sum;
 800d262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d266:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d268:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	374c      	adds	r7, #76	; 0x4c
 800d270:	46bd      	mov	sp, r7
 800d272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d276 <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b086      	sub	sp, #24
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	607a      	str	r2, [r7, #4]
 800d280:	603b      	str	r3, [r7, #0]
 800d282:	4603      	mov	r3, r0
 800d284:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d286:	2300      	movs	r3, #0
 800d288:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d28a:	2300      	movs	r3, #0
 800d28c:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d28e:	2300      	movs	r3, #0
 800d290:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d292:	7bfa      	ldrb	r2, [r7, #15]
 800d294:	4613      	mov	r3, r2
 800d296:	00db      	lsls	r3, r3, #3
 800d298:	4413      	add	r3, r2
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	4413      	add	r3, r2
 800d2a4:	3304      	adds	r3, #4
 800d2a6:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800d2a8:	22ac      	movs	r2, #172	; 0xac
 800d2aa:	68b9      	ldr	r1, [r7, #8]
 800d2ac:	6a38      	ldr	r0, [r7, #32]
 800d2ae:	f007 f85d 	bl	801436c <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d2b8:	75fb      	strb	r3, [r7, #23]
 800d2ba:	e020      	b.n	800d2fe <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	7dfa      	ldrb	r2, [r7, #23]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d304      	bcc.n	800d2d0 <VL53LX_f_011+0x5a>
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	791b      	ldrb	r3, [r3, #4]
 800d2ca:	7dfa      	ldrb	r2, [r7, #23]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d913      	bls.n	800d2f8 <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	78da      	ldrb	r2, [r3, #3]
 800d2d4:	7dfb      	ldrb	r3, [r7, #23]
 800d2d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d2da:	fb02 f201 	mul.w	r2, r2, r1
 800d2de:	1a9b      	subs	r3, r3, r2
 800d2e0:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800d2e2:	6a3b      	ldr	r3, [r7, #32]
 800d2e4:	7a9b      	ldrb	r3, [r3, #10]
 800d2e6:	7d7a      	ldrb	r2, [r7, #21]
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d205      	bcs.n	800d2f8 <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800d2ec:	7d7a      	ldrb	r2, [r7, #21]
 800d2ee:	6a3b      	ldr	r3, [r7, #32]
 800d2f0:	3206      	adds	r2, #6
 800d2f2:	6839      	ldr	r1, [r7, #0]
 800d2f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800d2f8:	7dfb      	ldrb	r3, [r7, #23]
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800d2fe:	7dfa      	ldrb	r2, [r7, #23]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d306:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800d30c:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800d30e:	429a      	cmp	r2, r3
 800d310:	dbd4      	blt.n	800d2bc <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d312:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d316:	4618      	mov	r0, r3
 800d318:	3718      	adds	r7, #24
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}

0800d31e <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800d31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d322:	b096      	sub	sp, #88	; 0x58
 800d324:	af08      	add	r7, sp, #32
 800d326:	4604      	mov	r4, r0
 800d328:	4608      	mov	r0, r1
 800d32a:	4611      	mov	r1, r2
 800d32c:	461a      	mov	r2, r3
 800d32e:	4623      	mov	r3, r4
 800d330:	73fb      	strb	r3, [r7, #15]
 800d332:	4603      	mov	r3, r0
 800d334:	73bb      	strb	r3, [r7, #14]
 800d336:	460b      	mov	r3, r1
 800d338:	737b      	strb	r3, [r7, #13]
 800d33a:	4613      	mov	r3, r2
 800d33c:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800d33e:	2300      	movs	r3, #0
 800d340:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800d344:	2300      	movs	r3, #0
 800d346:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53LX_p_007    = 0;
 800d350:	2300      	movs	r3, #0
 800d352:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53LX_p_032    = 0;
 800d354:	2300      	movs	r3, #0
 800d356:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53LX_p_001    = 0;
 800d358:	2300      	movs	r3, #0
 800d35a:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 800d35c:	2300      	movs	r3, #0
 800d35e:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 800d360:	2300      	movs	r3, #0
 800d362:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800d364:	2300      	movs	r3, #0
 800d366:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800d368:	2300      	movs	r3, #0
 800d36a:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800d36c:	2300      	movs	r3, #0
 800d36e:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800d370:	7b7b      	ldrb	r3, [r7, #13]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d106      	bne.n	800d384 <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800d376:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d37c:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800d37e:	f06f 030e 	mvn.w	r3, #14
 800d382:	e06f      	b.n	800d464 <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800d384:	7bfb      	ldrb	r3, [r7, #15]
 800d386:	7b7a      	ldrb	r2, [r7, #13]
 800d388:	fbb3 f1f2 	udiv	r1, r3, r2
 800d38c:	fb02 f201 	mul.w	r2, r2, r1
 800d390:	1a9b      	subs	r3, r3, r2
 800d392:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53LX_f_022(
 800d396:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d39a:	7b39      	ldrb	r1, [r7, #12]
 800d39c:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d3a0:	f107 0320 	add.w	r3, r7, #32
 800d3a4:	9301      	str	r3, [sp, #4]
 800d3a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d3aa:	9300      	str	r3, [sp, #0]
 800d3ac:	4613      	mov	r3, r2
 800d3ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d3b0:	f000 fda8 	bl	800df04 <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800d3b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d3b8:	7b39      	ldrb	r1, [r7, #12]
 800d3ba:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d3be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d3c2:	9301      	str	r3, [sp, #4]
 800d3c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d3c8:	9300      	str	r3, [sp, #0]
 800d3ca:	4613      	mov	r3, r2
 800d3cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d3ce:	f000 fd99 	bl	800df04 <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800d3d2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00e      	beq.n	800d3f8 <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800d3da:	f107 021c 	add.w	r2, r7, #28
 800d3de:	7b39      	ldrb	r1, [r7, #12]
 800d3e0:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d3e4:	f107 0314 	add.w	r3, r7, #20
 800d3e8:	9301      	str	r3, [sp, #4]
 800d3ea:	f107 0318 	add.w	r3, r7, #24
 800d3ee:	9300      	str	r3, [sp, #0]
 800d3f0:	4613      	mov	r3, r2
 800d3f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d3f4:	f000 fd86 	bl	800df04 <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800d3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fa:	469c      	mov	ip, r3
 800d3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fe:	469e      	mov	lr, r3
 800d400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d402:	4698      	mov	r8, r3
 800d404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d406:	4619      	mov	r1, r3
 800d408:	6a3b      	ldr	r3, [r7, #32]
 800d40a:	461c      	mov	r4, r3
 800d40c:	69bb      	ldr	r3, [r7, #24]
 800d40e:	461d      	mov	r5, r3
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	461e      	mov	r6, r3
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800d418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d41a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53LX_f_023(
 800d41e:	607b      	str	r3, [r7, #4]
 800d420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d422:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d426:	7bb8      	ldrb	r0, [r7, #14]
 800d428:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d42a:	9207      	str	r2, [sp, #28]
 800d42c:	9306      	str	r3, [sp, #24]
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	9205      	str	r2, [sp, #20]
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	9304      	str	r3, [sp, #16]
 800d436:	9603      	str	r6, [sp, #12]
 800d438:	9502      	str	r5, [sp, #8]
 800d43a:	9401      	str	r4, [sp, #4]
 800d43c:	9100      	str	r1, [sp, #0]
 800d43e:	4643      	mov	r3, r8
 800d440:	4672      	mov	r2, lr
 800d442:	4661      	mov	r1, ip
 800d444:	f002 fee6 	bl	8010214 <VL53LX_f_023>
 800d448:	4603      	mov	r3, r0
 800d44a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800d44e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800d452:	f113 0f0f 	cmn.w	r3, #15
 800d456:	d103      	bne.n	800d460 <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800d458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d45a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d45e:	801a      	strh	r2, [r3, #0]


	return status;
 800d460:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d464:	4618      	mov	r0, r3
 800d466:	3738      	adds	r7, #56	; 0x38
 800d468:	46bd      	mov	sp, r7
 800d46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d46e <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800d46e:	b490      	push	{r4, r7}
 800d470:	b084      	sub	sp, #16
 800d472:	af00      	add	r7, sp, #0
 800d474:	4604      	mov	r4, r0
 800d476:	4608      	mov	r0, r1
 800d478:	4611      	mov	r1, r2
 800d47a:	461a      	mov	r2, r3
 800d47c:	4623      	mov	r3, r4
 800d47e:	71fb      	strb	r3, [r7, #7]
 800d480:	4603      	mov	r3, r0
 800d482:	71bb      	strb	r3, [r7, #6]
 800d484:	460b      	mov	r3, r1
 800d486:	717b      	strb	r3, [r7, #5]
 800d488:	4613      	mov	r3, r2
 800d48a:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800d48c:	2300      	movs	r3, #0
 800d48e:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800d490:	2300      	movs	r3, #0
 800d492:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800d494:	6a3b      	ldr	r3, [r7, #32]
 800d496:	79fa      	ldrb	r2, [r7, #7]
 800d498:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800d49a:	6a3b      	ldr	r3, [r7, #32]
 800d49c:	2200      	movs	r2, #0
 800d49e:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	781a      	ldrb	r2, [r3, #0]
 800d4a4:	6a3b      	ldr	r3, [r7, #32]
 800d4a6:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	785a      	ldrb	r2, [r3, #1]
 800d4ac:	6a3b      	ldr	r3, [r7, #32]
 800d4ae:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	789a      	ldrb	r2, [r3, #2]
 800d4b4:	6a3b      	ldr	r3, [r7, #32]
 800d4b6:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	78da      	ldrb	r2, [r3, #3]
 800d4bc:	6a3b      	ldr	r3, [r7, #32]
 800d4be:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800d4c0:	69fb      	ldr	r3, [r7, #28]
 800d4c2:	791a      	ldrb	r2, [r3, #4]
 800d4c4:	6a3b      	ldr	r3, [r7, #32]
 800d4c6:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	795a      	ldrb	r2, [r3, #5]
 800d4cc:	6a3b      	ldr	r3, [r7, #32]
 800d4ce:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	791a      	ldrb	r2, [r3, #4]
 800d4d4:	69fb      	ldr	r3, [r7, #28]
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	3301      	adds	r3, #1
 800d4de:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800d4e0:	6a3b      	ldr	r3, [r7, #32]
 800d4e2:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800d4e4:	69bb      	ldr	r3, [r7, #24]
 800d4e6:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800d4ea:	6a3b      	ldr	r3, [r7, #32]
 800d4ec:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800d4ee:	69fb      	ldr	r3, [r7, #28]
 800d4f0:	8c1a      	ldrh	r2, [r3, #32]
 800d4f2:	6a3b      	ldr	r3, [r7, #32]
 800d4f4:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800d4f6:	69fb      	ldr	r3, [r7, #28]
 800d4f8:	695b      	ldr	r3, [r3, #20]
 800d4fa:	b29a      	uxth	r2, r3
 800d4fc:	6a3b      	ldr	r3, [r7, #32]
 800d4fe:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	699b      	ldr	r3, [r3, #24]
 800d504:	b29a      	uxth	r2, r3
 800d506:	6a3b      	ldr	r3, [r7, #32]
 800d508:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800d50c:	69fb      	ldr	r3, [r7, #28]
 800d50e:	69db      	ldr	r3, [r3, #28]
 800d510:	b29a      	uxth	r2, r3
 800d512:	6a3b      	ldr	r3, [r7, #32]
 800d514:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	461a      	mov	r2, r3
 800d51e:	6a3b      	ldr	r3, [r7, #32]
 800d520:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800d522:	69fb      	ldr	r3, [r7, #28]
 800d524:	691a      	ldr	r2, [r3, #16]
 800d526:	6a3b      	ldr	r3, [r7, #32]
 800d528:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800d52a:	69fb      	ldr	r3, [r7, #28]
 800d52c:	689b      	ldr	r3, [r3, #8]
 800d52e:	461a      	mov	r2, r3
 800d530:	6a3b      	ldr	r3, [r7, #32]
 800d532:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800d534:	69bb      	ldr	r3, [r7, #24]
 800d536:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d53a:	6a3b      	ldr	r3, [r7, #32]
 800d53c:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800d53e:	6a3b      	ldr	r3, [r7, #32]
 800d540:	2213      	movs	r2, #19
 800d542:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 800d546:	887b      	ldrh	r3, [r7, #2]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d00a      	beq.n	800d562 <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	8c1b      	ldrh	r3, [r3, #32]
 800d550:	461a      	mov	r2, r3
 800d552:	887b      	ldrh	r3, [r7, #2]
 800d554:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800d556:	429a      	cmp	r2, r3
 800d558:	d903      	bls.n	800d562 <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800d55a:	6a3b      	ldr	r3, [r7, #32]
 800d55c:	2206      	movs	r2, #6
 800d55e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800d562:	79bb      	ldrb	r3, [r7, #6]
 800d564:	b29b      	uxth	r3, r3
 800d566:	021b      	lsls	r3, r3, #8
 800d568:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800d56a:	6a3b      	ldr	r3, [r7, #32]
 800d56c:	8a9b      	ldrh	r3, [r3, #20]
 800d56e:	89fa      	ldrh	r2, [r7, #14]
 800d570:	429a      	cmp	r2, r3
 800d572:	d205      	bcs.n	800d580 <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800d574:	6a3b      	ldr	r3, [r7, #32]
 800d576:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800d578:	89fb      	ldrh	r3, [r7, #14]
 800d57a:	1ad3      	subs	r3, r2, r3
 800d57c:	81fb      	strh	r3, [r7, #14]
 800d57e:	e001      	b.n	800d584 <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800d580:	2300      	movs	r3, #0
 800d582:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800d584:	797b      	ldrb	r3, [r7, #5]
 800d586:	b29b      	uxth	r3, r3
 800d588:	021b      	lsls	r3, r3, #8
 800d58a:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800d58c:	69bb      	ldr	r3, [r7, #24]
 800d58e:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800d592:	89bb      	ldrh	r3, [r7, #12]
 800d594:	4413      	add	r3, r2
 800d596:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d598:	6a3b      	ldr	r3, [r7, #32]
 800d59a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d59e:	89fa      	ldrh	r2, [r7, #14]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d805      	bhi.n	800d5b0 <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800d5a4:	6a3b      	ldr	r3, [r7, #32]
 800d5a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d5aa:	89ba      	ldrh	r2, [r7, #12]
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d203      	bcs.n	800d5b8 <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800d5b0:	6a3b      	ldr	r3, [r7, #32]
 800d5b2:	2205      	movs	r2, #5
 800d5b4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 800d5b8:	bf00      	nop
 800d5ba:	3710      	adds	r7, #16
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bc90      	pop	{r4, r7}
 800d5c0:	4770      	bx	lr

0800d5c2 <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800d5c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5c4:	b08f      	sub	sp, #60	; 0x3c
 800d5c6:	af06      	add	r7, sp, #24
 800d5c8:	60f8      	str	r0, [r7, #12]
 800d5ca:	60b9      	str	r1, [r7, #8]
 800d5cc:	607a      	str	r2, [r7, #4]
 800d5ce:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800d5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5da:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d5de:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800d5e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d5e2:	f7ff f879 	bl	800c6d8 <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800d5e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5e8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 800d5ec:	22ac      	movs	r2, #172	; 0xac
 800d5ee:	6839      	ldr	r1, [r7, #0]
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f006 febb 	bl	801436c <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	781a      	ldrb	r2, [r3, #0]
 800d5fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5fc:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	785a      	ldrb	r2, [r3, #1]
 800d602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d604:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	789a      	ldrb	r2, [r3, #2]
 800d60a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d60c:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800d614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d616:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800d618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d61a:	2200      	movs	r2, #0
 800d61c:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800d61e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d620:	2204      	movs	r2, #4
 800d622:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800d624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d626:	2200      	movs	r2, #0
 800d628:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d62a:	2300      	movs	r3, #0
 800d62c:	77bb      	strb	r3, [r7, #30]
 800d62e:	e008      	b.n	800d642 <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800d630:	7fbb      	ldrb	r3, [r7, #30]
 800d632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d634:	005b      	lsls	r3, r3, #1
 800d636:	4413      	add	r3, r2
 800d638:	2200      	movs	r2, #0
 800d63a:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d63c:	7fbb      	ldrb	r3, [r7, #30]
 800d63e:	3301      	adds	r3, #1
 800d640:	77bb      	strb	r3, [r7, #30]
 800d642:	7fbb      	ldrb	r3, [r7, #30]
 800d644:	2b04      	cmp	r3, #4
 800d646:	d9f3      	bls.n	800d630 <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800d648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d64a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fe f8b9 	bl	800b7c6 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800d658:	461a      	mov	r2, r3
 800d65a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d65c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d660:	4619      	mov	r1, r3
 800d662:	4610      	mov	r0, r2
 800d664:	f7fe f8ef 	bl	800b846 <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800d668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d66a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d66e:	4618      	mov	r0, r3
 800d670:	f7fe fcb9 	bl	800bfe6 <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800d674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d676:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fe f95d 	bl	800b93a <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d686:	2b00      	cmp	r3, #0
 800d688:	d009      	beq.n	800d69e <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800d68a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d68c:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d692:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800d696:	461a      	mov	r2, r3
 800d698:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d69a:	f000 fd7b 	bl	800e194 <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	77bb      	strb	r3, [r7, #30]
 800d6aa:	e01e      	b.n	800d6ea <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800d6ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d117      	bne.n	800d6e4 <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800d6b4:	7fbb      	ldrb	r3, [r7, #30]
 800d6b6:	68ba      	ldr	r2, [r7, #8]
 800d6b8:	3304      	adds	r3, #4
 800d6ba:	005b      	lsls	r3, r3, #1
 800d6bc:	4413      	add	r3, r2
 800d6be:	8898      	ldrh	r0, [r3, #4]
 800d6c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6c2:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800d6c6:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800d6c8:	005b      	lsls	r3, r3, #1
 800d6ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6cc:	4413      	add	r3, r2
 800d6ce:	3304      	adds	r3, #4
 800d6d0:	9301      	str	r3, [sp, #4]
 800d6d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6d4:	9300      	str	r3, [sp, #0]
 800d6d6:	460b      	mov	r3, r1
 800d6d8:	68ba      	ldr	r2, [r7, #8]
 800d6da:	68f9      	ldr	r1, [r7, #12]
 800d6dc:	f7fe fcce 	bl	800c07c <VL53LX_f_001>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d6e4:	7fbb      	ldrb	r3, [r7, #30]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	77bb      	strb	r3, [r7, #30]
 800d6ea:	7fbb      	ldrb	r3, [r7, #30]
 800d6ec:	2b04      	cmp	r3, #4
 800d6ee:	d9dd      	bls.n	800d6ac <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800d6f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d11a      	bne.n	800d72e <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800d700:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 800d70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d70e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d712:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d714:	f502 7252 	add.w	r2, r2, #840	; 0x348
 800d718:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d71a:	9102      	str	r1, [sp, #8]
 800d71c:	9201      	str	r2, [sp, #4]
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	462b      	mov	r3, r5
 800d722:	4622      	mov	r2, r4
 800d724:	4631      	mov	r1, r6
 800d726:	f7ff f850 	bl	800c7ca <VL53LX_f_006>
 800d72a:	4603      	mov	r3, r0
 800d72c:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800d72e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d104      	bne.n	800d740 <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800d736:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d738:	f7ff f972 	bl	800ca20 <VL53LX_f_007>
 800d73c:	4603      	mov	r3, r0
 800d73e:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800d740:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d104      	bne.n	800d752 <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800d748:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d74a:	f7ff f9b7 	bl	800cabc <VL53LX_f_008>
 800d74e:	4603      	mov	r3, r0
 800d750:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800d752:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d104      	bne.n	800d764 <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800d75a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d75c:	f7ff fa2c 	bl	800cbb8 <VL53LX_f_009>
 800d760:	4603      	mov	r3, r0
 800d762:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d764:	2300      	movs	r3, #0
 800d766:	77bb      	strb	r3, [r7, #30]
 800d768:	e0a6      	b.n	800d8b8 <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800d76a:	7fba      	ldrb	r2, [r7, #30]
 800d76c:	4613      	mov	r3, r2
 800d76e:	00db      	lsls	r3, r3, #3
 800d770:	4413      	add	r3, r2
 800d772:	009b      	lsls	r3, r3, #2
 800d774:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d778:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d77a:	4413      	add	r3, r2
 800d77c:	3304      	adds	r3, #4
 800d77e:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800d780:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d109      	bne.n	800d79c <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800d788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d78a:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d78e:	7fbb      	ldrb	r3, [r7, #30]
 800d790:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d792:	4618      	mov	r0, r3
 800d794:	f7ff fb66 	bl	800ce64 <VL53LX_f_010>
 800d798:	4603      	mov	r3, r0
 800d79a:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800d79c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d110      	bne.n	800d7c6 <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800d7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7a6:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d7aa:	69bb      	ldr	r3, [r7, #24]
 800d7ac:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800d7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7b2:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800d7b6:	7fb8      	ldrb	r0, [r7, #30]
 800d7b8:	9300      	str	r3, [sp, #0]
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7be:	f7ff fd5a 	bl	800d276 <VL53LX_f_011>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800d7c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d10d      	bne.n	800d7ea <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800d7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7d0:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d7d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7d6:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800d7da:	7fb8      	ldrb	r0, [r7, #30]
 800d7dc:	9300      	str	r3, [sp, #0]
 800d7de:	2300      	movs	r3, #0
 800d7e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7e2:	f7ff fd48 	bl	800d276 <VL53LX_f_011>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800d7ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d10d      	bne.n	800d80e <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800d7f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7f4:	f503 7152 	add.w	r1, r3, #840	; 0x348
 800d7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7fa:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800d7fe:	7fb8      	ldrb	r0, [r7, #30]
 800d800:	9300      	str	r3, [sp, #0]
 800d802:	2300      	movs	r3, #0
 800d804:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d806:	f7ff fd36 	bl	800d276 <VL53LX_f_011>
 800d80a:	4603      	mov	r3, r0
 800d80c:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800d80e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d109      	bne.n	800d82a <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800d816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d818:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 800d81c:	7fb8      	ldrb	r0, [r7, #30]
 800d81e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d820:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d822:	f000 f8dd 	bl	800d9e0 <VL53LX_f_026>
 800d826:	4603      	mov	r3, r0
 800d828:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800d82a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d108      	bne.n	800d844 <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	8a19      	ldrh	r1, [r3, #16]
 800d836:	7fb8      	ldrb	r0, [r7, #30]
 800d838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d83a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d83c:	f000 f95c 	bl	800daf8 <VL53LX_f_027>
 800d840:	4603      	mov	r3, r0
 800d842:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800d844:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d124      	bne.n	800d896 <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	789d      	ldrb	r5, [r3, #2]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	7e1e      	ldrb	r6, [r3, #24]
 800d854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d856:	f893 c003 	ldrb.w	ip, [r3, #3]
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	f893 e006 	ldrb.w	lr, [r3, #6]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d866:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d868:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 800d86c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d86e:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 800d872:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d874:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 800d878:	697c      	ldr	r4, [r7, #20]
 800d87a:	3420      	adds	r4, #32
 800d87c:	9404      	str	r4, [sp, #16]
 800d87e:	9003      	str	r0, [sp, #12]
 800d880:	9102      	str	r1, [sp, #8]
 800d882:	9201      	str	r2, [sp, #4]
 800d884:	9300      	str	r3, [sp, #0]
 800d886:	4673      	mov	r3, lr
 800d888:	4662      	mov	r2, ip
 800d88a:	4631      	mov	r1, r6
 800d88c:	4628      	mov	r0, r5
 800d88e:	f7ff fd46 	bl	800d31e <VL53LX_f_014>
 800d892:	4603      	mov	r3, r0
 800d894:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800d896:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d109      	bne.n	800d8b2 <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800d89e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8a0:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 800d8a4:	7fb8      	ldrb	r0, [r7, #30]
 800d8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8a8:	2101      	movs	r1, #1
 800d8aa:	f7ff fb2e 	bl	800cf0a <VL53LX_f_015>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d8b2:	7fbb      	ldrb	r3, [r7, #30]
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	77bb      	strb	r3, [r7, #30]
 800d8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ba:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800d8be:	7fba      	ldrb	r2, [r7, #30]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	f4ff af52 	bcc.w	800d76a <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800d8c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d107      	bne.n	800d8de <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	785b      	ldrb	r3, [r3, #1]
 800d8d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7ff fa41 	bl	800cd5c <VL53LX_f_016>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d8de:	2300      	movs	r3, #0
 800d8e0:	77bb      	strb	r3, [r7, #30]
 800d8e2:	e071      	b.n	800d9c8 <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800d8e4:	7fba      	ldrb	r2, [r7, #30]
 800d8e6:	4613      	mov	r3, r2
 800d8e8:	00db      	lsls	r3, r3, #3
 800d8ea:	4413      	add	r3, r2
 800d8ec:	009b      	lsls	r3, r3, #2
 800d8ee:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d8f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d8f4:	4413      	add	r3, r2
 800d8f6:	3304      	adds	r3, #4
 800d8f8:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800d8fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8fc:	7c9a      	ldrb	r2, [r3, #18]
 800d8fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d900:	7c5b      	ldrb	r3, [r3, #17]
 800d902:	429a      	cmp	r2, r3
 800d904:	d25c      	bcs.n	800d9c0 <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800d90e:	429a      	cmp	r2, r3
 800d910:	dd57      	ble.n	800d9c2 <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800d916:	2bff      	cmp	r3, #255	; 0xff
 800d918:	d053      	beq.n	800d9c2 <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800d91a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d91c:	7c9b      	ldrb	r3, [r3, #18]
 800d91e:	461a      	mov	r2, r3
			prange_data =
 800d920:	234c      	movs	r3, #76	; 0x4c
 800d922:	fb03 f302 	mul.w	r3, r3, r2
 800d926:	3310      	adds	r3, #16
 800d928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d92a:	4413      	add	r3, r2
 800d92c:	3304      	adds	r3, #4
 800d92e:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800d930:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d115      	bne.n	800d964 <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800d938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d93a:	7c98      	ldrb	r0, [r3, #18]
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f893 1020 	ldrb.w	r1, [r3, #32]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	8b5d      	ldrh	r5, [r3, #26]
 800d94c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d94e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d952:	693a      	ldr	r2, [r7, #16]
 800d954:	9202      	str	r2, [sp, #8]
 800d956:	697a      	ldr	r2, [r7, #20]
 800d958:	9201      	str	r2, [sp, #4]
 800d95a:	9300      	str	r3, [sp, #0]
 800d95c:	462b      	mov	r3, r5
 800d95e:	4622      	mov	r2, r4
 800d960:	f7ff fd85 	bl	800d46e <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800d964:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d115      	bne.n	800d998 <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800d96c:	69bb      	ldr	r3, [r7, #24]
 800d96e:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 800d972:	69bb      	ldr	r3, [r7, #24]
 800d974:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 800d978:	69bb      	ldr	r3, [r7, #24]
 800d97a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d97e:	69bb      	ldr	r3, [r7, #24]
 800d980:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 800d984:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d988:	9301      	str	r3, [sp, #4]
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	9300      	str	r3, [sp, #0]
 800d98e:	4623      	mov	r3, r4
 800d990:	f000 fb11 	bl	800dfb6 <VL53LX_f_018>
 800d994:	4603      	mov	r3, r0
 800d996:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800d998:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d108      	bne.n	800d9b2 <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	8bd8      	ldrh	r0, [r3, #30]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800d9aa:	693a      	ldr	r2, [r7, #16]
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	f000 fba7 	bl	800e100 <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800d9b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9b4:	7c9b      	ldrb	r3, [r3, #18]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	b2da      	uxtb	r2, r3
 800d9ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9bc:	749a      	strb	r2, [r3, #18]
 800d9be:	e000      	b.n	800d9c2 <VL53LX_f_025+0x400>
			continue;
 800d9c0:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d9c2:	7fbb      	ldrb	r3, [r7, #30]
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	77bb      	strb	r3, [r7, #30]
 800d9c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ca:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800d9ce:	7fba      	ldrb	r2, [r7, #30]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d387      	bcc.n	800d8e4 <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800d9d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3724      	adds	r7, #36	; 0x24
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d9e0 <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b08c      	sub	sp, #48	; 0x30
 800d9e4:	af02      	add	r7, sp, #8
 800d9e6:	60b9      	str	r1, [r7, #8]
 800d9e8:	607a      	str	r2, [r7, #4]
 800d9ea:	603b      	str	r3, [r7, #0]
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800d9f6:	7bfa      	ldrb	r2, [r7, #15]
 800d9f8:	4613      	mov	r3, r2
 800d9fa:	00db      	lsls	r3, r3, #3
 800d9fc:	4413      	add	r3, r2
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	4413      	add	r3, r2
 800da08:	3304      	adds	r3, #4
 800da0a:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800da0c:	2300      	movs	r3, #0
 800da0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 800da12:	2300      	movs	r3, #0
 800da14:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800da16:	2300      	movs	r3, #0
 800da18:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800da1a:	2300      	movs	r3, #0
 800da1c:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800da1e:	2300      	movs	r3, #0
 800da20:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	785a      	ldrb	r2, [r3, #1]
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	781a      	ldrb	r2, [r3, #0]
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	789a      	ldrb	r2, [r3, #2]
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800da3a:	6a3b      	ldr	r3, [r7, #32]
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da42:	e04d      	b.n	800dae0 <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	78da      	ldrb	r2, [r3, #3]
 800da48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800da50:	fb02 f201 	mul.w	r2, r2, r1
 800da54:	1a9b      	subs	r3, r3, r2
 800da56:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800da58:	6a3b      	ldr	r3, [r7, #32]
 800da5a:	7999      	ldrb	r1, [r3, #6]
 800da5c:	f107 0218 	add.w	r2, r7, #24
 800da60:	7ff8      	ldrb	r0, [r7, #31]
 800da62:	f107 0310 	add.w	r3, r7, #16
 800da66:	9301      	str	r3, [sp, #4]
 800da68:	f107 0314 	add.w	r3, r7, #20
 800da6c:	9300      	str	r3, [sp, #0]
 800da6e:	4613      	mov	r3, r2
 800da70:	68ba      	ldr	r2, [r7, #8]
 800da72:	f000 fa47 	bl	800df04 <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800da76:	7ffb      	ldrb	r3, [r7, #31]
 800da78:	69ba      	ldr	r2, [r7, #24]
 800da7a:	6839      	ldr	r1, [r7, #0]
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	440b      	add	r3, r1
 800da80:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800da82:	7ffb      	ldrb	r3, [r7, #31]
 800da84:	697a      	ldr	r2, [r7, #20]
 800da86:	6839      	ldr	r1, [r7, #0]
 800da88:	3318      	adds	r3, #24
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	440b      	add	r3, r1
 800da8e:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800da90:	7ffb      	ldrb	r3, [r7, #31]
 800da92:	693a      	ldr	r2, [r7, #16]
 800da94:	6839      	ldr	r1, [r7, #0]
 800da96:	3330      	adds	r3, #48	; 0x30
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	440b      	add	r3, r1
 800da9c:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800da9e:	69ba      	ldr	r2, [r7, #24]
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	689a      	ldr	r2, [r3, #8]
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800daac:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800daae:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800dab0:	6839      	ldr	r1, [r7, #0]
 800dab2:	3348      	adds	r3, #72	; 0x48
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	440b      	add	r3, r1
 800dab8:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800daba:	697a      	ldr	r2, [r7, #20]
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	689a      	ldr	r2, [r3, #8]
 800dac4:	69bb      	ldr	r3, [r7, #24]
 800dac6:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800dac8:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800daca:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800dacc:	6839      	ldr	r1, [r7, #0]
 800dace:	3360      	adds	r3, #96	; 0x60
 800dad0:	009b      	lsls	r3, r3, #2
 800dad2:	440b      	add	r3, r1
 800dad4:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800dad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dada:	3301      	adds	r3, #1
 800dadc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dae0:	6a3b      	ldr	r3, [r7, #32]
 800dae2:	791b      	ldrb	r3, [r3, #4]
 800dae4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dae8:	429a      	cmp	r2, r3
 800daea:	d9ab      	bls.n	800da44 <VL53LX_f_026+0x64>
	}

	return status;
 800daec:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3728      	adds	r7, #40	; 0x28
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800daf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dafa:	b08f      	sub	sp, #60	; 0x3c
 800dafc:	af06      	add	r7, sp, #24
 800dafe:	60ba      	str	r2, [r7, #8]
 800db00:	607b      	str	r3, [r7, #4]
 800db02:	4603      	mov	r3, r0
 800db04:	73fb      	strb	r3, [r7, #15]
 800db06:	460b      	mov	r3, r1
 800db08:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800db0a:	2300      	movs	r3, #0
 800db0c:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800db0e:	2300      	movs	r3, #0
 800db10:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800db12:	7bfa      	ldrb	r2, [r7, #15]
 800db14:	4613      	mov	r3, r2
 800db16:	00db      	lsls	r3, r3, #3
 800db18:	4413      	add	r3, r2
 800db1a:	009b      	lsls	r3, r3, #2
 800db1c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	4413      	add	r3, r2
 800db24:	3304      	adds	r3, #4
 800db26:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800db28:	2300      	movs	r3, #0
 800db2a:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800db2c:	2300      	movs	r3, #0
 800db2e:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800db30:	2300      	movs	r3, #0
 800db32:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	77fb      	strb	r3, [r7, #31]
 800db3a:	e0b9      	b.n	800dcb0 <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	78da      	ldrb	r2, [r3, #3]
 800db40:	7ffb      	ldrb	r3, [r7, #31]
 800db42:	fbb3 f1f2 	udiv	r1, r3, r2
 800db46:	fb02 f201 	mul.w	r2, r2, r1
 800db4a:	1a9b      	subs	r3, r3, r2
 800db4c:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800db4e:	7ffb      	ldrb	r3, [r7, #31]
 800db50:	3301      	adds	r3, #1
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	78d2      	ldrb	r2, [r2, #3]
 800db56:	fb93 f1f2 	sdiv	r1, r3, r2
 800db5a:	fb02 f201 	mul.w	r2, r2, r1
 800db5e:	1a9b      	subs	r3, r3, r2
 800db60:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	789b      	ldrb	r3, [r3, #2]
 800db66:	7dfa      	ldrb	r2, [r7, #23]
 800db68:	429a      	cmp	r2, r3
 800db6a:	f080 809e 	bcs.w	800dcaa <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800db72:	7dba      	ldrb	r2, [r7, #22]
 800db74:	429a      	cmp	r2, r3
 800db76:	f080 8098 	bcs.w	800dcaa <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800db7a:	7dfb      	ldrb	r3, [r7, #23]
 800db7c:	68ba      	ldr	r2, [r7, #8]
 800db7e:	3348      	adds	r3, #72	; 0x48
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	4413      	add	r3, r2
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d10e      	bne.n	800dba8 <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800db8a:	7dfb      	ldrb	r3, [r7, #23]
 800db8c:	68ba      	ldr	r2, [r7, #8]
 800db8e:	3360      	adds	r3, #96	; 0x60
 800db90:	009b      	lsls	r3, r3, #2
 800db92:	4413      	add	r3, r2
 800db94:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800db96:	2b00      	cmp	r3, #0
 800db98:	d106      	bne.n	800dba8 <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800db9a:	7dfb      	ldrb	r3, [r7, #23]
 800db9c:	68ba      	ldr	r2, [r7, #8]
 800db9e:	4413      	add	r3, r2
 800dba0:	2200      	movs	r2, #0
 800dba2:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800dba6:	e043      	b.n	800dc30 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800dba8:	7dfb      	ldrb	r3, [r7, #23]
 800dbaa:	68ba      	ldr	r2, [r7, #8]
 800dbac:	3348      	adds	r3, #72	; 0x48
 800dbae:	009b      	lsls	r3, r3, #2
 800dbb0:	4413      	add	r3, r2
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	db0e      	blt.n	800dbd6 <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800dbb8:	7dfb      	ldrb	r3, [r7, #23]
 800dbba:	68ba      	ldr	r2, [r7, #8]
 800dbbc:	3360      	adds	r3, #96	; 0x60
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	4413      	add	r3, r2
 800dbc2:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	db06      	blt.n	800dbd6 <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800dbc8:	7dfb      	ldrb	r3, [r7, #23]
 800dbca:	68ba      	ldr	r2, [r7, #8]
 800dbcc:	4413      	add	r3, r2
 800dbce:	2201      	movs	r2, #1
 800dbd0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800dbd4:	e02c      	b.n	800dc30 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800dbd6:	7dfb      	ldrb	r3, [r7, #23]
 800dbd8:	68ba      	ldr	r2, [r7, #8]
 800dbda:	3348      	adds	r3, #72	; 0x48
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	4413      	add	r3, r2
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	da1e      	bge.n	800dc24 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800dbe6:	7dfb      	ldrb	r3, [r7, #23]
 800dbe8:	68ba      	ldr	r2, [r7, #8]
 800dbea:	3360      	adds	r3, #96	; 0x60
 800dbec:	009b      	lsls	r3, r3, #2
 800dbee:	4413      	add	r3, r2
 800dbf0:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	db16      	blt.n	800dc24 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800dbf6:	7dbb      	ldrb	r3, [r7, #22]
 800dbf8:	68ba      	ldr	r2, [r7, #8]
 800dbfa:	3348      	adds	r3, #72	; 0x48
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	4413      	add	r3, r2
 800dc00:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	db0e      	blt.n	800dc24 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800dc06:	7dbb      	ldrb	r3, [r7, #22]
 800dc08:	68ba      	ldr	r2, [r7, #8]
 800dc0a:	3360      	adds	r3, #96	; 0x60
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	4413      	add	r3, r2
 800dc10:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	da06      	bge.n	800dc24 <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800dc16:	7dfb      	ldrb	r3, [r7, #23]
 800dc18:	68ba      	ldr	r2, [r7, #8]
 800dc1a:	4413      	add	r3, r2
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800dc22:	e005      	b.n	800dc30 <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800dc24:	7dfb      	ldrb	r3, [r7, #23]
 800dc26:	68ba      	ldr	r2, [r7, #8]
 800dc28:	4413      	add	r3, r2
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800dc30:	7dfb      	ldrb	r3, [r7, #23]
 800dc32:	68ba      	ldr	r2, [r7, #8]
 800dc34:	4413      	add	r3, r2
 800dc36:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d035      	beq.n	800dcaa <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800dc3e:	69bb      	ldr	r3, [r7, #24]
 800dc40:	7ffa      	ldrb	r2, [r7, #31]
 800dc42:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800dc44:	7dfb      	ldrb	r3, [r7, #23]
 800dc46:	68ba      	ldr	r2, [r7, #8]
 800dc48:	009b      	lsls	r3, r3, #2
 800dc4a:	4413      	add	r3, r2
 800dc4c:	685c      	ldr	r4, [r3, #4]
 800dc4e:	7dfb      	ldrb	r3, [r7, #23]
 800dc50:	68ba      	ldr	r2, [r7, #8]
 800dc52:	3318      	adds	r3, #24
 800dc54:	009b      	lsls	r3, r3, #2
 800dc56:	4413      	add	r3, r2
 800dc58:	685d      	ldr	r5, [r3, #4]
 800dc5a:	7dfb      	ldrb	r3, [r7, #23]
 800dc5c:	68ba      	ldr	r2, [r7, #8]
 800dc5e:	3330      	adds	r3, #48	; 0x30
 800dc60:	009b      	lsls	r3, r3, #2
 800dc62:	4413      	add	r3, r2
 800dc64:	685e      	ldr	r6, [r3, #4]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	78d2      	ldrb	r2, [r2, #3]
 800dc6e:	69b9      	ldr	r1, [r7, #24]
 800dc70:	3118      	adds	r1, #24
 800dc72:	7ff8      	ldrb	r0, [r7, #31]
 800dc74:	9105      	str	r1, [sp, #20]
 800dc76:	9204      	str	r2, [sp, #16]
 800dc78:	9303      	str	r3, [sp, #12]
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	9302      	str	r3, [sp, #8]
 800dc7e:	2300      	movs	r3, #0
 800dc80:	9301      	str	r3, [sp, #4]
 800dc82:	2300      	movs	r3, #0
 800dc84:	9300      	str	r3, [sp, #0]
 800dc86:	4633      	mov	r3, r6
 800dc88:	462a      	mov	r2, r5
 800dc8a:	4621      	mov	r1, r4
 800dc8c:	f000 f81c 	bl	800dcc8 <VL53LX_f_028>
 800dc90:	4603      	mov	r3, r0
 800dc92:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800dc94:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dc98:	f113 0f0f 	cmn.w	r3, #15
 800dc9c:	d105      	bne.n	800dcaa <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800dc9e:	7dfb      	ldrb	r3, [r7, #23]
 800dca0:	68ba      	ldr	r2, [r7, #8]
 800dca2:	4413      	add	r3, r2
 800dca4:	2200      	movs	r2, #0
 800dca6:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800dcaa:	7ffb      	ldrb	r3, [r7, #31]
 800dcac:	3301      	adds	r3, #1
 800dcae:	77fb      	strb	r3, [r7, #31]
 800dcb0:	69bb      	ldr	r3, [r7, #24]
 800dcb2:	791b      	ldrb	r3, [r3, #4]
 800dcb4:	7ffa      	ldrb	r2, [r7, #31]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	f4ff af40 	bcc.w	800db3c <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800dcbc:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3724      	adds	r7, #36	; 0x24
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dcc8 <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800dcc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dccc:	b09e      	sub	sp, #120	; 0x78
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	64b9      	str	r1, [r7, #72]	; 0x48
 800dcd2:	647a      	str	r2, [r7, #68]	; 0x44
 800dcd4:	643b      	str	r3, [r7, #64]	; 0x40
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800dcdc:	23f1      	movs	r3, #241	; 0xf1
 800dcde:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800dce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dce6:	f04f 0300 	mov.w	r3, #0
 800dcea:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800dcee:	f04f 0200 	mov.w	r2, #0
 800dcf2:	f04f 0300 	mov.w	r3, #0
 800dcf6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  half_b_minus_amb = 0;
 800dcfa:	f04f 0200 	mov.w	r2, #0
 800dcfe:	f04f 0300 	mov.w	r3, #0
 800dd02:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800dd06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd08:	4618      	mov	r0, r3
 800dd0a:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800dd0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dd12:	461a      	mov	r2, r3
 800dd14:	ea4f 73e2 	mov.w	r3, r2, asr #31
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800dd18:	ebb0 0802 	subs.w	r8, r0, r2
 800dd1c:	eb61 0903 	sbc.w	r9, r1, r3
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800dd20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd22:	461a      	mov	r2, r3
 800dd24:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800dd28:	ebb8 0a02 	subs.w	sl, r8, r2
 800dd2c:	eb69 0b03 	sbc.w	fp, r9, r3
 800dd30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dd34:	461a      	mov	r2, r3
 800dd36:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800dd3a:	ebba 0402 	subs.w	r4, sl, r2
 800dd3e:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800dd42:	f04f 0200 	mov.w	r2, #0
 800dd46:	f04f 0300 	mov.w	r3, #0
 800dd4a:	032b      	lsls	r3, r5, #12
 800dd4c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800dd50:	0322      	lsls	r2, r4, #12
 800dd52:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800dd56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd58:	4618      	mov	r0, r3
 800dd5a:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800dd5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dd62:	461a      	mov	r2, r3
 800dd64:	ea4f 73e2 	mov.w	r3, r2, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800dd68:	1a84      	subs	r4, r0, r2
 800dd6a:	63bc      	str	r4, [r7, #56]	; 0x38
 800dd6c:	eb61 0303 	sbc.w	r3, r1, r3
 800dd70:	63fb      	str	r3, [r7, #60]	; 0x3c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800dd72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dd76:	461a      	mov	r2, r3
 800dd78:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800dd7c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800dd80:	4621      	mov	r1, r4
 800dd82:	1a89      	subs	r1, r1, r2
 800dd84:	6339      	str	r1, [r7, #48]	; 0x30
 800dd86:	4629      	mov	r1, r5
 800dd88:	eb61 0303 	sbc.w	r3, r1, r3
 800dd8c:	637b      	str	r3, [r7, #52]	; 0x34
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800dd8e:	f04f 0200 	mov.w	r2, #0
 800dd92:	f04f 0300 	mov.w	r3, #0
 800dd96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800dd9a:	4629      	mov	r1, r5
 800dd9c:	030b      	lsls	r3, r1, #12
 800dd9e:	4621      	mov	r1, r4
 800dda0:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800dda4:	4621      	mov	r1, r4
 800dda6:	030a      	lsls	r2, r1, #12
 800dda8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	if (half_b_minus_amb != 0) {
 800ddac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ddb0:	4313      	orrs	r3, r2
 800ddb2:	f000 809c 	beq.w	800deee <VL53LX_f_028+0x226>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800ddb6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800ddba:	f04f 0000 	mov.w	r0, #0
 800ddbe:	f04f 0100 	mov.w	r1, #0
 800ddc2:	0319      	lsls	r1, r3, #12
 800ddc4:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800ddc8:	0310      	lsls	r0, r2, #12
 800ddca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ddce:	1814      	adds	r4, r2, r0
 800ddd0:	623c      	str	r4, [r7, #32]
 800ddd2:	414b      	adcs	r3, r1
 800ddd4:	627b      	str	r3, [r7, #36]	; 0x24
 800ddd6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800ddda:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800ddde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dde2:	1891      	adds	r1, r2, r2
 800dde4:	61b9      	str	r1, [r7, #24]
 800dde6:	415b      	adcs	r3, r3
 800dde8:	61fb      	str	r3, [r7, #28]
 800ddea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ddee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ddf2:	f7f2 fa45 	bl	8000280 <__aeabi_ldivmod>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	460b      	mov	r3, r1
 800ddfa:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		mean_phase  +=  2048;
 800ddfe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800de02:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800de06:	6139      	str	r1, [r7, #16]
 800de08:	f143 0300 	adc.w	r3, r3, #0
 800de0c:	617b      	str	r3, [r7, #20]
 800de0e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800de12:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase  += (4096 * (int64_t)bin);
 800de16:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 800de1a:	f04f 0100 	mov.w	r1, #0
 800de1e:	f04f 0200 	mov.w	r2, #0
 800de22:	f04f 0300 	mov.w	r3, #0
 800de26:	030b      	lsls	r3, r1, #12
 800de28:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 800de2c:	0302      	lsls	r2, r0, #12
 800de2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800de32:	1884      	adds	r4, r0, r2
 800de34:	60bc      	str	r4, [r7, #8]
 800de36:	eb41 0303 	adc.w	r3, r1, r3
 800de3a:	60fb      	str	r3, [r7, #12]
 800de3c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800de40:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800de44:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800de48:	1c51      	adds	r1, r2, #1
 800de4a:	62b9      	str	r1, [r7, #40]	; 0x28
 800de4c:	f143 0300 	adc.w	r3, r3, #0
 800de50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de52:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800de56:	462b      	mov	r3, r5
 800de58:	0fdb      	lsrs	r3, r3, #31
 800de5a:	461a      	mov	r2, r3
 800de5c:	f04f 0300 	mov.w	r3, #0
 800de60:	4621      	mov	r1, r4
 800de62:	1851      	adds	r1, r2, r1
 800de64:	6039      	str	r1, [r7, #0]
 800de66:	4629      	mov	r1, r5
 800de68:	eb43 0101 	adc.w	r1, r3, r1
 800de6c:	6079      	str	r1, [r7, #4]
 800de6e:	f04f 0200 	mov.w	r2, #0
 800de72:	f04f 0300 	mov.w	r3, #0
 800de76:	e9d7 4500 	ldrd	r4, r5, [r7]
 800de7a:	4621      	mov	r1, r4
 800de7c:	084a      	lsrs	r2, r1, #1
 800de7e:	4629      	mov	r1, r5
 800de80:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800de84:	4629      	mov	r1, r5
 800de86:	104b      	asrs	r3, r1, #1
 800de88:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		if (mean_phase  < 0)
 800de8c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800de90:	2a00      	cmp	r2, #0
 800de92:	f173 0300 	sbcs.w	r3, r3, #0
 800de96:	da05      	bge.n	800dea4 <VL53LX_f_028+0x1dc>
			mean_phase = 0;
 800de98:	f04f 0200 	mov.w	r2, #0
 800de9c:	f04f 0300 	mov.w	r3, #0
 800dea0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800dea4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800dea8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800deac:	f04f 0100 	mov.w	r1, #0
 800deb0:	4290      	cmp	r0, r2
 800deb2:	eb71 0303 	sbcs.w	r3, r1, r3
 800deb6:	da05      	bge.n	800dec4 <VL53LX_f_028+0x1fc>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800deb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800debc:	f04f 0300 	mov.w	r3, #0
 800dec0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		mean_phase32 = (int32_t)mean_phase;
 800dec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dec6:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800dec8:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800decc:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800dece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ded0:	fb93 f1f2 	sdiv	r1, r3, r2
 800ded4:	fb02 f201 	mul.w	r2, r2, r1
 800ded8:	1a9b      	subs	r3, r3, r2
 800deda:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase = mean_phase32;
 800dedc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dede:	461a      	mov	r2, r3
 800dee0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800dee4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		status = VL53LX_ERROR_NONE;
 800dee8:	2300      	movs	r3, #0
 800deea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	}

	*pmean_phase = (uint32_t)mean_phase;
 800deee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800def0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800def4:	601a      	str	r2, [r3, #0]

	return status;
 800def6:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800defa:	4618      	mov	r0, r3
 800defc:	3778      	adds	r7, #120	; 0x78
 800defe:	46bd      	mov	sp, r7
 800df00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800df04 <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800df04:	b480      	push	{r7}
 800df06:	b087      	sub	sp, #28
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60ba      	str	r2, [r7, #8]
 800df0c:	607b      	str	r3, [r7, #4]
 800df0e:	4603      	mov	r3, r0
 800df10:	73fb      	strb	r3, [r7, #15]
 800df12:	460b      	mov	r3, r1
 800df14:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800df16:	2300      	movs	r3, #0
 800df18:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800df1a:	2300      	movs	r3, #0
 800df1c:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2200      	movs	r2, #0
 800df22:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800df24:	7bfa      	ldrb	r2, [r7, #15]
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	3206      	adds	r2, #6
 800df2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800df2e:	6a3b      	ldr	r3, [r7, #32]
 800df30:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800df32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df34:	2200      	movs	r2, #0
 800df36:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800df38:	2300      	movs	r3, #0
 800df3a:	75fb      	strb	r3, [r7, #23]
 800df3c:	e02f      	b.n	800df9e <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800df3e:	7bfa      	ldrb	r2, [r7, #15]
 800df40:	7dfb      	ldrb	r3, [r7, #23]
 800df42:	4413      	add	r3, r2
 800df44:	68ba      	ldr	r2, [r7, #8]
 800df46:	7a92      	ldrb	r2, [r2, #10]
 800df48:	441a      	add	r2, r3
 800df4a:	7bbb      	ldrb	r3, [r7, #14]
 800df4c:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800df4e:	68ba      	ldr	r2, [r7, #8]
 800df50:	7a92      	ldrb	r2, [r2, #10]
 800df52:	fb93 f1f2 	sdiv	r1, r3, r2
 800df56:	fb02 f201 	mul.w	r2, r2, r1
 800df5a:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800df5c:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800df5e:	7dfa      	ldrb	r2, [r7, #23]
 800df60:	7bbb      	ldrb	r3, [r7, #14]
 800df62:	429a      	cmp	r2, r3
 800df64:	d20a      	bcs.n	800df7c <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	7db9      	ldrb	r1, [r7, #22]
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	3106      	adds	r1, #6
 800df70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df74:	441a      	add	r2, r3
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	601a      	str	r2, [r3, #0]
 800df7a:	e00d      	b.n	800df98 <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800df7c:	7dfa      	ldrb	r2, [r7, #23]
 800df7e:	7bbb      	ldrb	r3, [r7, #14]
 800df80:	429a      	cmp	r2, r3
 800df82:	d909      	bls.n	800df98 <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800df84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df86:	681a      	ldr	r2, [r3, #0]
 800df88:	7db9      	ldrb	r1, [r7, #22]
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	3106      	adds	r1, #6
 800df8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df92:	441a      	add	r2, r3
 800df94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df96:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800df98:	7dfb      	ldrb	r3, [r7, #23]
 800df9a:	3301      	adds	r3, #1
 800df9c:	75fb      	strb	r3, [r7, #23]
 800df9e:	7bbb      	ldrb	r3, [r7, #14]
 800dfa0:	005a      	lsls	r2, r3, #1
 800dfa2:	7dfb      	ldrb	r3, [r7, #23]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	daca      	bge.n	800df3e <VL53LX_f_022+0x3a>
	}
}
 800dfa8:	bf00      	nop
 800dfaa:	bf00      	nop
 800dfac:	371c      	adds	r7, #28
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr

0800dfb6 <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800dfb6:	b580      	push	{r7, lr}
 800dfb8:	b088      	sub	sp, #32
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	60ba      	str	r2, [r7, #8]
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	81fb      	strh	r3, [r7, #14]
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	81bb      	strh	r3, [r7, #12]
 800dfc8:	4613      	mov	r3, r2
 800dfca:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800dfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfde:	89fa      	ldrh	r2, [r7, #14]
 800dfe0:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800dfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe4:	89ba      	ldrh	r2, [r7, #12]
 800dfe6:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800dfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfea:	68ba      	ldr	r2, [r7, #8]
 800dfec:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800dfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff0:	88fa      	ldrh	r2, [r7, #6]
 800dff2:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800dff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff6:	8a5b      	ldrh	r3, [r3, #18]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d101      	bne.n	800e000 <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800dffc:	23f1      	movs	r3, #241	; 0xf1
 800dffe:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800e000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e002:	699b      	ldr	r3, [r3, #24]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d101      	bne.n	800e00c <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e008:	23f1      	movs	r3, #241	; 0xf1
 800e00a:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800e00c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d16f      	bne.n	800e0f4 <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800e014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e016:	8a5b      	ldrh	r3, [r3, #18]
 800e018:	4618      	mov	r0, r3
 800e01a:	f7fd faa6 	bl	800b56a <VL53LX_calc_pll_period_us>
 800e01e:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800e020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e022:	699b      	ldr	r3, [r3, #24]
 800e024:	3301      	adds	r3, #1
 800e026:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800e028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02a:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800e02c:	4619      	mov	r1, r3
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e034:	6978      	ldr	r0, [r7, #20]
 800e036:	f7fd faaf 	bl	800b598 <VL53LX_duration_maths>
 800e03a:	4602      	mov	r2, r0
 800e03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03e:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800e040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e042:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800e044:	0119      	lsls	r1, r3, #4
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e04c:	6978      	ldr	r0, [r7, #20]
 800e04e:	f7fd faa3 	bl	800b598 <VL53LX_duration_maths>
 800e052:	4602      	mov	r2, r0
 800e054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e056:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800e05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05e:	69db      	ldr	r3, [r3, #28]
 800e060:	4619      	mov	r1, r3
 800e062:	4610      	mov	r0, r2
 800e064:	f7fd fd01 	bl	800ba6a <VL53LX_rate_maths>
 800e068:	4603      	mov	r3, r0
 800e06a:	461a      	mov	r2, r3
 800e06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06e:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800e074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e076:	6a1b      	ldr	r3, [r3, #32]
 800e078:	4619      	mov	r1, r3
 800e07a:	4610      	mov	r0, r2
 800e07c:	f7fd fcf5 	bl	800ba6a <VL53LX_rate_maths>
 800e080:	4603      	mov	r3, r0
 800e082:	461a      	mov	r2, r3
 800e084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e086:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800e088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800e08c:	461a      	mov	r2, r3
 800e08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e090:	6a1b      	ldr	r3, [r3, #32]
 800e092:	4619      	mov	r1, r3
 800e094:	4610      	mov	r0, r2
 800e096:	f7fd fce8 	bl	800ba6a <VL53LX_rate_maths>
 800e09a:	4603      	mov	r3, r0
 800e09c:	461a      	mov	r2, r3
 800e09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a0:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800e0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800e0a6:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800e0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0aa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 800e0ac:	4413      	add	r3, r2
 800e0ae:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800e0b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d905      	bls.n	800e0c4 <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800e0b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e0bc:	69ba      	ldr	r2, [r7, #24]
 800e0be:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0c2:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800e0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c6:	8ada      	ldrh	r2, [r3, #22]
 800e0c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e0cc:	69b9      	ldr	r1, [r7, #24]
 800e0ce:	2006      	movs	r0, #6
 800e0d0:	f7fd fd10 	bl	800baf4 <VL53LX_rate_per_spad_maths>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800e0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0da:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800e0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e2:	8ad9      	ldrh	r1, [r3, #22]
 800e0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e6:	69db      	ldr	r3, [r3, #28]
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	f7fd faaf 	bl	800b64c <VL53LX_events_per_spad_maths>
 800e0ee:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800e0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f2:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800e0f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3720      	adds	r7, #32
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800e100:	b590      	push	{r4, r7, lr}
 800e102:	b085      	sub	sp, #20
 800e104:	af02      	add	r7, sp, #8
 800e106:	4603      	mov	r3, r0
 800e108:	603a      	str	r2, [r7, #0]
 800e10a:	80fb      	strh	r3, [r7, #6]
 800e10c:	460b      	mov	r3, r1
 800e10e:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	8a58      	ldrh	r0, [r3, #18]
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	8a9c      	ldrh	r4, [r3, #20]
 800e11c:	88fb      	ldrh	r3, [r7, #6]
 800e11e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e122:	9201      	str	r2, [sp, #4]
 800e124:	9300      	str	r3, [sp, #0]
 800e126:	2300      	movs	r3, #0
 800e128:	4622      	mov	r2, r4
 800e12a:	f7fd fd17 	bl	800bb5c <VL53LX_range_maths>
 800e12e:	4603      	mov	r3, r0
 800e130:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	8a58      	ldrh	r0, [r3, #18]
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	8a9c      	ldrh	r4, [r3, #20]
 800e146:	88fb      	ldrh	r3, [r7, #6]
 800e148:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e14c:	9201      	str	r2, [sp, #4]
 800e14e:	9300      	str	r3, [sp, #0]
 800e150:	2300      	movs	r3, #0
 800e152:	4622      	mov	r2, r4
 800e154:	f7fd fd02 	bl	800bb5c <VL53LX_range_maths>
 800e158:	4603      	mov	r3, r0
 800e15a:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	8a58      	ldrh	r0, [r3, #18]
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	8a9c      	ldrh	r4, [r3, #20]
 800e170:	88fb      	ldrh	r3, [r7, #6]
 800e172:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e176:	9201      	str	r2, [sp, #4]
 800e178:	9300      	str	r3, [sp, #0]
 800e17a:	2300      	movs	r3, #0
 800e17c:	4622      	mov	r2, r4
 800e17e:	f7fd fced 	bl	800bb5c <VL53LX_range_maths>
 800e182:	4603      	mov	r3, r0
 800e184:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 800e18c:	bf00      	nop
 800e18e:	370c      	adds	r7, #12
 800e190:	46bd      	mov	sp, r7
 800e192:	bd90      	pop	{r4, r7, pc}

0800e194 <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b086      	sub	sp, #24
 800e198:	af00      	add	r7, sp, #0
 800e19a:	60f8      	str	r0, [r7, #12]
 800e19c:	60b9      	str	r1, [r7, #8]
 800e19e:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	757b      	strb	r3, [r7, #21]





	memcpy(
 800e1b0:	22ac      	movs	r2, #172	; 0xac
 800e1b2:	68b9      	ldr	r1, [r7, #8]
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f006 f8d9 	bl	801436c <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	75fb      	strb	r3, [r7, #23]
 800e1be:	e008      	b.n	800e1d2 <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800e1c0:	7dfa      	ldrb	r2, [r7, #23]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	3206      	adds	r2, #6
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800e1cc:	7dfb      	ldrb	r3, [r7, #23]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	75fb      	strb	r3, [r7, #23]
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	7a5b      	ldrb	r3, [r3, #9]
 800e1d6:	7dfa      	ldrb	r2, [r7, #23]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d3f1      	bcc.n	800e1c0 <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800e1dc:	68f9      	ldr	r1, [r7, #12]
 800e1de:	68b8      	ldr	r0, [r7, #8]
 800e1e0:	f000 f878 	bl	800e2d4 <VL53LX_f_030>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	7a9a      	ldrb	r2, [r3, #10]
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	7a9b      	ldrb	r3, [r3, #10]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d203      	bcs.n	800e1fc <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	7a9b      	ldrb	r3, [r3, #10]
 800e1f8:	75bb      	strb	r3, [r7, #22]
 800e1fa:	e002      	b.n	800e202 <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	7a9b      	ldrb	r3, [r3, #10]
 800e200:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800e202:	2300      	movs	r3, #0
 800e204:	75fb      	strb	r3, [r7, #23]
 800e206:	e05c      	b.n	800e2c2 <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800e208:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	db0f      	blt.n	800e230 <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800e210:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e214:	461a      	mov	r2, r3
 800e216:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e21a:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800e21c:	68ba      	ldr	r2, [r7, #8]
 800e21e:	7a92      	ldrb	r2, [r2, #10]
 800e220:	b252      	sxtb	r2, r2
 800e222:	fb93 f1f2 	sdiv	r1, r3, r2
 800e226:	fb02 f201 	mul.w	r2, r2, r1
 800e22a:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800e22c:	757b      	strb	r3, [r7, #21]
 800e22e:	e013      	b.n	800e258 <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	7a9b      	ldrb	r3, [r3, #10]
 800e234:	b25b      	sxtb	r3, r3
 800e236:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800e238:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e23c:	4619      	mov	r1, r3
 800e23e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e242:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e244:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800e246:	68ba      	ldr	r2, [r7, #8]
 800e248:	7a92      	ldrb	r2, [r2, #10]
 800e24a:	b252      	sxtb	r2, r2
 800e24c:	fb93 f1f2 	sdiv	r1, r3, r2
 800e250:	fb02 f201 	mul.w	r2, r2, r1
 800e254:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e256:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800e258:	7d7b      	ldrb	r3, [r7, #21]
 800e25a:	461a      	mov	r2, r3
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	3206      	adds	r2, #6
 800e260:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800e264:	7df9      	ldrb	r1, [r7, #23]
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	3106      	adds	r1, #6
 800e26a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800e26e:	429a      	cmp	r2, r3
 800e270:	dd12      	ble.n	800e298 <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800e272:	7d7b      	ldrb	r3, [r7, #21]
 800e274:	461a      	mov	r2, r3
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	3206      	adds	r2, #6
 800e27a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800e27e:	7df9      	ldrb	r1, [r7, #23]
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	3106      	adds	r1, #6
 800e284:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800e288:	7d79      	ldrb	r1, [r7, #21]
 800e28a:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800e28c:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	1d82      	adds	r2, r0, #6
 800e292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e296:	e006      	b.n	800e2a6 <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800e298:	7d7b      	ldrb	r3, [r7, #21]
 800e29a:	461a      	mov	r2, r3
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	3206      	adds	r2, #6
 800e2a0:	2100      	movs	r1, #0
 800e2a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800e2a6:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e2a8:	7d7b      	ldrb	r3, [r7, #21]
 800e2aa:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	3206      	adds	r2, #6
 800e2b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	1d82      	adds	r2, r0, #6
 800e2b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800e2bc:	7dfb      	ldrb	r3, [r7, #23]
 800e2be:	3301      	adds	r3, #1
 800e2c0:	75fb      	strb	r3, [r7, #23]
 800e2c2:	7dfa      	ldrb	r2, [r7, #23]
 800e2c4:	7dbb      	ldrb	r3, [r7, #22]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d39e      	bcc.n	800e208 <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800e2ca:	bf00      	nop
 800e2cc:	bf00      	nop
 800e2ce:	3718      	adds	r7, #24
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b086      	sub	sp, #24
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7fd fd0b 	bl	800bd10 <VL53LX_decode_vcsel_period>
 800e2fa:	4603      	mov	r3, r0
	period = 2048 *
 800e2fc:	02db      	lsls	r3, r3, #11
 800e2fe:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d00a      	beq.n	800e31c <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 800e30c:	68ba      	ldr	r2, [r7, #8]
 800e30e:	fbb3 f2f2 	udiv	r2, r3, r2
 800e312:	68b9      	ldr	r1, [r7, #8]
 800e314:	fb01 f202 	mul.w	r2, r1, r2
 800e318:	1a9b      	subs	r3, r3, r2
 800e31a:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800e322:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800e324:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e326:	1ad3      	subs	r3, r2, r3
 800e328:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	dd09      	ble.n	800e344 <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e336:	2b00      	cmp	r3, #0
 800e338:	da01      	bge.n	800e33e <VL53LX_f_030+0x6a>
 800e33a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800e33e:	12db      	asrs	r3, r3, #11
 800e340:	75fb      	strb	r3, [r7, #23]
 800e342:	e008      	b.n	800e356 <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	da01      	bge.n	800e352 <VL53LX_f_030+0x7e>
 800e34e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800e352:	12db      	asrs	r3, r3, #11
 800e354:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800e356:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3718      	adds	r7, #24
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b08e      	sub	sp, #56	; 0x38
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
 800e36a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e36c:	2300      	movs	r3, #0
 800e36e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800e372:	2300      	movs	r3, #0
 800e374:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 800e378:	2300      	movs	r3, #0
 800e37a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 800e37e:	2300      	movs	r3, #0
 800e380:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800e382:	2300      	movs	r3, #0
 800e384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 800e388:	2300      	movs	r3, #0
 800e38a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 800e38e:	2300      	movs	r3, #0
 800e390:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800e394:	22ac      	movs	r2, #172	; 0xac
 800e396:	6879      	ldr	r1, [r7, #4]
 800e398:	6838      	ldr	r0, [r7, #0]
 800e39a:	f005 ffe7 	bl	801436c <memcpy>


	podata->VL53LX_p_021 = 0;
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e3aa:	e00a      	b.n	800e3c2 <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800e3ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e3b0:	683a      	ldr	r2, [r7, #0]
 800e3b2:	4413      	add	r3, r2
 800e3b4:	2210      	movs	r2, #16
 800e3b6:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e3b8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e3bc:	3301      	adds	r3, #1
 800e3be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e3c2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e3c6:	2b05      	cmp	r3, #5
 800e3c8:	d9f0      	bls.n	800e3ac <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e3d0:	e00b      	b.n	800e3ea <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800e3d2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	3206      	adds	r2, #6
 800e3da:	2100      	movs	r1, #0
 800e3dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e3e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	7a5b      	ldrb	r3, [r3, #9]
 800e3ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d3ed      	bcc.n	800e3d2 <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e3fc:	e014      	b.n	800e428 <VL53LX_f_031+0xc6>
		bin_initial_index[lc] = 0x00;
 800e3fe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e402:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e406:	4413      	add	r3, r2
 800e408:	2200      	movs	r2, #0
 800e40a:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800e40e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e412:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e416:	4413      	add	r3, r2
 800e418:	2200      	movs	r2, #0
 800e41a:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e41e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e422:	3301      	adds	r3, #1
 800e424:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e428:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e42c:	2b0f      	cmp	r3, #15
 800e42e:	d9e6      	bls.n	800e3fe <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800e430:	2300      	movs	r3, #0
 800e432:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e436:	2300      	movs	r3, #0
 800e438:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e43c:	e06c      	b.n	800e518 <VL53LX_f_031+0x1b6>

		bin_cfg = pidata->bin_seq[lc];
 800e43e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e442:	687a      	ldr	r2, [r7, #4]
 800e444:	4413      	add	r3, r2
 800e446:	7b1b      	ldrb	r3, [r3, #12]
 800e448:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800e44c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e450:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e454:	4413      	add	r3, r2
 800e456:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d116      	bne.n	800e48c <VL53LX_f_031+0x12a>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800e45e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e462:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e466:	0092      	lsls	r2, r2, #2
 800e468:	b2d2      	uxtb	r2, r2
 800e46a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e46e:	440b      	add	r3, r1
 800e470:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800e474:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e478:	683a      	ldr	r2, [r7, #0]
 800e47a:	4413      	add	r3, r2
 800e47c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e480:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800e482:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e486:	3301      	adds	r3, #1
 800e488:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800e48c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e490:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e494:	441a      	add	r2, r3
 800e496:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800e49a:	3201      	adds	r2, #1
 800e49c:	b2d2      	uxtb	r2, r2
 800e49e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e4a2:	440b      	add	r3, r1
 800e4a4:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800e4a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e4ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e4b0:	4413      	add	r3, r2
 800e4b2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e4b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e4c0:	e021      	b.n	800e506 <VL53LX_f_031+0x1a4>
			podata->bin_data[VL53LX_p_032+i] +=
 800e4c2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e4c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e4ca:	441a      	add	r2, r3
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	3206      	adds	r2, #6
 800e4d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800e4d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e4d8:	009a      	lsls	r2, r3, #2
 800e4da:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e4de:	441a      	add	r2, r3
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	3206      	adds	r2, #6
 800e4e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800e4e8:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 800e4ec:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e4f0:	4402      	add	r2, r0
 800e4f2:	4419      	add	r1, r3
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	3206      	adds	r2, #6
 800e4f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800e4fc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e500:	3301      	adds	r3, #1
 800e502:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e506:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e50a:	2b03      	cmp	r3, #3
 800e50c:	d9d9      	bls.n	800e4c2 <VL53LX_f_031+0x160>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e50e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e512:	3301      	adds	r3, #1
 800e514:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e518:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e51c:	2b05      	cmp	r3, #5
 800e51e:	d98e      	bls.n	800e43e <VL53LX_f_031+0xdc>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e520:	2300      	movs	r3, #0
 800e522:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e526:	e023      	b.n	800e570 <VL53LX_f_031+0x20e>

		bin_cfg = podata->bin_seq[lc];
 800e528:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e52c:	683a      	ldr	r2, [r7, #0]
 800e52e:	4413      	add	r3, r2
 800e530:	7b1b      	ldrb	r3, [r3, #12]
 800e532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800e536:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e53a:	2b0f      	cmp	r3, #15
 800e53c:	d80d      	bhi.n	800e55a <VL53LX_f_031+0x1f8>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800e53e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 800e542:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 800e546:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e54a:	440a      	add	r2, r1
 800e54c:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800e550:	683a      	ldr	r2, [r7, #0]
 800e552:	4413      	add	r3, r2
 800e554:	460a      	mov	r2, r1
 800e556:	749a      	strb	r2, [r3, #18]
 800e558:	e005      	b.n	800e566 <VL53LX_f_031+0x204>
		else
			podata->bin_rep[lc] = 0;
 800e55a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e55e:	683a      	ldr	r2, [r7, #0]
 800e560:	4413      	add	r3, r2
 800e562:	2200      	movs	r2, #0
 800e564:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e566:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e56a:	3301      	adds	r3, #1
 800e56c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e570:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e574:	2b05      	cmp	r3, #5
 800e576:	d9d7      	bls.n	800e528 <VL53LX_f_031+0x1c6>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800e578:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e57c:	009b      	lsls	r3, r3, #2
 800e57e:	b2da      	uxtb	r2, r3
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e584:	2300      	movs	r3, #0
 800e586:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e58a:	e052      	b.n	800e632 <VL53LX_f_031+0x2d0>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800e58c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e590:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e594:	4413      	add	r3, r2
 800e596:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e59a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 800e59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	dd42      	ble.n	800e628 <VL53LX_f_031+0x2c6>

			VL53LX_p_032 = bin_initial_index[lc];
 800e5a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e5a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e5aa:	4413      	add	r3, r2
 800e5ac:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e5b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e5ba:	e031      	b.n	800e620 <VL53LX_f_031+0x2be>
				podata->bin_data[VL53LX_p_032+i] +=
 800e5bc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e5c0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e5c4:	441a      	add	r2, r3
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	3206      	adds	r2, #6
 800e5ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800e5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d0:	0fda      	lsrs	r2, r3, #31
 800e5d2:	4413      	add	r3, r2
 800e5d4:	105b      	asrs	r3, r3, #1
 800e5d6:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800e5d8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e5dc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e5e0:	441a      	add	r2, r3
 800e5e2:	4401      	add	r1, r0
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	3206      	adds	r2, #6
 800e5e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800e5ec:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e5f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e5f4:	441a      	add	r2, r3
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	3206      	adds	r2, #6
 800e5fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e5fe:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e602:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e606:	441a      	add	r2, r3
 800e608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60a:	fb91 f1f3 	sdiv	r1, r1, r3
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	3206      	adds	r2, #6
 800e612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800e616:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e61a:	3301      	adds	r3, #1
 800e61c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e620:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e624:	2b03      	cmp	r3, #3
 800e626:	d9c9      	bls.n	800e5bc <VL53LX_f_031+0x25a>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e628:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e62c:	3301      	adds	r3, #1
 800e62e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e632:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e636:	2b0f      	cmp	r3, #15
 800e638:	d9a8      	bls.n	800e58c <VL53LX_f_031+0x22a>
		}
	}



	podata->number_of_ambient_bins = 0;
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	2200      	movs	r2, #0
 800e63e:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800e640:	7bfb      	ldrb	r3, [r7, #15]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d102      	bne.n	800e64c <VL53LX_f_031+0x2ea>
		(bin_repeat_count[15] > 0))
 800e646:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d002      	beq.n	800e652 <VL53LX_f_031+0x2f0>
		podata->number_of_ambient_bins = 4;
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	2204      	movs	r2, #4
 800e650:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800e652:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 800e656:	4618      	mov	r0, r3
 800e658:	3738      	adds	r7, #56	; 0x38
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800e65e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e660:	b0cb      	sub	sp, #300	; 0x12c
 800e662:	af06      	add	r7, sp, #24
 800e664:	f107 040c 	add.w	r4, r7, #12
 800e668:	6020      	str	r0, [r4, #0]
 800e66a:	f107 0008 	add.w	r0, r7, #8
 800e66e:	6001      	str	r1, [r0, #0]
 800e670:	1d39      	adds	r1, r7, #4
 800e672:	600a      	str	r2, [r1, #0]
 800e674:	463a      	mov	r2, r7
 800e676:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e678:	2300      	movs	r3, #0
 800e67a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800e67e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e682:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800e686:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e68a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800e68e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800e692:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800e696:	f107 0318 	add.w	r3, r7, #24
 800e69a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800e6c6:	463b      	mov	r3, r7
 800e6c8:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800e6cc:	6818      	ldr	r0, [r3, #0]
 800e6ce:	f7ff fe48 	bl	800e362 <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800e6d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6d6:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800e6d8:	b299      	uxth	r1, r3
 800e6da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6de:	3348      	adds	r3, #72	; 0x48
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	2000      	movs	r0, #0
 800e6e4:	f7fd fb65 	bl	800bdb2 <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800e6e8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e6ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e6f0:	3348      	adds	r3, #72	; 0x48
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	4610      	mov	r0, r2
 800e6f6:	f7fd fb1e 	bl	800bd36 <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800e6fa:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d12d      	bne.n	800e75e <VL53LX_hist_process_data+0x100>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800e702:	1d3b      	adds	r3, r7, #4
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d027      	beq.n	800e75e <VL53LX_hist_process_data+0x100>
		status =
		VL53LX_f_032(
 800e70e:	1d3b      	adds	r3, r7, #4
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800e714:	1d3b      	adds	r3, r7, #4
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 800e71c:	1d3b      	adds	r3, r7, #4
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 800e724:	463b      	mov	r3, r7
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800e72c:	463a      	mov	r2, r7
 800e72e:	6812      	ldr	r2, [r2, #0]
 800e730:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 800e734:	4639      	mov	r1, r7
 800e736:	6809      	ldr	r1, [r1, #0]
 800e738:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 800e73c:	f107 0014 	add.w	r0, r7, #20
 800e740:	9004      	str	r0, [sp, #16]
 800e742:	9103      	str	r1, [sp, #12]
 800e744:	9202      	str	r2, [sp, #8]
 800e746:	9301      	str	r3, [sp, #4]
 800e748:	2300      	movs	r3, #0
 800e74a:	9300      	str	r3, [sp, #0]
 800e74c:	2300      	movs	r3, #0
 800e74e:	4632      	mov	r2, r6
 800e750:	4629      	mov	r1, r5
 800e752:	4620      	mov	r0, r4
 800e754:	f002 f8bf 	bl	80108d6 <VL53LX_f_032>
 800e758:	4603      	mov	r3, r0
 800e75a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800e75e:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800e762:	2b00      	cmp	r3, #0
 800e764:	d112      	bne.n	800e78c <VL53LX_hist_process_data+0x12e>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800e766:	1d3b      	adds	r3, r7, #4
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d00c      	beq.n	800e78c <VL53LX_hist_process_data+0x12e>
		status =
			VL53LX_f_033(
 800e772:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800e776:	697a      	ldr	r2, [r7, #20]
 800e778:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e77c:	3348      	adds	r3, #72	; 0x48
 800e77e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800e782:	f002 faab 	bl	8010cdc <VL53LX_f_033>
 800e786:	4603      	mov	r3, r0
 800e788:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800e78c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e790:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 800e794:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e798:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 800e79c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e7a0:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53LX_p_004 =
 800e7a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e7a8:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800e7ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 800e7b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 800e7c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 800e7ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800e7da:	1d3b      	adds	r3, r7, #4
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d002      	beq.n	800e7ec <VL53LX_hist_process_data+0x18e>
		xtalk_enable = 1;
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800e7f2:	e0ef      	b.n	800e9d4 <VL53LX_hist_process_data+0x376>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800e7f4:	1d3b      	adds	r3, r7, #4
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800e7fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53LX_f_025(
 800e800:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e804:	3348      	adds	r3, #72	; 0x48
 800e806:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800e80a:	7814      	ldrb	r4, [r2, #0]
 800e80c:	1d3a      	adds	r2, r7, #4
 800e80e:	f107 0108 	add.w	r1, r7, #8
 800e812:	f107 000c 	add.w	r0, r7, #12
 800e816:	9405      	str	r4, [sp, #20]
 800e818:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800e81c:	9404      	str	r4, [sp, #16]
 800e81e:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 800e822:	9403      	str	r4, [sp, #12]
 800e824:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800e828:	9402      	str	r4, [sp, #8]
 800e82a:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800e82e:	9401      	str	r4, [sp, #4]
 800e830:	9300      	str	r3, [sp, #0]
 800e832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e836:	6812      	ldr	r2, [r2, #0]
 800e838:	6809      	ldr	r1, [r1, #0]
 800e83a:	6800      	ldr	r0, [r0, #0]
 800e83c:	f7fe fec1 	bl	800d5c2 <VL53LX_f_025>
 800e840:	4603      	mov	r3, r0
 800e842:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800e846:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	f040 80bc 	bne.w	800e9c8 <VL53LX_hist_process_data+0x36a>
 800e850:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800e854:	2b00      	cmp	r3, #0
 800e856:	f040 80b7 	bne.w	800e9c8 <VL53LX_hist_process_data+0x36a>
			continue;



		if (presults->active_results == 0) {
 800e85a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e85e:	7c9b      	ldrb	r3, [r3, #18]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d110      	bne.n	800e886 <VL53LX_hist_process_data+0x228>
			pdata = &(presults->VL53LX_p_003[0]);
 800e864:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e868:	3314      	adds	r3, #20
 800e86a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 800e86e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e872:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 800e874:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e878:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 800e87a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e87e:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 800e880:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e884:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800e886:	1d3b      	adds	r3, r7, #4
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800e88c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800e890:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	461a      	mov	r2, r3
 800e898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e89c:	fb02 f303 	mul.w	r3, r2, r3
 800e8a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 800e8a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e8a8:	011b      	lsls	r3, r3, #4
 800e8aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800e8b4:	e07f      	b.n	800e9b6 <VL53LX_hist_process_data+0x358>

			pdata = &(presults->VL53LX_p_003[t]);
 800e8b6:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800e8ba:	224c      	movs	r2, #76	; 0x4c
 800e8bc:	fb02 f303 	mul.w	r3, r2, r3
 800e8c0:	3310      	adds	r3, #16
 800e8c2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800e8c6:	4413      	add	r3, r2
 800e8c8:	3304      	adds	r3, #4
 800e8ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 800e8ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e8d2:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800e8d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e8da:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	dd0e      	ble.n	800e900 <VL53LX_hist_process_data+0x2a2>
				delta_mm =
					pdata->max_range_mm -
 800e8e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e8e6:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800e8ea:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 800e8ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e8f0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800e8f4:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800e8f6:	1ad3      	subs	r3, r2, r3
 800e8f8:	b29b      	uxth	r3, r3
				delta_mm =
 800e8fa:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800e8fe:	e00d      	b.n	800e91c <VL53LX_hist_process_data+0x2be>
			else
				delta_mm =
					pdata->min_range_mm -
 800e900:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e904:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800e908:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 800e90a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e90e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800e912:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 800e914:	1ad3      	subs	r3, r2, r3
 800e916:	b29b      	uxth	r3, r3
				delta_mm =
 800e918:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800e91c:	1d3b      	adds	r3, r7, #4
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 800e922:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800e926:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	461a      	mov	r2, r3
 800e92e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e932:	fb02 f303 	mul.w	r3, r2, r3
 800e936:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 800e93a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e93e:	015b      	lsls	r3, r3, #5
 800e940:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 800e944:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e948:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800e94c:	1d3b      	adds	r3, r7, #4
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 800e954:	429a      	cmp	r2, r3
 800e956:	dd29      	ble.n	800e9ac <VL53LX_hist_process_data+0x34e>
			pdata->median_range_mm  <
 800e958:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e95c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800e960:	1d3b      	adds	r3, r7, #4
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800e968:	429a      	cmp	r2, r3
 800e96a:	da1f      	bge.n	800e9ac <VL53LX_hist_process_data+0x34e>
			pdata->VL53LX_p_009 <
 800e96c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800e972:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800e976:	429a      	cmp	r2, r3
 800e978:	d918      	bls.n	800e9ac <VL53LX_hist_process_data+0x34e>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800e97a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e97e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e980:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 800e982:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e986:	4293      	cmp	r3, r2
 800e988:	d910      	bls.n	800e9ac <VL53LX_hist_process_data+0x34e>
			delta_mm <
 800e98a:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800e98e:	1d3a      	adds	r2, r7, #4
 800e990:	6812      	ldr	r2, [r2, #0]
 800e992:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800e994:	4293      	cmp	r3, r2
 800e996:	da09      	bge.n	800e9ac <VL53LX_hist_process_data+0x34e>



				memcpy(
					&(presults->xmonitor),
 800e998:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e99c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 800e9a0:	224c      	movs	r2, #76	; 0x4c
 800e9a2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f005 fce0 	bl	801436c <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 800e9ac:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800e9b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e9ba:	7c9b      	ldrb	r3, [r3, #18]
 800e9bc:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	f4ff af78 	bcc.w	800e8b6 <VL53LX_hist_process_data+0x258>
 800e9c6:	e000      	b.n	800e9ca <VL53LX_hist_process_data+0x36c>
			continue;
 800e9c8:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800e9ca:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800e9d4:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800e9d8:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	f67f af09 	bls.w	800e7f4 <VL53LX_hist_process_data+0x196>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800e9e2:	1d3b      	adds	r3, r7, #4
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800e9ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 800e9ee:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e9fc <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b086      	sub	sp, #24
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	60f8      	str	r0, [r7, #12]
 800ea04:	460b      	mov	r3, r1
 800ea06:	607a      	str	r2, [r7, #4]
 800ea08:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 800ea0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d104      	bne.n	800ea20 <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 800ea16:	68f8      	ldr	r0, [r7, #12]
 800ea18:	f7f9 fe88 	bl	800872c <VL53LX_disable_firmware>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 800ea20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d104      	bne.n	800ea32 <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 800ea28:	68f8      	ldr	r0, [r7, #12]
 800ea2a:	f7f9 feb0 	bl	800878e <VL53LX_enable_powerforce>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 800ea32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d105      	bne.n	800ea46 <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 800ea3a:	21fa      	movs	r1, #250	; 0xfa
 800ea3c:	68f8      	ldr	r0, [r7, #12]
 800ea3e:	f002 fb9d 	bl	801117c <VL53LX_WaitUs>
 800ea42:	4603      	mov	r3, r0
 800ea44:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 800ea46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d107      	bne.n	800ea5e <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 800ea4e:	2201      	movs	r2, #1
 800ea50:	f240 7181 	movw	r1, #1921	; 0x781
 800ea54:	68f8      	ldr	r0, [r7, #12]
 800ea56:	f002 fa9d 	bl	8010f94 <VL53LX_WrByte>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800ea5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d107      	bne.n	800ea76 <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 800ea66:	2205      	movs	r2, #5
 800ea68:	f240 6183 	movw	r1, #1667	; 0x683
 800ea6c:	68f8      	ldr	r0, [r7, #12]
 800ea6e:	f002 fa91 	bl	8010f94 <VL53LX_WrByte>
 800ea72:	4603      	mov	r3, r0
 800ea74:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 800ea76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d105      	bne.n	800ea8a <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 800ea7e:	6879      	ldr	r1, [r7, #4]
 800ea80:	68f8      	ldr	r0, [r7, #12]
 800ea82:	f002 fb7b 	bl	801117c <VL53LX_WaitUs>
 800ea86:	4603      	mov	r3, r0
 800ea88:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 800ea8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d107      	bne.n	800eaa2 <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 800ea92:	2201      	movs	r2, #1
 800ea94:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800ea98:	68f8      	ldr	r0, [r7, #12]
 800ea9a:	f002 fa7b 	bl	8010f94 <VL53LX_WrByte>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 800eaa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d108      	bne.n	800eabc <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 800eaaa:	897b      	ldrh	r3, [r7, #10]
 800eaac:	461a      	mov	r2, r3
 800eaae:	f240 7184 	movw	r1, #1924	; 0x784
 800eab2:	68f8      	ldr	r0, [r7, #12]
 800eab4:	f002 fa98 	bl	8010fe8 <VL53LX_WrWord>
 800eab8:	4603      	mov	r3, r0
 800eaba:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 800eabc:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3718      	adds	r7, #24
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b086      	sub	sp, #24
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	607b      	str	r3, [r7, #4]
 800ead2:	460b      	mov	r3, r1
 800ead4:	72fb      	strb	r3, [r7, #11]
 800ead6:	4613      	mov	r3, r2
 800ead8:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800eada:	2300      	movs	r3, #0
 800eadc:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 800eade:	2300      	movs	r3, #0
 800eae0:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800eae2:	7afb      	ldrb	r3, [r7, #11]
 800eae4:	75bb      	strb	r3, [r7, #22]
 800eae6:	e041      	b.n	800eb6c <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 800eae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d108      	bne.n	800eb02 <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 800eaf0:	7dbb      	ldrb	r3, [r7, #22]
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	f240 7194 	movw	r1, #1940	; 0x794
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	f002 fa4b 	bl	8010f94 <VL53LX_WrByte>
 800eafe:	4603      	mov	r3, r0
 800eb00:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 800eb02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d107      	bne.n	800eb1a <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	f240 7183 	movw	r1, #1923	; 0x783
 800eb10:	68f8      	ldr	r0, [r7, #12]
 800eb12:	f002 fa3f 	bl	8010f94 <VL53LX_WrByte>
 800eb16:	4603      	mov	r3, r0
 800eb18:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 800eb1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d105      	bne.n	800eb2e <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 800eb22:	2105      	movs	r1, #5
 800eb24:	68f8      	ldr	r0, [r7, #12]
 800eb26:	f002 fb29 	bl	801117c <VL53LX_WaitUs>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 800eb2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d107      	bne.n	800eb46 <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 800eb36:	2201      	movs	r2, #1
 800eb38:	f240 7183 	movw	r1, #1923	; 0x783
 800eb3c:	68f8      	ldr	r0, [r7, #12]
 800eb3e:	f002 fa29 	bl	8010f94 <VL53LX_WrByte>
 800eb42:	4603      	mov	r3, r0
 800eb44:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 800eb46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d108      	bne.n	800eb60 <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 800eb4e:	2304      	movs	r3, #4
 800eb50:	687a      	ldr	r2, [r7, #4]
 800eb52:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 800eb56:	68f8      	ldr	r0, [r7, #12]
 800eb58:	f002 f9e6 	bl	8010f28 <VL53LX_ReadMulti>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	3304      	adds	r3, #4
 800eb64:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800eb66:	7dbb      	ldrb	r3, [r7, #22]
 800eb68:	3301      	adds	r3, #1
 800eb6a:	75bb      	strb	r3, [r7, #22]
 800eb6c:	7dba      	ldrb	r2, [r7, #22]
 800eb6e:	7af9      	ldrb	r1, [r7, #11]
 800eb70:	7abb      	ldrb	r3, [r7, #10]
 800eb72:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 800eb74:	429a      	cmp	r2, r3
 800eb76:	dbb7      	blt.n	800eae8 <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 800eb78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	3718      	adds	r7, #24
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}

0800eb84 <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b084      	sub	sp, #16
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800eb90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d107      	bne.n	800eba8 <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 800eb98:	2201      	movs	r2, #1
 800eb9a:	f240 7183 	movw	r1, #1923	; 0x783
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f002 f9f8 	bl	8010f94 <VL53LX_WrByte>
 800eba4:	4603      	mov	r3, r0
 800eba6:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800eba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d107      	bne.n	800ebc0 <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	f240 7181 	movw	r1, #1921	; 0x781
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f002 f9ec 	bl	8010f94 <VL53LX_WrByte>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 800ebc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d104      	bne.n	800ebd2 <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f7f9 fdf2 	bl	80087b2 <VL53LX_disable_powerforce>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 800ebd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d104      	bne.n	800ebe4 <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f7f9 fd94 	bl	8008708 <VL53LX_enable_firmware>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800ebe4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3710      	adds	r7, #16
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b087      	sub	sp, #28
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	60b9      	str	r1, [r7, #8]
 800ebfa:	607a      	str	r2, [r7, #4]
 800ebfc:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 800ec02:	2300      	movs	r3, #0
 800ec04:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800ec06:	89fb      	ldrh	r3, [r7, #14]
 800ec08:	2b03      	cmp	r3, #3
 800ec0a:	d802      	bhi.n	800ec12 <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ec0c:	f06f 0308 	mvn.w	r3, #8
 800ec10:	e018      	b.n	800ec44 <VL53LX_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 800ec12:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec16:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	3302      	adds	r3, #2
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	8afa      	ldrh	r2, [r7, #22]
 800ec22:	1ad3      	subs	r3, r2, r3
 800ec24:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 800ec26:	8afb      	ldrh	r3, [r7, #22]
 800ec28:	2bff      	cmp	r3, #255	; 0xff
 800ec2a:	d901      	bls.n	800ec30 <VL53LX_nvm_decode_optical_centre+0x40>
		tmp = 0;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 800ec30:	8afb      	ldrh	r3, [r7, #22]
 800ec32:	b2da      	uxtb	r2, r3
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	78da      	ldrb	r2, [r3, #3]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	705a      	strb	r2, [r3, #1]

	return status;
 800ec40:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	371c      	adds	r7, #28
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr

0800ec50 <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 800ec50:	b590      	push	{r4, r7, lr}
 800ec52:	b087      	sub	sp, #28
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	4603      	mov	r3, r0
 800ec58:	60b9      	str	r1, [r7, #8]
 800ec5a:	607a      	str	r2, [r7, #4]
 800ec5c:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 800ec62:	2300      	movs	r3, #0
 800ec64:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 800ec66:	2300      	movs	r3, #0
 800ec68:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800ec6a:	89fb      	ldrh	r3, [r7, #14]
 800ec6c:	2b37      	cmp	r3, #55	; 0x37
 800ec6e:	d802      	bhi.n	800ec76 <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ec70:	f06f 0308 	mvn.w	r3, #8
 800ec74:	e03e      	b.n	800ecf4 <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800ec76:	68b9      	ldr	r1, [r7, #8]
 800ec78:	2002      	movs	r0, #2
 800ec7a:	f7f9 fc2b 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	3302      	adds	r3, #2
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	2002      	movs	r0, #2
 800ec8e:	f7f9 fc21 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800ec92:	4603      	mov	r3, r0
 800ec94:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 800ec9e:	099b      	lsrs	r3, r3, #6
 800eca0:	b29a      	uxth	r2, r3
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2219      	movs	r2, #25
 800ecaa:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2205      	movs	r2, #5
 800ecb0:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2205      	movs	r2, #5
 800ecb6:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	3304      	adds	r3, #4
 800ecbc:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	74fb      	strb	r3, [r7, #19]
 800ecc2:	e012      	b.n	800ecea <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 800ecc4:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 800ecc6:	6979      	ldr	r1, [r7, #20]
 800ecc8:	2002      	movs	r0, #2
 800ecca:	f7f9 fc03 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 800ecd2:	687a      	ldr	r2, [r7, #4]
 800ecd4:	1d23      	adds	r3, r4, #4
 800ecd6:	005b      	lsls	r3, r3, #1
 800ecd8:	4413      	add	r3, r2
 800ecda:	460a      	mov	r2, r1
 800ecdc:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	3302      	adds	r3, #2
 800ece2:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800ece4:	7cfb      	ldrb	r3, [r7, #19]
 800ece6:	3301      	adds	r3, #1
 800ece8:	74fb      	strb	r3, [r7, #19]
 800ecea:	7cfb      	ldrb	r3, [r7, #19]
 800ecec:	2b18      	cmp	r3, #24
 800ecee:	d9e9      	bls.n	800ecc4 <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 800ecf0:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	371c      	adds	r7, #28
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd90      	pop	{r4, r7, pc}

0800ecfc <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b086      	sub	sp, #24
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	4603      	mov	r3, r0
 800ed04:	60b9      	str	r1, [r7, #8]
 800ed06:	607a      	str	r2, [r7, #4]
 800ed08:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800ed0e:	89fb      	ldrh	r3, [r7, #14]
 800ed10:	2b07      	cmp	r3, #7
 800ed12:	d802      	bhi.n	800ed1a <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ed14:	f06f 0308 	mvn.w	r3, #8
 800ed18:	e027      	b.n	800ed6a <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800ed1a:	68b9      	ldr	r1, [r7, #8]
 800ed1c:	2002      	movs	r0, #2
 800ed1e:	f7f9 fbd9 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800ed22:	4603      	mov	r3, r0
 800ed24:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	3302      	adds	r3, #2
 800ed2e:	4619      	mov	r1, r3
 800ed30:	2002      	movs	r0, #2
 800ed32:	f7f9 fbcf 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800ed36:	4603      	mov	r3, r0
 800ed38:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	3304      	adds	r3, #4
 800ed42:	4619      	mov	r1, r3
 800ed44:	2002      	movs	r0, #2
 800ed46:	f7f9 fbc5 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	3306      	adds	r3, #6
 800ed56:	4619      	mov	r1, r3
 800ed58:	2002      	movs	r0, #2
 800ed5a:	f7f9 fbbb 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	80da      	strh	r2, [r3, #6]

	return status;
 800ed66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3718      	adds	r7, #24
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}

0800ed72 <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 800ed72:	b580      	push	{r7, lr}
 800ed74:	b086      	sub	sp, #24
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	4603      	mov	r3, r0
 800ed7a:	60b9      	str	r1, [r7, #8]
 800ed7c:	607a      	str	r2, [r7, #4]
 800ed7e:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ed80:	2300      	movs	r3, #0
 800ed82:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800ed84:	89fb      	ldrh	r3, [r7, #14]
 800ed86:	2b0f      	cmp	r3, #15
 800ed88:	d802      	bhi.n	800ed90 <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ed8a:	f06f 0308 	mvn.w	r3, #8
 800ed8e:	e04d      	b.n	800ee2c <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800ed90:	68b9      	ldr	r1, [r7, #8]
 800ed92:	2002      	movs	r0, #2
 800ed94:	f7f9 fb9e 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	789a      	ldrb	r2, [r3, #2]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	78da      	ldrb	r2, [r3, #3]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	3304      	adds	r3, #4
 800edb4:	4619      	mov	r1, r3
 800edb6:	2002      	movs	r0, #2
 800edb8:	f7f9 fb8c 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800edbc:	4603      	mov	r3, r0
 800edbe:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	3306      	adds	r3, #6
 800edc8:	4619      	mov	r1, r3
 800edca:	2002      	movs	r0, #2
 800edcc:	f7f9 fb82 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800edd0:	4603      	mov	r3, r0
 800edd2:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	3308      	adds	r3, #8
 800eddc:	4619      	mov	r1, r3
 800edde:	2002      	movs	r0, #2
 800ede0:	f7f9 fb78 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800ede4:	4603      	mov	r3, r0
 800ede6:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	330a      	adds	r3, #10
 800edf0:	4619      	mov	r1, r3
 800edf2:	2002      	movs	r0, #2
 800edf4:	f7f9 fb6e 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800edf8:	4603      	mov	r3, r0
 800edfa:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	330c      	adds	r3, #12
 800ee04:	4619      	mov	r1, r3
 800ee06:	2002      	movs	r0, #2
 800ee08:	f7f9 fb64 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	330e      	adds	r3, #14
 800ee18:	4619      	mov	r1, r3
 800ee1a:	2002      	movs	r0, #2
 800ee1c:	f7f9 fb5a 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800ee20:	4603      	mov	r3, r0
 800ee22:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	81da      	strh	r2, [r3, #14]

	return status;
 800ee28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3718      	adds	r7, #24
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b086      	sub	sp, #24
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	607b      	str	r3, [r7, #4]
 800ee3e:	460b      	mov	r3, r1
 800ee40:	72fb      	strb	r3, [r7, #11]
 800ee42:	4613      	mov	r3, r2
 800ee44:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ee46:	2300      	movs	r3, #0
 800ee48:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800ee4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d106      	bne.n	800ee60 <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 800ee52:	2232      	movs	r2, #50	; 0x32
 800ee54:	2104      	movs	r1, #4
 800ee56:	68f8      	ldr	r0, [r7, #12]
 800ee58:	f7ff fdd0 	bl	800e9fc <VL53LX_nvm_enable>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 800ee60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d107      	bne.n	800ee78 <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 800ee68:	7aba      	ldrb	r2, [r7, #10]
 800ee6a:	7af9      	ldrb	r1, [r7, #11]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	68f8      	ldr	r0, [r7, #12]
 800ee70:	f7ff fe2a 	bl	800eac8 <VL53LX_nvm_read>
 800ee74:	4603      	mov	r3, r0
 800ee76:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 800ee78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d104      	bne.n	800ee8a <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f7ff fe7f 	bl	800eb84 <VL53LX_nvm_disable>
 800ee86:	4603      	mov	r3, r0
 800ee88:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 800ee8a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3718      	adds	r7, #24
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}

0800ee96 <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 800ee96:	b580      	push	{r7, lr}
 800ee98:	b084      	sub	sp, #16
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	6078      	str	r0, [r7, #4]
 800ee9e:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800eea0:	2300      	movs	r3, #0
 800eea2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800eea4:	f107 0308 	add.w	r3, r7, #8
 800eea8:	2201      	movs	r2, #1
 800eeaa:	212e      	movs	r1, #46	; 0x2e
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f7ff ffc1 	bl	800ee34 <VL53LX_read_nvm_raw_data>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800eeb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d108      	bne.n	800eed0 <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 800eebe:	f107 0308 	add.w	r3, r7, #8
 800eec2:	683a      	ldr	r2, [r7, #0]
 800eec4:	4619      	mov	r1, r3
 800eec6:	2004      	movs	r0, #4
 800eec8:	f7ff fe92 	bl	800ebf0 <VL53LX_nvm_decode_optical_centre>
 800eecc:	4603      	mov	r3, r0
 800eece:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 800eed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	3710      	adds	r7, #16
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}

0800eedc <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b092      	sub	sp, #72	; 0x48
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800eee6:	2300      	movs	r3, #0
 800eee8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800eeec:	f107 030c 	add.w	r3, r7, #12
 800eef0:	220e      	movs	r2, #14
 800eef2:	2157      	movs	r1, #87	; 0x57
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f7ff ff9d 	bl	800ee34 <VL53LX_read_nvm_raw_data>
 800eefa:	4603      	mov	r3, r0
 800eefc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800ef00:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d109      	bne.n	800ef1c <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 800ef08:	f107 030c 	add.w	r3, r7, #12
 800ef0c:	683a      	ldr	r2, [r7, #0]
 800ef0e:	4619      	mov	r1, r3
 800ef10:	2038      	movs	r0, #56	; 0x38
 800ef12:	f7ff fe9d 	bl	800ec50 <VL53LX_nvm_decode_cal_peak_rate_map>
 800ef16:	4603      	mov	r3, r0
 800ef18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800ef1c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3748      	adds	r7, #72	; 0x48
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b086      	sub	sp, #24
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ef32:	2300      	movs	r3, #0
 800ef34:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800ef36:	f107 030c 	add.w	r3, r7, #12
 800ef3a:	2202      	movs	r2, #2
 800ef3c:	2165      	movs	r1, #101	; 0x65
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f7ff ff78 	bl	800ee34 <VL53LX_read_nvm_raw_data>
 800ef44:	4603      	mov	r3, r0
 800ef46:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800ef48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d108      	bne.n	800ef62 <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 800ef50:	f107 030c 	add.w	r3, r7, #12
 800ef54:	683a      	ldr	r2, [r7, #0]
 800ef56:	4619      	mov	r1, r3
 800ef58:	2008      	movs	r0, #8
 800ef5a:	f7ff fecf 	bl	800ecfc <VL53LX_nvm_decode_additional_offset_cal_data>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800ef62:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3718      	adds	r7, #24
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 800ef6e:	b580      	push	{r7, lr}
 800ef70:	b08a      	sub	sp, #40	; 0x28
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	60f8      	str	r0, [r7, #12]
 800ef76:	460b      	mov	r3, r1
 800ef78:	607a      	str	r2, [r7, #4]
 800ef7a:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 800ef82:	897b      	ldrh	r3, [r7, #10]
 800ef84:	089b      	lsrs	r3, r3, #2
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	b2d9      	uxtb	r1, r3
 800ef8a:	f107 0314 	add.w	r3, r7, #20
 800ef8e:	2204      	movs	r2, #4
 800ef90:	68f8      	ldr	r0, [r7, #12]
 800ef92:	f7ff ff4f 	bl	800ee34 <VL53LX_read_nvm_raw_data>
 800ef96:	4603      	mov	r3, r0
 800ef98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800ef9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d109      	bne.n	800efb8 <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 800efa4:	f107 0314 	add.w	r3, r7, #20
 800efa8:	687a      	ldr	r2, [r7, #4]
 800efaa:	4619      	mov	r1, r3
 800efac:	2010      	movs	r0, #16
 800efae:	f7ff fee0 	bl	800ed72 <VL53LX_nvm_decode_fmt_range_results_data>
 800efb2:	4603      	mov	r3, r0
 800efb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 800efb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3728      	adds	r7, #40	; 0x28
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b086      	sub	sp, #24
 800efc8:	af00      	add	r7, sp, #0
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	460b      	mov	r3, r1
 800efce:	607a      	str	r2, [r7, #4]
 800efd0:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800efd2:	2300      	movs	r3, #0
 800efd4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800efd6:	897b      	ldrh	r3, [r7, #10]
 800efd8:	2b0a      	cmp	r3, #10
 800efda:	d802      	bhi.n	800efe2 <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800efdc:	f06f 0309 	mvn.w	r3, #9
 800efe0:	e047      	b.n	800f072 <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efea:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800eff8:	f002 020f 	and.w	r2, r2, #15
 800effc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800effe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f008:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f00c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f00e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f018:	f002 0203 	and.w	r2, r2, #3
 800f01c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f01e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f028:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f02c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f02e:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	88d8      	ldrh	r0, [r3, #6]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	3305      	adds	r3, #5
 800f038:	461a      	mov	r2, r3
 800f03a:	2102      	movs	r1, #2
 800f03c:	f7f9 fa1f 	bl	800847e <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800f044:	68fa      	ldr	r2, [r7, #12]
 800f046:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f048:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800f04e:	68fa      	ldr	r2, [r7, #12]
 800f050:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f052:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800f05c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f060:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f062:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800f068:	68fa      	ldr	r2, [r7, #12]
 800f06a:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800f06c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f06e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f072:	4618      	mov	r0, r3
 800f074:	3718      	adds	r7, #24
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}

0800f07a <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f07a:	b580      	push	{r7, lr}
 800f07c:	b086      	sub	sp, #24
 800f07e:	af00      	add	r7, sp, #0
 800f080:	4603      	mov	r3, r0
 800f082:	60b9      	str	r1, [r7, #8]
 800f084:	607a      	str	r2, [r7, #4]
 800f086:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f088:	2300      	movs	r3, #0
 800f08a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f08c:	89fb      	ldrh	r3, [r7, #14]
 800f08e:	2b0a      	cmp	r3, #10
 800f090:	d802      	bhi.n	800f098 <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f092:	f06f 0309 	mvn.w	r3, #9
 800f096:	e046      	b.n	800f126 <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0a0:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	f003 030f 	and.w	r3, r3, #15
 800f0b0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	3302      	adds	r3, #2
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0c0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	3303      	adds	r3, #3
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	f003 0303 	and.w	r3, r3, #3
 800f0d0:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	3304      	adds	r3, #4
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0e0:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	3305      	adds	r3, #5
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	2002      	movs	r0, #2
 800f0ee:	f7f9 f9f1 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	79da      	ldrb	r2, [r3, #7]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	7a1a      	ldrb	r2, [r3, #8]
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	3309      	adds	r3, #9
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f114:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	7a9a      	ldrb	r2, [r3, #10]
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800f122:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f126:	4618      	mov	r0, r3
 800f128:	3718      	adds	r7, #24
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}

0800f12e <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f12e:	b580      	push	{r7, lr}
 800f130:	b086      	sub	sp, #24
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
 800f136:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f138:	2300      	movs	r3, #0
 800f13a:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f13c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d108      	bne.n	800f156 <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 800f144:	f107 020c 	add.w	r2, r7, #12
 800f148:	230b      	movs	r3, #11
 800f14a:	2101      	movs	r1, #1
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f001 feeb 	bl	8010f28 <VL53LX_ReadMulti>
 800f152:	4603      	mov	r3, r0
 800f154:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f156:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d108      	bne.n	800f170 <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 800f15e:	f107 030c 	add.w	r3, r7, #12
 800f162:	683a      	ldr	r2, [r7, #0]
 800f164:	4619      	mov	r1, r3
 800f166:	200b      	movs	r0, #11
 800f168:	f7ff ff87 	bl	800f07a <VL53LX_i2c_decode_static_nvm_managed>
 800f16c:	4603      	mov	r3, r0
 800f16e:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f170:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f174:	4618      	mov	r0, r3
 800f176:	3718      	adds	r7, #24
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b086      	sub	sp, #24
 800f180:	af00      	add	r7, sp, #0
 800f182:	60f8      	str	r0, [r7, #12]
 800f184:	460b      	mov	r3, r1
 800f186:	607a      	str	r2, [r7, #4]
 800f188:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f18a:	2300      	movs	r3, #0
 800f18c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f18e:	897b      	ldrh	r3, [r7, #10]
 800f190:	2b16      	cmp	r3, #22
 800f192:	d802      	bhi.n	800f19a <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f194:	f06f 0309 	mvn.w	r3, #9
 800f198:	e076      	b.n	800f288 <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800f1a6:	68fa      	ldr	r2, [r7, #12]
 800f1a8:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f1aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800f1b0:	68fa      	ldr	r2, [r7, #12]
 800f1b2:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f1b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800f1ba:	68fa      	ldr	r2, [r7, #12]
 800f1bc:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800f1be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800f1c4:	68fa      	ldr	r2, [r7, #12]
 800f1c6:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f1c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f1d2:	f002 020f 	and.w	r2, r2, #15
 800f1d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f1d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800f1de:	68fa      	ldr	r2, [r7, #12]
 800f1e0:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800f1e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f1ec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f1f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f1f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800f1fc:	f002 0203 	and.w	r2, r2, #3
 800f200:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f202:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	8958      	ldrh	r0, [r3, #10]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	3309      	adds	r3, #9
 800f20c:	461a      	mov	r2, r3
 800f20e:	2102      	movs	r1, #2
 800f210:	f7f9 f935 	bl	800847e <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	330b      	adds	r3, #11
 800f21e:	461a      	mov	r2, r3
 800f220:	2102      	movs	r1, #2
 800f222:	f7f9 f977 	bl	8008514 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	330d      	adds	r3, #13
 800f230:	461a      	mov	r2, r3
 800f232:	2102      	movs	r1, #2
 800f234:	f7f9 f96e 	bl	8008514 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	8a18      	ldrh	r0, [r3, #16]
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	330f      	adds	r3, #15
 800f240:	461a      	mov	r2, r3
 800f242:	2102      	movs	r1, #2
 800f244:	f7f9 f91b 	bl	800847e <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 800f24e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f252:	b218      	sxth	r0, r3
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	3311      	adds	r3, #17
 800f258:	461a      	mov	r2, r3
 800f25a:	2102      	movs	r1, #2
 800f25c:	f7f9 f95a 	bl	8008514 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	3313      	adds	r3, #19
 800f26a:	461a      	mov	r2, r3
 800f26c:	2102      	movs	r1, #2
 800f26e:	f7f9 f951 	bl	8008514 <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	3315      	adds	r3, #21
 800f27c:	461a      	mov	r2, r3
 800f27e:	2102      	movs	r1, #2
 800f280:	f7f9 f948 	bl	8008514 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800f284:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3718      	adds	r7, #24
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}

0800f290 <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b086      	sub	sp, #24
 800f294:	af00      	add	r7, sp, #0
 800f296:	4603      	mov	r3, r0
 800f298:	60b9      	str	r1, [r7, #8]
 800f29a:	607a      	str	r2, [r7, #4]
 800f29c:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f2a2:	89fb      	ldrh	r3, [r7, #14]
 800f2a4:	2b16      	cmp	r3, #22
 800f2a6:	d802      	bhi.n	800f2ae <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f2a8:	f06f 0309 	mvn.w	r3, #9
 800f2ac:	e079      	b.n	800f3a2 <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	785a      	ldrb	r2, [r3, #1]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	789a      	ldrb	r2, [r3, #2]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	78da      	ldrb	r2, [r3, #3]
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	791a      	ldrb	r2, [r3, #4]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	3305      	adds	r3, #5
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	f003 030f 	and.w	r3, r3, #15
 800f2e0:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	799a      	ldrb	r2, [r3, #6]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	3307      	adds	r3, #7
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f2f8:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	3308      	adds	r3, #8
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	f003 0303 	and.w	r3, r3, #3
 800f308:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	3309      	adds	r3, #9
 800f312:	4619      	mov	r1, r3
 800f314:	2002      	movs	r0, #2
 800f316:	f7f9 f8dd 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800f31a:	4603      	mov	r3, r0
 800f31c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	330b      	adds	r3, #11
 800f326:	4619      	mov	r1, r3
 800f328:	2002      	movs	r0, #2
 800f32a:	f7f9 f91f 	bl	800856c <VL53LX_i2c_decode_int16_t>
 800f32e:	4603      	mov	r3, r0
 800f330:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	330d      	adds	r3, #13
 800f33a:	4619      	mov	r1, r3
 800f33c:	2002      	movs	r0, #2
 800f33e:	f7f9 f915 	bl	800856c <VL53LX_i2c_decode_int16_t>
 800f342:	4603      	mov	r3, r0
 800f344:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	330f      	adds	r3, #15
 800f34e:	4619      	mov	r1, r3
 800f350:	2002      	movs	r0, #2
 800f352:	f7f9 f8bf 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800f356:	4603      	mov	r3, r0
 800f358:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	3311      	adds	r3, #17
 800f362:	4619      	mov	r1, r3
 800f364:	2002      	movs	r0, #2
 800f366:	f7f9 f901 	bl	800856c <VL53LX_i2c_decode_int16_t>
 800f36a:	4603      	mov	r3, r0
 800f36c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f370:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	3313      	adds	r3, #19
 800f37a:	4619      	mov	r1, r3
 800f37c:	2002      	movs	r0, #2
 800f37e:	f7f9 f8f5 	bl	800856c <VL53LX_i2c_decode_int16_t>
 800f382:	4603      	mov	r3, r0
 800f384:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	3315      	adds	r3, #21
 800f38e:	4619      	mov	r1, r3
 800f390:	2002      	movs	r0, #2
 800f392:	f7f9 f8eb 	bl	800856c <VL53LX_i2c_decode_int16_t>
 800f396:	4603      	mov	r3, r0
 800f398:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800f39e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3718      	adds	r7, #24
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f3aa:	b580      	push	{r7, lr}
 800f3ac:	b08a      	sub	sp, #40	; 0x28
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
 800f3b2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f3ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d109      	bne.n	800f3d6 <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 800f3c2:	f107 020c 	add.w	r2, r7, #12
 800f3c6:	2317      	movs	r3, #23
 800f3c8:	210d      	movs	r1, #13
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f001 fdac 	bl	8010f28 <VL53LX_ReadMulti>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f3d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d109      	bne.n	800f3f2 <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 800f3de:	f107 030c 	add.w	r3, r7, #12
 800f3e2:	683a      	ldr	r2, [r7, #0]
 800f3e4:	4619      	mov	r1, r3
 800f3e6:	2017      	movs	r0, #23
 800f3e8:	f7ff ff52 	bl	800f290 <VL53LX_i2c_decode_customer_nvm_managed>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 800f3f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d11c      	bne.n	800f434 <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	8a5b      	ldrh	r3, [r3, #18]
 800f3fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		offset = offset / 4;
 800f400:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f404:	2b00      	cmp	r3, #0
 800f406:	da00      	bge.n	800f40a <VL53LX_get_customer_nvm_managed+0x60>
 800f408:	3303      	adds	r3, #3
 800f40a:	109b      	asrs	r3, r3, #2
 800f40c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (offset >= 1024)
 800f40e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f416:	db04      	blt.n	800f422 <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 800f418:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f41a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800f41e:	b29b      	uxth	r3, r3
 800f420:	84bb      	strh	r3, [r7, #36]	; 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	2200      	movs	r2, #0
 800f426:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f42c:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f432:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f434:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3728      	adds	r7, #40	; 0x28
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b086      	sub	sp, #24
 800f444:	af00      	add	r7, sp, #0
 800f446:	60f8      	str	r0, [r7, #12]
 800f448:	460b      	mov	r3, r1
 800f44a:	607a      	str	r2, [r7, #4]
 800f44c:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f44e:	2300      	movs	r3, #0
 800f450:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 800f452:	897b      	ldrh	r3, [r7, #10]
 800f454:	2b1f      	cmp	r3, #31
 800f456:	d802      	bhi.n	800f45e <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f458:	f06f 0309 	mvn.w	r3, #9
 800f45c:	e0cf      	b.n	800f5fe <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	881b      	ldrh	r3, [r3, #0]
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	2102      	movs	r1, #2
 800f466:	4618      	mov	r0, r3
 800f468:	f7f9 f809 	bl	800847e <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800f474:	f002 0201 	and.w	r2, r2, #1
 800f478:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f47a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800f484:	f002 020f 	and.w	r2, r2, #15
 800f488:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f48a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800f494:	f002 020f 	and.w	r2, r2, #15
 800f498:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f49a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800f4a4:	f002 021f 	and.w	r2, r2, #31
 800f4a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f4aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f4b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f4b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f4ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800f4c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f4c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f4ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800f4d4:	f002 0201 	and.w	r2, r2, #1
 800f4d8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f4da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800f4e0:	68fa      	ldr	r2, [r7, #12]
 800f4e2:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800f4e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f4ee:	f002 0201 	and.w	r2, r2, #1
 800f4f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f4f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f4fe:	f002 0203 	and.w	r2, r2, #3
 800f502:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f504:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f50e:	f002 021f 	and.w	r2, r2, #31
 800f512:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f514:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800f51e:	f002 0203 	and.w	r2, r2, #3
 800f522:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f524:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800f52e:	f002 0203 	and.w	r2, r2, #3
 800f532:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800f534:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f53e:	f002 0207 	and.w	r2, r2, #7
 800f542:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800f544:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f54e:	f002 021f 	and.w	r2, r2, #31
 800f552:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800f554:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f55e:	f002 0201 	and.w	r2, r2, #1
 800f562:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f564:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800f56a:	68fa      	ldr	r2, [r7, #12]
 800f56c:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f56e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f578:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800f57e:	68fa      	ldr	r2, [r7, #12]
 800f580:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f582:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800f588:	68fa      	ldr	r2, [r7, #12]
 800f58a:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f58c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800f592:	68fa      	ldr	r2, [r7, #12]
 800f594:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800f596:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800f59c:	68fa      	ldr	r2, [r7, #12]
 800f59e:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800f5a0:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	8b18      	ldrh	r0, [r3, #24]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	3318      	adds	r3, #24
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	2102      	movs	r1, #2
 800f5ae:	f7f8 ff66 	bl	800847e <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800f5b6:	68fa      	ldr	r2, [r7, #12]
 800f5b8:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800f5ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800f5c0:	68fa      	ldr	r2, [r7, #12]
 800f5c2:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800f5c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800f5ce:	f002 020f 	and.w	r2, r2, #15
 800f5d2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800f5d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800f5da:	68fa      	ldr	r2, [r7, #12]
 800f5dc:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800f5de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800f5e8:	f002 020f 	and.w	r2, r2, #15
 800f5ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800f5ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800f5f8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f5fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3718      	adds	r7, #24
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f606:	b580      	push	{r7, lr}
 800f608:	b086      	sub	sp, #24
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	60f8      	str	r0, [r7, #12]
 800f60e:	460b      	mov	r3, r1
 800f610:	607a      	str	r2, [r7, #4]
 800f612:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f614:	2300      	movs	r3, #0
 800f616:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 800f618:	897b      	ldrh	r3, [r7, #10]
 800f61a:	2b15      	cmp	r3, #21
 800f61c:	d802      	bhi.n	800f624 <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f61e:	f06f 0309 	mvn.w	r3, #9
 800f622:	e070      	b.n	800f706 <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800f630:	68fa      	ldr	r2, [r7, #12]
 800f632:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f634:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800f63a:	68fa      	ldr	r2, [r7, #12]
 800f63c:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f63e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800f648:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f64c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f64e:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 800f654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f658:	b298      	uxth	r0, r3
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	3304      	adds	r3, #4
 800f65e:	461a      	mov	r2, r3
 800f660:	2102      	movs	r1, #2
 800f662:	f7f8 ff0c 	bl	800847e <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800f66e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f672:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f674:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800f67a:	68fa      	ldr	r2, [r7, #12]
 800f67c:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800f67e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800f684:	68fa      	ldr	r2, [r7, #12]
 800f686:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f688:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800f692:	f002 0201 	and.w	r2, r2, #1
 800f696:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f698:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800f6a2:	f002 0207 	and.w	r2, r2, #7
 800f6a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f6a8:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	8998      	ldrh	r0, [r3, #12]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	330c      	adds	r3, #12
 800f6b2:	461a      	mov	r2, r3
 800f6b4:	2102      	movs	r1, #2
 800f6b6:	f7f8 fee2 	bl	800847e <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	89d8      	ldrh	r0, [r3, #14]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	330e      	adds	r3, #14
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	2102      	movs	r1, #2
 800f6c6:	f7f8 feda 	bl	800847e <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	8a18      	ldrh	r0, [r3, #16]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	3310      	adds	r3, #16
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	2102      	movs	r1, #2
 800f6d6:	f7f8 fed2 	bl	800847e <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800f6de:	68fa      	ldr	r2, [r7, #12]
 800f6e0:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f6e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800f6e8:	68fa      	ldr	r2, [r7, #12]
 800f6ea:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f6ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800f6f2:	68fa      	ldr	r2, [r7, #12]
 800f6f4:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f6f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800f6fc:	68fa      	ldr	r2, [r7, #12]
 800f6fe:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f700:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f702:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f706:	4618      	mov	r0, r3
 800f708:	3718      	adds	r7, #24
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}

0800f70e <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f70e:	b580      	push	{r7, lr}
 800f710:	b086      	sub	sp, #24
 800f712:	af00      	add	r7, sp, #0
 800f714:	60f8      	str	r0, [r7, #12]
 800f716:	460b      	mov	r3, r1
 800f718:	607a      	str	r2, [r7, #4]
 800f71a:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f71c:	2300      	movs	r3, #0
 800f71e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 800f720:	897b      	ldrh	r3, [r7, #10]
 800f722:	2b16      	cmp	r3, #22
 800f724:	d802      	bhi.n	800f72c <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f726:	f06f 0309 	mvn.w	r3, #9
 800f72a:	e06e      	b.n	800f80a <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	f003 030f 	and.w	r3, r3, #15
 800f734:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800f73e:	68fa      	ldr	r2, [r7, #12]
 800f740:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f742:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800f74c:	f002 020f 	and.w	r2, r2, #15
 800f750:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f752:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800f758:	68fa      	ldr	r2, [r7, #12]
 800f75a:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800f75c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800f766:	f002 020f 	and.w	r2, r2, #15
 800f76a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f76c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800f772:	68fa      	ldr	r2, [r7, #12]
 800f774:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800f776:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800f780:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f784:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f786:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800f790:	f002 020f 	and.w	r2, r2, #15
 800f794:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f796:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800f79c:	68fa      	ldr	r2, [r7, #12]
 800f79e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f7a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800f7aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f7ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f7b0:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	8958      	ldrh	r0, [r3, #10]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	330a      	adds	r3, #10
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	2102      	movs	r1, #2
 800f7be:	f7f8 fe5e 	bl	800847e <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	8998      	ldrh	r0, [r3, #12]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	330c      	adds	r3, #12
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	2102      	movs	r1, #2
 800f7ce:	f7f8 fe56 	bl	800847e <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800f7d6:	68fa      	ldr	r2, [r7, #12]
 800f7d8:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800f7da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800f7e0:	68fa      	ldr	r2, [r7, #12]
 800f7e2:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800f7e4:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	6918      	ldr	r0, [r3, #16]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	3312      	adds	r3, #18
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	2104      	movs	r1, #4
 800f7f2:	f7f8 fee4 	bl	80085be <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800f7fe:	f002 0201 	and.w	r2, r2, #1
 800f802:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800f804:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f806:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	3718      	adds	r7, #24
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}

0800f812 <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f812:	b580      	push	{r7, lr}
 800f814:	b086      	sub	sp, #24
 800f816:	af00      	add	r7, sp, #0
 800f818:	60f8      	str	r0, [r7, #12]
 800f81a:	460b      	mov	r3, r1
 800f81c:	607a      	str	r2, [r7, #4]
 800f81e:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f820:	2300      	movs	r3, #0
 800f822:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 800f824:	897b      	ldrh	r3, [r7, #10]
 800f826:	2b11      	cmp	r3, #17
 800f828:	d802      	bhi.n	800f830 <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f82a:	f06f 0309 	mvn.w	r3, #9
 800f82e:	e071      	b.n	800f914 <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	f003 0303 	and.w	r3, r3, #3
 800f838:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	8858      	ldrh	r0, [r3, #2]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	3301      	adds	r3, #1
 800f846:	461a      	mov	r2, r3
 800f848:	2102      	movs	r1, #2
 800f84a:	f7f8 fe18 	bl	800847e <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	8898      	ldrh	r0, [r3, #4]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	3303      	adds	r3, #3
 800f856:	461a      	mov	r2, r3
 800f858:	2102      	movs	r1, #2
 800f85a:	f7f8 fe10 	bl	800847e <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f866:	f002 0201 	and.w	r2, r2, #1
 800f86a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f86c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800f876:	f002 0207 	and.w	r2, r2, #7
 800f87a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f87c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800f882:	68fa      	ldr	r2, [r7, #12]
 800f884:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f886:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800f88c:	68fa      	ldr	r2, [r7, #12]
 800f88e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f890:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f89a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f89e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f8a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f8aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f8ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f8b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f8ba:	f002 0203 	and.w	r2, r2, #3
 800f8be:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f8c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800f8ca:	f002 0203 	and.w	r2, r2, #3
 800f8ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f8d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800f8da:	f002 020f 	and.w	r2, r2, #15
 800f8de:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f8e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800f8e6:	68fa      	ldr	r2, [r7, #12]
 800f8e8:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800f8ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800f8f0:	68fa      	ldr	r2, [r7, #12]
 800f8f2:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800f8f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800f8fa:	68fa      	ldr	r2, [r7, #12]
 800f8fc:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800f8fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800f908:	f002 0203 	and.w	r2, r2, #3
 800f90c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f90e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f910:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f914:	4618      	mov	r0, r3
 800f916:	3718      	adds	r7, #24
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f91c:	b480      	push	{r7}
 800f91e:	b087      	sub	sp, #28
 800f920:	af00      	add	r7, sp, #0
 800f922:	60f8      	str	r0, [r7, #12]
 800f924:	460b      	mov	r3, r1
 800f926:	607a      	str	r2, [r7, #4]
 800f928:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f92a:	2300      	movs	r3, #0
 800f92c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 800f92e:	897b      	ldrh	r3, [r7, #10]
 800f930:	2b04      	cmp	r3, #4
 800f932:	d802      	bhi.n	800f93a <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f934:	f06f 0309 	mvn.w	r3, #9
 800f938:	e025      	b.n	800f986 <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	f003 0301 	and.w	r3, r3, #1
 800f942:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800f950:	f002 0201 	and.w	r2, r2, #1
 800f954:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f956:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800f960:	f002 0201 	and.w	r2, r2, #1
 800f964:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f966:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800f970:	f002 0203 	and.w	r2, r2, #3
 800f974:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f976:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800f97c:	68fa      	ldr	r2, [r7, #12]
 800f97e:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f980:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f982:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f986:	4618      	mov	r0, r3
 800f988:	371c      	adds	r7, #28
 800f98a:	46bd      	mov	sp, r7
 800f98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f990:	4770      	bx	lr

0800f992 <VL53LX_set_system_control>:


VL53LX_Error VL53LX_set_system_control(
	VL53LX_DEV                 Dev,
	VL53LX_system_control_t   *pdata)
{
 800f992:	b580      	push	{r7, lr}
 800f994:	b084      	sub	sp, #16
 800f996:	af00      	add	r7, sp, #0
 800f998:	6078      	str	r0, [r7, #4]
 800f99a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f99c:	2300      	movs	r3, #0
 800f99e:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f9a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d108      	bne.n	800f9ba <VL53LX_set_system_control+0x28>
		status = VL53LX_i2c_encode_system_control(
 800f9a8:	f107 0308 	add.w	r3, r7, #8
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	2105      	movs	r1, #5
 800f9b0:	6838      	ldr	r0, [r7, #0]
 800f9b2:	f7ff ffb3 	bl	800f91c <VL53LX_i2c_encode_system_control>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 800f9ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d108      	bne.n	800f9d4 <VL53LX_set_system_control+0x42>
		status = VL53LX_WriteMulti(
 800f9c2:	f107 0208 	add.w	r2, r7, #8
 800f9c6:	2305      	movs	r3, #5
 800f9c8:	2183      	movs	r1, #131	; 0x83
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f001 fa76 	bl	8010ebc <VL53LX_WriteMulti>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800f9d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3710      	adds	r7, #16
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b086      	sub	sp, #24
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	60b9      	str	r1, [r7, #8]
 800f9ea:	607a      	str	r2, [r7, #4]
 800f9ec:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 800f9f2:	89fb      	ldrh	r3, [r7, #14]
 800f9f4:	2b2b      	cmp	r3, #43	; 0x2b
 800f9f6:	d802      	bhi.n	800f9fe <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f9f8:	f06f 0309 	mvn.w	r3, #9
 800f9fc:	e0e2      	b.n	800fbc4 <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa06:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	785a      	ldrb	r2, [r3, #1]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	3302      	adds	r3, #2
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	f003 030f 	and.w	r3, r3, #15
 800fa1e:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	78da      	ldrb	r2, [r3, #3]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	3304      	adds	r3, #4
 800fa30:	4619      	mov	r1, r3
 800fa32:	2002      	movs	r0, #2
 800fa34:	f7f8 fd4e 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	3306      	adds	r3, #6
 800fa44:	4619      	mov	r1, r3
 800fa46:	2002      	movs	r0, #2
 800fa48:	f7f8 fd44 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	3308      	adds	r3, #8
 800fa58:	4619      	mov	r1, r3
 800fa5a:	2002      	movs	r0, #2
 800fa5c:	f7f8 fd3a 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fa60:	4603      	mov	r3, r0
 800fa62:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	330a      	adds	r3, #10
 800fa6c:	4619      	mov	r1, r3
 800fa6e:	2002      	movs	r0, #2
 800fa70:	f7f8 fd30 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fa74:	4603      	mov	r3, r0
 800fa76:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	330c      	adds	r3, #12
 800fa80:	4619      	mov	r1, r3
 800fa82:	2002      	movs	r0, #2
 800fa84:	f7f8 fd26 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	330e      	adds	r3, #14
 800fa94:	4619      	mov	r1, r3
 800fa96:	2002      	movs	r0, #2
 800fa98:	f7f8 fd1c 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	3310      	adds	r3, #16
 800faa8:	4619      	mov	r1, r3
 800faaa:	2002      	movs	r0, #2
 800faac:	f7f8 fd12 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fab0:	4603      	mov	r3, r0
 800fab2:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	3312      	adds	r3, #18
 800fabc:	4619      	mov	r1, r3
 800fabe:	2002      	movs	r0, #2
 800fac0:	f7f8 fd08 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fac4:	4603      	mov	r3, r0
 800fac6:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	3314      	adds	r3, #20
 800fad0:	4619      	mov	r1, r3
 800fad2:	2002      	movs	r0, #2
 800fad4:	f7f8 fcfe 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fad8:	4603      	mov	r3, r0
 800fada:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	3316      	adds	r3, #22
 800fae4:	4619      	mov	r1, r3
 800fae6:	2002      	movs	r0, #2
 800fae8:	f7f8 fcf4 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800faec:	4603      	mov	r3, r0
 800faee:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	3318      	adds	r3, #24
 800faf8:	4619      	mov	r1, r3
 800fafa:	2002      	movs	r0, #2
 800fafc:	f7f8 fcea 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fb00:	4603      	mov	r3, r0
 800fb02:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	331a      	adds	r3, #26
 800fb0c:	4619      	mov	r1, r3
 800fb0e:	2002      	movs	r0, #2
 800fb10:	f7f8 fce0 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fb14:	4603      	mov	r3, r0
 800fb16:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	331c      	adds	r3, #28
 800fb20:	4619      	mov	r1, r3
 800fb22:	2002      	movs	r0, #2
 800fb24:	f7f8 fcd6 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	331e      	adds	r3, #30
 800fb34:	4619      	mov	r1, r3
 800fb36:	2002      	movs	r0, #2
 800fb38:	f7f8 fccc 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	3320      	adds	r3, #32
 800fb48:	4619      	mov	r1, r3
 800fb4a:	2002      	movs	r0, #2
 800fb4c:	f7f8 fcc2 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fb50:	4603      	mov	r3, r0
 800fb52:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	3322      	adds	r3, #34	; 0x22
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	2002      	movs	r0, #2
 800fb60:	f7f8 fcb8 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fb64:	4603      	mov	r3, r0
 800fb66:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	3324      	adds	r3, #36	; 0x24
 800fb70:	4619      	mov	r1, r3
 800fb72:	2002      	movs	r0, #2
 800fb74:	f7f8 fcae 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	3326      	adds	r3, #38	; 0x26
 800fb84:	4619      	mov	r1, r3
 800fb86:	2002      	movs	r0, #2
 800fb88:	f7f8 fca4 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	3328      	adds	r3, #40	; 0x28
 800fb98:	4619      	mov	r1, r3
 800fb9a:	2002      	movs	r0, #2
 800fb9c:	f7f8 fc9a 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fba0:	4603      	mov	r3, r0
 800fba2:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800fbc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3718      	adds	r7, #24
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b086      	sub	sp, #24
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	607a      	str	r2, [r7, #4]
 800fbd8:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 800fbde:	89fb      	ldrh	r3, [r7, #14]
 800fbe0:	2b20      	cmp	r3, #32
 800fbe2:	d802      	bhi.n	800fbea <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fbe4:	f06f 0309 	mvn.w	r3, #9
 800fbe8:	e04d      	b.n	800fc86 <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 800fbea:	68b9      	ldr	r1, [r7, #8]
 800fbec:	2004      	movs	r0, #4
 800fbee:	f7f8 fd10 	bl	8008612 <VL53LX_i2c_decode_uint32_t>
 800fbf2:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	3304      	adds	r3, #4
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	2004      	movs	r0, #4
 800fc00:	f7f8 fd07 	bl	8008612 <VL53LX_i2c_decode_uint32_t>
 800fc04:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	3308      	adds	r3, #8
 800fc0e:	4619      	mov	r1, r3
 800fc10:	2004      	movs	r0, #4
 800fc12:	f7f8 fd1b 	bl	800864c <VL53LX_i2c_decode_int32_t>
 800fc16:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	330c      	adds	r3, #12
 800fc20:	4619      	mov	r1, r3
 800fc22:	2004      	movs	r0, #4
 800fc24:	f7f8 fcf5 	bl	8008612 <VL53LX_i2c_decode_uint32_t>
 800fc28:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	3310      	adds	r3, #16
 800fc32:	4619      	mov	r1, r3
 800fc34:	2004      	movs	r0, #4
 800fc36:	f7f8 fcec 	bl	8008612 <VL53LX_i2c_decode_uint32_t>
 800fc3a:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	3314      	adds	r3, #20
 800fc44:	4619      	mov	r1, r3
 800fc46:	2004      	movs	r0, #4
 800fc48:	f7f8 fce3 	bl	8008612 <VL53LX_i2c_decode_uint32_t>
 800fc4c:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	3318      	adds	r3, #24
 800fc56:	4619      	mov	r1, r3
 800fc58:	2004      	movs	r0, #4
 800fc5a:	f7f8 fcf7 	bl	800864c <VL53LX_i2c_decode_int32_t>
 800fc5e:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	331c      	adds	r3, #28
 800fc68:	4619      	mov	r1, r3
 800fc6a:	2004      	movs	r0, #4
 800fc6c:	f7f8 fcd1 	bl	8008612 <VL53LX_i2c_decode_uint32_t>
 800fc70:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800fc76:	68bb      	ldr	r3, [r7, #8]
 800fc78:	f893 2020 	ldrb.w	r2, [r3, #32]
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800fc82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3718      	adds	r7, #24
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	b086      	sub	sp, #24
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	4603      	mov	r3, r0
 800fc96:	60b9      	str	r1, [r7, #8]
 800fc98:	607a      	str	r2, [r7, #4]
 800fc9a:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 800fca0:	89fb      	ldrh	r3, [r7, #14]
 800fca2:	2b37      	cmp	r3, #55	; 0x37
 800fca4:	d802      	bhi.n	800fcac <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fca6:	f06f 0309 	mvn.w	r3, #9
 800fcaa:	e15e      	b.n	800ff6a <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 800fcac:	68b9      	ldr	r1, [r7, #8]
 800fcae:	2002      	movs	r0, #2
 800fcb0:	f7f8 fc10 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	3302      	adds	r3, #2
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcc6:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	3303      	adds	r3, #3
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fcd6:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	3304      	adds	r3, #4
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	f003 0303 	and.w	r3, r3, #3
 800fce6:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	3305      	adds	r3, #5
 800fcf0:	781b      	ldrb	r3, [r3, #0]
 800fcf2:	f003 0301 	and.w	r3, r3, #1
 800fcf6:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	3306      	adds	r3, #6
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd06:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	3307      	adds	r3, #7
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd16:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	3308      	adds	r3, #8
 800fd20:	4619      	mov	r1, r3
 800fd22:	2002      	movs	r0, #2
 800fd24:	f7f8 fbd6 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fd2e:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	330a      	adds	r3, #10
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	f003 0303 	and.w	r3, r3, #3
 800fd3e:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	330b      	adds	r3, #11
 800fd48:	781b      	ldrb	r3, [r3, #0]
 800fd4a:	f003 0303 	and.w	r3, r3, #3
 800fd4e:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	330c      	adds	r3, #12
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	f003 030f 	and.w	r3, r3, #15
 800fd5e:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	330d      	adds	r3, #13
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	f003 0307 	and.w	r3, r3, #7
 800fd6e:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	330e      	adds	r3, #14
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	f003 0301 	and.w	r3, r3, #1
 800fd7e:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	330f      	adds	r3, #15
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	f003 0303 	and.w	r3, r3, #3
 800fd8e:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	7c1a      	ldrb	r2, [r3, #16]
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	7c5a      	ldrb	r2, [r3, #17]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	3312      	adds	r3, #18
 800fda8:	4619      	mov	r1, r3
 800fdaa:	2002      	movs	r0, #2
 800fdac:	f7f8 fb92 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fdb6:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	3316      	adds	r3, #22
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	2002      	movs	r0, #2
 800fdc4:	f7f8 fb86 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	3318      	adds	r3, #24
 800fdd4:	4619      	mov	r1, r3
 800fdd6:	2002      	movs	r0, #2
 800fdd8:	f7f8 fb7c 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800fddc:	4603      	mov	r3, r0
 800fdde:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	331a      	adds	r3, #26
 800fde8:	781b      	ldrb	r3, [r3, #0]
 800fdea:	f003 0301 	and.w	r3, r3, #1
 800fdee:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	331b      	adds	r3, #27
 800fdf8:	781b      	ldrb	r3, [r3, #0]
 800fdfa:	f003 0307 	and.w	r3, r3, #7
 800fdfe:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	7f1a      	ldrb	r2, [r3, #28]
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	7f5a      	ldrb	r2, [r3, #29]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	331e      	adds	r3, #30
 800fe18:	781b      	ldrb	r3, [r3, #0]
 800fe1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe1e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	331f      	adds	r3, #31
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe2e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	3320      	adds	r3, #32
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	f003 0303 	and.w	r3, r3, #3
 800fe3e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	3321      	adds	r3, #33	; 0x21
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	f003 030f 	and.w	r3, r3, #15
 800fe4e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	3325      	adds	r3, #37	; 0x25
 800fe7c:	781b      	ldrb	r3, [r3, #0]
 800fe7e:	f003 0301 	and.w	r3, r3, #1
 800fe82:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	3326      	adds	r3, #38	; 0x26
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	f003 0303 	and.w	r3, r3, #3
 800fe94:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	3327      	adds	r3, #39	; 0x27
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	f003 031f 	and.w	r3, r3, #31
 800fea6:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	3328      	adds	r3, #40	; 0x28
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	f003 031f 	and.w	r3, r3, #31
 800feb8:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	3329      	adds	r3, #41	; 0x29
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	f003 031f 	and.w	r3, r3, #31
 800feca:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	332a      	adds	r3, #42	; 0x2a
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	f003 0301 	and.w	r3, r3, #1
 800fedc:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	332b      	adds	r3, #43	; 0x2b
 800fee8:	781b      	ldrb	r3, [r3, #0]
 800feea:	f003 0301 	and.w	r3, r3, #1
 800feee:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	332c      	adds	r3, #44	; 0x2c
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	f003 0303 	and.w	r3, r3, #3
 800ff00:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	332d      	adds	r3, #45	; 0x2d
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff12:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	332e      	adds	r3, #46	; 0x2e
 800ff1e:	4619      	mov	r1, r3
 800ff20:	2004      	movs	r0, #4
 800ff22:	f7f8 fb76 	bl	8008612 <VL53LX_i2c_decode_uint32_t>
 800ff26:	4603      	mov	r3, r0
 800ff28:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	3332      	adds	r3, #50	; 0x32
 800ff34:	4619      	mov	r1, r3
 800ff36:	2004      	movs	r0, #4
 800ff38:	f7f8 fb6b 	bl	8008612 <VL53LX_i2c_decode_uint32_t>
 800ff3c:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	3336      	adds	r3, #54	; 0x36
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	f003 0301 	and.w	r3, r3, #1
 800ff4c:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	3337      	adds	r3, #55	; 0x37
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	f003 0301 	and.w	r3, r3, #1
 800ff5e:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800ff66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3718      	adds	r7, #24
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}

0800ff72 <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 800ff72:	b580      	push	{r7, lr}
 800ff74:	b086      	sub	sp, #24
 800ff76:	af00      	add	r7, sp, #0
 800ff78:	4603      	mov	r3, r0
 800ff7a:	60b9      	str	r1, [r7, #8]
 800ff7c:	607a      	str	r2, [r7, #4]
 800ff7e:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ff80:	2300      	movs	r3, #0
 800ff82:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 800ff84:	89fb      	ldrh	r3, [r7, #14]
 800ff86:	2b30      	cmp	r3, #48	; 0x30
 800ff88:	d802      	bhi.n	800ff90 <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ff8a:	f06f 0309 	mvn.w	r3, #9
 800ff8e:	e112      	b.n	80101b6 <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	785a      	ldrb	r2, [r3, #1]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	789a      	ldrb	r2, [r3, #2]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	3303      	adds	r3, #3
 800ffac:	4619      	mov	r1, r3
 800ffae:	2002      	movs	r0, #2
 800ffb0:	f7f8 fa90 	bl	80084d4 <VL53LX_i2c_decode_uint16_t>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	3305      	adds	r3, #5
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffc6:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	3306      	adds	r3, #6
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	f003 0307 	and.w	r3, r3, #7
 800ffd6:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	3307      	adds	r3, #7
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	f003 0307 	and.w	r3, r3, #7
 800ffe6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	3308      	adds	r3, #8
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fff6:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800fffc:	68bb      	ldr	r3, [r7, #8]
 800fffe:	3309      	adds	r3, #9
 8010000:	781b      	ldrb	r3, [r3, #0]
 8010002:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010006:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	330a      	adds	r3, #10
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	f003 0301 	and.w	r3, r3, #1
 8010016:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	330b      	adds	r3, #11
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010026:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	330c      	adds	r3, #12
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	f003 0301 	and.w	r3, r3, #1
 8010036:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	330d      	adds	r3, #13
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010046:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	330e      	adds	r3, #14
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010056:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	7bda      	ldrb	r2, [r3, #15]
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	7c1a      	ldrb	r2, [r3, #16]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	7c5a      	ldrb	r2, [r3, #17]
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	7c9a      	ldrb	r2, [r3, #18]
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	7cda      	ldrb	r2, [r3, #19]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	7d1a      	ldrb	r2, [r3, #20]
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	7d5a      	ldrb	r2, [r3, #21]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	7d9a      	ldrb	r2, [r3, #22]
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	7dda      	ldrb	r2, [r3, #23]
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	7e1a      	ldrb	r2, [r3, #24]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	7e5a      	ldrb	r2, [r3, #25]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	7e9a      	ldrb	r2, [r3, #26]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	7eda      	ldrb	r2, [r3, #27]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	7f1a      	ldrb	r2, [r3, #28]
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	7f5a      	ldrb	r2, [r3, #29]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	7f9a      	ldrb	r2, [r3, #30]
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	7fda      	ldrb	r2, [r3, #31]
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	f893 2020 	ldrb.w	r2, [r3, #32]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80100fe:	68bb      	ldr	r3, [r7, #8]
 8010100:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80101b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3718      	adds	r7, #24
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}

080101be <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 80101be:	b580      	push	{r7, lr}
 80101c0:	b090      	sub	sp, #64	; 0x40
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	6078      	str	r0, [r7, #4]
 80101c6:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80101c8:	2300      	movs	r3, #0
 80101ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80101ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d10a      	bne.n	80101ec <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 80101d6:	f107 020c 	add.w	r2, r7, #12
 80101da:	2331      	movs	r3, #49	; 0x31
 80101dc:	f240 110f 	movw	r1, #271	; 0x10f
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f000 fea1 	bl	8010f28 <VL53LX_ReadMulti>
 80101e6:	4603      	mov	r3, r0
 80101e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 80101ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d109      	bne.n	8010208 <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 80101f4:	f107 030c 	add.w	r3, r7, #12
 80101f8:	683a      	ldr	r2, [r7, #0]
 80101fa:	4619      	mov	r1, r3
 80101fc:	2031      	movs	r0, #49	; 0x31
 80101fe:	f7ff feb8 	bl	800ff72 <VL53LX_i2c_decode_nvm_copy_data>
 8010202:	4603      	mov	r3, r0
 8010204:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8010208:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801020c:	4618      	mov	r0, r3
 801020e:	3740      	adds	r7, #64	; 0x40
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}

08010214 <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 8010214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010218:	b0a1      	sub	sp, #132	; 0x84
 801021a:	af00      	add	r7, sp, #0
 801021c:	64b9      	str	r1, [r7, #72]	; 0x48
 801021e:	647a      	str	r2, [r7, #68]	; 0x44
 8010220:	643b      	str	r3, [r7, #64]	; 0x40
 8010222:	4603      	mov	r3, r0
 8010224:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8010228:	23f1      	movs	r3, #241	; 0xf1
 801022a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint32_t sigma_int  = VL53LX_D_002;
 801022e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010232:	657b      	str	r3, [r7, #84]	; 0x54

	uint32_t pll_period_mm  = 0;
 8010234:	2300      	movs	r3, #0
 8010236:	653b      	str	r3, [r7, #80]	; 0x50

	uint64_t tmp0        = 0;
 8010238:	f04f 0200 	mov.w	r2, #0
 801023c:	f04f 0300 	mov.w	r3, #0
 8010240:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	uint64_t tmp1        = 0;
 8010244:	f04f 0200 	mov.w	r2, #0
 8010248:	f04f 0300 	mov.w	r3, #0
 801024c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	uint64_t b_minus_amb = 0;
 8010250:	f04f 0200 	mov.w	r2, #0
 8010254:	f04f 0300 	mov.w	r3, #0
 8010258:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t VL53LX_p_055   = 0;
 801025c:	f04f 0200 	mov.w	r2, #0
 8010260:	f04f 0300 	mov.w	r3, #0
 8010264:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	*psigma_est  = VL53LX_D_002;
 8010268:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801026c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010270:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 8010272:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8010276:	2b00      	cmp	r3, #0
 8010278:	f000 8259 	beq.w	801072e <VL53LX_f_023+0x51a>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 801027c:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8010280:	4618      	mov	r0, r3
 8010282:	f7fb fbd3 	bl	800ba2c <VL53LX_calc_pll_period_mm>
 8010286:	6538      	str	r0, [r7, #80]	; 0x50



		if (VL53LX_p_028 > VL53LX_p_032)
 8010288:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801028c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801028e:	429a      	cmp	r2, r3
 8010290:	d90f      	bls.n	80102b2 <VL53LX_f_023+0x9e>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 8010292:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010296:	4618      	mov	r0, r3
 8010298:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_032;
 801029c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801029e:	461a      	mov	r2, r3
 80102a0:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 80102a4:	ebb0 0a02 	subs.w	sl, r0, r2
 80102a8:	eb61 0b03 	sbc.w	fp, r1, r3
 80102ac:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 80102b0:	e00e      	b.n	80102d0 <VL53LX_f_023+0xbc>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 80102b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102b4:	4618      	mov	r0, r3
 80102b6:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_028;
 80102ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80102be:	461a      	mov	r2, r3
 80102c0:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 80102c4:	ebb0 0802 	subs.w	r8, r0, r2
 80102c8:	eb61 0903 	sbc.w	r9, r1, r3
 80102cc:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60



		if (VL53LX_p_007 > VL53LX_p_001)
 80102d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d911      	bls.n	80102fc <VL53LX_f_023+0xe8>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 80102d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102da:	4618      	mov	r0, r3
 80102dc:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_001;
 80102e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102e2:	461a      	mov	r2, r3
 80102e4:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 80102e8:	1a86      	subs	r6, r0, r2
 80102ea:	62be      	str	r6, [r7, #40]	; 0x28
 80102ec:	eb61 0303 	sbc.w	r3, r1, r3
 80102f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80102f6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80102fa:	e010      	b.n	801031e <VL53LX_f_023+0x10a>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 80102fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102fe:	4618      	mov	r0, r3
 8010300:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_007;
 8010304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010306:	461a      	mov	r2, r3
 8010308:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 801030c:	1a86      	subs	r6, r0, r2
 801030e:	623e      	str	r6, [r7, #32]
 8010310:	eb61 0303 	sbc.w	r3, r1, r3
 8010314:	627b      	str	r3, [r7, #36]	; 0x24
 8010316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801031a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58



		if (b_minus_amb != 0) {
 801031e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010322:	4313      	orrs	r3, r2
 8010324:	f000 8203 	beq.w	801072e <VL53LX_f_023+0x51a>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 8010328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801032a:	4618      	mov	r0, r3
 801032c:	f04f 0100 	mov.w	r1, #0
 8010330:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010334:	461a      	mov	r2, r3
 8010336:	f04f 0300 	mov.w	r3, #0
 801033a:	1884      	adds	r4, r0, r2
 801033c:	eb41 0503 	adc.w	r5, r1, r3
					(uint64_t)VL53LX_p_028;
 8010340:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010344:	461a      	mov	r2, r3
 8010346:	f04f 0300 	mov.w	r3, #0
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 801034a:	18a1      	adds	r1, r4, r2
 801034c:	61b9      	str	r1, [r7, #24]
 801034e:	eb45 0303 	adc.w	r3, r5, r3
 8010352:	61fb      	str	r3, [r7, #28]
 8010354:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010358:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > VL53LX_D_003)
 801035c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010360:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010364:	f04f 0100 	mov.w	r1, #0
 8010368:	4299      	cmp	r1, r3
 801036a:	bf08      	it	eq
 801036c:	4290      	cmpeq	r0, r2
 801036e:	d205      	bcs.n	801037c <VL53LX_f_023+0x168>
				tmp0 = VL53LX_D_003;
 8010370:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8010374:	f04f 0300 	mov.w	r3, #0
 8010378:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 801037c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801037e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010380:	fb02 f203 	mul.w	r2, r2, r3
 8010384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010386:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010388:	fb01 f303 	mul.w	r3, r1, r3
 801038c:	18d1      	adds	r1, r2, r3
 801038e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010390:	fba3 2303 	umull	r2, r3, r3, r3
 8010394:	4419      	add	r1, r3
 8010396:	460b      	mov	r3, r1
 8010398:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 801039c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 << 8;
 80103a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80103a4:	f04f 0200 	mov.w	r2, #0
 80103a8:	f04f 0300 	mov.w	r3, #0
 80103ac:	020b      	lsls	r3, r1, #8
 80103ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80103b2:	0202      	lsls	r2, r0, #8
 80103b4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > VL53LX_D_004)
 80103b8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80103bc:	f04f 30ff 	mov.w	r0, #4294967295
 80103c0:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80103c4:	4299      	cmp	r1, r3
 80103c6:	bf08      	it	eq
 80103c8:	4290      	cmpeq	r0, r2
 80103ca:	d205      	bcs.n	80103d8 <VL53LX_f_023+0x1c4>
				tmp1 = VL53LX_D_004;
 80103cc:	f04f 32ff 	mov.w	r2, #4294967295
 80103d0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80103d4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp1 = do_division_u(tmp1, b_minus_amb);
 80103d8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80103dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80103e0:	f7ef ff9e 	bl	8000320 <__aeabi_uldivmod>
 80103e4:	4602      	mov	r2, r0
 80103e6:	460b      	mov	r3, r1
 80103e8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = do_division_u(tmp1, b_minus_amb);
 80103ec:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80103f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80103f4:	f7ef ff94 	bl	8000320 <__aeabi_uldivmod>
 80103f8:	4602      	mov	r2, r0
 80103fa:	460b      	mov	r3, r1
 80103fc:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_005)
 8010400:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010404:	2b80      	cmp	r3, #128	; 0x80
 8010406:	bf08      	it	eq
 8010408:	2a00      	cmpeq	r2, #0
 801040a:	d305      	bcc.n	8010418 <VL53LX_f_023+0x204>
				tmp1 = (uint64_t)VL53LX_D_005;
 801040c:	f04f 32ff 	mov.w	r2, #4294967295
 8010410:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8010414:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 * tmp0;
 8010418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801041a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801041c:	fb02 f203 	mul.w	r2, r2, r3
 8010420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010422:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010424:	fb01 f303 	mul.w	r3, r1, r3
 8010428:	18d1      	adds	r1, r2, r3
 801042a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801042c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801042e:	fba2 2303 	umull	r2, r3, r2, r3
 8010432:	4419      	add	r1, r3
 8010434:	460b      	mov	r3, r1
 8010436:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 801043a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801043e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010442:	4618      	mov	r0, r3
 8010444:	f04f 0100 	mov.w	r1, #0
 8010448:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801044c:	461a      	mov	r2, r3
 801044e:	f04f 0300 	mov.w	r3, #0
 8010452:	1884      	adds	r4, r0, r2
 8010454:	63bc      	str	r4, [r7, #56]	; 0x38
 8010456:	eb41 0303 	adc.w	r3, r1, r3
 801045a:	63fb      	str	r3, [r7, #60]	; 0x3c
				(uint64_t)a_zp + (uint64_t)ax_zp;
 801045c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010460:	461a      	mov	r2, r3
 8010462:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010466:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 801046a:	4621      	mov	r1, r4
 801046c:	1889      	adds	r1, r1, r2
 801046e:	6339      	str	r1, [r7, #48]	; 0x30
 8010470:	4629      	mov	r1, r5
 8010472:	eb43 0101 	adc.w	r1, r3, r1
 8010476:	6379      	str	r1, [r7, #52]	; 0x34
				(uint64_t)a_zp + (uint64_t)ax_zp;
 8010478:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801047c:	461a      	mov	r2, r3
 801047e:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8010482:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8010486:	4621      	mov	r1, r4
 8010488:	1889      	adds	r1, r1, r2
 801048a:	6139      	str	r1, [r7, #16]
 801048c:	4629      	mov	r1, r5
 801048e:	eb43 0101 	adc.w	r1, r3, r1
 8010492:	6179      	str	r1, [r7, #20]
 8010494:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010498:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_003)
 801049c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80104a0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80104a4:	f04f 0100 	mov.w	r1, #0
 80104a8:	4299      	cmp	r1, r3
 80104aa:	bf08      	it	eq
 80104ac:	4290      	cmpeq	r0, r2
 80104ae:	d205      	bcs.n	80104bc <VL53LX_f_023+0x2a8>
				tmp1 = (uint64_t)VL53LX_D_003;
 80104b0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80104b4:	f04f 0300 	mov.w	r3, #0
 80104b8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			tmp1 = tmp1 << 8;
 80104bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80104c0:	f04f 0200 	mov.w	r2, #0
 80104c4:	f04f 0300 	mov.w	r3, #0
 80104c8:	020b      	lsls	r3, r1, #8
 80104ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80104ce:	0202      	lsls	r2, r0, #8
 80104d0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 + tmp0;
 80104d4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80104d8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80104dc:	1884      	adds	r4, r0, r2
 80104de:	60bc      	str	r4, [r7, #8]
 80104e0:	eb41 0303 	adc.w	r3, r1, r3
 80104e4:	60fb      	str	r3, [r7, #12]
 80104e6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80104ea:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > (uint64_t)VL53LX_D_006)
 80104ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80104f2:	2a00      	cmp	r2, #0
 80104f4:	f173 0300 	sbcs.w	r3, r3, #0
 80104f8:	da05      	bge.n	8010506 <VL53LX_f_023+0x2f2>
				tmp0 = (uint64_t)VL53LX_D_006;
 80104fa:	f04f 32ff 	mov.w	r2, #4294967295
 80104fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010502:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8010506:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801050a:	2b01      	cmp	r3, #1
 801050c:	bf08      	it	eq
 801050e:	2a00      	cmpeq	r2, #0
 8010510:	d31e      	bcc.n	8010550 <VL53LX_f_023+0x33c>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010512:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010516:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801051a:	f7ef ff01 	bl	8000320 <__aeabi_uldivmod>
 801051e:	4602      	mov	r2, r0
 8010520:	460b      	mov	r3, r1
 8010522:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 8010526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010528:	461a      	mov	r2, r3
 801052a:	f04f 0300 	mov.w	r3, #0
 801052e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010530:	fb02 f001 	mul.w	r0, r2, r1
 8010534:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010536:	fb03 f101 	mul.w	r1, r3, r1
 801053a:	4401      	add	r1, r0
 801053c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801053e:	fba0 2302 	umull	r2, r3, r0, r2
 8010542:	4419      	add	r1, r3
 8010544:	460b      	mov	r3, r1
 8010546:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 801054a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 801054e:	e01d      	b.n	801058c <VL53LX_f_023+0x378>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010552:	461a      	mov	r2, r3
 8010554:	f04f 0300 	mov.w	r3, #0
 8010558:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801055a:	fb02 f001 	mul.w	r0, r2, r1
 801055e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010560:	fb03 f101 	mul.w	r1, r3, r1
 8010564:	4401      	add	r1, r0
 8010566:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010568:	fba0 2302 	umull	r2, r3, r0, r2
 801056c:	4419      	add	r1, r3
 801056e:	460b      	mov	r3, r1
 8010570:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010574:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010578:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801057c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010580:	f7ef fece 	bl	8000320 <__aeabi_uldivmod>
 8010584:	4602      	mov	r2, r0
 8010586:	460b      	mov	r3, r1
 8010588:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 801058c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010590:	2a00      	cmp	r2, #0
 8010592:	f173 0300 	sbcs.w	r3, r3, #0
 8010596:	da05      	bge.n	80105a4 <VL53LX_f_023+0x390>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010598:	f04f 32ff 	mov.w	r2, #4294967295
 801059c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80105a0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 80105a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80105a8:	2b01      	cmp	r3, #1
 80105aa:	bf08      	it	eq
 80105ac:	2a00      	cmpeq	r2, #0
 80105ae:	d32a      	bcc.n	8010606 <VL53LX_f_023+0x3f2>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80105b0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80105b4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80105b8:	f7ef feb2 	bl	8000320 <__aeabi_uldivmod>
 80105bc:	4602      	mov	r2, r0
 80105be:	460b      	mov	r3, r1
 80105c0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 80105c4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80105c8:	f04f 0200 	mov.w	r2, #0
 80105cc:	f04f 0300 	mov.w	r3, #0
 80105d0:	0882      	lsrs	r2, r0, #2
 80105d2:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80105d6:	088b      	lsrs	r3, r1, #2
 80105d8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 80105dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105de:	461a      	mov	r2, r3
 80105e0:	f04f 0300 	mov.w	r3, #0
 80105e4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80105e6:	fb02 f001 	mul.w	r0, r2, r1
 80105ea:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80105ec:	fb03 f101 	mul.w	r1, r3, r1
 80105f0:	4401      	add	r1, r0
 80105f2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80105f4:	fba0 2302 	umull	r2, r3, r0, r2
 80105f8:	4419      	add	r1, r3
 80105fa:	460b      	mov	r3, r1
 80105fc:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010600:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010604:	e029      	b.n	801065a <VL53LX_f_023+0x446>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010608:	461a      	mov	r2, r3
 801060a:	f04f 0300 	mov.w	r3, #0
 801060e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010610:	fb02 f001 	mul.w	r0, r2, r1
 8010614:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010616:	fb03 f101 	mul.w	r1, r3, r1
 801061a:	4401      	add	r1, r0
 801061c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801061e:	fba0 2302 	umull	r2, r3, r0, r2
 8010622:	4419      	add	r1, r3
 8010624:	460b      	mov	r3, r1
 8010626:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 801062a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 801062e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010632:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010636:	f7ef fe73 	bl	8000320 <__aeabi_uldivmod>
 801063a:	4602      	mov	r2, r0
 801063c:	460b      	mov	r3, r1
 801063e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 8010642:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010646:	f04f 0200 	mov.w	r2, #0
 801064a:	f04f 0300 	mov.w	r3, #0
 801064e:	0882      	lsrs	r2, r0, #2
 8010650:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010654:	088b      	lsrs	r3, r1, #2
 8010656:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 801065a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801065e:	2a00      	cmp	r2, #0
 8010660:	f173 0300 	sbcs.w	r3, r3, #0
 8010664:	da05      	bge.n	8010672 <VL53LX_f_023+0x45e>
				tmp0 = (uint64_t)VL53LX_D_006;
 8010666:	f04f 32ff 	mov.w	r2, #4294967295
 801066a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801066e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp0 = tmp0 >> 2;
 8010672:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010676:	f04f 0200 	mov.w	r2, #0
 801067a:	f04f 0300 	mov.w	r3, #0
 801067e:	0882      	lsrs	r2, r0, #2
 8010680:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010684:	088b      	lsrs	r3, r1, #2
 8010686:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 801068a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801068e:	2b01      	cmp	r3, #1
 8010690:	bf08      	it	eq
 8010692:	2a00      	cmpeq	r2, #0
 8010694:	d305      	bcc.n	80106a2 <VL53LX_f_023+0x48e>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010696:	f04f 32ff 	mov.w	r2, #4294967295
 801069a:	f04f 0300 	mov.w	r3, #0
 801069e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 80106a2:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 80106a6:	f04f 0100 	mov.w	r1, #0
 80106aa:	f04f 0200 	mov.w	r2, #0
 80106ae:	f04f 0300 	mov.w	r3, #0
 80106b2:	01cb      	lsls	r3, r1, #7
 80106b4:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 80106b8:	01c2      	lsls	r2, r0, #7
 80106ba:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 * tmp1;
 80106be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80106c2:	fb02 f203 	mul.w	r2, r2, r3
 80106c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80106ca:	fb01 f303 	mul.w	r3, r1, r3
 80106ce:	18d1      	adds	r1, r2, r3
 80106d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106d2:	fba3 2303 	umull	r2, r3, r3, r3
 80106d6:	4419      	add	r1, r3
 80106d8:	460b      	mov	r3, r1
 80106da:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 80106de:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp0 = tmp0 + tmp1;
 80106e2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80106e6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80106ea:	1884      	adds	r4, r0, r2
 80106ec:	603c      	str	r4, [r7, #0]
 80106ee:	eb41 0303 	adc.w	r3, r1, r3
 80106f2:	607b      	str	r3, [r7, #4]
 80106f4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80106f8:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 80106fc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010700:	2b01      	cmp	r3, #1
 8010702:	bf08      	it	eq
 8010704:	2a00      	cmpeq	r2, #0
 8010706:	d305      	bcc.n	8010714 <VL53LX_f_023+0x500>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010708:	f04f 32ff 	mov.w	r2, #4294967295
 801070c:	f04f 0300 	mov.w	r3, #0
 8010710:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 8010714:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010716:	4618      	mov	r0, r3
 8010718:	f7fb f821 	bl	800b75e <VL53LX_isqrt>
 801071c:	6578      	str	r0, [r7, #84]	; 0x54

			*psigma_est = (uint16_t)sigma_int;
 801071e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010720:	b29a      	uxth	r2, r3
 8010722:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010726:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 8010728:	2300      	movs	r3, #0
 801072a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}

	}

	return status;
 801072e:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 8010732:	4618      	mov	r0, r3
 8010734:	3784      	adds	r7, #132	; 0x84
 8010736:	46bd      	mov	sp, r7
 8010738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801073c <VL53LX_wait_for_test_completion>:
}


VL53LX_Error VL53LX_wait_for_test_completion(
	VL53LX_DEV     Dev)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b086      	sub	sp, #24
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010744:	2300      	movs	r3, #0
 8010746:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	3318      	adds	r3, #24
 801074c:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 801074e:	2300      	movs	r3, #0
 8010750:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53LX_WAIT_METHOD_BLOCKING) {
 8010752:	693b      	ldr	r3, [r7, #16]
 8010754:	781b      	ldrb	r3, [r3, #0]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d107      	bne.n	801076a <VL53LX_wait_for_test_completion+0x2e>



		status =
			VL53LX_poll_for_range_completion(
 801075a:	f64e 2160 	movw	r1, #60000	; 0xea60
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f000 f88b 	bl	801087a <VL53LX_poll_for_range_completion>
 8010764:	4603      	mov	r3, r0
 8010766:	75fb      	strb	r3, [r7, #23]
 8010768:	e01b      	b.n	80107a2 <VL53LX_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 801076a:	2300      	movs	r3, #0
 801076c:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 801076e:	e011      	b.n	8010794 <VL53LX_wait_for_test_completion+0x58>
			status = VL53LX_is_new_data_ready(
 8010770:	f107 030f 	add.w	r3, r7, #15
 8010774:	4619      	mov	r1, r3
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f000 f819 	bl	80107ae <VL53LX_is_new_data_ready>
 801077c:	4603      	mov	r3, r0
 801077e:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53LX_ERROR_NONE) {
 8010780:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d105      	bne.n	8010794 <VL53LX_wait_for_test_completion+0x58>
				status = VL53LX_WaitMs(
 8010788:	2101      	movs	r1, #1
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f000 fce6 	bl	801115c <VL53LX_WaitMs>
 8010790:	4603      	mov	r3, r0
 8010792:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 8010794:	7bfb      	ldrb	r3, [r7, #15]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d103      	bne.n	80107a2 <VL53LX_wait_for_test_completion+0x66>
 801079a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d0e6      	beq.n	8010770 <VL53LX_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 80107a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	3718      	adds	r7, #24
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}

080107ae <VL53LX_is_new_data_ready>:


VL53LX_Error VL53LX_is_new_data_ready(
	VL53LX_DEV     Dev,
	uint8_t       *pready)
{
 80107ae:	b580      	push	{r7, lr}
 80107b0:	b086      	sub	sp, #24
 80107b2:	af00      	add	r7, sp, #0
 80107b4:	6078      	str	r0, [r7, #4]
 80107b6:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80107b8:	2300      	movs	r3, #0
 80107ba:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	3318      	adds	r3, #24
 80107c0:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 80107c2:	2300      	movs	r3, #0
 80107c4:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 80107c6:	2300      	movs	r3, #0
 80107c8:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 80107ca:	2300      	movs	r3, #0
 80107cc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 80107ce:	693b      	ldr	r3, [r7, #16]
 80107d0:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 80107d4:	f003 0310 	and.w	r3, r3, #16
 80107d8:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 80107da:	7bfb      	ldrb	r3, [r7, #15]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d102      	bne.n	80107e6 <VL53LX_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 80107e0:	2301      	movs	r3, #1
 80107e2:	75fb      	strb	r3, [r7, #23]
 80107e4:	e001      	b.n	80107ea <VL53LX_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 80107e6:	2300      	movs	r3, #0
 80107e8:	75fb      	strb	r3, [r7, #23]



	status = VL53LX_RdByte(
 80107ea:	f107 030e 	add.w	r3, r7, #14
 80107ee:	461a      	mov	r2, r3
 80107f0:	2131      	movs	r1, #49	; 0x31
 80107f2:	6878      	ldr	r0, [r7, #4]
 80107f4:	f000 fc2a 	bl	801104c <VL53LX_RdByte>
 80107f8:	4603      	mov	r3, r0
 80107fa:	75bb      	strb	r3, [r7, #22]
					VL53LX_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 80107fc:	7bbb      	ldrb	r3, [r7, #14]
 80107fe:	f003 0201 	and.w	r2, r3, #1
 8010802:	7dfb      	ldrb	r3, [r7, #23]
 8010804:	429a      	cmp	r2, r3
 8010806:	d103      	bne.n	8010810 <VL53LX_is_new_data_ready+0x62>
		*pready = 0x01;
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	2201      	movs	r2, #1
 801080c:	701a      	strb	r2, [r3, #0]
 801080e:	e002      	b.n	8010816 <VL53LX_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	2200      	movs	r2, #0
 8010814:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8010816:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 801081a:	4618      	mov	r0, r3
 801081c:	3718      	adds	r7, #24
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}

08010822 <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 8010822:	b580      	push	{r7, lr}
 8010824:	b086      	sub	sp, #24
 8010826:	af02      	add	r7, sp, #8
 8010828:	6078      	str	r0, [r7, #4]
 801082a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 801082c:	2300      	movs	r3, #0
 801082e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 8010830:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f000 fca1 	bl	801117c <VL53LX_WaitUs>
 801083a:	4603      	mov	r3, r0
 801083c:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 801083e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d10b      	bne.n	801085e <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 8010846:	2301      	movs	r3, #1
 8010848:	9301      	str	r3, [sp, #4]
 801084a:	2301      	movs	r3, #1
 801084c:	9300      	str	r3, [sp, #0]
 801084e:	2301      	movs	r3, #1
 8010850:	22e5      	movs	r2, #229	; 0xe5
 8010852:	6839      	ldr	r1, [r7, #0]
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f000 fca9 	bl	80111ac <VL53LX_WaitValueMaskEx>
 801085a:	4603      	mov	r3, r0
 801085c:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 801085e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d103      	bne.n	801086e <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 8010866:	2103      	movs	r1, #3
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f7f7 f815 	bl	8007898 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 801086e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010872:	4618      	mov	r0, r3
 8010874:	3710      	adds	r7, #16
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}

0801087a <VL53LX_poll_for_range_completion>:


VL53LX_Error VL53LX_poll_for_range_completion(
	VL53LX_DEV     Dev,
	uint32_t       timeout_ms)
{
 801087a:	b580      	push	{r7, lr}
 801087c:	b088      	sub	sp, #32
 801087e:	af02      	add	r7, sp, #8
 8010880:	6078      	str	r0, [r7, #4]
 8010882:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010884:	2300      	movs	r3, #0
 8010886:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	3318      	adds	r3, #24
 801088c:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 801088e:	2300      	movs	r3, #0
 8010890:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8010892:	2300      	movs	r3, #0
 8010894:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8010896:	693b      	ldr	r3, [r7, #16]
 8010898:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 801089c:	f003 0310 	and.w	r3, r3, #16
 80108a0:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 80108a2:	7bfb      	ldrb	r3, [r7, #15]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d102      	bne.n	80108ae <VL53LX_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 80108a8:	2301      	movs	r3, #1
 80108aa:	75fb      	strb	r3, [r7, #23]
 80108ac:	e001      	b.n	80108b2 <VL53LX_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 80108ae:	2300      	movs	r3, #0
 80108b0:	75fb      	strb	r3, [r7, #23]

	status =
		VL53LX_WaitValueMaskEx(
 80108b2:	7dfb      	ldrb	r3, [r7, #23]
 80108b4:	2201      	movs	r2, #1
 80108b6:	9201      	str	r2, [sp, #4]
 80108b8:	2201      	movs	r2, #1
 80108ba:	9200      	str	r2, [sp, #0]
 80108bc:	2231      	movs	r2, #49	; 0x31
 80108be:	6839      	ldr	r1, [r7, #0]
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f000 fc73 	bl	80111ac <VL53LX_WaitValueMaskEx>
 80108c6:	4603      	mov	r3, r0
 80108c8:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53LX_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 80108ca:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3718      	adds	r7, #24
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}

080108d6 <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 80108d6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80108da:	b0a2      	sub	sp, #136	; 0x88
 80108dc:	af00      	add	r7, sp, #0
 80108de:	65f8      	str	r0, [r7, #92]	; 0x5c
 80108e0:	4618      	mov	r0, r3
 80108e2:	460b      	mov	r3, r1
 80108e4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80108e8:	4613      	mov	r3, r2
 80108ea:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80108ee:	4603      	mov	r3, r0
 80108f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



	VL53LX_Error status = VL53LX_ERROR_NONE;
 80108f4:	2300      	movs	r3, #0
 80108f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	uint8_t row = 0;
 80108fa:	2300      	movs	r3, #0
 80108fc:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t col = 0;
 8010900:	2300      	movs	r3, #0
 8010902:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65



	int16_t  bound_l_x = 0;
 8010906:	2300      	movs	r3, #0
 8010908:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	int16_t  bound_r_x = 0;
 801090c:	2300      	movs	r3, #0
 801090e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	int16_t  bound_u_y = 0;
 8010912:	2300      	movs	r3, #0
 8010914:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	int16_t  bound_d_y = 0;
 8010918:	2300      	movs	r3, #0
 801091a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

	int64_t xtalk_rate_ll = 0;
 801091e:	f04f 0200 	mov.w	r2, #0
 8010922:	f04f 0300 	mov.w	r3, #0
 8010926:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t xtalk_rate_ur = 0;
 801092a:	f04f 0200 	mov.w	r2, #0
 801092e:	f04f 0300 	mov.w	r3, #0
 8010932:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	int64_t xtalk_avg = 0;
 8010936:	f04f 0200 	mov.w	r2, #0
 801093a:	f04f 0300 	mov.w	r3, #0
 801093e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	if (status == VL53LX_ERROR_NONE) {
 8010942:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010946:	2b00      	cmp	r3, #0
 8010948:	d108      	bne.n	801095c <VL53LX_f_032+0x86>
		VL53LX_decode_row_col(
 801094a:	f107 0265 	add.w	r2, r7, #101	; 0x65
 801094e:	f107 0166 	add.w	r1, r7, #102	; 0x66
 8010952:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8010956:	4618      	mov	r0, r3
 8010958:	f7fb fad4 	bl	800bf04 <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 801095c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010960:	2b00      	cmp	r3, #0
 8010962:	d165      	bne.n	8010a30 <VL53LX_f_032+0x15a>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 8010964:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010968:	091b      	lsrs	r3, r3, #4
 801096a:	b2db      	uxtb	r3, r3
 801096c:	f003 0301 	and.w	r3, r3, #1
 8010970:	2b00      	cmp	r3, #0
 8010972:	d00e      	beq.n	8010992 <VL53LX_f_032+0xbc>
			bound_l_x = (int16_t) col -
 8010974:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8010978:	b29a      	uxth	r2, r3
 801097a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 801097e:	095b      	lsrs	r3, r3, #5
 8010980:	b2db      	uxtb	r3, r3
 8010982:	b29b      	uxth	r3, r3
 8010984:	1ad3      	subs	r3, r2, r3
 8010986:	b29b      	uxth	r3, r3
 8010988:	3b01      	subs	r3, #1
 801098a:	b29b      	uxth	r3, r3
 801098c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8010990:	e00b      	b.n	80109aa <VL53LX_f_032+0xd4>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 8010992:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8010996:	b29a      	uxth	r2, r3
 8010998:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 801099c:	095b      	lsrs	r3, r3, #5
 801099e:	b2db      	uxtb	r3, r3
 80109a0:	b29b      	uxth	r3, r3
 80109a2:	1ad3      	subs	r3, r2, r3
 80109a4:	b29b      	uxth	r3, r3
 80109a6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 80109aa:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80109ae:	b29a      	uxth	r2, r3
 80109b0:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80109b4:	095b      	lsrs	r3, r3, #5
 80109b6:	b2db      	uxtb	r3, r3
 80109b8:	b29b      	uxth	r3, r3
 80109ba:	4413      	add	r3, r2
 80109bc:	b29b      	uxth	r3, r3
 80109be:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 80109c2:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80109c6:	f003 0301 	and.w	r3, r3, #1
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d011      	beq.n	80109f2 <VL53LX_f_032+0x11c>
			bound_d_y = (int16_t) row -
 80109ce:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80109d2:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 80109d4:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80109d8:	f003 020f 	and.w	r2, r3, #15
 80109dc:	0fd3      	lsrs	r3, r2, #31
 80109de:	4413      	add	r3, r2
 80109e0:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 80109e2:	b29b      	uxth	r3, r3
 80109e4:	1acb      	subs	r3, r1, r3
 80109e6:	b29b      	uxth	r3, r3
 80109e8:	3b01      	subs	r3, #1
 80109ea:	b29b      	uxth	r3, r3
 80109ec:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 80109f0:	e00f      	b.n	8010a12 <VL53LX_f_032+0x13c>
		else
			bound_d_y = (int16_t) row -
 80109f2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80109f6:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 80109f8:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80109fc:	f003 020f 	and.w	r2, r3, #15
 8010a00:	0fd3      	lsrs	r3, r2, #31
 8010a02:	4413      	add	r3, r2
 8010a04:	105b      	asrs	r3, r3, #1
 8010a06:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8010a08:	b29b      	uxth	r3, r3
 8010a0a:	440b      	add	r3, r1
 8010a0c:	b29b      	uxth	r3, r3
 8010a0e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

		bound_u_y = (int16_t) row +
 8010a12:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8010a16:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8010a18:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010a1c:	f003 020f 	and.w	r2, r3, #15
 8010a20:	0fd3      	lsrs	r3, r2, #31
 8010a22:	4413      	add	r3, r2
 8010a24:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8010a26:	b29b      	uxth	r3, r3
 8010a28:	440b      	add	r3, r1
 8010a2a:	b29b      	uxth	r3, r3
 8010a2c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8010a30:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d133      	bne.n	8010aa0 <VL53LX_f_032+0x1ca>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8010a38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8010a42:	4413      	add	r3, r2
 8010a44:	b29b      	uxth	r3, r3
 8010a46:	005b      	lsls	r3, r3, #1
 8010a48:	b29b      	uxth	r3, r3
 8010a4a:	3b0f      	subs	r3, #15
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8010a52:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010a56:	b29a      	uxth	r2, r3
 8010a58:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8010a5c:	4413      	add	r3, r2
 8010a5e:	b29b      	uxth	r3, r3
 8010a60:	005b      	lsls	r3, r3, #1
 8010a62:	b29b      	uxth	r3, r3
 8010a64:	3b0f      	subs	r3, #15
 8010a66:	b29b      	uxth	r3, r3
 8010a68:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8010a6c:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 8010a70:	b29a      	uxth	r2, r3
 8010a72:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8010a76:	4413      	add	r3, r2
 8010a78:	b29b      	uxth	r3, r3
 8010a7a:	005b      	lsls	r3, r3, #1
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	3b0f      	subs	r3, #15
 8010a80:	b29b      	uxth	r3, r3
 8010a82:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8010a86:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 8010a8a:	b29a      	uxth	r2, r3
 8010a8c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8010a90:	4413      	add	r3, r2
 8010a92:	b29b      	uxth	r3, r3
 8010a94:	005b      	lsls	r3, r3, #1
 8010a96:	b29b      	uxth	r3, r3
 8010a98:	3b0f      	subs	r3, #15
 8010a9a:	b29b      	uxth	r3, r3
 8010a9c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8010aa0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	f040 80cb 	bne.w	8010c40 <VL53LX_f_032+0x36a>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010aaa:	f9b7 0086 	ldrsh.w	r0, [r7, #134]	; 0x86
 8010aae:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010ab2:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8010ab6:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010aba:	fb02 f501 	mul.w	r5, r2, r1
 8010abe:	fb00 f403 	mul.w	r4, r0, r3
 8010ac2:	442c      	add	r4, r5
 8010ac4:	fba0 8902 	umull	r8, r9, r0, r2
 8010ac8:	eb04 0309 	add.w	r3, r4, r9
 8010acc:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010ace:	f9b7 0080 	ldrsh.w	r0, [r7, #128]	; 0x80
 8010ad2:	ea4f 71e0 	mov.w	r1, r0, asr #31
					((int64_t)ygradient));
 8010ad6:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8010ada:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010ade:	fb02 f501 	mul.w	r5, r2, r1
 8010ae2:	fb00 f403 	mul.w	r4, r0, r3
 8010ae6:	442c      	add	r4, r5
 8010ae8:	fba0 2302 	umull	r2, r3, r0, r2
 8010aec:	18e1      	adds	r1, r4, r3
 8010aee:	460b      	mov	r3, r1
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010af0:	eb18 0102 	adds.w	r1, r8, r2
 8010af4:	6339      	str	r1, [r7, #48]	; 0x30
 8010af6:	eb49 0303 	adc.w	r3, r9, r3
 8010afa:	637b      	str	r3, [r7, #52]	; 0x34
 8010afc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8010b00:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8010b04:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010b08:	f112 0a01 	adds.w	sl, r2, #1
 8010b0c:	f143 0b00 	adc.w	fp, r3, #0
 8010b10:	ea4f 73db 	mov.w	r3, fp, lsr #31
 8010b14:	461a      	mov	r2, r3
 8010b16:	f04f 0300 	mov.w	r3, #0
 8010b1a:	eb12 010a 	adds.w	r1, r2, sl
 8010b1e:	62b9      	str	r1, [r7, #40]	; 0x28
 8010b20:	eb43 030b 	adc.w	r3, r3, fp
 8010b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b26:	f04f 0200 	mov.w	r2, #0
 8010b2a:	f04f 0300 	mov.w	r3, #0
 8010b2e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8010b32:	4621      	mov	r1, r4
 8010b34:	084a      	lsrs	r2, r1, #1
 8010b36:	4629      	mov	r1, r5
 8010b38:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010b3c:	4629      	mov	r1, r5
 8010b3e:	104b      	asrs	r3, r1, #1
 8010b40:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8010b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b46:	461a      	mov	r2, r3
 8010b48:	f04f 0300 	mov.w	r3, #0
 8010b4c:	f04f 0000 	mov.w	r0, #0
 8010b50:	f04f 0100 	mov.w	r1, #0
 8010b54:	0099      	lsls	r1, r3, #2
 8010b56:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8010b5a:	0090      	lsls	r0, r2, #2
 8010b5c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010b60:	1814      	adds	r4, r2, r0
 8010b62:	623c      	str	r4, [r7, #32]
 8010b64:	414b      	adcs	r3, r1
 8010b66:	627b      	str	r3, [r7, #36]	; 0x24
 8010b68:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010b6c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8010b70:	f9b7 0084 	ldrsh.w	r0, [r7, #132]	; 0x84
 8010b74:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8010b78:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8010b7c:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8010b80:	fb02 f501 	mul.w	r5, r2, r1
 8010b84:	fb00 f403 	mul.w	r4, r0, r3
 8010b88:	442c      	add	r4, r5
 8010b8a:	fba0 8902 	umull	r8, r9, r0, r2
 8010b8e:	eb04 0309 	add.w	r3, r4, r9
 8010b92:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8010b94:	f9b7 0082 	ldrsh.w	r0, [r7, #130]	; 0x82
 8010b98:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)ygradient));
 8010b9c:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8010ba0:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8010ba4:	fb02 f501 	mul.w	r5, r2, r1
 8010ba8:	fb00 f403 	mul.w	r4, r0, r3
 8010bac:	442c      	add	r4, r5
 8010bae:	fba0 2302 	umull	r2, r3, r0, r2
 8010bb2:	18e1      	adds	r1, r4, r3
 8010bb4:	460b      	mov	r3, r1
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8010bb6:	eb18 0102 	adds.w	r1, r8, r2
 8010bba:	61b9      	str	r1, [r7, #24]
 8010bbc:	eb49 0303 	adc.w	r3, r9, r3
 8010bc0:	61fb      	str	r3, [r7, #28]
 8010bc2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010bc6:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8010bca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010bce:	1c51      	adds	r1, r2, #1
 8010bd0:	64b9      	str	r1, [r7, #72]	; 0x48
 8010bd2:	f143 0300 	adc.w	r3, r3, #0
 8010bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010bd8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8010bdc:	462b      	mov	r3, r5
 8010bde:	0fdb      	lsrs	r3, r3, #31
 8010be0:	461a      	mov	r2, r3
 8010be2:	f04f 0300 	mov.w	r3, #0
 8010be6:	4621      	mov	r1, r4
 8010be8:	1851      	adds	r1, r2, r1
 8010bea:	6139      	str	r1, [r7, #16]
 8010bec:	4629      	mov	r1, r5
 8010bee:	eb43 0101 	adc.w	r1, r3, r1
 8010bf2:	6179      	str	r1, [r7, #20]
 8010bf4:	f04f 0200 	mov.w	r2, #0
 8010bf8:	f04f 0300 	mov.w	r3, #0
 8010bfc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010c00:	4621      	mov	r1, r4
 8010c02:	084a      	lsrs	r2, r1, #1
 8010c04:	4629      	mov	r1, r5
 8010c06:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010c0a:	4629      	mov	r1, r5
 8010c0c:	104b      	asrs	r3, r1, #1
 8010c0e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8010c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c14:	4618      	mov	r0, r3
 8010c16:	f04f 0100 	mov.w	r1, #0
 8010c1a:	f04f 0200 	mov.w	r2, #0
 8010c1e:	f04f 0300 	mov.w	r3, #0
 8010c22:	008b      	lsls	r3, r1, #2
 8010c24:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010c28:	0082      	lsls	r2, r0, #2
 8010c2a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010c2e:	1884      	adds	r4, r0, r2
 8010c30:	60bc      	str	r4, [r7, #8]
 8010c32:	eb41 0303 	adc.w	r3, r1, r3
 8010c36:	60fb      	str	r3, [r7, #12]
 8010c38:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010c3c:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 8010c40:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d12e      	bne.n	8010ca6 <VL53LX_f_032+0x3d0>
		xtalk_avg = do_division_s(
 8010c48:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8010c4c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010c50:	1884      	adds	r4, r0, r2
 8010c52:	643c      	str	r4, [r7, #64]	; 0x40
 8010c54:	eb41 0303 	adc.w	r3, r1, r3
 8010c58:	647b      	str	r3, [r7, #68]	; 0x44
 8010c5a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8010c5e:	460b      	mov	r3, r1
 8010c60:	3301      	adds	r3, #1
 8010c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c64:	4613      	mov	r3, r2
 8010c66:	f143 0300 	adc.w	r3, r3, #0
 8010c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c6c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8010c70:	462b      	mov	r3, r5
 8010c72:	0fdb      	lsrs	r3, r3, #31
 8010c74:	461a      	mov	r2, r3
 8010c76:	f04f 0300 	mov.w	r3, #0
 8010c7a:	4621      	mov	r1, r4
 8010c7c:	1851      	adds	r1, r2, r1
 8010c7e:	6039      	str	r1, [r7, #0]
 8010c80:	4629      	mov	r1, r5
 8010c82:	eb43 0101 	adc.w	r1, r3, r1
 8010c86:	6079      	str	r1, [r7, #4]
 8010c88:	f04f 0200 	mov.w	r2, #0
 8010c8c:	f04f 0300 	mov.w	r3, #0
 8010c90:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010c94:	4621      	mov	r1, r4
 8010c96:	084a      	lsrs	r2, r1, #1
 8010c98:	4629      	mov	r1, r5
 8010c9a:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010c9e:	4629      	mov	r1, r5
 8010ca0:	104b      	asrs	r3, r1, #1
 8010ca2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 8010ca6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d10b      	bne.n	8010cc6 <VL53LX_f_032+0x3f0>
		if (xtalk_avg < 0)
 8010cae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010cb2:	2a00      	cmp	r2, #0
 8010cb4:	f173 0300 	sbcs.w	r3, r3, #0
 8010cb8:	da05      	bge.n	8010cc6 <VL53LX_f_032+0x3f0>
			xtalk_avg = 0;
 8010cba:	f04f 0200 	mov.w	r2, #0
 8010cbe:	f04f 0300 	mov.w	r3, #0
 8010cc2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8010cc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010cc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010ccc:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8010cce:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	3788      	adds	r7, #136	; 0x88
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010cdc <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8010cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ce0:	b08d      	sub	sp, #52	; 0x34
 8010ce2:	af00      	add	r7, sp, #0
 8010ce4:	60f8      	str	r0, [r7, #12]
 8010ce6:	60b9      	str	r1, [r7, #8]
 8010ce8:	607a      	str	r2, [r7, #4]
 8010cea:	603b      	str	r3, [r7, #0]


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 8010cec:	2300      	movs	r3, #0
 8010cee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	uint64_t xtalk_events_per_spad = 0;
 8010cf2:	f04f 0200 	mov.w	r2, #0
 8010cf6:	f04f 0300 	mov.w	r3, #0
 8010cfa:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint64_t xtalk_total_events = 0;
 8010cfe:	f04f 0200 	mov.w	r2, #0
 8010d02:	f04f 0300 	mov.w	r3, #0
 8010d06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t xtalk_temp_bin = 0;
 8010d0a:	f04f 0200 	mov.w	r2, #0
 8010d0e:	f04f 0300 	mov.w	r3, #0
 8010d12:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t  i = 0;
 8010d16:	2300      	movs	r3, #0
 8010d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f04f 0100 	mov.w	r1, #0
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	f04f 0300 	mov.w	r3, #0
 8010d30:	fb02 fc01 	mul.w	ip, r2, r1
 8010d34:	fb00 f603 	mul.w	r6, r0, r3
 8010d38:	4466      	add	r6, ip
 8010d3a:	fba0 2302 	umull	r2, r3, r0, r2
 8010d3e:	18f1      	adds	r1, r6, r3
 8010d40:	460b      	mov	r3, r1
 8010d42:	f512 7afa 	adds.w	sl, r2, #500	; 0x1f4
 8010d46:	f143 0b00 	adc.w	fp, r3, #0
 8010d4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010d4e:	f04f 0300 	mov.w	r3, #0
 8010d52:	4650      	mov	r0, sl
 8010d54:	4659      	mov	r1, fp
 8010d56:	f7ef fae3 	bl	8000320 <__aeabi_uldivmod>
 8010d5a:	4602      	mov	r2, r0
 8010d5c:	460b      	mov	r3, r1
 8010d5e:	e9c7 2306 	strd	r2, r3, [r7, #24]




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8010d68:	b29a      	uxth	r2, r3
 8010d6a:	f04f 0300 	mov.w	r3, #0
	xtalk_total_events = xtalk_events_per_spad *
 8010d6e:	69f9      	ldr	r1, [r7, #28]
 8010d70:	fb02 f001 	mul.w	r0, r2, r1
 8010d74:	69b9      	ldr	r1, [r7, #24]
 8010d76:	fb03 f101 	mul.w	r1, r3, r1
 8010d7a:	4401      	add	r1, r0
 8010d7c:	69b8      	ldr	r0, [r7, #24]
 8010d7e:	fba0 2302 	umull	r2, r3, r0, r2
 8010d82:	4419      	add	r1, r3
 8010d84:	460b      	mov	r3, r1
 8010d86:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8010d8a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8010d8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8010d92:	f04f 0200 	mov.w	r2, #0
 8010d96:	f04f 0300 	mov.w	r3, #0
 8010d9a:	0a02      	lsrs	r2, r0, #8
 8010d9c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010da0:	0a0b      	lsrs	r3, r1, #8
 8010da2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8010da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010daa:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 8010dae:	f143 0900 	adc.w	r9, r3, #0
 8010db2:	f04f 0200 	mov.w	r2, #0
 8010db6:	f04f 0300 	mov.w	r3, #0
 8010dba:	ea4f 22d8 	mov.w	r2, r8, lsr #11
 8010dbe:	ea42 5249 	orr.w	r2, r2, r9, lsl #21
 8010dc2:	ea4f 23d9 	mov.w	r3, r9, lsr #11
 8010dc6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (xtalk_total_events > 0xFFFFFFFF)
 8010dca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010dce:	2b01      	cmp	r3, #1
 8010dd0:	bf08      	it	eq
 8010dd2:	2a00      	cmpeq	r2, #0
 8010dd4:	d305      	bcc.n	8010de2 <VL53LX_f_033+0x106>
		xtalk_total_events = 0xFFFFFFFF;
 8010dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8010dda:	f04f 0300 	mov.w	r3, #0
 8010dde:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8010de2:	2300      	movs	r3, #0
 8010de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010de8:	e035      	b.n	8010e56 <VL53LX_f_033+0x17a>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8010dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010dee:	68ba      	ldr	r2, [r7, #8]
 8010df0:	3302      	adds	r3, #2
 8010df2:	009b      	lsls	r3, r3, #2
 8010df4:	4413      	add	r3, r2
 8010df6:	685b      	ldr	r3, [r3, #4]
 8010df8:	461a      	mov	r2, r3
 8010dfa:	f04f 0300 	mov.w	r3, #0
 8010dfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e00:	fb02 f001 	mul.w	r0, r2, r1
 8010e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010e06:	fb03 f101 	mul.w	r1, r3, r1
 8010e0a:	4401      	add	r1, r0
 8010e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e0e:	fba0 2302 	umull	r2, r3, r0, r2
 8010e12:	4419      	add	r1, r3
 8010e14:	460b      	mov	r3, r1
 8010e16:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8010e1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8010e1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010e22:	f512 7400 	adds.w	r4, r2, #512	; 0x200
 8010e26:	f143 0500 	adc.w	r5, r3, #0
 8010e2a:	f04f 0200 	mov.w	r2, #0
 8010e2e:	f04f 0300 	mov.w	r3, #0
 8010e32:	0aa2      	lsrs	r2, r4, #10
 8010e34:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
 8010e38:	0aab      	lsrs	r3, r5, #10
 8010e3a:	e9c7 2304 	strd	r2, r3, [r7, #16]

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8010e3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010e42:	6939      	ldr	r1, [r7, #16]
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	3206      	adds	r2, #6
 8010e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8010e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e50:	3301      	adds	r3, #1
 8010e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	7a9b      	ldrb	r3, [r3, #10]
 8010e5a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d3c3      	bcc.n	8010dea <VL53LX_f_033+0x10e>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8010e62:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3734      	adds	r7, #52	; 0x34
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010e70 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b084      	sub	sp, #16
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	60f8      	str	r0, [r7, #12]
 8010e78:	60b9      	str	r1, [r7, #8]
 8010e7a:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	68fa      	ldr	r2, [r7, #12]
 8010e82:	8910      	ldrh	r0, [r2, #8]
 8010e84:	687a      	ldr	r2, [r7, #4]
 8010e86:	b292      	uxth	r2, r2
 8010e88:	68b9      	ldr	r1, [r7, #8]
 8010e8a:	4798      	blx	r3
 8010e8c:	4603      	mov	r3, r0
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3710      	adds	r7, #16
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}

08010e96 <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8010e96:	b580      	push	{r7, lr}
 8010e98:	b084      	sub	sp, #16
 8010e9a:	af00      	add	r7, sp, #0
 8010e9c:	60f8      	str	r0, [r7, #12]
 8010e9e:	60b9      	str	r1, [r7, #8]
 8010ea0:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	691b      	ldr	r3, [r3, #16]
 8010ea6:	68fa      	ldr	r2, [r7, #12]
 8010ea8:	8910      	ldrh	r0, [r2, #8]
 8010eaa:	687a      	ldr	r2, [r7, #4]
 8010eac:	b292      	uxth	r2, r2
 8010eae:	68b9      	ldr	r1, [r7, #8]
 8010eb0:	4798      	blx	r3
 8010eb2:	4603      	mov	r3, r0
}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	3710      	adds	r7, #16
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}

08010ebc <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b086      	sub	sp, #24
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	60f8      	str	r0, [r7, #12]
 8010ec4:	607a      	str	r2, [r7, #4]
 8010ec6:	603b      	str	r3, [r7, #0]
 8010ec8:	460b      	mov	r3, r1
 8010eca:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	2bff      	cmp	r3, #255	; 0xff
 8010ed4:	d902      	bls.n	8010edc <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 8010ed6:	f06f 0303 	mvn.w	r3, #3
 8010eda:	e01d      	b.n	8010f18 <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8010edc:	897b      	ldrh	r3, [r7, #10]
 8010ede:	0a1b      	lsrs	r3, r3, #8
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	b2da      	uxtb	r2, r3
 8010ee4:	4b0e      	ldr	r3, [pc, #56]	; (8010f20 <VL53LX_WriteMulti+0x64>)
 8010ee6:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010ee8:	897b      	ldrh	r3, [r7, #10]
 8010eea:	b2da      	uxtb	r2, r3
 8010eec:	4b0c      	ldr	r3, [pc, #48]	; (8010f20 <VL53LX_WriteMulti+0x64>)
 8010eee:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8010ef0:	683a      	ldr	r2, [r7, #0]
 8010ef2:	6879      	ldr	r1, [r7, #4]
 8010ef4:	480b      	ldr	r0, [pc, #44]	; (8010f24 <VL53LX_WriteMulti+0x68>)
 8010ef6:	f003 fa39 	bl	801436c <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	3302      	adds	r3, #2
 8010efe:	461a      	mov	r2, r3
 8010f00:	4907      	ldr	r1, [pc, #28]	; (8010f20 <VL53LX_WriteMulti+0x64>)
 8010f02:	68f8      	ldr	r0, [r7, #12]
 8010f04:	f7ff ffb4 	bl	8010e70 <_I2CWrite>
 8010f08:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d001      	beq.n	8010f14 <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010f10:	23f3      	movs	r3, #243	; 0xf3
 8010f12:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 8010f14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3718      	adds	r7, #24
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}
 8010f20:	200070f4 	.word	0x200070f4
 8010f24:	200070f6 	.word	0x200070f6

08010f28 <VL53LX_ReadMulti>:

VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b086      	sub	sp, #24
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	60f8      	str	r0, [r7, #12]
 8010f30:	607a      	str	r2, [r7, #4]
 8010f32:	603b      	str	r3, [r7, #0]
 8010f34:	460b      	mov	r3, r1
 8010f36:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010f3c:	897b      	ldrh	r3, [r7, #10]
 8010f3e:	0a1b      	lsrs	r3, r3, #8
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	b2da      	uxtb	r2, r3
 8010f44:	4b12      	ldr	r3, [pc, #72]	; (8010f90 <VL53LX_ReadMulti+0x68>)
 8010f46:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010f48:	897b      	ldrh	r3, [r7, #10]
 8010f4a:	b2da      	uxtb	r2, r3
 8010f4c:	4b10      	ldr	r3, [pc, #64]	; (8010f90 <VL53LX_ReadMulti+0x68>)
 8010f4e:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8010f50:	2202      	movs	r2, #2
 8010f52:	490f      	ldr	r1, [pc, #60]	; (8010f90 <VL53LX_ReadMulti+0x68>)
 8010f54:	68f8      	ldr	r0, [r7, #12]
 8010f56:	f7ff ff8b 	bl	8010e70 <_I2CWrite>
 8010f5a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d002      	beq.n	8010f68 <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010f62:	23f3      	movs	r3, #243	; 0xf3
 8010f64:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010f66:	e00c      	b.n	8010f82 <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8010f68:	683a      	ldr	r2, [r7, #0]
 8010f6a:	6879      	ldr	r1, [r7, #4]
 8010f6c:	68f8      	ldr	r0, [r7, #12]
 8010f6e:	f7ff ff92 	bl	8010e96 <_I2CRead>
 8010f72:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010f74:	693b      	ldr	r3, [r7, #16]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d002      	beq.n	8010f80 <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010f7a:	23f3      	movs	r3, #243	; 0xf3
 8010f7c:	75fb      	strb	r3, [r7, #23]
 8010f7e:	e000      	b.n	8010f82 <VL53LX_ReadMulti+0x5a>
    }
done:
 8010f80:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8010f82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010f86:	4618      	mov	r0, r3
 8010f88:	3718      	adds	r7, #24
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}
 8010f8e:	bf00      	nop
 8010f90:	200070f4 	.word	0x200070f4

08010f94 <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b084      	sub	sp, #16
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	460b      	mov	r3, r1
 8010f9e:	807b      	strh	r3, [r7, #2]
 8010fa0:	4613      	mov	r3, r2
 8010fa2:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010fa8:	887b      	ldrh	r3, [r7, #2]
 8010faa:	0a1b      	lsrs	r3, r3, #8
 8010fac:	b29b      	uxth	r3, r3
 8010fae:	b2da      	uxtb	r2, r3
 8010fb0:	4b0c      	ldr	r3, [pc, #48]	; (8010fe4 <VL53LX_WrByte+0x50>)
 8010fb2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010fb4:	887b      	ldrh	r3, [r7, #2]
 8010fb6:	b2da      	uxtb	r2, r3
 8010fb8:	4b0a      	ldr	r3, [pc, #40]	; (8010fe4 <VL53LX_WrByte+0x50>)
 8010fba:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8010fbc:	4a09      	ldr	r2, [pc, #36]	; (8010fe4 <VL53LX_WrByte+0x50>)
 8010fbe:	787b      	ldrb	r3, [r7, #1]
 8010fc0:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8010fc2:	2203      	movs	r2, #3
 8010fc4:	4907      	ldr	r1, [pc, #28]	; (8010fe4 <VL53LX_WrByte+0x50>)
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f7ff ff52 	bl	8010e70 <_I2CWrite>
 8010fcc:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d001      	beq.n	8010fd8 <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010fd4:	23f3      	movs	r3, #243	; 0xf3
 8010fd6:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8010fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3710      	adds	r7, #16
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}
 8010fe4:	200070f4 	.word	0x200070f4

08010fe8 <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b084      	sub	sp, #16
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	807b      	strh	r3, [r7, #2]
 8010ff4:	4613      	mov	r3, r2
 8010ff6:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010ffc:	887b      	ldrh	r3, [r7, #2]
 8010ffe:	0a1b      	lsrs	r3, r3, #8
 8011000:	b29b      	uxth	r3, r3
 8011002:	b2da      	uxtb	r2, r3
 8011004:	4b10      	ldr	r3, [pc, #64]	; (8011048 <VL53LX_WrWord+0x60>)
 8011006:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011008:	887b      	ldrh	r3, [r7, #2]
 801100a:	b2da      	uxtb	r2, r3
 801100c:	4b0e      	ldr	r3, [pc, #56]	; (8011048 <VL53LX_WrWord+0x60>)
 801100e:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8011010:	883b      	ldrh	r3, [r7, #0]
 8011012:	0a1b      	lsrs	r3, r3, #8
 8011014:	b29b      	uxth	r3, r3
 8011016:	b2da      	uxtb	r2, r3
 8011018:	4b0b      	ldr	r3, [pc, #44]	; (8011048 <VL53LX_WrWord+0x60>)
 801101a:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 801101c:	883b      	ldrh	r3, [r7, #0]
 801101e:	b2da      	uxtb	r2, r3
 8011020:	4b09      	ldr	r3, [pc, #36]	; (8011048 <VL53LX_WrWord+0x60>)
 8011022:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8011024:	2204      	movs	r2, #4
 8011026:	4908      	ldr	r1, [pc, #32]	; (8011048 <VL53LX_WrWord+0x60>)
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	f7ff ff21 	bl	8010e70 <_I2CWrite>
 801102e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d001      	beq.n	801103a <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011036:	23f3      	movs	r3, #243	; 0xf3
 8011038:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 801103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801103e:	4618      	mov	r0, r3
 8011040:	3710      	adds	r7, #16
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}
 8011046:	bf00      	nop
 8011048:	200070f4 	.word	0x200070f4

0801104c <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 801104c:	b580      	push	{r7, lr}
 801104e:	b086      	sub	sp, #24
 8011050:	af00      	add	r7, sp, #0
 8011052:	60f8      	str	r0, [r7, #12]
 8011054:	460b      	mov	r3, r1
 8011056:	607a      	str	r2, [r7, #4]
 8011058:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 801105a:	2300      	movs	r3, #0
 801105c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 801105e:	897b      	ldrh	r3, [r7, #10]
 8011060:	0a1b      	lsrs	r3, r3, #8
 8011062:	b29b      	uxth	r3, r3
 8011064:	b2da      	uxtb	r2, r3
 8011066:	4b12      	ldr	r3, [pc, #72]	; (80110b0 <VL53LX_RdByte+0x64>)
 8011068:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 801106a:	897b      	ldrh	r3, [r7, #10]
 801106c:	b2da      	uxtb	r2, r3
 801106e:	4b10      	ldr	r3, [pc, #64]	; (80110b0 <VL53LX_RdByte+0x64>)
 8011070:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8011072:	2202      	movs	r2, #2
 8011074:	490e      	ldr	r1, [pc, #56]	; (80110b0 <VL53LX_RdByte+0x64>)
 8011076:	68f8      	ldr	r0, [r7, #12]
 8011078:	f7ff fefa 	bl	8010e70 <_I2CWrite>
 801107c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d002      	beq.n	801108a <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011084:	23f3      	movs	r3, #243	; 0xf3
 8011086:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011088:	e00c      	b.n	80110a4 <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 801108a:	2201      	movs	r2, #1
 801108c:	6879      	ldr	r1, [r7, #4]
 801108e:	68f8      	ldr	r0, [r7, #12]
 8011090:	f7ff ff01 	bl	8010e96 <_I2CRead>
 8011094:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8011096:	693b      	ldr	r3, [r7, #16]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d002      	beq.n	80110a2 <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801109c:	23f3      	movs	r3, #243	; 0xf3
 801109e:	75fb      	strb	r3, [r7, #23]
 80110a0:	e000      	b.n	80110a4 <VL53LX_RdByte+0x58>
    }
done:
 80110a2:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 80110a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3718      	adds	r7, #24
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	200070f4 	.word	0x200070f4

080110b4 <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b086      	sub	sp, #24
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	60f8      	str	r0, [r7, #12]
 80110bc:	460b      	mov	r3, r1
 80110be:	607a      	str	r2, [r7, #4]
 80110c0:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 80110c2:	2300      	movs	r3, #0
 80110c4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80110c6:	897b      	ldrh	r3, [r7, #10]
 80110c8:	0a1b      	lsrs	r3, r3, #8
 80110ca:	b29b      	uxth	r3, r3
 80110cc:	b2da      	uxtb	r2, r3
 80110ce:	4b18      	ldr	r3, [pc, #96]	; (8011130 <VL53LX_RdWord+0x7c>)
 80110d0:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80110d2:	897b      	ldrh	r3, [r7, #10]
 80110d4:	b2da      	uxtb	r2, r3
 80110d6:	4b16      	ldr	r3, [pc, #88]	; (8011130 <VL53LX_RdWord+0x7c>)
 80110d8:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80110da:	2202      	movs	r2, #2
 80110dc:	4914      	ldr	r1, [pc, #80]	; (8011130 <VL53LX_RdWord+0x7c>)
 80110de:	68f8      	ldr	r0, [r7, #12]
 80110e0:	f7ff fec6 	bl	8010e70 <_I2CWrite>
 80110e4:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d002      	beq.n	80110f2 <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80110ec:	23f3      	movs	r3, #243	; 0xf3
 80110ee:	75fb      	strb	r3, [r7, #23]
        goto done;
 80110f0:	e017      	b.n	8011122 <VL53LX_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80110f2:	2202      	movs	r2, #2
 80110f4:	490e      	ldr	r1, [pc, #56]	; (8011130 <VL53LX_RdWord+0x7c>)
 80110f6:	68f8      	ldr	r0, [r7, #12]
 80110f8:	f7ff fecd 	bl	8010e96 <_I2CRead>
 80110fc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80110fe:	693b      	ldr	r3, [r7, #16]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d002      	beq.n	801110a <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011104:	23f3      	movs	r3, #243	; 0xf3
 8011106:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011108:	e00b      	b.n	8011122 <VL53LX_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 801110a:	4b09      	ldr	r3, [pc, #36]	; (8011130 <VL53LX_RdWord+0x7c>)
 801110c:	781b      	ldrb	r3, [r3, #0]
 801110e:	b29b      	uxth	r3, r3
 8011110:	021b      	lsls	r3, r3, #8
 8011112:	b29a      	uxth	r2, r3
 8011114:	4b06      	ldr	r3, [pc, #24]	; (8011130 <VL53LX_RdWord+0x7c>)
 8011116:	785b      	ldrb	r3, [r3, #1]
 8011118:	b29b      	uxth	r3, r3
 801111a:	4413      	add	r3, r2
 801111c:	b29a      	uxth	r2, r3
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 8011122:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011126:	4618      	mov	r0, r3
 8011128:	3718      	adds	r7, #24
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}
 801112e:	bf00      	nop
 8011130:	200070f4 	.word	0x200070f4

08011134 <VL53LX_GetTickCount>:
    VL53LX_PutI2cBus();
    return Status;
}

VL53LX_Error VL53LX_GetTickCount(VL53LX_DEV Dev, uint32_t *ptick_count_ms)
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b084      	sub	sp, #16
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
 801113c:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 801113e:	2300      	movs	r3, #0
 8011140:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	695b      	ldr	r3, [r3, #20]
 8011146:	4798      	blx	r3
 8011148:	4603      	mov	r3, r0
 801114a:	461a      	mov	r2, r3
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8011150:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011154:	4618      	mov	r0, r3
 8011156:	3710      	adds	r7, #16
 8011158:	46bd      	mov	sp, r7
 801115a:	bd80      	pop	{r7, pc}

0801115c <VL53LX_WaitMs>:
	
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitMs(VL53LX_DEV Dev, int32_t wait_ms){
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
 8011164:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_ms);
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	4619      	mov	r1, r3
 801116a:	6878      	ldr	r0, [r7, #4]
 801116c:	f000 f8b8 	bl	80112e0 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 8011170:	2300      	movs	r3, #0
}
 8011172:	4618      	mov	r0, r3
 8011174:	3708      	adds	r7, #8
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
	...

0801117c <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_DEV Dev, int32_t wait_us){
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_us/1000);
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	4a07      	ldr	r2, [pc, #28]	; (80111a8 <VL53LX_WaitUs+0x2c>)
 801118a:	fb82 1203 	smull	r1, r2, r2, r3
 801118e:	1192      	asrs	r2, r2, #6
 8011190:	17db      	asrs	r3, r3, #31
 8011192:	1ad3      	subs	r3, r2, r3
 8011194:	4619      	mov	r1, r3
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f000 f8a2 	bl	80112e0 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 801119c:	2300      	movs	r3, #0
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3708      	adds	r7, #8
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	10624dd3 	.word	0x10624dd3

080111ac <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 80111ac:	b590      	push	{r4, r7, lr}
 80111ae:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80111b2:	af00      	add	r7, sp, #0
 80111b4:	f107 040c 	add.w	r4, r7, #12
 80111b8:	6020      	str	r0, [r4, #0]
 80111ba:	f107 0008 	add.w	r0, r7, #8
 80111be:	6001      	str	r1, [r0, #0]
 80111c0:	4619      	mov	r1, r3
 80111c2:	1dbb      	adds	r3, r7, #6
 80111c4:	801a      	strh	r2, [r3, #0]
 80111c6:	1d7b      	adds	r3, r7, #5
 80111c8:	460a      	mov	r2, r1
 80111ca:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 80111cc:	2300      	movs	r3, #0
 80111ce:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 80111d2:	2300      	movs	r3, #0
 80111d4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 80111d8:	2300      	movs	r3, #0
 80111da:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 80111de:	2300      	movs	r3, #0
 80111e0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 80111e4:	2300      	movs	r3, #0
 80111e6:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 80111ea:	2300      	movs	r3, #0
 80111ec:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 80111f0:	f107 0310 	add.w	r3, r7, #16
 80111f4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80111f8:	4938      	ldr	r1, [pc, #224]	; (80112dc <VL53LX_WaitValueMaskEx+0x130>)
 80111fa:	4618      	mov	r0, r3
 80111fc:	f003 f95a 	bl	80144b4 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(Dev, &start_time_ms);
 8011200:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8011204:	f107 030c 	add.w	r3, r7, #12
 8011208:	4611      	mov	r1, r2
 801120a:	6818      	ldr	r0, [r3, #0]
 801120c:	f7ff ff92 	bl	8011134 <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 8011210:	e042      	b.n	8011298 <VL53LX_WaitValueMaskEx+0xec>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 8011212:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011216:	2b00      	cmp	r3, #0
 8011218:	d10b      	bne.n	8011232 <VL53LX_WaitValueMaskEx+0x86>
			status = VL53LX_RdByte(
 801121a:	f207 2213 	addw	r2, r7, #531	; 0x213
 801121e:	1dbb      	adds	r3, r7, #6
 8011220:	8819      	ldrh	r1, [r3, #0]
 8011222:	f107 030c 	add.w	r3, r7, #12
 8011226:	6818      	ldr	r0, [r3, #0]
 8011228:	f7ff ff10 	bl	801104c <VL53LX_RdByte>
 801122c:	4603      	mov	r3, r0
 801122e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8011232:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8011236:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 801123a:	4013      	ands	r3, r2
 801123c:	b2db      	uxtb	r3, r3
 801123e:	1d7a      	adds	r2, r7, #5
 8011240:	7812      	ldrb	r2, [r2, #0]
 8011242:	429a      	cmp	r2, r3
 8011244:	d102      	bne.n	801124c <VL53LX_WaitValueMaskEx+0xa0>
			found = 1;
 8011246:	2301      	movs	r3, #1
 8011248:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 801124c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011250:	2b00      	cmp	r3, #0
 8011252:	d112      	bne.n	801127a <VL53LX_WaitValueMaskEx+0xce>
 8011254:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8011258:	2b00      	cmp	r3, #0
 801125a:	d10e      	bne.n	801127a <VL53LX_WaitValueMaskEx+0xce>
			found == 0 &&
 801125c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8011260:	2b00      	cmp	r3, #0
 8011262:	d00a      	beq.n	801127a <VL53LX_WaitValueMaskEx+0xce>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 8011264:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8011268:	f107 030c 	add.w	r3, r7, #12
 801126c:	4611      	mov	r1, r2
 801126e:	6818      	ldr	r0, [r3, #0]
 8011270:	f7ff ff74 	bl	801115c <VL53LX_WaitMs>
 8011274:	4603      	mov	r3, r0
 8011276:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(Dev, &current_time_ms);
 801127a:	f507 7205 	add.w	r2, r7, #532	; 0x214
 801127e:	f107 030c 	add.w	r3, r7, #12
 8011282:	4611      	mov	r1, r2
 8011284:	6818      	ldr	r0, [r3, #0]
 8011286:	f7ff ff55 	bl	8011134 <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 801128a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801128e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8011292:	1ad3      	subs	r3, r2, r3
 8011294:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53LX_ERROR_NONE) &&
 8011298:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 801129c:	2b00      	cmp	r3, #0
 801129e:	d10a      	bne.n	80112b6 <VL53LX_WaitValueMaskEx+0x10a>
 80112a0:	f107 0308 	add.w	r3, r7, #8
 80112a4:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d203      	bcs.n	80112b6 <VL53LX_WaitValueMaskEx+0x10a>
		   (polling_time_ms < timeout_ms) &&
 80112ae:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d0ad      	beq.n	8011212 <VL53LX_WaitValueMaskEx+0x66>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 80112b6:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d106      	bne.n	80112cc <VL53LX_WaitValueMaskEx+0x120>
 80112be:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d102      	bne.n	80112cc <VL53LX_WaitValueMaskEx+0x120>
		status = VL53LX_ERROR_TIME_OUT;
 80112c6:	23f9      	movs	r3, #249	; 0xf9
 80112c8:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 80112cc:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd90      	pop	{r4, r7, pc}
 80112da:	bf00      	nop
 80112dc:	08015528 	.word	0x08015528

080112e0 <VL53LX_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53LX_Error
  */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	695b      	ldr	r3, [r3, #20]
 80112ee:	4798      	blx	r3
 80112f0:	4603      	mov	r3, r0
 80112f2:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 80112f4:	bf00      	nop
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	695b      	ldr	r3, [r3, #20]
 80112fa:	4798      	blx	r3
 80112fc:	4603      	mov	r3, r0
 80112fe:	461a      	mov	r2, r3
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	1ad3      	subs	r3, r2, r3
 8011304:	683a      	ldr	r2, [r7, #0]
 8011306:	429a      	cmp	r2, r3
 8011308:	d8f5      	bhi.n	80112f6 <VL53LX_Delay+0x16>
  {
  }

  return VL53LX_ERROR_NONE;
 801130a:	2300      	movs	r3, #0
}
 801130c:	4618      	mov	r0, r3
 801130e:	3710      	adds	r7, #16
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}

08011314 <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b08c      	sub	sp, #48	; 0x30
 8011318:	af06      	add	r7, sp, #24
 801131a:	60f8      	str	r0, [r7, #12]
 801131c:	60b9      	str	r1, [r7, #8]
 801131e:	607a      	str	r2, [r7, #4]
 8011320:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8011322:	2300      	movs	r3, #0
 8011324:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 8011326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011328:	9304      	str	r3, [sp, #16]
 801132a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801132c:	9303      	str	r3, [sp, #12]
 801132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011330:	9302      	str	r3, [sp, #8]
 8011332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011334:	9301      	str	r3, [sp, #4]
 8011336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011338:	9300      	str	r3, [sp, #0]
 801133a:	6a3b      	ldr	r3, [r7, #32]
 801133c:	683a      	ldr	r2, [r7, #0]
 801133e:	6879      	ldr	r1, [r7, #4]
 8011340:	68b8      	ldr	r0, [r7, #8]
 8011342:	f7fd f98c 	bl	800e65e <VL53LX_hist_process_data>
 8011346:	4603      	mov	r3, r0
 8011348:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 801134a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801134e:	4618      	mov	r0, r3
 8011350:	3718      	adds	r7, #24
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}

08011356 <VL53L3CX_RegisterBusIO>:
  * @param pObj    vl53l3cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_RegisterBusIO(VL53L3CX_Object_t *pObj, VL53L3CX_IO_t *pIO)
{
 8011356:	b580      	push	{r7, lr}
 8011358:	b084      	sub	sp, #16
 801135a:	af00      	add	r7, sp, #0
 801135c:	6078      	str	r0, [r7, #4]
 801135e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d103      	bne.n	801136e <VL53L3CX_RegisterBusIO+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011366:	f06f 0301 	mvn.w	r3, #1
 801136a:	60fb      	str	r3, [r7, #12]
 801136c:	e023      	b.n	80113b6 <VL53L3CX_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	681a      	ldr	r2, [r3, #0]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	685a      	ldr	r2, [r3, #4]
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	891a      	ldrh	r2, [r3, #8]
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	68da      	ldr	r2, [r3, #12]
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	691a      	ldr	r2, [r3, #16]
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	695a      	ldr	r2, [r3, #20]
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d004      	beq.n	80113b0 <VL53L3CX_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	4798      	blx	r3
 80113ac:	60f8      	str	r0, [r7, #12]
 80113ae:	e002      	b.n	80113b6 <VL53L3CX_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L3CX_ERROR;
 80113b0:	f04f 33ff 	mov.w	r3, #4294967295
 80113b4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80113b6:	68fb      	ldr	r3, [r7, #12]
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	3710      	adds	r7, #16
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}

080113c0 <VL53L3CX_Init>:
  * @brief Initializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Init(VL53L3CX_Object_t *pObj)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b084      	sub	sp, #16
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80113ce:	3328      	adds	r3, #40	; 0x28
 80113d0:	781b      	ldrb	r3, [r3, #0]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d003      	beq.n	80113de <VL53L3CX_Init+0x1e>
  {
    ret =  VL53L3CX_ERROR;
 80113d6:	f04f 33ff 	mov.w	r3, #4294967295
 80113da:	60fb      	str	r3, [r7, #12]
 80113dc:	e043      	b.n	8011466 <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_WaitDeviceBooted(pObj) != VL53LX_ERROR_NONE)
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	f7f0 fcb8 	bl	8001d54 <VL53LX_WaitDeviceBooted>
 80113e4:	4603      	mov	r3, r0
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d003      	beq.n	80113f2 <VL53L3CX_Init+0x32>
  {
    ret =  VL53L3CX_ERROR;
 80113ea:	f04f 33ff 	mov.w	r3, #4294967295
 80113ee:	60fb      	str	r3, [r7, #12]
 80113f0:	e039      	b.n	8011466 <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_DataInit(pObj) != VL53LX_ERROR_NONE)
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f7f0 fc53 	bl	8001c9e <VL53LX_DataInit>
 80113f8:	4603      	mov	r3, r0
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d003      	beq.n	8011406 <VL53L3CX_Init+0x46>
  {
    ret = VL53L3CX_ERROR;
 80113fe:	f04f 33ff 	mov.w	r3, #4294967295
 8011402:	60fb      	str	r3, [r7, #12]
 8011404:	e02f      	b.n	8011466 <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_PerformRefSpadManagement(pObj) != VL53LX_ERROR_NONE)
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f7f1 fb46 	bl	8002a98 <VL53LX_PerformRefSpadManagement>
 801140c:	4603      	mov	r3, r0
 801140e:	2b00      	cmp	r3, #0
 8011410:	d003      	beq.n	801141a <VL53L3CX_Init+0x5a>
  {
    ret = VL53L3CX_ERROR;
 8011412:	f04f 33ff 	mov.w	r3, #4294967295
 8011416:	60fb      	str	r3, [r7, #12]
 8011418:	e025      	b.n	8011466 <VL53L3CX_Init+0xa6>
  }
  else
  {
    pObj->IsRanging = 0;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011420:	3329      	adds	r3, #41	; 0x29
 8011422:	2200      	movs	r2, #0
 8011424:	701a      	strb	r2, [r3, #0]
    pObj->IsBlocking = 0;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801142c:	332a      	adds	r3, #42	; 0x2a
 801142e:	2200      	movs	r2, #0
 8011430:	701a      	strb	r2, [r3, #0]
    pObj->IsContinuous = 0;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011438:	332b      	adds	r3, #43	; 0x2b
 801143a:	2200      	movs	r2, #0
 801143c:	701a      	strb	r2, [r3, #0]
    pObj->IsAmbientEnabled = 0;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011444:	332c      	adds	r3, #44	; 0x2c
 8011446:	2200      	movs	r2, #0
 8011448:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = 0;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011450:	332d      	adds	r3, #45	; 0x2d
 8011452:	2200      	movs	r2, #0
 8011454:	701a      	strb	r2, [r3, #0]
    pObj->IsInitialized = 1;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801145c:	3328      	adds	r3, #40	; 0x28
 801145e:	2201      	movs	r2, #1
 8011460:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8011462:	2300      	movs	r3, #0
 8011464:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011466:	68fb      	ldr	r3, [r7, #12]
}
 8011468:	4618      	mov	r0, r3
 801146a:	3710      	adds	r7, #16
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}

08011470 <VL53L3CX_DeInit>:
  * @brief Deinitializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_DeInit(VL53L3CX_Object_t *pObj)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b084      	sub	sp, #16
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L3CX_ERROR;
 8011478:	f04f 33ff 	mov.w	r3, #4294967295
 801147c:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011484:	3328      	adds	r3, #40	; 0x28
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	2b01      	cmp	r3, #1
 801148a:	d111      	bne.n	80114b0 <VL53L3CX_DeInit+0x40>
  {
    /* De-initialize the vl53l3cx interface */
    if (pObj->IO.DeInit() != 0)
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	4798      	blx	r3
 8011492:	4603      	mov	r3, r0
 8011494:	2b00      	cmp	r3, #0
 8011496:	d003      	beq.n	80114a0 <VL53L3CX_DeInit+0x30>
    {
      ret = VL53L3CX_ERROR;
 8011498:	f04f 33ff 	mov.w	r3, #4294967295
 801149c:	60fb      	str	r3, [r7, #12]
 801149e:	e007      	b.n	80114b0 <VL53L3CX_DeInit+0x40>
    }
    else
    {
      ret = VL53L3CX_OK;
 80114a0:	2300      	movs	r3, #0
 80114a2:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80114aa:	3328      	adds	r3, #40	; 0x28
 80114ac:	2200      	movs	r2, #0
 80114ae:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80114b0:	68fb      	ldr	r3, [r7, #12]
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3710      	adds	r7, #16
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}

080114ba <VL53L3CX_ReadID>:
  * @param pObj    vl53l3cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ReadID(VL53L3CX_Object_t *pObj, uint32_t *pId)
{
 80114ba:	b580      	push	{r7, lr}
 80114bc:	b084      	sub	sp, #16
 80114be:	af00      	add	r7, sp, #0
 80114c0:	6078      	str	r0, [r7, #4]
 80114c2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d002      	beq.n	80114d0 <VL53L3CX_ReadID+0x16>
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d103      	bne.n	80114d8 <VL53L3CX_ReadID+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80114d0:	f06f 0301 	mvn.w	r3, #1
 80114d4:	60fb      	str	r3, [r7, #12]
 80114d6:	e00a      	b.n	80114ee <VL53L3CX_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	2200      	movs	r2, #0
 80114dc:	601a      	str	r2, [r3, #0]
    ret = VL53LX_RdWord(pObj, VL53L3CX_ID_REG, (uint16_t *) pId);
 80114de:	683a      	ldr	r2, [r7, #0]
 80114e0:	f240 110f 	movw	r1, #271	; 0x10f
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f7ff fde5 	bl	80110b4 <VL53LX_RdWord>
 80114ea:	4603      	mov	r3, r0
 80114ec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80114ee:	68fb      	ldr	r3, [r7, #12]
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	3710      	adds	r7, #16
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}

080114f8 <VL53L3CX_GetCapabilities>:
  * @param pObj    vl53l3cx context object.
  * @param pCap    Pointer to the vl53l3cx capabilities.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetCapabilities(VL53L3CX_Object_t *pObj, VL53L3CX_Capabilities_t *pCap)
{
 80114f8:	b480      	push	{r7}
 80114fa:	b085      	sub	sp, #20
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d002      	beq.n	801150e <VL53L3CX_GetCapabilities+0x16>
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d103      	bne.n	8011516 <VL53L3CX_GetCapabilities+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 801150e:	f06f 0301 	mvn.w	r3, #1
 8011512:	60fb      	str	r3, [r7, #12]
 8011514:	e00d      	b.n	8011532 <VL53L3CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	2201      	movs	r2, #1
 801151a:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L3CX_NB_TARGET_PER_ZONE;
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	2204      	movs	r2, #4
 8011520:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	2201      	movs	r2, #1
 8011526:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	2200      	movs	r2, #0
 801152c:	60da      	str	r2, [r3, #12]

    ret = VL53L3CX_OK;
 801152e:	2300      	movs	r3, #0
 8011530:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011532:	68fb      	ldr	r3, [r7, #12]
}
 8011534:	4618      	mov	r0, r3
 8011536:	3714      	adds	r7, #20
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr

08011540 <VL53L3CX_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L3CX the profile corresponds to the distance modes.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigProfile(VL53L3CX_Object_t *pObj, VL53L3CX_ProfileConfig_t *pConfig)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b084      	sub	sp, #16
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d009      	beq.n	8011564 <VL53L3CX_ConfigProfile+0x24>
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d006      	beq.n	8011564 <VL53L3CX_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	781b      	ldrb	r3, [r3, #0]
 801155a:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L3CX_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 801155c:	7afb      	ldrb	r3, [r7, #11]
 801155e:	2b01      	cmp	r3, #1
 8011560:	d103      	bne.n	801156a <VL53L3CX_ConfigProfile+0x2a>
 8011562:	e00c      	b.n	801157e <VL53L3CX_ConfigProfile+0x3e>
    return VL53L3CX_INVALID_PARAM;
 8011564:	f06f 0301 	mvn.w	r3, #1
 8011568:	e043      	b.n	80115f2 <VL53L3CX_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 801156a:	7afb      	ldrb	r3, [r7, #11]
 801156c:	2b02      	cmp	r3, #2
 801156e:	d006      	beq.n	801157e <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_MEDIUM) &&
 8011570:	7afb      	ldrb	r3, [r7, #11]
 8011572:	2b03      	cmp	r3, #3
 8011574:	d003      	beq.n	801157e <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_LONG))
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011576:	f06f 0301 	mvn.w	r3, #1
 801157a:	60fb      	str	r3, [r7, #12]
 801157c:	e038      	b.n	80115f0 <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetDistanceMode(pObj, ranging_profile) != VL53LX_ERROR_NONE)
 801157e:	7afb      	ldrb	r3, [r7, #11]
 8011580:	4619      	mov	r1, r3
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f7f0 fcc9 	bl	8001f1a <VL53LX_SetDistanceMode>
 8011588:	4603      	mov	r3, r0
 801158a:	2b00      	cmp	r3, #0
 801158c:	d003      	beq.n	8011596 <VL53L3CX_ConfigProfile+0x56>
  {
    ret = VL53L3CX_ERROR;
 801158e:	f04f 33ff 	mov.w	r3, #4294967295
 8011592:	60fb      	str	r3, [r7, #12]
 8011594:	e02c      	b.n	80115f0 <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53LX_ERROR_NONE)
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	685b      	ldr	r3, [r3, #4]
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
 801159a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801159e:	fb02 f303 	mul.w	r3, r2, r3
 80115a2:	4619      	mov	r1, r3
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f7f0 fd1f 	bl	8001fe8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 80115aa:	4603      	mov	r3, r0
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d003      	beq.n	80115b8 <VL53L3CX_ConfigProfile+0x78>
  {
    ret = VL53L3CX_ERROR;
 80115b0:	f04f 33ff 	mov.w	r3, #4294967295
 80115b4:	60fb      	str	r3, [r7, #12]
 80115b6:	e01b      	b.n	80115f0 <VL53L3CX_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	68db      	ldr	r3, [r3, #12]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	bf14      	ite	ne
 80115c0:	2301      	movne	r3, #1
 80115c2:	2300      	moveq	r3, #0
 80115c4:	b2db      	uxtb	r3, r3
 80115c6:	461a      	mov	r2, r3
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80115ce:	332c      	adds	r3, #44	; 0x2c
 80115d0:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	691b      	ldr	r3, [r3, #16]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	bf14      	ite	ne
 80115da:	2301      	movne	r3, #1
 80115dc:	2300      	moveq	r3, #0
 80115de:	b2db      	uxtb	r3, r3
 80115e0:	461a      	mov	r2, r3
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80115e8:	332d      	adds	r3, #45	; 0x2d
 80115ea:	701a      	strb	r2, [r3, #0]

    ret = VL53L3CX_OK;
 80115ec:	2300      	movs	r3, #0
 80115ee:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80115f0:	68fb      	ldr	r3, [r7, #12]
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3710      	adds	r7, #16
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}

080115fa <VL53L3CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigROI(VL53L3CX_Object_t *pObj, VL53L3CX_ROIConfig_t *pROIConfig)
{
 80115fa:	b580      	push	{r7, lr}
 80115fc:	b084      	sub	sp, #16
 80115fe:	af00      	add	r7, sp, #0
 8011600:	6078      	str	r0, [r7, #4]
 8011602:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53LX_UserRoi_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d002      	beq.n	8011610 <VL53L3CX_ConfigROI+0x16>
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d103      	bne.n	8011618 <VL53L3CX_ConfigROI+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011610:	f06f 0301 	mvn.w	r3, #1
 8011614:	60fb      	str	r3, [r7, #12]
 8011616:	e01a      	b.n	801164e <VL53L3CX_ConfigROI+0x54>
  }
  else
  {
    roi_settings.BotRightX = pROIConfig->BotRightX;
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	789b      	ldrb	r3, [r3, #2]
 801161c:	72bb      	strb	r3, [r7, #10]
    roi_settings.BotRightY = pROIConfig->BotRightY;
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	78db      	ldrb	r3, [r3, #3]
 8011622:	72fb      	strb	r3, [r7, #11]
    roi_settings.TopLeftX = pROIConfig->TopLeftX;
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	781b      	ldrb	r3, [r3, #0]
 8011628:	723b      	strb	r3, [r7, #8]
    roi_settings.TopLeftY = pROIConfig->TopLeftY;
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	785b      	ldrb	r3, [r3, #1]
 801162e:	727b      	strb	r3, [r7, #9]

    if (VL53LX_SetUserROI(pObj, &roi_settings) != VL53LX_ERROR_NONE)
 8011630:	f107 0308 	add.w	r3, r7, #8
 8011634:	4619      	mov	r1, r3
 8011636:	6878      	ldr	r0, [r7, #4]
 8011638:	f7f0 fd4e 	bl	80020d8 <VL53LX_SetUserROI>
 801163c:	4603      	mov	r3, r0
 801163e:	2b00      	cmp	r3, #0
 8011640:	d003      	beq.n	801164a <VL53L3CX_ConfigROI+0x50>
    {
      ret = VL53L3CX_ERROR;
 8011642:	f04f 33ff 	mov.w	r3, #4294967295
 8011646:	60fb      	str	r3, [r7, #12]
 8011648:	e001      	b.n	801164e <VL53L3CX_ConfigROI+0x54>
    }
    else
    {
      ret = VL53L3CX_OK;
 801164a:	2300      	movs	r3, #0
 801164c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 801164e:	68fb      	ldr	r3, [r7, #12]
}
 8011650:	4618      	mov	r0, r3
 8011652:	3710      	adds	r7, #16
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}

08011658 <VL53L3CX_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigIT(VL53L3CX_Object_t *pObj, VL53L3CX_ITConfig_t *pITConfig)
{
 8011658:	b480      	push	{r7}
 801165a:	b083      	sub	sp, #12
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L3CX_NOT_IMPLEMENTED;
 8011662:	f06f 0303 	mvn.w	r3, #3
}
 8011666:	4618      	mov	r0, r3
 8011668:	370c      	adds	r7, #12
 801166a:	46bd      	mov	sp, r7
 801166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011670:	4770      	bx	lr

08011672 <VL53L3CX_GetDistance>:
  * @param pObj    vl53l3cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetDistance(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 8011672:	b580      	push	{r7, lr}
 8011674:	b084      	sub	sp, #16
 8011676:	af00      	add	r7, sp, #0
 8011678:	6078      	str	r0, [r7, #4]
 801167a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d002      	beq.n	8011688 <VL53L3CX_GetDistance+0x16>
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d103      	bne.n	8011690 <VL53L3CX_GetDistance+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011688:	f06f 0301 	mvn.w	r3, #1
 801168c:	60fb      	str	r3, [r7, #12]
 801168e:	e01d      	b.n	80116cc <VL53L3CX_GetDistance+0x5a>
  }
  else if (pObj->IsRanging == 0U)
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011696:	3329      	adds	r3, #41	; 0x29
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d103      	bne.n	80116a6 <VL53L3CX_GetDistance+0x34>
  {
    ret = VL53L3CX_ERROR;
 801169e:	f04f 33ff 	mov.w	r3, #4294967295
 80116a2:	60fb      	str	r3, [r7, #12]
 80116a4:	e012      	b.n	80116cc <VL53L3CX_GetDistance+0x5a>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80116ac:	332a      	adds	r3, #42	; 0x2a
 80116ae:	781b      	ldrb	r3, [r3, #0]
 80116b0:	2b01      	cmp	r3, #1
 80116b2:	d106      	bne.n	80116c2 <VL53L3CX_GetDistance+0x50>
    {
      ret = vl53l3cx_poll_for_measurement(pObj, V53L3CX_POLL_TIMEOUT);
 80116b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f000 f92b 	bl	8011914 <vl53l3cx_poll_for_measurement>
 80116be:	60f8      	str	r0, [r7, #12]
 80116c0:	e004      	b.n	80116cc <VL53L3CX_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l3cx_poll_for_measurement(pObj, 0U);
 80116c2:	2100      	movs	r1, #0
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f000 f925 	bl	8011914 <vl53l3cx_poll_for_measurement>
 80116ca:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L3CX_OK)
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d119      	bne.n	8011706 <VL53L3CX_GetDistance+0x94>
  {
    /* retrieve measurements and fill result structure */
    if (vl53l3cx_get_result(pObj, pResult) != VL53L3CX_OK)
 80116d2:	6839      	ldr	r1, [r7, #0]
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f000 f94b 	bl	8011970 <vl53l3cx_get_result>
 80116da:	4603      	mov	r3, r0
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d003      	beq.n	80116e8 <VL53L3CX_GetDistance+0x76>
    {
      ret = VL53L3CX_ERROR;
 80116e0:	f04f 33ff 	mov.w	r3, #4294967295
 80116e4:	60fb      	str	r3, [r7, #12]
 80116e6:	e00e      	b.n	8011706 <VL53L3CX_GetDistance+0x94>
    }
    else if (pObj->IsContinuous == 1U)
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80116ee:	332b      	adds	r3, #43	; 0x2b
 80116f0:	781b      	ldrb	r3, [r3, #0]
 80116f2:	2b01      	cmp	r3, #1
 80116f4:	d105      	bne.n	8011702 <VL53L3CX_GetDistance+0x90>
    {
      /* trigger new measurement if device configured in continuous mode */
      ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f7f0 fdbe 	bl	8002278 <VL53LX_ClearInterruptAndStartMeasurement>
 80116fc:	4603      	mov	r3, r0
 80116fe:	60fb      	str	r3, [r7, #12]
 8011700:	e001      	b.n	8011706 <VL53L3CX_GetDistance+0x94>
    }
    else
    {
      ret = VL53L3CX_OK;
 8011702:	2300      	movs	r3, #0
 8011704:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011706:	68fb      	ldr	r3, [r7, #12]
}
 8011708:	4618      	mov	r0, r3
 801170a:	3710      	adds	r7, #16
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}

08011710 <VL53L3CX_Start>:
  * @param pObj    vl53l3cx context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Start(VL53L3CX_Object_t *pObj, uint32_t Mode)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b084      	sub	sp, #16
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d103      	bne.n	8011728 <VL53L3CX_Start+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011720:	f06f 0301 	mvn.w	r3, #1
 8011724:	60fb      	str	r3, [r7, #12]
 8011726:	e068      	b.n	80117fa <VL53L3CX_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801172e:	3329      	adds	r3, #41	; 0x29
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	2b01      	cmp	r3, #1
 8011734:	d103      	bne.n	801173e <VL53L3CX_Start+0x2e>
  {
    ret = VL53L3CX_ERROR;
 8011736:	f04f 33ff 	mov.w	r3, #4294967295
 801173a:	60fb      	str	r3, [r7, #12]
 801173c:	e05d      	b.n	80117fa <VL53L3CX_Start+0xea>
  }
  else if (VL53LX_StartMeasurement(pObj) == VL53LX_ERROR_NONE)
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f7f0 fd38 	bl	80021b4 <VL53LX_StartMeasurement>
 8011744:	4603      	mov	r3, r0
 8011746:	2b00      	cmp	r3, #0
 8011748:	d154      	bne.n	80117f4 <VL53L3CX_Start+0xe4>
  {
    pObj->IsRanging = 1;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011750:	3329      	adds	r3, #41	; 0x29
 8011752:	2201      	movs	r2, #1
 8011754:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8011756:	2300      	movs	r3, #0
 8011758:	60fb      	str	r3, [r7, #12]
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	3b01      	subs	r3, #1
 801175e:	2b03      	cmp	r3, #3
 8011760:	d83e      	bhi.n	80117e0 <VL53L3CX_Start+0xd0>
 8011762:	a201      	add	r2, pc, #4	; (adr r2, 8011768 <VL53L3CX_Start+0x58>)
 8011764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011768:	08011779 	.word	0x08011779
 801176c:	08011793 	.word	0x08011793
 8011770:	080117ad 	.word	0x080117ad
 8011774:	080117c7 	.word	0x080117c7

    switch (Mode)
    {
    case VL53L3CX_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801177e:	332b      	adds	r3, #43	; 0x2b
 8011780:	2201      	movs	r2, #1
 8011782:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801178a:	332a      	adds	r3, #42	; 0x2a
 801178c:	2201      	movs	r2, #1
 801178e:	701a      	strb	r2, [r3, #0]
      break;
 8011790:	e033      	b.n	80117fa <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011798:	332b      	adds	r3, #43	; 0x2b
 801179a:	2200      	movs	r2, #0
 801179c:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117a4:	332a      	adds	r3, #42	; 0x2a
 80117a6:	2201      	movs	r2, #1
 80117a8:	701a      	strb	r2, [r3, #0]
      break;
 80117aa:	e026      	b.n	80117fa <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117b2:	332b      	adds	r3, #43	; 0x2b
 80117b4:	2201      	movs	r2, #1
 80117b6:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117be:	332a      	adds	r3, #42	; 0x2a
 80117c0:	2200      	movs	r2, #0
 80117c2:	701a      	strb	r2, [r3, #0]
      break;
 80117c4:	e019      	b.n	80117fa <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117cc:	332b      	adds	r3, #43	; 0x2b
 80117ce:	2200      	movs	r2, #0
 80117d0:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117d8:	332a      	adds	r3, #42	; 0x2a
 80117da:	2200      	movs	r2, #0
 80117dc:	701a      	strb	r2, [r3, #0]
      break;
 80117de:	e00c      	b.n	80117fa <VL53L3CX_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117e6:	3329      	adds	r3, #41	; 0x29
 80117e8:	2200      	movs	r2, #0
 80117ea:	701a      	strb	r2, [r3, #0]
      ret = VL53L3CX_INVALID_PARAM;
 80117ec:	f06f 0301 	mvn.w	r3, #1
 80117f0:	60fb      	str	r3, [r7, #12]
      break;
 80117f2:	e002      	b.n	80117fa <VL53L3CX_Start+0xea>
    }
  }
  else
  {
    ret = VL53L3CX_ERROR;
 80117f4:	f04f 33ff 	mov.w	r3, #4294967295
 80117f8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80117fa:	68fb      	ldr	r3, [r7, #12]
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	3710      	adds	r7, #16
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}

08011804 <VL53L3CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Stop(VL53L3CX_Object_t *pObj)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b084      	sub	sp, #16
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d103      	bne.n	801181a <VL53L3CX_Stop+0x16>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011812:	f06f 0301 	mvn.w	r3, #1
 8011816:	60fb      	str	r3, [r7, #12]
 8011818:	e01c      	b.n	8011854 <VL53L3CX_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011820:	3329      	adds	r3, #41	; 0x29
 8011822:	781b      	ldrb	r3, [r3, #0]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d103      	bne.n	8011830 <VL53L3CX_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L3CX_ERROR;
 8011828:	f04f 33ff 	mov.w	r3, #4294967295
 801182c:	60fb      	str	r3, [r7, #12]
 801182e:	e011      	b.n	8011854 <VL53L3CX_Stop+0x50>
  }
  else if (VL53LX_StopMeasurement(pObj) == VL53LX_ERROR_NONE)
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	f7f0 fd0d 	bl	8002250 <VL53LX_StopMeasurement>
 8011836:	4603      	mov	r3, r0
 8011838:	2b00      	cmp	r3, #0
 801183a:	d108      	bne.n	801184e <VL53L3CX_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011842:	3329      	adds	r3, #41	; 0x29
 8011844:	2200      	movs	r2, #0
 8011846:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8011848:	2300      	movs	r3, #0
 801184a:	60fb      	str	r3, [r7, #12]
 801184c:	e002      	b.n	8011854 <VL53L3CX_Stop+0x50>
  }
  else
  {
    ret = VL53L3CX_ERROR;
 801184e:	f04f 33ff 	mov.w	r3, #4294967295
 8011852:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011854:	68fb      	ldr	r3, [r7, #12]
}
 8011856:	4618      	mov	r0, r3
 8011858:	3710      	adds	r7, #16
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}

0801185e <VL53L3CX_SetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param Address     New I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetAddress(VL53L3CX_Object_t *pObj, uint32_t Address)
{
 801185e:	b580      	push	{r7, lr}
 8011860:	b084      	sub	sp, #16
 8011862:	af00      	add	r7, sp, #0
 8011864:	6078      	str	r0, [r7, #4]
 8011866:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d103      	bne.n	8011876 <VL53L3CX_SetAddress+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 801186e:	f06f 0301 	mvn.w	r3, #1
 8011872:	60fb      	str	r3, [r7, #12]
 8011874:	e012      	b.n	801189c <VL53L3CX_SetAddress+0x3e>
  }
  else if (VL53LX_SetDeviceAddress(pObj, (uint8_t)Address) != VL53LX_ERROR_NONE)
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	b2db      	uxtb	r3, r3
 801187a:	4619      	mov	r1, r3
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f7f0 f9e7 	bl	8001c50 <VL53LX_SetDeviceAddress>
 8011882:	4603      	mov	r3, r0
 8011884:	2b00      	cmp	r3, #0
 8011886:	d003      	beq.n	8011890 <VL53L3CX_SetAddress+0x32>
  {
    ret = VL53L3CX_ERROR;
 8011888:	f04f 33ff 	mov.w	r3, #4294967295
 801188c:	60fb      	str	r3, [r7, #12]
 801188e:	e005      	b.n	801189c <VL53L3CX_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	b29a      	uxth	r2, r3
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	811a      	strh	r2, [r3, #8]
    ret = VL53L3CX_OK;
 8011898:	2300      	movs	r3, #0
 801189a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801189c:	68fb      	ldr	r3, [r7, #12]
}
 801189e:	4618      	mov	r0, r3
 80118a0:	3710      	adds	r7, #16
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}

080118a6 <VL53L3CX_GetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetAddress(VL53L3CX_Object_t *pObj, uint32_t *pAddress)
{
 80118a6:	b480      	push	{r7}
 80118a8:	b085      	sub	sp, #20
 80118aa:	af00      	add	r7, sp, #0
 80118ac:	6078      	str	r0, [r7, #4]
 80118ae:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d002      	beq.n	80118bc <VL53L3CX_GetAddress+0x16>
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d103      	bne.n	80118c4 <VL53L3CX_GetAddress+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80118bc:	f06f 0301 	mvn.w	r3, #1
 80118c0:	60fb      	str	r3, [r7, #12]
 80118c2:	e006      	b.n	80118d2 <VL53L3CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	891b      	ldrh	r3, [r3, #8]
 80118c8:	461a      	mov	r2, r3
 80118ca:	683b      	ldr	r3, [r7, #0]
 80118cc:	601a      	str	r2, [r3, #0]
    ret = VL53L3CX_OK;
 80118ce:	2300      	movs	r3, #0
 80118d0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80118d2:	68fb      	ldr	r3, [r7, #12]
}
 80118d4:	4618      	mov	r0, r3
 80118d6:	3714      	adds	r7, #20
 80118d8:	46bd      	mov	sp, r7
 80118da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118de:	4770      	bx	lr

080118e0 <VL53L3CX_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetPowerMode(VL53L3CX_Object_t *pObj, uint32_t PowerMode)
{
 80118e0:	b480      	push	{r7}
 80118e2:	b083      	sub	sp, #12
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
 80118e8:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L3CX_NOT_IMPLEMENTED;
 80118ea:	f06f 0303 	mvn.w	r3, #3
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	370c      	adds	r7, #12
 80118f2:	46bd      	mov	sp, r7
 80118f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f8:	4770      	bx	lr

080118fa <VL53L3CX_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetPowerMode(VL53L3CX_Object_t *pObj, uint32_t *pPowerMode)
{
 80118fa:	b480      	push	{r7}
 80118fc:	b083      	sub	sp, #12
 80118fe:	af00      	add	r7, sp, #0
 8011900:	6078      	str	r0, [r7, #4]
 8011902:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L3CX_NOT_IMPLEMENTED;
 8011904:	f06f 0303 	mvn.w	r3, #3
}
 8011908:	4618      	mov	r0, r3
 801190a:	370c      	adds	r7, #12
 801190c:	46bd      	mov	sp, r7
 801190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011912:	4770      	bx	lr

08011914 <vl53l3cx_poll_for_measurement>:
/** @defgroup VL53L3CX_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l3cx_poll_for_measurement(VL53L3CX_Object_t *pObj, uint32_t Timeout)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b084      	sub	sp, #16
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 801191e:	2300      	movs	r3, #0
 8011920:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d102      	bne.n	801192e <vl53l3cx_poll_for_measurement+0x1a>
  {
    return VL53L3CX_INVALID_PARAM;
 8011928:	f06f 0301 	mvn.w	r3, #1
 801192c:	e01b      	b.n	8011966 <vl53l3cx_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	695b      	ldr	r3, [r3, #20]
 8011932:	4798      	blx	r3
 8011934:	4603      	mov	r3, r0
 8011936:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53LX_GetMeasurementDataReady(pObj, &NewDataReady);
 8011938:	f107 030b 	add.w	r3, r7, #11
 801193c:	4619      	mov	r1, r3
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f7f0 fcb0 	bl	80022a4 <VL53LX_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8011944:	7afb      	ldrb	r3, [r7, #11]
 8011946:	2b01      	cmp	r3, #1
 8011948:	d101      	bne.n	801194e <vl53l3cx_poll_for_measurement+0x3a>
    {
      return VL53L3CX_OK;
 801194a:	2300      	movs	r3, #0
 801194c:	e00b      	b.n	8011966 <vl53l3cx_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	695b      	ldr	r3, [r3, #20]
 8011952:	4798      	blx	r3
 8011954:	4603      	mov	r3, r0
 8011956:	461a      	mov	r2, r3
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	1ad3      	subs	r3, r2, r3
 801195c:	683a      	ldr	r2, [r7, #0]
 801195e:	429a      	cmp	r2, r3
 8011960:	d8ea      	bhi.n	8011938 <vl53l3cx_poll_for_measurement+0x24>

  return VL53L3CX_TIMEOUT;
 8011962:	f06f 0302 	mvn.w	r3, #2
}
 8011966:	4618      	mov	r0, r3
 8011968:	3710      	adds	r7, #16
 801196a:	46bd      	mov	sp, r7
 801196c:	bd80      	pop	{r7, pc}
	...

08011970 <vl53l3cx_get_result>:

static int32_t vl53l3cx_get_result(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 8011970:	b590      	push	{r4, r7, lr}
 8011972:	b09f      	sub	sp, #124	; 0x7c
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53LX_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d002      	beq.n	8011986 <vl53l3cx_get_result+0x16>
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d103      	bne.n	801198e <vl53l3cx_get_result+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011986:	f06f 0301 	mvn.w	r3, #1
 801198a:	677b      	str	r3, [r7, #116]	; 0x74
 801198c:	e126      	b.n	8011bdc <vl53l3cx_get_result+0x26c>
  }
  else if (VL53LX_GetMultiRangingData(pObj, &data) != VL53LX_ERROR_NONE)
 801198e:	f107 0308 	add.w	r3, r7, #8
 8011992:	4619      	mov	r1, r3
 8011994:	6878      	ldr	r0, [r7, #4]
 8011996:	f7f1 f858 	bl	8002a4a <VL53LX_GetMultiRangingData>
 801199a:	4603      	mov	r3, r0
 801199c:	2b00      	cmp	r3, #0
 801199e:	d003      	beq.n	80119a8 <vl53l3cx_get_result+0x38>
  {
    ret = VL53L3CX_ERROR;
 80119a0:	f04f 33ff 	mov.w	r3, #4294967295
 80119a4:	677b      	str	r3, [r7, #116]	; 0x74
 80119a6:	e119      	b.n	8011bdc <vl53l3cx_get_result+0x26c>
  }
  else
  {
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 80119a8:	2300      	movs	r3, #0
 80119aa:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80119ae:	e10b      	b.n	8011bc8 <vl53l3cx_get_result+0x258>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 80119b0:	7b7b      	ldrb	r3, [r7, #13]
 80119b2:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80119b6:	4618      	mov	r0, r3
 80119b8:	6839      	ldr	r1, [r7, #0]
 80119ba:	4613      	mov	r3, r2
 80119bc:	011b      	lsls	r3, r3, #4
 80119be:	4413      	add	r3, r2
 80119c0:	009b      	lsls	r3, r3, #2
 80119c2:	440b      	add	r3, r1
 80119c4:	3304      	adds	r3, #4
 80119c6:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 80119c8:	2300      	movs	r3, #0
 80119ca:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 80119ce:	e0f0      	b.n	8011bb2 <vl53l3cx_get_result+0x242>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 80119d0:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80119d4:	4613      	mov	r3, r2
 80119d6:	009b      	lsls	r3, r3, #2
 80119d8:	4413      	add	r3, r2
 80119da:	009b      	lsls	r3, r3, #2
 80119dc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80119e0:	4413      	add	r3, r2
 80119e2:	3b58      	subs	r3, #88	; 0x58
 80119e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	da0d      	bge.n	8011a08 <vl53l3cx_get_result+0x98>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 80119ec:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80119f0:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 80119f4:	6839      	ldr	r1, [r7, #0]
 80119f6:	4613      	mov	r3, r2
 80119f8:	011b      	lsls	r3, r3, #4
 80119fa:	4413      	add	r3, r2
 80119fc:	4403      	add	r3, r0
 80119fe:	009b      	lsls	r3, r3, #2
 8011a00:	440b      	add	r3, r1
 8011a02:	2200      	movs	r2, #0
 8011a04:	609a      	str	r2, [r3, #8]
 8011a06:	e018      	b.n	8011a3a <vl53l3cx_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8011a08:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011a0c:	4613      	mov	r3, r2
 8011a0e:	009b      	lsls	r3, r3, #2
 8011a10:	4413      	add	r3, r2
 8011a12:	009b      	lsls	r3, r3, #2
 8011a14:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011a18:	4413      	add	r3, r2
 8011a1a:	3b58      	subs	r3, #88	; 0x58
 8011a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a20:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011a24:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011a28:	461c      	mov	r4, r3
 8011a2a:	6839      	ldr	r1, [r7, #0]
 8011a2c:	4613      	mov	r3, r2
 8011a2e:	011b      	lsls	r3, r3, #4
 8011a30:	4413      	add	r3, r2
 8011a32:	4403      	add	r3, r0
 8011a34:	009b      	lsls	r3, r3, #2
 8011a36:	440b      	add	r3, r1
 8011a38:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011a40:	332c      	adds	r3, #44	; 0x2c
 8011a42:	781b      	ldrb	r3, [r3, #0]
 8011a44:	2b01      	cmp	r3, #1
 8011a46:	d137      	bne.n	8011ab8 <vl53l3cx_get_result+0x148>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8011a48:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011a4c:	4613      	mov	r3, r2
 8011a4e:	009b      	lsls	r3, r3, #2
 8011a50:	4413      	add	r3, r2
 8011a52:	009b      	lsls	r3, r3, #2
 8011a54:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011a58:	4413      	add	r3, r2
 8011a5a:	3b60      	subs	r3, #96	; 0x60
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	ee07 3a90 	vmov	s15, r3
 8011a62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011a66:	eddf 6a60 	vldr	s13, [pc, #384]	; 8011be8 <vl53l3cx_get_result+0x278>
 8011a6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011a6e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8011bec <vl53l3cx_get_result+0x27c>
 8011a72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011a76:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8011a7a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011a7e:	0a1b      	lsrs	r3, r3, #8
 8011a80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 8011a84:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8011a88:	ee07 3a90 	vmov	s15, r3
 8011a8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011a90:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011a94:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011a98:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8011a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011aa0:	6839      	ldr	r1, [r7, #0]
 8011aa2:	4613      	mov	r3, r2
 8011aa4:	011b      	lsls	r3, r3, #4
 8011aa6:	4413      	add	r3, r2
 8011aa8:	4403      	add	r3, r0
 8011aaa:	3308      	adds	r3, #8
 8011aac:	009b      	lsls	r3, r3, #2
 8011aae:	440b      	add	r3, r1
 8011ab0:	3308      	adds	r3, #8
 8011ab2:	edc3 7a00 	vstr	s15, [r3]
 8011ab6:	e00f      	b.n	8011ad8 <vl53l3cx_get_result+0x168>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8011ab8:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011abc:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011ac0:	6839      	ldr	r1, [r7, #0]
 8011ac2:	4613      	mov	r3, r2
 8011ac4:	011b      	lsls	r3, r3, #4
 8011ac6:	4413      	add	r3, r2
 8011ac8:	4403      	add	r3, r0
 8011aca:	3308      	adds	r3, #8
 8011acc:	009b      	lsls	r3, r3, #2
 8011ace:	440b      	add	r3, r1
 8011ad0:	3308      	adds	r3, #8
 8011ad2:	f04f 0200 	mov.w	r2, #0
 8011ad6:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011ade:	332d      	adds	r3, #45	; 0x2d
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	2b01      	cmp	r3, #1
 8011ae4:	d137      	bne.n	8011b56 <vl53l3cx_get_result+0x1e6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8011ae6:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011aea:	4613      	mov	r3, r2
 8011aec:	009b      	lsls	r3, r3, #2
 8011aee:	4413      	add	r3, r2
 8011af0:	009b      	lsls	r3, r3, #2
 8011af2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011af6:	4413      	add	r3, r2
 8011af8:	3b64      	subs	r3, #100	; 0x64
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	ee07 3a90 	vmov	s15, r3
 8011b00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011b04:	eddf 6a38 	vldr	s13, [pc, #224]	; 8011be8 <vl53l3cx_get_result+0x278>
 8011b08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011b0c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8011bec <vl53l3cx_get_result+0x27c>
 8011b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b14:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8011b18:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011b1c:	0a1b      	lsrs	r3, r3, #8
 8011b1e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 8011b22:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8011b26:	ee07 3a90 	vmov	s15, r3
 8011b2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011b2e:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011b32:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011b36:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8011b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011b3e:	6839      	ldr	r1, [r7, #0]
 8011b40:	4613      	mov	r3, r2
 8011b42:	011b      	lsls	r3, r3, #4
 8011b44:	4413      	add	r3, r2
 8011b46:	4403      	add	r3, r0
 8011b48:	330c      	adds	r3, #12
 8011b4a:	009b      	lsls	r3, r3, #2
 8011b4c:	440b      	add	r3, r1
 8011b4e:	3308      	adds	r3, #8
 8011b50:	edc3 7a00 	vstr	s15, [r3]
 8011b54:	e00f      	b.n	8011b76 <vl53l3cx_get_result+0x206>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8011b56:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011b5a:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011b5e:	6839      	ldr	r1, [r7, #0]
 8011b60:	4613      	mov	r3, r2
 8011b62:	011b      	lsls	r3, r3, #4
 8011b64:	4413      	add	r3, r2
 8011b66:	4403      	add	r3, r0
 8011b68:	330c      	adds	r3, #12
 8011b6a:	009b      	lsls	r3, r3, #2
 8011b6c:	440b      	add	r3, r1
 8011b6e:	3308      	adds	r3, #8
 8011b70:	f04f 0200 	mov.w	r2, #0
 8011b74:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 8011b76:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011b7a:	4613      	mov	r3, r2
 8011b7c:	009b      	lsls	r3, r3, #2
 8011b7e:	4413      	add	r3, r2
 8011b80:	009b      	lsls	r3, r3, #2
 8011b82:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011b86:	4413      	add	r3, r2
 8011b88:	3b56      	subs	r3, #86	; 0x56
 8011b8a:	781b      	ldrb	r3, [r3, #0]
 8011b8c:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011b90:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011b94:	461c      	mov	r4, r3
 8011b96:	6839      	ldr	r1, [r7, #0]
 8011b98:	4613      	mov	r3, r2
 8011b9a:	011b      	lsls	r3, r3, #4
 8011b9c:	4413      	add	r3, r2
 8011b9e:	4403      	add	r3, r0
 8011ba0:	3304      	adds	r3, #4
 8011ba2:	009b      	lsls	r3, r3, #2
 8011ba4:	440b      	add	r3, r1
 8011ba6:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8011ba8:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8011bac:	3301      	adds	r3, #1
 8011bae:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8011bb2:	7b7b      	ldrb	r3, [r7, #13]
 8011bb4:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	f4ff af09 	bcc.w	80119d0 <vl53l3cx_get_result+0x60>
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 8011bbe:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8011bc8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	f43f aeef 	beq.w	80119b0 <vl53l3cx_get_result+0x40>
      }
    }

    pResult->NumberOfZones = VL53L3CX_MAX_NB_ZONES;
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	2201      	movs	r2, #1
 8011bd6:	601a      	str	r2, [r3, #0]

    ret = VL53L3CX_OK;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	677b      	str	r3, [r7, #116]	; 0x74
  }

  return ret;
 8011bdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	377c      	adds	r7, #124	; 0x7c
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd90      	pop	{r4, r7, pc}
 8011be6:	bf00      	nop
 8011be8:	47800000 	.word	0x47800000
 8011bec:	447a0000 	.word	0x447a0000

08011bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8011bf4:	4b0e      	ldr	r3, [pc, #56]	; (8011c30 <HAL_Init+0x40>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	4a0d      	ldr	r2, [pc, #52]	; (8011c30 <HAL_Init+0x40>)
 8011bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011bfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8011c00:	4b0b      	ldr	r3, [pc, #44]	; (8011c30 <HAL_Init+0x40>)
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	4a0a      	ldr	r2, [pc, #40]	; (8011c30 <HAL_Init+0x40>)
 8011c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011c0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011c0c:	4b08      	ldr	r3, [pc, #32]	; (8011c30 <HAL_Init+0x40>)
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	4a07      	ldr	r2, [pc, #28]	; (8011c30 <HAL_Init+0x40>)
 8011c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011c18:	2003      	movs	r0, #3
 8011c1a:	f000 f931 	bl	8011e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8011c1e:	2000      	movs	r0, #0
 8011c20:	f000 f808 	bl	8011c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8011c24:	f7ef f8bc 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011c28:	2300      	movs	r3, #0
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	bd80      	pop	{r7, pc}
 8011c2e:	bf00      	nop
 8011c30:	40023c00 	.word	0x40023c00

08011c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b082      	sub	sp, #8
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8011c3c:	4b12      	ldr	r3, [pc, #72]	; (8011c88 <HAL_InitTick+0x54>)
 8011c3e:	681a      	ldr	r2, [r3, #0]
 8011c40:	4b12      	ldr	r3, [pc, #72]	; (8011c8c <HAL_InitTick+0x58>)
 8011c42:	781b      	ldrb	r3, [r3, #0]
 8011c44:	4619      	mov	r1, r3
 8011c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c52:	4618      	mov	r0, r3
 8011c54:	f000 f93b 	bl	8011ece <HAL_SYSTICK_Config>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d001      	beq.n	8011c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8011c5e:	2301      	movs	r3, #1
 8011c60:	e00e      	b.n	8011c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2b0f      	cmp	r3, #15
 8011c66:	d80a      	bhi.n	8011c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011c68:	2200      	movs	r2, #0
 8011c6a:	6879      	ldr	r1, [r7, #4]
 8011c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c70:	f000 f911 	bl	8011e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8011c74:	4a06      	ldr	r2, [pc, #24]	; (8011c90 <HAL_InitTick+0x5c>)
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	e000      	b.n	8011c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8011c7e:	2301      	movs	r3, #1
}
 8011c80:	4618      	mov	r0, r3
 8011c82:	3708      	adds	r7, #8
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}
 8011c88:	20000010 	.word	0x20000010
 8011c8c:	2000007c 	.word	0x2000007c
 8011c90:	20000078 	.word	0x20000078

08011c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011c94:	b480      	push	{r7}
 8011c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011c98:	4b06      	ldr	r3, [pc, #24]	; (8011cb4 <HAL_IncTick+0x20>)
 8011c9a:	781b      	ldrb	r3, [r3, #0]
 8011c9c:	461a      	mov	r2, r3
 8011c9e:	4b06      	ldr	r3, [pc, #24]	; (8011cb8 <HAL_IncTick+0x24>)
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	4413      	add	r3, r2
 8011ca4:	4a04      	ldr	r2, [pc, #16]	; (8011cb8 <HAL_IncTick+0x24>)
 8011ca6:	6013      	str	r3, [r2, #0]
}
 8011ca8:	bf00      	nop
 8011caa:	46bd      	mov	sp, r7
 8011cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb0:	4770      	bx	lr
 8011cb2:	bf00      	nop
 8011cb4:	2000007c 	.word	0x2000007c
 8011cb8:	200072f4 	.word	0x200072f4

08011cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8011cc0:	4b03      	ldr	r3, [pc, #12]	; (8011cd0 <HAL_GetTick+0x14>)
 8011cc2:	681b      	ldr	r3, [r3, #0]
}
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ccc:	4770      	bx	lr
 8011cce:	bf00      	nop
 8011cd0:	200072f4 	.word	0x200072f4

08011cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b084      	sub	sp, #16
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011cdc:	f7ff ffee 	bl	8011cbc <HAL_GetTick>
 8011ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cec:	d005      	beq.n	8011cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8011cee:	4b0a      	ldr	r3, [pc, #40]	; (8011d18 <HAL_Delay+0x44>)
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	461a      	mov	r2, r3
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	4413      	add	r3, r2
 8011cf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8011cfa:	bf00      	nop
 8011cfc:	f7ff ffde 	bl	8011cbc <HAL_GetTick>
 8011d00:	4602      	mov	r2, r0
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	1ad3      	subs	r3, r2, r3
 8011d06:	68fa      	ldr	r2, [r7, #12]
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d8f7      	bhi.n	8011cfc <HAL_Delay+0x28>
  {
  }
}
 8011d0c:	bf00      	nop
 8011d0e:	bf00      	nop
 8011d10:	3710      	adds	r7, #16
 8011d12:	46bd      	mov	sp, r7
 8011d14:	bd80      	pop	{r7, pc}
 8011d16:	bf00      	nop
 8011d18:	2000007c 	.word	0x2000007c

08011d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b085      	sub	sp, #20
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	f003 0307 	and.w	r3, r3, #7
 8011d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011d2c:	4b0c      	ldr	r3, [pc, #48]	; (8011d60 <__NVIC_SetPriorityGrouping+0x44>)
 8011d2e:	68db      	ldr	r3, [r3, #12]
 8011d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011d32:	68ba      	ldr	r2, [r7, #8]
 8011d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011d38:	4013      	ands	r3, r2
 8011d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011d4e:	4a04      	ldr	r2, [pc, #16]	; (8011d60 <__NVIC_SetPriorityGrouping+0x44>)
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	60d3      	str	r3, [r2, #12]
}
 8011d54:	bf00      	nop
 8011d56:	3714      	adds	r7, #20
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5e:	4770      	bx	lr
 8011d60:	e000ed00 	.word	0xe000ed00

08011d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011d64:	b480      	push	{r7}
 8011d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011d68:	4b04      	ldr	r3, [pc, #16]	; (8011d7c <__NVIC_GetPriorityGrouping+0x18>)
 8011d6a:	68db      	ldr	r3, [r3, #12]
 8011d6c:	0a1b      	lsrs	r3, r3, #8
 8011d6e:	f003 0307 	and.w	r3, r3, #7
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	46bd      	mov	sp, r7
 8011d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7a:	4770      	bx	lr
 8011d7c:	e000ed00 	.word	0xe000ed00

08011d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011d80:	b480      	push	{r7}
 8011d82:	b083      	sub	sp, #12
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	4603      	mov	r3, r0
 8011d88:	6039      	str	r1, [r7, #0]
 8011d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	db0a      	blt.n	8011daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	b2da      	uxtb	r2, r3
 8011d98:	490c      	ldr	r1, [pc, #48]	; (8011dcc <__NVIC_SetPriority+0x4c>)
 8011d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d9e:	0112      	lsls	r2, r2, #4
 8011da0:	b2d2      	uxtb	r2, r2
 8011da2:	440b      	add	r3, r1
 8011da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011da8:	e00a      	b.n	8011dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	b2da      	uxtb	r2, r3
 8011dae:	4908      	ldr	r1, [pc, #32]	; (8011dd0 <__NVIC_SetPriority+0x50>)
 8011db0:	79fb      	ldrb	r3, [r7, #7]
 8011db2:	f003 030f 	and.w	r3, r3, #15
 8011db6:	3b04      	subs	r3, #4
 8011db8:	0112      	lsls	r2, r2, #4
 8011dba:	b2d2      	uxtb	r2, r2
 8011dbc:	440b      	add	r3, r1
 8011dbe:	761a      	strb	r2, [r3, #24]
}
 8011dc0:	bf00      	nop
 8011dc2:	370c      	adds	r7, #12
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dca:	4770      	bx	lr
 8011dcc:	e000e100 	.word	0xe000e100
 8011dd0:	e000ed00 	.word	0xe000ed00

08011dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011dd4:	b480      	push	{r7}
 8011dd6:	b089      	sub	sp, #36	; 0x24
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	60f8      	str	r0, [r7, #12]
 8011ddc:	60b9      	str	r1, [r7, #8]
 8011dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	f003 0307 	and.w	r3, r3, #7
 8011de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011de8:	69fb      	ldr	r3, [r7, #28]
 8011dea:	f1c3 0307 	rsb	r3, r3, #7
 8011dee:	2b04      	cmp	r3, #4
 8011df0:	bf28      	it	cs
 8011df2:	2304      	movcs	r3, #4
 8011df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011df6:	69fb      	ldr	r3, [r7, #28]
 8011df8:	3304      	adds	r3, #4
 8011dfa:	2b06      	cmp	r3, #6
 8011dfc:	d902      	bls.n	8011e04 <NVIC_EncodePriority+0x30>
 8011dfe:	69fb      	ldr	r3, [r7, #28]
 8011e00:	3b03      	subs	r3, #3
 8011e02:	e000      	b.n	8011e06 <NVIC_EncodePriority+0x32>
 8011e04:	2300      	movs	r3, #0
 8011e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011e08:	f04f 32ff 	mov.w	r2, #4294967295
 8011e0c:	69bb      	ldr	r3, [r7, #24]
 8011e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8011e12:	43da      	mvns	r2, r3
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	401a      	ands	r2, r3
 8011e18:	697b      	ldr	r3, [r7, #20]
 8011e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8011e20:	697b      	ldr	r3, [r7, #20]
 8011e22:	fa01 f303 	lsl.w	r3, r1, r3
 8011e26:	43d9      	mvns	r1, r3
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011e2c:	4313      	orrs	r3, r2
         );
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3724      	adds	r7, #36	; 0x24
 8011e32:	46bd      	mov	sp, r7
 8011e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e38:	4770      	bx	lr
	...

08011e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b082      	sub	sp, #8
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	3b01      	subs	r3, #1
 8011e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011e4c:	d301      	bcc.n	8011e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8011e4e:	2301      	movs	r3, #1
 8011e50:	e00f      	b.n	8011e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011e52:	4a0a      	ldr	r2, [pc, #40]	; (8011e7c <SysTick_Config+0x40>)
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	3b01      	subs	r3, #1
 8011e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011e5a:	210f      	movs	r1, #15
 8011e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e60:	f7ff ff8e 	bl	8011d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011e64:	4b05      	ldr	r3, [pc, #20]	; (8011e7c <SysTick_Config+0x40>)
 8011e66:	2200      	movs	r2, #0
 8011e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011e6a:	4b04      	ldr	r3, [pc, #16]	; (8011e7c <SysTick_Config+0x40>)
 8011e6c:	2207      	movs	r2, #7
 8011e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011e70:	2300      	movs	r3, #0
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3708      	adds	r7, #8
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	e000e010 	.word	0xe000e010

08011e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b082      	sub	sp, #8
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f7ff ff47 	bl	8011d1c <__NVIC_SetPriorityGrouping>
}
 8011e8e:	bf00      	nop
 8011e90:	3708      	adds	r7, #8
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}

08011e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011e96:	b580      	push	{r7, lr}
 8011e98:	b086      	sub	sp, #24
 8011e9a:	af00      	add	r7, sp, #0
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	60b9      	str	r1, [r7, #8]
 8011ea0:	607a      	str	r2, [r7, #4]
 8011ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011ea8:	f7ff ff5c 	bl	8011d64 <__NVIC_GetPriorityGrouping>
 8011eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011eae:	687a      	ldr	r2, [r7, #4]
 8011eb0:	68b9      	ldr	r1, [r7, #8]
 8011eb2:	6978      	ldr	r0, [r7, #20]
 8011eb4:	f7ff ff8e 	bl	8011dd4 <NVIC_EncodePriority>
 8011eb8:	4602      	mov	r2, r0
 8011eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ebe:	4611      	mov	r1, r2
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f7ff ff5d 	bl	8011d80 <__NVIC_SetPriority>
}
 8011ec6:	bf00      	nop
 8011ec8:	3718      	adds	r7, #24
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}

08011ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011ece:	b580      	push	{r7, lr}
 8011ed0:	b082      	sub	sp, #8
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f7ff ffb0 	bl	8011e3c <SysTick_Config>
 8011edc:	4603      	mov	r3, r0
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	3708      	adds	r7, #8
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}
	...

08011ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011ee8:	b480      	push	{r7}
 8011eea:	b089      	sub	sp, #36	; 0x24
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
 8011ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8011efa:	2300      	movs	r3, #0
 8011efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011efe:	2300      	movs	r3, #0
 8011f00:	61fb      	str	r3, [r7, #28]
 8011f02:	e159      	b.n	80121b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011f04:	2201      	movs	r2, #1
 8011f06:	69fb      	ldr	r3, [r7, #28]
 8011f08:	fa02 f303 	lsl.w	r3, r2, r3
 8011f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	697a      	ldr	r2, [r7, #20]
 8011f14:	4013      	ands	r3, r2
 8011f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011f18:	693a      	ldr	r2, [r7, #16]
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	f040 8148 	bne.w	80121b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	f003 0303 	and.w	r3, r3, #3
 8011f2a:	2b01      	cmp	r3, #1
 8011f2c:	d005      	beq.n	8011f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	685b      	ldr	r3, [r3, #4]
 8011f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011f36:	2b02      	cmp	r3, #2
 8011f38:	d130      	bne.n	8011f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	689b      	ldr	r3, [r3, #8]
 8011f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011f40:	69fb      	ldr	r3, [r7, #28]
 8011f42:	005b      	lsls	r3, r3, #1
 8011f44:	2203      	movs	r2, #3
 8011f46:	fa02 f303 	lsl.w	r3, r2, r3
 8011f4a:	43db      	mvns	r3, r3
 8011f4c:	69ba      	ldr	r2, [r7, #24]
 8011f4e:	4013      	ands	r3, r2
 8011f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	68da      	ldr	r2, [r3, #12]
 8011f56:	69fb      	ldr	r3, [r7, #28]
 8011f58:	005b      	lsls	r3, r3, #1
 8011f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8011f5e:	69ba      	ldr	r2, [r7, #24]
 8011f60:	4313      	orrs	r3, r2
 8011f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	69ba      	ldr	r2, [r7, #24]
 8011f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	685b      	ldr	r3, [r3, #4]
 8011f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011f70:	2201      	movs	r2, #1
 8011f72:	69fb      	ldr	r3, [r7, #28]
 8011f74:	fa02 f303 	lsl.w	r3, r2, r3
 8011f78:	43db      	mvns	r3, r3
 8011f7a:	69ba      	ldr	r2, [r7, #24]
 8011f7c:	4013      	ands	r3, r2
 8011f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8011f80:	683b      	ldr	r3, [r7, #0]
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	091b      	lsrs	r3, r3, #4
 8011f86:	f003 0201 	and.w	r2, r3, #1
 8011f8a:	69fb      	ldr	r3, [r7, #28]
 8011f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8011f90:	69ba      	ldr	r2, [r7, #24]
 8011f92:	4313      	orrs	r3, r2
 8011f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	69ba      	ldr	r2, [r7, #24]
 8011f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8011f9c:	683b      	ldr	r3, [r7, #0]
 8011f9e:	685b      	ldr	r3, [r3, #4]
 8011fa0:	f003 0303 	and.w	r3, r3, #3
 8011fa4:	2b03      	cmp	r3, #3
 8011fa6:	d017      	beq.n	8011fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	68db      	ldr	r3, [r3, #12]
 8011fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8011fae:	69fb      	ldr	r3, [r7, #28]
 8011fb0:	005b      	lsls	r3, r3, #1
 8011fb2:	2203      	movs	r2, #3
 8011fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8011fb8:	43db      	mvns	r3, r3
 8011fba:	69ba      	ldr	r2, [r7, #24]
 8011fbc:	4013      	ands	r3, r2
 8011fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	689a      	ldr	r2, [r3, #8]
 8011fc4:	69fb      	ldr	r3, [r7, #28]
 8011fc6:	005b      	lsls	r3, r3, #1
 8011fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8011fcc:	69ba      	ldr	r2, [r7, #24]
 8011fce:	4313      	orrs	r3, r2
 8011fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	69ba      	ldr	r2, [r7, #24]
 8011fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	685b      	ldr	r3, [r3, #4]
 8011fdc:	f003 0303 	and.w	r3, r3, #3
 8011fe0:	2b02      	cmp	r3, #2
 8011fe2:	d123      	bne.n	801202c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011fe4:	69fb      	ldr	r3, [r7, #28]
 8011fe6:	08da      	lsrs	r2, r3, #3
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	3208      	adds	r2, #8
 8011fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011ff2:	69fb      	ldr	r3, [r7, #28]
 8011ff4:	f003 0307 	and.w	r3, r3, #7
 8011ff8:	009b      	lsls	r3, r3, #2
 8011ffa:	220f      	movs	r2, #15
 8011ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8012000:	43db      	mvns	r3, r3
 8012002:	69ba      	ldr	r2, [r7, #24]
 8012004:	4013      	ands	r3, r2
 8012006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	691a      	ldr	r2, [r3, #16]
 801200c:	69fb      	ldr	r3, [r7, #28]
 801200e:	f003 0307 	and.w	r3, r3, #7
 8012012:	009b      	lsls	r3, r3, #2
 8012014:	fa02 f303 	lsl.w	r3, r2, r3
 8012018:	69ba      	ldr	r2, [r7, #24]
 801201a:	4313      	orrs	r3, r2
 801201c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801201e:	69fb      	ldr	r3, [r7, #28]
 8012020:	08da      	lsrs	r2, r3, #3
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	3208      	adds	r2, #8
 8012026:	69b9      	ldr	r1, [r7, #24]
 8012028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012032:	69fb      	ldr	r3, [r7, #28]
 8012034:	005b      	lsls	r3, r3, #1
 8012036:	2203      	movs	r2, #3
 8012038:	fa02 f303 	lsl.w	r3, r2, r3
 801203c:	43db      	mvns	r3, r3
 801203e:	69ba      	ldr	r2, [r7, #24]
 8012040:	4013      	ands	r3, r2
 8012042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	685b      	ldr	r3, [r3, #4]
 8012048:	f003 0203 	and.w	r2, r3, #3
 801204c:	69fb      	ldr	r3, [r7, #28]
 801204e:	005b      	lsls	r3, r3, #1
 8012050:	fa02 f303 	lsl.w	r3, r2, r3
 8012054:	69ba      	ldr	r2, [r7, #24]
 8012056:	4313      	orrs	r3, r2
 8012058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	69ba      	ldr	r2, [r7, #24]
 801205e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012068:	2b00      	cmp	r3, #0
 801206a:	f000 80a2 	beq.w	80121b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801206e:	2300      	movs	r3, #0
 8012070:	60fb      	str	r3, [r7, #12]
 8012072:	4b57      	ldr	r3, [pc, #348]	; (80121d0 <HAL_GPIO_Init+0x2e8>)
 8012074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012076:	4a56      	ldr	r2, [pc, #344]	; (80121d0 <HAL_GPIO_Init+0x2e8>)
 8012078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801207c:	6453      	str	r3, [r2, #68]	; 0x44
 801207e:	4b54      	ldr	r3, [pc, #336]	; (80121d0 <HAL_GPIO_Init+0x2e8>)
 8012080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012086:	60fb      	str	r3, [r7, #12]
 8012088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801208a:	4a52      	ldr	r2, [pc, #328]	; (80121d4 <HAL_GPIO_Init+0x2ec>)
 801208c:	69fb      	ldr	r3, [r7, #28]
 801208e:	089b      	lsrs	r3, r3, #2
 8012090:	3302      	adds	r3, #2
 8012092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8012098:	69fb      	ldr	r3, [r7, #28]
 801209a:	f003 0303 	and.w	r3, r3, #3
 801209e:	009b      	lsls	r3, r3, #2
 80120a0:	220f      	movs	r2, #15
 80120a2:	fa02 f303 	lsl.w	r3, r2, r3
 80120a6:	43db      	mvns	r3, r3
 80120a8:	69ba      	ldr	r2, [r7, #24]
 80120aa:	4013      	ands	r3, r2
 80120ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	4a49      	ldr	r2, [pc, #292]	; (80121d8 <HAL_GPIO_Init+0x2f0>)
 80120b2:	4293      	cmp	r3, r2
 80120b4:	d019      	beq.n	80120ea <HAL_GPIO_Init+0x202>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	4a48      	ldr	r2, [pc, #288]	; (80121dc <HAL_GPIO_Init+0x2f4>)
 80120ba:	4293      	cmp	r3, r2
 80120bc:	d013      	beq.n	80120e6 <HAL_GPIO_Init+0x1fe>
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	4a47      	ldr	r2, [pc, #284]	; (80121e0 <HAL_GPIO_Init+0x2f8>)
 80120c2:	4293      	cmp	r3, r2
 80120c4:	d00d      	beq.n	80120e2 <HAL_GPIO_Init+0x1fa>
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	4a46      	ldr	r2, [pc, #280]	; (80121e4 <HAL_GPIO_Init+0x2fc>)
 80120ca:	4293      	cmp	r3, r2
 80120cc:	d007      	beq.n	80120de <HAL_GPIO_Init+0x1f6>
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	4a45      	ldr	r2, [pc, #276]	; (80121e8 <HAL_GPIO_Init+0x300>)
 80120d2:	4293      	cmp	r3, r2
 80120d4:	d101      	bne.n	80120da <HAL_GPIO_Init+0x1f2>
 80120d6:	2304      	movs	r3, #4
 80120d8:	e008      	b.n	80120ec <HAL_GPIO_Init+0x204>
 80120da:	2307      	movs	r3, #7
 80120dc:	e006      	b.n	80120ec <HAL_GPIO_Init+0x204>
 80120de:	2303      	movs	r3, #3
 80120e0:	e004      	b.n	80120ec <HAL_GPIO_Init+0x204>
 80120e2:	2302      	movs	r3, #2
 80120e4:	e002      	b.n	80120ec <HAL_GPIO_Init+0x204>
 80120e6:	2301      	movs	r3, #1
 80120e8:	e000      	b.n	80120ec <HAL_GPIO_Init+0x204>
 80120ea:	2300      	movs	r3, #0
 80120ec:	69fa      	ldr	r2, [r7, #28]
 80120ee:	f002 0203 	and.w	r2, r2, #3
 80120f2:	0092      	lsls	r2, r2, #2
 80120f4:	4093      	lsls	r3, r2
 80120f6:	69ba      	ldr	r2, [r7, #24]
 80120f8:	4313      	orrs	r3, r2
 80120fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80120fc:	4935      	ldr	r1, [pc, #212]	; (80121d4 <HAL_GPIO_Init+0x2ec>)
 80120fe:	69fb      	ldr	r3, [r7, #28]
 8012100:	089b      	lsrs	r3, r3, #2
 8012102:	3302      	adds	r3, #2
 8012104:	69ba      	ldr	r2, [r7, #24]
 8012106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801210a:	4b38      	ldr	r3, [pc, #224]	; (80121ec <HAL_GPIO_Init+0x304>)
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012110:	693b      	ldr	r3, [r7, #16]
 8012112:	43db      	mvns	r3, r3
 8012114:	69ba      	ldr	r2, [r7, #24]
 8012116:	4013      	ands	r3, r2
 8012118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	685b      	ldr	r3, [r3, #4]
 801211e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012122:	2b00      	cmp	r3, #0
 8012124:	d003      	beq.n	801212e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8012126:	69ba      	ldr	r2, [r7, #24]
 8012128:	693b      	ldr	r3, [r7, #16]
 801212a:	4313      	orrs	r3, r2
 801212c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801212e:	4a2f      	ldr	r2, [pc, #188]	; (80121ec <HAL_GPIO_Init+0x304>)
 8012130:	69bb      	ldr	r3, [r7, #24]
 8012132:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012134:	4b2d      	ldr	r3, [pc, #180]	; (80121ec <HAL_GPIO_Init+0x304>)
 8012136:	685b      	ldr	r3, [r3, #4]
 8012138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	43db      	mvns	r3, r3
 801213e:	69ba      	ldr	r2, [r7, #24]
 8012140:	4013      	ands	r3, r2
 8012142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8012144:	683b      	ldr	r3, [r7, #0]
 8012146:	685b      	ldr	r3, [r3, #4]
 8012148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801214c:	2b00      	cmp	r3, #0
 801214e:	d003      	beq.n	8012158 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8012150:	69ba      	ldr	r2, [r7, #24]
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	4313      	orrs	r3, r2
 8012156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012158:	4a24      	ldr	r2, [pc, #144]	; (80121ec <HAL_GPIO_Init+0x304>)
 801215a:	69bb      	ldr	r3, [r7, #24]
 801215c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801215e:	4b23      	ldr	r3, [pc, #140]	; (80121ec <HAL_GPIO_Init+0x304>)
 8012160:	689b      	ldr	r3, [r3, #8]
 8012162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	43db      	mvns	r3, r3
 8012168:	69ba      	ldr	r2, [r7, #24]
 801216a:	4013      	ands	r3, r2
 801216c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	685b      	ldr	r3, [r3, #4]
 8012172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012176:	2b00      	cmp	r3, #0
 8012178:	d003      	beq.n	8012182 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801217a:	69ba      	ldr	r2, [r7, #24]
 801217c:	693b      	ldr	r3, [r7, #16]
 801217e:	4313      	orrs	r3, r2
 8012180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8012182:	4a1a      	ldr	r2, [pc, #104]	; (80121ec <HAL_GPIO_Init+0x304>)
 8012184:	69bb      	ldr	r3, [r7, #24]
 8012186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8012188:	4b18      	ldr	r3, [pc, #96]	; (80121ec <HAL_GPIO_Init+0x304>)
 801218a:	68db      	ldr	r3, [r3, #12]
 801218c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	43db      	mvns	r3, r3
 8012192:	69ba      	ldr	r2, [r7, #24]
 8012194:	4013      	ands	r3, r2
 8012196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	685b      	ldr	r3, [r3, #4]
 801219c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d003      	beq.n	80121ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80121a4:	69ba      	ldr	r2, [r7, #24]
 80121a6:	693b      	ldr	r3, [r7, #16]
 80121a8:	4313      	orrs	r3, r2
 80121aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80121ac:	4a0f      	ldr	r2, [pc, #60]	; (80121ec <HAL_GPIO_Init+0x304>)
 80121ae:	69bb      	ldr	r3, [r7, #24]
 80121b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80121b2:	69fb      	ldr	r3, [r7, #28]
 80121b4:	3301      	adds	r3, #1
 80121b6:	61fb      	str	r3, [r7, #28]
 80121b8:	69fb      	ldr	r3, [r7, #28]
 80121ba:	2b0f      	cmp	r3, #15
 80121bc:	f67f aea2 	bls.w	8011f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80121c0:	bf00      	nop
 80121c2:	bf00      	nop
 80121c4:	3724      	adds	r7, #36	; 0x24
 80121c6:	46bd      	mov	sp, r7
 80121c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121cc:	4770      	bx	lr
 80121ce:	bf00      	nop
 80121d0:	40023800 	.word	0x40023800
 80121d4:	40013800 	.word	0x40013800
 80121d8:	40020000 	.word	0x40020000
 80121dc:	40020400 	.word	0x40020400
 80121e0:	40020800 	.word	0x40020800
 80121e4:	40020c00 	.word	0x40020c00
 80121e8:	40021000 	.word	0x40021000
 80121ec:	40013c00 	.word	0x40013c00

080121f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80121f0:	b480      	push	{r7}
 80121f2:	b087      	sub	sp, #28
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
 80121f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80121fa:	2300      	movs	r3, #0
 80121fc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80121fe:	2300      	movs	r3, #0
 8012200:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8012202:	2300      	movs	r3, #0
 8012204:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012206:	2300      	movs	r3, #0
 8012208:	617b      	str	r3, [r7, #20]
 801220a:	e0bb      	b.n	8012384 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801220c:	2201      	movs	r2, #1
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	fa02 f303 	lsl.w	r3, r2, r3
 8012214:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8012216:	683a      	ldr	r2, [r7, #0]
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	4013      	ands	r3, r2
 801221c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801221e:	68fa      	ldr	r2, [r7, #12]
 8012220:	693b      	ldr	r3, [r7, #16]
 8012222:	429a      	cmp	r2, r3
 8012224:	f040 80ab 	bne.w	801237e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8012228:	4a5c      	ldr	r2, [pc, #368]	; (801239c <HAL_GPIO_DeInit+0x1ac>)
 801222a:	697b      	ldr	r3, [r7, #20]
 801222c:	089b      	lsrs	r3, r3, #2
 801222e:	3302      	adds	r3, #2
 8012230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012234:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8012236:	697b      	ldr	r3, [r7, #20]
 8012238:	f003 0303 	and.w	r3, r3, #3
 801223c:	009b      	lsls	r3, r3, #2
 801223e:	220f      	movs	r2, #15
 8012240:	fa02 f303 	lsl.w	r3, r2, r3
 8012244:	68ba      	ldr	r2, [r7, #8]
 8012246:	4013      	ands	r3, r2
 8012248:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	4a54      	ldr	r2, [pc, #336]	; (80123a0 <HAL_GPIO_DeInit+0x1b0>)
 801224e:	4293      	cmp	r3, r2
 8012250:	d019      	beq.n	8012286 <HAL_GPIO_DeInit+0x96>
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	4a53      	ldr	r2, [pc, #332]	; (80123a4 <HAL_GPIO_DeInit+0x1b4>)
 8012256:	4293      	cmp	r3, r2
 8012258:	d013      	beq.n	8012282 <HAL_GPIO_DeInit+0x92>
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	4a52      	ldr	r2, [pc, #328]	; (80123a8 <HAL_GPIO_DeInit+0x1b8>)
 801225e:	4293      	cmp	r3, r2
 8012260:	d00d      	beq.n	801227e <HAL_GPIO_DeInit+0x8e>
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	4a51      	ldr	r2, [pc, #324]	; (80123ac <HAL_GPIO_DeInit+0x1bc>)
 8012266:	4293      	cmp	r3, r2
 8012268:	d007      	beq.n	801227a <HAL_GPIO_DeInit+0x8a>
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	4a50      	ldr	r2, [pc, #320]	; (80123b0 <HAL_GPIO_DeInit+0x1c0>)
 801226e:	4293      	cmp	r3, r2
 8012270:	d101      	bne.n	8012276 <HAL_GPIO_DeInit+0x86>
 8012272:	2304      	movs	r3, #4
 8012274:	e008      	b.n	8012288 <HAL_GPIO_DeInit+0x98>
 8012276:	2307      	movs	r3, #7
 8012278:	e006      	b.n	8012288 <HAL_GPIO_DeInit+0x98>
 801227a:	2303      	movs	r3, #3
 801227c:	e004      	b.n	8012288 <HAL_GPIO_DeInit+0x98>
 801227e:	2302      	movs	r3, #2
 8012280:	e002      	b.n	8012288 <HAL_GPIO_DeInit+0x98>
 8012282:	2301      	movs	r3, #1
 8012284:	e000      	b.n	8012288 <HAL_GPIO_DeInit+0x98>
 8012286:	2300      	movs	r3, #0
 8012288:	697a      	ldr	r2, [r7, #20]
 801228a:	f002 0203 	and.w	r2, r2, #3
 801228e:	0092      	lsls	r2, r2, #2
 8012290:	4093      	lsls	r3, r2
 8012292:	68ba      	ldr	r2, [r7, #8]
 8012294:	429a      	cmp	r2, r3
 8012296:	d132      	bne.n	80122fe <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8012298:	4b46      	ldr	r3, [pc, #280]	; (80123b4 <HAL_GPIO_DeInit+0x1c4>)
 801229a:	681a      	ldr	r2, [r3, #0]
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	43db      	mvns	r3, r3
 80122a0:	4944      	ldr	r1, [pc, #272]	; (80123b4 <HAL_GPIO_DeInit+0x1c4>)
 80122a2:	4013      	ands	r3, r2
 80122a4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80122a6:	4b43      	ldr	r3, [pc, #268]	; (80123b4 <HAL_GPIO_DeInit+0x1c4>)
 80122a8:	685a      	ldr	r2, [r3, #4]
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	43db      	mvns	r3, r3
 80122ae:	4941      	ldr	r1, [pc, #260]	; (80123b4 <HAL_GPIO_DeInit+0x1c4>)
 80122b0:	4013      	ands	r3, r2
 80122b2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80122b4:	4b3f      	ldr	r3, [pc, #252]	; (80123b4 <HAL_GPIO_DeInit+0x1c4>)
 80122b6:	689a      	ldr	r2, [r3, #8]
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	43db      	mvns	r3, r3
 80122bc:	493d      	ldr	r1, [pc, #244]	; (80123b4 <HAL_GPIO_DeInit+0x1c4>)
 80122be:	4013      	ands	r3, r2
 80122c0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80122c2:	4b3c      	ldr	r3, [pc, #240]	; (80123b4 <HAL_GPIO_DeInit+0x1c4>)
 80122c4:	68da      	ldr	r2, [r3, #12]
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	43db      	mvns	r3, r3
 80122ca:	493a      	ldr	r1, [pc, #232]	; (80123b4 <HAL_GPIO_DeInit+0x1c4>)
 80122cc:	4013      	ands	r3, r2
 80122ce:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	f003 0303 	and.w	r3, r3, #3
 80122d6:	009b      	lsls	r3, r3, #2
 80122d8:	220f      	movs	r2, #15
 80122da:	fa02 f303 	lsl.w	r3, r2, r3
 80122de:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80122e0:	4a2e      	ldr	r2, [pc, #184]	; (801239c <HAL_GPIO_DeInit+0x1ac>)
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	089b      	lsrs	r3, r3, #2
 80122e6:	3302      	adds	r3, #2
 80122e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	43da      	mvns	r2, r3
 80122f0:	482a      	ldr	r0, [pc, #168]	; (801239c <HAL_GPIO_DeInit+0x1ac>)
 80122f2:	697b      	ldr	r3, [r7, #20]
 80122f4:	089b      	lsrs	r3, r3, #2
 80122f6:	400a      	ands	r2, r1
 80122f8:	3302      	adds	r3, #2
 80122fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681a      	ldr	r2, [r3, #0]
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	005b      	lsls	r3, r3, #1
 8012306:	2103      	movs	r1, #3
 8012308:	fa01 f303 	lsl.w	r3, r1, r3
 801230c:	43db      	mvns	r3, r3
 801230e:	401a      	ands	r2, r3
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	08da      	lsrs	r2, r3, #3
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	3208      	adds	r2, #8
 801231c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012320:	697b      	ldr	r3, [r7, #20]
 8012322:	f003 0307 	and.w	r3, r3, #7
 8012326:	009b      	lsls	r3, r3, #2
 8012328:	220f      	movs	r2, #15
 801232a:	fa02 f303 	lsl.w	r3, r2, r3
 801232e:	43db      	mvns	r3, r3
 8012330:	697a      	ldr	r2, [r7, #20]
 8012332:	08d2      	lsrs	r2, r2, #3
 8012334:	4019      	ands	r1, r3
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	3208      	adds	r2, #8
 801233a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	68da      	ldr	r2, [r3, #12]
 8012342:	697b      	ldr	r3, [r7, #20]
 8012344:	005b      	lsls	r3, r3, #1
 8012346:	2103      	movs	r1, #3
 8012348:	fa01 f303 	lsl.w	r3, r1, r3
 801234c:	43db      	mvns	r3, r3
 801234e:	401a      	ands	r2, r3
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	685a      	ldr	r2, [r3, #4]
 8012358:	2101      	movs	r1, #1
 801235a:	697b      	ldr	r3, [r7, #20]
 801235c:	fa01 f303 	lsl.w	r3, r1, r3
 8012360:	43db      	mvns	r3, r3
 8012362:	401a      	ands	r2, r3
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	689a      	ldr	r2, [r3, #8]
 801236c:	697b      	ldr	r3, [r7, #20]
 801236e:	005b      	lsls	r3, r3, #1
 8012370:	2103      	movs	r1, #3
 8012372:	fa01 f303 	lsl.w	r3, r1, r3
 8012376:	43db      	mvns	r3, r3
 8012378:	401a      	ands	r2, r3
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801237e:	697b      	ldr	r3, [r7, #20]
 8012380:	3301      	adds	r3, #1
 8012382:	617b      	str	r3, [r7, #20]
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	2b0f      	cmp	r3, #15
 8012388:	f67f af40 	bls.w	801220c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 801238c:	bf00      	nop
 801238e:	bf00      	nop
 8012390:	371c      	adds	r7, #28
 8012392:	46bd      	mov	sp, r7
 8012394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012398:	4770      	bx	lr
 801239a:	bf00      	nop
 801239c:	40013800 	.word	0x40013800
 80123a0:	40020000 	.word	0x40020000
 80123a4:	40020400 	.word	0x40020400
 80123a8:	40020800 	.word	0x40020800
 80123ac:	40020c00 	.word	0x40020c00
 80123b0:	40021000 	.word	0x40021000
 80123b4:	40013c00 	.word	0x40013c00

080123b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80123b8:	b480      	push	{r7}
 80123ba:	b085      	sub	sp, #20
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
 80123c0:	460b      	mov	r3, r1
 80123c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	691a      	ldr	r2, [r3, #16]
 80123c8:	887b      	ldrh	r3, [r7, #2]
 80123ca:	4013      	ands	r3, r2
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d002      	beq.n	80123d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80123d0:	2301      	movs	r3, #1
 80123d2:	73fb      	strb	r3, [r7, #15]
 80123d4:	e001      	b.n	80123da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80123d6:	2300      	movs	r3, #0
 80123d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80123da:	7bfb      	ldrb	r3, [r7, #15]
}
 80123dc:	4618      	mov	r0, r3
 80123de:	3714      	adds	r7, #20
 80123e0:	46bd      	mov	sp, r7
 80123e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e6:	4770      	bx	lr

080123e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80123e8:	b480      	push	{r7}
 80123ea:	b083      	sub	sp, #12
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
 80123f0:	460b      	mov	r3, r1
 80123f2:	807b      	strh	r3, [r7, #2]
 80123f4:	4613      	mov	r3, r2
 80123f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80123f8:	787b      	ldrb	r3, [r7, #1]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d003      	beq.n	8012406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80123fe:	887a      	ldrh	r2, [r7, #2]
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012404:	e003      	b.n	801240e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8012406:	887b      	ldrh	r3, [r7, #2]
 8012408:	041a      	lsls	r2, r3, #16
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	619a      	str	r2, [r3, #24]
}
 801240e:	bf00      	nop
 8012410:	370c      	adds	r7, #12
 8012412:	46bd      	mov	sp, r7
 8012414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012418:	4770      	bx	lr
	...

0801241c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b084      	sub	sp, #16
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d101      	bne.n	801242e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801242a:	2301      	movs	r3, #1
 801242c:	e12b      	b.n	8012686 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012434:	b2db      	uxtb	r3, r3
 8012436:	2b00      	cmp	r3, #0
 8012438:	d106      	bne.n	8012448 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2200      	movs	r2, #0
 801243e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f000 f95d 	bl	8012702 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2224      	movs	r2, #36	; 0x24
 801244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	681a      	ldr	r2, [r3, #0]
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	f022 0201 	bic.w	r2, r2, #1
 801245e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	681a      	ldr	r2, [r3, #0]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801246e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	681a      	ldr	r2, [r3, #0]
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801247e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8012480:	f001 fc0c 	bl	8013c9c <HAL_RCC_GetPCLK1Freq>
 8012484:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	685b      	ldr	r3, [r3, #4]
 801248a:	4a81      	ldr	r2, [pc, #516]	; (8012690 <HAL_I2C_Init+0x274>)
 801248c:	4293      	cmp	r3, r2
 801248e:	d807      	bhi.n	80124a0 <HAL_I2C_Init+0x84>
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	4a80      	ldr	r2, [pc, #512]	; (8012694 <HAL_I2C_Init+0x278>)
 8012494:	4293      	cmp	r3, r2
 8012496:	bf94      	ite	ls
 8012498:	2301      	movls	r3, #1
 801249a:	2300      	movhi	r3, #0
 801249c:	b2db      	uxtb	r3, r3
 801249e:	e006      	b.n	80124ae <HAL_I2C_Init+0x92>
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	4a7d      	ldr	r2, [pc, #500]	; (8012698 <HAL_I2C_Init+0x27c>)
 80124a4:	4293      	cmp	r3, r2
 80124a6:	bf94      	ite	ls
 80124a8:	2301      	movls	r3, #1
 80124aa:	2300      	movhi	r3, #0
 80124ac:	b2db      	uxtb	r3, r3
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d001      	beq.n	80124b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80124b2:	2301      	movs	r3, #1
 80124b4:	e0e7      	b.n	8012686 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	4a78      	ldr	r2, [pc, #480]	; (801269c <HAL_I2C_Init+0x280>)
 80124ba:	fba2 2303 	umull	r2, r3, r2, r3
 80124be:	0c9b      	lsrs	r3, r3, #18
 80124c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	685b      	ldr	r3, [r3, #4]
 80124c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	68ba      	ldr	r2, [r7, #8]
 80124d2:	430a      	orrs	r2, r1
 80124d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	6a1b      	ldr	r3, [r3, #32]
 80124dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	685b      	ldr	r3, [r3, #4]
 80124e4:	4a6a      	ldr	r2, [pc, #424]	; (8012690 <HAL_I2C_Init+0x274>)
 80124e6:	4293      	cmp	r3, r2
 80124e8:	d802      	bhi.n	80124f0 <HAL_I2C_Init+0xd4>
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	3301      	adds	r3, #1
 80124ee:	e009      	b.n	8012504 <HAL_I2C_Init+0xe8>
 80124f0:	68bb      	ldr	r3, [r7, #8]
 80124f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80124f6:	fb02 f303 	mul.w	r3, r2, r3
 80124fa:	4a69      	ldr	r2, [pc, #420]	; (80126a0 <HAL_I2C_Init+0x284>)
 80124fc:	fba2 2303 	umull	r2, r3, r2, r3
 8012500:	099b      	lsrs	r3, r3, #6
 8012502:	3301      	adds	r3, #1
 8012504:	687a      	ldr	r2, [r7, #4]
 8012506:	6812      	ldr	r2, [r2, #0]
 8012508:	430b      	orrs	r3, r1
 801250a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	69db      	ldr	r3, [r3, #28]
 8012512:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8012516:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	685b      	ldr	r3, [r3, #4]
 801251e:	495c      	ldr	r1, [pc, #368]	; (8012690 <HAL_I2C_Init+0x274>)
 8012520:	428b      	cmp	r3, r1
 8012522:	d819      	bhi.n	8012558 <HAL_I2C_Init+0x13c>
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	1e59      	subs	r1, r3, #1
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	005b      	lsls	r3, r3, #1
 801252e:	fbb1 f3f3 	udiv	r3, r1, r3
 8012532:	1c59      	adds	r1, r3, #1
 8012534:	f640 73fc 	movw	r3, #4092	; 0xffc
 8012538:	400b      	ands	r3, r1
 801253a:	2b00      	cmp	r3, #0
 801253c:	d00a      	beq.n	8012554 <HAL_I2C_Init+0x138>
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	1e59      	subs	r1, r3, #1
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	685b      	ldr	r3, [r3, #4]
 8012546:	005b      	lsls	r3, r3, #1
 8012548:	fbb1 f3f3 	udiv	r3, r1, r3
 801254c:	3301      	adds	r3, #1
 801254e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012552:	e051      	b.n	80125f8 <HAL_I2C_Init+0x1dc>
 8012554:	2304      	movs	r3, #4
 8012556:	e04f      	b.n	80125f8 <HAL_I2C_Init+0x1dc>
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	689b      	ldr	r3, [r3, #8]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d111      	bne.n	8012584 <HAL_I2C_Init+0x168>
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	1e58      	subs	r0, r3, #1
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6859      	ldr	r1, [r3, #4]
 8012568:	460b      	mov	r3, r1
 801256a:	005b      	lsls	r3, r3, #1
 801256c:	440b      	add	r3, r1
 801256e:	fbb0 f3f3 	udiv	r3, r0, r3
 8012572:	3301      	adds	r3, #1
 8012574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012578:	2b00      	cmp	r3, #0
 801257a:	bf0c      	ite	eq
 801257c:	2301      	moveq	r3, #1
 801257e:	2300      	movne	r3, #0
 8012580:	b2db      	uxtb	r3, r3
 8012582:	e012      	b.n	80125aa <HAL_I2C_Init+0x18e>
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	1e58      	subs	r0, r3, #1
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	6859      	ldr	r1, [r3, #4]
 801258c:	460b      	mov	r3, r1
 801258e:	009b      	lsls	r3, r3, #2
 8012590:	440b      	add	r3, r1
 8012592:	0099      	lsls	r1, r3, #2
 8012594:	440b      	add	r3, r1
 8012596:	fbb0 f3f3 	udiv	r3, r0, r3
 801259a:	3301      	adds	r3, #1
 801259c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	bf0c      	ite	eq
 80125a4:	2301      	moveq	r3, #1
 80125a6:	2300      	movne	r3, #0
 80125a8:	b2db      	uxtb	r3, r3
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d001      	beq.n	80125b2 <HAL_I2C_Init+0x196>
 80125ae:	2301      	movs	r3, #1
 80125b0:	e022      	b.n	80125f8 <HAL_I2C_Init+0x1dc>
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	689b      	ldr	r3, [r3, #8]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d10e      	bne.n	80125d8 <HAL_I2C_Init+0x1bc>
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	1e58      	subs	r0, r3, #1
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	6859      	ldr	r1, [r3, #4]
 80125c2:	460b      	mov	r3, r1
 80125c4:	005b      	lsls	r3, r3, #1
 80125c6:	440b      	add	r3, r1
 80125c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80125cc:	3301      	adds	r3, #1
 80125ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80125d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80125d6:	e00f      	b.n	80125f8 <HAL_I2C_Init+0x1dc>
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	1e58      	subs	r0, r3, #1
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6859      	ldr	r1, [r3, #4]
 80125e0:	460b      	mov	r3, r1
 80125e2:	009b      	lsls	r3, r3, #2
 80125e4:	440b      	add	r3, r1
 80125e6:	0099      	lsls	r1, r3, #2
 80125e8:	440b      	add	r3, r1
 80125ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80125ee:	3301      	adds	r3, #1
 80125f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80125f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80125f8:	6879      	ldr	r1, [r7, #4]
 80125fa:	6809      	ldr	r1, [r1, #0]
 80125fc:	4313      	orrs	r3, r2
 80125fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	69da      	ldr	r2, [r3, #28]
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6a1b      	ldr	r3, [r3, #32]
 8012612:	431a      	orrs	r2, r3
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	430a      	orrs	r2, r1
 801261a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	689b      	ldr	r3, [r3, #8]
 8012622:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8012626:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801262a:	687a      	ldr	r2, [r7, #4]
 801262c:	6911      	ldr	r1, [r2, #16]
 801262e:	687a      	ldr	r2, [r7, #4]
 8012630:	68d2      	ldr	r2, [r2, #12]
 8012632:	4311      	orrs	r1, r2
 8012634:	687a      	ldr	r2, [r7, #4]
 8012636:	6812      	ldr	r2, [r2, #0]
 8012638:	430b      	orrs	r3, r1
 801263a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	68db      	ldr	r3, [r3, #12]
 8012642:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	695a      	ldr	r2, [r3, #20]
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	699b      	ldr	r3, [r3, #24]
 801264e:	431a      	orrs	r2, r3
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	430a      	orrs	r2, r1
 8012656:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	681a      	ldr	r2, [r3, #0]
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	f042 0201 	orr.w	r2, r2, #1
 8012666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	2200      	movs	r2, #0
 801266c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2220      	movs	r2, #32
 8012672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2200      	movs	r2, #0
 801267a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2200      	movs	r2, #0
 8012680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8012684:	2300      	movs	r3, #0
}
 8012686:	4618      	mov	r0, r3
 8012688:	3710      	adds	r7, #16
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}
 801268e:	bf00      	nop
 8012690:	000186a0 	.word	0x000186a0
 8012694:	001e847f 	.word	0x001e847f
 8012698:	003d08ff 	.word	0x003d08ff
 801269c:	431bde83 	.word	0x431bde83
 80126a0:	10624dd3 	.word	0x10624dd3

080126a4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b082      	sub	sp, #8
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d101      	bne.n	80126b6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80126b2:	2301      	movs	r3, #1
 80126b4:	e021      	b.n	80126fa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2224      	movs	r2, #36	; 0x24
 80126ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	681a      	ldr	r2, [r3, #0]
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	f022 0201 	bic.w	r2, r2, #1
 80126cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f000 f821 	bl	8012716 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2200      	movs	r2, #0
 80126d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2200      	movs	r2, #0
 80126de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2200      	movs	r2, #0
 80126e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2200      	movs	r2, #0
 80126ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2200      	movs	r2, #0
 80126f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80126f8:	2300      	movs	r3, #0
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3708      	adds	r7, #8
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}

08012702 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8012702:	b480      	push	{r7}
 8012704:	b083      	sub	sp, #12
 8012706:	af00      	add	r7, sp, #0
 8012708:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 801270a:	bf00      	nop
 801270c:	370c      	adds	r7, #12
 801270e:	46bd      	mov	sp, r7
 8012710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012714:	4770      	bx	lr

08012716 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8012716:	b480      	push	{r7}
 8012718:	b083      	sub	sp, #12
 801271a:	af00      	add	r7, sp, #0
 801271c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 801271e:	bf00      	nop
 8012720:	370c      	adds	r7, #12
 8012722:	46bd      	mov	sp, r7
 8012724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012728:	4770      	bx	lr
	...

0801272c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b088      	sub	sp, #32
 8012730:	af02      	add	r7, sp, #8
 8012732:	60f8      	str	r0, [r7, #12]
 8012734:	607a      	str	r2, [r7, #4]
 8012736:	461a      	mov	r2, r3
 8012738:	460b      	mov	r3, r1
 801273a:	817b      	strh	r3, [r7, #10]
 801273c:	4613      	mov	r3, r2
 801273e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8012740:	f7ff fabc 	bl	8011cbc <HAL_GetTick>
 8012744:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801274c:	b2db      	uxtb	r3, r3
 801274e:	2b20      	cmp	r3, #32
 8012750:	f040 80e0 	bne.w	8012914 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8012754:	697b      	ldr	r3, [r7, #20]
 8012756:	9300      	str	r3, [sp, #0]
 8012758:	2319      	movs	r3, #25
 801275a:	2201      	movs	r2, #1
 801275c:	4970      	ldr	r1, [pc, #448]	; (8012920 <HAL_I2C_Master_Transmit+0x1f4>)
 801275e:	68f8      	ldr	r0, [r7, #12]
 8012760:	f000 fc72 	bl	8013048 <I2C_WaitOnFlagUntilTimeout>
 8012764:	4603      	mov	r3, r0
 8012766:	2b00      	cmp	r3, #0
 8012768:	d001      	beq.n	801276e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 801276a:	2302      	movs	r3, #2
 801276c:	e0d3      	b.n	8012916 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012774:	2b01      	cmp	r3, #1
 8012776:	d101      	bne.n	801277c <HAL_I2C_Master_Transmit+0x50>
 8012778:	2302      	movs	r3, #2
 801277a:	e0cc      	b.n	8012916 <HAL_I2C_Master_Transmit+0x1ea>
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	2201      	movs	r2, #1
 8012780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	f003 0301 	and.w	r3, r3, #1
 801278e:	2b01      	cmp	r3, #1
 8012790:	d007      	beq.n	80127a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	681a      	ldr	r2, [r3, #0]
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	f042 0201 	orr.w	r2, r2, #1
 80127a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	681a      	ldr	r2, [r3, #0]
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80127b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	2221      	movs	r2, #33	; 0x21
 80127b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	2210      	movs	r2, #16
 80127be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	2200      	movs	r2, #0
 80127c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	687a      	ldr	r2, [r7, #4]
 80127cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	893a      	ldrh	r2, [r7, #8]
 80127d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80127d8:	b29a      	uxth	r2, r3
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	4a50      	ldr	r2, [pc, #320]	; (8012924 <HAL_I2C_Master_Transmit+0x1f8>)
 80127e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80127e4:	8979      	ldrh	r1, [r7, #10]
 80127e6:	697b      	ldr	r3, [r7, #20]
 80127e8:	6a3a      	ldr	r2, [r7, #32]
 80127ea:	68f8      	ldr	r0, [r7, #12]
 80127ec:	f000 fadc 	bl	8012da8 <I2C_MasterRequestWrite>
 80127f0:	4603      	mov	r3, r0
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d001      	beq.n	80127fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80127f6:	2301      	movs	r3, #1
 80127f8:	e08d      	b.n	8012916 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80127fa:	2300      	movs	r3, #0
 80127fc:	613b      	str	r3, [r7, #16]
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	695b      	ldr	r3, [r3, #20]
 8012804:	613b      	str	r3, [r7, #16]
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	699b      	ldr	r3, [r3, #24]
 801280c:	613b      	str	r3, [r7, #16]
 801280e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8012810:	e066      	b.n	80128e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012812:	697a      	ldr	r2, [r7, #20]
 8012814:	6a39      	ldr	r1, [r7, #32]
 8012816:	68f8      	ldr	r0, [r7, #12]
 8012818:	f000 fcec 	bl	80131f4 <I2C_WaitOnTXEFlagUntilTimeout>
 801281c:	4603      	mov	r3, r0
 801281e:	2b00      	cmp	r3, #0
 8012820:	d00d      	beq.n	801283e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012826:	2b04      	cmp	r3, #4
 8012828:	d107      	bne.n	801283a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	681a      	ldr	r2, [r3, #0]
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012838:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801283a:	2301      	movs	r3, #1
 801283c:	e06b      	b.n	8012916 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012842:	781a      	ldrb	r2, [r3, #0]
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801284e:	1c5a      	adds	r2, r3, #1
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012858:	b29b      	uxth	r3, r3
 801285a:	3b01      	subs	r3, #1
 801285c:	b29a      	uxth	r2, r3
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012866:	3b01      	subs	r3, #1
 8012868:	b29a      	uxth	r2, r3
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	695b      	ldr	r3, [r3, #20]
 8012874:	f003 0304 	and.w	r3, r3, #4
 8012878:	2b04      	cmp	r3, #4
 801287a:	d11b      	bne.n	80128b4 <HAL_I2C_Master_Transmit+0x188>
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012880:	2b00      	cmp	r3, #0
 8012882:	d017      	beq.n	80128b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012888:	781a      	ldrb	r2, [r3, #0]
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012894:	1c5a      	adds	r2, r3, #1
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801289e:	b29b      	uxth	r3, r3
 80128a0:	3b01      	subs	r3, #1
 80128a2:	b29a      	uxth	r2, r3
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80128ac:	3b01      	subs	r3, #1
 80128ae:	b29a      	uxth	r2, r3
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80128b4:	697a      	ldr	r2, [r7, #20]
 80128b6:	6a39      	ldr	r1, [r7, #32]
 80128b8:	68f8      	ldr	r0, [r7, #12]
 80128ba:	f000 fcdc 	bl	8013276 <I2C_WaitOnBTFFlagUntilTimeout>
 80128be:	4603      	mov	r3, r0
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d00d      	beq.n	80128e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128c8:	2b04      	cmp	r3, #4
 80128ca:	d107      	bne.n	80128dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	681a      	ldr	r2, [r3, #0]
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80128da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80128dc:	2301      	movs	r3, #1
 80128de:	e01a      	b.n	8012916 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d194      	bne.n	8012812 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	681a      	ldr	r2, [r3, #0]
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80128f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	2220      	movs	r2, #32
 80128fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	2200      	movs	r2, #0
 8012904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	2200      	movs	r2, #0
 801290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8012910:	2300      	movs	r3, #0
 8012912:	e000      	b.n	8012916 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8012914:	2302      	movs	r3, #2
  }
}
 8012916:	4618      	mov	r0, r3
 8012918:	3718      	adds	r7, #24
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	00100002 	.word	0x00100002
 8012924:	ffff0000 	.word	0xffff0000

08012928 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b08c      	sub	sp, #48	; 0x30
 801292c:	af02      	add	r7, sp, #8
 801292e:	60f8      	str	r0, [r7, #12]
 8012930:	607a      	str	r2, [r7, #4]
 8012932:	461a      	mov	r2, r3
 8012934:	460b      	mov	r3, r1
 8012936:	817b      	strh	r3, [r7, #10]
 8012938:	4613      	mov	r3, r2
 801293a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801293c:	f7ff f9be 	bl	8011cbc <HAL_GetTick>
 8012940:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012948:	b2db      	uxtb	r3, r3
 801294a:	2b20      	cmp	r3, #32
 801294c:	f040 820b 	bne.w	8012d66 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8012950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012952:	9300      	str	r3, [sp, #0]
 8012954:	2319      	movs	r3, #25
 8012956:	2201      	movs	r2, #1
 8012958:	497c      	ldr	r1, [pc, #496]	; (8012b4c <HAL_I2C_Master_Receive+0x224>)
 801295a:	68f8      	ldr	r0, [r7, #12]
 801295c:	f000 fb74 	bl	8013048 <I2C_WaitOnFlagUntilTimeout>
 8012960:	4603      	mov	r3, r0
 8012962:	2b00      	cmp	r3, #0
 8012964:	d001      	beq.n	801296a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8012966:	2302      	movs	r3, #2
 8012968:	e1fe      	b.n	8012d68 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012970:	2b01      	cmp	r3, #1
 8012972:	d101      	bne.n	8012978 <HAL_I2C_Master_Receive+0x50>
 8012974:	2302      	movs	r3, #2
 8012976:	e1f7      	b.n	8012d68 <HAL_I2C_Master_Receive+0x440>
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	2201      	movs	r2, #1
 801297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	f003 0301 	and.w	r3, r3, #1
 801298a:	2b01      	cmp	r3, #1
 801298c:	d007      	beq.n	801299e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	681a      	ldr	r2, [r3, #0]
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	f042 0201 	orr.w	r2, r2, #1
 801299c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	681a      	ldr	r2, [r3, #0]
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80129ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	2222      	movs	r2, #34	; 0x22
 80129b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	2210      	movs	r2, #16
 80129ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	2200      	movs	r2, #0
 80129c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	687a      	ldr	r2, [r7, #4]
 80129c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	893a      	ldrh	r2, [r7, #8]
 80129ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80129d4:	b29a      	uxth	r2, r3
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	4a5c      	ldr	r2, [pc, #368]	; (8012b50 <HAL_I2C_Master_Receive+0x228>)
 80129de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80129e0:	8979      	ldrh	r1, [r7, #10]
 80129e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129e6:	68f8      	ldr	r0, [r7, #12]
 80129e8:	f000 fa60 	bl	8012eac <I2C_MasterRequestRead>
 80129ec:	4603      	mov	r3, r0
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d001      	beq.n	80129f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80129f2:	2301      	movs	r3, #1
 80129f4:	e1b8      	b.n	8012d68 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d113      	bne.n	8012a26 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80129fe:	2300      	movs	r3, #0
 8012a00:	623b      	str	r3, [r7, #32]
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	695b      	ldr	r3, [r3, #20]
 8012a08:	623b      	str	r3, [r7, #32]
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	699b      	ldr	r3, [r3, #24]
 8012a10:	623b      	str	r3, [r7, #32]
 8012a12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	681a      	ldr	r2, [r3, #0]
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012a22:	601a      	str	r2, [r3, #0]
 8012a24:	e18c      	b.n	8012d40 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a2a:	2b01      	cmp	r3, #1
 8012a2c:	d11b      	bne.n	8012a66 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	681a      	ldr	r2, [r3, #0]
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012a3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012a3e:	2300      	movs	r3, #0
 8012a40:	61fb      	str	r3, [r7, #28]
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	695b      	ldr	r3, [r3, #20]
 8012a48:	61fb      	str	r3, [r7, #28]
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	699b      	ldr	r3, [r3, #24]
 8012a50:	61fb      	str	r3, [r7, #28]
 8012a52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	681a      	ldr	r2, [r3, #0]
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012a62:	601a      	str	r2, [r3, #0]
 8012a64:	e16c      	b.n	8012d40 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a6a:	2b02      	cmp	r3, #2
 8012a6c:	d11b      	bne.n	8012aa6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	681a      	ldr	r2, [r3, #0]
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012a7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	681a      	ldr	r2, [r3, #0]
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012a8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012a8e:	2300      	movs	r3, #0
 8012a90:	61bb      	str	r3, [r7, #24]
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	695b      	ldr	r3, [r3, #20]
 8012a98:	61bb      	str	r3, [r7, #24]
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	699b      	ldr	r3, [r3, #24]
 8012aa0:	61bb      	str	r3, [r7, #24]
 8012aa2:	69bb      	ldr	r3, [r7, #24]
 8012aa4:	e14c      	b.n	8012d40 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	681a      	ldr	r2, [r3, #0]
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012ab4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	617b      	str	r3, [r7, #20]
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	695b      	ldr	r3, [r3, #20]
 8012ac0:	617b      	str	r3, [r7, #20]
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	699b      	ldr	r3, [r3, #24]
 8012ac8:	617b      	str	r3, [r7, #20]
 8012aca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8012acc:	e138      	b.n	8012d40 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ad2:	2b03      	cmp	r3, #3
 8012ad4:	f200 80f1 	bhi.w	8012cba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012adc:	2b01      	cmp	r3, #1
 8012ade:	d123      	bne.n	8012b28 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ae2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012ae4:	68f8      	ldr	r0, [r7, #12]
 8012ae6:	f000 fc07 	bl	80132f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012aea:	4603      	mov	r3, r0
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d001      	beq.n	8012af4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8012af0:	2301      	movs	r3, #1
 8012af2:	e139      	b.n	8012d68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	691a      	ldr	r2, [r3, #16]
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012afe:	b2d2      	uxtb	r2, r2
 8012b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b06:	1c5a      	adds	r2, r3, #1
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b10:	3b01      	subs	r3, #1
 8012b12:	b29a      	uxth	r2, r3
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012b1c:	b29b      	uxth	r3, r3
 8012b1e:	3b01      	subs	r3, #1
 8012b20:	b29a      	uxth	r2, r3
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012b26:	e10b      	b.n	8012d40 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b2c:	2b02      	cmp	r3, #2
 8012b2e:	d14e      	bne.n	8012bce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b32:	9300      	str	r3, [sp, #0]
 8012b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b36:	2200      	movs	r2, #0
 8012b38:	4906      	ldr	r1, [pc, #24]	; (8012b54 <HAL_I2C_Master_Receive+0x22c>)
 8012b3a:	68f8      	ldr	r0, [r7, #12]
 8012b3c:	f000 fa84 	bl	8013048 <I2C_WaitOnFlagUntilTimeout>
 8012b40:	4603      	mov	r3, r0
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d008      	beq.n	8012b58 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8012b46:	2301      	movs	r3, #1
 8012b48:	e10e      	b.n	8012d68 <HAL_I2C_Master_Receive+0x440>
 8012b4a:	bf00      	nop
 8012b4c:	00100002 	.word	0x00100002
 8012b50:	ffff0000 	.word	0xffff0000
 8012b54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	681a      	ldr	r2, [r3, #0]
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012b66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	691a      	ldr	r2, [r3, #16]
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b72:	b2d2      	uxtb	r2, r2
 8012b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b7a:	1c5a      	adds	r2, r3, #1
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b84:	3b01      	subs	r3, #1
 8012b86:	b29a      	uxth	r2, r3
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012b90:	b29b      	uxth	r3, r3
 8012b92:	3b01      	subs	r3, #1
 8012b94:	b29a      	uxth	r2, r3
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	691a      	ldr	r2, [r3, #16]
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ba4:	b2d2      	uxtb	r2, r2
 8012ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bac:	1c5a      	adds	r2, r3, #1
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012bb6:	3b01      	subs	r3, #1
 8012bb8:	b29a      	uxth	r2, r3
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	3b01      	subs	r3, #1
 8012bc6:	b29a      	uxth	r2, r3
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012bcc:	e0b8      	b.n	8012d40 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd0:	9300      	str	r3, [sp, #0]
 8012bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	4966      	ldr	r1, [pc, #408]	; (8012d70 <HAL_I2C_Master_Receive+0x448>)
 8012bd8:	68f8      	ldr	r0, [r7, #12]
 8012bda:	f000 fa35 	bl	8013048 <I2C_WaitOnFlagUntilTimeout>
 8012bde:	4603      	mov	r3, r0
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d001      	beq.n	8012be8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8012be4:	2301      	movs	r3, #1
 8012be6:	e0bf      	b.n	8012d68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	681a      	ldr	r2, [r3, #0]
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012bf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	691a      	ldr	r2, [r3, #16]
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c02:	b2d2      	uxtb	r2, r2
 8012c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c0a:	1c5a      	adds	r2, r3, #1
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c14:	3b01      	subs	r3, #1
 8012c16:	b29a      	uxth	r2, r3
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012c20:	b29b      	uxth	r3, r3
 8012c22:	3b01      	subs	r3, #1
 8012c24:	b29a      	uxth	r2, r3
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2c:	9300      	str	r3, [sp, #0]
 8012c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c30:	2200      	movs	r2, #0
 8012c32:	494f      	ldr	r1, [pc, #316]	; (8012d70 <HAL_I2C_Master_Receive+0x448>)
 8012c34:	68f8      	ldr	r0, [r7, #12]
 8012c36:	f000 fa07 	bl	8013048 <I2C_WaitOnFlagUntilTimeout>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d001      	beq.n	8012c44 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8012c40:	2301      	movs	r3, #1
 8012c42:	e091      	b.n	8012d68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	681a      	ldr	r2, [r3, #0]
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012c52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	691a      	ldr	r2, [r3, #16]
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c5e:	b2d2      	uxtb	r2, r2
 8012c60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c66:	1c5a      	adds	r2, r3, #1
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c70:	3b01      	subs	r3, #1
 8012c72:	b29a      	uxth	r2, r3
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012c7c:	b29b      	uxth	r3, r3
 8012c7e:	3b01      	subs	r3, #1
 8012c80:	b29a      	uxth	r2, r3
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	691a      	ldr	r2, [r3, #16]
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c90:	b2d2      	uxtb	r2, r2
 8012c92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c98:	1c5a      	adds	r2, r3, #1
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ca2:	3b01      	subs	r3, #1
 8012ca4:	b29a      	uxth	r2, r3
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	3b01      	subs	r3, #1
 8012cb2:	b29a      	uxth	r2, r3
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012cb8:	e042      	b.n	8012d40 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012cbe:	68f8      	ldr	r0, [r7, #12]
 8012cc0:	f000 fb1a 	bl	80132f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d001      	beq.n	8012cce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8012cca:	2301      	movs	r3, #1
 8012ccc:	e04c      	b.n	8012d68 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	691a      	ldr	r2, [r3, #16]
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cd8:	b2d2      	uxtb	r2, r2
 8012cda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ce0:	1c5a      	adds	r2, r3, #1
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012cea:	3b01      	subs	r3, #1
 8012cec:	b29a      	uxth	r2, r3
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012cf6:	b29b      	uxth	r3, r3
 8012cf8:	3b01      	subs	r3, #1
 8012cfa:	b29a      	uxth	r2, r3
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	695b      	ldr	r3, [r3, #20]
 8012d06:	f003 0304 	and.w	r3, r3, #4
 8012d0a:	2b04      	cmp	r3, #4
 8012d0c:	d118      	bne.n	8012d40 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	691a      	ldr	r2, [r3, #16]
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d18:	b2d2      	uxtb	r2, r2
 8012d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d20:	1c5a      	adds	r2, r3, #1
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d2a:	3b01      	subs	r3, #1
 8012d2c:	b29a      	uxth	r2, r3
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d36:	b29b      	uxth	r3, r3
 8012d38:	3b01      	subs	r3, #1
 8012d3a:	b29a      	uxth	r2, r3
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	f47f aec2 	bne.w	8012ace <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	2220      	movs	r2, #32
 8012d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	2200      	movs	r2, #0
 8012d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8012d62:	2300      	movs	r3, #0
 8012d64:	e000      	b.n	8012d68 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8012d66:	2302      	movs	r3, #2
  }
}
 8012d68:	4618      	mov	r0, r3
 8012d6a:	3728      	adds	r7, #40	; 0x28
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bd80      	pop	{r7, pc}
 8012d70:	00010004 	.word	0x00010004

08012d74 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8012d74:	b480      	push	{r7}
 8012d76:	b083      	sub	sp, #12
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012d82:	b2db      	uxtb	r3, r3
}
 8012d84:	4618      	mov	r0, r3
 8012d86:	370c      	adds	r7, #12
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8e:	4770      	bx	lr

08012d90 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8012d90:	b480      	push	{r7}
 8012d92:	b083      	sub	sp, #12
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	370c      	adds	r7, #12
 8012da0:	46bd      	mov	sp, r7
 8012da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da6:	4770      	bx	lr

08012da8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b088      	sub	sp, #32
 8012dac:	af02      	add	r7, sp, #8
 8012dae:	60f8      	str	r0, [r7, #12]
 8012db0:	607a      	str	r2, [r7, #4]
 8012db2:	603b      	str	r3, [r7, #0]
 8012db4:	460b      	mov	r3, r1
 8012db6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8012dbe:	697b      	ldr	r3, [r7, #20]
 8012dc0:	2b08      	cmp	r3, #8
 8012dc2:	d006      	beq.n	8012dd2 <I2C_MasterRequestWrite+0x2a>
 8012dc4:	697b      	ldr	r3, [r7, #20]
 8012dc6:	2b01      	cmp	r3, #1
 8012dc8:	d003      	beq.n	8012dd2 <I2C_MasterRequestWrite+0x2a>
 8012dca:	697b      	ldr	r3, [r7, #20]
 8012dcc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012dd0:	d108      	bne.n	8012de4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	681a      	ldr	r2, [r3, #0]
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012de0:	601a      	str	r2, [r3, #0]
 8012de2:	e00b      	b.n	8012dfc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012de8:	2b12      	cmp	r3, #18
 8012dea:	d107      	bne.n	8012dfc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	681a      	ldr	r2, [r3, #0]
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012dfa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012dfc:	683b      	ldr	r3, [r7, #0]
 8012dfe:	9300      	str	r3, [sp, #0]
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	2200      	movs	r2, #0
 8012e04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012e08:	68f8      	ldr	r0, [r7, #12]
 8012e0a:	f000 f91d 	bl	8013048 <I2C_WaitOnFlagUntilTimeout>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d00d      	beq.n	8012e30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e22:	d103      	bne.n	8012e2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012e2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8012e2c:	2303      	movs	r3, #3
 8012e2e:	e035      	b.n	8012e9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	691b      	ldr	r3, [r3, #16]
 8012e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012e38:	d108      	bne.n	8012e4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8012e3a:	897b      	ldrh	r3, [r7, #10]
 8012e3c:	b2db      	uxtb	r3, r3
 8012e3e:	461a      	mov	r2, r3
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8012e48:	611a      	str	r2, [r3, #16]
 8012e4a:	e01b      	b.n	8012e84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8012e4c:	897b      	ldrh	r3, [r7, #10]
 8012e4e:	11db      	asrs	r3, r3, #7
 8012e50:	b2db      	uxtb	r3, r3
 8012e52:	f003 0306 	and.w	r3, r3, #6
 8012e56:	b2db      	uxtb	r3, r3
 8012e58:	f063 030f 	orn	r3, r3, #15
 8012e5c:	b2da      	uxtb	r2, r3
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	687a      	ldr	r2, [r7, #4]
 8012e68:	490e      	ldr	r1, [pc, #56]	; (8012ea4 <I2C_MasterRequestWrite+0xfc>)
 8012e6a:	68f8      	ldr	r0, [r7, #12]
 8012e6c:	f000 f943 	bl	80130f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012e70:	4603      	mov	r3, r0
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d001      	beq.n	8012e7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8012e76:	2301      	movs	r3, #1
 8012e78:	e010      	b.n	8012e9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8012e7a:	897b      	ldrh	r3, [r7, #10]
 8012e7c:	b2da      	uxtb	r2, r3
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	687a      	ldr	r2, [r7, #4]
 8012e88:	4907      	ldr	r1, [pc, #28]	; (8012ea8 <I2C_MasterRequestWrite+0x100>)
 8012e8a:	68f8      	ldr	r0, [r7, #12]
 8012e8c:	f000 f933 	bl	80130f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012e90:	4603      	mov	r3, r0
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d001      	beq.n	8012e9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8012e96:	2301      	movs	r3, #1
 8012e98:	e000      	b.n	8012e9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8012e9a:	2300      	movs	r3, #0
}
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	3718      	adds	r7, #24
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}
 8012ea4:	00010008 	.word	0x00010008
 8012ea8:	00010002 	.word	0x00010002

08012eac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b088      	sub	sp, #32
 8012eb0:	af02      	add	r7, sp, #8
 8012eb2:	60f8      	str	r0, [r7, #12]
 8012eb4:	607a      	str	r2, [r7, #4]
 8012eb6:	603b      	str	r3, [r7, #0]
 8012eb8:	460b      	mov	r3, r1
 8012eba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ec0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	681a      	ldr	r2, [r3, #0]
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012ed0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8012ed2:	697b      	ldr	r3, [r7, #20]
 8012ed4:	2b08      	cmp	r3, #8
 8012ed6:	d006      	beq.n	8012ee6 <I2C_MasterRequestRead+0x3a>
 8012ed8:	697b      	ldr	r3, [r7, #20]
 8012eda:	2b01      	cmp	r3, #1
 8012edc:	d003      	beq.n	8012ee6 <I2C_MasterRequestRead+0x3a>
 8012ede:	697b      	ldr	r3, [r7, #20]
 8012ee0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012ee4:	d108      	bne.n	8012ef8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	681a      	ldr	r2, [r3, #0]
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012ef4:	601a      	str	r2, [r3, #0]
 8012ef6:	e00b      	b.n	8012f10 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012efc:	2b11      	cmp	r3, #17
 8012efe:	d107      	bne.n	8012f10 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	681a      	ldr	r2, [r3, #0]
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012f0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	9300      	str	r3, [sp, #0]
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	2200      	movs	r2, #0
 8012f18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012f1c:	68f8      	ldr	r0, [r7, #12]
 8012f1e:	f000 f893 	bl	8013048 <I2C_WaitOnFlagUntilTimeout>
 8012f22:	4603      	mov	r3, r0
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d00d      	beq.n	8012f44 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f36:	d103      	bne.n	8012f40 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8012f40:	2303      	movs	r3, #3
 8012f42:	e079      	b.n	8013038 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	691b      	ldr	r3, [r3, #16]
 8012f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012f4c:	d108      	bne.n	8012f60 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8012f4e:	897b      	ldrh	r3, [r7, #10]
 8012f50:	b2db      	uxtb	r3, r3
 8012f52:	f043 0301 	orr.w	r3, r3, #1
 8012f56:	b2da      	uxtb	r2, r3
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	611a      	str	r2, [r3, #16]
 8012f5e:	e05f      	b.n	8013020 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8012f60:	897b      	ldrh	r3, [r7, #10]
 8012f62:	11db      	asrs	r3, r3, #7
 8012f64:	b2db      	uxtb	r3, r3
 8012f66:	f003 0306 	and.w	r3, r3, #6
 8012f6a:	b2db      	uxtb	r3, r3
 8012f6c:	f063 030f 	orn	r3, r3, #15
 8012f70:	b2da      	uxtb	r2, r3
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8012f78:	683b      	ldr	r3, [r7, #0]
 8012f7a:	687a      	ldr	r2, [r7, #4]
 8012f7c:	4930      	ldr	r1, [pc, #192]	; (8013040 <I2C_MasterRequestRead+0x194>)
 8012f7e:	68f8      	ldr	r0, [r7, #12]
 8012f80:	f000 f8b9 	bl	80130f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012f84:	4603      	mov	r3, r0
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d001      	beq.n	8012f8e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8012f8a:	2301      	movs	r3, #1
 8012f8c:	e054      	b.n	8013038 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8012f8e:	897b      	ldrh	r3, [r7, #10]
 8012f90:	b2da      	uxtb	r2, r3
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	687a      	ldr	r2, [r7, #4]
 8012f9c:	4929      	ldr	r1, [pc, #164]	; (8013044 <I2C_MasterRequestRead+0x198>)
 8012f9e:	68f8      	ldr	r0, [r7, #12]
 8012fa0:	f000 f8a9 	bl	80130f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d001      	beq.n	8012fae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8012faa:	2301      	movs	r3, #1
 8012fac:	e044      	b.n	8013038 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012fae:	2300      	movs	r3, #0
 8012fb0:	613b      	str	r3, [r7, #16]
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	695b      	ldr	r3, [r3, #20]
 8012fb8:	613b      	str	r3, [r7, #16]
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	699b      	ldr	r3, [r3, #24]
 8012fc0:	613b      	str	r3, [r7, #16]
 8012fc2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	681a      	ldr	r2, [r3, #0]
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012fd2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	9300      	str	r3, [sp, #0]
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	2200      	movs	r2, #0
 8012fdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012fe0:	68f8      	ldr	r0, [r7, #12]
 8012fe2:	f000 f831 	bl	8013048 <I2C_WaitOnFlagUntilTimeout>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d00d      	beq.n	8013008 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012ffa:	d103      	bne.n	8013004 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013002:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8013004:	2303      	movs	r3, #3
 8013006:	e017      	b.n	8013038 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8013008:	897b      	ldrh	r3, [r7, #10]
 801300a:	11db      	asrs	r3, r3, #7
 801300c:	b2db      	uxtb	r3, r3
 801300e:	f003 0306 	and.w	r3, r3, #6
 8013012:	b2db      	uxtb	r3, r3
 8013014:	f063 030e 	orn	r3, r3, #14
 8013018:	b2da      	uxtb	r2, r3
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	687a      	ldr	r2, [r7, #4]
 8013024:	4907      	ldr	r1, [pc, #28]	; (8013044 <I2C_MasterRequestRead+0x198>)
 8013026:	68f8      	ldr	r0, [r7, #12]
 8013028:	f000 f865 	bl	80130f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801302c:	4603      	mov	r3, r0
 801302e:	2b00      	cmp	r3, #0
 8013030:	d001      	beq.n	8013036 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8013032:	2301      	movs	r3, #1
 8013034:	e000      	b.n	8013038 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8013036:	2300      	movs	r3, #0
}
 8013038:	4618      	mov	r0, r3
 801303a:	3718      	adds	r7, #24
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}
 8013040:	00010008 	.word	0x00010008
 8013044:	00010002 	.word	0x00010002

08013048 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8013048:	b580      	push	{r7, lr}
 801304a:	b084      	sub	sp, #16
 801304c:	af00      	add	r7, sp, #0
 801304e:	60f8      	str	r0, [r7, #12]
 8013050:	60b9      	str	r1, [r7, #8]
 8013052:	603b      	str	r3, [r7, #0]
 8013054:	4613      	mov	r3, r2
 8013056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8013058:	e025      	b.n	80130a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801305a:	683b      	ldr	r3, [r7, #0]
 801305c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013060:	d021      	beq.n	80130a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013062:	f7fe fe2b 	bl	8011cbc <HAL_GetTick>
 8013066:	4602      	mov	r2, r0
 8013068:	69bb      	ldr	r3, [r7, #24]
 801306a:	1ad3      	subs	r3, r2, r3
 801306c:	683a      	ldr	r2, [r7, #0]
 801306e:	429a      	cmp	r2, r3
 8013070:	d302      	bcc.n	8013078 <I2C_WaitOnFlagUntilTimeout+0x30>
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d116      	bne.n	80130a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	2200      	movs	r2, #0
 801307c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	2220      	movs	r2, #32
 8013082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	2200      	movs	r2, #0
 801308a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013092:	f043 0220 	orr.w	r2, r3, #32
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	2200      	movs	r2, #0
 801309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80130a2:	2301      	movs	r3, #1
 80130a4:	e023      	b.n	80130ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	0c1b      	lsrs	r3, r3, #16
 80130aa:	b2db      	uxtb	r3, r3
 80130ac:	2b01      	cmp	r3, #1
 80130ae:	d10d      	bne.n	80130cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	695b      	ldr	r3, [r3, #20]
 80130b6:	43da      	mvns	r2, r3
 80130b8:	68bb      	ldr	r3, [r7, #8]
 80130ba:	4013      	ands	r3, r2
 80130bc:	b29b      	uxth	r3, r3
 80130be:	2b00      	cmp	r3, #0
 80130c0:	bf0c      	ite	eq
 80130c2:	2301      	moveq	r3, #1
 80130c4:	2300      	movne	r3, #0
 80130c6:	b2db      	uxtb	r3, r3
 80130c8:	461a      	mov	r2, r3
 80130ca:	e00c      	b.n	80130e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	699b      	ldr	r3, [r3, #24]
 80130d2:	43da      	mvns	r2, r3
 80130d4:	68bb      	ldr	r3, [r7, #8]
 80130d6:	4013      	ands	r3, r2
 80130d8:	b29b      	uxth	r3, r3
 80130da:	2b00      	cmp	r3, #0
 80130dc:	bf0c      	ite	eq
 80130de:	2301      	moveq	r3, #1
 80130e0:	2300      	movne	r3, #0
 80130e2:	b2db      	uxtb	r3, r3
 80130e4:	461a      	mov	r2, r3
 80130e6:	79fb      	ldrb	r3, [r7, #7]
 80130e8:	429a      	cmp	r2, r3
 80130ea:	d0b6      	beq.n	801305a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80130ec:	2300      	movs	r3, #0
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	3710      	adds	r7, #16
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd80      	pop	{r7, pc}

080130f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80130f6:	b580      	push	{r7, lr}
 80130f8:	b084      	sub	sp, #16
 80130fa:	af00      	add	r7, sp, #0
 80130fc:	60f8      	str	r0, [r7, #12]
 80130fe:	60b9      	str	r1, [r7, #8]
 8013100:	607a      	str	r2, [r7, #4]
 8013102:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8013104:	e051      	b.n	80131aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	695b      	ldr	r3, [r3, #20]
 801310c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013114:	d123      	bne.n	801315e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	681a      	ldr	r2, [r3, #0]
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013124:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801312e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	2200      	movs	r2, #0
 8013134:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	2220      	movs	r2, #32
 801313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	2200      	movs	r2, #0
 8013142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801314a:	f043 0204 	orr.w	r2, r3, #4
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	2200      	movs	r2, #0
 8013156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801315a:	2301      	movs	r3, #1
 801315c:	e046      	b.n	80131ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013164:	d021      	beq.n	80131aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013166:	f7fe fda9 	bl	8011cbc <HAL_GetTick>
 801316a:	4602      	mov	r2, r0
 801316c:	683b      	ldr	r3, [r7, #0]
 801316e:	1ad3      	subs	r3, r2, r3
 8013170:	687a      	ldr	r2, [r7, #4]
 8013172:	429a      	cmp	r2, r3
 8013174:	d302      	bcc.n	801317c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d116      	bne.n	80131aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	2200      	movs	r2, #0
 8013180:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	2220      	movs	r2, #32
 8013186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	2200      	movs	r2, #0
 801318e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013196:	f043 0220 	orr.w	r2, r3, #32
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	2200      	movs	r2, #0
 80131a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80131a6:	2301      	movs	r3, #1
 80131a8:	e020      	b.n	80131ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	0c1b      	lsrs	r3, r3, #16
 80131ae:	b2db      	uxtb	r3, r3
 80131b0:	2b01      	cmp	r3, #1
 80131b2:	d10c      	bne.n	80131ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	695b      	ldr	r3, [r3, #20]
 80131ba:	43da      	mvns	r2, r3
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	4013      	ands	r3, r2
 80131c0:	b29b      	uxth	r3, r3
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	bf14      	ite	ne
 80131c6:	2301      	movne	r3, #1
 80131c8:	2300      	moveq	r3, #0
 80131ca:	b2db      	uxtb	r3, r3
 80131cc:	e00b      	b.n	80131e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	699b      	ldr	r3, [r3, #24]
 80131d4:	43da      	mvns	r2, r3
 80131d6:	68bb      	ldr	r3, [r7, #8]
 80131d8:	4013      	ands	r3, r2
 80131da:	b29b      	uxth	r3, r3
 80131dc:	2b00      	cmp	r3, #0
 80131de:	bf14      	ite	ne
 80131e0:	2301      	movne	r3, #1
 80131e2:	2300      	moveq	r3, #0
 80131e4:	b2db      	uxtb	r3, r3
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d18d      	bne.n	8013106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80131ea:	2300      	movs	r3, #0
}
 80131ec:	4618      	mov	r0, r3
 80131ee:	3710      	adds	r7, #16
 80131f0:	46bd      	mov	sp, r7
 80131f2:	bd80      	pop	{r7, pc}

080131f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b084      	sub	sp, #16
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	60f8      	str	r0, [r7, #12]
 80131fc:	60b9      	str	r1, [r7, #8]
 80131fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8013200:	e02d      	b.n	801325e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8013202:	68f8      	ldr	r0, [r7, #12]
 8013204:	f000 f8ce 	bl	80133a4 <I2C_IsAcknowledgeFailed>
 8013208:	4603      	mov	r3, r0
 801320a:	2b00      	cmp	r3, #0
 801320c:	d001      	beq.n	8013212 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801320e:	2301      	movs	r3, #1
 8013210:	e02d      	b.n	801326e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013218:	d021      	beq.n	801325e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801321a:	f7fe fd4f 	bl	8011cbc <HAL_GetTick>
 801321e:	4602      	mov	r2, r0
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	1ad3      	subs	r3, r2, r3
 8013224:	68ba      	ldr	r2, [r7, #8]
 8013226:	429a      	cmp	r2, r3
 8013228:	d302      	bcc.n	8013230 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d116      	bne.n	801325e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	2200      	movs	r2, #0
 8013234:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	2220      	movs	r2, #32
 801323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	2200      	movs	r2, #0
 8013242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801324a:	f043 0220 	orr.w	r2, r3, #32
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	2200      	movs	r2, #0
 8013256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801325a:	2301      	movs	r3, #1
 801325c:	e007      	b.n	801326e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	695b      	ldr	r3, [r3, #20]
 8013264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013268:	2b80      	cmp	r3, #128	; 0x80
 801326a:	d1ca      	bne.n	8013202 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801326c:	2300      	movs	r3, #0
}
 801326e:	4618      	mov	r0, r3
 8013270:	3710      	adds	r7, #16
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}

08013276 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013276:	b580      	push	{r7, lr}
 8013278:	b084      	sub	sp, #16
 801327a:	af00      	add	r7, sp, #0
 801327c:	60f8      	str	r0, [r7, #12]
 801327e:	60b9      	str	r1, [r7, #8]
 8013280:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8013282:	e02d      	b.n	80132e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8013284:	68f8      	ldr	r0, [r7, #12]
 8013286:	f000 f88d 	bl	80133a4 <I2C_IsAcknowledgeFailed>
 801328a:	4603      	mov	r3, r0
 801328c:	2b00      	cmp	r3, #0
 801328e:	d001      	beq.n	8013294 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8013290:	2301      	movs	r3, #1
 8013292:	e02d      	b.n	80132f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	f1b3 3fff 	cmp.w	r3, #4294967295
 801329a:	d021      	beq.n	80132e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801329c:	f7fe fd0e 	bl	8011cbc <HAL_GetTick>
 80132a0:	4602      	mov	r2, r0
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	1ad3      	subs	r3, r2, r3
 80132a6:	68ba      	ldr	r2, [r7, #8]
 80132a8:	429a      	cmp	r2, r3
 80132aa:	d302      	bcc.n	80132b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d116      	bne.n	80132e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	2200      	movs	r2, #0
 80132b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	2220      	movs	r2, #32
 80132bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	2200      	movs	r2, #0
 80132c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132cc:	f043 0220 	orr.w	r2, r3, #32
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	2200      	movs	r2, #0
 80132d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80132dc:	2301      	movs	r3, #1
 80132de:	e007      	b.n	80132f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	695b      	ldr	r3, [r3, #20]
 80132e6:	f003 0304 	and.w	r3, r3, #4
 80132ea:	2b04      	cmp	r3, #4
 80132ec:	d1ca      	bne.n	8013284 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80132ee:	2300      	movs	r3, #0
}
 80132f0:	4618      	mov	r0, r3
 80132f2:	3710      	adds	r7, #16
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}

080132f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b084      	sub	sp, #16
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	60f8      	str	r0, [r7, #12]
 8013300:	60b9      	str	r1, [r7, #8]
 8013302:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8013304:	e042      	b.n	801338c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	695b      	ldr	r3, [r3, #20]
 801330c:	f003 0310 	and.w	r3, r3, #16
 8013310:	2b10      	cmp	r3, #16
 8013312:	d119      	bne.n	8013348 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	f06f 0210 	mvn.w	r2, #16
 801331c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	2200      	movs	r2, #0
 8013322:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	2220      	movs	r2, #32
 8013328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	2200      	movs	r2, #0
 8013330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	2200      	movs	r2, #0
 8013340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8013344:	2301      	movs	r3, #1
 8013346:	e029      	b.n	801339c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013348:	f7fe fcb8 	bl	8011cbc <HAL_GetTick>
 801334c:	4602      	mov	r2, r0
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	1ad3      	subs	r3, r2, r3
 8013352:	68ba      	ldr	r2, [r7, #8]
 8013354:	429a      	cmp	r2, r3
 8013356:	d302      	bcc.n	801335e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8013358:	68bb      	ldr	r3, [r7, #8]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d116      	bne.n	801338c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	2200      	movs	r2, #0
 8013362:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	2220      	movs	r2, #32
 8013368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	2200      	movs	r2, #0
 8013370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013378:	f043 0220 	orr.w	r2, r3, #32
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	2200      	movs	r2, #0
 8013384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8013388:	2301      	movs	r3, #1
 801338a:	e007      	b.n	801339c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	695b      	ldr	r3, [r3, #20]
 8013392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013396:	2b40      	cmp	r3, #64	; 0x40
 8013398:	d1b5      	bne.n	8013306 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801339a:	2300      	movs	r3, #0
}
 801339c:	4618      	mov	r0, r3
 801339e:	3710      	adds	r7, #16
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bd80      	pop	{r7, pc}

080133a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80133a4:	b480      	push	{r7}
 80133a6:	b083      	sub	sp, #12
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	695b      	ldr	r3, [r3, #20]
 80133b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80133b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80133ba:	d11b      	bne.n	80133f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80133c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	2200      	movs	r2, #0
 80133ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	2220      	movs	r2, #32
 80133d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	2200      	movs	r2, #0
 80133d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133e0:	f043 0204 	orr.w	r2, r3, #4
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	2200      	movs	r2, #0
 80133ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80133f0:	2301      	movs	r3, #1
 80133f2:	e000      	b.n	80133f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80133f4:	2300      	movs	r3, #0
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	370c      	adds	r7, #12
 80133fa:	46bd      	mov	sp, r7
 80133fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013400:	4770      	bx	lr
	...

08013404 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b086      	sub	sp, #24
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d101      	bne.n	8013416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8013412:	2301      	movs	r3, #1
 8013414:	e264      	b.n	80138e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	f003 0301 	and.w	r3, r3, #1
 801341e:	2b00      	cmp	r3, #0
 8013420:	d075      	beq.n	801350e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013422:	4ba3      	ldr	r3, [pc, #652]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013424:	689b      	ldr	r3, [r3, #8]
 8013426:	f003 030c 	and.w	r3, r3, #12
 801342a:	2b04      	cmp	r3, #4
 801342c:	d00c      	beq.n	8013448 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801342e:	4ba0      	ldr	r3, [pc, #640]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013430:	689b      	ldr	r3, [r3, #8]
 8013432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013436:	2b08      	cmp	r3, #8
 8013438:	d112      	bne.n	8013460 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801343a:	4b9d      	ldr	r3, [pc, #628]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 801343c:	685b      	ldr	r3, [r3, #4]
 801343e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013446:	d10b      	bne.n	8013460 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013448:	4b99      	ldr	r3, [pc, #612]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013450:	2b00      	cmp	r3, #0
 8013452:	d05b      	beq.n	801350c <HAL_RCC_OscConfig+0x108>
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	685b      	ldr	r3, [r3, #4]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d157      	bne.n	801350c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801345c:	2301      	movs	r3, #1
 801345e:	e23f      	b.n	80138e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	685b      	ldr	r3, [r3, #4]
 8013464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013468:	d106      	bne.n	8013478 <HAL_RCC_OscConfig+0x74>
 801346a:	4b91      	ldr	r3, [pc, #580]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	4a90      	ldr	r2, [pc, #576]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013474:	6013      	str	r3, [r2, #0]
 8013476:	e01d      	b.n	80134b4 <HAL_RCC_OscConfig+0xb0>
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	685b      	ldr	r3, [r3, #4]
 801347c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013480:	d10c      	bne.n	801349c <HAL_RCC_OscConfig+0x98>
 8013482:	4b8b      	ldr	r3, [pc, #556]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	4a8a      	ldr	r2, [pc, #552]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801348c:	6013      	str	r3, [r2, #0]
 801348e:	4b88      	ldr	r3, [pc, #544]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	4a87      	ldr	r2, [pc, #540]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013498:	6013      	str	r3, [r2, #0]
 801349a:	e00b      	b.n	80134b4 <HAL_RCC_OscConfig+0xb0>
 801349c:	4b84      	ldr	r3, [pc, #528]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	4a83      	ldr	r2, [pc, #524]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 80134a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80134a6:	6013      	str	r3, [r2, #0]
 80134a8:	4b81      	ldr	r3, [pc, #516]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	4a80      	ldr	r2, [pc, #512]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 80134ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80134b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	685b      	ldr	r3, [r3, #4]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d013      	beq.n	80134e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80134bc:	f7fe fbfe 	bl	8011cbc <HAL_GetTick>
 80134c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80134c2:	e008      	b.n	80134d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80134c4:	f7fe fbfa 	bl	8011cbc <HAL_GetTick>
 80134c8:	4602      	mov	r2, r0
 80134ca:	693b      	ldr	r3, [r7, #16]
 80134cc:	1ad3      	subs	r3, r2, r3
 80134ce:	2b64      	cmp	r3, #100	; 0x64
 80134d0:	d901      	bls.n	80134d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80134d2:	2303      	movs	r3, #3
 80134d4:	e204      	b.n	80138e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80134d6:	4b76      	ldr	r3, [pc, #472]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d0f0      	beq.n	80134c4 <HAL_RCC_OscConfig+0xc0>
 80134e2:	e014      	b.n	801350e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80134e4:	f7fe fbea 	bl	8011cbc <HAL_GetTick>
 80134e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80134ea:	e008      	b.n	80134fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80134ec:	f7fe fbe6 	bl	8011cbc <HAL_GetTick>
 80134f0:	4602      	mov	r2, r0
 80134f2:	693b      	ldr	r3, [r7, #16]
 80134f4:	1ad3      	subs	r3, r2, r3
 80134f6:	2b64      	cmp	r3, #100	; 0x64
 80134f8:	d901      	bls.n	80134fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80134fa:	2303      	movs	r3, #3
 80134fc:	e1f0      	b.n	80138e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80134fe:	4b6c      	ldr	r3, [pc, #432]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013506:	2b00      	cmp	r3, #0
 8013508:	d1f0      	bne.n	80134ec <HAL_RCC_OscConfig+0xe8>
 801350a:	e000      	b.n	801350e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801350c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	f003 0302 	and.w	r3, r3, #2
 8013516:	2b00      	cmp	r3, #0
 8013518:	d063      	beq.n	80135e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801351a:	4b65      	ldr	r3, [pc, #404]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 801351c:	689b      	ldr	r3, [r3, #8]
 801351e:	f003 030c 	and.w	r3, r3, #12
 8013522:	2b00      	cmp	r3, #0
 8013524:	d00b      	beq.n	801353e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013526:	4b62      	ldr	r3, [pc, #392]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013528:	689b      	ldr	r3, [r3, #8]
 801352a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801352e:	2b08      	cmp	r3, #8
 8013530:	d11c      	bne.n	801356c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013532:	4b5f      	ldr	r3, [pc, #380]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013534:	685b      	ldr	r3, [r3, #4]
 8013536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801353a:	2b00      	cmp	r3, #0
 801353c:	d116      	bne.n	801356c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801353e:	4b5c      	ldr	r3, [pc, #368]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	f003 0302 	and.w	r3, r3, #2
 8013546:	2b00      	cmp	r3, #0
 8013548:	d005      	beq.n	8013556 <HAL_RCC_OscConfig+0x152>
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	68db      	ldr	r3, [r3, #12]
 801354e:	2b01      	cmp	r3, #1
 8013550:	d001      	beq.n	8013556 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8013552:	2301      	movs	r3, #1
 8013554:	e1c4      	b.n	80138e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013556:	4b56      	ldr	r3, [pc, #344]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	691b      	ldr	r3, [r3, #16]
 8013562:	00db      	lsls	r3, r3, #3
 8013564:	4952      	ldr	r1, [pc, #328]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013566:	4313      	orrs	r3, r2
 8013568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801356a:	e03a      	b.n	80135e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	68db      	ldr	r3, [r3, #12]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d020      	beq.n	80135b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013574:	4b4f      	ldr	r3, [pc, #316]	; (80136b4 <HAL_RCC_OscConfig+0x2b0>)
 8013576:	2201      	movs	r2, #1
 8013578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801357a:	f7fe fb9f 	bl	8011cbc <HAL_GetTick>
 801357e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013580:	e008      	b.n	8013594 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013582:	f7fe fb9b 	bl	8011cbc <HAL_GetTick>
 8013586:	4602      	mov	r2, r0
 8013588:	693b      	ldr	r3, [r7, #16]
 801358a:	1ad3      	subs	r3, r2, r3
 801358c:	2b02      	cmp	r3, #2
 801358e:	d901      	bls.n	8013594 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8013590:	2303      	movs	r3, #3
 8013592:	e1a5      	b.n	80138e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013594:	4b46      	ldr	r3, [pc, #280]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	f003 0302 	and.w	r3, r3, #2
 801359c:	2b00      	cmp	r3, #0
 801359e:	d0f0      	beq.n	8013582 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80135a0:	4b43      	ldr	r3, [pc, #268]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	691b      	ldr	r3, [r3, #16]
 80135ac:	00db      	lsls	r3, r3, #3
 80135ae:	4940      	ldr	r1, [pc, #256]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 80135b0:	4313      	orrs	r3, r2
 80135b2:	600b      	str	r3, [r1, #0]
 80135b4:	e015      	b.n	80135e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80135b6:	4b3f      	ldr	r3, [pc, #252]	; (80136b4 <HAL_RCC_OscConfig+0x2b0>)
 80135b8:	2200      	movs	r2, #0
 80135ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80135bc:	f7fe fb7e 	bl	8011cbc <HAL_GetTick>
 80135c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80135c2:	e008      	b.n	80135d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80135c4:	f7fe fb7a 	bl	8011cbc <HAL_GetTick>
 80135c8:	4602      	mov	r2, r0
 80135ca:	693b      	ldr	r3, [r7, #16]
 80135cc:	1ad3      	subs	r3, r2, r3
 80135ce:	2b02      	cmp	r3, #2
 80135d0:	d901      	bls.n	80135d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80135d2:	2303      	movs	r3, #3
 80135d4:	e184      	b.n	80138e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80135d6:	4b36      	ldr	r3, [pc, #216]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	f003 0302 	and.w	r3, r3, #2
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d1f0      	bne.n	80135c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	f003 0308 	and.w	r3, r3, #8
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d030      	beq.n	8013650 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	695b      	ldr	r3, [r3, #20]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d016      	beq.n	8013624 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80135f6:	4b30      	ldr	r3, [pc, #192]	; (80136b8 <HAL_RCC_OscConfig+0x2b4>)
 80135f8:	2201      	movs	r2, #1
 80135fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80135fc:	f7fe fb5e 	bl	8011cbc <HAL_GetTick>
 8013600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013602:	e008      	b.n	8013616 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013604:	f7fe fb5a 	bl	8011cbc <HAL_GetTick>
 8013608:	4602      	mov	r2, r0
 801360a:	693b      	ldr	r3, [r7, #16]
 801360c:	1ad3      	subs	r3, r2, r3
 801360e:	2b02      	cmp	r3, #2
 8013610:	d901      	bls.n	8013616 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8013612:	2303      	movs	r3, #3
 8013614:	e164      	b.n	80138e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013616:	4b26      	ldr	r3, [pc, #152]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801361a:	f003 0302 	and.w	r3, r3, #2
 801361e:	2b00      	cmp	r3, #0
 8013620:	d0f0      	beq.n	8013604 <HAL_RCC_OscConfig+0x200>
 8013622:	e015      	b.n	8013650 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013624:	4b24      	ldr	r3, [pc, #144]	; (80136b8 <HAL_RCC_OscConfig+0x2b4>)
 8013626:	2200      	movs	r2, #0
 8013628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801362a:	f7fe fb47 	bl	8011cbc <HAL_GetTick>
 801362e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013630:	e008      	b.n	8013644 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013632:	f7fe fb43 	bl	8011cbc <HAL_GetTick>
 8013636:	4602      	mov	r2, r0
 8013638:	693b      	ldr	r3, [r7, #16]
 801363a:	1ad3      	subs	r3, r2, r3
 801363c:	2b02      	cmp	r3, #2
 801363e:	d901      	bls.n	8013644 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8013640:	2303      	movs	r3, #3
 8013642:	e14d      	b.n	80138e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013644:	4b1a      	ldr	r3, [pc, #104]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013648:	f003 0302 	and.w	r3, r3, #2
 801364c:	2b00      	cmp	r3, #0
 801364e:	d1f0      	bne.n	8013632 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	f003 0304 	and.w	r3, r3, #4
 8013658:	2b00      	cmp	r3, #0
 801365a:	f000 80a0 	beq.w	801379e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801365e:	2300      	movs	r3, #0
 8013660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013662:	4b13      	ldr	r3, [pc, #76]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801366a:	2b00      	cmp	r3, #0
 801366c:	d10f      	bne.n	801368e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801366e:	2300      	movs	r3, #0
 8013670:	60bb      	str	r3, [r7, #8]
 8013672:	4b0f      	ldr	r3, [pc, #60]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013676:	4a0e      	ldr	r2, [pc, #56]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801367c:	6413      	str	r3, [r2, #64]	; 0x40
 801367e:	4b0c      	ldr	r3, [pc, #48]	; (80136b0 <HAL_RCC_OscConfig+0x2ac>)
 8013680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013686:	60bb      	str	r3, [r7, #8]
 8013688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801368a:	2301      	movs	r3, #1
 801368c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801368e:	4b0b      	ldr	r3, [pc, #44]	; (80136bc <HAL_RCC_OscConfig+0x2b8>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013696:	2b00      	cmp	r3, #0
 8013698:	d121      	bne.n	80136de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801369a:	4b08      	ldr	r3, [pc, #32]	; (80136bc <HAL_RCC_OscConfig+0x2b8>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	4a07      	ldr	r2, [pc, #28]	; (80136bc <HAL_RCC_OscConfig+0x2b8>)
 80136a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80136a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80136a6:	f7fe fb09 	bl	8011cbc <HAL_GetTick>
 80136aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80136ac:	e011      	b.n	80136d2 <HAL_RCC_OscConfig+0x2ce>
 80136ae:	bf00      	nop
 80136b0:	40023800 	.word	0x40023800
 80136b4:	42470000 	.word	0x42470000
 80136b8:	42470e80 	.word	0x42470e80
 80136bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80136c0:	f7fe fafc 	bl	8011cbc <HAL_GetTick>
 80136c4:	4602      	mov	r2, r0
 80136c6:	693b      	ldr	r3, [r7, #16]
 80136c8:	1ad3      	subs	r3, r2, r3
 80136ca:	2b02      	cmp	r3, #2
 80136cc:	d901      	bls.n	80136d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80136ce:	2303      	movs	r3, #3
 80136d0:	e106      	b.n	80138e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80136d2:	4b85      	ldr	r3, [pc, #532]	; (80138e8 <HAL_RCC_OscConfig+0x4e4>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d0f0      	beq.n	80136c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	689b      	ldr	r3, [r3, #8]
 80136e2:	2b01      	cmp	r3, #1
 80136e4:	d106      	bne.n	80136f4 <HAL_RCC_OscConfig+0x2f0>
 80136e6:	4b81      	ldr	r3, [pc, #516]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 80136e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136ea:	4a80      	ldr	r2, [pc, #512]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 80136ec:	f043 0301 	orr.w	r3, r3, #1
 80136f0:	6713      	str	r3, [r2, #112]	; 0x70
 80136f2:	e01c      	b.n	801372e <HAL_RCC_OscConfig+0x32a>
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	689b      	ldr	r3, [r3, #8]
 80136f8:	2b05      	cmp	r3, #5
 80136fa:	d10c      	bne.n	8013716 <HAL_RCC_OscConfig+0x312>
 80136fc:	4b7b      	ldr	r3, [pc, #492]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 80136fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013700:	4a7a      	ldr	r2, [pc, #488]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 8013702:	f043 0304 	orr.w	r3, r3, #4
 8013706:	6713      	str	r3, [r2, #112]	; 0x70
 8013708:	4b78      	ldr	r3, [pc, #480]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 801370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801370c:	4a77      	ldr	r2, [pc, #476]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 801370e:	f043 0301 	orr.w	r3, r3, #1
 8013712:	6713      	str	r3, [r2, #112]	; 0x70
 8013714:	e00b      	b.n	801372e <HAL_RCC_OscConfig+0x32a>
 8013716:	4b75      	ldr	r3, [pc, #468]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 8013718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801371a:	4a74      	ldr	r2, [pc, #464]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 801371c:	f023 0301 	bic.w	r3, r3, #1
 8013720:	6713      	str	r3, [r2, #112]	; 0x70
 8013722:	4b72      	ldr	r3, [pc, #456]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 8013724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013726:	4a71      	ldr	r2, [pc, #452]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 8013728:	f023 0304 	bic.w	r3, r3, #4
 801372c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	689b      	ldr	r3, [r3, #8]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d015      	beq.n	8013762 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013736:	f7fe fac1 	bl	8011cbc <HAL_GetTick>
 801373a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801373c:	e00a      	b.n	8013754 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801373e:	f7fe fabd 	bl	8011cbc <HAL_GetTick>
 8013742:	4602      	mov	r2, r0
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	1ad3      	subs	r3, r2, r3
 8013748:	f241 3288 	movw	r2, #5000	; 0x1388
 801374c:	4293      	cmp	r3, r2
 801374e:	d901      	bls.n	8013754 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8013750:	2303      	movs	r3, #3
 8013752:	e0c5      	b.n	80138e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013754:	4b65      	ldr	r3, [pc, #404]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 8013756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013758:	f003 0302 	and.w	r3, r3, #2
 801375c:	2b00      	cmp	r3, #0
 801375e:	d0ee      	beq.n	801373e <HAL_RCC_OscConfig+0x33a>
 8013760:	e014      	b.n	801378c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013762:	f7fe faab 	bl	8011cbc <HAL_GetTick>
 8013766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013768:	e00a      	b.n	8013780 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801376a:	f7fe faa7 	bl	8011cbc <HAL_GetTick>
 801376e:	4602      	mov	r2, r0
 8013770:	693b      	ldr	r3, [r7, #16]
 8013772:	1ad3      	subs	r3, r2, r3
 8013774:	f241 3288 	movw	r2, #5000	; 0x1388
 8013778:	4293      	cmp	r3, r2
 801377a:	d901      	bls.n	8013780 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 801377c:	2303      	movs	r3, #3
 801377e:	e0af      	b.n	80138e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013780:	4b5a      	ldr	r3, [pc, #360]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 8013782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013784:	f003 0302 	and.w	r3, r3, #2
 8013788:	2b00      	cmp	r3, #0
 801378a:	d1ee      	bne.n	801376a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801378c:	7dfb      	ldrb	r3, [r7, #23]
 801378e:	2b01      	cmp	r3, #1
 8013790:	d105      	bne.n	801379e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013792:	4b56      	ldr	r3, [pc, #344]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 8013794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013796:	4a55      	ldr	r2, [pc, #340]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 8013798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801379c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	699b      	ldr	r3, [r3, #24]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	f000 809b 	beq.w	80138de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80137a8:	4b50      	ldr	r3, [pc, #320]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 80137aa:	689b      	ldr	r3, [r3, #8]
 80137ac:	f003 030c 	and.w	r3, r3, #12
 80137b0:	2b08      	cmp	r3, #8
 80137b2:	d05c      	beq.n	801386e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	699b      	ldr	r3, [r3, #24]
 80137b8:	2b02      	cmp	r3, #2
 80137ba:	d141      	bne.n	8013840 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80137bc:	4b4c      	ldr	r3, [pc, #304]	; (80138f0 <HAL_RCC_OscConfig+0x4ec>)
 80137be:	2200      	movs	r2, #0
 80137c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80137c2:	f7fe fa7b 	bl	8011cbc <HAL_GetTick>
 80137c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80137c8:	e008      	b.n	80137dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80137ca:	f7fe fa77 	bl	8011cbc <HAL_GetTick>
 80137ce:	4602      	mov	r2, r0
 80137d0:	693b      	ldr	r3, [r7, #16]
 80137d2:	1ad3      	subs	r3, r2, r3
 80137d4:	2b02      	cmp	r3, #2
 80137d6:	d901      	bls.n	80137dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80137d8:	2303      	movs	r3, #3
 80137da:	e081      	b.n	80138e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80137dc:	4b43      	ldr	r3, [pc, #268]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d1f0      	bne.n	80137ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	69da      	ldr	r2, [r3, #28]
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6a1b      	ldr	r3, [r3, #32]
 80137f0:	431a      	orrs	r2, r3
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137f6:	019b      	lsls	r3, r3, #6
 80137f8:	431a      	orrs	r2, r3
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137fe:	085b      	lsrs	r3, r3, #1
 8013800:	3b01      	subs	r3, #1
 8013802:	041b      	lsls	r3, r3, #16
 8013804:	431a      	orrs	r2, r3
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801380a:	061b      	lsls	r3, r3, #24
 801380c:	4937      	ldr	r1, [pc, #220]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 801380e:	4313      	orrs	r3, r2
 8013810:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013812:	4b37      	ldr	r3, [pc, #220]	; (80138f0 <HAL_RCC_OscConfig+0x4ec>)
 8013814:	2201      	movs	r2, #1
 8013816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013818:	f7fe fa50 	bl	8011cbc <HAL_GetTick>
 801381c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801381e:	e008      	b.n	8013832 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013820:	f7fe fa4c 	bl	8011cbc <HAL_GetTick>
 8013824:	4602      	mov	r2, r0
 8013826:	693b      	ldr	r3, [r7, #16]
 8013828:	1ad3      	subs	r3, r2, r3
 801382a:	2b02      	cmp	r3, #2
 801382c:	d901      	bls.n	8013832 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801382e:	2303      	movs	r3, #3
 8013830:	e056      	b.n	80138e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013832:	4b2e      	ldr	r3, [pc, #184]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801383a:	2b00      	cmp	r3, #0
 801383c:	d0f0      	beq.n	8013820 <HAL_RCC_OscConfig+0x41c>
 801383e:	e04e      	b.n	80138de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013840:	4b2b      	ldr	r3, [pc, #172]	; (80138f0 <HAL_RCC_OscConfig+0x4ec>)
 8013842:	2200      	movs	r2, #0
 8013844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013846:	f7fe fa39 	bl	8011cbc <HAL_GetTick>
 801384a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801384c:	e008      	b.n	8013860 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801384e:	f7fe fa35 	bl	8011cbc <HAL_GetTick>
 8013852:	4602      	mov	r2, r0
 8013854:	693b      	ldr	r3, [r7, #16]
 8013856:	1ad3      	subs	r3, r2, r3
 8013858:	2b02      	cmp	r3, #2
 801385a:	d901      	bls.n	8013860 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 801385c:	2303      	movs	r3, #3
 801385e:	e03f      	b.n	80138e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013860:	4b22      	ldr	r3, [pc, #136]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013868:	2b00      	cmp	r3, #0
 801386a:	d1f0      	bne.n	801384e <HAL_RCC_OscConfig+0x44a>
 801386c:	e037      	b.n	80138de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	699b      	ldr	r3, [r3, #24]
 8013872:	2b01      	cmp	r3, #1
 8013874:	d101      	bne.n	801387a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8013876:	2301      	movs	r3, #1
 8013878:	e032      	b.n	80138e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801387a:	4b1c      	ldr	r3, [pc, #112]	; (80138ec <HAL_RCC_OscConfig+0x4e8>)
 801387c:	685b      	ldr	r3, [r3, #4]
 801387e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	699b      	ldr	r3, [r3, #24]
 8013884:	2b01      	cmp	r3, #1
 8013886:	d028      	beq.n	80138da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013892:	429a      	cmp	r2, r3
 8013894:	d121      	bne.n	80138da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80138a0:	429a      	cmp	r2, r3
 80138a2:	d11a      	bne.n	80138da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80138a4:	68fa      	ldr	r2, [r7, #12]
 80138a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80138aa:	4013      	ands	r3, r2
 80138ac:	687a      	ldr	r2, [r7, #4]
 80138ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80138b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80138b2:	4293      	cmp	r3, r2
 80138b4:	d111      	bne.n	80138da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138c0:	085b      	lsrs	r3, r3, #1
 80138c2:	3b01      	subs	r3, #1
 80138c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80138c6:	429a      	cmp	r2, r3
 80138c8:	d107      	bne.n	80138da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80138d6:	429a      	cmp	r2, r3
 80138d8:	d001      	beq.n	80138de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80138da:	2301      	movs	r3, #1
 80138dc:	e000      	b.n	80138e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80138de:	2300      	movs	r3, #0
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	3718      	adds	r7, #24
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}
 80138e8:	40007000 	.word	0x40007000
 80138ec:	40023800 	.word	0x40023800
 80138f0:	42470060 	.word	0x42470060

080138f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b084      	sub	sp, #16
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
 80138fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d101      	bne.n	8013908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013904:	2301      	movs	r3, #1
 8013906:	e0cc      	b.n	8013aa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013908:	4b68      	ldr	r3, [pc, #416]	; (8013aac <HAL_RCC_ClockConfig+0x1b8>)
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	f003 0307 	and.w	r3, r3, #7
 8013910:	683a      	ldr	r2, [r7, #0]
 8013912:	429a      	cmp	r2, r3
 8013914:	d90c      	bls.n	8013930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013916:	4b65      	ldr	r3, [pc, #404]	; (8013aac <HAL_RCC_ClockConfig+0x1b8>)
 8013918:	683a      	ldr	r2, [r7, #0]
 801391a:	b2d2      	uxtb	r2, r2
 801391c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801391e:	4b63      	ldr	r3, [pc, #396]	; (8013aac <HAL_RCC_ClockConfig+0x1b8>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	f003 0307 	and.w	r3, r3, #7
 8013926:	683a      	ldr	r2, [r7, #0]
 8013928:	429a      	cmp	r2, r3
 801392a:	d001      	beq.n	8013930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801392c:	2301      	movs	r3, #1
 801392e:	e0b8      	b.n	8013aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	f003 0302 	and.w	r3, r3, #2
 8013938:	2b00      	cmp	r3, #0
 801393a:	d020      	beq.n	801397e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	f003 0304 	and.w	r3, r3, #4
 8013944:	2b00      	cmp	r3, #0
 8013946:	d005      	beq.n	8013954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013948:	4b59      	ldr	r3, [pc, #356]	; (8013ab0 <HAL_RCC_ClockConfig+0x1bc>)
 801394a:	689b      	ldr	r3, [r3, #8]
 801394c:	4a58      	ldr	r2, [pc, #352]	; (8013ab0 <HAL_RCC_ClockConfig+0x1bc>)
 801394e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8013952:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	f003 0308 	and.w	r3, r3, #8
 801395c:	2b00      	cmp	r3, #0
 801395e:	d005      	beq.n	801396c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8013960:	4b53      	ldr	r3, [pc, #332]	; (8013ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8013962:	689b      	ldr	r3, [r3, #8]
 8013964:	4a52      	ldr	r2, [pc, #328]	; (8013ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8013966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801396a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801396c:	4b50      	ldr	r3, [pc, #320]	; (8013ab0 <HAL_RCC_ClockConfig+0x1bc>)
 801396e:	689b      	ldr	r3, [r3, #8]
 8013970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	689b      	ldr	r3, [r3, #8]
 8013978:	494d      	ldr	r1, [pc, #308]	; (8013ab0 <HAL_RCC_ClockConfig+0x1bc>)
 801397a:	4313      	orrs	r3, r2
 801397c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	f003 0301 	and.w	r3, r3, #1
 8013986:	2b00      	cmp	r3, #0
 8013988:	d044      	beq.n	8013a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	685b      	ldr	r3, [r3, #4]
 801398e:	2b01      	cmp	r3, #1
 8013990:	d107      	bne.n	80139a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013992:	4b47      	ldr	r3, [pc, #284]	; (8013ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801399a:	2b00      	cmp	r3, #0
 801399c:	d119      	bne.n	80139d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801399e:	2301      	movs	r3, #1
 80139a0:	e07f      	b.n	8013aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	685b      	ldr	r3, [r3, #4]
 80139a6:	2b02      	cmp	r3, #2
 80139a8:	d003      	beq.n	80139b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80139ae:	2b03      	cmp	r3, #3
 80139b0:	d107      	bne.n	80139c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80139b2:	4b3f      	ldr	r3, [pc, #252]	; (8013ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d109      	bne.n	80139d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80139be:	2301      	movs	r3, #1
 80139c0:	e06f      	b.n	8013aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80139c2:	4b3b      	ldr	r3, [pc, #236]	; (8013ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	f003 0302 	and.w	r3, r3, #2
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d101      	bne.n	80139d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80139ce:	2301      	movs	r3, #1
 80139d0:	e067      	b.n	8013aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80139d2:	4b37      	ldr	r3, [pc, #220]	; (8013ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80139d4:	689b      	ldr	r3, [r3, #8]
 80139d6:	f023 0203 	bic.w	r2, r3, #3
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	685b      	ldr	r3, [r3, #4]
 80139de:	4934      	ldr	r1, [pc, #208]	; (8013ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80139e0:	4313      	orrs	r3, r2
 80139e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80139e4:	f7fe f96a 	bl	8011cbc <HAL_GetTick>
 80139e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80139ea:	e00a      	b.n	8013a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80139ec:	f7fe f966 	bl	8011cbc <HAL_GetTick>
 80139f0:	4602      	mov	r2, r0
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	1ad3      	subs	r3, r2, r3
 80139f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80139fa:	4293      	cmp	r3, r2
 80139fc:	d901      	bls.n	8013a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80139fe:	2303      	movs	r3, #3
 8013a00:	e04f      	b.n	8013aa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013a02:	4b2b      	ldr	r3, [pc, #172]	; (8013ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8013a04:	689b      	ldr	r3, [r3, #8]
 8013a06:	f003 020c 	and.w	r2, r3, #12
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	685b      	ldr	r3, [r3, #4]
 8013a0e:	009b      	lsls	r3, r3, #2
 8013a10:	429a      	cmp	r2, r3
 8013a12:	d1eb      	bne.n	80139ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013a14:	4b25      	ldr	r3, [pc, #148]	; (8013aac <HAL_RCC_ClockConfig+0x1b8>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	f003 0307 	and.w	r3, r3, #7
 8013a1c:	683a      	ldr	r2, [r7, #0]
 8013a1e:	429a      	cmp	r2, r3
 8013a20:	d20c      	bcs.n	8013a3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013a22:	4b22      	ldr	r3, [pc, #136]	; (8013aac <HAL_RCC_ClockConfig+0x1b8>)
 8013a24:	683a      	ldr	r2, [r7, #0]
 8013a26:	b2d2      	uxtb	r2, r2
 8013a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013a2a:	4b20      	ldr	r3, [pc, #128]	; (8013aac <HAL_RCC_ClockConfig+0x1b8>)
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	f003 0307 	and.w	r3, r3, #7
 8013a32:	683a      	ldr	r2, [r7, #0]
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d001      	beq.n	8013a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013a38:	2301      	movs	r3, #1
 8013a3a:	e032      	b.n	8013aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	f003 0304 	and.w	r3, r3, #4
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d008      	beq.n	8013a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013a48:	4b19      	ldr	r3, [pc, #100]	; (8013ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8013a4a:	689b      	ldr	r3, [r3, #8]
 8013a4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	68db      	ldr	r3, [r3, #12]
 8013a54:	4916      	ldr	r1, [pc, #88]	; (8013ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8013a56:	4313      	orrs	r3, r2
 8013a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	f003 0308 	and.w	r3, r3, #8
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d009      	beq.n	8013a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013a66:	4b12      	ldr	r3, [pc, #72]	; (8013ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8013a68:	689b      	ldr	r3, [r3, #8]
 8013a6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	691b      	ldr	r3, [r3, #16]
 8013a72:	00db      	lsls	r3, r3, #3
 8013a74:	490e      	ldr	r1, [pc, #56]	; (8013ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8013a76:	4313      	orrs	r3, r2
 8013a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013a7a:	f000 f821 	bl	8013ac0 <HAL_RCC_GetSysClockFreq>
 8013a7e:	4602      	mov	r2, r0
 8013a80:	4b0b      	ldr	r3, [pc, #44]	; (8013ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8013a82:	689b      	ldr	r3, [r3, #8]
 8013a84:	091b      	lsrs	r3, r3, #4
 8013a86:	f003 030f 	and.w	r3, r3, #15
 8013a8a:	490a      	ldr	r1, [pc, #40]	; (8013ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8013a8c:	5ccb      	ldrb	r3, [r1, r3]
 8013a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8013a92:	4a09      	ldr	r2, [pc, #36]	; (8013ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8013a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8013a96:	4b09      	ldr	r3, [pc, #36]	; (8013abc <HAL_RCC_ClockConfig+0x1c8>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f7fe f8ca 	bl	8011c34 <HAL_InitTick>

  return HAL_OK;
 8013aa0:	2300      	movs	r3, #0
}
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	3710      	adds	r7, #16
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	bd80      	pop	{r7, pc}
 8013aaa:	bf00      	nop
 8013aac:	40023c00 	.word	0x40023c00
 8013ab0:	40023800 	.word	0x40023800
 8013ab4:	0801552c 	.word	0x0801552c
 8013ab8:	20000010 	.word	0x20000010
 8013abc:	20000078 	.word	0x20000078

08013ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013ac0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8013ac4:	b084      	sub	sp, #16
 8013ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013ac8:	2300      	movs	r3, #0
 8013aca:	607b      	str	r3, [r7, #4]
 8013acc:	2300      	movs	r3, #0
 8013ace:	60fb      	str	r3, [r7, #12]
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013ad8:	4b67      	ldr	r3, [pc, #412]	; (8013c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013ada:	689b      	ldr	r3, [r3, #8]
 8013adc:	f003 030c 	and.w	r3, r3, #12
 8013ae0:	2b08      	cmp	r3, #8
 8013ae2:	d00d      	beq.n	8013b00 <HAL_RCC_GetSysClockFreq+0x40>
 8013ae4:	2b08      	cmp	r3, #8
 8013ae6:	f200 80bd 	bhi.w	8013c64 <HAL_RCC_GetSysClockFreq+0x1a4>
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d002      	beq.n	8013af4 <HAL_RCC_GetSysClockFreq+0x34>
 8013aee:	2b04      	cmp	r3, #4
 8013af0:	d003      	beq.n	8013afa <HAL_RCC_GetSysClockFreq+0x3a>
 8013af2:	e0b7      	b.n	8013c64 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013af4:	4b61      	ldr	r3, [pc, #388]	; (8013c7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8013af6:	60bb      	str	r3, [r7, #8]
       break;
 8013af8:	e0b7      	b.n	8013c6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013afa:	4b61      	ldr	r3, [pc, #388]	; (8013c80 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8013afc:	60bb      	str	r3, [r7, #8]
      break;
 8013afe:	e0b4      	b.n	8013c6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013b00:	4b5d      	ldr	r3, [pc, #372]	; (8013c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013b02:	685b      	ldr	r3, [r3, #4]
 8013b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013b08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013b0a:	4b5b      	ldr	r3, [pc, #364]	; (8013c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013b0c:	685b      	ldr	r3, [r3, #4]
 8013b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d04d      	beq.n	8013bb2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013b16:	4b58      	ldr	r3, [pc, #352]	; (8013c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013b18:	685b      	ldr	r3, [r3, #4]
 8013b1a:	099b      	lsrs	r3, r3, #6
 8013b1c:	461a      	mov	r2, r3
 8013b1e:	f04f 0300 	mov.w	r3, #0
 8013b22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013b26:	f04f 0100 	mov.w	r1, #0
 8013b2a:	ea02 0800 	and.w	r8, r2, r0
 8013b2e:	ea03 0901 	and.w	r9, r3, r1
 8013b32:	4640      	mov	r0, r8
 8013b34:	4649      	mov	r1, r9
 8013b36:	f04f 0200 	mov.w	r2, #0
 8013b3a:	f04f 0300 	mov.w	r3, #0
 8013b3e:	014b      	lsls	r3, r1, #5
 8013b40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8013b44:	0142      	lsls	r2, r0, #5
 8013b46:	4610      	mov	r0, r2
 8013b48:	4619      	mov	r1, r3
 8013b4a:	ebb0 0008 	subs.w	r0, r0, r8
 8013b4e:	eb61 0109 	sbc.w	r1, r1, r9
 8013b52:	f04f 0200 	mov.w	r2, #0
 8013b56:	f04f 0300 	mov.w	r3, #0
 8013b5a:	018b      	lsls	r3, r1, #6
 8013b5c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8013b60:	0182      	lsls	r2, r0, #6
 8013b62:	1a12      	subs	r2, r2, r0
 8013b64:	eb63 0301 	sbc.w	r3, r3, r1
 8013b68:	f04f 0000 	mov.w	r0, #0
 8013b6c:	f04f 0100 	mov.w	r1, #0
 8013b70:	00d9      	lsls	r1, r3, #3
 8013b72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013b76:	00d0      	lsls	r0, r2, #3
 8013b78:	4602      	mov	r2, r0
 8013b7a:	460b      	mov	r3, r1
 8013b7c:	eb12 0208 	adds.w	r2, r2, r8
 8013b80:	eb43 0309 	adc.w	r3, r3, r9
 8013b84:	f04f 0000 	mov.w	r0, #0
 8013b88:	f04f 0100 	mov.w	r1, #0
 8013b8c:	0259      	lsls	r1, r3, #9
 8013b8e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8013b92:	0250      	lsls	r0, r2, #9
 8013b94:	4602      	mov	r2, r0
 8013b96:	460b      	mov	r3, r1
 8013b98:	4610      	mov	r0, r2
 8013b9a:	4619      	mov	r1, r3
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	461a      	mov	r2, r3
 8013ba0:	f04f 0300 	mov.w	r3, #0
 8013ba4:	f7ec fbbc 	bl	8000320 <__aeabi_uldivmod>
 8013ba8:	4602      	mov	r2, r0
 8013baa:	460b      	mov	r3, r1
 8013bac:	4613      	mov	r3, r2
 8013bae:	60fb      	str	r3, [r7, #12]
 8013bb0:	e04a      	b.n	8013c48 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013bb2:	4b31      	ldr	r3, [pc, #196]	; (8013c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013bb4:	685b      	ldr	r3, [r3, #4]
 8013bb6:	099b      	lsrs	r3, r3, #6
 8013bb8:	461a      	mov	r2, r3
 8013bba:	f04f 0300 	mov.w	r3, #0
 8013bbe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013bc2:	f04f 0100 	mov.w	r1, #0
 8013bc6:	ea02 0400 	and.w	r4, r2, r0
 8013bca:	ea03 0501 	and.w	r5, r3, r1
 8013bce:	4620      	mov	r0, r4
 8013bd0:	4629      	mov	r1, r5
 8013bd2:	f04f 0200 	mov.w	r2, #0
 8013bd6:	f04f 0300 	mov.w	r3, #0
 8013bda:	014b      	lsls	r3, r1, #5
 8013bdc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8013be0:	0142      	lsls	r2, r0, #5
 8013be2:	4610      	mov	r0, r2
 8013be4:	4619      	mov	r1, r3
 8013be6:	1b00      	subs	r0, r0, r4
 8013be8:	eb61 0105 	sbc.w	r1, r1, r5
 8013bec:	f04f 0200 	mov.w	r2, #0
 8013bf0:	f04f 0300 	mov.w	r3, #0
 8013bf4:	018b      	lsls	r3, r1, #6
 8013bf6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8013bfa:	0182      	lsls	r2, r0, #6
 8013bfc:	1a12      	subs	r2, r2, r0
 8013bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8013c02:	f04f 0000 	mov.w	r0, #0
 8013c06:	f04f 0100 	mov.w	r1, #0
 8013c0a:	00d9      	lsls	r1, r3, #3
 8013c0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013c10:	00d0      	lsls	r0, r2, #3
 8013c12:	4602      	mov	r2, r0
 8013c14:	460b      	mov	r3, r1
 8013c16:	1912      	adds	r2, r2, r4
 8013c18:	eb45 0303 	adc.w	r3, r5, r3
 8013c1c:	f04f 0000 	mov.w	r0, #0
 8013c20:	f04f 0100 	mov.w	r1, #0
 8013c24:	0299      	lsls	r1, r3, #10
 8013c26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8013c2a:	0290      	lsls	r0, r2, #10
 8013c2c:	4602      	mov	r2, r0
 8013c2e:	460b      	mov	r3, r1
 8013c30:	4610      	mov	r0, r2
 8013c32:	4619      	mov	r1, r3
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	461a      	mov	r2, r3
 8013c38:	f04f 0300 	mov.w	r3, #0
 8013c3c:	f7ec fb70 	bl	8000320 <__aeabi_uldivmod>
 8013c40:	4602      	mov	r2, r0
 8013c42:	460b      	mov	r3, r1
 8013c44:	4613      	mov	r3, r2
 8013c46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013c48:	4b0b      	ldr	r3, [pc, #44]	; (8013c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013c4a:	685b      	ldr	r3, [r3, #4]
 8013c4c:	0c1b      	lsrs	r3, r3, #16
 8013c4e:	f003 0303 	and.w	r3, r3, #3
 8013c52:	3301      	adds	r3, #1
 8013c54:	005b      	lsls	r3, r3, #1
 8013c56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8013c58:	68fa      	ldr	r2, [r7, #12]
 8013c5a:	683b      	ldr	r3, [r7, #0]
 8013c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013c60:	60bb      	str	r3, [r7, #8]
      break;
 8013c62:	e002      	b.n	8013c6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013c64:	4b05      	ldr	r3, [pc, #20]	; (8013c7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8013c66:	60bb      	str	r3, [r7, #8]
      break;
 8013c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013c6a:	68bb      	ldr	r3, [r7, #8]
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3710      	adds	r7, #16
 8013c70:	46bd      	mov	sp, r7
 8013c72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8013c76:	bf00      	nop
 8013c78:	40023800 	.word	0x40023800
 8013c7c:	00f42400 	.word	0x00f42400
 8013c80:	007a1200 	.word	0x007a1200

08013c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013c84:	b480      	push	{r7}
 8013c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013c88:	4b03      	ldr	r3, [pc, #12]	; (8013c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8013c8a:	681b      	ldr	r3, [r3, #0]
}
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c94:	4770      	bx	lr
 8013c96:	bf00      	nop
 8013c98:	20000010 	.word	0x20000010

08013c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013ca0:	f7ff fff0 	bl	8013c84 <HAL_RCC_GetHCLKFreq>
 8013ca4:	4602      	mov	r2, r0
 8013ca6:	4b05      	ldr	r3, [pc, #20]	; (8013cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8013ca8:	689b      	ldr	r3, [r3, #8]
 8013caa:	0a9b      	lsrs	r3, r3, #10
 8013cac:	f003 0307 	and.w	r3, r3, #7
 8013cb0:	4903      	ldr	r1, [pc, #12]	; (8013cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013cb2:	5ccb      	ldrb	r3, [r1, r3]
 8013cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013cb8:	4618      	mov	r0, r3
 8013cba:	bd80      	pop	{r7, pc}
 8013cbc:	40023800 	.word	0x40023800
 8013cc0:	0801553c 	.word	0x0801553c

08013cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8013cc8:	f7ff ffdc 	bl	8013c84 <HAL_RCC_GetHCLKFreq>
 8013ccc:	4602      	mov	r2, r0
 8013cce:	4b05      	ldr	r3, [pc, #20]	; (8013ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8013cd0:	689b      	ldr	r3, [r3, #8]
 8013cd2:	0b5b      	lsrs	r3, r3, #13
 8013cd4:	f003 0307 	and.w	r3, r3, #7
 8013cd8:	4903      	ldr	r1, [pc, #12]	; (8013ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013cda:	5ccb      	ldrb	r3, [r1, r3]
 8013cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	bd80      	pop	{r7, pc}
 8013ce4:	40023800 	.word	0x40023800
 8013ce8:	0801553c 	.word	0x0801553c

08013cec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b082      	sub	sp, #8
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d101      	bne.n	8013cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	e03f      	b.n	8013d7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013d04:	b2db      	uxtb	r3, r3
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d106      	bne.n	8013d18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	f7ed f86c 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	2224      	movs	r2, #36	; 0x24
 8013d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	68da      	ldr	r2, [r3, #12]
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013d2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	f000 f929 	bl	8013f88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	691a      	ldr	r2, [r3, #16]
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013d44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	695a      	ldr	r2, [r3, #20]
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013d54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	68da      	ldr	r2, [r3, #12]
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013d64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	2200      	movs	r2, #0
 8013d6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2220      	movs	r2, #32
 8013d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2220      	movs	r2, #32
 8013d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8013d7c:	2300      	movs	r3, #0
}
 8013d7e:	4618      	mov	r0, r3
 8013d80:	3708      	adds	r7, #8
 8013d82:	46bd      	mov	sp, r7
 8013d84:	bd80      	pop	{r7, pc}

08013d86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013d86:	b580      	push	{r7, lr}
 8013d88:	b08a      	sub	sp, #40	; 0x28
 8013d8a:	af02      	add	r7, sp, #8
 8013d8c:	60f8      	str	r0, [r7, #12]
 8013d8e:	60b9      	str	r1, [r7, #8]
 8013d90:	603b      	str	r3, [r7, #0]
 8013d92:	4613      	mov	r3, r2
 8013d94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8013d96:	2300      	movs	r3, #0
 8013d98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013da0:	b2db      	uxtb	r3, r3
 8013da2:	2b20      	cmp	r3, #32
 8013da4:	d17c      	bne.n	8013ea0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d002      	beq.n	8013db2 <HAL_UART_Transmit+0x2c>
 8013dac:	88fb      	ldrh	r3, [r7, #6]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d101      	bne.n	8013db6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8013db2:	2301      	movs	r3, #1
 8013db4:	e075      	b.n	8013ea2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013dbc:	2b01      	cmp	r3, #1
 8013dbe:	d101      	bne.n	8013dc4 <HAL_UART_Transmit+0x3e>
 8013dc0:	2302      	movs	r3, #2
 8013dc2:	e06e      	b.n	8013ea2 <HAL_UART_Transmit+0x11c>
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	2201      	movs	r2, #1
 8013dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	2200      	movs	r2, #0
 8013dd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	2221      	movs	r2, #33	; 0x21
 8013dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013dda:	f7fd ff6f 	bl	8011cbc <HAL_GetTick>
 8013dde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	88fa      	ldrh	r2, [r7, #6]
 8013de4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	88fa      	ldrh	r2, [r7, #6]
 8013dea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	689b      	ldr	r3, [r3, #8]
 8013df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013df4:	d108      	bne.n	8013e08 <HAL_UART_Transmit+0x82>
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	691b      	ldr	r3, [r3, #16]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d104      	bne.n	8013e08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8013dfe:	2300      	movs	r3, #0
 8013e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	61bb      	str	r3, [r7, #24]
 8013e06:	e003      	b.n	8013e10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	2200      	movs	r2, #0
 8013e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8013e18:	e02a      	b.n	8013e70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	9300      	str	r3, [sp, #0]
 8013e1e:	697b      	ldr	r3, [r7, #20]
 8013e20:	2200      	movs	r2, #0
 8013e22:	2180      	movs	r1, #128	; 0x80
 8013e24:	68f8      	ldr	r0, [r7, #12]
 8013e26:	f000 f840 	bl	8013eaa <UART_WaitOnFlagUntilTimeout>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d001      	beq.n	8013e34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8013e30:	2303      	movs	r3, #3
 8013e32:	e036      	b.n	8013ea2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8013e34:	69fb      	ldr	r3, [r7, #28]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d10b      	bne.n	8013e52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013e3a:	69bb      	ldr	r3, [r7, #24]
 8013e3c:	881b      	ldrh	r3, [r3, #0]
 8013e3e:	461a      	mov	r2, r3
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013e48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8013e4a:	69bb      	ldr	r3, [r7, #24]
 8013e4c:	3302      	adds	r3, #2
 8013e4e:	61bb      	str	r3, [r7, #24]
 8013e50:	e007      	b.n	8013e62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8013e52:	69fb      	ldr	r3, [r7, #28]
 8013e54:	781a      	ldrb	r2, [r3, #0]
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8013e5c:	69fb      	ldr	r3, [r7, #28]
 8013e5e:	3301      	adds	r3, #1
 8013e60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013e66:	b29b      	uxth	r3, r3
 8013e68:	3b01      	subs	r3, #1
 8013e6a:	b29a      	uxth	r2, r3
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013e74:	b29b      	uxth	r3, r3
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d1cf      	bne.n	8013e1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013e7a:	683b      	ldr	r3, [r7, #0]
 8013e7c:	9300      	str	r3, [sp, #0]
 8013e7e:	697b      	ldr	r3, [r7, #20]
 8013e80:	2200      	movs	r2, #0
 8013e82:	2140      	movs	r1, #64	; 0x40
 8013e84:	68f8      	ldr	r0, [r7, #12]
 8013e86:	f000 f810 	bl	8013eaa <UART_WaitOnFlagUntilTimeout>
 8013e8a:	4603      	mov	r3, r0
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d001      	beq.n	8013e94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8013e90:	2303      	movs	r3, #3
 8013e92:	e006      	b.n	8013ea2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	2220      	movs	r2, #32
 8013e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	e000      	b.n	8013ea2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8013ea0:	2302      	movs	r3, #2
  }
}
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	3720      	adds	r7, #32
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	bd80      	pop	{r7, pc}

08013eaa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8013eaa:	b580      	push	{r7, lr}
 8013eac:	b090      	sub	sp, #64	; 0x40
 8013eae:	af00      	add	r7, sp, #0
 8013eb0:	60f8      	str	r0, [r7, #12]
 8013eb2:	60b9      	str	r1, [r7, #8]
 8013eb4:	603b      	str	r3, [r7, #0]
 8013eb6:	4613      	mov	r3, r2
 8013eb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013eba:	e050      	b.n	8013f5e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ec2:	d04c      	beq.n	8013f5e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8013ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d007      	beq.n	8013eda <UART_WaitOnFlagUntilTimeout+0x30>
 8013eca:	f7fd fef7 	bl	8011cbc <HAL_GetTick>
 8013ece:	4602      	mov	r2, r0
 8013ed0:	683b      	ldr	r3, [r7, #0]
 8013ed2:	1ad3      	subs	r3, r2, r3
 8013ed4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d241      	bcs.n	8013f5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	330c      	adds	r3, #12
 8013ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ee4:	e853 3f00 	ldrex	r3, [r3]
 8013ee8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	330c      	adds	r3, #12
 8013ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013efa:	637a      	str	r2, [r7, #52]	; 0x34
 8013efc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013efe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013f00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f02:	e841 2300 	strex	r3, r2, [r1]
 8013f06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d1e5      	bne.n	8013eda <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	3314      	adds	r3, #20
 8013f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f16:	697b      	ldr	r3, [r7, #20]
 8013f18:	e853 3f00 	ldrex	r3, [r3]
 8013f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	f023 0301 	bic.w	r3, r3, #1
 8013f24:	63bb      	str	r3, [r7, #56]	; 0x38
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	3314      	adds	r3, #20
 8013f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f2e:	623a      	str	r2, [r7, #32]
 8013f30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f32:	69f9      	ldr	r1, [r7, #28]
 8013f34:	6a3a      	ldr	r2, [r7, #32]
 8013f36:	e841 2300 	strex	r3, r2, [r1]
 8013f3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8013f3c:	69bb      	ldr	r3, [r7, #24]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d1e5      	bne.n	8013f0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	2220      	movs	r2, #32
 8013f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	2220      	movs	r2, #32
 8013f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	2200      	movs	r2, #0
 8013f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8013f5a:	2303      	movs	r3, #3
 8013f5c:	e00f      	b.n	8013f7e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	681a      	ldr	r2, [r3, #0]
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	4013      	ands	r3, r2
 8013f68:	68ba      	ldr	r2, [r7, #8]
 8013f6a:	429a      	cmp	r2, r3
 8013f6c:	bf0c      	ite	eq
 8013f6e:	2301      	moveq	r3, #1
 8013f70:	2300      	movne	r3, #0
 8013f72:	b2db      	uxtb	r3, r3
 8013f74:	461a      	mov	r2, r3
 8013f76:	79fb      	ldrb	r3, [r7, #7]
 8013f78:	429a      	cmp	r2, r3
 8013f7a:	d09f      	beq.n	8013ebc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013f7c:	2300      	movs	r3, #0
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	3740      	adds	r7, #64	; 0x40
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bd80      	pop	{r7, pc}
	...

08013f88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f8c:	b09f      	sub	sp, #124	; 0x7c
 8013f8e:	af00      	add	r7, sp, #0
 8013f90:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	691b      	ldr	r3, [r3, #16]
 8013f98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8013f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013f9e:	68d9      	ldr	r1, [r3, #12]
 8013fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fa2:	681a      	ldr	r2, [r3, #0]
 8013fa4:	ea40 0301 	orr.w	r3, r0, r1
 8013fa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8013faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fac:	689a      	ldr	r2, [r3, #8]
 8013fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fb0:	691b      	ldr	r3, [r3, #16]
 8013fb2:	431a      	orrs	r2, r3
 8013fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fb6:	695b      	ldr	r3, [r3, #20]
 8013fb8:	431a      	orrs	r2, r3
 8013fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fbc:	69db      	ldr	r3, [r3, #28]
 8013fbe:	4313      	orrs	r3, r2
 8013fc0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8013fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	68db      	ldr	r3, [r3, #12]
 8013fc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8013fcc:	f021 010c 	bic.w	r1, r1, #12
 8013fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fd2:	681a      	ldr	r2, [r3, #0]
 8013fd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013fd6:	430b      	orrs	r3, r1
 8013fd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8013fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	695b      	ldr	r3, [r3, #20]
 8013fe0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8013fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fe6:	6999      	ldr	r1, [r3, #24]
 8013fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fea:	681a      	ldr	r2, [r3, #0]
 8013fec:	ea40 0301 	orr.w	r3, r0, r1
 8013ff0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8013ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ff4:	681a      	ldr	r2, [r3, #0]
 8013ff6:	4bc5      	ldr	r3, [pc, #788]	; (801430c <UART_SetConfig+0x384>)
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d004      	beq.n	8014006 <UART_SetConfig+0x7e>
 8013ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ffe:	681a      	ldr	r2, [r3, #0]
 8014000:	4bc3      	ldr	r3, [pc, #780]	; (8014310 <UART_SetConfig+0x388>)
 8014002:	429a      	cmp	r2, r3
 8014004:	d103      	bne.n	801400e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8014006:	f7ff fe5d 	bl	8013cc4 <HAL_RCC_GetPCLK2Freq>
 801400a:	6778      	str	r0, [r7, #116]	; 0x74
 801400c:	e002      	b.n	8014014 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801400e:	f7ff fe45 	bl	8013c9c <HAL_RCC_GetPCLK1Freq>
 8014012:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014016:	69db      	ldr	r3, [r3, #28]
 8014018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801401c:	f040 80b6 	bne.w	801418c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014022:	461c      	mov	r4, r3
 8014024:	f04f 0500 	mov.w	r5, #0
 8014028:	4622      	mov	r2, r4
 801402a:	462b      	mov	r3, r5
 801402c:	1891      	adds	r1, r2, r2
 801402e:	6439      	str	r1, [r7, #64]	; 0x40
 8014030:	415b      	adcs	r3, r3
 8014032:	647b      	str	r3, [r7, #68]	; 0x44
 8014034:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8014038:	1912      	adds	r2, r2, r4
 801403a:	eb45 0303 	adc.w	r3, r5, r3
 801403e:	f04f 0000 	mov.w	r0, #0
 8014042:	f04f 0100 	mov.w	r1, #0
 8014046:	00d9      	lsls	r1, r3, #3
 8014048:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801404c:	00d0      	lsls	r0, r2, #3
 801404e:	4602      	mov	r2, r0
 8014050:	460b      	mov	r3, r1
 8014052:	1911      	adds	r1, r2, r4
 8014054:	6639      	str	r1, [r7, #96]	; 0x60
 8014056:	416b      	adcs	r3, r5
 8014058:	667b      	str	r3, [r7, #100]	; 0x64
 801405a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801405c:	685b      	ldr	r3, [r3, #4]
 801405e:	461a      	mov	r2, r3
 8014060:	f04f 0300 	mov.w	r3, #0
 8014064:	1891      	adds	r1, r2, r2
 8014066:	63b9      	str	r1, [r7, #56]	; 0x38
 8014068:	415b      	adcs	r3, r3
 801406a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801406c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8014070:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8014074:	f7ec f954 	bl	8000320 <__aeabi_uldivmod>
 8014078:	4602      	mov	r2, r0
 801407a:	460b      	mov	r3, r1
 801407c:	4ba5      	ldr	r3, [pc, #660]	; (8014314 <UART_SetConfig+0x38c>)
 801407e:	fba3 2302 	umull	r2, r3, r3, r2
 8014082:	095b      	lsrs	r3, r3, #5
 8014084:	011e      	lsls	r6, r3, #4
 8014086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014088:	461c      	mov	r4, r3
 801408a:	f04f 0500 	mov.w	r5, #0
 801408e:	4622      	mov	r2, r4
 8014090:	462b      	mov	r3, r5
 8014092:	1891      	adds	r1, r2, r2
 8014094:	6339      	str	r1, [r7, #48]	; 0x30
 8014096:	415b      	adcs	r3, r3
 8014098:	637b      	str	r3, [r7, #52]	; 0x34
 801409a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801409e:	1912      	adds	r2, r2, r4
 80140a0:	eb45 0303 	adc.w	r3, r5, r3
 80140a4:	f04f 0000 	mov.w	r0, #0
 80140a8:	f04f 0100 	mov.w	r1, #0
 80140ac:	00d9      	lsls	r1, r3, #3
 80140ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80140b2:	00d0      	lsls	r0, r2, #3
 80140b4:	4602      	mov	r2, r0
 80140b6:	460b      	mov	r3, r1
 80140b8:	1911      	adds	r1, r2, r4
 80140ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80140bc:	416b      	adcs	r3, r5
 80140be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80140c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80140c2:	685b      	ldr	r3, [r3, #4]
 80140c4:	461a      	mov	r2, r3
 80140c6:	f04f 0300 	mov.w	r3, #0
 80140ca:	1891      	adds	r1, r2, r2
 80140cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80140ce:	415b      	adcs	r3, r3
 80140d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80140d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80140d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80140da:	f7ec f921 	bl	8000320 <__aeabi_uldivmod>
 80140de:	4602      	mov	r2, r0
 80140e0:	460b      	mov	r3, r1
 80140e2:	4b8c      	ldr	r3, [pc, #560]	; (8014314 <UART_SetConfig+0x38c>)
 80140e4:	fba3 1302 	umull	r1, r3, r3, r2
 80140e8:	095b      	lsrs	r3, r3, #5
 80140ea:	2164      	movs	r1, #100	; 0x64
 80140ec:	fb01 f303 	mul.w	r3, r1, r3
 80140f0:	1ad3      	subs	r3, r2, r3
 80140f2:	00db      	lsls	r3, r3, #3
 80140f4:	3332      	adds	r3, #50	; 0x32
 80140f6:	4a87      	ldr	r2, [pc, #540]	; (8014314 <UART_SetConfig+0x38c>)
 80140f8:	fba2 2303 	umull	r2, r3, r2, r3
 80140fc:	095b      	lsrs	r3, r3, #5
 80140fe:	005b      	lsls	r3, r3, #1
 8014100:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014104:	441e      	add	r6, r3
 8014106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014108:	4618      	mov	r0, r3
 801410a:	f04f 0100 	mov.w	r1, #0
 801410e:	4602      	mov	r2, r0
 8014110:	460b      	mov	r3, r1
 8014112:	1894      	adds	r4, r2, r2
 8014114:	623c      	str	r4, [r7, #32]
 8014116:	415b      	adcs	r3, r3
 8014118:	627b      	str	r3, [r7, #36]	; 0x24
 801411a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801411e:	1812      	adds	r2, r2, r0
 8014120:	eb41 0303 	adc.w	r3, r1, r3
 8014124:	f04f 0400 	mov.w	r4, #0
 8014128:	f04f 0500 	mov.w	r5, #0
 801412c:	00dd      	lsls	r5, r3, #3
 801412e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014132:	00d4      	lsls	r4, r2, #3
 8014134:	4622      	mov	r2, r4
 8014136:	462b      	mov	r3, r5
 8014138:	1814      	adds	r4, r2, r0
 801413a:	653c      	str	r4, [r7, #80]	; 0x50
 801413c:	414b      	adcs	r3, r1
 801413e:	657b      	str	r3, [r7, #84]	; 0x54
 8014140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014142:	685b      	ldr	r3, [r3, #4]
 8014144:	461a      	mov	r2, r3
 8014146:	f04f 0300 	mov.w	r3, #0
 801414a:	1891      	adds	r1, r2, r2
 801414c:	61b9      	str	r1, [r7, #24]
 801414e:	415b      	adcs	r3, r3
 8014150:	61fb      	str	r3, [r7, #28]
 8014152:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014156:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801415a:	f7ec f8e1 	bl	8000320 <__aeabi_uldivmod>
 801415e:	4602      	mov	r2, r0
 8014160:	460b      	mov	r3, r1
 8014162:	4b6c      	ldr	r3, [pc, #432]	; (8014314 <UART_SetConfig+0x38c>)
 8014164:	fba3 1302 	umull	r1, r3, r3, r2
 8014168:	095b      	lsrs	r3, r3, #5
 801416a:	2164      	movs	r1, #100	; 0x64
 801416c:	fb01 f303 	mul.w	r3, r1, r3
 8014170:	1ad3      	subs	r3, r2, r3
 8014172:	00db      	lsls	r3, r3, #3
 8014174:	3332      	adds	r3, #50	; 0x32
 8014176:	4a67      	ldr	r2, [pc, #412]	; (8014314 <UART_SetConfig+0x38c>)
 8014178:	fba2 2303 	umull	r2, r3, r2, r3
 801417c:	095b      	lsrs	r3, r3, #5
 801417e:	f003 0207 	and.w	r2, r3, #7
 8014182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	4432      	add	r2, r6
 8014188:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801418a:	e0b9      	b.n	8014300 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801418c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801418e:	461c      	mov	r4, r3
 8014190:	f04f 0500 	mov.w	r5, #0
 8014194:	4622      	mov	r2, r4
 8014196:	462b      	mov	r3, r5
 8014198:	1891      	adds	r1, r2, r2
 801419a:	6139      	str	r1, [r7, #16]
 801419c:	415b      	adcs	r3, r3
 801419e:	617b      	str	r3, [r7, #20]
 80141a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80141a4:	1912      	adds	r2, r2, r4
 80141a6:	eb45 0303 	adc.w	r3, r5, r3
 80141aa:	f04f 0000 	mov.w	r0, #0
 80141ae:	f04f 0100 	mov.w	r1, #0
 80141b2:	00d9      	lsls	r1, r3, #3
 80141b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80141b8:	00d0      	lsls	r0, r2, #3
 80141ba:	4602      	mov	r2, r0
 80141bc:	460b      	mov	r3, r1
 80141be:	eb12 0804 	adds.w	r8, r2, r4
 80141c2:	eb43 0905 	adc.w	r9, r3, r5
 80141c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80141c8:	685b      	ldr	r3, [r3, #4]
 80141ca:	4618      	mov	r0, r3
 80141cc:	f04f 0100 	mov.w	r1, #0
 80141d0:	f04f 0200 	mov.w	r2, #0
 80141d4:	f04f 0300 	mov.w	r3, #0
 80141d8:	008b      	lsls	r3, r1, #2
 80141da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80141de:	0082      	lsls	r2, r0, #2
 80141e0:	4640      	mov	r0, r8
 80141e2:	4649      	mov	r1, r9
 80141e4:	f7ec f89c 	bl	8000320 <__aeabi_uldivmod>
 80141e8:	4602      	mov	r2, r0
 80141ea:	460b      	mov	r3, r1
 80141ec:	4b49      	ldr	r3, [pc, #292]	; (8014314 <UART_SetConfig+0x38c>)
 80141ee:	fba3 2302 	umull	r2, r3, r3, r2
 80141f2:	095b      	lsrs	r3, r3, #5
 80141f4:	011e      	lsls	r6, r3, #4
 80141f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80141f8:	4618      	mov	r0, r3
 80141fa:	f04f 0100 	mov.w	r1, #0
 80141fe:	4602      	mov	r2, r0
 8014200:	460b      	mov	r3, r1
 8014202:	1894      	adds	r4, r2, r2
 8014204:	60bc      	str	r4, [r7, #8]
 8014206:	415b      	adcs	r3, r3
 8014208:	60fb      	str	r3, [r7, #12]
 801420a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801420e:	1812      	adds	r2, r2, r0
 8014210:	eb41 0303 	adc.w	r3, r1, r3
 8014214:	f04f 0400 	mov.w	r4, #0
 8014218:	f04f 0500 	mov.w	r5, #0
 801421c:	00dd      	lsls	r5, r3, #3
 801421e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014222:	00d4      	lsls	r4, r2, #3
 8014224:	4622      	mov	r2, r4
 8014226:	462b      	mov	r3, r5
 8014228:	1814      	adds	r4, r2, r0
 801422a:	64bc      	str	r4, [r7, #72]	; 0x48
 801422c:	414b      	adcs	r3, r1
 801422e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014232:	685b      	ldr	r3, [r3, #4]
 8014234:	4618      	mov	r0, r3
 8014236:	f04f 0100 	mov.w	r1, #0
 801423a:	f04f 0200 	mov.w	r2, #0
 801423e:	f04f 0300 	mov.w	r3, #0
 8014242:	008b      	lsls	r3, r1, #2
 8014244:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014248:	0082      	lsls	r2, r0, #2
 801424a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801424e:	f7ec f867 	bl	8000320 <__aeabi_uldivmod>
 8014252:	4602      	mov	r2, r0
 8014254:	460b      	mov	r3, r1
 8014256:	4b2f      	ldr	r3, [pc, #188]	; (8014314 <UART_SetConfig+0x38c>)
 8014258:	fba3 1302 	umull	r1, r3, r3, r2
 801425c:	095b      	lsrs	r3, r3, #5
 801425e:	2164      	movs	r1, #100	; 0x64
 8014260:	fb01 f303 	mul.w	r3, r1, r3
 8014264:	1ad3      	subs	r3, r2, r3
 8014266:	011b      	lsls	r3, r3, #4
 8014268:	3332      	adds	r3, #50	; 0x32
 801426a:	4a2a      	ldr	r2, [pc, #168]	; (8014314 <UART_SetConfig+0x38c>)
 801426c:	fba2 2303 	umull	r2, r3, r2, r3
 8014270:	095b      	lsrs	r3, r3, #5
 8014272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014276:	441e      	add	r6, r3
 8014278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801427a:	4618      	mov	r0, r3
 801427c:	f04f 0100 	mov.w	r1, #0
 8014280:	4602      	mov	r2, r0
 8014282:	460b      	mov	r3, r1
 8014284:	1894      	adds	r4, r2, r2
 8014286:	603c      	str	r4, [r7, #0]
 8014288:	415b      	adcs	r3, r3
 801428a:	607b      	str	r3, [r7, #4]
 801428c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014290:	1812      	adds	r2, r2, r0
 8014292:	eb41 0303 	adc.w	r3, r1, r3
 8014296:	f04f 0400 	mov.w	r4, #0
 801429a:	f04f 0500 	mov.w	r5, #0
 801429e:	00dd      	lsls	r5, r3, #3
 80142a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80142a4:	00d4      	lsls	r4, r2, #3
 80142a6:	4622      	mov	r2, r4
 80142a8:	462b      	mov	r3, r5
 80142aa:	eb12 0a00 	adds.w	sl, r2, r0
 80142ae:	eb43 0b01 	adc.w	fp, r3, r1
 80142b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142b4:	685b      	ldr	r3, [r3, #4]
 80142b6:	4618      	mov	r0, r3
 80142b8:	f04f 0100 	mov.w	r1, #0
 80142bc:	f04f 0200 	mov.w	r2, #0
 80142c0:	f04f 0300 	mov.w	r3, #0
 80142c4:	008b      	lsls	r3, r1, #2
 80142c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80142ca:	0082      	lsls	r2, r0, #2
 80142cc:	4650      	mov	r0, sl
 80142ce:	4659      	mov	r1, fp
 80142d0:	f7ec f826 	bl	8000320 <__aeabi_uldivmod>
 80142d4:	4602      	mov	r2, r0
 80142d6:	460b      	mov	r3, r1
 80142d8:	4b0e      	ldr	r3, [pc, #56]	; (8014314 <UART_SetConfig+0x38c>)
 80142da:	fba3 1302 	umull	r1, r3, r3, r2
 80142de:	095b      	lsrs	r3, r3, #5
 80142e0:	2164      	movs	r1, #100	; 0x64
 80142e2:	fb01 f303 	mul.w	r3, r1, r3
 80142e6:	1ad3      	subs	r3, r2, r3
 80142e8:	011b      	lsls	r3, r3, #4
 80142ea:	3332      	adds	r3, #50	; 0x32
 80142ec:	4a09      	ldr	r2, [pc, #36]	; (8014314 <UART_SetConfig+0x38c>)
 80142ee:	fba2 2303 	umull	r2, r3, r2, r3
 80142f2:	095b      	lsrs	r3, r3, #5
 80142f4:	f003 020f 	and.w	r2, r3, #15
 80142f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	4432      	add	r2, r6
 80142fe:	609a      	str	r2, [r3, #8]
}
 8014300:	bf00      	nop
 8014302:	377c      	adds	r7, #124	; 0x7c
 8014304:	46bd      	mov	sp, r7
 8014306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801430a:	bf00      	nop
 801430c:	40011000 	.word	0x40011000
 8014310:	40011400 	.word	0x40011400
 8014314:	51eb851f 	.word	0x51eb851f

08014318 <__errno>:
 8014318:	4b01      	ldr	r3, [pc, #4]	; (8014320 <__errno+0x8>)
 801431a:	6818      	ldr	r0, [r3, #0]
 801431c:	4770      	bx	lr
 801431e:	bf00      	nop
 8014320:	20000080 	.word	0x20000080

08014324 <__libc_init_array>:
 8014324:	b570      	push	{r4, r5, r6, lr}
 8014326:	4d0d      	ldr	r5, [pc, #52]	; (801435c <__libc_init_array+0x38>)
 8014328:	4c0d      	ldr	r4, [pc, #52]	; (8014360 <__libc_init_array+0x3c>)
 801432a:	1b64      	subs	r4, r4, r5
 801432c:	10a4      	asrs	r4, r4, #2
 801432e:	2600      	movs	r6, #0
 8014330:	42a6      	cmp	r6, r4
 8014332:	d109      	bne.n	8014348 <__libc_init_array+0x24>
 8014334:	4d0b      	ldr	r5, [pc, #44]	; (8014364 <__libc_init_array+0x40>)
 8014336:	4c0c      	ldr	r4, [pc, #48]	; (8014368 <__libc_init_array+0x44>)
 8014338:	f001 f80e 	bl	8015358 <_init>
 801433c:	1b64      	subs	r4, r4, r5
 801433e:	10a4      	asrs	r4, r4, #2
 8014340:	2600      	movs	r6, #0
 8014342:	42a6      	cmp	r6, r4
 8014344:	d105      	bne.n	8014352 <__libc_init_array+0x2e>
 8014346:	bd70      	pop	{r4, r5, r6, pc}
 8014348:	f855 3b04 	ldr.w	r3, [r5], #4
 801434c:	4798      	blx	r3
 801434e:	3601      	adds	r6, #1
 8014350:	e7ee      	b.n	8014330 <__libc_init_array+0xc>
 8014352:	f855 3b04 	ldr.w	r3, [r5], #4
 8014356:	4798      	blx	r3
 8014358:	3601      	adds	r6, #1
 801435a:	e7f2      	b.n	8014342 <__libc_init_array+0x1e>
 801435c:	080155e4 	.word	0x080155e4
 8014360:	080155e4 	.word	0x080155e4
 8014364:	080155e4 	.word	0x080155e4
 8014368:	080155e8 	.word	0x080155e8

0801436c <memcpy>:
 801436c:	440a      	add	r2, r1
 801436e:	4291      	cmp	r1, r2
 8014370:	f100 33ff 	add.w	r3, r0, #4294967295
 8014374:	d100      	bne.n	8014378 <memcpy+0xc>
 8014376:	4770      	bx	lr
 8014378:	b510      	push	{r4, lr}
 801437a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801437e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014382:	4291      	cmp	r1, r2
 8014384:	d1f9      	bne.n	801437a <memcpy+0xe>
 8014386:	bd10      	pop	{r4, pc}

08014388 <memset>:
 8014388:	4402      	add	r2, r0
 801438a:	4603      	mov	r3, r0
 801438c:	4293      	cmp	r3, r2
 801438e:	d100      	bne.n	8014392 <memset+0xa>
 8014390:	4770      	bx	lr
 8014392:	f803 1b01 	strb.w	r1, [r3], #1
 8014396:	e7f9      	b.n	801438c <memset+0x4>

08014398 <iprintf>:
 8014398:	b40f      	push	{r0, r1, r2, r3}
 801439a:	4b0a      	ldr	r3, [pc, #40]	; (80143c4 <iprintf+0x2c>)
 801439c:	b513      	push	{r0, r1, r4, lr}
 801439e:	681c      	ldr	r4, [r3, #0]
 80143a0:	b124      	cbz	r4, 80143ac <iprintf+0x14>
 80143a2:	69a3      	ldr	r3, [r4, #24]
 80143a4:	b913      	cbnz	r3, 80143ac <iprintf+0x14>
 80143a6:	4620      	mov	r0, r4
 80143a8:	f000 fa72 	bl	8014890 <__sinit>
 80143ac:	ab05      	add	r3, sp, #20
 80143ae:	9a04      	ldr	r2, [sp, #16]
 80143b0:	68a1      	ldr	r1, [r4, #8]
 80143b2:	9301      	str	r3, [sp, #4]
 80143b4:	4620      	mov	r0, r4
 80143b6:	f000 fc43 	bl	8014c40 <_vfiprintf_r>
 80143ba:	b002      	add	sp, #8
 80143bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143c0:	b004      	add	sp, #16
 80143c2:	4770      	bx	lr
 80143c4:	20000080 	.word	0x20000080

080143c8 <_puts_r>:
 80143c8:	b570      	push	{r4, r5, r6, lr}
 80143ca:	460e      	mov	r6, r1
 80143cc:	4605      	mov	r5, r0
 80143ce:	b118      	cbz	r0, 80143d8 <_puts_r+0x10>
 80143d0:	6983      	ldr	r3, [r0, #24]
 80143d2:	b90b      	cbnz	r3, 80143d8 <_puts_r+0x10>
 80143d4:	f000 fa5c 	bl	8014890 <__sinit>
 80143d8:	69ab      	ldr	r3, [r5, #24]
 80143da:	68ac      	ldr	r4, [r5, #8]
 80143dc:	b913      	cbnz	r3, 80143e4 <_puts_r+0x1c>
 80143de:	4628      	mov	r0, r5
 80143e0:	f000 fa56 	bl	8014890 <__sinit>
 80143e4:	4b2c      	ldr	r3, [pc, #176]	; (8014498 <_puts_r+0xd0>)
 80143e6:	429c      	cmp	r4, r3
 80143e8:	d120      	bne.n	801442c <_puts_r+0x64>
 80143ea:	686c      	ldr	r4, [r5, #4]
 80143ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80143ee:	07db      	lsls	r3, r3, #31
 80143f0:	d405      	bmi.n	80143fe <_puts_r+0x36>
 80143f2:	89a3      	ldrh	r3, [r4, #12]
 80143f4:	0598      	lsls	r0, r3, #22
 80143f6:	d402      	bmi.n	80143fe <_puts_r+0x36>
 80143f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80143fa:	f000 fae7 	bl	80149cc <__retarget_lock_acquire_recursive>
 80143fe:	89a3      	ldrh	r3, [r4, #12]
 8014400:	0719      	lsls	r1, r3, #28
 8014402:	d51d      	bpl.n	8014440 <_puts_r+0x78>
 8014404:	6923      	ldr	r3, [r4, #16]
 8014406:	b1db      	cbz	r3, 8014440 <_puts_r+0x78>
 8014408:	3e01      	subs	r6, #1
 801440a:	68a3      	ldr	r3, [r4, #8]
 801440c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014410:	3b01      	subs	r3, #1
 8014412:	60a3      	str	r3, [r4, #8]
 8014414:	bb39      	cbnz	r1, 8014466 <_puts_r+0x9e>
 8014416:	2b00      	cmp	r3, #0
 8014418:	da38      	bge.n	801448c <_puts_r+0xc4>
 801441a:	4622      	mov	r2, r4
 801441c:	210a      	movs	r1, #10
 801441e:	4628      	mov	r0, r5
 8014420:	f000 f85c 	bl	80144dc <__swbuf_r>
 8014424:	3001      	adds	r0, #1
 8014426:	d011      	beq.n	801444c <_puts_r+0x84>
 8014428:	250a      	movs	r5, #10
 801442a:	e011      	b.n	8014450 <_puts_r+0x88>
 801442c:	4b1b      	ldr	r3, [pc, #108]	; (801449c <_puts_r+0xd4>)
 801442e:	429c      	cmp	r4, r3
 8014430:	d101      	bne.n	8014436 <_puts_r+0x6e>
 8014432:	68ac      	ldr	r4, [r5, #8]
 8014434:	e7da      	b.n	80143ec <_puts_r+0x24>
 8014436:	4b1a      	ldr	r3, [pc, #104]	; (80144a0 <_puts_r+0xd8>)
 8014438:	429c      	cmp	r4, r3
 801443a:	bf08      	it	eq
 801443c:	68ec      	ldreq	r4, [r5, #12]
 801443e:	e7d5      	b.n	80143ec <_puts_r+0x24>
 8014440:	4621      	mov	r1, r4
 8014442:	4628      	mov	r0, r5
 8014444:	f000 f89c 	bl	8014580 <__swsetup_r>
 8014448:	2800      	cmp	r0, #0
 801444a:	d0dd      	beq.n	8014408 <_puts_r+0x40>
 801444c:	f04f 35ff 	mov.w	r5, #4294967295
 8014450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014452:	07da      	lsls	r2, r3, #31
 8014454:	d405      	bmi.n	8014462 <_puts_r+0x9a>
 8014456:	89a3      	ldrh	r3, [r4, #12]
 8014458:	059b      	lsls	r3, r3, #22
 801445a:	d402      	bmi.n	8014462 <_puts_r+0x9a>
 801445c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801445e:	f000 fab6 	bl	80149ce <__retarget_lock_release_recursive>
 8014462:	4628      	mov	r0, r5
 8014464:	bd70      	pop	{r4, r5, r6, pc}
 8014466:	2b00      	cmp	r3, #0
 8014468:	da04      	bge.n	8014474 <_puts_r+0xac>
 801446a:	69a2      	ldr	r2, [r4, #24]
 801446c:	429a      	cmp	r2, r3
 801446e:	dc06      	bgt.n	801447e <_puts_r+0xb6>
 8014470:	290a      	cmp	r1, #10
 8014472:	d004      	beq.n	801447e <_puts_r+0xb6>
 8014474:	6823      	ldr	r3, [r4, #0]
 8014476:	1c5a      	adds	r2, r3, #1
 8014478:	6022      	str	r2, [r4, #0]
 801447a:	7019      	strb	r1, [r3, #0]
 801447c:	e7c5      	b.n	801440a <_puts_r+0x42>
 801447e:	4622      	mov	r2, r4
 8014480:	4628      	mov	r0, r5
 8014482:	f000 f82b 	bl	80144dc <__swbuf_r>
 8014486:	3001      	adds	r0, #1
 8014488:	d1bf      	bne.n	801440a <_puts_r+0x42>
 801448a:	e7df      	b.n	801444c <_puts_r+0x84>
 801448c:	6823      	ldr	r3, [r4, #0]
 801448e:	250a      	movs	r5, #10
 8014490:	1c5a      	adds	r2, r3, #1
 8014492:	6022      	str	r2, [r4, #0]
 8014494:	701d      	strb	r5, [r3, #0]
 8014496:	e7db      	b.n	8014450 <_puts_r+0x88>
 8014498:	08015568 	.word	0x08015568
 801449c:	08015588 	.word	0x08015588
 80144a0:	08015548 	.word	0x08015548

080144a4 <puts>:
 80144a4:	4b02      	ldr	r3, [pc, #8]	; (80144b0 <puts+0xc>)
 80144a6:	4601      	mov	r1, r0
 80144a8:	6818      	ldr	r0, [r3, #0]
 80144aa:	f7ff bf8d 	b.w	80143c8 <_puts_r>
 80144ae:	bf00      	nop
 80144b0:	20000080 	.word	0x20000080

080144b4 <strncpy>:
 80144b4:	b510      	push	{r4, lr}
 80144b6:	3901      	subs	r1, #1
 80144b8:	4603      	mov	r3, r0
 80144ba:	b132      	cbz	r2, 80144ca <strncpy+0x16>
 80144bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80144c0:	f803 4b01 	strb.w	r4, [r3], #1
 80144c4:	3a01      	subs	r2, #1
 80144c6:	2c00      	cmp	r4, #0
 80144c8:	d1f7      	bne.n	80144ba <strncpy+0x6>
 80144ca:	441a      	add	r2, r3
 80144cc:	2100      	movs	r1, #0
 80144ce:	4293      	cmp	r3, r2
 80144d0:	d100      	bne.n	80144d4 <strncpy+0x20>
 80144d2:	bd10      	pop	{r4, pc}
 80144d4:	f803 1b01 	strb.w	r1, [r3], #1
 80144d8:	e7f9      	b.n	80144ce <strncpy+0x1a>
	...

080144dc <__swbuf_r>:
 80144dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144de:	460e      	mov	r6, r1
 80144e0:	4614      	mov	r4, r2
 80144e2:	4605      	mov	r5, r0
 80144e4:	b118      	cbz	r0, 80144ee <__swbuf_r+0x12>
 80144e6:	6983      	ldr	r3, [r0, #24]
 80144e8:	b90b      	cbnz	r3, 80144ee <__swbuf_r+0x12>
 80144ea:	f000 f9d1 	bl	8014890 <__sinit>
 80144ee:	4b21      	ldr	r3, [pc, #132]	; (8014574 <__swbuf_r+0x98>)
 80144f0:	429c      	cmp	r4, r3
 80144f2:	d12b      	bne.n	801454c <__swbuf_r+0x70>
 80144f4:	686c      	ldr	r4, [r5, #4]
 80144f6:	69a3      	ldr	r3, [r4, #24]
 80144f8:	60a3      	str	r3, [r4, #8]
 80144fa:	89a3      	ldrh	r3, [r4, #12]
 80144fc:	071a      	lsls	r2, r3, #28
 80144fe:	d52f      	bpl.n	8014560 <__swbuf_r+0x84>
 8014500:	6923      	ldr	r3, [r4, #16]
 8014502:	b36b      	cbz	r3, 8014560 <__swbuf_r+0x84>
 8014504:	6923      	ldr	r3, [r4, #16]
 8014506:	6820      	ldr	r0, [r4, #0]
 8014508:	1ac0      	subs	r0, r0, r3
 801450a:	6963      	ldr	r3, [r4, #20]
 801450c:	b2f6      	uxtb	r6, r6
 801450e:	4283      	cmp	r3, r0
 8014510:	4637      	mov	r7, r6
 8014512:	dc04      	bgt.n	801451e <__swbuf_r+0x42>
 8014514:	4621      	mov	r1, r4
 8014516:	4628      	mov	r0, r5
 8014518:	f000 f926 	bl	8014768 <_fflush_r>
 801451c:	bb30      	cbnz	r0, 801456c <__swbuf_r+0x90>
 801451e:	68a3      	ldr	r3, [r4, #8]
 8014520:	3b01      	subs	r3, #1
 8014522:	60a3      	str	r3, [r4, #8]
 8014524:	6823      	ldr	r3, [r4, #0]
 8014526:	1c5a      	adds	r2, r3, #1
 8014528:	6022      	str	r2, [r4, #0]
 801452a:	701e      	strb	r6, [r3, #0]
 801452c:	6963      	ldr	r3, [r4, #20]
 801452e:	3001      	adds	r0, #1
 8014530:	4283      	cmp	r3, r0
 8014532:	d004      	beq.n	801453e <__swbuf_r+0x62>
 8014534:	89a3      	ldrh	r3, [r4, #12]
 8014536:	07db      	lsls	r3, r3, #31
 8014538:	d506      	bpl.n	8014548 <__swbuf_r+0x6c>
 801453a:	2e0a      	cmp	r6, #10
 801453c:	d104      	bne.n	8014548 <__swbuf_r+0x6c>
 801453e:	4621      	mov	r1, r4
 8014540:	4628      	mov	r0, r5
 8014542:	f000 f911 	bl	8014768 <_fflush_r>
 8014546:	b988      	cbnz	r0, 801456c <__swbuf_r+0x90>
 8014548:	4638      	mov	r0, r7
 801454a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801454c:	4b0a      	ldr	r3, [pc, #40]	; (8014578 <__swbuf_r+0x9c>)
 801454e:	429c      	cmp	r4, r3
 8014550:	d101      	bne.n	8014556 <__swbuf_r+0x7a>
 8014552:	68ac      	ldr	r4, [r5, #8]
 8014554:	e7cf      	b.n	80144f6 <__swbuf_r+0x1a>
 8014556:	4b09      	ldr	r3, [pc, #36]	; (801457c <__swbuf_r+0xa0>)
 8014558:	429c      	cmp	r4, r3
 801455a:	bf08      	it	eq
 801455c:	68ec      	ldreq	r4, [r5, #12]
 801455e:	e7ca      	b.n	80144f6 <__swbuf_r+0x1a>
 8014560:	4621      	mov	r1, r4
 8014562:	4628      	mov	r0, r5
 8014564:	f000 f80c 	bl	8014580 <__swsetup_r>
 8014568:	2800      	cmp	r0, #0
 801456a:	d0cb      	beq.n	8014504 <__swbuf_r+0x28>
 801456c:	f04f 37ff 	mov.w	r7, #4294967295
 8014570:	e7ea      	b.n	8014548 <__swbuf_r+0x6c>
 8014572:	bf00      	nop
 8014574:	08015568 	.word	0x08015568
 8014578:	08015588 	.word	0x08015588
 801457c:	08015548 	.word	0x08015548

08014580 <__swsetup_r>:
 8014580:	4b32      	ldr	r3, [pc, #200]	; (801464c <__swsetup_r+0xcc>)
 8014582:	b570      	push	{r4, r5, r6, lr}
 8014584:	681d      	ldr	r5, [r3, #0]
 8014586:	4606      	mov	r6, r0
 8014588:	460c      	mov	r4, r1
 801458a:	b125      	cbz	r5, 8014596 <__swsetup_r+0x16>
 801458c:	69ab      	ldr	r3, [r5, #24]
 801458e:	b913      	cbnz	r3, 8014596 <__swsetup_r+0x16>
 8014590:	4628      	mov	r0, r5
 8014592:	f000 f97d 	bl	8014890 <__sinit>
 8014596:	4b2e      	ldr	r3, [pc, #184]	; (8014650 <__swsetup_r+0xd0>)
 8014598:	429c      	cmp	r4, r3
 801459a:	d10f      	bne.n	80145bc <__swsetup_r+0x3c>
 801459c:	686c      	ldr	r4, [r5, #4]
 801459e:	89a3      	ldrh	r3, [r4, #12]
 80145a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80145a4:	0719      	lsls	r1, r3, #28
 80145a6:	d42c      	bmi.n	8014602 <__swsetup_r+0x82>
 80145a8:	06dd      	lsls	r5, r3, #27
 80145aa:	d411      	bmi.n	80145d0 <__swsetup_r+0x50>
 80145ac:	2309      	movs	r3, #9
 80145ae:	6033      	str	r3, [r6, #0]
 80145b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80145b4:	81a3      	strh	r3, [r4, #12]
 80145b6:	f04f 30ff 	mov.w	r0, #4294967295
 80145ba:	e03e      	b.n	801463a <__swsetup_r+0xba>
 80145bc:	4b25      	ldr	r3, [pc, #148]	; (8014654 <__swsetup_r+0xd4>)
 80145be:	429c      	cmp	r4, r3
 80145c0:	d101      	bne.n	80145c6 <__swsetup_r+0x46>
 80145c2:	68ac      	ldr	r4, [r5, #8]
 80145c4:	e7eb      	b.n	801459e <__swsetup_r+0x1e>
 80145c6:	4b24      	ldr	r3, [pc, #144]	; (8014658 <__swsetup_r+0xd8>)
 80145c8:	429c      	cmp	r4, r3
 80145ca:	bf08      	it	eq
 80145cc:	68ec      	ldreq	r4, [r5, #12]
 80145ce:	e7e6      	b.n	801459e <__swsetup_r+0x1e>
 80145d0:	0758      	lsls	r0, r3, #29
 80145d2:	d512      	bpl.n	80145fa <__swsetup_r+0x7a>
 80145d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80145d6:	b141      	cbz	r1, 80145ea <__swsetup_r+0x6a>
 80145d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80145dc:	4299      	cmp	r1, r3
 80145de:	d002      	beq.n	80145e6 <__swsetup_r+0x66>
 80145e0:	4630      	mov	r0, r6
 80145e2:	f000 fa59 	bl	8014a98 <_free_r>
 80145e6:	2300      	movs	r3, #0
 80145e8:	6363      	str	r3, [r4, #52]	; 0x34
 80145ea:	89a3      	ldrh	r3, [r4, #12]
 80145ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80145f0:	81a3      	strh	r3, [r4, #12]
 80145f2:	2300      	movs	r3, #0
 80145f4:	6063      	str	r3, [r4, #4]
 80145f6:	6923      	ldr	r3, [r4, #16]
 80145f8:	6023      	str	r3, [r4, #0]
 80145fa:	89a3      	ldrh	r3, [r4, #12]
 80145fc:	f043 0308 	orr.w	r3, r3, #8
 8014600:	81a3      	strh	r3, [r4, #12]
 8014602:	6923      	ldr	r3, [r4, #16]
 8014604:	b94b      	cbnz	r3, 801461a <__swsetup_r+0x9a>
 8014606:	89a3      	ldrh	r3, [r4, #12]
 8014608:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801460c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014610:	d003      	beq.n	801461a <__swsetup_r+0x9a>
 8014612:	4621      	mov	r1, r4
 8014614:	4630      	mov	r0, r6
 8014616:	f000 f9ff 	bl	8014a18 <__smakebuf_r>
 801461a:	89a0      	ldrh	r0, [r4, #12]
 801461c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014620:	f010 0301 	ands.w	r3, r0, #1
 8014624:	d00a      	beq.n	801463c <__swsetup_r+0xbc>
 8014626:	2300      	movs	r3, #0
 8014628:	60a3      	str	r3, [r4, #8]
 801462a:	6963      	ldr	r3, [r4, #20]
 801462c:	425b      	negs	r3, r3
 801462e:	61a3      	str	r3, [r4, #24]
 8014630:	6923      	ldr	r3, [r4, #16]
 8014632:	b943      	cbnz	r3, 8014646 <__swsetup_r+0xc6>
 8014634:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014638:	d1ba      	bne.n	80145b0 <__swsetup_r+0x30>
 801463a:	bd70      	pop	{r4, r5, r6, pc}
 801463c:	0781      	lsls	r1, r0, #30
 801463e:	bf58      	it	pl
 8014640:	6963      	ldrpl	r3, [r4, #20]
 8014642:	60a3      	str	r3, [r4, #8]
 8014644:	e7f4      	b.n	8014630 <__swsetup_r+0xb0>
 8014646:	2000      	movs	r0, #0
 8014648:	e7f7      	b.n	801463a <__swsetup_r+0xba>
 801464a:	bf00      	nop
 801464c:	20000080 	.word	0x20000080
 8014650:	08015568 	.word	0x08015568
 8014654:	08015588 	.word	0x08015588
 8014658:	08015548 	.word	0x08015548

0801465c <__sflush_r>:
 801465c:	898a      	ldrh	r2, [r1, #12]
 801465e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014662:	4605      	mov	r5, r0
 8014664:	0710      	lsls	r0, r2, #28
 8014666:	460c      	mov	r4, r1
 8014668:	d458      	bmi.n	801471c <__sflush_r+0xc0>
 801466a:	684b      	ldr	r3, [r1, #4]
 801466c:	2b00      	cmp	r3, #0
 801466e:	dc05      	bgt.n	801467c <__sflush_r+0x20>
 8014670:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014672:	2b00      	cmp	r3, #0
 8014674:	dc02      	bgt.n	801467c <__sflush_r+0x20>
 8014676:	2000      	movs	r0, #0
 8014678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801467c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801467e:	2e00      	cmp	r6, #0
 8014680:	d0f9      	beq.n	8014676 <__sflush_r+0x1a>
 8014682:	2300      	movs	r3, #0
 8014684:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014688:	682f      	ldr	r7, [r5, #0]
 801468a:	602b      	str	r3, [r5, #0]
 801468c:	d032      	beq.n	80146f4 <__sflush_r+0x98>
 801468e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014690:	89a3      	ldrh	r3, [r4, #12]
 8014692:	075a      	lsls	r2, r3, #29
 8014694:	d505      	bpl.n	80146a2 <__sflush_r+0x46>
 8014696:	6863      	ldr	r3, [r4, #4]
 8014698:	1ac0      	subs	r0, r0, r3
 801469a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801469c:	b10b      	cbz	r3, 80146a2 <__sflush_r+0x46>
 801469e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80146a0:	1ac0      	subs	r0, r0, r3
 80146a2:	2300      	movs	r3, #0
 80146a4:	4602      	mov	r2, r0
 80146a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80146a8:	6a21      	ldr	r1, [r4, #32]
 80146aa:	4628      	mov	r0, r5
 80146ac:	47b0      	blx	r6
 80146ae:	1c43      	adds	r3, r0, #1
 80146b0:	89a3      	ldrh	r3, [r4, #12]
 80146b2:	d106      	bne.n	80146c2 <__sflush_r+0x66>
 80146b4:	6829      	ldr	r1, [r5, #0]
 80146b6:	291d      	cmp	r1, #29
 80146b8:	d82c      	bhi.n	8014714 <__sflush_r+0xb8>
 80146ba:	4a2a      	ldr	r2, [pc, #168]	; (8014764 <__sflush_r+0x108>)
 80146bc:	40ca      	lsrs	r2, r1
 80146be:	07d6      	lsls	r6, r2, #31
 80146c0:	d528      	bpl.n	8014714 <__sflush_r+0xb8>
 80146c2:	2200      	movs	r2, #0
 80146c4:	6062      	str	r2, [r4, #4]
 80146c6:	04d9      	lsls	r1, r3, #19
 80146c8:	6922      	ldr	r2, [r4, #16]
 80146ca:	6022      	str	r2, [r4, #0]
 80146cc:	d504      	bpl.n	80146d8 <__sflush_r+0x7c>
 80146ce:	1c42      	adds	r2, r0, #1
 80146d0:	d101      	bne.n	80146d6 <__sflush_r+0x7a>
 80146d2:	682b      	ldr	r3, [r5, #0]
 80146d4:	b903      	cbnz	r3, 80146d8 <__sflush_r+0x7c>
 80146d6:	6560      	str	r0, [r4, #84]	; 0x54
 80146d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80146da:	602f      	str	r7, [r5, #0]
 80146dc:	2900      	cmp	r1, #0
 80146de:	d0ca      	beq.n	8014676 <__sflush_r+0x1a>
 80146e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80146e4:	4299      	cmp	r1, r3
 80146e6:	d002      	beq.n	80146ee <__sflush_r+0x92>
 80146e8:	4628      	mov	r0, r5
 80146ea:	f000 f9d5 	bl	8014a98 <_free_r>
 80146ee:	2000      	movs	r0, #0
 80146f0:	6360      	str	r0, [r4, #52]	; 0x34
 80146f2:	e7c1      	b.n	8014678 <__sflush_r+0x1c>
 80146f4:	6a21      	ldr	r1, [r4, #32]
 80146f6:	2301      	movs	r3, #1
 80146f8:	4628      	mov	r0, r5
 80146fa:	47b0      	blx	r6
 80146fc:	1c41      	adds	r1, r0, #1
 80146fe:	d1c7      	bne.n	8014690 <__sflush_r+0x34>
 8014700:	682b      	ldr	r3, [r5, #0]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d0c4      	beq.n	8014690 <__sflush_r+0x34>
 8014706:	2b1d      	cmp	r3, #29
 8014708:	d001      	beq.n	801470e <__sflush_r+0xb2>
 801470a:	2b16      	cmp	r3, #22
 801470c:	d101      	bne.n	8014712 <__sflush_r+0xb6>
 801470e:	602f      	str	r7, [r5, #0]
 8014710:	e7b1      	b.n	8014676 <__sflush_r+0x1a>
 8014712:	89a3      	ldrh	r3, [r4, #12]
 8014714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014718:	81a3      	strh	r3, [r4, #12]
 801471a:	e7ad      	b.n	8014678 <__sflush_r+0x1c>
 801471c:	690f      	ldr	r7, [r1, #16]
 801471e:	2f00      	cmp	r7, #0
 8014720:	d0a9      	beq.n	8014676 <__sflush_r+0x1a>
 8014722:	0793      	lsls	r3, r2, #30
 8014724:	680e      	ldr	r6, [r1, #0]
 8014726:	bf08      	it	eq
 8014728:	694b      	ldreq	r3, [r1, #20]
 801472a:	600f      	str	r7, [r1, #0]
 801472c:	bf18      	it	ne
 801472e:	2300      	movne	r3, #0
 8014730:	eba6 0807 	sub.w	r8, r6, r7
 8014734:	608b      	str	r3, [r1, #8]
 8014736:	f1b8 0f00 	cmp.w	r8, #0
 801473a:	dd9c      	ble.n	8014676 <__sflush_r+0x1a>
 801473c:	6a21      	ldr	r1, [r4, #32]
 801473e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014740:	4643      	mov	r3, r8
 8014742:	463a      	mov	r2, r7
 8014744:	4628      	mov	r0, r5
 8014746:	47b0      	blx	r6
 8014748:	2800      	cmp	r0, #0
 801474a:	dc06      	bgt.n	801475a <__sflush_r+0xfe>
 801474c:	89a3      	ldrh	r3, [r4, #12]
 801474e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014752:	81a3      	strh	r3, [r4, #12]
 8014754:	f04f 30ff 	mov.w	r0, #4294967295
 8014758:	e78e      	b.n	8014678 <__sflush_r+0x1c>
 801475a:	4407      	add	r7, r0
 801475c:	eba8 0800 	sub.w	r8, r8, r0
 8014760:	e7e9      	b.n	8014736 <__sflush_r+0xda>
 8014762:	bf00      	nop
 8014764:	20400001 	.word	0x20400001

08014768 <_fflush_r>:
 8014768:	b538      	push	{r3, r4, r5, lr}
 801476a:	690b      	ldr	r3, [r1, #16]
 801476c:	4605      	mov	r5, r0
 801476e:	460c      	mov	r4, r1
 8014770:	b913      	cbnz	r3, 8014778 <_fflush_r+0x10>
 8014772:	2500      	movs	r5, #0
 8014774:	4628      	mov	r0, r5
 8014776:	bd38      	pop	{r3, r4, r5, pc}
 8014778:	b118      	cbz	r0, 8014782 <_fflush_r+0x1a>
 801477a:	6983      	ldr	r3, [r0, #24]
 801477c:	b90b      	cbnz	r3, 8014782 <_fflush_r+0x1a>
 801477e:	f000 f887 	bl	8014890 <__sinit>
 8014782:	4b14      	ldr	r3, [pc, #80]	; (80147d4 <_fflush_r+0x6c>)
 8014784:	429c      	cmp	r4, r3
 8014786:	d11b      	bne.n	80147c0 <_fflush_r+0x58>
 8014788:	686c      	ldr	r4, [r5, #4]
 801478a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d0ef      	beq.n	8014772 <_fflush_r+0xa>
 8014792:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014794:	07d0      	lsls	r0, r2, #31
 8014796:	d404      	bmi.n	80147a2 <_fflush_r+0x3a>
 8014798:	0599      	lsls	r1, r3, #22
 801479a:	d402      	bmi.n	80147a2 <_fflush_r+0x3a>
 801479c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801479e:	f000 f915 	bl	80149cc <__retarget_lock_acquire_recursive>
 80147a2:	4628      	mov	r0, r5
 80147a4:	4621      	mov	r1, r4
 80147a6:	f7ff ff59 	bl	801465c <__sflush_r>
 80147aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80147ac:	07da      	lsls	r2, r3, #31
 80147ae:	4605      	mov	r5, r0
 80147b0:	d4e0      	bmi.n	8014774 <_fflush_r+0xc>
 80147b2:	89a3      	ldrh	r3, [r4, #12]
 80147b4:	059b      	lsls	r3, r3, #22
 80147b6:	d4dd      	bmi.n	8014774 <_fflush_r+0xc>
 80147b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147ba:	f000 f908 	bl	80149ce <__retarget_lock_release_recursive>
 80147be:	e7d9      	b.n	8014774 <_fflush_r+0xc>
 80147c0:	4b05      	ldr	r3, [pc, #20]	; (80147d8 <_fflush_r+0x70>)
 80147c2:	429c      	cmp	r4, r3
 80147c4:	d101      	bne.n	80147ca <_fflush_r+0x62>
 80147c6:	68ac      	ldr	r4, [r5, #8]
 80147c8:	e7df      	b.n	801478a <_fflush_r+0x22>
 80147ca:	4b04      	ldr	r3, [pc, #16]	; (80147dc <_fflush_r+0x74>)
 80147cc:	429c      	cmp	r4, r3
 80147ce:	bf08      	it	eq
 80147d0:	68ec      	ldreq	r4, [r5, #12]
 80147d2:	e7da      	b.n	801478a <_fflush_r+0x22>
 80147d4:	08015568 	.word	0x08015568
 80147d8:	08015588 	.word	0x08015588
 80147dc:	08015548 	.word	0x08015548

080147e0 <std>:
 80147e0:	2300      	movs	r3, #0
 80147e2:	b510      	push	{r4, lr}
 80147e4:	4604      	mov	r4, r0
 80147e6:	e9c0 3300 	strd	r3, r3, [r0]
 80147ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80147ee:	6083      	str	r3, [r0, #8]
 80147f0:	8181      	strh	r1, [r0, #12]
 80147f2:	6643      	str	r3, [r0, #100]	; 0x64
 80147f4:	81c2      	strh	r2, [r0, #14]
 80147f6:	6183      	str	r3, [r0, #24]
 80147f8:	4619      	mov	r1, r3
 80147fa:	2208      	movs	r2, #8
 80147fc:	305c      	adds	r0, #92	; 0x5c
 80147fe:	f7ff fdc3 	bl	8014388 <memset>
 8014802:	4b05      	ldr	r3, [pc, #20]	; (8014818 <std+0x38>)
 8014804:	6263      	str	r3, [r4, #36]	; 0x24
 8014806:	4b05      	ldr	r3, [pc, #20]	; (801481c <std+0x3c>)
 8014808:	62a3      	str	r3, [r4, #40]	; 0x28
 801480a:	4b05      	ldr	r3, [pc, #20]	; (8014820 <std+0x40>)
 801480c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801480e:	4b05      	ldr	r3, [pc, #20]	; (8014824 <std+0x44>)
 8014810:	6224      	str	r4, [r4, #32]
 8014812:	6323      	str	r3, [r4, #48]	; 0x30
 8014814:	bd10      	pop	{r4, pc}
 8014816:	bf00      	nop
 8014818:	080151e9 	.word	0x080151e9
 801481c:	0801520b 	.word	0x0801520b
 8014820:	08015243 	.word	0x08015243
 8014824:	08015267 	.word	0x08015267

08014828 <_cleanup_r>:
 8014828:	4901      	ldr	r1, [pc, #4]	; (8014830 <_cleanup_r+0x8>)
 801482a:	f000 b8af 	b.w	801498c <_fwalk_reent>
 801482e:	bf00      	nop
 8014830:	08014769 	.word	0x08014769

08014834 <__sfmoreglue>:
 8014834:	b570      	push	{r4, r5, r6, lr}
 8014836:	1e4a      	subs	r2, r1, #1
 8014838:	2568      	movs	r5, #104	; 0x68
 801483a:	4355      	muls	r5, r2
 801483c:	460e      	mov	r6, r1
 801483e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014842:	f000 f979 	bl	8014b38 <_malloc_r>
 8014846:	4604      	mov	r4, r0
 8014848:	b140      	cbz	r0, 801485c <__sfmoreglue+0x28>
 801484a:	2100      	movs	r1, #0
 801484c:	e9c0 1600 	strd	r1, r6, [r0]
 8014850:	300c      	adds	r0, #12
 8014852:	60a0      	str	r0, [r4, #8]
 8014854:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014858:	f7ff fd96 	bl	8014388 <memset>
 801485c:	4620      	mov	r0, r4
 801485e:	bd70      	pop	{r4, r5, r6, pc}

08014860 <__sfp_lock_acquire>:
 8014860:	4801      	ldr	r0, [pc, #4]	; (8014868 <__sfp_lock_acquire+0x8>)
 8014862:	f000 b8b3 	b.w	80149cc <__retarget_lock_acquire_recursive>
 8014866:	bf00      	nop
 8014868:	20007300 	.word	0x20007300

0801486c <__sfp_lock_release>:
 801486c:	4801      	ldr	r0, [pc, #4]	; (8014874 <__sfp_lock_release+0x8>)
 801486e:	f000 b8ae 	b.w	80149ce <__retarget_lock_release_recursive>
 8014872:	bf00      	nop
 8014874:	20007300 	.word	0x20007300

08014878 <__sinit_lock_acquire>:
 8014878:	4801      	ldr	r0, [pc, #4]	; (8014880 <__sinit_lock_acquire+0x8>)
 801487a:	f000 b8a7 	b.w	80149cc <__retarget_lock_acquire_recursive>
 801487e:	bf00      	nop
 8014880:	200072fb 	.word	0x200072fb

08014884 <__sinit_lock_release>:
 8014884:	4801      	ldr	r0, [pc, #4]	; (801488c <__sinit_lock_release+0x8>)
 8014886:	f000 b8a2 	b.w	80149ce <__retarget_lock_release_recursive>
 801488a:	bf00      	nop
 801488c:	200072fb 	.word	0x200072fb

08014890 <__sinit>:
 8014890:	b510      	push	{r4, lr}
 8014892:	4604      	mov	r4, r0
 8014894:	f7ff fff0 	bl	8014878 <__sinit_lock_acquire>
 8014898:	69a3      	ldr	r3, [r4, #24]
 801489a:	b11b      	cbz	r3, 80148a4 <__sinit+0x14>
 801489c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148a0:	f7ff bff0 	b.w	8014884 <__sinit_lock_release>
 80148a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80148a8:	6523      	str	r3, [r4, #80]	; 0x50
 80148aa:	4b13      	ldr	r3, [pc, #76]	; (80148f8 <__sinit+0x68>)
 80148ac:	4a13      	ldr	r2, [pc, #76]	; (80148fc <__sinit+0x6c>)
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80148b2:	42a3      	cmp	r3, r4
 80148b4:	bf04      	itt	eq
 80148b6:	2301      	moveq	r3, #1
 80148b8:	61a3      	streq	r3, [r4, #24]
 80148ba:	4620      	mov	r0, r4
 80148bc:	f000 f820 	bl	8014900 <__sfp>
 80148c0:	6060      	str	r0, [r4, #4]
 80148c2:	4620      	mov	r0, r4
 80148c4:	f000 f81c 	bl	8014900 <__sfp>
 80148c8:	60a0      	str	r0, [r4, #8]
 80148ca:	4620      	mov	r0, r4
 80148cc:	f000 f818 	bl	8014900 <__sfp>
 80148d0:	2200      	movs	r2, #0
 80148d2:	60e0      	str	r0, [r4, #12]
 80148d4:	2104      	movs	r1, #4
 80148d6:	6860      	ldr	r0, [r4, #4]
 80148d8:	f7ff ff82 	bl	80147e0 <std>
 80148dc:	68a0      	ldr	r0, [r4, #8]
 80148de:	2201      	movs	r2, #1
 80148e0:	2109      	movs	r1, #9
 80148e2:	f7ff ff7d 	bl	80147e0 <std>
 80148e6:	68e0      	ldr	r0, [r4, #12]
 80148e8:	2202      	movs	r2, #2
 80148ea:	2112      	movs	r1, #18
 80148ec:	f7ff ff78 	bl	80147e0 <std>
 80148f0:	2301      	movs	r3, #1
 80148f2:	61a3      	str	r3, [r4, #24]
 80148f4:	e7d2      	b.n	801489c <__sinit+0xc>
 80148f6:	bf00      	nop
 80148f8:	08015544 	.word	0x08015544
 80148fc:	08014829 	.word	0x08014829

08014900 <__sfp>:
 8014900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014902:	4607      	mov	r7, r0
 8014904:	f7ff ffac 	bl	8014860 <__sfp_lock_acquire>
 8014908:	4b1e      	ldr	r3, [pc, #120]	; (8014984 <__sfp+0x84>)
 801490a:	681e      	ldr	r6, [r3, #0]
 801490c:	69b3      	ldr	r3, [r6, #24]
 801490e:	b913      	cbnz	r3, 8014916 <__sfp+0x16>
 8014910:	4630      	mov	r0, r6
 8014912:	f7ff ffbd 	bl	8014890 <__sinit>
 8014916:	3648      	adds	r6, #72	; 0x48
 8014918:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801491c:	3b01      	subs	r3, #1
 801491e:	d503      	bpl.n	8014928 <__sfp+0x28>
 8014920:	6833      	ldr	r3, [r6, #0]
 8014922:	b30b      	cbz	r3, 8014968 <__sfp+0x68>
 8014924:	6836      	ldr	r6, [r6, #0]
 8014926:	e7f7      	b.n	8014918 <__sfp+0x18>
 8014928:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801492c:	b9d5      	cbnz	r5, 8014964 <__sfp+0x64>
 801492e:	4b16      	ldr	r3, [pc, #88]	; (8014988 <__sfp+0x88>)
 8014930:	60e3      	str	r3, [r4, #12]
 8014932:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014936:	6665      	str	r5, [r4, #100]	; 0x64
 8014938:	f000 f847 	bl	80149ca <__retarget_lock_init_recursive>
 801493c:	f7ff ff96 	bl	801486c <__sfp_lock_release>
 8014940:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014944:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014948:	6025      	str	r5, [r4, #0]
 801494a:	61a5      	str	r5, [r4, #24]
 801494c:	2208      	movs	r2, #8
 801494e:	4629      	mov	r1, r5
 8014950:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014954:	f7ff fd18 	bl	8014388 <memset>
 8014958:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801495c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014960:	4620      	mov	r0, r4
 8014962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014964:	3468      	adds	r4, #104	; 0x68
 8014966:	e7d9      	b.n	801491c <__sfp+0x1c>
 8014968:	2104      	movs	r1, #4
 801496a:	4638      	mov	r0, r7
 801496c:	f7ff ff62 	bl	8014834 <__sfmoreglue>
 8014970:	4604      	mov	r4, r0
 8014972:	6030      	str	r0, [r6, #0]
 8014974:	2800      	cmp	r0, #0
 8014976:	d1d5      	bne.n	8014924 <__sfp+0x24>
 8014978:	f7ff ff78 	bl	801486c <__sfp_lock_release>
 801497c:	230c      	movs	r3, #12
 801497e:	603b      	str	r3, [r7, #0]
 8014980:	e7ee      	b.n	8014960 <__sfp+0x60>
 8014982:	bf00      	nop
 8014984:	08015544 	.word	0x08015544
 8014988:	ffff0001 	.word	0xffff0001

0801498c <_fwalk_reent>:
 801498c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014990:	4606      	mov	r6, r0
 8014992:	4688      	mov	r8, r1
 8014994:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014998:	2700      	movs	r7, #0
 801499a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801499e:	f1b9 0901 	subs.w	r9, r9, #1
 80149a2:	d505      	bpl.n	80149b0 <_fwalk_reent+0x24>
 80149a4:	6824      	ldr	r4, [r4, #0]
 80149a6:	2c00      	cmp	r4, #0
 80149a8:	d1f7      	bne.n	801499a <_fwalk_reent+0xe>
 80149aa:	4638      	mov	r0, r7
 80149ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149b0:	89ab      	ldrh	r3, [r5, #12]
 80149b2:	2b01      	cmp	r3, #1
 80149b4:	d907      	bls.n	80149c6 <_fwalk_reent+0x3a>
 80149b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80149ba:	3301      	adds	r3, #1
 80149bc:	d003      	beq.n	80149c6 <_fwalk_reent+0x3a>
 80149be:	4629      	mov	r1, r5
 80149c0:	4630      	mov	r0, r6
 80149c2:	47c0      	blx	r8
 80149c4:	4307      	orrs	r7, r0
 80149c6:	3568      	adds	r5, #104	; 0x68
 80149c8:	e7e9      	b.n	801499e <_fwalk_reent+0x12>

080149ca <__retarget_lock_init_recursive>:
 80149ca:	4770      	bx	lr

080149cc <__retarget_lock_acquire_recursive>:
 80149cc:	4770      	bx	lr

080149ce <__retarget_lock_release_recursive>:
 80149ce:	4770      	bx	lr

080149d0 <__swhatbuf_r>:
 80149d0:	b570      	push	{r4, r5, r6, lr}
 80149d2:	460e      	mov	r6, r1
 80149d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149d8:	2900      	cmp	r1, #0
 80149da:	b096      	sub	sp, #88	; 0x58
 80149dc:	4614      	mov	r4, r2
 80149de:	461d      	mov	r5, r3
 80149e0:	da07      	bge.n	80149f2 <__swhatbuf_r+0x22>
 80149e2:	2300      	movs	r3, #0
 80149e4:	602b      	str	r3, [r5, #0]
 80149e6:	89b3      	ldrh	r3, [r6, #12]
 80149e8:	061a      	lsls	r2, r3, #24
 80149ea:	d410      	bmi.n	8014a0e <__swhatbuf_r+0x3e>
 80149ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80149f0:	e00e      	b.n	8014a10 <__swhatbuf_r+0x40>
 80149f2:	466a      	mov	r2, sp
 80149f4:	f000 fc5e 	bl	80152b4 <_fstat_r>
 80149f8:	2800      	cmp	r0, #0
 80149fa:	dbf2      	blt.n	80149e2 <__swhatbuf_r+0x12>
 80149fc:	9a01      	ldr	r2, [sp, #4]
 80149fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014a02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014a06:	425a      	negs	r2, r3
 8014a08:	415a      	adcs	r2, r3
 8014a0a:	602a      	str	r2, [r5, #0]
 8014a0c:	e7ee      	b.n	80149ec <__swhatbuf_r+0x1c>
 8014a0e:	2340      	movs	r3, #64	; 0x40
 8014a10:	2000      	movs	r0, #0
 8014a12:	6023      	str	r3, [r4, #0]
 8014a14:	b016      	add	sp, #88	; 0x58
 8014a16:	bd70      	pop	{r4, r5, r6, pc}

08014a18 <__smakebuf_r>:
 8014a18:	898b      	ldrh	r3, [r1, #12]
 8014a1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014a1c:	079d      	lsls	r5, r3, #30
 8014a1e:	4606      	mov	r6, r0
 8014a20:	460c      	mov	r4, r1
 8014a22:	d507      	bpl.n	8014a34 <__smakebuf_r+0x1c>
 8014a24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014a28:	6023      	str	r3, [r4, #0]
 8014a2a:	6123      	str	r3, [r4, #16]
 8014a2c:	2301      	movs	r3, #1
 8014a2e:	6163      	str	r3, [r4, #20]
 8014a30:	b002      	add	sp, #8
 8014a32:	bd70      	pop	{r4, r5, r6, pc}
 8014a34:	ab01      	add	r3, sp, #4
 8014a36:	466a      	mov	r2, sp
 8014a38:	f7ff ffca 	bl	80149d0 <__swhatbuf_r>
 8014a3c:	9900      	ldr	r1, [sp, #0]
 8014a3e:	4605      	mov	r5, r0
 8014a40:	4630      	mov	r0, r6
 8014a42:	f000 f879 	bl	8014b38 <_malloc_r>
 8014a46:	b948      	cbnz	r0, 8014a5c <__smakebuf_r+0x44>
 8014a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a4c:	059a      	lsls	r2, r3, #22
 8014a4e:	d4ef      	bmi.n	8014a30 <__smakebuf_r+0x18>
 8014a50:	f023 0303 	bic.w	r3, r3, #3
 8014a54:	f043 0302 	orr.w	r3, r3, #2
 8014a58:	81a3      	strh	r3, [r4, #12]
 8014a5a:	e7e3      	b.n	8014a24 <__smakebuf_r+0xc>
 8014a5c:	4b0d      	ldr	r3, [pc, #52]	; (8014a94 <__smakebuf_r+0x7c>)
 8014a5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014a60:	89a3      	ldrh	r3, [r4, #12]
 8014a62:	6020      	str	r0, [r4, #0]
 8014a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a68:	81a3      	strh	r3, [r4, #12]
 8014a6a:	9b00      	ldr	r3, [sp, #0]
 8014a6c:	6163      	str	r3, [r4, #20]
 8014a6e:	9b01      	ldr	r3, [sp, #4]
 8014a70:	6120      	str	r0, [r4, #16]
 8014a72:	b15b      	cbz	r3, 8014a8c <__smakebuf_r+0x74>
 8014a74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a78:	4630      	mov	r0, r6
 8014a7a:	f000 fc2d 	bl	80152d8 <_isatty_r>
 8014a7e:	b128      	cbz	r0, 8014a8c <__smakebuf_r+0x74>
 8014a80:	89a3      	ldrh	r3, [r4, #12]
 8014a82:	f023 0303 	bic.w	r3, r3, #3
 8014a86:	f043 0301 	orr.w	r3, r3, #1
 8014a8a:	81a3      	strh	r3, [r4, #12]
 8014a8c:	89a0      	ldrh	r0, [r4, #12]
 8014a8e:	4305      	orrs	r5, r0
 8014a90:	81a5      	strh	r5, [r4, #12]
 8014a92:	e7cd      	b.n	8014a30 <__smakebuf_r+0x18>
 8014a94:	08014829 	.word	0x08014829

08014a98 <_free_r>:
 8014a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014a9a:	2900      	cmp	r1, #0
 8014a9c:	d048      	beq.n	8014b30 <_free_r+0x98>
 8014a9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014aa2:	9001      	str	r0, [sp, #4]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	f1a1 0404 	sub.w	r4, r1, #4
 8014aaa:	bfb8      	it	lt
 8014aac:	18e4      	addlt	r4, r4, r3
 8014aae:	f000 fc35 	bl	801531c <__malloc_lock>
 8014ab2:	4a20      	ldr	r2, [pc, #128]	; (8014b34 <_free_r+0x9c>)
 8014ab4:	9801      	ldr	r0, [sp, #4]
 8014ab6:	6813      	ldr	r3, [r2, #0]
 8014ab8:	4615      	mov	r5, r2
 8014aba:	b933      	cbnz	r3, 8014aca <_free_r+0x32>
 8014abc:	6063      	str	r3, [r4, #4]
 8014abe:	6014      	str	r4, [r2, #0]
 8014ac0:	b003      	add	sp, #12
 8014ac2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014ac6:	f000 bc2f 	b.w	8015328 <__malloc_unlock>
 8014aca:	42a3      	cmp	r3, r4
 8014acc:	d90b      	bls.n	8014ae6 <_free_r+0x4e>
 8014ace:	6821      	ldr	r1, [r4, #0]
 8014ad0:	1862      	adds	r2, r4, r1
 8014ad2:	4293      	cmp	r3, r2
 8014ad4:	bf04      	itt	eq
 8014ad6:	681a      	ldreq	r2, [r3, #0]
 8014ad8:	685b      	ldreq	r3, [r3, #4]
 8014ada:	6063      	str	r3, [r4, #4]
 8014adc:	bf04      	itt	eq
 8014ade:	1852      	addeq	r2, r2, r1
 8014ae0:	6022      	streq	r2, [r4, #0]
 8014ae2:	602c      	str	r4, [r5, #0]
 8014ae4:	e7ec      	b.n	8014ac0 <_free_r+0x28>
 8014ae6:	461a      	mov	r2, r3
 8014ae8:	685b      	ldr	r3, [r3, #4]
 8014aea:	b10b      	cbz	r3, 8014af0 <_free_r+0x58>
 8014aec:	42a3      	cmp	r3, r4
 8014aee:	d9fa      	bls.n	8014ae6 <_free_r+0x4e>
 8014af0:	6811      	ldr	r1, [r2, #0]
 8014af2:	1855      	adds	r5, r2, r1
 8014af4:	42a5      	cmp	r5, r4
 8014af6:	d10b      	bne.n	8014b10 <_free_r+0x78>
 8014af8:	6824      	ldr	r4, [r4, #0]
 8014afa:	4421      	add	r1, r4
 8014afc:	1854      	adds	r4, r2, r1
 8014afe:	42a3      	cmp	r3, r4
 8014b00:	6011      	str	r1, [r2, #0]
 8014b02:	d1dd      	bne.n	8014ac0 <_free_r+0x28>
 8014b04:	681c      	ldr	r4, [r3, #0]
 8014b06:	685b      	ldr	r3, [r3, #4]
 8014b08:	6053      	str	r3, [r2, #4]
 8014b0a:	4421      	add	r1, r4
 8014b0c:	6011      	str	r1, [r2, #0]
 8014b0e:	e7d7      	b.n	8014ac0 <_free_r+0x28>
 8014b10:	d902      	bls.n	8014b18 <_free_r+0x80>
 8014b12:	230c      	movs	r3, #12
 8014b14:	6003      	str	r3, [r0, #0]
 8014b16:	e7d3      	b.n	8014ac0 <_free_r+0x28>
 8014b18:	6825      	ldr	r5, [r4, #0]
 8014b1a:	1961      	adds	r1, r4, r5
 8014b1c:	428b      	cmp	r3, r1
 8014b1e:	bf04      	itt	eq
 8014b20:	6819      	ldreq	r1, [r3, #0]
 8014b22:	685b      	ldreq	r3, [r3, #4]
 8014b24:	6063      	str	r3, [r4, #4]
 8014b26:	bf04      	itt	eq
 8014b28:	1949      	addeq	r1, r1, r5
 8014b2a:	6021      	streq	r1, [r4, #0]
 8014b2c:	6054      	str	r4, [r2, #4]
 8014b2e:	e7c7      	b.n	8014ac0 <_free_r+0x28>
 8014b30:	b003      	add	sp, #12
 8014b32:	bd30      	pop	{r4, r5, pc}
 8014b34:	20007010 	.word	0x20007010

08014b38 <_malloc_r>:
 8014b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b3a:	1ccd      	adds	r5, r1, #3
 8014b3c:	f025 0503 	bic.w	r5, r5, #3
 8014b40:	3508      	adds	r5, #8
 8014b42:	2d0c      	cmp	r5, #12
 8014b44:	bf38      	it	cc
 8014b46:	250c      	movcc	r5, #12
 8014b48:	2d00      	cmp	r5, #0
 8014b4a:	4606      	mov	r6, r0
 8014b4c:	db01      	blt.n	8014b52 <_malloc_r+0x1a>
 8014b4e:	42a9      	cmp	r1, r5
 8014b50:	d903      	bls.n	8014b5a <_malloc_r+0x22>
 8014b52:	230c      	movs	r3, #12
 8014b54:	6033      	str	r3, [r6, #0]
 8014b56:	2000      	movs	r0, #0
 8014b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b5a:	f000 fbdf 	bl	801531c <__malloc_lock>
 8014b5e:	4921      	ldr	r1, [pc, #132]	; (8014be4 <_malloc_r+0xac>)
 8014b60:	680a      	ldr	r2, [r1, #0]
 8014b62:	4614      	mov	r4, r2
 8014b64:	b99c      	cbnz	r4, 8014b8e <_malloc_r+0x56>
 8014b66:	4f20      	ldr	r7, [pc, #128]	; (8014be8 <_malloc_r+0xb0>)
 8014b68:	683b      	ldr	r3, [r7, #0]
 8014b6a:	b923      	cbnz	r3, 8014b76 <_malloc_r+0x3e>
 8014b6c:	4621      	mov	r1, r4
 8014b6e:	4630      	mov	r0, r6
 8014b70:	f000 fb2a 	bl	80151c8 <_sbrk_r>
 8014b74:	6038      	str	r0, [r7, #0]
 8014b76:	4629      	mov	r1, r5
 8014b78:	4630      	mov	r0, r6
 8014b7a:	f000 fb25 	bl	80151c8 <_sbrk_r>
 8014b7e:	1c43      	adds	r3, r0, #1
 8014b80:	d123      	bne.n	8014bca <_malloc_r+0x92>
 8014b82:	230c      	movs	r3, #12
 8014b84:	6033      	str	r3, [r6, #0]
 8014b86:	4630      	mov	r0, r6
 8014b88:	f000 fbce 	bl	8015328 <__malloc_unlock>
 8014b8c:	e7e3      	b.n	8014b56 <_malloc_r+0x1e>
 8014b8e:	6823      	ldr	r3, [r4, #0]
 8014b90:	1b5b      	subs	r3, r3, r5
 8014b92:	d417      	bmi.n	8014bc4 <_malloc_r+0x8c>
 8014b94:	2b0b      	cmp	r3, #11
 8014b96:	d903      	bls.n	8014ba0 <_malloc_r+0x68>
 8014b98:	6023      	str	r3, [r4, #0]
 8014b9a:	441c      	add	r4, r3
 8014b9c:	6025      	str	r5, [r4, #0]
 8014b9e:	e004      	b.n	8014baa <_malloc_r+0x72>
 8014ba0:	6863      	ldr	r3, [r4, #4]
 8014ba2:	42a2      	cmp	r2, r4
 8014ba4:	bf0c      	ite	eq
 8014ba6:	600b      	streq	r3, [r1, #0]
 8014ba8:	6053      	strne	r3, [r2, #4]
 8014baa:	4630      	mov	r0, r6
 8014bac:	f000 fbbc 	bl	8015328 <__malloc_unlock>
 8014bb0:	f104 000b 	add.w	r0, r4, #11
 8014bb4:	1d23      	adds	r3, r4, #4
 8014bb6:	f020 0007 	bic.w	r0, r0, #7
 8014bba:	1ac2      	subs	r2, r0, r3
 8014bbc:	d0cc      	beq.n	8014b58 <_malloc_r+0x20>
 8014bbe:	1a1b      	subs	r3, r3, r0
 8014bc0:	50a3      	str	r3, [r4, r2]
 8014bc2:	e7c9      	b.n	8014b58 <_malloc_r+0x20>
 8014bc4:	4622      	mov	r2, r4
 8014bc6:	6864      	ldr	r4, [r4, #4]
 8014bc8:	e7cc      	b.n	8014b64 <_malloc_r+0x2c>
 8014bca:	1cc4      	adds	r4, r0, #3
 8014bcc:	f024 0403 	bic.w	r4, r4, #3
 8014bd0:	42a0      	cmp	r0, r4
 8014bd2:	d0e3      	beq.n	8014b9c <_malloc_r+0x64>
 8014bd4:	1a21      	subs	r1, r4, r0
 8014bd6:	4630      	mov	r0, r6
 8014bd8:	f000 faf6 	bl	80151c8 <_sbrk_r>
 8014bdc:	3001      	adds	r0, #1
 8014bde:	d1dd      	bne.n	8014b9c <_malloc_r+0x64>
 8014be0:	e7cf      	b.n	8014b82 <_malloc_r+0x4a>
 8014be2:	bf00      	nop
 8014be4:	20007010 	.word	0x20007010
 8014be8:	20007014 	.word	0x20007014

08014bec <__sfputc_r>:
 8014bec:	6893      	ldr	r3, [r2, #8]
 8014bee:	3b01      	subs	r3, #1
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	b410      	push	{r4}
 8014bf4:	6093      	str	r3, [r2, #8]
 8014bf6:	da08      	bge.n	8014c0a <__sfputc_r+0x1e>
 8014bf8:	6994      	ldr	r4, [r2, #24]
 8014bfa:	42a3      	cmp	r3, r4
 8014bfc:	db01      	blt.n	8014c02 <__sfputc_r+0x16>
 8014bfe:	290a      	cmp	r1, #10
 8014c00:	d103      	bne.n	8014c0a <__sfputc_r+0x1e>
 8014c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c06:	f7ff bc69 	b.w	80144dc <__swbuf_r>
 8014c0a:	6813      	ldr	r3, [r2, #0]
 8014c0c:	1c58      	adds	r0, r3, #1
 8014c0e:	6010      	str	r0, [r2, #0]
 8014c10:	7019      	strb	r1, [r3, #0]
 8014c12:	4608      	mov	r0, r1
 8014c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c18:	4770      	bx	lr

08014c1a <__sfputs_r>:
 8014c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c1c:	4606      	mov	r6, r0
 8014c1e:	460f      	mov	r7, r1
 8014c20:	4614      	mov	r4, r2
 8014c22:	18d5      	adds	r5, r2, r3
 8014c24:	42ac      	cmp	r4, r5
 8014c26:	d101      	bne.n	8014c2c <__sfputs_r+0x12>
 8014c28:	2000      	movs	r0, #0
 8014c2a:	e007      	b.n	8014c3c <__sfputs_r+0x22>
 8014c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c30:	463a      	mov	r2, r7
 8014c32:	4630      	mov	r0, r6
 8014c34:	f7ff ffda 	bl	8014bec <__sfputc_r>
 8014c38:	1c43      	adds	r3, r0, #1
 8014c3a:	d1f3      	bne.n	8014c24 <__sfputs_r+0xa>
 8014c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014c40 <_vfiprintf_r>:
 8014c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c44:	460d      	mov	r5, r1
 8014c46:	b09d      	sub	sp, #116	; 0x74
 8014c48:	4614      	mov	r4, r2
 8014c4a:	4698      	mov	r8, r3
 8014c4c:	4606      	mov	r6, r0
 8014c4e:	b118      	cbz	r0, 8014c58 <_vfiprintf_r+0x18>
 8014c50:	6983      	ldr	r3, [r0, #24]
 8014c52:	b90b      	cbnz	r3, 8014c58 <_vfiprintf_r+0x18>
 8014c54:	f7ff fe1c 	bl	8014890 <__sinit>
 8014c58:	4b89      	ldr	r3, [pc, #548]	; (8014e80 <_vfiprintf_r+0x240>)
 8014c5a:	429d      	cmp	r5, r3
 8014c5c:	d11b      	bne.n	8014c96 <_vfiprintf_r+0x56>
 8014c5e:	6875      	ldr	r5, [r6, #4]
 8014c60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c62:	07d9      	lsls	r1, r3, #31
 8014c64:	d405      	bmi.n	8014c72 <_vfiprintf_r+0x32>
 8014c66:	89ab      	ldrh	r3, [r5, #12]
 8014c68:	059a      	lsls	r2, r3, #22
 8014c6a:	d402      	bmi.n	8014c72 <_vfiprintf_r+0x32>
 8014c6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c6e:	f7ff fead 	bl	80149cc <__retarget_lock_acquire_recursive>
 8014c72:	89ab      	ldrh	r3, [r5, #12]
 8014c74:	071b      	lsls	r3, r3, #28
 8014c76:	d501      	bpl.n	8014c7c <_vfiprintf_r+0x3c>
 8014c78:	692b      	ldr	r3, [r5, #16]
 8014c7a:	b9eb      	cbnz	r3, 8014cb8 <_vfiprintf_r+0x78>
 8014c7c:	4629      	mov	r1, r5
 8014c7e:	4630      	mov	r0, r6
 8014c80:	f7ff fc7e 	bl	8014580 <__swsetup_r>
 8014c84:	b1c0      	cbz	r0, 8014cb8 <_vfiprintf_r+0x78>
 8014c86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c88:	07dc      	lsls	r4, r3, #31
 8014c8a:	d50e      	bpl.n	8014caa <_vfiprintf_r+0x6a>
 8014c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8014c90:	b01d      	add	sp, #116	; 0x74
 8014c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c96:	4b7b      	ldr	r3, [pc, #492]	; (8014e84 <_vfiprintf_r+0x244>)
 8014c98:	429d      	cmp	r5, r3
 8014c9a:	d101      	bne.n	8014ca0 <_vfiprintf_r+0x60>
 8014c9c:	68b5      	ldr	r5, [r6, #8]
 8014c9e:	e7df      	b.n	8014c60 <_vfiprintf_r+0x20>
 8014ca0:	4b79      	ldr	r3, [pc, #484]	; (8014e88 <_vfiprintf_r+0x248>)
 8014ca2:	429d      	cmp	r5, r3
 8014ca4:	bf08      	it	eq
 8014ca6:	68f5      	ldreq	r5, [r6, #12]
 8014ca8:	e7da      	b.n	8014c60 <_vfiprintf_r+0x20>
 8014caa:	89ab      	ldrh	r3, [r5, #12]
 8014cac:	0598      	lsls	r0, r3, #22
 8014cae:	d4ed      	bmi.n	8014c8c <_vfiprintf_r+0x4c>
 8014cb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014cb2:	f7ff fe8c 	bl	80149ce <__retarget_lock_release_recursive>
 8014cb6:	e7e9      	b.n	8014c8c <_vfiprintf_r+0x4c>
 8014cb8:	2300      	movs	r3, #0
 8014cba:	9309      	str	r3, [sp, #36]	; 0x24
 8014cbc:	2320      	movs	r3, #32
 8014cbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014cc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8014cc6:	2330      	movs	r3, #48	; 0x30
 8014cc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014e8c <_vfiprintf_r+0x24c>
 8014ccc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014cd0:	f04f 0901 	mov.w	r9, #1
 8014cd4:	4623      	mov	r3, r4
 8014cd6:	469a      	mov	sl, r3
 8014cd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014cdc:	b10a      	cbz	r2, 8014ce2 <_vfiprintf_r+0xa2>
 8014cde:	2a25      	cmp	r2, #37	; 0x25
 8014ce0:	d1f9      	bne.n	8014cd6 <_vfiprintf_r+0x96>
 8014ce2:	ebba 0b04 	subs.w	fp, sl, r4
 8014ce6:	d00b      	beq.n	8014d00 <_vfiprintf_r+0xc0>
 8014ce8:	465b      	mov	r3, fp
 8014cea:	4622      	mov	r2, r4
 8014cec:	4629      	mov	r1, r5
 8014cee:	4630      	mov	r0, r6
 8014cf0:	f7ff ff93 	bl	8014c1a <__sfputs_r>
 8014cf4:	3001      	adds	r0, #1
 8014cf6:	f000 80aa 	beq.w	8014e4e <_vfiprintf_r+0x20e>
 8014cfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014cfc:	445a      	add	r2, fp
 8014cfe:	9209      	str	r2, [sp, #36]	; 0x24
 8014d00:	f89a 3000 	ldrb.w	r3, [sl]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	f000 80a2 	beq.w	8014e4e <_vfiprintf_r+0x20e>
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8014d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d14:	f10a 0a01 	add.w	sl, sl, #1
 8014d18:	9304      	str	r3, [sp, #16]
 8014d1a:	9307      	str	r3, [sp, #28]
 8014d1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014d20:	931a      	str	r3, [sp, #104]	; 0x68
 8014d22:	4654      	mov	r4, sl
 8014d24:	2205      	movs	r2, #5
 8014d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d2a:	4858      	ldr	r0, [pc, #352]	; (8014e8c <_vfiprintf_r+0x24c>)
 8014d2c:	f7eb fa58 	bl	80001e0 <memchr>
 8014d30:	9a04      	ldr	r2, [sp, #16]
 8014d32:	b9d8      	cbnz	r0, 8014d6c <_vfiprintf_r+0x12c>
 8014d34:	06d1      	lsls	r1, r2, #27
 8014d36:	bf44      	itt	mi
 8014d38:	2320      	movmi	r3, #32
 8014d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d3e:	0713      	lsls	r3, r2, #28
 8014d40:	bf44      	itt	mi
 8014d42:	232b      	movmi	r3, #43	; 0x2b
 8014d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d48:	f89a 3000 	ldrb.w	r3, [sl]
 8014d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8014d4e:	d015      	beq.n	8014d7c <_vfiprintf_r+0x13c>
 8014d50:	9a07      	ldr	r2, [sp, #28]
 8014d52:	4654      	mov	r4, sl
 8014d54:	2000      	movs	r0, #0
 8014d56:	f04f 0c0a 	mov.w	ip, #10
 8014d5a:	4621      	mov	r1, r4
 8014d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d60:	3b30      	subs	r3, #48	; 0x30
 8014d62:	2b09      	cmp	r3, #9
 8014d64:	d94e      	bls.n	8014e04 <_vfiprintf_r+0x1c4>
 8014d66:	b1b0      	cbz	r0, 8014d96 <_vfiprintf_r+0x156>
 8014d68:	9207      	str	r2, [sp, #28]
 8014d6a:	e014      	b.n	8014d96 <_vfiprintf_r+0x156>
 8014d6c:	eba0 0308 	sub.w	r3, r0, r8
 8014d70:	fa09 f303 	lsl.w	r3, r9, r3
 8014d74:	4313      	orrs	r3, r2
 8014d76:	9304      	str	r3, [sp, #16]
 8014d78:	46a2      	mov	sl, r4
 8014d7a:	e7d2      	b.n	8014d22 <_vfiprintf_r+0xe2>
 8014d7c:	9b03      	ldr	r3, [sp, #12]
 8014d7e:	1d19      	adds	r1, r3, #4
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	9103      	str	r1, [sp, #12]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	bfbb      	ittet	lt
 8014d88:	425b      	neglt	r3, r3
 8014d8a:	f042 0202 	orrlt.w	r2, r2, #2
 8014d8e:	9307      	strge	r3, [sp, #28]
 8014d90:	9307      	strlt	r3, [sp, #28]
 8014d92:	bfb8      	it	lt
 8014d94:	9204      	strlt	r2, [sp, #16]
 8014d96:	7823      	ldrb	r3, [r4, #0]
 8014d98:	2b2e      	cmp	r3, #46	; 0x2e
 8014d9a:	d10c      	bne.n	8014db6 <_vfiprintf_r+0x176>
 8014d9c:	7863      	ldrb	r3, [r4, #1]
 8014d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8014da0:	d135      	bne.n	8014e0e <_vfiprintf_r+0x1ce>
 8014da2:	9b03      	ldr	r3, [sp, #12]
 8014da4:	1d1a      	adds	r2, r3, #4
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	9203      	str	r2, [sp, #12]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	bfb8      	it	lt
 8014dae:	f04f 33ff 	movlt.w	r3, #4294967295
 8014db2:	3402      	adds	r4, #2
 8014db4:	9305      	str	r3, [sp, #20]
 8014db6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014e9c <_vfiprintf_r+0x25c>
 8014dba:	7821      	ldrb	r1, [r4, #0]
 8014dbc:	2203      	movs	r2, #3
 8014dbe:	4650      	mov	r0, sl
 8014dc0:	f7eb fa0e 	bl	80001e0 <memchr>
 8014dc4:	b140      	cbz	r0, 8014dd8 <_vfiprintf_r+0x198>
 8014dc6:	2340      	movs	r3, #64	; 0x40
 8014dc8:	eba0 000a 	sub.w	r0, r0, sl
 8014dcc:	fa03 f000 	lsl.w	r0, r3, r0
 8014dd0:	9b04      	ldr	r3, [sp, #16]
 8014dd2:	4303      	orrs	r3, r0
 8014dd4:	3401      	adds	r4, #1
 8014dd6:	9304      	str	r3, [sp, #16]
 8014dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ddc:	482c      	ldr	r0, [pc, #176]	; (8014e90 <_vfiprintf_r+0x250>)
 8014dde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014de2:	2206      	movs	r2, #6
 8014de4:	f7eb f9fc 	bl	80001e0 <memchr>
 8014de8:	2800      	cmp	r0, #0
 8014dea:	d03f      	beq.n	8014e6c <_vfiprintf_r+0x22c>
 8014dec:	4b29      	ldr	r3, [pc, #164]	; (8014e94 <_vfiprintf_r+0x254>)
 8014dee:	bb1b      	cbnz	r3, 8014e38 <_vfiprintf_r+0x1f8>
 8014df0:	9b03      	ldr	r3, [sp, #12]
 8014df2:	3307      	adds	r3, #7
 8014df4:	f023 0307 	bic.w	r3, r3, #7
 8014df8:	3308      	adds	r3, #8
 8014dfa:	9303      	str	r3, [sp, #12]
 8014dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dfe:	443b      	add	r3, r7
 8014e00:	9309      	str	r3, [sp, #36]	; 0x24
 8014e02:	e767      	b.n	8014cd4 <_vfiprintf_r+0x94>
 8014e04:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e08:	460c      	mov	r4, r1
 8014e0a:	2001      	movs	r0, #1
 8014e0c:	e7a5      	b.n	8014d5a <_vfiprintf_r+0x11a>
 8014e0e:	2300      	movs	r3, #0
 8014e10:	3401      	adds	r4, #1
 8014e12:	9305      	str	r3, [sp, #20]
 8014e14:	4619      	mov	r1, r3
 8014e16:	f04f 0c0a 	mov.w	ip, #10
 8014e1a:	4620      	mov	r0, r4
 8014e1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e20:	3a30      	subs	r2, #48	; 0x30
 8014e22:	2a09      	cmp	r2, #9
 8014e24:	d903      	bls.n	8014e2e <_vfiprintf_r+0x1ee>
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d0c5      	beq.n	8014db6 <_vfiprintf_r+0x176>
 8014e2a:	9105      	str	r1, [sp, #20]
 8014e2c:	e7c3      	b.n	8014db6 <_vfiprintf_r+0x176>
 8014e2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014e32:	4604      	mov	r4, r0
 8014e34:	2301      	movs	r3, #1
 8014e36:	e7f0      	b.n	8014e1a <_vfiprintf_r+0x1da>
 8014e38:	ab03      	add	r3, sp, #12
 8014e3a:	9300      	str	r3, [sp, #0]
 8014e3c:	462a      	mov	r2, r5
 8014e3e:	4b16      	ldr	r3, [pc, #88]	; (8014e98 <_vfiprintf_r+0x258>)
 8014e40:	a904      	add	r1, sp, #16
 8014e42:	4630      	mov	r0, r6
 8014e44:	f3af 8000 	nop.w
 8014e48:	4607      	mov	r7, r0
 8014e4a:	1c78      	adds	r0, r7, #1
 8014e4c:	d1d6      	bne.n	8014dfc <_vfiprintf_r+0x1bc>
 8014e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e50:	07d9      	lsls	r1, r3, #31
 8014e52:	d405      	bmi.n	8014e60 <_vfiprintf_r+0x220>
 8014e54:	89ab      	ldrh	r3, [r5, #12]
 8014e56:	059a      	lsls	r2, r3, #22
 8014e58:	d402      	bmi.n	8014e60 <_vfiprintf_r+0x220>
 8014e5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014e5c:	f7ff fdb7 	bl	80149ce <__retarget_lock_release_recursive>
 8014e60:	89ab      	ldrh	r3, [r5, #12]
 8014e62:	065b      	lsls	r3, r3, #25
 8014e64:	f53f af12 	bmi.w	8014c8c <_vfiprintf_r+0x4c>
 8014e68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e6a:	e711      	b.n	8014c90 <_vfiprintf_r+0x50>
 8014e6c:	ab03      	add	r3, sp, #12
 8014e6e:	9300      	str	r3, [sp, #0]
 8014e70:	462a      	mov	r2, r5
 8014e72:	4b09      	ldr	r3, [pc, #36]	; (8014e98 <_vfiprintf_r+0x258>)
 8014e74:	a904      	add	r1, sp, #16
 8014e76:	4630      	mov	r0, r6
 8014e78:	f000 f880 	bl	8014f7c <_printf_i>
 8014e7c:	e7e4      	b.n	8014e48 <_vfiprintf_r+0x208>
 8014e7e:	bf00      	nop
 8014e80:	08015568 	.word	0x08015568
 8014e84:	08015588 	.word	0x08015588
 8014e88:	08015548 	.word	0x08015548
 8014e8c:	080155a8 	.word	0x080155a8
 8014e90:	080155b2 	.word	0x080155b2
 8014e94:	00000000 	.word	0x00000000
 8014e98:	08014c1b 	.word	0x08014c1b
 8014e9c:	080155ae 	.word	0x080155ae

08014ea0 <_printf_common>:
 8014ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ea4:	4616      	mov	r6, r2
 8014ea6:	4699      	mov	r9, r3
 8014ea8:	688a      	ldr	r2, [r1, #8]
 8014eaa:	690b      	ldr	r3, [r1, #16]
 8014eac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014eb0:	4293      	cmp	r3, r2
 8014eb2:	bfb8      	it	lt
 8014eb4:	4613      	movlt	r3, r2
 8014eb6:	6033      	str	r3, [r6, #0]
 8014eb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014ebc:	4607      	mov	r7, r0
 8014ebe:	460c      	mov	r4, r1
 8014ec0:	b10a      	cbz	r2, 8014ec6 <_printf_common+0x26>
 8014ec2:	3301      	adds	r3, #1
 8014ec4:	6033      	str	r3, [r6, #0]
 8014ec6:	6823      	ldr	r3, [r4, #0]
 8014ec8:	0699      	lsls	r1, r3, #26
 8014eca:	bf42      	ittt	mi
 8014ecc:	6833      	ldrmi	r3, [r6, #0]
 8014ece:	3302      	addmi	r3, #2
 8014ed0:	6033      	strmi	r3, [r6, #0]
 8014ed2:	6825      	ldr	r5, [r4, #0]
 8014ed4:	f015 0506 	ands.w	r5, r5, #6
 8014ed8:	d106      	bne.n	8014ee8 <_printf_common+0x48>
 8014eda:	f104 0a19 	add.w	sl, r4, #25
 8014ede:	68e3      	ldr	r3, [r4, #12]
 8014ee0:	6832      	ldr	r2, [r6, #0]
 8014ee2:	1a9b      	subs	r3, r3, r2
 8014ee4:	42ab      	cmp	r3, r5
 8014ee6:	dc26      	bgt.n	8014f36 <_printf_common+0x96>
 8014ee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014eec:	1e13      	subs	r3, r2, #0
 8014eee:	6822      	ldr	r2, [r4, #0]
 8014ef0:	bf18      	it	ne
 8014ef2:	2301      	movne	r3, #1
 8014ef4:	0692      	lsls	r2, r2, #26
 8014ef6:	d42b      	bmi.n	8014f50 <_printf_common+0xb0>
 8014ef8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014efc:	4649      	mov	r1, r9
 8014efe:	4638      	mov	r0, r7
 8014f00:	47c0      	blx	r8
 8014f02:	3001      	adds	r0, #1
 8014f04:	d01e      	beq.n	8014f44 <_printf_common+0xa4>
 8014f06:	6823      	ldr	r3, [r4, #0]
 8014f08:	68e5      	ldr	r5, [r4, #12]
 8014f0a:	6832      	ldr	r2, [r6, #0]
 8014f0c:	f003 0306 	and.w	r3, r3, #6
 8014f10:	2b04      	cmp	r3, #4
 8014f12:	bf08      	it	eq
 8014f14:	1aad      	subeq	r5, r5, r2
 8014f16:	68a3      	ldr	r3, [r4, #8]
 8014f18:	6922      	ldr	r2, [r4, #16]
 8014f1a:	bf0c      	ite	eq
 8014f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f20:	2500      	movne	r5, #0
 8014f22:	4293      	cmp	r3, r2
 8014f24:	bfc4      	itt	gt
 8014f26:	1a9b      	subgt	r3, r3, r2
 8014f28:	18ed      	addgt	r5, r5, r3
 8014f2a:	2600      	movs	r6, #0
 8014f2c:	341a      	adds	r4, #26
 8014f2e:	42b5      	cmp	r5, r6
 8014f30:	d11a      	bne.n	8014f68 <_printf_common+0xc8>
 8014f32:	2000      	movs	r0, #0
 8014f34:	e008      	b.n	8014f48 <_printf_common+0xa8>
 8014f36:	2301      	movs	r3, #1
 8014f38:	4652      	mov	r2, sl
 8014f3a:	4649      	mov	r1, r9
 8014f3c:	4638      	mov	r0, r7
 8014f3e:	47c0      	blx	r8
 8014f40:	3001      	adds	r0, #1
 8014f42:	d103      	bne.n	8014f4c <_printf_common+0xac>
 8014f44:	f04f 30ff 	mov.w	r0, #4294967295
 8014f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f4c:	3501      	adds	r5, #1
 8014f4e:	e7c6      	b.n	8014ede <_printf_common+0x3e>
 8014f50:	18e1      	adds	r1, r4, r3
 8014f52:	1c5a      	adds	r2, r3, #1
 8014f54:	2030      	movs	r0, #48	; 0x30
 8014f56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014f5a:	4422      	add	r2, r4
 8014f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014f60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014f64:	3302      	adds	r3, #2
 8014f66:	e7c7      	b.n	8014ef8 <_printf_common+0x58>
 8014f68:	2301      	movs	r3, #1
 8014f6a:	4622      	mov	r2, r4
 8014f6c:	4649      	mov	r1, r9
 8014f6e:	4638      	mov	r0, r7
 8014f70:	47c0      	blx	r8
 8014f72:	3001      	adds	r0, #1
 8014f74:	d0e6      	beq.n	8014f44 <_printf_common+0xa4>
 8014f76:	3601      	adds	r6, #1
 8014f78:	e7d9      	b.n	8014f2e <_printf_common+0x8e>
	...

08014f7c <_printf_i>:
 8014f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014f80:	460c      	mov	r4, r1
 8014f82:	4691      	mov	r9, r2
 8014f84:	7e27      	ldrb	r7, [r4, #24]
 8014f86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014f88:	2f78      	cmp	r7, #120	; 0x78
 8014f8a:	4680      	mov	r8, r0
 8014f8c:	469a      	mov	sl, r3
 8014f8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014f92:	d807      	bhi.n	8014fa4 <_printf_i+0x28>
 8014f94:	2f62      	cmp	r7, #98	; 0x62
 8014f96:	d80a      	bhi.n	8014fae <_printf_i+0x32>
 8014f98:	2f00      	cmp	r7, #0
 8014f9a:	f000 80d8 	beq.w	801514e <_printf_i+0x1d2>
 8014f9e:	2f58      	cmp	r7, #88	; 0x58
 8014fa0:	f000 80a3 	beq.w	80150ea <_printf_i+0x16e>
 8014fa4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014fa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014fac:	e03a      	b.n	8015024 <_printf_i+0xa8>
 8014fae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014fb2:	2b15      	cmp	r3, #21
 8014fb4:	d8f6      	bhi.n	8014fa4 <_printf_i+0x28>
 8014fb6:	a001      	add	r0, pc, #4	; (adr r0, 8014fbc <_printf_i+0x40>)
 8014fb8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014fbc:	08015015 	.word	0x08015015
 8014fc0:	08015029 	.word	0x08015029
 8014fc4:	08014fa5 	.word	0x08014fa5
 8014fc8:	08014fa5 	.word	0x08014fa5
 8014fcc:	08014fa5 	.word	0x08014fa5
 8014fd0:	08014fa5 	.word	0x08014fa5
 8014fd4:	08015029 	.word	0x08015029
 8014fd8:	08014fa5 	.word	0x08014fa5
 8014fdc:	08014fa5 	.word	0x08014fa5
 8014fe0:	08014fa5 	.word	0x08014fa5
 8014fe4:	08014fa5 	.word	0x08014fa5
 8014fe8:	08015135 	.word	0x08015135
 8014fec:	08015059 	.word	0x08015059
 8014ff0:	08015117 	.word	0x08015117
 8014ff4:	08014fa5 	.word	0x08014fa5
 8014ff8:	08014fa5 	.word	0x08014fa5
 8014ffc:	08015157 	.word	0x08015157
 8015000:	08014fa5 	.word	0x08014fa5
 8015004:	08015059 	.word	0x08015059
 8015008:	08014fa5 	.word	0x08014fa5
 801500c:	08014fa5 	.word	0x08014fa5
 8015010:	0801511f 	.word	0x0801511f
 8015014:	680b      	ldr	r3, [r1, #0]
 8015016:	1d1a      	adds	r2, r3, #4
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	600a      	str	r2, [r1, #0]
 801501c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015024:	2301      	movs	r3, #1
 8015026:	e0a3      	b.n	8015170 <_printf_i+0x1f4>
 8015028:	6825      	ldr	r5, [r4, #0]
 801502a:	6808      	ldr	r0, [r1, #0]
 801502c:	062e      	lsls	r6, r5, #24
 801502e:	f100 0304 	add.w	r3, r0, #4
 8015032:	d50a      	bpl.n	801504a <_printf_i+0xce>
 8015034:	6805      	ldr	r5, [r0, #0]
 8015036:	600b      	str	r3, [r1, #0]
 8015038:	2d00      	cmp	r5, #0
 801503a:	da03      	bge.n	8015044 <_printf_i+0xc8>
 801503c:	232d      	movs	r3, #45	; 0x2d
 801503e:	426d      	negs	r5, r5
 8015040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015044:	485e      	ldr	r0, [pc, #376]	; (80151c0 <_printf_i+0x244>)
 8015046:	230a      	movs	r3, #10
 8015048:	e019      	b.n	801507e <_printf_i+0x102>
 801504a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801504e:	6805      	ldr	r5, [r0, #0]
 8015050:	600b      	str	r3, [r1, #0]
 8015052:	bf18      	it	ne
 8015054:	b22d      	sxthne	r5, r5
 8015056:	e7ef      	b.n	8015038 <_printf_i+0xbc>
 8015058:	680b      	ldr	r3, [r1, #0]
 801505a:	6825      	ldr	r5, [r4, #0]
 801505c:	1d18      	adds	r0, r3, #4
 801505e:	6008      	str	r0, [r1, #0]
 8015060:	0628      	lsls	r0, r5, #24
 8015062:	d501      	bpl.n	8015068 <_printf_i+0xec>
 8015064:	681d      	ldr	r5, [r3, #0]
 8015066:	e002      	b.n	801506e <_printf_i+0xf2>
 8015068:	0669      	lsls	r1, r5, #25
 801506a:	d5fb      	bpl.n	8015064 <_printf_i+0xe8>
 801506c:	881d      	ldrh	r5, [r3, #0]
 801506e:	4854      	ldr	r0, [pc, #336]	; (80151c0 <_printf_i+0x244>)
 8015070:	2f6f      	cmp	r7, #111	; 0x6f
 8015072:	bf0c      	ite	eq
 8015074:	2308      	moveq	r3, #8
 8015076:	230a      	movne	r3, #10
 8015078:	2100      	movs	r1, #0
 801507a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801507e:	6866      	ldr	r6, [r4, #4]
 8015080:	60a6      	str	r6, [r4, #8]
 8015082:	2e00      	cmp	r6, #0
 8015084:	bfa2      	ittt	ge
 8015086:	6821      	ldrge	r1, [r4, #0]
 8015088:	f021 0104 	bicge.w	r1, r1, #4
 801508c:	6021      	strge	r1, [r4, #0]
 801508e:	b90d      	cbnz	r5, 8015094 <_printf_i+0x118>
 8015090:	2e00      	cmp	r6, #0
 8015092:	d04d      	beq.n	8015130 <_printf_i+0x1b4>
 8015094:	4616      	mov	r6, r2
 8015096:	fbb5 f1f3 	udiv	r1, r5, r3
 801509a:	fb03 5711 	mls	r7, r3, r1, r5
 801509e:	5dc7      	ldrb	r7, [r0, r7]
 80150a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80150a4:	462f      	mov	r7, r5
 80150a6:	42bb      	cmp	r3, r7
 80150a8:	460d      	mov	r5, r1
 80150aa:	d9f4      	bls.n	8015096 <_printf_i+0x11a>
 80150ac:	2b08      	cmp	r3, #8
 80150ae:	d10b      	bne.n	80150c8 <_printf_i+0x14c>
 80150b0:	6823      	ldr	r3, [r4, #0]
 80150b2:	07df      	lsls	r7, r3, #31
 80150b4:	d508      	bpl.n	80150c8 <_printf_i+0x14c>
 80150b6:	6923      	ldr	r3, [r4, #16]
 80150b8:	6861      	ldr	r1, [r4, #4]
 80150ba:	4299      	cmp	r1, r3
 80150bc:	bfde      	ittt	le
 80150be:	2330      	movle	r3, #48	; 0x30
 80150c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80150c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80150c8:	1b92      	subs	r2, r2, r6
 80150ca:	6122      	str	r2, [r4, #16]
 80150cc:	f8cd a000 	str.w	sl, [sp]
 80150d0:	464b      	mov	r3, r9
 80150d2:	aa03      	add	r2, sp, #12
 80150d4:	4621      	mov	r1, r4
 80150d6:	4640      	mov	r0, r8
 80150d8:	f7ff fee2 	bl	8014ea0 <_printf_common>
 80150dc:	3001      	adds	r0, #1
 80150de:	d14c      	bne.n	801517a <_printf_i+0x1fe>
 80150e0:	f04f 30ff 	mov.w	r0, #4294967295
 80150e4:	b004      	add	sp, #16
 80150e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150ea:	4835      	ldr	r0, [pc, #212]	; (80151c0 <_printf_i+0x244>)
 80150ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80150f0:	6823      	ldr	r3, [r4, #0]
 80150f2:	680e      	ldr	r6, [r1, #0]
 80150f4:	061f      	lsls	r7, r3, #24
 80150f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80150fa:	600e      	str	r6, [r1, #0]
 80150fc:	d514      	bpl.n	8015128 <_printf_i+0x1ac>
 80150fe:	07d9      	lsls	r1, r3, #31
 8015100:	bf44      	itt	mi
 8015102:	f043 0320 	orrmi.w	r3, r3, #32
 8015106:	6023      	strmi	r3, [r4, #0]
 8015108:	b91d      	cbnz	r5, 8015112 <_printf_i+0x196>
 801510a:	6823      	ldr	r3, [r4, #0]
 801510c:	f023 0320 	bic.w	r3, r3, #32
 8015110:	6023      	str	r3, [r4, #0]
 8015112:	2310      	movs	r3, #16
 8015114:	e7b0      	b.n	8015078 <_printf_i+0xfc>
 8015116:	6823      	ldr	r3, [r4, #0]
 8015118:	f043 0320 	orr.w	r3, r3, #32
 801511c:	6023      	str	r3, [r4, #0]
 801511e:	2378      	movs	r3, #120	; 0x78
 8015120:	4828      	ldr	r0, [pc, #160]	; (80151c4 <_printf_i+0x248>)
 8015122:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015126:	e7e3      	b.n	80150f0 <_printf_i+0x174>
 8015128:	065e      	lsls	r6, r3, #25
 801512a:	bf48      	it	mi
 801512c:	b2ad      	uxthmi	r5, r5
 801512e:	e7e6      	b.n	80150fe <_printf_i+0x182>
 8015130:	4616      	mov	r6, r2
 8015132:	e7bb      	b.n	80150ac <_printf_i+0x130>
 8015134:	680b      	ldr	r3, [r1, #0]
 8015136:	6826      	ldr	r6, [r4, #0]
 8015138:	6960      	ldr	r0, [r4, #20]
 801513a:	1d1d      	adds	r5, r3, #4
 801513c:	600d      	str	r5, [r1, #0]
 801513e:	0635      	lsls	r5, r6, #24
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	d501      	bpl.n	8015148 <_printf_i+0x1cc>
 8015144:	6018      	str	r0, [r3, #0]
 8015146:	e002      	b.n	801514e <_printf_i+0x1d2>
 8015148:	0671      	lsls	r1, r6, #25
 801514a:	d5fb      	bpl.n	8015144 <_printf_i+0x1c8>
 801514c:	8018      	strh	r0, [r3, #0]
 801514e:	2300      	movs	r3, #0
 8015150:	6123      	str	r3, [r4, #16]
 8015152:	4616      	mov	r6, r2
 8015154:	e7ba      	b.n	80150cc <_printf_i+0x150>
 8015156:	680b      	ldr	r3, [r1, #0]
 8015158:	1d1a      	adds	r2, r3, #4
 801515a:	600a      	str	r2, [r1, #0]
 801515c:	681e      	ldr	r6, [r3, #0]
 801515e:	6862      	ldr	r2, [r4, #4]
 8015160:	2100      	movs	r1, #0
 8015162:	4630      	mov	r0, r6
 8015164:	f7eb f83c 	bl	80001e0 <memchr>
 8015168:	b108      	cbz	r0, 801516e <_printf_i+0x1f2>
 801516a:	1b80      	subs	r0, r0, r6
 801516c:	6060      	str	r0, [r4, #4]
 801516e:	6863      	ldr	r3, [r4, #4]
 8015170:	6123      	str	r3, [r4, #16]
 8015172:	2300      	movs	r3, #0
 8015174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015178:	e7a8      	b.n	80150cc <_printf_i+0x150>
 801517a:	6923      	ldr	r3, [r4, #16]
 801517c:	4632      	mov	r2, r6
 801517e:	4649      	mov	r1, r9
 8015180:	4640      	mov	r0, r8
 8015182:	47d0      	blx	sl
 8015184:	3001      	adds	r0, #1
 8015186:	d0ab      	beq.n	80150e0 <_printf_i+0x164>
 8015188:	6823      	ldr	r3, [r4, #0]
 801518a:	079b      	lsls	r3, r3, #30
 801518c:	d413      	bmi.n	80151b6 <_printf_i+0x23a>
 801518e:	68e0      	ldr	r0, [r4, #12]
 8015190:	9b03      	ldr	r3, [sp, #12]
 8015192:	4298      	cmp	r0, r3
 8015194:	bfb8      	it	lt
 8015196:	4618      	movlt	r0, r3
 8015198:	e7a4      	b.n	80150e4 <_printf_i+0x168>
 801519a:	2301      	movs	r3, #1
 801519c:	4632      	mov	r2, r6
 801519e:	4649      	mov	r1, r9
 80151a0:	4640      	mov	r0, r8
 80151a2:	47d0      	blx	sl
 80151a4:	3001      	adds	r0, #1
 80151a6:	d09b      	beq.n	80150e0 <_printf_i+0x164>
 80151a8:	3501      	adds	r5, #1
 80151aa:	68e3      	ldr	r3, [r4, #12]
 80151ac:	9903      	ldr	r1, [sp, #12]
 80151ae:	1a5b      	subs	r3, r3, r1
 80151b0:	42ab      	cmp	r3, r5
 80151b2:	dcf2      	bgt.n	801519a <_printf_i+0x21e>
 80151b4:	e7eb      	b.n	801518e <_printf_i+0x212>
 80151b6:	2500      	movs	r5, #0
 80151b8:	f104 0619 	add.w	r6, r4, #25
 80151bc:	e7f5      	b.n	80151aa <_printf_i+0x22e>
 80151be:	bf00      	nop
 80151c0:	080155b9 	.word	0x080155b9
 80151c4:	080155ca 	.word	0x080155ca

080151c8 <_sbrk_r>:
 80151c8:	b538      	push	{r3, r4, r5, lr}
 80151ca:	4d06      	ldr	r5, [pc, #24]	; (80151e4 <_sbrk_r+0x1c>)
 80151cc:	2300      	movs	r3, #0
 80151ce:	4604      	mov	r4, r0
 80151d0:	4608      	mov	r0, r1
 80151d2:	602b      	str	r3, [r5, #0]
 80151d4:	f7ec f90c 	bl	80013f0 <_sbrk>
 80151d8:	1c43      	adds	r3, r0, #1
 80151da:	d102      	bne.n	80151e2 <_sbrk_r+0x1a>
 80151dc:	682b      	ldr	r3, [r5, #0]
 80151de:	b103      	cbz	r3, 80151e2 <_sbrk_r+0x1a>
 80151e0:	6023      	str	r3, [r4, #0]
 80151e2:	bd38      	pop	{r3, r4, r5, pc}
 80151e4:	20007304 	.word	0x20007304

080151e8 <__sread>:
 80151e8:	b510      	push	{r4, lr}
 80151ea:	460c      	mov	r4, r1
 80151ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151f0:	f000 f8a0 	bl	8015334 <_read_r>
 80151f4:	2800      	cmp	r0, #0
 80151f6:	bfab      	itete	ge
 80151f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80151fa:	89a3      	ldrhlt	r3, [r4, #12]
 80151fc:	181b      	addge	r3, r3, r0
 80151fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015202:	bfac      	ite	ge
 8015204:	6563      	strge	r3, [r4, #84]	; 0x54
 8015206:	81a3      	strhlt	r3, [r4, #12]
 8015208:	bd10      	pop	{r4, pc}

0801520a <__swrite>:
 801520a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801520e:	461f      	mov	r7, r3
 8015210:	898b      	ldrh	r3, [r1, #12]
 8015212:	05db      	lsls	r3, r3, #23
 8015214:	4605      	mov	r5, r0
 8015216:	460c      	mov	r4, r1
 8015218:	4616      	mov	r6, r2
 801521a:	d505      	bpl.n	8015228 <__swrite+0x1e>
 801521c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015220:	2302      	movs	r3, #2
 8015222:	2200      	movs	r2, #0
 8015224:	f000 f868 	bl	80152f8 <_lseek_r>
 8015228:	89a3      	ldrh	r3, [r4, #12]
 801522a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801522e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015232:	81a3      	strh	r3, [r4, #12]
 8015234:	4632      	mov	r2, r6
 8015236:	463b      	mov	r3, r7
 8015238:	4628      	mov	r0, r5
 801523a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801523e:	f000 b817 	b.w	8015270 <_write_r>

08015242 <__sseek>:
 8015242:	b510      	push	{r4, lr}
 8015244:	460c      	mov	r4, r1
 8015246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801524a:	f000 f855 	bl	80152f8 <_lseek_r>
 801524e:	1c43      	adds	r3, r0, #1
 8015250:	89a3      	ldrh	r3, [r4, #12]
 8015252:	bf15      	itete	ne
 8015254:	6560      	strne	r0, [r4, #84]	; 0x54
 8015256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801525a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801525e:	81a3      	strheq	r3, [r4, #12]
 8015260:	bf18      	it	ne
 8015262:	81a3      	strhne	r3, [r4, #12]
 8015264:	bd10      	pop	{r4, pc}

08015266 <__sclose>:
 8015266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801526a:	f000 b813 	b.w	8015294 <_close_r>
	...

08015270 <_write_r>:
 8015270:	b538      	push	{r3, r4, r5, lr}
 8015272:	4d07      	ldr	r5, [pc, #28]	; (8015290 <_write_r+0x20>)
 8015274:	4604      	mov	r4, r0
 8015276:	4608      	mov	r0, r1
 8015278:	4611      	mov	r1, r2
 801527a:	2200      	movs	r2, #0
 801527c:	602a      	str	r2, [r5, #0]
 801527e:	461a      	mov	r2, r3
 8015280:	f7ec f865 	bl	800134e <_write>
 8015284:	1c43      	adds	r3, r0, #1
 8015286:	d102      	bne.n	801528e <_write_r+0x1e>
 8015288:	682b      	ldr	r3, [r5, #0]
 801528a:	b103      	cbz	r3, 801528e <_write_r+0x1e>
 801528c:	6023      	str	r3, [r4, #0]
 801528e:	bd38      	pop	{r3, r4, r5, pc}
 8015290:	20007304 	.word	0x20007304

08015294 <_close_r>:
 8015294:	b538      	push	{r3, r4, r5, lr}
 8015296:	4d06      	ldr	r5, [pc, #24]	; (80152b0 <_close_r+0x1c>)
 8015298:	2300      	movs	r3, #0
 801529a:	4604      	mov	r4, r0
 801529c:	4608      	mov	r0, r1
 801529e:	602b      	str	r3, [r5, #0]
 80152a0:	f7ec f871 	bl	8001386 <_close>
 80152a4:	1c43      	adds	r3, r0, #1
 80152a6:	d102      	bne.n	80152ae <_close_r+0x1a>
 80152a8:	682b      	ldr	r3, [r5, #0]
 80152aa:	b103      	cbz	r3, 80152ae <_close_r+0x1a>
 80152ac:	6023      	str	r3, [r4, #0]
 80152ae:	bd38      	pop	{r3, r4, r5, pc}
 80152b0:	20007304 	.word	0x20007304

080152b4 <_fstat_r>:
 80152b4:	b538      	push	{r3, r4, r5, lr}
 80152b6:	4d07      	ldr	r5, [pc, #28]	; (80152d4 <_fstat_r+0x20>)
 80152b8:	2300      	movs	r3, #0
 80152ba:	4604      	mov	r4, r0
 80152bc:	4608      	mov	r0, r1
 80152be:	4611      	mov	r1, r2
 80152c0:	602b      	str	r3, [r5, #0]
 80152c2:	f7ec f86c 	bl	800139e <_fstat>
 80152c6:	1c43      	adds	r3, r0, #1
 80152c8:	d102      	bne.n	80152d0 <_fstat_r+0x1c>
 80152ca:	682b      	ldr	r3, [r5, #0]
 80152cc:	b103      	cbz	r3, 80152d0 <_fstat_r+0x1c>
 80152ce:	6023      	str	r3, [r4, #0]
 80152d0:	bd38      	pop	{r3, r4, r5, pc}
 80152d2:	bf00      	nop
 80152d4:	20007304 	.word	0x20007304

080152d8 <_isatty_r>:
 80152d8:	b538      	push	{r3, r4, r5, lr}
 80152da:	4d06      	ldr	r5, [pc, #24]	; (80152f4 <_isatty_r+0x1c>)
 80152dc:	2300      	movs	r3, #0
 80152de:	4604      	mov	r4, r0
 80152e0:	4608      	mov	r0, r1
 80152e2:	602b      	str	r3, [r5, #0]
 80152e4:	f7ec f86b 	bl	80013be <_isatty>
 80152e8:	1c43      	adds	r3, r0, #1
 80152ea:	d102      	bne.n	80152f2 <_isatty_r+0x1a>
 80152ec:	682b      	ldr	r3, [r5, #0]
 80152ee:	b103      	cbz	r3, 80152f2 <_isatty_r+0x1a>
 80152f0:	6023      	str	r3, [r4, #0]
 80152f2:	bd38      	pop	{r3, r4, r5, pc}
 80152f4:	20007304 	.word	0x20007304

080152f8 <_lseek_r>:
 80152f8:	b538      	push	{r3, r4, r5, lr}
 80152fa:	4d07      	ldr	r5, [pc, #28]	; (8015318 <_lseek_r+0x20>)
 80152fc:	4604      	mov	r4, r0
 80152fe:	4608      	mov	r0, r1
 8015300:	4611      	mov	r1, r2
 8015302:	2200      	movs	r2, #0
 8015304:	602a      	str	r2, [r5, #0]
 8015306:	461a      	mov	r2, r3
 8015308:	f7ec f864 	bl	80013d4 <_lseek>
 801530c:	1c43      	adds	r3, r0, #1
 801530e:	d102      	bne.n	8015316 <_lseek_r+0x1e>
 8015310:	682b      	ldr	r3, [r5, #0]
 8015312:	b103      	cbz	r3, 8015316 <_lseek_r+0x1e>
 8015314:	6023      	str	r3, [r4, #0]
 8015316:	bd38      	pop	{r3, r4, r5, pc}
 8015318:	20007304 	.word	0x20007304

0801531c <__malloc_lock>:
 801531c:	4801      	ldr	r0, [pc, #4]	; (8015324 <__malloc_lock+0x8>)
 801531e:	f7ff bb55 	b.w	80149cc <__retarget_lock_acquire_recursive>
 8015322:	bf00      	nop
 8015324:	200072fc 	.word	0x200072fc

08015328 <__malloc_unlock>:
 8015328:	4801      	ldr	r0, [pc, #4]	; (8015330 <__malloc_unlock+0x8>)
 801532a:	f7ff bb50 	b.w	80149ce <__retarget_lock_release_recursive>
 801532e:	bf00      	nop
 8015330:	200072fc 	.word	0x200072fc

08015334 <_read_r>:
 8015334:	b538      	push	{r3, r4, r5, lr}
 8015336:	4d07      	ldr	r5, [pc, #28]	; (8015354 <_read_r+0x20>)
 8015338:	4604      	mov	r4, r0
 801533a:	4608      	mov	r0, r1
 801533c:	4611      	mov	r1, r2
 801533e:	2200      	movs	r2, #0
 8015340:	602a      	str	r2, [r5, #0]
 8015342:	461a      	mov	r2, r3
 8015344:	f7eb ffe6 	bl	8001314 <_read>
 8015348:	1c43      	adds	r3, r0, #1
 801534a:	d102      	bne.n	8015352 <_read_r+0x1e>
 801534c:	682b      	ldr	r3, [r5, #0]
 801534e:	b103      	cbz	r3, 8015352 <_read_r+0x1e>
 8015350:	6023      	str	r3, [r4, #0]
 8015352:	bd38      	pop	{r3, r4, r5, pc}
 8015354:	20007304 	.word	0x20007304

08015358 <_init>:
 8015358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801535a:	bf00      	nop
 801535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801535e:	bc08      	pop	{r3}
 8015360:	469e      	mov	lr, r3
 8015362:	4770      	bx	lr

08015364 <_fini>:
 8015364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015366:	bf00      	nop
 8015368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801536a:	bc08      	pop	{r3}
 801536c:	469e      	mov	lr, r3
 801536e:	4770      	bx	lr
