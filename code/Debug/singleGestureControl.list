
singleGestureControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015210  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  080153b0  080153b0  000253b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015628  08015628  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08015628  08015628  00025628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015630  08015630  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015630  08015630  00025630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015634  08015634  00025634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08015638  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007310  200000f0  08015724  000300f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007400  08015724  00037400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00066b25  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d29  00000000  00000000  00096c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  0009c970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001858  00000000  00000000  0009e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002094a  00000000  00000000  0009fc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000260e3  00000000  00000000  000c055a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7cb3  00000000  00000000  000e663d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019e2f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076a8  00000000  00000000  0019e344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08015398 	.word	0x08015398

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	08015398 	.word	0x08015398

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9b9 	b.w	8000614 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <MX_TOF_Init>:
static void getResult(uint8_t sensor, RANGING_SENSOR_Result_t * result);
static long getDistance(uint8_t sensor, RANGING_SENSOR_Result_t * result);
static void objectPresent();

void MX_TOF_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L3A2_MultiSensorRanging_Init();
 800061c:	f000 f9ba 	bl	8000994 <MX_53L3A2_MultiSensorRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	b089      	sub	sp, #36	; 0x24
 8000628:	af06      	add	r7, sp, #24
	  //Enkel de 1ste sensor (Center) opstarten
	  /*	Hier zeggen we welk profiel we willen gebruiken
	   * 	bv.
	   *
	   */
	start_sensor(VL53L3A2_DEV_CENTER);
 800062a:	2001      	movs	r0, #1
 800062c:	f000 fa16 	bl	8000a5c <start_sensor>

  //MX_53L3A2_MultiSensorRanging_Process();

  /* USER CODE BEGIN TOF_Process_PostTreatment */
	while(1){
		HAL_Delay(5);
 8000630:	2005      	movs	r0, #5
 8000632:	f011 fb6f 	bl	8011d14 <HAL_Delay>
		getResult(VL53L3A2_DEV_CENTER, Result);
 8000636:	494d      	ldr	r1, [pc, #308]	; (800076c <MX_TOF_Process+0x148>)
 8000638:	2001      	movs	r0, #1
 800063a:	f000 fa77 	bl	8000b2c <getResult>
		dis1 = getDistance(VL53L3A2_DEV_CENTER, Result);
 800063e:	494b      	ldr	r1, [pc, #300]	; (800076c <MX_TOF_Process+0x148>)
 8000640:	2001      	movs	r0, #1
 8000642:	f000 fa89 	bl	8000b58 <getDistance>
 8000646:	4603      	mov	r3, r0
 8000648:	4a49      	ldr	r2, [pc, #292]	; (8000770 <MX_TOF_Process+0x14c>)
 800064a:	6013      	str	r3, [r2, #0]

		//Het meten van de afstand van 2 buitenste sensoren.
		if(ObjectPresent)
 800064c:	4b49      	ldr	r3, [pc, #292]	; (8000774 <MX_TOF_Process+0x150>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d015      	beq.n	8000680 <MX_TOF_Process+0x5c>
		{
			getResult(VL53L3A2_DEV_LEFT, Result);
 8000654:	4945      	ldr	r1, [pc, #276]	; (800076c <MX_TOF_Process+0x148>)
 8000656:	2000      	movs	r0, #0
 8000658:	f000 fa68 	bl	8000b2c <getResult>
			dis0 = getDistance(VL53L3A2_DEV_LEFT, Result);
 800065c:	4943      	ldr	r1, [pc, #268]	; (800076c <MX_TOF_Process+0x148>)
 800065e:	2000      	movs	r0, #0
 8000660:	f000 fa7a 	bl	8000b58 <getDistance>
 8000664:	4603      	mov	r3, r0
 8000666:	4a44      	ldr	r2, [pc, #272]	; (8000778 <MX_TOF_Process+0x154>)
 8000668:	6013      	str	r3, [r2, #0]

			getResult(VL53L3A2_DEV_RIGHT, Result);
 800066a:	4940      	ldr	r1, [pc, #256]	; (800076c <MX_TOF_Process+0x148>)
 800066c:	2002      	movs	r0, #2
 800066e:	f000 fa5d 	bl	8000b2c <getResult>
			dis2 = getDistance(VL53L3A2_DEV_RIGHT, Result);
 8000672:	493e      	ldr	r1, [pc, #248]	; (800076c <MX_TOF_Process+0x148>)
 8000674:	2002      	movs	r0, #2
 8000676:	f000 fa6f 	bl	8000b58 <getDistance>
 800067a:	4603      	mov	r3, r0
 800067c:	4a3f      	ldr	r2, [pc, #252]	; (800077c <MX_TOF_Process+0x158>)
 800067e:	6013      	str	r3, [r2, #0]
		}
		//Bug van 1ste meeting dat deze fout is (Een te hoge waarden)
		if(dis1 >= 17760520)
 8000680:	4b3b      	ldr	r3, [pc, #236]	; (8000770 <MX_TOF_Process+0x14c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a3e      	ldr	r2, [pc, #248]	; (8000780 <MX_TOF_Process+0x15c>)
 8000686:	4293      	cmp	r3, r2
 8000688:	dd0b      	ble.n	80006a2 <MX_TOF_Process+0x7e>
		{
			HAL_Delay(4);
 800068a:	2004      	movs	r0, #4
 800068c:	f011 fb42 	bl	8011d14 <HAL_Delay>
			getResult(VL53L3A2_DEV_CENTER, Result);
 8000690:	4936      	ldr	r1, [pc, #216]	; (800076c <MX_TOF_Process+0x148>)
 8000692:	2001      	movs	r0, #1
 8000694:	f000 fa4a 	bl	8000b2c <getResult>
			dis1 = (long)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Distance[0];
 8000698:	4b34      	ldr	r3, [pc, #208]	; (800076c <MX_TOF_Process+0x148>)
 800069a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800069c:	461a      	mov	r2, r3
 800069e:	4b34      	ldr	r3, [pc, #208]	; (8000770 <MX_TOF_Process+0x14c>)
 80006a0:	601a      	str	r2, [r3, #0]

		}


		//ObjectPresent();
		objectPresent();
 80006a2:	f000 f877 	bl	8000794 <objectPresent>

		  //Ticks
		  // long x = HAL_GetTick();
		  //printf("Ticks: %ld ", x);

		if(!ObjectPresent){
 80006a6:	4b33      	ldr	r3, [pc, #204]	; (8000774 <MX_TOF_Process+0x150>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	f083 0301 	eor.w	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d010      	beq.n	80006d6 <MX_TOF_Process+0xb2>
			uint8_t obj1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].NumberOfTargets;
 80006b4:	4b2d      	ldr	r3, [pc, #180]	; (800076c <MX_TOF_Process+0x148>)
 80006b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b8:	707b      	strb	r3, [r7, #1]
			uint8_t sta1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Status[0];
 80006ba:	4b2c      	ldr	r3, [pc, #176]	; (800076c <MX_TOF_Process+0x148>)
 80006bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006be:	703b      	strb	r3, [r7, #0]
#if DEBUGGING
			printf("center: %5d obj: %1d sta: %2d",dis1,obj1,sta1);
 80006c0:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <MX_TOF_Process+0x14c>)
 80006c2:	6819      	ldr	r1, [r3, #0]
 80006c4:	787a      	ldrb	r2, [r7, #1]
 80006c6:	783b      	ldrb	r3, [r7, #0]
 80006c8:	482e      	ldr	r0, [pc, #184]	; (8000784 <MX_TOF_Process+0x160>)
 80006ca:	f013 fe85 	bl	80143d8 <iprintf>
			printf("\r\n");
 80006ce:	482e      	ldr	r0, [pc, #184]	; (8000788 <MX_TOF_Process+0x164>)
 80006d0:	f013 ff08 	bl	80144e4 <puts>
 80006d4:	e03b      	b.n	800074e <MX_TOF_Process+0x12a>
#endif
		}
		else{
			uint8_t obj0 = (uint8_t)Result[VL53L3A2_DEV_LEFT].ZoneResult[0].NumberOfTargets;
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <MX_TOF_Process+0x148>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	71fb      	strb	r3, [r7, #7]
			uint8_t obj1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].NumberOfTargets;
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <MX_TOF_Process+0x148>)
 80006de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e0:	71bb      	strb	r3, [r7, #6]
			uint8_t obj2 = (uint8_t)Result[VL53L3A2_DEV_RIGHT].ZoneResult[0].NumberOfTargets;
 80006e2:	4b22      	ldr	r3, [pc, #136]	; (800076c <MX_TOF_Process+0x148>)
 80006e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006e8:	717b      	strb	r3, [r7, #5]

			uint8_t sta0 = (uint8_t)Result[VL53L3A2_DEV_LEFT].ZoneResult[0].Status[0];
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <MX_TOF_Process+0x148>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	713b      	strb	r3, [r7, #4]
			uint8_t sta1 = (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Status[0];
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_TOF_Process+0x148>)
 80006f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f4:	70fb      	strb	r3, [r7, #3]
			uint8_t sta2 = (uint8_t)Result[VL53L3A2_DEV_RIGHT].ZoneResult[0].Status[0];
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_TOF_Process+0x148>)
 80006f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80006fc:	70bb      	strb	r3, [r7, #2]

#if DEBUGGING
			if(sta0 == sta1 == sta2 == 0){
 80006fe:	793a      	ldrb	r2, [r7, #4]
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	429a      	cmp	r2, r3
 8000704:	bf0c      	ite	eq
 8000706:	2301      	moveq	r3, #1
 8000708:	2300      	movne	r3, #0
 800070a:	b2db      	uxtb	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	78bb      	ldrb	r3, [r7, #2]
 8000710:	429a      	cmp	r2, r3
 8000712:	d01c      	beq.n	800074e <MX_TOF_Process+0x12a>
			printf("left: %5d obj: %1d sta: %2d \t center: %5d obj: %1d sta: %2d \t right: %5d obj: %d sta: %2d",dis0,obj0,sta0,dis1,obj1,sta1,dis2,obj2,sta2);
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_TOF_Process+0x154>)
 8000716:	681e      	ldr	r6, [r3, #0]
 8000718:	f897 c007 	ldrb.w	ip, [r7, #7]
 800071c:	f897 e004 	ldrb.w	lr, [r7, #4]
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_TOF_Process+0x14c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	79ba      	ldrb	r2, [r7, #6]
 8000726:	78f9      	ldrb	r1, [r7, #3]
 8000728:	4814      	ldr	r0, [pc, #80]	; (800077c <MX_TOF_Process+0x158>)
 800072a:	6800      	ldr	r0, [r0, #0]
 800072c:	797c      	ldrb	r4, [r7, #5]
 800072e:	78bd      	ldrb	r5, [r7, #2]
 8000730:	9505      	str	r5, [sp, #20]
 8000732:	9404      	str	r4, [sp, #16]
 8000734:	9003      	str	r0, [sp, #12]
 8000736:	9102      	str	r1, [sp, #8]
 8000738:	9201      	str	r2, [sp, #4]
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	4673      	mov	r3, lr
 800073e:	4662      	mov	r2, ip
 8000740:	4631      	mov	r1, r6
 8000742:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_TOF_Process+0x168>)
 8000744:	f013 fe48 	bl	80143d8 <iprintf>
			printf("\r\n");
 8000748:	480f      	ldr	r0, [pc, #60]	; (8000788 <MX_TOF_Process+0x164>)
 800074a:	f013 fecb 	bl	80144e4 <puts>
			}
#endif
		}

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, ObjectPresent);
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_TOF_Process+0x150>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	461a      	mov	r2, r3
 8000754:	2120      	movs	r1, #32
 8000756:	480e      	ldr	r0, [pc, #56]	; (8000790 <MX_TOF_Process+0x16c>)
 8000758:	f011 fe66 	bl	8012428 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_O_GPIO_Port, L_O_Pin, ObjectPresent);
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <MX_TOF_Process+0x150>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	461a      	mov	r2, r3
 8000762:	2180      	movs	r1, #128	; 0x80
 8000764:	480a      	ldr	r0, [pc, #40]	; (8000790 <MX_TOF_Process+0x16c>)
 8000766:	f011 fe5f 	bl	8012428 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800076a:	e761      	b.n	8000630 <MX_TOF_Process+0xc>
 800076c:	20007038 	.word	0x20007038
 8000770:	20000118 	.word	0x20000118
 8000774:	20000125 	.word	0x20000125
 8000778:	20000114 	.word	0x20000114
 800077c:	2000011c 	.word	0x2000011c
 8000780:	010f0107 	.word	0x010f0107
 8000784:	080153c8 	.word	0x080153c8
 8000788:	080153e8 	.word	0x080153e8
 800078c:	080153ec 	.word	0x080153ec
 8000790:	40020000 	.word	0x40020000

08000794 <objectPresent>:

	  }
  /* USER CODE END TOF_Process_PostTreatment */
}

void objectPresent(){
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	  /*	als dist1 onder de 1000 mm komt voor 3 seconden, dan is er een object.
			   * 	+ er mag geen foutcode 12 zijn
			   */
			if((dis1 <= maxDistanceObject) && (uint8_t)Result[VL53L3A2_DEV_CENTER].ZoneResult[0].Status[0] == 0	 && !ObjectPresent){
 8000798:	4b71      	ldr	r3, [pc, #452]	; (8000960 <objectPresent+0x1cc>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b71      	ldr	r3, [pc, #452]	; (8000964 <objectPresent+0x1d0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	dc56      	bgt.n	8000852 <objectPresent+0xbe>
 80007a4:	4b70      	ldr	r3, [pc, #448]	; (8000968 <objectPresent+0x1d4>)
 80007a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d151      	bne.n	8000852 <objectPresent+0xbe>
 80007ae:	4b6f      	ldr	r3, [pc, #444]	; (800096c <objectPresent+0x1d8>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	f083 0301 	eor.w	r3, r3, #1
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d04a      	beq.n	8000852 <objectPresent+0xbe>
				if(!timerMeasurementSet){
 80007bc:	4b6c      	ldr	r3, [pc, #432]	; (8000970 <objectPresent+0x1dc>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	f083 0301 	eor.w	r3, r3, #1
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d017      	beq.n	80007fa <objectPresent+0x66>
					timerMeasurementSet = true;
 80007ca:	4b69      	ldr	r3, [pc, #420]	; (8000970 <objectPresent+0x1dc>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
					timerMeasurment = HAL_GetTick();
 80007d0:	f011 fa94 	bl	8011cfc <HAL_GetTick>
 80007d4:	ee07 0a90 	vmov	s15, r0
 80007d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007dc:	4b65      	ldr	r3, [pc, #404]	; (8000974 <objectPresent+0x1e0>)
 80007de:	edc3 7a00 	vstr	s15, [r3]

#if DEBUGGING
					printf("Timer object %d ", timerMeasurementSet);
 80007e2:	4b63      	ldr	r3, [pc, #396]	; (8000970 <objectPresent+0x1dc>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	4619      	mov	r1, r3
 80007e8:	4863      	ldr	r0, [pc, #396]	; (8000978 <objectPresent+0x1e4>)
 80007ea:	f013 fdf5 	bl	80143d8 <iprintf>
					printf("Timer object is set");
 80007ee:	4863      	ldr	r0, [pc, #396]	; (800097c <objectPresent+0x1e8>)
 80007f0:	f013 fdf2 	bl	80143d8 <iprintf>
					printf("\r\n");
 80007f4:	4862      	ldr	r0, [pc, #392]	; (8000980 <objectPresent+0x1ec>)
 80007f6:	f013 fe75 	bl	80144e4 <puts>
#endif
				}
				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 80007fa:	f011 fa7f 	bl	8011cfc <HAL_GetTick>
 80007fe:	ee07 0a90 	vmov	s15, r0
 8000802:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000806:	4b5b      	ldr	r3, [pc, #364]	; (8000974 <objectPresent+0x1e0>)
 8000808:	edd3 7a00 	vldr	s15, [r3]
 800080c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000810:	4b5c      	ldr	r3, [pc, #368]	; (8000984 <objectPresent+0x1f0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	ee07 3a90 	vmov	s15, r3
 8000818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800081c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000824:	db2c      	blt.n	8000880 <objectPresent+0xec>
				{
					timerMeasurementSet = false;
 8000826:	4b52      	ldr	r3, [pc, #328]	; (8000970 <objectPresent+0x1dc>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]

					//Persoon naderd en staat dicht genoeg
					//Start andere sensoren ook op
					ObjectPresent = true;
 800082c:	4b4f      	ldr	r3, [pc, #316]	; (800096c <objectPresent+0x1d8>)
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
					start_sensor(VL53L3A2_DEV_LEFT);
 8000832:	2000      	movs	r0, #0
 8000834:	f000 f912 	bl	8000a5c <start_sensor>
					start_sensor(VL53L3A2_DEV_RIGHT);
 8000838:	2002      	movs	r0, #2
 800083a:	f000 f90f 	bl	8000a5c <start_sensor>

#if DEBUGGING
					printf("Object %d", ObjectPresent);
 800083e:	4b4b      	ldr	r3, [pc, #300]	; (800096c <objectPresent+0x1d8>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	4619      	mov	r1, r3
 8000844:	4850      	ldr	r0, [pc, #320]	; (8000988 <objectPresent+0x1f4>)
 8000846:	f013 fdc7 	bl	80143d8 <iprintf>
					printf("\r\n");
 800084a:	484d      	ldr	r0, [pc, #308]	; (8000980 <objectPresent+0x1ec>)
 800084c:	f013 fe4a 	bl	80144e4 <puts>
				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 8000850:	e016      	b.n	8000880 <objectPresent+0xec>
#endif
				}
			}
			else
			{
				if(timerMeasurementSet && !ObjectPresent){
 8000852:	4b47      	ldr	r3, [pc, #284]	; (8000970 <objectPresent+0x1dc>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d012      	beq.n	8000880 <objectPresent+0xec>
 800085a:	4b44      	ldr	r3, [pc, #272]	; (800096c <objectPresent+0x1d8>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	f083 0301 	eor.w	r3, r3, #1
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00b      	beq.n	8000880 <objectPresent+0xec>
					timerMeasurementSet = false;
 8000868:	4b41      	ldr	r3, [pc, #260]	; (8000970 <objectPresent+0x1dc>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
#if DEBUGGING
					printf("Timer object %d ", timerMeasurementSet);
 800086e:	4b40      	ldr	r3, [pc, #256]	; (8000970 <objectPresent+0x1dc>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	4619      	mov	r1, r3
 8000874:	4840      	ldr	r0, [pc, #256]	; (8000978 <objectPresent+0x1e4>)
 8000876:	f013 fdaf 	bl	80143d8 <iprintf>
					printf("\r\n");
 800087a:	4841      	ldr	r0, [pc, #260]	; (8000980 <objectPresent+0x1ec>)
 800087c:	f013 fe32 	bl	80144e4 <puts>
#endif
				}
			}


			if( (dis1 >= maxDistanceObject) && ObjectPresent){
 8000880:	4b37      	ldr	r3, [pc, #220]	; (8000960 <objectPresent+0x1cc>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b37      	ldr	r3, [pc, #220]	; (8000964 <objectPresent+0x1d0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	429a      	cmp	r2, r3
 800088a:	db51      	blt.n	8000930 <objectPresent+0x19c>
 800088c:	4b37      	ldr	r3, [pc, #220]	; (800096c <objectPresent+0x1d8>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d04d      	beq.n	8000930 <objectPresent+0x19c>

				if(timerMeasurementSet == false){
 8000894:	4b36      	ldr	r3, [pc, #216]	; (8000970 <objectPresent+0x1dc>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	f083 0301 	eor.w	r3, r3, #1
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d017      	beq.n	80008d2 <objectPresent+0x13e>
					timerMeasurementSet = true;
 80008a2:	4b33      	ldr	r3, [pc, #204]	; (8000970 <objectPresent+0x1dc>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	701a      	strb	r2, [r3, #0]
					timerMeasurment = HAL_GetTick();
 80008a8:	f011 fa28 	bl	8011cfc <HAL_GetTick>
 80008ac:	ee07 0a90 	vmov	s15, r0
 80008b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008b4:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <objectPresent+0x1e0>)
 80008b6:	edc3 7a00 	vstr	s15, [r3]
#if DEBUGGING
					printf("Timer no object %d ", timerMeasurementSet);
 80008ba:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <objectPresent+0x1dc>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	4619      	mov	r1, r3
 80008c0:	4832      	ldr	r0, [pc, #200]	; (800098c <objectPresent+0x1f8>)
 80008c2:	f013 fd89 	bl	80143d8 <iprintf>
					printf("Timer no object is set");
 80008c6:	4832      	ldr	r0, [pc, #200]	; (8000990 <objectPresent+0x1fc>)
 80008c8:	f013 fd86 	bl	80143d8 <iprintf>
					printf("\r\n");
 80008cc:	482c      	ldr	r0, [pc, #176]	; (8000980 <objectPresent+0x1ec>)
 80008ce:	f013 fe09 	bl	80144e4 <puts>
#endif
				}

				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 80008d2:	f011 fa13 	bl	8011cfc <HAL_GetTick>
 80008d6:	ee07 0a90 	vmov	s15, r0
 80008da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <objectPresent+0x1e0>)
 80008e0:	edd3 7a00 	vldr	s15, [r3]
 80008e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008e8:	4b26      	ldr	r3, [pc, #152]	; (8000984 <objectPresent+0x1f0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	ee07 3a90 	vmov	s15, r3
 80008f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008fc:	db2d      	blt.n	800095a <objectPresent+0x1c6>
				{
					timerMeasurementSet = false;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <objectPresent+0x1dc>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]

					ObjectPresent = false;
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <objectPresent+0x1d8>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
					stop_sensor(VL53L3A2_DEV_LEFT);
 800090a:	2000      	movs	r0, #0
 800090c:	f000 f8e6 	bl	8000adc <stop_sensor>
					stop_sensor(VL53L3A2_DEV_RIGHT);
 8000910:	2002      	movs	r0, #2
 8000912:	f000 f8e3 	bl	8000adc <stop_sensor>
					HAL_Delay(2);
 8000916:	2002      	movs	r0, #2
 8000918:	f011 f9fc 	bl	8011d14 <HAL_Delay>
#if DEBUGGING
					printf("Object %d", ObjectPresent);
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <objectPresent+0x1d8>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	4819      	ldr	r0, [pc, #100]	; (8000988 <objectPresent+0x1f4>)
 8000924:	f013 fd58 	bl	80143d8 <iprintf>
					printf("\r\n");
 8000928:	4815      	ldr	r0, [pc, #84]	; (8000980 <objectPresent+0x1ec>)
 800092a:	f013 fddb 	bl	80144e4 <puts>
				if((HAL_GetTick() - timerMeasurment) >= timerMeasurmentTimeout)
 800092e:	e014      	b.n	800095a <objectPresent+0x1c6>
#endif
				}
			}
			else
			{
				if(timerMeasurementSet && ObjectPresent){
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <objectPresent+0x1dc>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d010      	beq.n	800095a <objectPresent+0x1c6>
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <objectPresent+0x1d8>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d00c      	beq.n	800095a <objectPresent+0x1c6>
					timerMeasurementSet = false;
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <objectPresent+0x1dc>)
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
#if DEBUGGING
					printf("Timer no object %d ", timerMeasurementSet);
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <objectPresent+0x1dc>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4619      	mov	r1, r3
 800094c:	480f      	ldr	r0, [pc, #60]	; (800098c <objectPresent+0x1f8>)
 800094e:	f013 fd43 	bl	80143d8 <iprintf>
					printf("\r\n");
 8000952:	480b      	ldr	r0, [pc, #44]	; (8000980 <objectPresent+0x1ec>)
 8000954:	f013 fdc6 	bl	80144e4 <puts>
#endif
				}
			}
}
 8000958:	e7ff      	b.n	800095a <objectPresent+0x1c6>
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000118 	.word	0x20000118
 8000964:	20000000 	.word	0x20000000
 8000968:	20007038 	.word	0x20007038
 800096c:	20000125 	.word	0x20000125
 8000970:	20000124 	.word	0x20000124
 8000974:	20000120 	.word	0x20000120
 8000978:	08015448 	.word	0x08015448
 800097c:	0801545c 	.word	0x0801545c
 8000980:	080153e8 	.word	0x080153e8
 8000984:	20000004 	.word	0x20000004
 8000988:	08015470 	.word	0x08015470
 800098c:	0801547c 	.word	0x0801547c
 8000990:	08015490 	.word	0x08015490

08000994 <MX_53L3A2_MultiSensorRanging_Init>:

static void MX_53L3A2_MultiSensorRanging_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  uint8_t device;
  uint16_t i2c_addr;
  uint32_t id;

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800099a:	2000      	movs	r0, #0
 800099c:	f000 faba 	bl	8000f14 <BSP_COM_Init>

  printf("53L3A2 Gesture Control\r\n");
 80009a0:	482a      	ldr	r0, [pc, #168]	; (8000a4c <MX_53L3A2_MultiSensorRanging_Init+0xb8>)
 80009a2:	f013 fd9f 	bl	80144e4 <puts>

  /* put all the devices in shutdown mode */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	71fb      	strb	r3, [r7, #7]
 80009aa:	e007      	b.n	80009bc <MX_53L3A2_MultiSensorRanging_Init+0x28>
  {
    VL53L3A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_OFF);
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2101      	movs	r1, #1
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 f8a1 	bl	8001af8 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	3301      	adds	r3, #1
 80009ba:	71fb      	strb	r3, [r7, #7]
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d9f4      	bls.n	80009ac <MX_53L3A2_MultiSensorRanging_Init+0x18>

  /* power on the devices one at a time, initialize them and change their address.
   * once the address is updated, the communication with the devices is checked
   * reading its ID.
   */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 80009c2:	2300      	movs	r3, #0
 80009c4:	71fb      	strb	r3, [r7, #7]
 80009c6:	e039      	b.n	8000a3c <MX_53L3A2_MultiSensorRanging_Init+0xa8>
  {
    VL53L3A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_ON);
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f001 f893 	bl	8001af8 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
    status = VL53L3A2_RANGING_SENSOR_Init(device);
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 ff7b 	bl	80018d0 <VL53L3A2_RANGING_SENSOR_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <MX_53L3A2_MultiSensorRanging_Init+0xbc>)
 80009de:	6013      	str	r3, [r2, #0]

    /* 0: not detected, 1: detected */
    ToF_Present[device] = (status != BSP_ERROR_NONE) ? 0 : 1;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <MX_53L3A2_MultiSensorRanging_Init+0xbc>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bf0c      	ite	eq
 80009e8:	2301      	moveq	r3, #1
 80009ea:	2300      	movne	r3, #0
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4611      	mov	r1, r2
 80009f2:	4a18      	ldr	r2, [pc, #96]	; (8000a54 <MX_53L3A2_MultiSensorRanging_Init+0xc0>)
 80009f4:	54d1      	strb	r1, [r2, r3]

    /* skip this device if init not successful */
    if (ToF_Present[device] == 0) continue;
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <MX_53L3A2_MultiSensorRanging_Init+0xc0>)
 80009fa:	5cd3      	ldrb	r3, [r2, r3]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d019      	beq.n	8000a34 <MX_53L3A2_MultiSensorRanging_Init+0xa0>

    /* left: 0x54, center: 0x56, right: 0x58 */
    i2c_addr = (RANGING_SENSOR_VL53L3CX_ADDRESS + (device + 1) * 2);
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	3301      	adds	r3, #1
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	3329      	adds	r3, #41	; 0x29
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	80bb      	strh	r3, [r7, #4]
    VL53L3A2_RANGING_SENSOR_SetAddress(device, i2c_addr);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	88ba      	ldrh	r2, [r7, #4]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 f847 	bl	8001aa8 <VL53L3A2_RANGING_SENSOR_SetAddress>

    /* check the communication with the device reading the ID */
    VL53L3A2_RANGING_SENSOR_ReadID(device, &id);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	463a      	mov	r2, r7
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 ff7b 	bl	800191c <VL53L3A2_RANGING_SENSOR_ReadID>
#if DEBUGGING
    printf("ToF sensor %d - ID: %04lX\r\n", device, (unsigned long)id);
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480a      	ldr	r0, [pc, #40]	; (8000a58 <MX_53L3A2_MultiSensorRanging_Init+0xc4>)
 8000a2e:	f013 fcd3 	bl	80143d8 <iprintf>
 8000a32:	e000      	b.n	8000a36 <MX_53L3A2_MultiSensorRanging_Init+0xa2>
    if (ToF_Present[device] == 0) continue;
 8000a34:	bf00      	nop
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	71fb      	strb	r3, [r7, #7]
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d9c2      	bls.n	80009c8 <MX_53L3A2_MultiSensorRanging_Init+0x34>
#endif
  }
}
 8000a42:	bf00      	nop
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	080154a8 	.word	0x080154a8
 8000a50:	2000010c 	.word	0x2000010c
 8000a54:	20000110 	.word	0x20000110
 8000a58:	080154c0 	.word	0x080154c0

08000a5c <start_sensor>:
  }
  printf ("\r\n");
}
*/

static void start_sensor(uint8_t sensor){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	RANGING_SENSOR_ProfileConfig_t Profile;

	Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 8000a66:	2302      	movs	r3, #2
 8000a68:	60fb      	str	r3, [r7, #12]
	Profile.TimingBudget = 30; /* 16 ms < TimingBudget < 500 ms */
 8000a6a:	231e      	movs	r3, #30
 8000a6c:	613b      	str	r3, [r7, #16]
	Profile.Frequency = 0; /* not necessary in simple ranging */
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
	Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
	Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 8000a76:	2301      	movs	r3, #1
 8000a78:	61fb      	str	r3, [r7, #28]

	VL53L3A2_RANGING_SENSOR_ConfigProfile(sensor, &Profile);
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f107 020c 	add.w	r2, r7, #12
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 ff72 	bl	800196c <VL53L3A2_RANGING_SENSOR_ConfigProfile>
	status = VL53L3A2_RANGING_SENSOR_Start(sensor, RS_MODE_BLOCKING_CONTINUOUS);
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 ffbd 	bl	8001a0c <VL53L3A2_RANGING_SENSOR_Start>
 8000a92:	4603      	mov	r3, r0
 8000a94:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <start_sensor+0x70>)
 8000a96:	6013      	str	r3, [r2, #0]
    if (status != BSP_ERROR_NONE)
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <start_sensor+0x70>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d008      	beq.n	8000ab2 <start_sensor+0x56>
    {
#if DEBUGGING
    	printf("VL53L3A2_RANGING_SENSOR_Start failed for sensor %s \r\n", TofDevStr[sensor]);
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <start_sensor+0x74>)
 8000aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480a      	ldr	r0, [pc, #40]	; (8000ad4 <start_sensor+0x78>)
 8000aac:	f013 fc94 	bl	80143d8 <iprintf>
#endif
		while(1);
 8000ab0:	e7fe      	b.n	8000ab0 <start_sensor+0x54>
    }
    else
	{
#if DEBUGGING
    	printf("sensor %s\t opgestart \r\n", TofDevStr[sensor]);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <start_sensor+0x74>)
 8000ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aba:	4619      	mov	r1, r3
 8000abc:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <start_sensor+0x7c>)
 8000abe:	f013 fc8b 	bl	80143d8 <iprintf>
#endif
	}
}
 8000ac2:	bf00      	nop
 8000ac4:	3720      	adds	r7, #32
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000010c 	.word	0x2000010c
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	080154dc 	.word	0x080154dc
 8000ad8:	08015514 	.word	0x08015514

08000adc <stop_sensor>:

static void stop_sensor(uint8_t sensor){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
	status = VL53L3A2_RANGING_SENSOR_Stop(sensor);
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 ffb7 	bl	8001a5c <VL53L3A2_RANGING_SENSOR_Stop>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <stop_sensor+0x40>)
 8000af2:	6013      	str	r3, [r2, #0]
    if (status != BSP_ERROR_NONE)
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <stop_sensor+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d003      	beq.n	8000b04 <stop_sensor+0x28>
    {
#if DEBUGGING
    	printf("VL53L3A2_RANGING_SENSOR_Stop failed\r\n");
 8000afc:	4808      	ldr	r0, [pc, #32]	; (8000b20 <stop_sensor+0x44>)
 8000afe:	f013 fcf1 	bl	80144e4 <puts>
#endif
		while(1);
 8000b02:	e7fe      	b.n	8000b02 <stop_sensor+0x26>
    }
    else
	{
#if DEBUGGING
    	printf("sensor %s\t afgezet \r\n", TofDevStr[sensor]);
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <stop_sensor+0x48>)
 8000b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <stop_sensor+0x4c>)
 8000b10:	f013 fc62 	bl	80143d8 <iprintf>
#endif
	}
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000010c 	.word	0x2000010c
 8000b20:	0801552c 	.word	0x0801552c
 8000b24:	20000008 	.word	0x20000008
 8000b28:	08015554 	.word	0x08015554

08000b2c <getResult>:

static void getResult(uint8_t sensor, RANGING_SENSOR_Result_t *result){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
	VL53L3A2_RANGING_SENSOR_GetDistance(sensor, &result[sensor]);
 8000b38:	79f8      	ldrb	r0, [r7, #7]
 8000b3a:	79fa      	ldrb	r2, [r7, #7]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	4413      	add	r3, r2
 8000b42:	00db      	lsls	r3, r3, #3
 8000b44:	461a      	mov	r2, r3
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	4413      	add	r3, r2
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f000 ff36 	bl	80019bc <VL53L3A2_RANGING_SENSOR_GetDistance>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <getDistance>:

static long getDistance(uint8_t sensor, RANGING_SENSOR_Result_t * result){
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	71fb      	strb	r3, [r7, #7]
	long distance = (long)result[sensor].ZoneResult[0].Distance[0];
 8000b64:	79fa      	ldrb	r2, [r7, #7]
 8000b66:	4613      	mov	r3, r2
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	60fb      	str	r3, [r7, #12]
	return distance;
 8000b78:	68fb      	ldr	r3, [r7, #12]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8a:	f011 f851 	bl	8011c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8e:	f000 f809 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b92:	f000 f89d 	bl	8000cd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b96:	f000 f871 	bl	8000c7c <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  MX_TOF_Init();
 8000b9a:	f7ff fd3d 	bl	8000618 <MX_TOF_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_TOF_Process();
 8000b9e:	f7ff fd41 	bl	8000624 <MX_TOF_Process>
 8000ba2:	e7fc      	b.n	8000b9e <main+0x18>

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b094      	sub	sp, #80	; 0x50
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	2230      	movs	r2, #48	; 0x30
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f013 fc08 	bl	80143c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <SystemClock_Config+0xd0>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a28      	ldr	r2, [pc, #160]	; (8000c74 <SystemClock_Config+0xd0>)
 8000bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd8:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <SystemClock_Config+0xd0>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <SystemClock_Config+0xd4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bf0:	4a21      	ldr	r2, [pc, #132]	; (8000c78 <SystemClock_Config+0xd4>)
 8000bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <SystemClock_Config+0xd4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c04:	2302      	movs	r3, #2
 8000c06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c0c:	2310      	movs	r3, #16
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c10:	2302      	movs	r3, #2
 8000c12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c14:	2300      	movs	r3, #0
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c18:	2310      	movs	r3, #16
 8000c1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c1c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c22:	2304      	movs	r3, #4
 8000c24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c26:	2307      	movs	r3, #7
 8000c28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2a:	f107 0320 	add.w	r3, r7, #32
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f012 fc08 	bl	8013444 <HAL_RCC_OscConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c3a:	f000 f8cb 	bl	8000dd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3e:	230f      	movs	r3, #15
 8000c40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c42:	2302      	movs	r3, #2
 8000c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	2102      	movs	r1, #2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f012 fe6a 	bl	8013934 <HAL_RCC_ClockConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c66:	f000 f8b5 	bl	8000dd4 <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3750      	adds	r7, #80	; 0x50
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40007000 	.word	0x40007000

08000c7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <MX_USART2_UART_Init+0x50>)
 8000c84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_USART2_UART_Init+0x4c>)
 8000cb4:	f013 f83a 	bl	8013d2c <HAL_UART_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cbe:	f000 f889 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200071a8 	.word	0x200071a8
 8000ccc:	40004400 	.word	0x40004400

08000cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <MX_GPIO_Init+0xf8>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a36      	ldr	r2, [pc, #216]	; (8000dc8 <MX_GPIO_Init+0xf8>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <MX_GPIO_Init+0xf8>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <MX_GPIO_Init+0xf8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <MX_GPIO_Init+0xf8>)
 8000d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <MX_GPIO_Init+0xf8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <MX_GPIO_Init+0xf8>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a28      	ldr	r2, [pc, #160]	; (8000dc8 <MX_GPIO_Init+0xf8>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <MX_GPIO_Init+0xf8>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <MX_GPIO_Init+0xf8>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <MX_GPIO_Init+0xf8>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <MX_GPIO_Init+0xf8>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2120      	movs	r1, #32
 8000d5a:	481c      	ldr	r0, [pc, #112]	; (8000dcc <MX_GPIO_Init+0xfc>)
 8000d5c:	f011 fb64 	bl	8012428 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L_O_GPIO_Port, L_O_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	4819      	ldr	r0, [pc, #100]	; (8000dcc <MX_GPIO_Init+0xfc>)
 8000d66:	f011 fb5f 	bl	8012428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d70:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <MX_GPIO_Init+0x100>)
 8000d82:	f011 f8d1 	bl	8011f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d86:	2320      	movs	r3, #32
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480b      	ldr	r0, [pc, #44]	; (8000dcc <MX_GPIO_Init+0xfc>)
 8000d9e:	f011 f8c3 	bl	8011f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_O_Pin */
   GPIO_InitStruct.Pin = L_O_Pin;
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(L_O_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <MX_GPIO_Init+0xfc>)
 8000dba:	f011 f8b5 	bl	8011f28 <HAL_GPIO_Init>

}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020000 	.word	0x40020000
 8000dd0:	40020800 	.word	0x40020800

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0x8>
	...

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <HAL_MspInit+0x4c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <HAL_MspInit+0x4c>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <HAL_MspInit+0x4c>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e1e:	2007      	movs	r0, #7
 8000e20:	f011 f84e 	bl	8011ec0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40023800 	.word	0x40023800

08000e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a19      	ldr	r2, [pc, #100]	; (8000eb4 <HAL_UART_MspInit+0x84>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d12b      	bne.n	8000eaa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a10      	ldr	r2, [pc, #64]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <HAL_UART_MspInit+0x8c>)
 8000ea6:	f011 f83f 	bl	8011f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40004400 	.word	0x40004400
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <UsageFault_Handler+0x4>

08000ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0c:	f010 fee2 	bl	8011cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d903      	bls.n	8000f30 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f28:	f06f 0301 	mvn.w	r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	e025      	b.n	8000f7c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	79fa      	ldrb	r2, [r7, #7]
 8000f34:	4914      	ldr	r1, [pc, #80]	; (8000f88 <BSP_COM_Init+0x74>)
 8000f36:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000f3a:	4814      	ldr	r0, [pc, #80]	; (8000f8c <BSP_COM_Init+0x78>)
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	011b      	lsls	r3, r3, #4
 8000f40:	4413      	add	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4403      	add	r3, r0
 8000f46:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8000f48:	79fa      	ldrb	r2, [r7, #7]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	4413      	add	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <BSP_COM_Init+0x78>)
 8000f54:	4413      	add	r3, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f864 	bl	8001024 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8000f5c:	79fa      	ldrb	r2, [r7, #7]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <BSP_COM_Init+0x78>)
 8000f68:	4413      	add	r3, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f810 	bl	8000f90 <MX_USART2_UART_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000f76:	f06f 0303 	mvn.w	r3, #3
 8000f7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000014 	.word	0x20000014
 8000f8c:	200071a8 	.word	0x200071a8

08000f90 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <MX_USART2_UART_Init+0x58>)
 8000fa0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa8:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f012 feac 	bl	8013d2c <HAL_UART_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40004400 	.word	0x40004400

08000fec <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* For IAR and ARM Compiler 5 and 6 */
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <__io_putchar+0x30>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	011b      	lsls	r3, r3, #4
 8000ffe:	4413      	add	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4a07      	ldr	r2, [pc, #28]	; (8001020 <__io_putchar+0x34>)
 8001004:	1898      	adds	r0, r3, r2
 8001006:	1d39      	adds	r1, r7, #4
 8001008:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100c:	2201      	movs	r2, #1
 800100e:	f012 feda 	bl	8013dc6 <HAL_UART_Transmit>
  return ch;
 8001012:	687b      	ldr	r3, [r7, #4]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000126 	.word	0x20000126
 8001020:	200071a8 	.word	0x200071a8

08001024 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <USART2_MspInit+0x88>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	4a1d      	ldr	r2, [pc, #116]	; (80010ac <USART2_MspInit+0x88>)
 8001036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103a:	6413      	str	r3, [r2, #64]	; 0x40
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <USART2_MspInit+0x88>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <USART2_MspInit+0x88>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	4a16      	ldr	r2, [pc, #88]	; (80010ac <USART2_MspInit+0x88>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6313      	str	r3, [r2, #48]	; 0x30
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <USART2_MspInit+0x88>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8001064:	2304      	movs	r3, #4
 8001066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8001074:	2307      	movs	r3, #7
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	480c      	ldr	r0, [pc, #48]	; (80010b0 <USART2_MspInit+0x8c>)
 8001080:	f010 ff52 	bl	8011f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8001084:	2308      	movs	r3, #8
 8001086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8001094:	2307      	movs	r3, #7
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	4804      	ldr	r0, [pc, #16]	; (80010b0 <USART2_MspInit+0x8c>)
 80010a0:	f010 ff42 	bl	8011f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80010a4:	bf00      	nop
 80010a6:	3728      	adds	r7, #40	; 0x28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020000 	.word	0x40020000

080010b4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <BSP_I2C1_Init+0x58>)
 80010c0:	4a13      	ldr	r2, [pc, #76]	; (8001110 <BSP_I2C1_Init+0x5c>)
 80010c2:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <BSP_I2C1_Init+0x60>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	4912      	ldr	r1, [pc, #72]	; (8001114 <BSP_I2C1_Init+0x60>)
 80010cc:	600a      	str	r2, [r1, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d117      	bne.n	8001102 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <BSP_I2C1_Init+0x58>)
 80010d4:	f011 fe6e 	bl	8012db4 <HAL_I2C_GetState>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d111      	bne.n	8001102 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80010de:	480b      	ldr	r0, [pc, #44]	; (800110c <BSP_I2C1_Init+0x58>)
 80010e0:	f000 f8d2 	bl	8001288 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10b      	bne.n	8001102 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <BSP_I2C1_Init+0x58>)
 80010ec:	f000 f898 	bl	8001220 <MX_I2C1_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80010f6:	f06f 0307 	mvn.w	r3, #7
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	e001      	b.n	8001102 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001102:	687b      	ldr	r3, [r7, #4]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20007154 	.word	0x20007154
 8001110:	40005400 	.word	0x40005400
 8001114:	20000128 	.word	0x20000128

08001118 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <BSP_I2C1_DeInit+0x48>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d014      	beq.n	8001154 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <BSP_I2C1_DeInit+0x48>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3b01      	subs	r3, #1
 8001130:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <BSP_I2C1_DeInit+0x48>)
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <BSP_I2C1_DeInit+0x48>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10b      	bne.n	8001154 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800113c:	4809      	ldr	r0, [pc, #36]	; (8001164 <BSP_I2C1_DeInit+0x4c>)
 800113e:	f000 f8ed 	bl	800131c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001142:	4808      	ldr	r0, [pc, #32]	; (8001164 <BSP_I2C1_DeInit+0x4c>)
 8001144:	f011 face 	bl	80126e4 <HAL_I2C_DeInit>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800114e:	f06f 0307 	mvn.w	r3, #7
 8001152:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001154:	687b      	ldr	r3, [r7, #4]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000128 	.word	0x20000128
 8001164:	20007154 	.word	0x20007154

08001168 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af02      	add	r7, sp, #8
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	80fb      	strh	r3, [r7, #6]
 8001174:	4613      	mov	r3, r2
 8001176:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800117c:	88bb      	ldrh	r3, [r7, #4]
 800117e:	88f9      	ldrh	r1, [r7, #6]
 8001180:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001184:	9200      	str	r2, [sp, #0]
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <BSP_I2C1_Send+0x50>)
 800118a:	f011 faef 	bl	801276c <HAL_I2C_Master_Transmit>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00c      	beq.n	80011ae <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001194:	4808      	ldr	r0, [pc, #32]	; (80011b8 <BSP_I2C1_Send+0x50>)
 8001196:	f011 fe1b 	bl	8012dd0 <HAL_I2C_GetError>
 800119a:	4603      	mov	r3, r0
 800119c:	2b04      	cmp	r3, #4
 800119e:	d003      	beq.n	80011a8 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80011a0:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	e002      	b.n	80011ae <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80011a8:	f06f 0303 	mvn.w	r3, #3
 80011ac:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20007154 	.word	0x20007154

080011bc <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	80fb      	strh	r3, [r7, #6]
 80011c8:	4613      	mov	r3, r2
 80011ca:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80011d0:	88bb      	ldrh	r3, [r7, #4]
 80011d2:	88f9      	ldrh	r1, [r7, #6]
 80011d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d8:	9200      	str	r2, [sp, #0]
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	480b      	ldr	r0, [pc, #44]	; (800120c <BSP_I2C1_Recv+0x50>)
 80011de:	f011 fbc3 	bl	8012968 <HAL_I2C_Master_Receive>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00c      	beq.n	8001202 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80011e8:	4808      	ldr	r0, [pc, #32]	; (800120c <BSP_I2C1_Recv+0x50>)
 80011ea:	f011 fdf1 	bl	8012dd0 <HAL_I2C_GetError>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d003      	beq.n	80011fc <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80011f4:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	e002      	b.n	8001202 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80011fc:	f06f 0303 	mvn.w	r3, #3
 8001200:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20007154 	.word	0x20007154

08001210 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001214:	f010 fd72 	bl	8011cfc <HAL_GetTick>
 8001218:	4603      	mov	r3, r0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a14      	ldr	r2, [pc, #80]	; (8001280 <MX_I2C1_Init+0x60>)
 8001230:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a13      	ldr	r2, [pc, #76]	; (8001284 <MX_I2C1_Init+0x64>)
 8001236:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800124a:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f011 f8f9 	bl	801245c <HAL_I2C_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40005400 	.word	0x40005400
 8001284:	000186a0 	.word	0x000186a0

08001288 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <I2C1_MspInit+0x8c>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <I2C1_MspInit+0x8c>)
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	6313      	str	r3, [r2, #48]	; 0x30
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <I2C1_MspInit+0x8c>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80012ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b2:	2312      	movs	r3, #18
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80012be:	2304      	movs	r3, #4
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4813      	ldr	r0, [pc, #76]	; (8001318 <I2C1_MspInit+0x90>)
 80012ca:	f010 fe2d 	bl	8011f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80012ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d4:	2312      	movs	r3, #18
 80012d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80012e0:	2304      	movs	r3, #4
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	480b      	ldr	r0, [pc, #44]	; (8001318 <I2C1_MspInit+0x90>)
 80012ec:	f010 fe1c 	bl	8011f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <I2C1_MspInit+0x8c>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a06      	ldr	r2, [pc, #24]	; (8001314 <I2C1_MspInit+0x8c>)
 80012fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <I2C1_MspInit+0x8c>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	40020400 	.word	0x40020400

0800131c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <I2C1_MspDeInit+0x30>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	4a08      	ldr	r2, [pc, #32]	; (800134c <I2C1_MspDeInit+0x30>)
 800132a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800132e:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001334:	4806      	ldr	r0, [pc, #24]	; (8001350 <I2C1_MspDeInit+0x34>)
 8001336:	f010 ff7b 	bl	8012230 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800133a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800133e:	4804      	ldr	r0, [pc, #16]	; (8001350 <I2C1_MspDeInit+0x34>)
 8001340:	f010 ff76 	bl	8012230 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	40020400 	.word	0x40020400

08001354 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	e00a      	b.n	800137c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001366:	f3af 8000 	nop.w
 800136a:	4601      	mov	r1, r0
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	60ba      	str	r2, [r7, #8]
 8001372:	b2ca      	uxtb	r2, r1
 8001374:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	3301      	adds	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	429a      	cmp	r2, r3
 8001382:	dbf0      	blt.n	8001366 <_read+0x12>
	}

return len;
 8001384:	687b      	ldr	r3, [r7, #4]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e009      	b.n	80013b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	60ba      	str	r2, [r7, #8]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fe1f 	bl	8000fec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dbf1      	blt.n	80013a0 <_write+0x12>
	}
	return len;
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_close>:

int _close(int file)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
	return -1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ee:	605a      	str	r2, [r3, #4]
	return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <_isatty>:

int _isatty(int file)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
	return 1;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
	return 0;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <_sbrk+0x5c>)
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <_sbrk+0x60>)
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <_sbrk+0x64>)
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <_sbrk+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	429a      	cmp	r2, r3
 800145e:	d207      	bcs.n	8001470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001460:	f012 ff7a 	bl	8014358 <__errno>
 8001464:	4603      	mov	r3, r0
 8001466:	220c      	movs	r2, #12
 8001468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e009      	b.n	8001484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <_sbrk+0x64>)
 8001480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20018000 	.word	0x20018000
 8001490:	00000400 	.word	0x00000400
 8001494:	2000012c 	.word	0x2000012c
 8001498:	20007400 	.word	0x20007400

0800149c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <SystemInit+0x20>)
 80014a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <SystemInit+0x20>)
 80014a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014c6:	490e      	ldr	r1, [pc, #56]	; (8001500 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014c8:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014cc:	e002      	b.n	80014d4 <LoopCopyDataInit>

080014ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d2:	3304      	adds	r3, #4

080014d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d8:	d3f9      	bcc.n	80014ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014dc:	4c0b      	ldr	r4, [pc, #44]	; (800150c <LoopFillZerobss+0x26>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e0:	e001      	b.n	80014e6 <LoopFillZerobss>

080014e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e4:	3204      	adds	r2, #4

080014e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e8:	d3fb      	bcc.n	80014e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014ea:	f7ff ffd7 	bl	800149c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ee:	f012 ff39 	bl	8014364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014f2:	f7ff fb48 	bl	8000b86 <main>
  bx  lr    
 80014f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001500:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8001504:	08015638 	.word	0x08015638
  ldr r2, =_sbss
 8001508:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 800150c:	20007400 	.word	0x20007400

08001510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC_IRQHandler>
	...

08001514 <VL53L3A2_Init>:
  * @brief Initialize X-NUCLEO-53L3A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L3A2_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
  int32_t status = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 800151e:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <VL53L3A2_Init+0xe4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	4934      	ldr	r1, [pc, #208]	; (80015f8 <VL53L3A2_Init+0xe4>)
 8001526:	600a      	str	r2, [r1, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d154      	bne.n	80015d6 <VL53L3A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 800152c:	f000 f8d4 	bl	80016d8 <_I2cFailRecover>
 8001530:	4602      	mov	r2, r0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4313      	orrs	r3, r2
 8001536:	607b      	str	r3, [r7, #4]
    status |= VL53L3A2_I2C_Init();
 8001538:	f7ff fdbc 	bl	80010b4 <BSP_I2C1_Init>
 800153c:	4602      	mov	r2, r0
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4313      	orrs	r3, r2
 8001542:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d147      	bne.n	80015da <VL53L3A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 800154a:	463a      	mov	r2, r7
 800154c:	2302      	movs	r3, #2
 800154e:	2100      	movs	r1, #0
 8001550:	2086      	movs	r0, #134	; 0x86
 8001552:	f000 f963 	bl	800181c <_ExpanderRd>
 8001556:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d13f      	bne.n	80015de <VL53L3A2_Init+0xca>
 800155e:	783b      	ldrb	r3, [r7, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d13c      	bne.n	80015de <VL53L3A2_Init+0xca>
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	2b16      	cmp	r3, #22
 8001568:	d139      	bne.n	80015de <VL53L3A2_Init+0xca>
	  {
      VL53L3A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 800156a:	463a      	mov	r2, r7
 800156c:	2302      	movs	r3, #2
 800156e:	2100      	movs	r1, #0
 8001570:	2084      	movs	r0, #132	; 0x84
 8001572:	f000 f953 	bl	800181c <_ExpanderRd>
 8001576:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d131      	bne.n	80015e2 <VL53L3A2_Init+0xce>
 800157e:	783b      	ldrb	r3, [r7, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d12e      	bne.n	80015e2 <VL53L3A2_Init+0xce>
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b16      	cmp	r3, #22
 8001588:	d12b      	bne.n	80015e2 <VL53L3A2_Init+0xce>
	  {
		  VL53L3A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <VL53L3A2_Init+0xe8>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 8001590:	23ff      	movs	r3, #255	; 0xff
 8001592:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 8001594:	23ff      	movs	r3, #255	; 0xff
 8001596:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 8001598:	463a      	mov	r2, r7
 800159a:	2302      	movs	r3, #2
 800159c:	2114      	movs	r1, #20
 800159e:	2086      	movs	r0, #134	; 0x86
 80015a0:	f000 f96e 	bl	8001880 <_ExpanderWR>
 80015a4:	6078      	str	r0, [r7, #4]

	  if (status)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d11c      	bne.n	80015e6 <VL53L3A2_Init+0xd2>
	  {
		VL53L3A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 80015ac:	23ff      	movs	r3, #255	; 0xff
 80015ae:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 80015b0:	23bf      	movs	r3, #191	; 0xbf
 80015b2:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 80015b4:	463a      	mov	r2, r7
 80015b6:	2302      	movs	r3, #2
 80015b8:	2114      	movs	r1, #20
 80015ba:	2084      	movs	r0, #132	; 0x84
 80015bc:	f000 f960 	bl	8001880 <_ExpanderWR>
 80015c0:	6078      	str	r0, [r7, #4]

	  if (status)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d110      	bne.n	80015ea <VL53L3A2_Init+0xd6>
		VL53L3A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <VL53L3A2_Init+0xe8>)
 80015ca:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 80015ce:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 80015d0:	f000 f904 	bl	80017dc <_ExpandersSetAllIO>
 80015d4:	6078      	str	r0, [r7, #4]
	  {
		VL53L3A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 80015d6:	bf00      	nop
 80015d8:	e008      	b.n	80015ec <VL53L3A2_Init+0xd8>
      goto done_err;
 80015da:	bf00      	nop
 80015dc:	e006      	b.n	80015ec <VL53L3A2_Init+0xd8>
      goto done_err;
 80015de:	bf00      	nop
 80015e0:	e004      	b.n	80015ec <VL53L3A2_Init+0xd8>
		  goto done_err;
 80015e2:	bf00      	nop
 80015e4:	e002      	b.n	80015ec <VL53L3A2_Init+0xd8>
		goto done_err;
 80015e6:	bf00      	nop
 80015e8:	e000      	b.n	80015ec <VL53L3A2_Init+0xd8>
		goto done_err;
 80015ea:	bf00      	nop
  return status;
 80015ec:	687b      	ldr	r3, [r7, #4]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000130 	.word	0x20000130
 80015fc:	20000134 	.word	0x20000134

08001600 <VL53L3A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L3A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L3A2_ResetId(uint8_t DevNo, uint8_t state)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	460a      	mov	r2, r1
 800160a:	71fb      	strb	r3, [r7, #7]
 800160c:	4613      	mov	r3, r2
 800160e:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d037      	beq.n	8001686 <VL53L3A2_ResetId+0x86>
 8001616:	2b02      	cmp	r3, #2
 8001618:	dc4e      	bgt.n	80016b8 <VL53L3A2_ResetId+0xb8>
 800161a:	2b00      	cmp	r3, #0
 800161c:	d01a      	beq.n	8001654 <VL53L3A2_ResetId+0x54>
 800161e:	2b01      	cmp	r3, #1
 8001620:	d14a      	bne.n	80016b8 <VL53L3A2_ResetId+0xb8>
  {
    case VL53L3A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 8001622:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <VL53L3A2_ResetId+0xcc>)
 8001624:	78db      	ldrb	r3, [r3, #3]
 8001626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <VL53L3A2_ResetId+0xcc>)
 800162e:	70da      	strb	r2, [r3, #3]

      if (state)
 8001630:	79bb      	ldrb	r3, [r7, #6]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d006      	beq.n	8001644 <VL53L3A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 8001636:	4b25      	ldr	r3, [pc, #148]	; (80016cc <VL53L3A2_ResetId+0xcc>)
 8001638:	78db      	ldrb	r3, [r3, #3]
 800163a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800163e:	b2da      	uxtb	r2, r3
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <VL53L3A2_ResetId+0xcc>)
 8001642:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8001644:	2301      	movs	r3, #1
 8001646:	4a22      	ldr	r2, [pc, #136]	; (80016d0 <VL53L3A2_ResetId+0xd0>)
 8001648:	2113      	movs	r1, #19
 800164a:	2084      	movs	r0, #132	; 0x84
 800164c:	f000 f918 	bl	8001880 <_ExpanderWR>
 8001650:	60f8      	str	r0, [r7, #12]
      break;
 8001652:	e035      	b.n	80016c0 <VL53L3A2_ResetId+0xc0>

    case VL53L3A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <VL53L3A2_ResetId+0xcc>)
 8001656:	785b      	ldrb	r3, [r3, #1]
 8001658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <VL53L3A2_ResetId+0xcc>)
 8001660:	705a      	strb	r2, [r3, #1]

      if (state)
 8001662:	79bb      	ldrb	r3, [r7, #6]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <VL53L3A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <VL53L3A2_ResetId+0xcc>)
 800166a:	785b      	ldrb	r3, [r3, #1]
 800166c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b16      	ldr	r3, [pc, #88]	; (80016cc <VL53L3A2_ResetId+0xcc>)
 8001674:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 8001676:	2301      	movs	r3, #1
 8001678:	4a16      	ldr	r2, [pc, #88]	; (80016d4 <VL53L3A2_ResetId+0xd4>)
 800167a:	2113      	movs	r1, #19
 800167c:	2086      	movs	r0, #134	; 0x86
 800167e:	f000 f8ff 	bl	8001880 <_ExpanderWR>
 8001682:	60f8      	str	r0, [r7, #12]
      break;
 8001684:	e01c      	b.n	80016c0 <VL53L3A2_ResetId+0xc0>

    case VL53L3A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <VL53L3A2_ResetId+0xcc>)
 8001688:	785b      	ldrb	r3, [r3, #1]
 800168a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <VL53L3A2_ResetId+0xcc>)
 8001692:	705a      	strb	r2, [r3, #1]

      if (state)
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <VL53L3A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <VL53L3A2_ResetId+0xcc>)
 800169c:	785b      	ldrb	r3, [r3, #1]
 800169e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <VL53L3A2_ResetId+0xcc>)
 80016a6:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 80016a8:	2301      	movs	r3, #1
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <VL53L3A2_ResetId+0xd4>)
 80016ac:	2113      	movs	r1, #19
 80016ae:	2086      	movs	r0, #134	; 0x86
 80016b0:	f000 f8e6 	bl	8001880 <_ExpanderWR>
 80016b4:	60f8      	str	r0, [r7, #12]
      break;
 80016b6:	e003      	b.n	80016c0 <VL53L3A2_ResetId+0xc0>

    default:
      VL53L3A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	60fb      	str	r3, [r7, #12]
      goto done;
 80016be:	e000      	b.n	80016c2 <VL53L3A2_ResetId+0xc2>
  if (status)
  {
    VL53L3A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 80016c0:	bf00      	nop
  return status;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000134 	.word	0x20000134
 80016d0:	20000137 	.word	0x20000137
 80016d4:	20000135 	.word	0x20000135

080016d8 <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	77bb      	strb	r3, [r7, #30]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 80016e2:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <_I2cFailRecover+0xf8>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d101      	bne.n	80016ee <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e06b      	b.n	80017c6 <_I2cFailRecover+0xee>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <_I2cFailRecover+0xfc>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a37      	ldr	r2, [pc, #220]	; (80017d4 <_I2cFailRecover+0xfc>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <_I2cFailRecover+0xfc>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = VL53L3A2_I2C_SCL_GPIO_PIN;
 800170a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001710:	2311      	movs	r3, #17
 8001712:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001714:	2301      	movs	r3, #1
 8001716:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L3A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001718:	f107 0308 	add.w	r3, r7, #8
 800171c:	4619      	mov	r1, r3
 800171e:	482e      	ldr	r0, [pc, #184]	; (80017d8 <_I2cFailRecover+0x100>)
 8001720:	f010 fc02 	bl	8011f28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L3A2_I2C_SDA_GPIO_PIN;
 8001724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800172a:	2311      	movs	r3, #17
 800172c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800172e:	2301      	movs	r3, #1
 8001730:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L3A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001732:	f107 0308 	add.w	r3, r7, #8
 8001736:	4619      	mov	r1, r3
 8001738:	4827      	ldr	r0, [pc, #156]	; (80017d8 <_I2cFailRecover+0x100>)
 800173a:	f010 fbf5 	bl	8011f28 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 800173e:	2201      	movs	r2, #1
 8001740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001744:	4824      	ldr	r0, [pc, #144]	; (80017d8 <_I2cFailRecover+0x100>)
 8001746:	f010 fe6f 	bl	8012428 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L3A2_I2C_SDA_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001750:	4821      	ldr	r0, [pc, #132]	; (80017d8 <_I2cFailRecover+0x100>)
 8001752:	f010 fe69 	bl	8012428 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 8001756:	2300      	movs	r3, #0
 8001758:	77fb      	strb	r3, [r7, #31]
 800175a:	e014      	b.n	8001786 <_I2cFailRecover+0xae>
    {
      HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001762:	481d      	ldr	r0, [pc, #116]	; (80017d8 <_I2cFailRecover+0x100>)
 8001764:	f010 fe60 	bl	8012428 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001768:	2001      	movs	r0, #1
 800176a:	f010 fad3 	bl	8011d14 <HAL_Delay>
      HAL_GPIO_WritePin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 800176e:	2201      	movs	r2, #1
 8001770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001774:	4818      	ldr	r0, [pc, #96]	; (80017d8 <_I2cFailRecover+0x100>)
 8001776:	f010 fe57 	bl	8012428 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 800177a:	2001      	movs	r0, #1
 800177c:	f010 faca 	bl	8011d14 <HAL_Delay>
    for (i = 0; i < 10U; i++)
 8001780:	7ffb      	ldrb	r3, [r7, #31]
 8001782:	3301      	adds	r3, #1
 8001784:	77fb      	strb	r3, [r7, #31]
 8001786:	7ffb      	ldrb	r3, [r7, #31]
 8001788:	2b09      	cmp	r3, #9
 800178a:	d9e7      	bls.n	800175c <_I2cFailRecover+0x84>
    }
    retry_cnt++;
 800178c:	7fbb      	ldrb	r3, [r7, #30]
 800178e:	3301      	adds	r3, #1
 8001790:	77bb      	strb	r3, [r7, #30]
  } while ((HAL_GPIO_ReadPin(VL53L3A2_I2C_SDA_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 8001792:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001796:	4810      	ldr	r0, [pc, #64]	; (80017d8 <_I2cFailRecover+0x100>)
 8001798:	f010 fe2e 	bl	80123f8 <HAL_GPIO_ReadPin>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <_I2cFailRecover+0xd0>
 80017a2:	7fbb      	ldrb	r3, [r7, #30]
 80017a4:	2b06      	cmp	r3, #6
 80017a6:	d9d6      	bls.n	8001756 <_I2cFailRecover+0x7e>

  if (HAL_GPIO_ReadPin(VL53L3A2_I2C_SCL_GPIO_PORT, VL53L3A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 80017a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ac:	480a      	ldr	r0, [pc, #40]	; (80017d8 <_I2cFailRecover+0x100>)
 80017ae:	f010 fe23 	bl	80123f8 <HAL_GPIO_ReadPin>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <_I2cFailRecover+0xe6>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 80017b8:	f06f 0304 	mvn.w	r3, #4
 80017bc:	e003      	b.n	80017c6 <_I2cFailRecover+0xee>
  }

  is_already_init = 1U;
 80017be:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <_I2cFailRecover+0xf8>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000138 	.word	0x20000138
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020400 	.word	0x40020400

080017dc <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 80017e2:	2302      	movs	r3, #2
 80017e4:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <_ExpandersSetAllIO+0x38>)
 80017e6:	2112      	movs	r1, #18
 80017e8:	2086      	movs	r0, #134	; 0x86
 80017ea:	f000 f849 	bl	8001880 <_ExpanderWR>
 80017ee:	6078      	str	r0, [r7, #4]

  if (status)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d107      	bne.n	8001806 <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 80017f6:	2302      	movs	r3, #2
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <_ExpandersSetAllIO+0x3c>)
 80017fa:	2112      	movs	r1, #18
 80017fc:	2084      	movs	r0, #132	; 0x84
 80017fe:	f000 f83f 	bl	8001880 <_ExpanderWR>
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	e000      	b.n	8001808 <_ExpandersSetAllIO+0x2c>
    goto done_err;
 8001806:	bf00      	nop

done_err:
  return status;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000134 	.word	0x20000134
 8001818:	20000136 	.word	0x20000136

0800181c <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af02      	add	r7, sp, #8
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	74fb      	strb	r3, [r7, #19]
  VL53L3A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L3A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	b299      	uxth	r1, r3
 8001834:	f107 0213 	add.w	r2, r7, #19
 8001838:	2364      	movs	r3, #100	; 0x64
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2301      	movs	r3, #1
 800183e:	480f      	ldr	r0, [pc, #60]	; (800187c <_ExpanderRd+0x60>)
 8001840:	f010 ff94 	bl	801276c <HAL_I2C_Master_Transmit>
 8001844:	4603      	mov	r3, r0
 8001846:	617b      	str	r3, [r7, #20]

    if (status)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d110      	bne.n	8001870 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L3A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	b299      	uxth	r1, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b29a      	uxth	r2, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2064      	movs	r0, #100	; 0x64
 800185a:	fb00 f303 	mul.w	r3, r0, r3
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	4613      	mov	r3, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	4805      	ldr	r0, [pc, #20]	; (800187c <_ExpanderRd+0x60>)
 8001866:	f011 f87f 	bl	8012968 <HAL_I2C_Master_Receive>
 800186a:	4603      	mov	r3, r0
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	e000      	b.n	8001872 <_ExpanderRd+0x56>
      break;
 8001870:	bf00      	nop
  } while (0);

  VL53L3A2_PutI2cBus();

  return status;
 8001872:	697b      	ldr	r3, [r7, #20]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20007154 	.word	0x20007154

08001880 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08c      	sub	sp, #48	; 0x30
 8001884:	af02      	add	r7, sp, #8
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	3301      	adds	r3, #1
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4618      	mov	r0, r3
 80018a0:	f012 fd84 	bl	80143ac <memcpy>

  VL53L3A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L3A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	b299      	uxth	r1, r3
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	3301      	adds	r3, #1
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	f107 0214 	add.w	r2, r7, #20
 80018b4:	2064      	movs	r0, #100	; 0x64
 80018b6:	9000      	str	r0, [sp, #0]
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <_ExpanderWR+0x4c>)
 80018ba:	f010 ff57 	bl	801276c <HAL_I2C_Master_Transmit>
 80018be:	4603      	mov	r3, r0
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L3A2_PutI2cBus();

  return status;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3728      	adds	r7, #40	; 0x28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20007154 	.word	0x20007154

080018d0 <VL53L3A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d903      	bls.n	80018e6 <VL53L3A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018de:	f06f 0301 	mvn.w	r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	e014      	b.n	8001910 <VL53L3A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L3A2_Init() != 0)
 80018e6:	f7ff fe15 	bl	8001514 <VL53L3A2_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <VL53L3A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80018f0:	f06f 0303 	mvn.w	r3, #3
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	e00b      	b.n	8001910 <VL53L3A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L3A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 80018f8:	2101      	movs	r1, #1
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f8fc 	bl	8001af8 <VL53L3A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L3A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 8001900:	2100      	movs	r1, #0
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f8f8 	bl	8001af8 <VL53L3A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L3CX_Probe(Instance);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f935 	bl	8001b78 <VL53L3CX_Probe>
 800190e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001910:	68fb      	ldr	r3, [r7, #12]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <VL53L3A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d903      	bls.n	8001934 <VL53L3A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800192c:	f06f 0301 	mvn.w	r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	e012      	b.n	800195a <VL53L3A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->ReadID(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <VL53L3A2_RANGING_SENSOR_ReadID+0x48>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	490b      	ldr	r1, [pc, #44]	; (8001968 <VL53L3A2_RANGING_SENSOR_ReadID+0x4c>)
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001942:	6839      	ldr	r1, [r7, #0]
 8001944:	4610      	mov	r0, r2
 8001946:	4798      	blx	r3
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	da03      	bge.n	8001956 <VL53L3A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800194e:	f06f 0304 	mvn.w	r3, #4
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	e001      	b.n	800195a <VL53L3A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000148 	.word	0x20000148
 8001968:	2000013c 	.word	0x2000013c

0800196c <VL53L3A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d903      	bls.n	8001984 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800197c:	f06f 0301 	mvn.w	r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e012      	b.n	80019aa <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x48>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	490b      	ldr	r1, [pc, #44]	; (80019b8 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001992:	6839      	ldr	r1, [r7, #0]
 8001994:	4610      	mov	r0, r2
 8001996:	4798      	blx	r3
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	da03      	bge.n	80019a6 <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800199e:	f06f 0304 	mvn.w	r3, #4
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e001      	b.n	80019aa <VL53L3A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80019aa:	68fb      	ldr	r3, [r7, #12]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000148 	.word	0x20000148
 80019b8:	2000013c 	.word	0x2000013c

080019bc <VL53L3A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d903      	bls.n	80019d4 <VL53L3A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019cc:	f06f 0301 	mvn.w	r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	e012      	b.n	80019fa <VL53L3A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->GetDistance(VL53L3A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <VL53L3A2_RANGING_SENSOR_GetDistance+0x48>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	490b      	ldr	r1, [pc, #44]	; (8001a08 <VL53L3A2_RANGING_SENSOR_GetDistance+0x4c>)
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80019e2:	6839      	ldr	r1, [r7, #0]
 80019e4:	4610      	mov	r0, r2
 80019e6:	4798      	blx	r3
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	da03      	bge.n	80019f6 <VL53L3A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80019ee:	f06f 0304 	mvn.w	r3, #4
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	e001      	b.n	80019fa <VL53L3A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80019fa:	68fb      	ldr	r3, [r7, #12]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000148 	.word	0x20000148
 8001a08:	2000013c 	.word	0x2000013c

08001a0c <VL53L3A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d903      	bls.n	8001a24 <VL53L3A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a1c:	f06f 0301 	mvn.w	r3, #1
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	e012      	b.n	8001a4a <VL53L3A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->Start(VL53L3A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <VL53L3A2_RANGING_SENSOR_Start+0x48>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	490b      	ldr	r1, [pc, #44]	; (8001a58 <VL53L3A2_RANGING_SENSOR_Start+0x4c>)
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a32:	6839      	ldr	r1, [r7, #0]
 8001a34:	4610      	mov	r0, r2
 8001a36:	4798      	blx	r3
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	da03      	bge.n	8001a46 <VL53L3A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a3e:	f06f 0304 	mvn.w	r3, #4
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e001      	b.n	8001a4a <VL53L3A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000148 	.word	0x20000148
 8001a58:	2000013c 	.word	0x2000013c

08001a5c <VL53L3A2_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d903      	bls.n	8001a72 <VL53L3A2_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a6a:	f06f 0301 	mvn.w	r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	e011      	b.n	8001a96 <VL53L3A2_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->Stop(VL53L3A2_RANGING_SENSOR_CompObj[Instance]) < 0)
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <VL53L3A2_RANGING_SENSOR_Stop+0x44>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	490a      	ldr	r1, [pc, #40]	; (8001aa4 <VL53L3A2_RANGING_SENSOR_Stop+0x48>)
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001a80:	4610      	mov	r0, r2
 8001a82:	4798      	blx	r3
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da03      	bge.n	8001a92 <VL53L3A2_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001a8a:	f06f 0304 	mvn.w	r3, #4
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e001      	b.n	8001a96 <VL53L3A2_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000148 	.word	0x20000148
 8001aa4:	2000013c 	.word	0x2000013c

08001aa8 <VL53L3A2_RANGING_SENSOR_SetAddress>:
  * @param Instance    Ranging sensor instance.
  * @param Address     New I2C address.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_SetAddress(uint32_t Instance, uint32_t Address)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d903      	bls.n	8001ac0 <VL53L3A2_RANGING_SENSOR_SetAddress+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ab8:	f06f 0301 	mvn.w	r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	e012      	b.n	8001ae6 <VL53L3A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else if (VL53L3A2_RANGING_SENSOR_Drv->SetAddress(VL53L3A2_RANGING_SENSOR_CompObj[Instance], Address) < 0)
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <VL53L3A2_RANGING_SENSOR_SetAddress+0x48>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	490b      	ldr	r1, [pc, #44]	; (8001af4 <VL53L3A2_RANGING_SENSOR_SetAddress+0x4c>)
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001ace:	6839      	ldr	r1, [r7, #0]
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4798      	blx	r3
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	da03      	bge.n	8001ae2 <VL53L3A2_RANGING_SENSOR_SetAddress+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001ada:	f06f 0304 	mvn.w	r3, #4
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e001      	b.n	8001ae6 <VL53L3A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000148 	.word	0x20000148
 8001af4:	2000013c 	.word	0x2000013c

08001af8 <VL53L3A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L3A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d903      	bls.n	8001b10 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b08:	f06f 0301 	mvn.w	r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	e02e      	b.n	8001b6e <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d112      	bne.n	8001b3c <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L3A2_ResetId((uint8_t)Instance, 1) < 0)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fd6f 	bl	8001600 <VL53L3A2_ResetId>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	da03      	bge.n	8001b30 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b28:	f06f 0303 	mvn.w	r3, #3
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	e01e      	b.n	8001b6e <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001b30:	2002      	movs	r0, #2
 8001b32:	f010 f8ef 	bl	8011d14 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	e018      	b.n	8001b6e <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d112      	bne.n	8001b68 <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L3A2_ResetId((uint8_t)Instance, 0) < 0)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fd59 	bl	8001600 <VL53L3A2_ResetId>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	da03      	bge.n	8001b5c <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b54:	f06f 0303 	mvn.w	r3, #3
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	e008      	b.n	8001b6e <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 8001b5c:	2002      	movs	r0, #2
 8001b5e:	f010 f8d9 	bl	8011d14 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e002      	b.n	8001b6e <VL53L3A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b68:	f06f 0301 	mvn.w	r3, #1
 8001b6c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <VL53L3CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L3CX_Probe(uint32_t Instance)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  VL53L3CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L3CX_Object_t   VL53L3CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L3CX_ADDRESS;
 8001b80:	2352      	movs	r3, #82	; 0x52
 8001b82:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L3A2_I2C_Init;
 8001b84:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <VL53L3CX_Probe+0xf0>)
 8001b86:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L3A2_I2C_DeInit;
 8001b88:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <VL53L3CX_Probe+0xf4>)
 8001b8a:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L3A2_I2C_WriteReg;
 8001b8c:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <VL53L3CX_Probe+0xf8>)
 8001b8e:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L3A2_I2C_ReadReg;
 8001b90:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <VL53L3CX_Probe+0xfc>)
 8001b92:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L3A2_GetTick;
 8001b94:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <VL53L3CX_Probe+0x100>)
 8001b96:	623b      	str	r3, [r7, #32]

  if (VL53L3CX_RegisterBusIO(&(VL53L3CXObj[Instance]), &IOCtx) != VL53L3CX_OK)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f242 42f0 	movw	r2, #9456	; 0x24f0
 8001b9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ba2:	4a36      	ldr	r2, [pc, #216]	; (8001c7c <VL53L3CX_Probe+0x104>)
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f107 020c 	add.w	r2, r7, #12
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f00f fbf2 	bl	8011396 <VL53L3CX_RegisterBusIO>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <VL53L3CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001bb8:	f06f 0304 	mvn.w	r3, #4
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbe:	e04d      	b.n	8001c5c <VL53L3CX_Probe+0xe4>
  }
  else if (VL53L3CX_ReadID(&(VL53L3CXObj[Instance]), &id) != VL53L3CX_OK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f242 42f0 	movw	r2, #9456	; 0x24f0
 8001bc6:	fb02 f303 	mul.w	r3, r2, r3
 8001bca:	4a2c      	ldr	r2, [pc, #176]	; (8001c7c <VL53L3CX_Probe+0x104>)
 8001bcc:	4413      	add	r3, r2
 8001bce:	f107 0208 	add.w	r2, r7, #8
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f00f fc90 	bl	80114fa <VL53L3CX_ReadID>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <VL53L3CX_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001be0:	f06f 0304 	mvn.w	r3, #4
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
 8001be6:	e039      	b.n	8001c5c <VL53L3CX_Probe+0xe4>
  }
  else
  {
    if (id != VL53L3CX_ID)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f64e 22aa 	movw	r2, #60074	; 0xeaaa
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d003      	beq.n	8001bfa <VL53L3CX_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001bf2:	f06f 0306 	mvn.w	r3, #6
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf8:	e030      	b.n	8001c5c <VL53L3CX_Probe+0xe4>
    }
    else
    {
      VL53L3A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L3CX_RANGING_SENSOR_Driver;
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <VL53L3CX_Probe+0x108>)
 8001bfc:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <VL53L3CX_Probe+0x10c>)
 8001bfe:	601a      	str	r2, [r3, #0]
      VL53L3A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L3CXObj[Instance]);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f242 42f0 	movw	r2, #9456	; 0x24f0
 8001c06:	fb02 f303 	mul.w	r3, r2, r3
 8001c0a:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <VL53L3CX_Probe+0x104>)
 8001c0c:	441a      	add	r2, r3
 8001c0e:	491e      	ldr	r1, [pc, #120]	; (8001c88 <VL53L3CX_Probe+0x110>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L3A2_RANGING_SENSOR_Drv->Init(VL53L3A2_RANGING_SENSOR_CompObj[Instance]) != VL53L3CX_OK)
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <VL53L3CX_Probe+0x108>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	491a      	ldr	r1, [pc, #104]	; (8001c88 <VL53L3CX_Probe+0x110>)
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c24:	4610      	mov	r0, r2
 8001c26:	4798      	blx	r3
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <VL53L3CX_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001c2e:	f06f 0304 	mvn.w	r3, #4
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
 8001c34:	e012      	b.n	8001c5c <VL53L3CX_Probe+0xe4>
      }
      else if (VL53L3A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L3A2_RANGING_SENSOR_CompObj[Instance], &VL53L3A2_RANGING_SENSOR_Cap) != VL53L3CX_OK)
 8001c36:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <VL53L3CX_Probe+0x108>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4912      	ldr	r1, [pc, #72]	; (8001c88 <VL53L3CX_Probe+0x110>)
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c44:	4911      	ldr	r1, [pc, #68]	; (8001c8c <VL53L3CX_Probe+0x114>)
 8001c46:	4610      	mov	r0, r2
 8001c48:	4798      	blx	r3
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <VL53L3CX_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001c50:	f06f 0304 	mvn.w	r3, #4
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
 8001c56:	e001      	b.n	8001c5c <VL53L3CX_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3728      	adds	r7, #40	; 0x28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	080010b5 	.word	0x080010b5
 8001c6c:	08001119 	.word	0x08001119
 8001c70:	08001169 	.word	0x08001169
 8001c74:	080011bd 	.word	0x080011bd
 8001c78:	08001211 	.word	0x08001211
 8001c7c:	20000160 	.word	0x20000160
 8001c80:	20000148 	.word	0x20000148
 8001c84:	20000048 	.word	0x20000048
 8001c88:	2000013c 	.word	0x2000013c
 8001c8c:	2000014c 	.word	0x2000014c

08001c90 <VL53LX_SetDeviceAddress>:
}



VL53LX_Error VL53LX_SetDeviceAddress(VL53LX_DEV Dev, uint8_t DeviceAddress)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3318      	adds	r3, #24
 8001ca4:	613b      	str	r3, [r7, #16]
	VL53LX_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8001cac:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53LX_WrByte(Dev, VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	085b      	lsrs	r3, r3, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f00f f98b 	bl	8010fd4 <VL53LX_WrByte>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	085b      	lsrs	r3, r3, #1
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001cd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <VL53LX_DataInit>:


VL53LX_Error VL53LX_DataInit(VL53LX_DEV Dev)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	75fb      	strb	r3, [r7, #23]
		Status = VL53LX_WrByte(Dev, VL53LX_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53LX_ERROR_NONE)
 8001cea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d105      	bne.n	8001cfe <VL53LX_DataInit+0x20>
		Status = VL53LX_data_init(Dev, 1);
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f001 fcba 	bl	800366e <VL53LX_data_init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53LX_ERROR_NONE)
 8001cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d107      	bne.n	8001d16 <VL53LX_DataInit+0x38>
		Status = SetPresetModeL3CX(Dev,
 8001d06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f887 	bl	8001e20 <SetPresetModeL3CX>
 8001d12:	4603      	mov	r3, r0
 8001d14:	75fb      	strb	r3, [r7, #23]
			VL53LX_DISTANCEMODE_MEDIUM,
			1000);


	if (Status == VL53LX_ERROR_NONE)
 8001d16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <VL53LX_DataInit+0x4e>
		Status = VL53LX_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001d1e:	f248 2135 	movw	r1, #33333	; 0x8235
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f980 	bl	8002028 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	75fb      	strb	r3, [r7, #23]
				33333);

	if (Status == VL53LX_ERROR_NONE) {
 8001d2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10a      	bne.n	8001d4a <VL53LX_DataInit+0x6c>
		pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3318      	adds	r3, #24
 8001d38:	613b      	str	r3, [r7, #16]
		memset(&pdev->per_vcsel_cal_data, 0,
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8001d40:	220c      	movs	r2, #12
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f012 fb3f 	bl	80143c8 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <VL53LX_DataInit+0x80>
		Status = VL53LX_set_dmax_mode(Dev,
 8001d52:	2102      	movs	r1, #2
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f003 fdb0 	bl	80058ba <VL53LX_set_dmax_mode>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	75fb      	strb	r3, [r7, #23]
			VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	if (Status == VL53LX_ERROR_NONE)
 8001d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <VL53LX_DataInit+0x94>
		Status = VL53LX_SmudgeCorrectionEnable(Dev,
 8001d66:	2100      	movs	r1, #0
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 ff41 	bl	8002bf0 <VL53LX_SmudgeCorrectionEnable>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	75fb      	strb	r3, [r7, #23]
			VL53LX_SMUDGE_CORRECTION_NONE);

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001d72:	2320      	movs	r3, #32
 8001d74:	73fb      	strb	r3, [r7, #15]
	VL53LXDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	76da      	strb	r2, [r3, #27]

	VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8001d82:	3320      	adds	r3, #32
 8001d84:	2202      	movs	r2, #2
 8001d86:	701a      	strb	r2, [r3, #0]
			VL53LX_DISTANCEMODE_MEDIUM);

	LOG_FUNCTION_END(Status);
	return Status;
 8001d88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <VL53LX_WaitDeviceBooted>:


VL53LX_Error VL53LX_WaitDeviceBooted(VL53LX_DEV Dev)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_poll_for_boot_completion(Dev,
 8001da0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f00e fd5c 	bl	8010862 <VL53LX_poll_for_boot_completion>
 8001daa:	4603      	mov	r3, r0
 8001dac:	73fb      	strb	r3, [r7, #15]
			VL53LX_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8001dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <ComputeDevicePresetMode>:


static VL53LX_Error ComputeDevicePresetMode(
		VL53LX_DistanceModes DistanceMode,
		VL53LX_DevicePresetModes *pDevicePresetMode)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	73bb      	strb	r3, [r7, #14]

	uint8_t DistIdx;
	VL53LX_DevicePresetModes RangingModes[3] = {
 8001dcc:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <ComputeDevicePresetMode+0x60>)
 8001dce:	f107 0308 	add.w	r3, r7, #8
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	8019      	strh	r1, [r3, #0]
 8001dd8:	3302      	adds	r3, #2
 8001dda:	0c12      	lsrs	r2, r2, #16
 8001ddc:	701a      	strb	r2, [r3, #0]
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	switch (DistanceMode) {
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d002      	beq.n	8001dea <ComputeDevicePresetMode+0x2e>
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d003      	beq.n	8001df0 <ComputeDevicePresetMode+0x34>
 8001de8:	e005      	b.n	8001df6 <ComputeDevicePresetMode+0x3a>
	case VL53LX_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	73fb      	strb	r3, [r7, #15]
		break;
 8001dee:	e004      	b.n	8001dfa <ComputeDevicePresetMode+0x3e>
	case VL53LX_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
		break;
 8001df4:	e001      	b.n	8001dfa <ComputeDevicePresetMode+0x3e>
	default:
		DistIdx = 2;
 8001df6:	2302      	movs	r3, #2
 8001df8:	73fb      	strb	r3, [r7, #15]
	}

	*pDevicePresetMode = RangingModes[DistIdx];
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	f107 0210 	add.w	r2, r7, #16
 8001e00:	4413      	add	r3, r2
 8001e02:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	701a      	strb	r2, [r3, #0]

	return Status;
 8001e0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	0801556c 	.word	0x0801556c

08001e20 <SetPresetModeL3CX>:

static VL53LX_Error SetPresetModeL3CX(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b08e      	sub	sp, #56	; 0x38
 8001e24:	af04      	add	r7, sp, #16
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	measurement_mode  = VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001e44:	2320      	movs	r3, #32
 8001e46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	Status = ComputeDevicePresetMode(DistanceMode,
 8001e4a:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8001e4e:	7afb      	ldrb	r3, [r7, #11]
 8001e50:	4611      	mov	r1, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ffb2 	bl	8001dbc <ComputeDevicePresetMode>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53LX_ERROR_NONE)
 8001e5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d112      	bne.n	8001e8c <SetPresetModeL3CX+0x6c>
		Status =  VL53LX_get_preset_mode_timing_cfg(Dev,
 8001e66:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001e6a:	f107 001c 	add.w	r0, r7, #28
 8001e6e:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	f107 0318 	add.w	r3, r7, #24
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	4603      	mov	r3, r0
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f002 f859 	bl	8003f38 <VL53LX_get_preset_mode_timing_cfg>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53LX_ERROR_NONE)
 8001e8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d112      	bne.n	8001eba <SetPresetModeL3CX+0x9a>
		Status = VL53LX_set_preset_mode(
 8001e94:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001e98:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8001e9a:	69fd      	ldr	r5, [r7, #28]
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	9102      	str	r1, [sp, #8]
 8001ea4:	9201      	str	r2, [sp, #4]
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	462b      	mov	r3, r5
 8001eaa:	4622      	mov	r2, r4
 8001eac:	4601      	mov	r1, r0
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f002 f8a3 	bl	8003ffa <VL53LX_set_preset_mode>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001eba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d103      	bne.n	8001eca <SetPresetModeL3CX+0xaa>
		VL53LXDevDataSet(Dev, LLData.measurement_mode,
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001ec8:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	LOG_FUNCTION_END(Status);
	return Status;
 8001eca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3728      	adds	r7, #40	; 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bdb0      	pop	{r4, r5, r7, pc}

08001ed6 <IsL4>:

static int IsL4(VL53LX_DEV Dev)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b085      	sub	sp, #20
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
	int devL4 = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
	VL53LX_LLDriverData_t *pDev;
	pDev = VL53LXDevStructGetLLDriverHandle(Dev);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3318      	adds	r3, #24
 8001ee6:	60bb      	str	r3, [r7, #8]

	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f893 3393 	ldrb.w	r3, [r3, #915]	; 0x393
 8001eee:	2baa      	cmp	r3, #170	; 0xaa
 8001ef0:	d106      	bne.n	8001f00 <IsL4+0x2a>
		(pDev->nvm_copy_data.identification__model_id == 0xEB))
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	f893 3392 	ldrb.w	r3, [r3, #914]	; 0x392
	if ((pDev->nvm_copy_data.identification__module_type == 0xAA) &&
 8001ef8:	2beb      	cmp	r3, #235	; 0xeb
 8001efa:	d101      	bne.n	8001f00 <IsL4+0x2a>
		devL4 = 1;
 8001efc:	2301      	movs	r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
	return devL4;
 8001f00:	68fb      	ldr	r3, [r7, #12]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <CheckValidRectRoi>:

static VL53LX_Error CheckValidRectRoi(VL53LX_UserRoi_t ROI)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b085      	sub	sp, #20
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001f1a:	793b      	ldrb	r3, [r7, #4]
 8001f1c:	2b0f      	cmp	r3, #15
 8001f1e:	d808      	bhi.n	8001f32 <CheckValidRectRoi+0x24>
 8001f20:	797b      	ldrb	r3, [r7, #5]
 8001f22:	2b0f      	cmp	r3, #15
 8001f24:	d805      	bhi.n	8001f32 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001f26:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001f28:	2b0f      	cmp	r3, #15
 8001f2a:	d802      	bhi.n	8001f32 <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	2b0f      	cmp	r3, #15
 8001f30:	d901      	bls.n	8001f36 <CheckValidRectRoi+0x28>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001f32:	23fc      	movs	r3, #252	; 0xfc
 8001f34:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8001f36:	793a      	ldrb	r2, [r7, #4]
 8001f38:	79bb      	ldrb	r3, [r7, #6]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d803      	bhi.n	8001f46 <CheckValidRectRoi+0x38>
 8001f3e:	797a      	ldrb	r2, [r7, #5]
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d201      	bcs.n	8001f4a <CheckValidRectRoi+0x3c>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8001f46:	23fc      	movs	r3, #252	; 0xfc
 8001f48:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <VL53LX_SetDistanceMode>:


VL53LX_Error VL53LX_SetDistanceMode(VL53LX_DEV Dev,
		VL53LX_DistanceModes DistanceMode)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b088      	sub	sp, #32
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	77fb      	strb	r3, [r7, #31]
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("%d", (int)DistanceMode);



	if ((DistanceMode != VL53LX_DISTANCEMODE_SHORT) &&
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d008      	beq.n	8001f8e <VL53LX_SetDistanceMode+0x34>
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d005      	beq.n	8001f8e <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_MEDIUM) &&
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d002      	beq.n	8001f8e <VL53LX_SetDistanceMode+0x34>
		(DistanceMode != VL53LX_DISTANCEMODE_LONG))
		return VL53LX_ERROR_INVALID_PARAMS;
 8001f88:	f06f 0303 	mvn.w	r3, #3
 8001f8c:	e048      	b.n	8002020 <VL53LX_SetDistanceMode+0xc6>

	if (IsL4(Dev) && (DistanceMode == VL53LX_DISTANCEMODE_SHORT))
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ffa1 	bl	8001ed6 <IsL4>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <VL53LX_SetDistanceMode+0x4c>
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d102      	bne.n	8001fa6 <VL53LX_SetDistanceMode+0x4c>
		return VL53LX_ERROR_INVALID_PARAMS;
 8001fa0:	f06f 0303 	mvn.w	r3, #3
 8001fa4:	e03c      	b.n	8002020 <VL53LX_SetDistanceMode+0xc6>

	inter_measurement_period_ms =  VL53LXDevDataGet(Dev,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001faa:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE)
 8001fac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10a      	bne.n	8001fca <VL53LX_SetDistanceMode+0x70>
		Status = VL53LX_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	f107 0210 	add.w	r2, r7, #16
 8001fbc:	f107 010c 	add.w	r1, r7, #12
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f001 fe92 	bl	8003cea <VL53LX_get_timeouts_us>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53LX_ERROR_NONE)
 8001fca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d107      	bne.n	8001fe2 <VL53LX_SetDistanceMode+0x88>
		Status = SetPresetModeL3CX(Dev,
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff21 	bl	8001e20 <SetPresetModeL3CX>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	77fb      	strb	r3, [r7, #31]
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53LX_ERROR_NONE) {
 8001fe2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d105      	bne.n	8001ff6 <VL53LX_SetDistanceMode+0x9c>
		VL53LXDevDataSet(Dev, CurrentParameters.DistanceMode,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8001ff0:	3320      	adds	r3, #32
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	701a      	strb	r2, [r3, #0]
				DistanceMode);
	}

	if (Status == VL53LX_ERROR_NONE) {
 8001ff6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10e      	bne.n	800201c <VL53LX_SetDistanceMode+0xc2>
		Status = VL53LX_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8001ffe:	68f9      	ldr	r1, [r7, #12]
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f001 fe37 	bl	8003c78 <VL53LX_set_timeouts_us>
 800200a:	4603      	mov	r3, r0
 800200c:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53LX_ERROR_NONE)
 800200e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <VL53LX_SetDistanceMode+0xc2>
			VL53LXDevDataSet(Dev, LLData.range_config_timeout_us,
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800201c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3720      	adds	r7, #32
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>:
}


VL53LX_Error VL53LX_SetMeasurementTimingBudgetMicroSeconds(VL53LX_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8002044:	4b31      	ldr	r3, [pc, #196]	; (800210c <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe4>)
 8002046:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	4a31      	ldr	r2, [pc, #196]	; (8002110 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xe8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d902      	bls.n	8002056 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x2e>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002050:	23fc      	movs	r3, #252	; 0xfc
 8002052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53LX_ERROR_NONE)
 8002056:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10b      	bne.n	8002076 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x4e>
		Status = VL53LX_get_timeouts_us(Dev,
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	f107 0210 	add.w	r2, r7, #16
 8002066:	f107 010c 	add.w	r1, r7, #12
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f001 fe3d 	bl	8003cea <VL53LX_get_timeouts_us>
 8002070:	4603      	mov	r3, r0
 8002072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	TimingGuard = 1700;
 8002076:	f240 63a4 	movw	r3, #1700	; 0x6a4
 800207a:	61fb      	str	r3, [r7, #28]
	divisor = 6;
 800207c:	2306      	movs	r3, #6
 800207e:	61bb      	str	r3, [r7, #24]

	if (IsL4(Dev))
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ff28 	bl	8001ed6 <IsL4>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x68>
		FDAMaxTimingBudgetUs = L4_FDA_MAX_TIMING_BUDGET_US;
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xec>)
 800208e:	623b      	str	r3, [r7, #32]

	if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	429a      	cmp	r2, r3
 8002096:	d803      	bhi.n	80020a0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x78>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002098:	23fc      	movs	r3, #252	; 0xfc
 800209a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800209e:	e003      	b.n	80020a8 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x80>
	else {
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
				- TimingGuard);
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	1ad3      	subs	r3, r2, r3
		TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80020a6:	617b      	str	r3, [r7, #20]
	}

	if (Status == VL53LX_ERROR_NONE) {
 80020a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d11c      	bne.n	80020ea <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
		if (TimingBudget > FDAMaxTimingBudgetUs)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	6a3a      	ldr	r2, [r7, #32]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d203      	bcs.n	80020c0 <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0x98>
			Status = VL53LX_ERROR_INVALID_PARAMS;
 80020b8:	23fc      	movs	r3, #252	; 0xfc
 80020ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020be:	e00d      	b.n	80020dc <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xb4>
		else {
			TimingBudget /= divisor;
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
			Status = VL53LX_set_timeouts_us(
 80020ca:	68f9      	ldr	r1, [r7, #12]
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f001 fdd1 	bl	8003c78 <VL53LX_set_timeouts_us>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PhaseCalTimeoutUs,
				MmTimeoutUs,
				TimingBudget);
		}

		if (Status == VL53LX_ERROR_NONE)
 80020dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xc2>
			VL53LXDevDataSet(Dev,
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28
				LLData.range_config_timeout_us,
				TimingBudget);
	}

	if (Status == VL53LX_ERROR_NONE) {
 80020ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d105      	bne.n	80020fe <VL53LX_SetMeasurementTimingBudgetMicroSeconds+0xd6>
		VL53LXDevDataSet(Dev,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80020f8:	3324      	adds	r3, #36	; 0x24
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	601a      	str	r2, [r3, #0]
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80020fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002102:	4618      	mov	r0, r3
 8002104:	3728      	adds	r7, #40	; 0x28
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	00086470 	.word	0x00086470
 8002110:	00989680 	.word	0x00989680
 8002114:	00030d40 	.word	0x00030d40

08002118 <VL53LX_SetUserROI>:



VL53LX_Error VL53LX_SetUserROI(VL53LX_DEV Dev,
		VL53LX_UserRoi_t *pRoi)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b092      	sub	sp, #72	; 0x48
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002122:	2300      	movs	r3, #0
 8002124:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53LX_zone_config_t  zone_cfg;
	uint8_t x_centre, y_centre, width, height;

	Status = CheckValidRectRoi(*pRoi);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2300      	movs	r3, #0
 800212e:	4613      	mov	r3, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff feec 	bl	8001f0e <CheckValidRectRoi>
 8002136:	4603      	mov	r3, r0
 8002138:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (Status != VL53LX_ERROR_NONE)
 800213c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <VL53LX_SetUserROI+0x32>
		return VL53LX_ERROR_INVALID_PARAMS;
 8002144:	f06f 0303 	mvn.w	r3, #3
 8002148:	e050      	b.n	80021ec <VL53LX_SetUserROI+0xd4>

	x_centre = (pRoi->BotRightX + pRoi->TopLeftX  + 1) / 2;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	789b      	ldrb	r3, [r3, #2]
 800214e:	461a      	mov	r2, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4413      	add	r3, r2
 8002156:	3301      	adds	r3, #1
 8002158:	0fda      	lsrs	r2, r3, #31
 800215a:	4413      	add	r3, r2
 800215c:	105b      	asrs	r3, r3, #1
 800215e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	y_centre = (pRoi->TopLeftY  + pRoi->BotRightY + 1) / 2;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	785b      	ldrb	r3, [r3, #1]
 8002166:	461a      	mov	r2, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	78db      	ldrb	r3, [r3, #3]
 800216c:	4413      	add	r3, r2
 800216e:	3301      	adds	r3, #1
 8002170:	0fda      	lsrs	r2, r3, #31
 8002172:	4413      	add	r3, r2
 8002174:	105b      	asrs	r3, r3, #1
 8002176:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	width =    (pRoi->BotRightX - pRoi->TopLeftX);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	789a      	ldrb	r2, [r3, #2]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	height =   (pRoi->TopLeftY  - pRoi->BotRightY);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	785a      	ldrb	r2, [r3, #1]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	78db      	ldrb	r3, [r3, #3]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	zone_cfg.max_zones = 1;
 8002196:	2301      	movs	r3, #1
 8002198:	733b      	strb	r3, [r7, #12]
	zone_cfg.active_zones = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	737b      	strb	r3, [r7, #13]
	zone_cfg.user_zones[0].x_centre = x_centre;
 800219e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80021a2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	zone_cfg.user_zones[0].y_centre = y_centre;
 80021a6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80021aa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	zone_cfg.user_zones[0].width = width;
 80021ae:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80021b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	zone_cfg.user_zones[0].height = height;
 80021b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80021ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if ((width < 3) || (height < 3))
 80021be:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d903      	bls.n	80021ce <VL53LX_SetUserROI+0xb6>
 80021c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d803      	bhi.n	80021d6 <VL53LX_SetUserROI+0xbe>
		Status = VL53LX_ERROR_INVALID_PARAMS;
 80021ce:	23fc      	movs	r3, #252	; 0xfc
 80021d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80021d4:	e008      	b.n	80021e8 <VL53LX_SetUserROI+0xd0>
	else
		Status =  VL53LX_set_zone_config(Dev, &zone_cfg);
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	4619      	mov	r1, r3
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f001 fe68 	bl	8003eb2 <VL53LX_set_zone_config>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	LOG_FUNCTION_END(Status);
	return Status;
 80021e8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3748      	adds	r7, #72	; 0x48
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <VL53LX_StartMeasurement>:




VL53LX_Error VL53LX_StartMeasurement(VL53LX_DEV Dev)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	75fb      	strb	r3, [r7, #23]
	uint8_t DeviceMeasurementMode;
	uint8_t i;
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3318      	adds	r3, #24
 8002204:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	VL53LX_load_patch(Dev);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f001 f90c 	bl	8003424 <VL53LX_load_patch>
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 800220c:	2300      	movs	r3, #0
 800220e:	75bb      	strb	r3, [r7, #22]
 8002210:	e01a      	b.n	8002248 <VL53LX_StartMeasurement+0x54>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8002212:	7dbb      	ldrb	r3, [r7, #22]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800221a:	3308      	adds	r3, #8
 800221c:	2100      	movs	r1, #0
 800221e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8002222:	7dbb      	ldrb	r3, [r7, #22]
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800222c:	3318      	adds	r3, #24
 800222e:	22ff      	movs	r2, #255	; 0xff
 8002230:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8002232:	7dbb      	ldrb	r3, [r7, #22]
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4413      	add	r3, r2
 8002238:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800223c:	331c      	adds	r3, #28
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002242:	7dbb      	ldrb	r3, [r7, #22]
 8002244:	3301      	adds	r3, #1
 8002246:	75bb      	strb	r3, [r7, #22]
 8002248:	7dbb      	ldrb	r3, [r7, #22]
 800224a:	2b03      	cmp	r3, #3
 800224c:	d9e1      	bls.n	8002212 <VL53LX_StartMeasurement+0x1e>
	}
	pdev->PreviousStreamCount = 0;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002254:	3321      	adds	r3, #33	; 0x21
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = 0;
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002260:	3320      	adds	r3, #32
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	7edb      	ldrb	r3, [r3, #27]
 800226a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53LX_ERROR_NONE)
 800226c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d107      	bne.n	8002284 <VL53LX_StartMeasurement+0x90>
		Status = VL53LX_init_and_start_range(
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	2206      	movs	r2, #6
 8002278:	4619      	mov	r1, r3
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f001 ff80 	bl	8004180 <VL53LX_init_and_start_range>
 8002280:	4603      	mov	r3, r0
 8002282:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53LX_DEVICECONFIGLEVEL_FULL);

	LOG_FUNCTION_END(Status);
	return Status;
 8002284:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <VL53LX_StopMeasurement>:

VL53LX_Error VL53LX_StopMeasurement(VL53LX_DEV Dev)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_stop_range(Dev);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f002 f9f9 	bl	8004694 <VL53LX_stop_range>
 80022a2:	4603      	mov	r3, r0
 80022a4:	73fb      	strb	r3, [r7, #15]

	VL53LX_unload_patch(Dev);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f001 f9ac 	bl	8003604 <VL53LX_unload_patch>

	LOG_FUNCTION_END(Status);
	return Status;
 80022ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <VL53LX_ClearInterruptAndStartMeasurement>:


VL53LX_Error VL53LX_ClearInterruptAndStartMeasurement(VL53LX_DEV Dev)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53LXDevDataGet(Dev, LLData.measurement_mode);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7edb      	ldrb	r3, [r3, #27]
 80022c8:	73bb      	strb	r3, [r7, #14]

	Status = VL53LX_clear_interrupt_and_enable_next_range(Dev,
 80022ca:	7bbb      	ldrb	r3, [r7, #14]
 80022cc:	4619      	mov	r1, r3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f002 fedc 	bl	800508c <VL53LX_clear_interrupt_and_enable_next_range>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 80022d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <VL53LX_GetMeasurementDataReady>:


VL53LX_Error VL53LX_GetMeasurementDataReady(VL53LX_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53LX_is_new_data_ready(Dev, pMeasurementDataReady);
 80022f2:	6839      	ldr	r1, [r7, #0]
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f00e fa7a 	bl	80107ee <VL53LX_is_new_data_ready>
 80022fa:	4603      	mov	r3, r0
 80022fc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <ConvertStatusHisto>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	3b05      	subs	r3, #5
 800231a:	2b12      	cmp	r3, #18
 800231c:	d840      	bhi.n	80023a0 <ConvertStatusHisto+0x94>
 800231e:	a201      	add	r2, pc, #4	; (adr r2, 8002324 <ConvertStatusHisto+0x18>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	08002371 	.word	0x08002371
 8002328:	08002377 	.word	0x08002377
 800232c:	08002383 	.word	0x08002383
 8002330:	080023a1 	.word	0x080023a1
 8002334:	0800239b 	.word	0x0800239b
 8002338:	080023a1 	.word	0x080023a1
 800233c:	080023a1 	.word	0x080023a1
 8002340:	080023a1 	.word	0x080023a1
 8002344:	080023a1 	.word	0x080023a1
 8002348:	080023a1 	.word	0x080023a1
 800234c:	080023a1 	.word	0x080023a1
 8002350:	080023a1 	.word	0x080023a1
 8002354:	080023a1 	.word	0x080023a1
 8002358:	080023a1 	.word	0x080023a1
 800235c:	0800237d 	.word	0x0800237d
 8002360:	0800238f 	.word	0x0800238f
 8002364:	080023a1 	.word	0x080023a1
 8002368:	08002395 	.word	0x08002395
 800236c:	08002389 	.word	0x08002389
	case VL53LX_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002370:	2304      	movs	r3, #4
 8002372:	73fb      	strb	r3, [r7, #15]
		break;
 8002374:	e016      	b.n	80023a4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53LX_RANGESTATUS_SIGMA_FAIL;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
		break;
 800237a:	e013      	b.n	80023a4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus =
 800237c:	2306      	movs	r3, #6
 800237e:	73fb      	strb	r3, [r7, #15]
			VL53LX_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
		break;
 8002380:	e010      	b.n	80023a4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 8002382:	2307      	movs	r3, #7
 8002384:	73fb      	strb	r3, [r7, #15]
		break;
 8002386:	e00d      	b.n	80023a4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53LX_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 8002388:	230c      	movs	r3, #12
 800238a:	73fb      	strb	r3, [r7, #15]
		break;
 800238c:	e00a      	b.n	80023a4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53LX_RANGESTATUS_WRAP_TARGET_FAIL;
 800238e:	2307      	movs	r3, #7
 8002390:	73fb      	strb	r3, [r7, #15]
		break;
 8002392:	e007      	b.n	80023a4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 8002394:	230b      	movs	r3, #11
 8002396:	73fb      	strb	r3, [r7, #15]
		break;
 8002398:	e004      	b.n	80023a4 <ConvertStatusHisto+0x98>
	case VL53LX_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53LX_RANGESTATUS_RANGE_VALID;
 800239a:	2300      	movs	r3, #0
 800239c:	73fb      	strb	r3, [r7, #15]
		break;
 800239e:	e001      	b.n	80023a4 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53LX_RANGESTATUS_NONE;
 80023a0:	23ff      	movs	r3, #255	; 0xff
 80023a2:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop

080023b4 <SetTargetData>:

static VL53LX_Error SetTargetData(VL53LX_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53LX_range_data_t *presults_data,
	VL53LX_TargetRangeData_t *pRangeData)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08e      	sub	sp, #56	; 0x38
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	4608      	mov	r0, r1
 80023be:	4611      	mov	r1, r2
 80023c0:	461a      	mov	r2, r3
 80023c2:	4603      	mov	r3, r0
 80023c4:	70fb      	strb	r3, [r7, #3]
 80023c6:	460b      	mov	r3, r1
 80023c8:	70bb      	strb	r3, [r7, #2]
 80023ca:	4613      	mov	r3, r2
 80023cc:	707b      	strb	r3, [r7, #1]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	VL53LX_LLDriverData_t *pdev =
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3318      	adds	r3, #24
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_tuning_parm_storage_t *tp =
 80023da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023dc:	33f8      	adds	r3, #248	; 0xf8
 80023de:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t FilteredRangeStatus;
	FixPoint1616_t AmbientRate;
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;

	SUPPRESS_UNUSED_WARNING(Dev);

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 80023e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	SignalRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 80023f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80023f6:	025b      	lsls	r3, r3, #9
 80023f8:	623b      	str	r3, [r7, #32]
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 80023fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fc:	6a3a      	ldr	r2, [r7, #32]
 80023fe:	605a      	str	r2, [r3, #4]

	AmbientRate = VL53LX_FIXPOINT97TOFIXPOINT1616(
 8002400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002402:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002404:	025b      	lsls	r3, r3, #9
 8002406:	61fb      	str	r3, [r7, #28]
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8002408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800240a:	69fa      	ldr	r2, [r7, #28]
 800240c:	609a      	str	r2, [r3, #8]

	TempFix1616 = VL53LX_FIXPOINT97TOFIXPOINT1616(
 800240e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002410:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002412:	025b      	lsls	r3, r3, #9
 8002414:	61bb      	str	r3, [r7, #24]
			presults_data->VL53LX_p_002);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8002416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	60da      	str	r2, [r3, #12]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800241c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800241e:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8002422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002424:	821a      	strh	r2, [r3, #16]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8002426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002428:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800242c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800242e:	801a      	strh	r2, [r3, #0]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8002430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002432:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8002436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002438:	805a      	strh	r2, [r3, #2]


	switch (device_status) {
 800243a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800243e:	2b11      	cmp	r3, #17
 8002440:	d009      	beq.n	8002456 <SetTargetData+0xa2>
 8002442:	2b11      	cmp	r3, #17
 8002444:	dc0f      	bgt.n	8002466 <SetTargetData+0xb2>
 8002446:	2b03      	cmp	r3, #3
 8002448:	dc02      	bgt.n	8002450 <SetTargetData+0x9c>
 800244a:	2b00      	cmp	r3, #0
 800244c:	dc03      	bgt.n	8002456 <SetTargetData+0xa2>
 800244e:	e00a      	b.n	8002466 <SetTargetData+0xb2>
 8002450:	2b0d      	cmp	r3, #13
 8002452:	d004      	beq.n	800245e <SetTargetData+0xaa>
 8002454:	e007      	b.n	8002466 <SetTargetData+0xb2>
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_HARDWARE_FAIL;
 8002456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002458:	2205      	movs	r2, #5
 800245a:	749a      	strb	r2, [r3, #18]
		break;
 800245c:	e006      	b.n	800246c <SetTargetData+0xb8>
	case VL53LX_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_MIN_RANGE_FAIL;
 800245e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002460:	220d      	movs	r2, #13
 8002462:	749a      	strb	r2, [r3, #18]
		break;
 8002464:	e002      	b.n	800246c <SetTargetData+0xb8>
	default:
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_RANGE_VALID;
 8002466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002468:	2200      	movs	r2, #0
 800246a:	749a      	strb	r2, [r3, #18]
	}


	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 800246c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800246e:	7c9b      	ldrb	r3, [r3, #18]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d117      	bne.n	80024a4 <SetTargetData+0xf0>
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d114      	bne.n	80024a4 <SetTargetData+0xf0>
		(active_results == 0)) {
		pRangeData->RangeStatus =  VL53LX_RANGESTATUS_NONE;
 800247a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800247c:	22ff      	movs	r2, #255	; 0xff
 800247e:	749a      	strb	r2, [r3, #18]
		pRangeData->SignalRateRtnMegaCps = 0;
 8002480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002482:	2200      	movs	r2, #0
 8002484:	605a      	str	r2, [r3, #4]
		pRangeData->SigmaMilliMeter = 0;
 8002486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002488:	2200      	movs	r2, #0
 800248a:	60da      	str	r2, [r3, #12]
		pRangeData->RangeMilliMeter = 8191;
 800248c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800248e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002492:	821a      	strh	r2, [r3, #16]
		pRangeData->RangeMaxMilliMeter = 8191;
 8002494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002496:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800249a:	801a      	strh	r2, [r3, #0]
		pRangeData->RangeMinMilliMeter = 8191;
 800249c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800249e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80024a2:	805a      	strh	r2, [r3, #2]
	}


	if (pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID)
 80024a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a6:	7c9b      	ldrb	r3, [r3, #18]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d108      	bne.n	80024be <SetTargetData+0x10a>
		pRangeData->RangeStatus =
			ConvertStatusHisto(FilteredRangeStatus);
 80024ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff2b 	bl	800230c <ConvertStatusHisto>
 80024b6:	4603      	mov	r3, r0
 80024b8:	461a      	mov	r2, r3
		pRangeData->RangeStatus =
 80024ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024bc:	749a      	strb	r2, [r3, #18]



	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_UWR_ENABLE,
 80024be:	f107 030c 	add.w	r3, r7, #12
 80024c2:	461a      	mov	r2, r3
 80024c4:	f248 0191 	movw	r1, #32913	; 0x8091
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f003 fa37 	bl	800593c <VL53LX_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 80024ce:	78bb      	ldrb	r3, [r7, #2]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	75fb      	strb	r3, [r7, #23]
	uwr_status = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 80024dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024de:	8a1b      	ldrh	r3, [r3, #16]
 80024e0:	82bb      	strh	r3, [r7, #20]
	AddOffset = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	86bb      	strh	r3, [r7, #52]	; 0x34

	pRangeData->ExtendedRange = 0;
 80024e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024e8:	2200      	movs	r2, #0
 80024ea:	74da      	strb	r2, [r3, #19]

	if ((active_results != 1) ||
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d106      	bne.n	8002500 <SetTargetData+0x14c>
		(pdev->PreviousRangeActiveResults != 1))
 80024f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f4:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80024f8:	3320      	adds	r3, #32
 80024fa:	781b      	ldrb	r3, [r3, #0]
	if ((active_results != 1) ||
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d001      	beq.n	8002504 <SetTargetData+0x150>
		ExtendedRangeEnabled = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 81dc 	beq.w	80028c4 <SetTargetData+0x510>
		(pRangeData->RangeStatus ==
 800250c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800250e:	7c9b      	ldrb	r3, [r3, #18]
	if (ExtendedRangeEnabled &&
 8002510:	2b07      	cmp	r3, #7
 8002512:	d004      	beq.n	800251e <SetTargetData+0x16a>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8002514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002516:	7c9b      	ldrb	r3, [r3, #18]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 8002518:	2b04      	cmp	r3, #4
 800251a:	f040 81d3 	bne.w	80028c4 <SetTargetData+0x510>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 800251e:	787b      	ldrb	r3, [r7, #1]
 8002520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002522:	4413      	add	r3, r2
 8002524:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002528:	3318      	adds	r3, #24
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b07      	cmp	r3, #7
 800252e:	d01c      	beq.n	800256a <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8002530:	787b      	ldrb	r3, [r7, #1]
 8002532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002534:	4413      	add	r3, r2
 8002536:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800253a:	3318      	adds	r3, #24
 800253c:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_WRAP_TARGET_FAIL ||
 800253e:	2b04      	cmp	r3, #4
 8002540:	d013      	beq.n	800256a <SetTargetData+0x1b6>
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8002542:	787b      	ldrb	r3, [r7, #1]
 8002544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002546:	4413      	add	r3, r2
 8002548:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 800254c:	3318      	adds	r3, #24
 800254e:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8002550:	2b00      	cmp	r3, #0
 8002552:	f040 81b7 	bne.w	80028c4 <SetTargetData+0x510>
			VL53LX_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 8002556:	787b      	ldrb	r3, [r7, #1]
 8002558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800255a:	4413      	add	r3, r2
 800255c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002560:	331c      	adds	r3, #28
 8002562:	781b      	ldrb	r3, [r3, #0]
			VL53LX_RANGESTATUS_RANGE_VALID &&
 8002564:	2b01      	cmp	r3, #1
 8002566:	f040 81ad 	bne.w	80028c4 <SetTargetData+0x510>
	{
		if (((pdev->PreviousStreamCount) ==
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002570:	3321      	adds	r3, #33	; 0x21
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 8002576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002578:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 800257c:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 800257e:	429a      	cmp	r2, r3
 8002580:	d00c      	beq.n	800259c <SetTargetData+0x1e8>
		|| ((pdev->PreviousStreamCount) ==
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002588:	3321      	adds	r3, #33	; 0x21
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8002594:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8002596:	429a      	cmp	r2, r3
 8002598:	f040 816b 	bne.w	8002872 <SetTargetData+0x4be>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 800259c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800259e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80025a2:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 80025a4:	787b      	ldrb	r3, [r7, #1]
 80025a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025a8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80025ac:	3308      	adds	r3, #8
 80025ae:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80025b2:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	827b      	strh	r3, [r7, #18]

		uwr_status = 1;
 80025ba:	2301      	movs	r3, #1
 80025bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		switch (pdev->preset_mode) {
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	785b      	ldrb	r3, [r3, #1]
 80025c4:	2b21      	cmp	r3, #33	; 0x21
 80025c6:	d008      	beq.n	80025da <SetTargetData+0x226>
 80025c8:	2b21      	cmp	r3, #33	; 0x21
 80025ca:	f300 814e 	bgt.w	800286a <SetTargetData+0x4b6>
 80025ce:	2b1b      	cmp	r3, #27
 80025d0:	f000 80d7 	beq.w	8002782 <SetTargetData+0x3ce>
 80025d4:	2b1e      	cmp	r3, #30
 80025d6:	d004      	beq.n	80025e2 <SetTargetData+0x22e>
 80025d8:	e147      	b.n	800286a <SetTargetData+0x4b6>
			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 80025e0:	e148      	b.n	8002874 <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 80025e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e4:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 80025e8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	dd0e      	ble.n	800260e <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 80025f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f2:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 80025f6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	da07      	bge.n	800260e <SetTargetData+0x25a>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d104      	bne.n	800260e <SetTargetData+0x25a>
					sequency == 1) {
					AddOffset =
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800260a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800260c:	e0b8      	b.n	8002780 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 800260e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002614:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8002618:	425b      	negs	r3, r3
 800261a:	429a      	cmp	r2, r3
 800261c:	da0f      	bge.n	800263e <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 800261e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002624:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 8002628:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 800262a:	429a      	cmp	r2, r3
 800262c:	dd07      	ble.n	800263e <SetTargetData+0x28a>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 800262e:	7dfb      	ldrb	r3, [r7, #23]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d104      	bne.n	800263e <SetTargetData+0x28a>
					sequency == 0) {
					AddOffset =
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 800263a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800263c:	e0a0      	b.n	8002780 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 800263e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002640:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8002644:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002648:	429a      	cmp	r2, r3
 800264a:	dd0e      	ble.n	800266a <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8002652:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002656:	429a      	cmp	r2, r3
 8002658:	da07      	bge.n	800266a <SetTargetData+0x2b6>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 800265a:	7dfb      	ldrb	r3, [r7, #23]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d104      	bne.n	800266a <SetTargetData+0x2b6>
					sequency == 0) {
					AddOffset =
 8002660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002662:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8002666:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002668:	e08a      	b.n	8002780 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 800266a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8002674:	425b      	negs	r3, r3
 8002676:	429a      	cmp	r2, r3
 8002678:	da0f      	bge.n	800269a <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 800267a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800267e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002680:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8002684:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8002686:	429a      	cmp	r2, r3
 8002688:	dd07      	ble.n	800269a <SetTargetData+0x2e6>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 800268a:	7dfb      	ldrb	r3, [r7, #23]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d104      	bne.n	800269a <SetTargetData+0x2e6>
					sequency == 1) {
					AddOffset =
 8002690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002692:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002696:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002698:	e072      	b.n	8002780 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 80026a0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	dd0e      	ble.n	80026c6 <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80026a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026aa:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 80026ae:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	da07      	bge.n	80026c6 <SetTargetData+0x312>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 80026b6:	7dfb      	ldrb	r3, [r7, #23]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d104      	bne.n	80026c6 <SetTargetData+0x312>
					sequency == 1) {
					AddOffset =
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80026c2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80026c4:	e05c      	b.n	8002780 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 80026c6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80026ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026cc:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 80026d0:	425b      	negs	r3, r3
 80026d2:	429a      	cmp	r2, r3
 80026d4:	da0f      	bge.n	80026f6 <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 80026d6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 80026e0:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 80026e2:	429a      	cmp	r2, r3
 80026e4:	dd07      	ble.n	80026f6 <SetTargetData+0x342>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 80026e6:	7dfb      	ldrb	r3, [r7, #23]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d104      	bne.n	80026f6 <SetTargetData+0x342>
					sequency == 0) {
					AddOffset =
 80026ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ee:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80026f2:	86bb      	strh	r3, [r7, #52]	; 0x34
 80026f4:	e044      	b.n	8002780 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 80026fc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002700:	429a      	cmp	r2, r3
 8002702:	dd0e      	ble.n	8002722 <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8002704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002706:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 800270a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800270e:	429a      	cmp	r2, r3
 8002710:	da07      	bge.n	8002722 <SetTargetData+0x36e>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8002712:	7dfb      	ldrb	r3, [r7, #23]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d104      	bne.n	8002722 <SetTargetData+0x36e>
					sequency == 0) {
					AddOffset =
 8002718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 800271e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002720:	e02e      	b.n	8002780 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8002722:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002728:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 800272c:	425b      	negs	r3, r3
 800272e:	429a      	cmp	r2, r3
 8002730:	da0f      	bge.n	8002752 <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8002732:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002738:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 800273c:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 800273e:	429a      	cmp	r2, r3
 8002740:	dd07      	ble.n	8002752 <SetTargetData+0x39e>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8002742:	7dfb      	ldrb	r3, [r7, #23]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d104      	bne.n	8002752 <SetTargetData+0x39e>
					sequency == 1) {
					AddOffset =
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800274e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002750:	e016      	b.n	8002780 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8002758:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800275c:	429a      	cmp	r2, r3
 800275e:	da0b      	bge.n	8002778 <SetTargetData+0x3c4>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002766:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800276a:	429a      	cmp	r2, r3
 800276c:	dd04      	ble.n	8002778 <SetTargetData+0x3c4>
					AddOffset =
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8002774:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002776:	e003      	b.n	8002780 <SetTargetData+0x3cc>
					tp->tp_uwr_med_corr_z_5_rangea;
				} else
					uwr_status = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 800277e:	e079      	b.n	8002874 <SetTargetData+0x4c0>
 8002780:	e078      	b.n	8002874 <SetTargetData+0x4c0>

			case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8002782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002784:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 8002788:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800278c:	429a      	cmp	r2, r3
 800278e:	dd0e      	ble.n	80027ae <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8002790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002792:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8002796:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800279a:	429a      	cmp	r2, r3
 800279c:	da07      	bge.n	80027ae <SetTargetData+0x3fa>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d104      	bne.n	80027ae <SetTargetData+0x3fa>
					sequency == 0) {
					AddOffset =
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 80027aa:	86bb      	strh	r3, [r7, #52]	; 0x34
 80027ac:	e05c      	b.n	8002868 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80027ae:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	; 0xb6
 80027b8:	425b      	negs	r3, r3
 80027ba:	429a      	cmp	r2, r3
 80027bc:	da0f      	bge.n	80027de <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80027be:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 80027c8:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 80027ca:	429a      	cmp	r2, r3
 80027cc:	dd07      	ble.n	80027de <SetTargetData+0x42a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d104      	bne.n	80027de <SetTargetData+0x42a>
					sequency == 1) {
					AddOffset =
 80027d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d6:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 80027da:	86bb      	strh	r3, [r7, #52]	; 0x34
 80027dc:	e044      	b.n	8002868 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80027de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e0:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 80027e4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	dd0e      	ble.n	800280a <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80027ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ee:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 80027f2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	da07      	bge.n	800280a <SetTargetData+0x456>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 80027fa:	7dfb      	ldrb	r3, [r7, #23]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d104      	bne.n	800280a <SetTargetData+0x456>
					sequency == 1) {
					AddOffset =
 8002800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002802:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8002806:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002808:	e02e      	b.n	8002868 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800280a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8002814:	425b      	negs	r3, r3
 8002816:	429a      	cmp	r2, r3
 8002818:	da0f      	bge.n	800283a <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 800281a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002820:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 8002824:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8002826:	429a      	cmp	r2, r3
 8002828:	dd07      	ble.n	800283a <SetTargetData+0x486>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 800282a:	7dfb      	ldrb	r3, [r7, #23]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d104      	bne.n	800283a <SetTargetData+0x486>
					sequency == 0) {
					AddOffset =
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	; 0xce
 8002836:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002838:	e016      	b.n	8002868 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8002840:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002844:	429a      	cmp	r2, r3
 8002846:	da0b      	bge.n	8002860 <SetTargetData+0x4ac>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 800284e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002852:	429a      	cmp	r2, r3
 8002854:	dd04      	ble.n	8002860 <SetTargetData+0x4ac>
					AddOffset =
 8002856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002858:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800285c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800285e:	e003      	b.n	8002868 <SetTargetData+0x4b4>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
					uwr_status = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002866:	e005      	b.n	8002874 <SetTargetData+0x4c0>
 8002868:	e004      	b.n	8002874 <SetTargetData+0x4c0>

			default:
				uwr_status = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8002870:	e000      	b.n	8002874 <SetTargetData+0x4c0>
			}
		}
 8002872:	bf00      	nop

		if (uwr_status) {
 8002874:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002878:	2b00      	cmp	r3, #0
 800287a:	d023      	beq.n	80028c4 <SetTargetData+0x510>
			pRangeData->RangeMilliMeter += AddOffset;
 800287c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800287e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002882:	b29a      	uxth	r2, r3
 8002884:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002886:	4413      	add	r3, r2
 8002888:	b29b      	uxth	r3, r3
 800288a:	b21a      	sxth	r2, r3
 800288c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800288e:	821a      	strh	r2, [r3, #16]
			pRangeData->RangeMinMilliMeter += AddOffset;
 8002890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002892:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002896:	b29a      	uxth	r2, r3
 8002898:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800289a:	4413      	add	r3, r2
 800289c:	b29b      	uxth	r3, r3
 800289e:	b21a      	sxth	r2, r3
 80028a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a2:	805a      	strh	r2, [r3, #2]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 80028a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80028ae:	4413      	add	r3, r2
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	b21a      	sxth	r2, r3
 80028b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028b6:	801a      	strh	r2, [r3, #0]
			pRangeData->ExtendedRange = 1;
 80028b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ba:	2201      	movs	r2, #1
 80028bc:	74da      	strb	r2, [r3, #19]
			pRangeData->RangeStatus = 0;
 80028be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c0:	2200      	movs	r2, #0
 80028c2:	749a      	strb	r2, [r3, #18]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 80028c4:	787b      	ldrb	r3, [r7, #1]
 80028c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028c8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80028cc:	3308      	adds	r3, #8
 80028ce:	8ab9      	ldrh	r1, [r7, #20]
 80028d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 80028d4:	787b      	ldrb	r3, [r7, #1]
 80028d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028d8:	7c91      	ldrb	r1, [r2, #18]
 80028da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028dc:	4413      	add	r3, r2
 80028de:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80028e2:	3318      	adds	r3, #24
 80028e4:	460a      	mov	r2, r1
 80028e6:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 80028e8:	787b      	ldrb	r3, [r7, #1]
 80028ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028ec:	7cd1      	ldrb	r1, [r2, #19]
 80028ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 80028f6:	331c      	adds	r3, #28
 80028f8:	460a      	mov	r2, r1
 80028fa:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 80028fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fe:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002902:	3320      	adds	r3, #32
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	701a      	strb	r2, [r3, #0]

	Range = pRangeData->RangeMilliMeter;
 8002908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800290a:	8a1b      	ldrh	r3, [r3, #16]
 800290c:	823b      	strh	r3, [r7, #16]
	if ((pRangeData->RangeStatus ==  VL53LX_RANGESTATUS_RANGE_VALID) &&
 800290e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002910:	7c9b      	ldrb	r3, [r3, #18]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d110      	bne.n	8002938 <SetTargetData+0x584>
 8002916:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800291a:	2b00      	cmp	r3, #0
 800291c:	da0c      	bge.n	8002938 <SetTargetData+0x584>
		(Range < 0)) {
		if (Range < BDTable[VL53LX_TUNING_PROXY_MIN])
 800291e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002922:	4b08      	ldr	r3, [pc, #32]	; (8002944 <SetTargetData+0x590>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	429a      	cmp	r2, r3
 8002928:	da03      	bge.n	8002932 <SetTargetData+0x57e>
			pRangeData->RangeStatus =
 800292a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800292c:	220e      	movs	r2, #14
 800292e:	749a      	strb	r2, [r3, #18]
 8002930:	e002      	b.n	8002938 <SetTargetData+0x584>
					 VL53LX_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8002932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002934:	2200      	movs	r2, #0
 8002936:	821a      	strh	r2, [r3, #16]
	}

	return Status;
 8002938:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
}
 800293c:	4618      	mov	r0, r3
 800293e:	3738      	adds	r7, #56	; 0x38
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	2000001c 	.word	0x2000001c

08002948 <SetMeasurementData>:


static VL53LX_Error SetMeasurementData(VL53LX_DEV Dev,
	VL53LX_range_results_t *presults,
	VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b08f      	sub	sp, #60	; 0x3c
 800294c:	af04      	add	r7, sp, #16
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3318      	adds	r3, #24
 8002958:	623b      	str	r3, [r7, #32]
	uint8_t i;
	uint8_t iteration;
	VL53LX_TargetRangeData_t *pRangeData;
	VL53LX_range_data_t *presults_data;
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 800295a:	2300      	movs	r3, #0
 800295c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t ActiveResults;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	7c9a      	ldrb	r2, [r3, #18]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58


	pMultiRangingData->TimeStamp = 0;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	78da      	ldrb	r2, [r3, #3]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	711a      	strb	r2, [r3, #4]

	ActiveResults = presults->active_results;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	7c9b      	ldrb	r3, [r3, #18]
 8002986:	77fb      	strb	r3, [r7, #31]
	if (ActiveResults < 1)
 8002988:	7ffb      	ldrb	r3, [r7, #31]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d103      	bne.n	8002996 <SetMeasurementData+0x4e>

		iteration = 1;
 800298e:	2301      	movs	r3, #1
 8002990:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002994:	e002      	b.n	800299c <SetMeasurementData+0x54>
	else
		iteration = ActiveResults;
 8002996:	7ffb      	ldrb	r3, [r7, #31]
 8002998:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for (i = 0; i < iteration; i++) {
 800299c:	2300      	movs	r3, #0
 800299e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80029a2:	e035      	b.n	8002a10 <SetMeasurementData+0xc8>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 80029a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	3308      	adds	r3, #8
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	4413      	add	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]

		presults_data = &(presults->VL53LX_p_003[i]);
 80029b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029bc:	224c      	movs	r2, #76	; 0x4c
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	3310      	adds	r3, #16
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	4413      	add	r3, r2
 80029c8:	3304      	adds	r3, #4
 80029ca:	617b      	str	r3, [r7, #20]
		if (Status == VL53LX_ERROR_NONE)
 80029cc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d113      	bne.n	80029fc <SetMeasurementData+0xb4>
			Status = SetTargetData(Dev, ActiveResults,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7918      	ldrb	r0, [r3, #4]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	7c1b      	ldrb	r3, [r3, #16]
 80029dc:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 80029e0:	7ff9      	ldrb	r1, [r7, #31]
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	9202      	str	r2, [sp, #8]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	9201      	str	r2, [sp, #4]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	4623      	mov	r3, r4
 80029ee:	4602      	mov	r2, r0
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f7ff fcdf 	bl	80023b4 <SetTargetData>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53LX_p_004;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	for (i = 0; i < iteration; i++) {
 8002a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002a10:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002a14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d3c3      	bcc.n	80029a4 <SetMeasurementData+0x5c>

	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	f893 243f 	ldrb.w	r2, [r3, #1087]	; 0x43f
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002a28:	3321      	adds	r3, #33	; 0x21
 8002a2a:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002a2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002a34:	e01f      	b.n	8002a76 <SetMeasurementData+0x12e>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8002a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a3a:	6a3a      	ldr	r2, [r7, #32]
 8002a3c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8002a40:	3308      	adds	r3, #8
 8002a42:	2100      	movs	r1, #0
 8002a44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8002a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a4c:	6a3a      	ldr	r2, [r7, #32]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002a54:	3318      	adds	r3, #24
 8002a56:	22ff      	movs	r2, #255	; 0xff
 8002a58:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8002a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a5e:	6a3a      	ldr	r2, [r7, #32]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 5302 	add.w	r3, r3, #8320	; 0x2080
 8002a66:	331c      	adds	r3, #28
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8002a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a70:	3301      	adds	r3, #1
 8002a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002a76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d9db      	bls.n	8002a36 <SetMeasurementData+0xee>
	}

	return Status;
 8002a7e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	372c      	adds	r7, #44	; 0x2c
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd90      	pop	{r4, r7, pc}

08002a8a <VL53LX_GetMultiRangingData>:


VL53LX_Error VL53LX_GetMultiRangingData(VL53LX_DEV Dev,
		VL53LX_MultiRangingData_t *pMultiRangingData)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	6039      	str	r1, [r7, #0]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3318      	adds	r3, #24
 8002a9c:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_range_results_t *presults =
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002aa4:	60fb      	str	r3, [r7, #12]
			(VL53LX_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 8002aa6:	225c      	movs	r2, #92	; 0x5c
 8002aa8:	21ff      	movs	r1, #255	; 0xff
 8002aaa:	6838      	ldr	r0, [r7, #0]
 8002aac:	f011 fc8c 	bl	80143c8 <memset>
		sizeof(VL53LX_MultiRangingData_t));


	Status = VL53LX_get_device_results(
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	2102      	movs	r1, #2
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f001 fee7 	bl	8004888 <VL53LX_get_device_results>
 8002aba:	4603      	mov	r3, r0
 8002abc:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_DEVICERESULTSLEVEL_FULL,
				presults);

	Status = SetMeasurementData(Dev,
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	68f9      	ldr	r1, [r7, #12]
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ff40 	bl	8002948 <SetMeasurementData>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	75fb      	strb	r3, [r7, #23]
					presults,
					pMultiRangingData);

	LOG_FUNCTION_END(Status);
	return Status;
 8002acc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <VL53LX_PerformRefSpadManagement>:
	return Status;
}


VL53LX_Error VL53LX_PerformRefSpadManagement(VL53LX_DEV Dev)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b090      	sub	sp, #64	; 0x40
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 8002ae6:	f240 3305 	movw	r3, #773	; 0x305
 8002aea:	81bb      	strh	r3, [r7, #12]
	VL53LX_customer_nvm_managed_t *pc;
	VL53LX_DistanceModes DistanceMode;

	LOG_FUNCTION_START("");

	pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3318      	adds	r3, #24
 8002af0:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 8002af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af4:	3348      	adds	r3, #72	; 0x48
 8002af6:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53LX_ERROR_NONE) {
 8002af8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d11c      	bne.n	8002b3a <VL53LX_PerformRefSpadManagement+0x62>
		DistanceMode = VL53LXDevDataGet(Dev,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8002b06:	3320      	adds	r3, #32
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.DistanceMode);
		Status = VL53LX_run_ref_spad_char(Dev, &RawStatus);
 8002b0e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8002b12:	4619      	mov	r1, r3
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f8e3 	bl	8002ce0 <VL53LX_run_ref_spad_char>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53LX_ERROR_NONE)
 8002b20:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d108      	bne.n	8002b3a <VL53LX_PerformRefSpadManagement+0x62>
			Status = VL53LX_SetDistanceMode(Dev, DistanceMode);
 8002b28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff fa13 	bl	8001f5a <VL53LX_SetDistanceMode>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 8002b3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002b3e:	f113 0f1d 	cmn.w	r3, #29
 8002b42:	d14e      	bne.n	8002be2 <VL53LX_PerformRefSpadManagement+0x10a>

		Status = VL53LX_read_nvm_raw_data(Dev,
 8002b44:	f107 0310 	add.w	r3, r7, #16
 8002b48:	2206      	movs	r2, #6
 8002b4a:	2128      	movs	r1, #40	; 0x28
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f00c f991 	bl	800ee74 <VL53LX_read_nvm_raw_data>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53LX_ERROR_NONE)
 8002b58:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d109      	bne.n	8002b74 <VL53LX_PerformRefSpadManagement+0x9c>
			Status = VL53LX_WriteMulti(Dev,
 8002b60:	f107 020c 	add.w	r2, r7, #12
 8002b64:	2302      	movs	r3, #2
 8002b66:	2114      	movs	r1, #20
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f00e f9c7 	bl	8010efc <VL53LX_WriteMulti>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53LX_ERROR_NONE) {
 8002b74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d105      	bne.n	8002b88 <VL53LX_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 8002b7c:	7b3a      	ldrb	r2, [r7, #12]
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b80:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 8002b82:	7b7a      	ldrb	r2, [r7, #13]
 8002b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b86:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8002b88:	f107 0310 	add.w	r3, r7, #16
 8002b8c:	3310      	adds	r3, #16
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c



		if (Status == VL53LX_ERROR_NONE)
 8002b90:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d108      	bne.n	8002baa <VL53LX_PerformRefSpadManagement+0xd2>
			Status = VL53LX_WriteMulti(Dev,
 8002b98:	2306      	movs	r3, #6
 8002b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9c:	210d      	movs	r1, #13
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f00e f9ac 	bl	8010efc <VL53LX_WriteMulti>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53LX_ERROR_NONE) {
 8002baa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d117      	bne.n	8002be2 <VL53LX_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	781a      	ldrb	r2, [r3, #0]
 8002bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb8:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	785a      	ldrb	r2, [r3, #1]
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc0:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 8002bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc4:	789a      	ldrb	r2, [r3, #2]
 8002bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc8:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8002bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bcc:	78da      	ldrb	r2, [r3, #3]
 8002bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd0:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	791a      	ldrb	r2, [r3, #4]
 8002bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd8:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	795a      	ldrb	r2, [r3, #5]
 8002bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be0:	715a      	strb	r2, [r3, #5]
		}

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002be2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3740      	adds	r7, #64	; 0x40
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <VL53LX_SmudgeCorrectionEnable>:


VL53LX_Error VL53LX_SmudgeCorrectionEnable(VL53LX_DEV Dev,
		VL53LX_SmudgeCorrectionModes Mode)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	70fb      	strb	r3, [r7, #3]
	VL53LX_Error Status = VL53LX_ERROR_NONE;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	73fb      	strb	r3, [r7, #15]
	VL53LX_Error s1 = VL53LX_ERROR_NONE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	73bb      	strb	r3, [r7, #14]
	VL53LX_Error s2 = VL53LX_ERROR_NONE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	737b      	strb	r3, [r7, #13]
	VL53LX_Error s3 = VL53LX_ERROR_NONE;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d84a      	bhi.n	8002ca8 <VL53LX_SmudgeCorrectionEnable+0xb8>
 8002c12:	a201      	add	r2, pc, #4	; (adr r2, 8002c18 <VL53LX_SmudgeCorrectionEnable+0x28>)
 8002c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c18:	08002c29 	.word	0x08002c29
 8002c1c:	08002c49 	.word	0x08002c49
 8002c20:	08002c69 	.word	0x08002c69
 8002c24:	08002c89 	.word	0x08002c89
	case VL53LX_SMUDGE_CORRECTION_NONE:
		s1 = VL53LX_dynamic_xtalk_correction_disable(Dev);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f003 fd92 	bl	8006752 <VL53LX_dynamic_xtalk_correction_disable>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f003 fda4 	bl	8006780 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f003 fdcd 	bl	80067dc <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002c42:	4603      	mov	r3, r0
 8002c44:	733b      	strb	r3, [r7, #12]
		break;
 8002c46:	e032      	b.n	8002cae <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f003 fd6b 	bl	8006724 <VL53LX_dynamic_xtalk_correction_enable>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f003 fdd9 	bl	800680a <VL53LX_dynamic_xtalk_correction_apply_enable>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f003 fdbd 	bl	80067dc <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002c62:	4603      	mov	r3, r0
 8002c64:	733b      	strb	r3, [r7, #12]
		break;
 8002c66:	e022      	b.n	8002cae <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f003 fd5b 	bl	8006724 <VL53LX_dynamic_xtalk_correction_enable>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_enable(Dev);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f003 fdc9 	bl	800680a <VL53LX_dynamic_xtalk_correction_apply_enable>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_enable(Dev);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f003 fd96 	bl	80067ae <VL53LX_dynamic_xtalk_correction_single_apply_enable>
 8002c82:	4603      	mov	r3, r0
 8002c84:	733b      	strb	r3, [r7, #12]
		break;
 8002c86:	e012      	b.n	8002cae <VL53LX_SmudgeCorrectionEnable+0xbe>
	case VL53LX_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53LX_dynamic_xtalk_correction_enable(Dev);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f003 fd4b 	bl	8006724 <VL53LX_dynamic_xtalk_correction_enable>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	73bb      	strb	r3, [r7, #14]
		s2 = VL53LX_dynamic_xtalk_correction_apply_disable(Dev);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f003 fd74 	bl	8006780 <VL53LX_dynamic_xtalk_correction_apply_disable>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	737b      	strb	r3, [r7, #13]
		s3 = VL53LX_dynamic_xtalk_correction_single_apply_disable(Dev);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f003 fd9d 	bl	80067dc <VL53LX_dynamic_xtalk_correction_single_apply_disable>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	733b      	strb	r3, [r7, #12]
		break;
 8002ca6:	e002      	b.n	8002cae <VL53LX_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53LX_ERROR_INVALID_PARAMS;
 8002ca8:	23fc      	movs	r3, #252	; 0xfc
 8002caa:	73fb      	strb	r3, [r7, #15]
		break;
 8002cac:	bf00      	nop
	}

	if (Status == VL53LX_ERROR_NONE) {
 8002cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10d      	bne.n	8002cd2 <VL53LX_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 8002cb6:	7bbb      	ldrb	r3, [r7, #14]
 8002cb8:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8002cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <VL53LX_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 8002cc2:	7b7b      	ldrb	r3, [r7, #13]
 8002cc4:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53LX_ERROR_NONE)
 8002cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <VL53LX_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8002cce:	7b3b      	ldrb	r3, [r7, #12]
 8002cd0:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop

08002ce0 <VL53LX_run_ref_spad_char>:


VL53LX_Error VL53LX_run_ref_spad_char(
	VL53LX_DEV        Dev,
	VL53LX_Error     *pcal_status)
{
 8002ce0:	b5b0      	push	{r4, r5, r7, lr}
 8002ce2:	b08c      	sub	sp, #48	; 0x30
 8002ce4:	af04      	add	r7, sp, #16
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002cea:	2300      	movs	r3, #0
 8002cec:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3318      	adds	r3, #24
 8002cf2:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53LX_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cfa:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8002cfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d104      	bne.n	8002d0e <VL53LX_run_ref_spad_char+0x2e>
		status = VL53LX_enable_powerforce(Dev);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f005 fd62 	bl	80087ce <VL53LX_enable_powerforce>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 8002d0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d117      	bne.n	8002d46 <VL53LX_run_ref_spad_char+0x66>
		status =
		VL53LX_set_ref_spad_char_config(
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	7858      	ldrb	r0, [r3, #1]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	685c      	ldr	r4, [r3, #4]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	891d      	ldrh	r5, [r3, #8]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	899b      	ldrh	r3, [r3, #12]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	8952      	ldrh	r2, [r2, #10]
 8002d2a:	69b9      	ldr	r1, [r7, #24]
 8002d2c:	f8b1 12de 	ldrh.w	r1, [r1, #734]	; 0x2de
 8002d30:	9102      	str	r1, [sp, #8]
 8002d32:	9201      	str	r2, [sp, #4]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	462b      	mov	r3, r5
 8002d38:	4622      	mov	r2, r4
 8002d3a:	4601      	mov	r1, r0
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f007 fb71 	bl	800a424 <VL53LX_set_ref_spad_char_config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53LX_ERROR_NONE)
 8002d46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d107      	bne.n	8002d5e <VL53LX_run_ref_spad_char+0x7e>
		status = VL53LX_run_device_test(
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	4619      	mov	r1, r3
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f890 	bl	8002e7a <VL53LX_run_device_test>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53LX_ERROR_NONE)
 8002d5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d108      	bne.n	8002d78 <VL53LX_run_ref_spad_char+0x98>
		status =
		VL53LX_ReadMulti(
 8002d66:	f107 020c 	add.w	r2, r7, #12
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	21d9      	movs	r1, #217	; 0xd9
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f00e f8fa 	bl	8010f68 <VL53LX_ReadMulti>
 8002d74:	4603      	mov	r3, r0
 8002d76:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53LX_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53LX_ERROR_NONE) {
 8002d78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <VL53LX_run_ref_spad_char+0xb6>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 8002d80:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8002d88:	331f      	adds	r3, #31
 8002d8a:	701a      	strb	r2, [r3, #0]
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8002d8c:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8002d94:	701a      	strb	r2, [r3, #0]
	}



	if (status == VL53LX_ERROR_NONE)
 8002d96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d108      	bne.n	8002db0 <VL53LX_run_ref_spad_char+0xd0>
		status =
			VL53LX_WriteMulti(
 8002d9e:	f107 020c 	add.w	r2, r7, #12
 8002da2:	2302      	movs	r3, #2
 8002da4:	2114      	movs	r1, #20
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f00e f8a8 	bl	8010efc <VL53LX_WriteMulti>
 8002dac:	4603      	mov	r3, r0
 8002dae:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8002db0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d107      	bne.n	8002dc8 <VL53LX_run_ref_spad_char+0xe8>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8002db8:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 8002dc0:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53LX_ERROR_NONE)
 8002dc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d108      	bne.n	8002de2 <VL53LX_run_ref_spad_char+0x102>
		status =
			VL53LX_ReadMulti(
 8002dd0:	f107 020c 	add.w	r2, r7, #12
 8002dd4:	2306      	movs	r3, #6
 8002dd6:	21ac      	movs	r1, #172	; 0xac
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f00e f8c5 	bl	8010f68 <VL53LX_ReadMulti>
 8002dde:	4603      	mov	r3, r0
 8002de0:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53LX_ERROR_NONE)
 8002de2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d108      	bne.n	8002dfc <VL53LX_run_ref_spad_char+0x11c>
		status =
			VL53LX_WriteMulti(
 8002dea:	f107 020c 	add.w	r2, r7, #12
 8002dee:	2306      	movs	r3, #6
 8002df0:	210d      	movs	r1, #13
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f00e f882 	bl	8010efc <VL53LX_WriteMulti>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53LX_ERROR_NONE) {
 8002dfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d117      	bne.n	8002e34 <VL53LX_run_ref_spad_char+0x154>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 8002e04:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8002e0c:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 8002e14:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8002e1c:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 8002e24:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 8002e2c:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53LX_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53LX_ERROR_NONE) {
 8002e34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d114      	bne.n	8002e66 <VL53LX_run_ref_spad_char+0x186>

		switch (pdev->sys_results.result__range_status) {
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 8002e42:	2b10      	cmp	r3, #16
 8002e44:	d00c      	beq.n	8002e60 <VL53LX_run_ref_spad_char+0x180>
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	dc0e      	bgt.n	8002e68 <VL53LX_run_ref_spad_char+0x188>
 8002e4a:	2b0e      	cmp	r3, #14
 8002e4c:	d002      	beq.n	8002e54 <VL53LX_run_ref_spad_char+0x174>
 8002e4e:	2b0f      	cmp	r3, #15
 8002e50:	d003      	beq.n	8002e5a <VL53LX_run_ref_spad_char+0x17a>
 8002e52:	e009      	b.n	8002e68 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53LX_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 8002e54:	23e4      	movs	r3, #228	; 0xe4
 8002e56:	77fb      	strb	r3, [r7, #31]
			break;
 8002e58:	e006      	b.n	8002e68 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 8002e5a:	23e3      	movs	r3, #227	; 0xe3
 8002e5c:	77fb      	strb	r3, [r7, #31]
			break;
 8002e5e:	e003      	b.n	8002e68 <VL53LX_run_ref_spad_char+0x188>

		case VL53LX_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53LX_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 8002e60:	23e2      	movs	r3, #226	; 0xe2
 8002e62:	77fb      	strb	r3, [r7, #31]
			break;
 8002e64:	e000      	b.n	8002e68 <VL53LX_run_ref_spad_char+0x188>
		}
	}
 8002e66:	bf00      	nop



	*pcal_status = status;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	7ffa      	ldrb	r2, [r7, #31]
 8002e6c:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 8002e6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bdb0      	pop	{r4, r5, r7, pc}

08002e7a <VL53LX_run_device_test>:


VL53LX_Error VL53LX_run_device_test(
	VL53LX_DEV             Dev,
	VL53LX_DeviceTestMode  device_test_mode)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3318      	adds	r3, #24
 8002e8e:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 8002e94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d108      	bne.n	8002eae <VL53LX_run_device_test+0x34>
		status =
			VL53LX_RdByte(
 8002e9c:	f107 030b 	add.w	r3, r7, #11
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2130      	movs	r1, #48	; 0x30
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f00e f8f1 	bl	801108c <VL53LX_RdByte>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53LX_ERROR_NONE)
 8002eae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d103      	bne.n	8002ebe <VL53LX_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8002eb6:	7afa      	ldrb	r2, [r7, #11]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a


	if (status == VL53LX_ERROR_NONE)
 8002ebe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <VL53LX_run_device_test+0x5a>
		status = VL53LX_start_test(
 8002ec6:	78fb      	ldrb	r3, [r7, #3]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f005 fc03 	bl	80086d6 <VL53LX_start_test>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53LX_ERROR_NONE)
 8002ed4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d104      	bne.n	8002ee6 <VL53LX_run_device_test+0x6c>
		status = VL53LX_wait_for_test_completion(Dev);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f00d fc4d 	bl	801077c <VL53LX_wait_for_test_completion>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8002ee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d108      	bne.n	8002f00 <VL53LX_run_device_test+0x86>
		status =
			VL53LX_ReadMulti(
 8002eee:	f107 020c 	add.w	r2, r7, #12
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	2189      	movs	r1, #137	; 0x89
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f00e f836 	bl	8010f68 <VL53LX_ReadMulti>
 8002efc:	4603      	mov	r3, r0
 8002efe:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53LX_ERROR_NONE) {
 8002f00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d107      	bne.n	8002f18 <VL53LX_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8002f08:	7b3a      	ldrb	r2, [r7, #12]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		pdev->sys_results.result__report_status = comms_buffer[1];
 8002f10:	7b7a      	ldrb	r2, [r7, #13]
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
	}



	pdev->sys_results.result__range_status &=
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f893 3367 	ldrb.w	r3, [r3, #871]	; 0x367
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
		VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53LX_ERROR_NONE) {
 8002f2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d108      	bne.n	8002f44 <VL53LX_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53LX_ERROR_NONE)
 8002f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d104      	bne.n	8002f44 <VL53LX_run_device_test+0xca>
			status = VL53LX_clear_interrupt(Dev);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f005 fc6b 	bl	8008816 <VL53LX_clear_interrupt>
 8002f40:	4603      	mov	r3, r0
 8002f42:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53LX_ERROR_NONE)
 8002f44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <VL53LX_run_device_test+0xde>
		status =
			VL53LX_start_test(
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f005 fbc1 	bl	80086d6 <VL53LX_start_test>
 8002f54:	4603      	mov	r3, r0
 8002f56:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 8002f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <select_offset_per_vcsel>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53LX_MAX_I2C_XFER_SIZE 256

static VL53LX_Error select_offset_per_vcsel(VL53LX_LLDriverData_t *pdev,
		int16_t *poffset) {
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	785b      	ldrb	r3, [r3, #1]
 8002f76:	2b21      	cmp	r3, #33	; 0x21
 8002f78:	d006      	beq.n	8002f88 <select_offset_per_vcsel+0x24>
 8002f7a:	2b21      	cmp	r3, #33	; 0x21
 8002f7c:	dc2a      	bgt.n	8002fd4 <select_offset_per_vcsel+0x70>
 8002f7e:	2b1b      	cmp	r3, #27
 8002f80:	d01b      	beq.n	8002fba <select_offset_per_vcsel+0x56>
 8002f82:	2b1e      	cmp	r3, #30
 8002f84:	d00c      	beq.n	8002fa0 <select_offset_per_vcsel+0x3c>
 8002f86:	e025      	b.n	8002fd4 <select_offset_per_vcsel+0x70>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002f98:	3302      	adds	r3, #2
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	817b      	strh	r3, [r7, #10]
		break;
 8002f9e:	e02b      	b.n	8002ff8 <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002fb2:	3306      	adds	r3, #6
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	817b      	strh	r3, [r7, #10]
		break;
 8002fb8:	e01e      	b.n	8002ff8 <select_offset_per_vcsel+0x94>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002fcc:	330a      	adds	r3, #10
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	817b      	strh	r3, [r7, #10]
		break;
 8002fd2:	e011      	b.n	8002ff8 <select_offset_per_vcsel+0x94>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002fda:	3308      	adds	r3, #8
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002fe6:	330a      	adds	r3, #10
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	817b      	strh	r3, [r7, #10]
		status = VL53LX_ERROR_INVALID_PARAMS;
 8002fec:	23fc      	movs	r3, #252	; 0xfc
 8002fee:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	801a      	strh	r2, [r3, #0]
		break;
 8002ff6:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002ffe:	727b      	strb	r3, [r7, #9]
	if (status == VL53LX_ERROR_NONE)
 8003000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10b      	bne.n	8003020 <select_offset_per_vcsel+0xbc>
		*poffset = (isc & 0x01) ? tA : tB;
 8003008:	7a7b      	ldrb	r3, [r7, #9]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <select_offset_per_vcsel+0xb4>
 8003012:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003016:	e001      	b.n	800301c <select_offset_per_vcsel+0xb8>
 8003018:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	8013      	strh	r3, [r2, #0]

	return status;
 8003020:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <vl53lx_diff_histo_stddev>:

static void vl53lx_diff_histo_stddev(VL53LX_LLDriverData_t *pdev,
	VL53LX_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 8003030:	b490      	push	{r4, r7}
 8003032:	b08a      	sub	sp, #40	; 0x28
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	4611      	mov	r1, r2
 800303c:	461a      	mov	r2, r3
 800303e:	460b      	mov	r3, r1
 8003040:	71fb      	strb	r3, [r7, #7]
 8003042:	4613      	mov	r3, r2
 8003044:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	b29b      	uxth	r3, r3
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003062:	e021      	b.n	80030a8 <vl53lx_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 8003064:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	461a      	mov	r2, r3
 8003070:	0052      	lsls	r2, r2, #1
 8003072:	441a      	add	r2, r3
 8003074:	00d3      	lsls	r3, r2, #3
 8003076:	461a      	mov	r2, r3
 8003078:	460b      	mov	r3, r1
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	440b      	add	r3, r1
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	4413      	add	r3, r2
 8003082:	4423      	add	r3, r4
 8003084:	f203 7304 	addw	r3, r3, #1796	; 0x704
 8003088:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 800308c:	6a3a      	ldr	r2, [r7, #32]
 800308e:	4413      	add	r3, r2
 8003090:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8003092:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	3206      	adds	r2, #6
 8003098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800309c:	69fa      	ldr	r2, [r7, #28]
 800309e:	4413      	add	r3, r2
 80030a0:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 80030a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030a4:	3301      	adds	r3, #1
 80030a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80030a8:	79bb      	ldrb	r3, [r7, #6]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d3d8      	bcc.n	8003064 <vl53lx_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d047      	beq.n	8003148 <vl53lx_diff_histo_stddev+0x118>
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d044      	beq.n	8003148 <vl53lx_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80030c6:	e03a      	b.n	800313e <vl53lx_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 80030c8:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	461a      	mov	r2, r3
 80030d4:	0052      	lsls	r2, r2, #1
 80030d6:	441a      	add	r2, r3
 80030d8:	00d3      	lsls	r3, r2, #3
 80030da:	461a      	mov	r2, r3
 80030dc:	460b      	mov	r3, r1
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	440b      	add	r3, r1
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	4413      	add	r3, r2
 80030e6:	4423      	add	r3, r4
 80030e8:	f203 7304 	addw	r3, r3, #1796	; 0x704
 80030ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80030f0:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030f8:	fb02 f203 	mul.w	r2, r2, r3
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8003102:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8003104:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	3206      	adds	r2, #6
 800310a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800310e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003112:	fb02 f203 	mul.w	r2, r2, r3
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	fb92 f3f3 	sdiv	r3, r2, r3
 800311c:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 800311e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	69b9      	ldr	r1, [r7, #24]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8003128:	69b8      	ldr	r0, [r7, #24]
 800312a:	6979      	ldr	r1, [r7, #20]
 800312c:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	441a      	add	r2, r3
 8003134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003136:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003138:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800313a:	3301      	adds	r3, #1
 800313c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800313e:	79bb      	ldrb	r3, [r7, #6]
 8003140:	b29b      	uxth	r3, r3
 8003142:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003144:	429a      	cmp	r2, r3
 8003146:	d3bf      	bcc.n	80030c8 <vl53lx_diff_histo_stddev+0x98>
	}
}
 8003148:	bf00      	nop
 800314a:	3728      	adds	r7, #40	; 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bc90      	pop	{r4, r7}
 8003150:	4770      	bx	lr

08003152 <vl53lx_histo_merge>:

static void vl53lx_histo_merge(VL53LX_DEV Dev,
		VL53LX_histogram_bin_data_t *pdata) {
 8003152:	b5b0      	push	{r4, r5, r7, lr}
 8003154:	b08c      	sub	sp, #48	; 0x30
 8003156:	af02      	add	r7, sp, #8
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev =
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3318      	adds	r3, #24
 8003160:	61fb      	str	r3, [r7, #28]
			VL53LXDevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8003170:	2300      	movs	r3, #0
 8003172:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 8003176:	2300      	movs	r3, #0
 8003178:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8003182:	2318      	movs	r3, #24
 8003184:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8003186:	f107 0314 	add.w	r3, r7, #20
 800318a:	461a      	mov	r2, r3
 800318c:	f248 018f 	movw	r1, #32911	; 0x808f
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f002 fbd3 	bl	800593c <VL53LX_get_tuning_parm>
			&TuningBinRecSize);

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8003196:	f107 0310 	add.w	r3, r7, #16
 800319a:	461a      	mov	r2, r3
 800319c:	f248 018e 	movw	r1, #32910	; 0x808e
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f002 fbcb 	bl	800593c <VL53LX_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80031ac:	330d      	adds	r3, #13
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f040 811a 	bne.w	80033ea <vl53lx_histo_merge+0x298>

		timing = 1 - pdata->result__stream_count % 2;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 80031d0:	7efb      	ldrb	r3, [r7, #27]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	7eba      	ldrb	r2, [r7, #26]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80031e2:	330c      	adds	r3, #12
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <vl53lx_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80031f0:	330c      	adds	r3, #12
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fa:	e004      	b.n	8003206 <vl53lx_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8003206:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800320a:	7efb      	ldrb	r3, [r7, #27]
 800320c:	69f8      	ldr	r0, [r7, #28]
 800320e:	461a      	mov	r2, r3
 8003210:	0052      	lsls	r2, r2, #1
 8003212:	441a      	add	r2, r3
 8003214:	0153      	lsls	r3, r2, #5
 8003216:	461a      	mov	r2, r3
 8003218:	460b      	mov	r3, r1
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	440b      	add	r3, r1
 800321e:	019b      	lsls	r3, r3, #6
 8003220:	4413      	add	r3, r2
 8003222:	4403      	add	r3, r0
 8003224:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	dd0c      	ble.n	8003248 <vl53lx_histo_merge+0xf6>
			vl53lx_diff_histo_stddev(pdev, pdata,
 800322e:	7e79      	ldrb	r1, [r7, #25]
 8003230:	7efa      	ldrb	r2, [r7, #27]
 8003232:	f107 030c 	add.w	r3, r7, #12
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	460b      	mov	r3, r1
 8003240:	6839      	ldr	r1, [r7, #0]
 8003242:	69f8      	ldr	r0, [r7, #28]
 8003244:	f7ff fef4 	bl	8003030 <vl53lx_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	429a      	cmp	r2, r3
 800324e:	db23      	blt.n	8003298 <vl53lx_histo_merge+0x146>
			memset(pdev->multi_bins_rec, 0,
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003256:	3310      	adds	r3, #16
 8003258:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800325c:	2100      	movs	r1, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f011 f8b2 	bl	80143c8 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800326a:	330c      	adds	r3, #12
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]

			recom_been_reset = 1;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8003276:	7efb      	ldrb	r3, [r7, #27]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d106      	bne.n	800328a <vl53lx_histo_merge+0x138>
				pdev->pos_before_next_recom =
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003282:	330d      	adds	r3, #13
 8003284:	2206      	movs	r2, #6
 8003286:	701a      	strb	r2, [r3, #0]
 8003288:	e034      	b.n	80032f4 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003290:	330d      	adds	r3, #13
 8003292:	2207      	movs	r2, #7
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	e02d      	b.n	80032f4 <vl53lx_histo_merge+0x1a2>
					VL53LX_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800329e:	330c      	adds	r3, #12
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80032aa:	e01e      	b.n	80032ea <vl53lx_histo_merge+0x198>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 80032ac:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 80032b0:	7e39      	ldrb	r1, [r7, #24]
 80032b2:	7efb      	ldrb	r3, [r7, #27]
 80032b4:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	3006      	adds	r0, #6
 80032bc:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 80032c0:	69f8      	ldr	r0, [r7, #28]
 80032c2:	461a      	mov	r2, r3
 80032c4:	0052      	lsls	r2, r2, #1
 80032c6:	441a      	add	r2, r3
 80032c8:	00d3      	lsls	r3, r2, #3
 80032ca:	461a      	mov	r2, r3
 80032cc:	460b      	mov	r3, r1
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	440b      	add	r3, r1
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	4413      	add	r3, r2
 80032d6:	442b      	add	r3, r5
 80032d8:	f203 7304 	addw	r3, r3, #1796	; 0x704
 80032dc:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 80032e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80032e4:	3301      	adds	r3, #1
 80032e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80032ea:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80032ee:	7ebb      	ldrb	r3, [r7, #26]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d3db      	bcc.n	80032ac <vl53lx_histo_merge+0x15a>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80032fa:	330c      	adds	r3, #12
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	3b01      	subs	r3, #1
 8003304:	429a      	cmp	r2, r3
 8003306:	d109      	bne.n	800331c <vl53lx_histo_merge+0x1ca>
 8003308:	7efb      	ldrb	r3, [r7, #27]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d106      	bne.n	800331c <vl53lx_histo_merge+0x1ca>
			pdev->bin_rec_pos = 0;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003314:	330c      	adds	r3, #12
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
 800331a:	e00e      	b.n	800333a <vl53lx_histo_merge+0x1e8>
		else if (timing == 1)
 800331c:	7efb      	ldrb	r3, [r7, #27]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d10b      	bne.n	800333a <vl53lx_histo_merge+0x1e8>
			pdev->bin_rec_pos++;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003328:	330c      	adds	r3, #12
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	b2da      	uxtb	r2, r3
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003336:	330c      	adds	r3, #12
 8003338:	701a      	strb	r2, [r3, #0]

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 800333a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800333e:	2b01      	cmp	r3, #1
 8003340:	d102      	bne.n	8003348 <vl53lx_histo_merge+0x1f6>
 8003342:	7efb      	ldrb	r3, [r7, #27]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d069      	beq.n	800341c <vl53lx_histo_merge+0x2ca>
			 (pdev->pos_before_next_recom == 0)) {
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800334e:	330d      	adds	r3, #13
 8003350:	781b      	ldrb	r3, [r3, #0]
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8003352:	2b00      	cmp	r3, #0
 8003354:	d162      	bne.n	800341c <vl53lx_histo_merge+0x2ca>

			for (bin = 0; bin < BuffSize; bin++)
 8003356:	2300      	movs	r3, #0
 8003358:	84fb      	strh	r3, [r7, #38]	; 0x26
 800335a:	e008      	b.n	800336e <vl53lx_histo_merge+0x21c>
				pdata->bin_data[bin] = 0;
 800335c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	3206      	adds	r2, #6
 8003362:	2100      	movs	r1, #0
 8003364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8003368:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800336a:	3301      	adds	r3, #1
 800336c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800336e:	7ebb      	ldrb	r3, [r7, #26]
 8003370:	b29b      	uxth	r3, r3
 8003372:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003374:	429a      	cmp	r2, r3
 8003376:	d3f1      	bcc.n	800335c <vl53lx_histo_merge+0x20a>

			for (bin = 0; bin < BuffSize; bin++)
 8003378:	2300      	movs	r3, #0
 800337a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800337c:	e02f      	b.n	80033de <vl53lx_histo_merge+0x28c>
				for (i = 0; i < TuningBinRecSize; i++)
 800337e:	2300      	movs	r3, #0
 8003380:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003384:	e023      	b.n	80033ce <vl53lx_histo_merge+0x27c>
					pdata->bin_data[bin] +=
 8003386:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	3206      	adds	r2, #6
 800338c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 8003390:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003394:	7efb      	ldrb	r3, [r7, #27]
 8003396:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8003398:	69fc      	ldr	r4, [r7, #28]
 800339a:	461a      	mov	r2, r3
 800339c:	0052      	lsls	r2, r2, #1
 800339e:	441a      	add	r2, r3
 80033a0:	00d3      	lsls	r3, r2, #3
 80033a2:	461a      	mov	r2, r3
 80033a4:	460b      	mov	r3, r1
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	440b      	add	r3, r1
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	4413      	add	r3, r2
 80033ae:	442b      	add	r3, r5
 80033b0:	f203 7304 	addw	r3, r3, #1796	; 0x704
 80033b4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 80033b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80033ba:	18c1      	adds	r1, r0, r3
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	3206      	adds	r2, #6
 80033c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 80033c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80033c8:	3301      	adds	r3, #1
 80033ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80033ce:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	dbd6      	blt.n	8003386 <vl53lx_histo_merge+0x234>
			for (bin = 0; bin < BuffSize; bin++)
 80033d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80033da:	3301      	adds	r3, #1
 80033dc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80033de:	7ebb      	ldrb	r3, [r7, #26]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d3ca      	bcc.n	800337e <vl53lx_histo_merge+0x22c>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 80033e8:	e018      	b.n	800341c <vl53lx_histo_merge+0x2ca>
		pdev->pos_before_next_recom--;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80033f0:	330d      	adds	r3, #13
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80033fe:	330d      	adds	r3, #13
 8003400:	701a      	strb	r2, [r3, #0]
		if (pdev->pos_before_next_recom == 255)
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003408:	330d      	adds	r3, #13
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2bff      	cmp	r3, #255	; 0xff
 800340e:	d105      	bne.n	800341c <vl53lx_histo_merge+0x2ca>
			pdev->pos_before_next_recom = 0;
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003416:	330d      	adds	r3, #13
 8003418:	2200      	movs	r2, #0
 800341a:	701a      	strb	r2, [r3, #0]
}
 800341c:	bf00      	nop
 800341e:	3728      	adds	r7, #40	; 0x28
 8003420:	46bd      	mov	sp, r7
 8003422:	bdb0      	pop	{r4, r5, r7, pc}

08003424 <VL53LX_load_patch>:

VL53LX_Error VL53LX_load_patch(VL53LX_DEV Dev)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b0c6      	sub	sp, #280	; 0x118
 8003428:	af00      	add	r7, sp, #0
 800342a:	1d3b      	adds	r3, r7, #4
 800342c:	6018      	str	r0, [r3, #0]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 800342e:	2300      	movs	r3, #0
 8003430:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800343a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800343e:	2b00      	cmp	r3, #0
 8003440:	d108      	bne.n	8003454 <VL53LX_load_patch+0x30>
		status = VL53LX_WrByte(Dev,
 8003442:	1d3b      	adds	r3, r7, #4
 8003444:	2200      	movs	r2, #0
 8003446:	2185      	movs	r1, #133	; 0x85
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	f00d fdc3 	bl	8010fd4 <VL53LX_WrByte>
 800344e:	4603      	mov	r3, r0
 8003450:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003454:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003458:	2b00      	cmp	r3, #0
 800345a:	d103      	bne.n	8003464 <VL53LX_load_patch+0x40>
		VL53LX_enable_powerforce(Dev);
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	f005 f9b5 	bl	80087ce <VL53LX_enable_powerforce>

	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER,
 8003464:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8003468:	1d3b      	adds	r3, r7, #4
 800346a:	f248 018c 	movw	r1, #32908	; 0x808c
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	f002 fa64 	bl	800593c <VL53LX_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8003474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003478:	2b03      	cmp	r3, #3
 800347a:	d81b      	bhi.n	80034b4 <VL53LX_load_patch+0x90>
 800347c:	a201      	add	r2, pc, #4	; (adr r2, 8003484 <VL53LX_load_patch+0x60>)
 800347e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003482:	bf00      	nop
 8003484:	08003495 	.word	0x08003495
 8003488:	0800349d 	.word	0x0800349d
 800348c:	080034a5 	.word	0x080034a5
 8003490:	080034ad 	.word	0x080034ad
	case 0:
		patch_power = 0x00;
 8003494:	2300      	movs	r3, #0
 8003496:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800349a:	e00e      	b.n	80034ba <VL53LX_load_patch+0x96>
	case 1:
		patch_power = 0x10;
 800349c:	2310      	movs	r3, #16
 800349e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80034a2:	e00a      	b.n	80034ba <VL53LX_load_patch+0x96>
	case 2:
		patch_power = 0x20;
 80034a4:	2320      	movs	r3, #32
 80034a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80034aa:	e006      	b.n	80034ba <VL53LX_load_patch+0x96>
	case 3:
		patch_power = 0x40;
 80034ac:	2340      	movs	r3, #64	; 0x40
 80034ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80034b2:	e002      	b.n	80034ba <VL53LX_load_patch+0x96>
	default:
		patch_power = 0x00;
 80034b4:	2300      	movs	r3, #0
 80034b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53LX_ERROR_NONE) {
 80034ba:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d125      	bne.n	800350e <VL53LX_load_patch+0xea>

		comms_buffer[0] = 0x29;
 80034c2:	f107 030c 	add.w	r3, r7, #12
 80034c6:	2229      	movs	r2, #41	; 0x29
 80034c8:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80034ca:	f107 030c 	add.w	r3, r7, #12
 80034ce:	22c9      	movs	r2, #201	; 0xc9
 80034d0:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 80034d2:	f107 030c 	add.w	r3, r7, #12
 80034d6:	220e      	movs	r2, #14
 80034d8:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 80034da:	f107 030c 	add.w	r3, r7, #12
 80034de:	2240      	movs	r2, #64	; 0x40
 80034e0:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 80034e2:	f107 030c 	add.w	r3, r7, #12
 80034e6:	2228      	movs	r2, #40	; 0x28
 80034e8:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 80034ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	f107 030c 	add.w	r3, r7, #12
 80034f4:	715a      	strb	r2, [r3, #5]

		status = VL53LX_WriteMulti(Dev,
 80034f6:	f107 020c 	add.w	r2, r7, #12
 80034fa:	1d38      	adds	r0, r7, #4
 80034fc:	2306      	movs	r3, #6
 80034fe:	f240 4176 	movw	r1, #1142	; 0x476
 8003502:	6800      	ldr	r0, [r0, #0]
 8003504:	f00d fcfa 	bl	8010efc <VL53LX_WriteMulti>
 8003508:	4603      	mov	r3, r0
 800350a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 800350e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003512:	2b00      	cmp	r3, #0
 8003514:	d123      	bne.n	800355e <VL53LX_load_patch+0x13a>
		comms_buffer[0] = 0x03;
 8003516:	f107 030c 	add.w	r3, r7, #12
 800351a:	2203      	movs	r2, #3
 800351c:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 800351e:	f107 030c 	add.w	r3, r7, #12
 8003522:	226d      	movs	r2, #109	; 0x6d
 8003524:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8003526:	f107 030c 	add.w	r3, r7, #12
 800352a:	2203      	movs	r2, #3
 800352c:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800352e:	f107 030c 	add.w	r3, r7, #12
 8003532:	226f      	movs	r2, #111	; 0x6f
 8003534:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8003536:	f107 030c 	add.w	r3, r7, #12
 800353a:	2207      	movs	r2, #7
 800353c:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 800353e:	f107 030c 	add.w	r3, r7, #12
 8003542:	2229      	movs	r2, #41	; 0x29
 8003544:	715a      	strb	r2, [r3, #5]
		status = VL53LX_WriteMulti(Dev,
 8003546:	f107 020c 	add.w	r2, r7, #12
 800354a:	1d38      	adds	r0, r7, #4
 800354c:	2306      	movs	r3, #6
 800354e:	f240 4196 	movw	r1, #1174	; 0x496
 8003552:	6800      	ldr	r0, [r0, #0]
 8003554:	f00d fcd2 	bl	8010efc <VL53LX_WriteMulti>
 8003558:	4603      	mov	r3, r0
 800355a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53LX_ERROR_NONE) {
 800355e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003562:	2b00      	cmp	r3, #0
 8003564:	d113      	bne.n	800358e <VL53LX_load_patch+0x16a>
		comms_buffer[0] = 0x00;
 8003566:	f107 030c 	add.w	r3, r7, #12
 800356a:	2200      	movs	r2, #0
 800356c:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800356e:	f107 030c 	add.w	r3, r7, #12
 8003572:	2207      	movs	r2, #7
 8003574:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 8003576:	f107 020c 	add.w	r2, r7, #12
 800357a:	1d38      	adds	r0, r7, #4
 800357c:	2302      	movs	r3, #2
 800357e:	f240 4172 	movw	r1, #1138	; 0x472
 8003582:	6800      	ldr	r0, [r0, #0]
 8003584:	f00d fcba 	bl	8010efc <VL53LX_WriteMulti>
 8003588:	4603      	mov	r3, r0
 800358a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE) {
 800358e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003592:	2b00      	cmp	r3, #0
 8003594:	d113      	bne.n	80035be <VL53LX_load_patch+0x19a>
		comms_buffer[0] = 0x00;
 8003596:	f107 030c 	add.w	r3, r7, #12
 800359a:	2200      	movs	r2, #0
 800359c:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800359e:	f107 030c 	add.w	r3, r7, #12
 80035a2:	2207      	movs	r2, #7
 80035a4:	705a      	strb	r2, [r3, #1]
		status = VL53LX_WriteMulti(Dev,
 80035a6:	f107 020c 	add.w	r2, r7, #12
 80035aa:	1d38      	adds	r0, r7, #4
 80035ac:	2302      	movs	r3, #2
 80035ae:	f240 4174 	movw	r1, #1140	; 0x474
 80035b2:	6800      	ldr	r0, [r0, #0]
 80035b4:	f00d fca2 	bl	8010efc <VL53LX_WriteMulti>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53LX_ERROR_NONE)
 80035be:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <VL53LX_load_patch+0x1b6>
		status = VL53LX_WrByte(Dev,
 80035c6:	1d3b      	adds	r3, r7, #4
 80035c8:	2201      	movs	r2, #1
 80035ca:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	f00d fd00 	bl	8010fd4 <VL53LX_WrByte>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_PATCH__CTRL, 0x01);

	if (status == VL53LX_ERROR_NONE)
 80035da:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d108      	bne.n	80035f4 <VL53LX_load_patch+0x1d0>
		status = VL53LX_WrByte(Dev,
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	2201      	movs	r2, #1
 80035e6:	2185      	movs	r1, #133	; 0x85
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	f00d fcf3 	bl	8010fd4 <VL53LX_WrByte>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 80035f4:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop

08003604 <VL53LX_unload_patch>:

VL53LX_Error VL53LX_unload_patch(VL53LX_DEV Dev)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
	VL53LX_Error status = VL53LX_ERROR_NONE;
 800360c:	2300      	movs	r3, #0
 800360e:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE)
 8003610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <VL53LX_unload_patch+0x22>
		status = VL53LX_WrByte(Dev,
 8003618:	2200      	movs	r2, #0
 800361a:	2185      	movs	r1, #133	; 0x85
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f00d fcd9 	bl	8010fd4 <VL53LX_WrByte>
 8003622:	4603      	mov	r3, r0
 8003624:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x00);

	if (status == VL53LX_ERROR_NONE)
 8003626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d102      	bne.n	8003634 <VL53LX_unload_patch+0x30>
		VL53LX_disable_powerforce(Dev);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f005 f8df 	bl	80087f2 <VL53LX_disable_powerforce>

	if (status == VL53LX_ERROR_NONE)
 8003634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d107      	bne.n	800364c <VL53LX_unload_patch+0x48>
		status = VL53LX_WrByte(Dev,
 800363c:	2200      	movs	r2, #0
 800363e:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f00d fcc6 	bl	8010fd4 <VL53LX_WrByte>
 8003648:	4603      	mov	r3, r0
 800364a:	73fb      	strb	r3, [r7, #15]
		VL53LX_PATCH__CTRL, 0x00);

	if (status == VL53LX_ERROR_NONE)
 800364c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d106      	bne.n	8003662 <VL53LX_unload_patch+0x5e>
		status = VL53LX_WrByte(Dev,
 8003654:	2201      	movs	r2, #1
 8003656:	2185      	movs	r1, #133	; 0x85
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f00d fcbb 	bl	8010fd4 <VL53LX_WrByte>
 800365e:	4603      	mov	r3, r0
 8003660:	73fb      	strb	r3, [r7, #15]
		VL53LX_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8003662:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <VL53LX_data_init>:


VL53LX_Error VL53LX_data_init(
	VL53LX_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800366e:	b5b0      	push	{r4, r5, r7, lr}
 8003670:	b08a      	sub	sp, #40	; 0x28
 8003672:	af04      	add	r7, sp, #16
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800367a:	2300      	movs	r3, #0
 800367c:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t    *pdev =
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3318      	adds	r3, #24
 8003682:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800368a:	60fb      	str	r3, [r7, #12]



	VL53LX_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53LX_init_ll_driver_state(
 8003690:	2162      	movs	r1, #98	; 0x62
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f004 f920 	bl	80078d8 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53LX_MAX_RANGE_RESULTS;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2204      	movs	r2, #4
 800369c:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53LX_MAX_USER_ZONES;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2205      	movs	r2, #5
 80036a8:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
	pres->zone_results.active_zones    = 0;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5

	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80036b4:	2300      	movs	r3, #0
 80036b6:	75bb      	strb	r3, [r7, #22]
 80036b8:	e01b      	b.n	80036f2 <VL53LX_data_init+0x84>
		pobjects = &(pres->zone_results.VL53LX_p_003[i]);
 80036ba:	7dba      	ldrb	r2, [r7, #22]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	3308      	adds	r3, #8
 80036ce:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53LX_p_016 = 0;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2200      	movs	r2, #0
 80036d4:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53LX_p_017  = 0;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2200      	movs	r2, #0
 80036da:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53LX_p_011          = 0;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2200      	movs	r2, #0
 80036e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 80036ec:	7dbb      	ldrb	r3, [r7, #22]
 80036ee:	3301      	adds	r3, #1
 80036f0:	75bb      	strb	r3, [r7, #22]
 80036f2:	7dbb      	ldrb	r3, [r7, #22]
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d9e0      	bls.n	80036ba <VL53LX_data_init+0x4c>
				VL53LX_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53LX_MAX_USER_ZONES;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2205      	movs	r2, #5
 80036fc:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
	pres->zone_hists.active_zones      = 0;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d



	pres->zone_cal.max_zones           = VL53LX_MAX_USER_ZONES;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2205      	movs	r2, #5
 800370c:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
	pres->zone_cal.active_zones        = 0;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8003718:	2300      	movs	r3, #0
 800371a:	75bb      	strb	r3, [r7, #22]
 800371c:	e039      	b.n	8003792 <VL53LX_data_init+0x124>
		pres->zone_cal.VL53LX_p_003[i].no_of_samples   = 0;
 800371e:	7dba      	ldrb	r2, [r7, #22]
 8003720:	68f9      	ldr	r1, [r7, #12]
 8003722:	4613      	mov	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].effective_spads = 0;
 8003734:	7dba      	ldrb	r2, [r7, #22]
 8003736:	68f9      	ldr	r1, [r7, #12]
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].peak_rate_mcps  = 0;
 800374a:	7dba      	ldrb	r2, [r7, #22]
 800374c:	68f9      	ldr	r1, [r7, #12]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].median_range_mm = 0;
 8003760:	7dba      	ldrb	r2, [r7, #22]
 8003762:	68f9      	ldr	r1, [r7, #12]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53LX_p_003[i].range_mm_offset = 0;
 8003776:	7dba      	ldrb	r2, [r7, #22]
 8003778:	68f9      	ldr	r1, [r7, #12]
 800377a:	4613      	mov	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	f503 736b 	add.w	r3, r3, #940	; 0x3ac
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 800378c:	7dbb      	ldrb	r3, [r7, #22]
 800378e:	3301      	adds	r3, #1
 8003790:	75bb      	strb	r3, [r7, #22]
 8003792:	7dbb      	ldrb	r3, [r7, #22]
 8003794:	2b04      	cmp	r3, #4
 8003796:	d9c2      	bls.n	800371e <VL53LX_data_init+0xb0>
	}

	pdev->wait_method             = VL53LX_WAIT_METHOD_BLOCKING;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2200      	movs	r2, #0
 800379c:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	221e      	movs	r2, #30
 80037a2:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = 0;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2200      	movs	r2, #0
 80037a8:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53LX_DEVICEMEASUREMENTMODE_STOP;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2200      	movs	r2, #0
 80037ae:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	2201      	movs	r2, #1
 80037b4:	711a      	strb	r2, [r3, #4]
		VL53LX_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2201      	movs	r2, #1
 80037ba:	715a      	strb	r2, [r3, #5]
		VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	2201      	movs	r2, #1
 80037c0:	719a      	strb	r2, [r3, #6]
		VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037c8:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80037d0:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80037d8:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2264      	movs	r2, #100	; 0x64
 80037de:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80037e6:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53LX_MAX_OFFSET_RANGE_RESULTS;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 80037f6:	3302      	adds	r3, #2
 80037f8:	2203      	movs	r2, #3
 80037fa:	701a      	strb	r2, [r3, #0]
	pdev->offset_results.active_results = 0;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f503 5397 	add.w	r3, r3, #4832	; 0x12e0
 8003802:	3303      	adds	r3, #3
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]



	pdev->gain_cal.standard_ranging_gain_factor =
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f240 72db 	movw	r2, #2011	; 0x7db
 800380e:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8003818:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53LX_init_version(Dev);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f004 f83f 	bl	80078a0 <VL53LX_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003828:	3310      	adds	r3, #16
 800382a:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800382e:	2100      	movs	r1, #0
 8003830:	4618      	mov	r0, r3
 8003832:	f010 fdc9 	bl	80143c8 <memset>
	pdev->bin_rec_pos = 0;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 800383c:	330c      	adds	r3, #12
 800383e:	2200      	movs	r2, #0
 8003840:	701a      	strb	r2, [r3, #0]
	pdev->pos_before_next_recom = 0;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8003848:	330d      	adds	r3, #13
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]



	if (read_p2p_data > 0 && status == VL53LX_ERROR_NONE)
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <VL53LX_data_init+0x1f8>
 8003854:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d104      	bne.n	8003866 <VL53LX_data_init+0x1f8>
		status = VL53LX_read_p2p_data(Dev);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f8b7 	bl	80039d0 <VL53LX_read_p2p_data>
 8003862:	4603      	mov	r3, r0
 8003864:	75fb      	strb	r3, [r7, #23]


	if (status == VL53LX_ERROR_NONE)
 8003866:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d107      	bne.n	800387e <VL53LX_data_init+0x210>
		status = VL53LX_init_refspadchar_config_struct(
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003874:	4618      	mov	r0, r3
 8003876:	f002 ffdf 	bl	8006838 <VL53LX_init_refspadchar_config_struct>
 800387a:	4603      	mov	r3, r0
 800387c:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53LX_ERROR_NONE)
 800387e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d107      	bne.n	8003896 <VL53LX_data_init+0x228>
		status = VL53LX_init_ssc_config_struct(
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800388c:	4618      	mov	r0, r3
 800388e:	f002 fff7 	bl	8006880 <VL53LX_init_ssc_config_struct>
 8003892:	4603      	mov	r3, r0
 8003894:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003896:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10b      	bne.n	80038b6 <VL53LX_data_init+0x248>
		status = VL53LX_init_xtalk_config_struct(
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80038aa:	4619      	mov	r1, r3
 80038ac:	4610      	mov	r0, r2
 80038ae:	f003 f808 	bl	80068c2 <VL53LX_init_xtalk_config_struct>
 80038b2:	4603      	mov	r3, r0
 80038b4:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53LX_ERROR_NONE)
 80038b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d107      	bne.n	80038ce <VL53LX_data_init+0x260>
		status = VL53LX_init_xtalk_extract_config_struct(
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80038c4:	4618      	mov	r0, r3
 80038c6:	f003 f86f 	bl	80069a8 <VL53LX_init_xtalk_extract_config_struct>
 80038ca:	4603      	mov	r3, r0
 80038cc:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53LX_ERROR_NONE)
 80038ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d107      	bne.n	80038e6 <VL53LX_data_init+0x278>
		status = VL53LX_init_offset_cal_config_struct(
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80038dc:	4618      	mov	r0, r3
 80038de:	f003 f892 	bl	8006a06 <VL53LX_init_offset_cal_config_struct>
 80038e2:	4603      	mov	r3, r0
 80038e4:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53LX_ERROR_NONE)
 80038e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d107      	bne.n	80038fe <VL53LX_data_init+0x290>
		status = VL53LX_init_zone_cal_config_struct(
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80038f4:	4618      	mov	r0, r3
 80038f6:	f003 f8ad 	bl	8006a54 <VL53LX_init_zone_cal_config_struct>
 80038fa:	4603      	mov	r3, r0
 80038fc:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53LX_ERROR_NONE)
 80038fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10b      	bne.n	800391e <VL53LX_data_init+0x2b0>
		status = VL53LX_init_hist_post_process_config_struct(
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003912:	4619      	mov	r1, r3
 8003914:	4610      	mov	r0, r2
 8003916:	f003 f8c1 	bl	8006a9c <VL53LX_init_hist_post_process_config_struct>
 800391a:	4603      	mov	r3, r0
 800391c:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53LX_ERROR_NONE)
 800391e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d107      	bne.n	8003936 <VL53LX_data_init+0x2c8>
		status = VL53LX_init_hist_gen3_dmax_config_struct(
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800392c:	4618      	mov	r0, r3
 800392e:	f003 fac0 	bl	8006eb2 <VL53LX_init_hist_gen3_dmax_config_struct>
 8003932:	4603      	mov	r3, r0
 8003934:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53LX_ERROR_NONE)
 8003936:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <VL53LX_data_init+0x2de>
		status = VL53LX_init_tuning_parm_storage_struct(
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	33f8      	adds	r3, #248	; 0xf8
 8003942:	4618      	mov	r0, r3
 8003944:	f003 f919 	bl	8006b7a <VL53LX_init_tuning_parm_storage_struct>
 8003948:	4603      	mov	r3, r0
 800394a:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53LX_ERROR_NONE)
 800394c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d116      	bne.n	8003982 <VL53LX_data_init+0x314>
		status = VL53LX_set_preset_mode(
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	7858      	ldrb	r0, [r3, #1]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	8b1c      	ldrh	r4, [r3, #24]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	689d      	ldr	r5, [r3, #8]
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	6912      	ldr	r2, [r2, #16]
 8003968:	6939      	ldr	r1, [r7, #16]
 800396a:	6949      	ldr	r1, [r1, #20]
 800396c:	9102      	str	r1, [sp, #8]
 800396e:	9201      	str	r2, [sp, #4]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	462b      	mov	r3, r5
 8003974:	4622      	mov	r2, r4
 8003976:	4601      	mov	r1, r0
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fb3e 	bl	8003ffa <VL53LX_set_preset_mode>
 800397e:	4603      	mov	r3, r0
 8003980:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53LX_init_histogram_bin_data_struct(
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003988:	461a      	mov	r2, r3
 800398a:	2118      	movs	r1, #24
 800398c:	2000      	movs	r0, #0
 800398e:	f008 fa30 	bl	800bdf2 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53LX_init_histogram_bin_data_struct(
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f503 638e 	add.w	r3, r3, #1136	; 0x470
 8003998:	461a      	mov	r2, r3
 800399a:	2118      	movs	r1, #24
 800399c:	2000      	movs	r0, #0
 800399e:	f008 fa28 	bl	800bdf2 <VL53LX_init_histogram_bin_data_struct>
			0,
			VL53LX_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53LX_init_xtalk_bin_data_struct(
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f203 531c 	addw	r3, r3, #1308	; 0x51c
 80039a8:	461a      	mov	r2, r3
 80039aa:	210c      	movs	r1, #12
 80039ac:	2000      	movs	r0, #0
 80039ae:	f004 fd33 	bl	8008418 <VL53LX_init_xtalk_bin_data_struct>
			VL53LX_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53LX_xtalk_cal_data_init(
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f007 fc24 	bl	800b200 <VL53LX_xtalk_cal_data_init>
			Dev
			);



	VL53LX_dynamic_xtalk_correction_data_init(
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f007 fb3b 	bl	800b034 <VL53LX_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53LX_low_power_auto_data_init(
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f007 fc47 	bl	800b252 <VL53LX_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 80039c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bdb0      	pop	{r4, r5, r7, pc}

080039d0 <VL53LX_read_p2p_data>:


VL53LX_Error VL53LX_read_p2p_data(
	VL53LX_DEV        Dev)
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b091      	sub	sp, #68	; 0x44
 80039d4:	af04      	add	r7, sp, #16
 80039d6:	6078      	str	r0, [r7, #4]



	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80039d8:	2300      	movs	r3, #0
 80039da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3318      	adds	r3, #24
 80039e2:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 80039ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ee:	3348      	adds	r3, #72	; 0x48
 80039f0:	623b      	str	r3, [r7, #32]
	VL53LX_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	339c      	adds	r3, #156	; 0x9c
 80039f6:	61fb      	str	r3, [r7, #28]

	VL53LX_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 80039f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <VL53LX_read_p2p_data+0x44>
		status = VL53LX_get_static_nvm_managed(
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8003a06:	4619      	mov	r1, r3
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f00b fbb0 	bl	800f16e <VL53LX_get_static_nvm_managed>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53LX_ERROR_NONE)
 8003a14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d108      	bne.n	8003a2e <VL53LX_read_p2p_data+0x5e>
		status = VL53LX_get_customer_nvm_managed(
 8003a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1e:	3348      	adds	r3, #72	; 0x48
 8003a20:	4619      	mov	r1, r3
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f00b fce1 	bl	800f3ea <VL53LX_get_customer_nvm_managed>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53LX_ERROR_NONE) {
 8003a2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d117      	bne.n	8003a66 <VL53LX_read_p2p_data+0x96>

		status = VL53LX_get_nvm_copy_data(
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	f203 3392 	addw	r3, r3, #914	; 0x392
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f00c fbdd 	bl	80101fe <VL53LX_get_nvm_copy_data>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53LX_ERROR_NONE)
 8003a4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d109      	bne.n	8003a66 <VL53LX_read_p2p_data+0x96>
			VL53LX_copy_rtn_good_spads_to_buffer(
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	f203 3292 	addw	r2, r3, #914	; 0x392
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4610      	mov	r0, r2
 8003a62:	f004 fa2f 	bl	8007ec4 <VL53LX_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53LX_ERROR_NONE) {
 8003a66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10e      	bne.n	8003a8c <VL53LX_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	895b      	ldrh	r3, [r3, #10]
 8003a72:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53LX_ERROR_NONE)
 8003a8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d108      	bne.n	8003aa6 <VL53LX_read_p2p_data+0xd6>
		status =
			VL53LX_read_nvm_optical_centre(
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	33c0      	adds	r3, #192	; 0xc0
 8003a98:	4619      	mov	r1, r3
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f00b fa1b 	bl	800eed6 <VL53LX_read_nvm_optical_centre>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53LX_ERROR_NONE)
 8003aa6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d108      	bne.n	8003ac0 <VL53LX_read_p2p_data+0xf0>
		status =
			VL53LX_read_nvm_cal_peak_rate_map(
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	3360      	adds	r3, #96	; 0x60
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f00b fa31 	bl	800ef1c <VL53LX_read_nvm_cal_peak_rate_map>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53LX_ERROR_NONE) {
 8003ac0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d12d      	bne.n	8003b24 <VL53LX_read_p2p_data+0x154>

		status =
			VL53LX_read_nvm_additional_offset_cal_data(
 8003ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aca:	339c      	adds	r3, #156	; 0x9c
 8003acc:	4619      	mov	r1, r3
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f00b fa4a 	bl	800ef68 <VL53LX_read_nvm_additional_offset_cal_data>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	889b      	ldrh	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d120      	bne.n	8003b24 <VL53LX_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d11c      	bne.n	8003b24 <VL53LX_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	2280      	movs	r2, #128	; 0x80
 8003aee:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003af6:	80da      	strh	r2, [r3, #6]



			VL53LX_calc_mm_effective_spads(
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afa:	f893 03c2 	ldrb.w	r0, [r3, #962]	; 0x3c2
 8003afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b00:	f893 43c3 	ldrb.w	r4, [r3, #963]	; 0x3c3
 8003b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b06:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003b0a:	69fa      	ldr	r2, [r7, #28]
 8003b0c:	69f9      	ldr	r1, [r7, #28]
 8003b0e:	3102      	adds	r1, #2
 8003b10:	9103      	str	r1, [sp, #12]
 8003b12:	9202      	str	r2, [sp, #8]
 8003b14:	2238      	movs	r2, #56	; 0x38
 8003b16:	9201      	str	r2, [sp, #4]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	23ff      	movs	r3, #255	; 0xff
 8003b1c:	22c7      	movs	r2, #199	; 0xc7
 8003b1e:	4621      	mov	r1, r4
 8003b20:	f006 f97a 	bl	8009e18 <VL53LX_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53LX_ERROR_NONE) {
 8003b24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d12f      	bne.n	8003b8c <VL53LX_read_p2p_data+0x1bc>

		status =
			VL53LX_read_nvm_fmt_range_results_data(
 8003b2c:	f107 030c 	add.w	r3, r7, #12
 8003b30:	461a      	mov	r2, r3
 8003b32:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f00b fa39 	bl	800efae <VL53LX_read_nvm_fmt_range_results_data>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53LX_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53LX_ERROR_NONE) {
 8003b42:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d120      	bne.n	8003b8c <VL53LX_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 8003b4a:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8003b52:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 8003b5a:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 8003b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d006      	beq.n	8003b7a <VL53LX_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8003b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b74:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8003b78:	e003      	b.n	8003b82 <VL53LX_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	2214      	movs	r2, #20
 8003b7e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8003b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b88:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53LX_ERROR_NONE)
 8003b8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <VL53LX_read_p2p_data+0x1dc>
		status =
			VL53LX_RdWord(
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	21de      	movs	r1, #222	; 0xde
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f00d faa7 	bl	80110f4 <VL53LX_RdWord>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53LX_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8003bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bae:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb6:	d204      	bcs.n	8003bc2 <VL53LX_read_p2p_data+0x1f2>
			VL53LX_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8003bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bba:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8003bbe:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
	}



	if (status == VL53LX_ERROR_NONE)
 8003bc2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d108      	bne.n	8003bdc <VL53LX_read_p2p_data+0x20c>
		status =
			VL53LX_get_mode_mitigation_roi(
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	33bc      	adds	r3, #188	; 0xbc
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f91a 	bl	8003e0a <VL53LX_get_mode_mitigation_roi>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d114      	bne.n	8003c10 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10f      	bne.n	8003c10 <VL53LX_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8003bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8003bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8003c10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3734      	adds	r7, #52	; 0x34
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd90      	pop	{r4, r7, pc}

08003c1c <VL53LX_set_inter_measurement_period_ms>:


VL53LX_Error VL53LX_set_inter_measurement_period_ms(
	VL53LX_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3318      	adds	r3, #24
 8003c2e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003c36:	3304      	adds	r3, #4
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <VL53LX_set_inter_measurement_period_ms+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003c3e:	23f1      	movs	r3, #241	; 0xf1
 8003c40:	73fb      	strb	r3, [r7, #15]

	if (status == VL53LX_ERROR_NONE) {
 8003c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10e      	bne.n	8003c68 <VL53LX_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8003c56:	3304      	adds	r3, #4
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	}

	LOG_FUNCTION_END(status);

	return status;
 8003c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <VL53LX_set_timeouts_us>:
VL53LX_Error VL53LX_set_timeouts_us(
	VL53LX_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev =
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3318      	adds	r3, #24
 8003c8e:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <VL53LX_set_timeouts_us+0x26>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003c9a:	23f1      	movs	r3, #241	; 0xf1
 8003c9c:	75fb      	strb	r3, [r7, #23]

	if (status == VL53LX_ERROR_NONE) {
 8003c9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d11b      	bne.n	8003cde <VL53LX_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	611a      	str	r2, [r3, #16]

		status =
		VL53LX_calc_timeout_register_values(
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f8b3 12de 	ldrh.w	r1, [r3, #734]	; 0x2de
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f203 331e 	addw	r3, r3, #798	; 0x31e
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	f502 724d 	add.w	r2, r2, #820	; 0x334
 8003cca:	9201      	str	r2, [sp, #4]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	68b8      	ldr	r0, [r7, #8]
 8003cd6:	f004 ff42 	bl	8008b5e <VL53LX_calc_timeout_register_values>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8003cde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <VL53LX_get_timeouts_us>:
VL53LX_Error VL53LX_get_timeouts_us(
	VL53LX_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b088      	sub	sp, #32
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t *pdev =
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3318      	adds	r3, #24
 8003d00:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f8b3 32de 	ldrh.w	r3, [r3, #734]	; 0x2de
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <VL53LX_get_timeouts_us+0x2e>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8003d14:	23f1      	movs	r3, #241	; 0xf1
 8003d16:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 8003d18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d14a      	bne.n	8003db6 <VL53LX_get_timeouts_us+0xcc>


		macro_period_us =
			VL53LX_calc_macro_period_us(
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	f8b3 22de 	ldrh.w	r2, [r3, #734]	; 0x2de
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	f004 fd8e 	bl	8008850 <VL53LX_calc_macro_period_us>
 8003d34:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53LX_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
			VL53LX_calc_timeout_us(
 8003d3c:	6979      	ldr	r1, [r7, #20]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f004 fe4d 	bl	80089de <VL53LX_calc_timeout_us>
 8003d44:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		timeout_encoded =
 8003d50:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8003d52:	8a7b      	ldrh	r3, [r7, #18]
 8003d54:	021b      	lsls	r3, r3, #8
 8003d56:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8003d5e:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8003d60:	4413      	add	r3, r2
 8003d62:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8003d64:	8a7b      	ldrh	r3, [r7, #18]
 8003d66:	6979      	ldr	r1, [r7, #20]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f004 fe9d 	bl	8008aa8 <VL53LX_calc_decoded_timeout_us>
 8003d6e:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
		timeout_encoded =
 8003d7a:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8003d7c:	8a7b      	ldrh	r3, [r7, #18]
 8003d7e:	021b      	lsls	r3, r3, #8
 8003d80:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8003d88:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8003d8a:	4413      	add	r3, r2
 8003d8c:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53LX_calc_decoded_timeout_us(
 8003d8e:	8a7b      	ldrh	r3, [r7, #18]
 8003d90:	6979      	ldr	r1, [r7, #20]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f004 fe88 	bl	8008aa8 <VL53LX_calc_decoded_timeout_us>
 8003d98:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8003db6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3720      	adds	r7, #32
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <VL53LX_set_user_zone>:


VL53LX_Error VL53LX_set_user_zone(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *puser_zone)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3318      	adds	r3, #24
 8003dd4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53LX_encode_row_col(
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	7858      	ldrb	r0, [r3, #1]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	7819      	ldrb	r1, [r3, #0]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f203 335b 	addw	r3, r3, #859	; 0x35b
 8003de4:	461a      	mov	r2, r3
 8003de6:	f005 fe94 	bl	8009b12 <VL53LX_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53LX_encode_zone_size(
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	7898      	ldrb	r0, [r3, #2]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	78d9      	ldrb	r1, [r3, #3]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8003df8:	461a      	mov	r2, r3
 8003dfa:	f005 fec9 	bl	8009b90 <VL53LX_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 8003dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <VL53LX_get_mode_mitigation_roi>:


VL53LX_Error VL53LX_get_mode_mitigation_roi(
	VL53LX_DEV              Dev,
	VL53LX_user_zone_t     *pmm_roi)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3318      	adds	r3, #24
 8003e1c:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53LX_decode_row_col(
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f893 33c2 	ldrb.w	r3, [r3, #962]	; 0x3c2
 8003e30:	f107 020e 	add.w	r2, r7, #14
 8003e34:	f107 010d 	add.w	r1, r7, #13
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f008 f883 	bl	800bf44 <VL53LX_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8003e3e:	7bba      	ldrb	r2, [r7, #14]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8003e44:	7b7a      	ldrb	r2, [r7, #13]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f893 33c3 	ldrb.w	r3, [r3, #963]	; 0x3c3
 8003e50:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8003e68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <VL53LX_init_zone_config_histogram_bins>:

VL53LX_Error VL53LX_init_zone_config_histogram_bins(
	VL53LX_zone_config_t   *pdata)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8003e80:	2300      	movs	r3, #0
 8003e82:	73fb      	strb	r3, [r7, #15]
 8003e84:	e008      	b.n	8003e98 <VL53LX_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	for (i = 0; i < pdata->max_zones; i++)
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	3301      	adds	r3, #1
 8003e96:	73fb      	strb	r3, [r7, #15]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	7bfa      	ldrb	r2, [r7, #15]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d3f1      	bcc.n	8003e86 <VL53LX_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 8003ea2:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <VL53LX_set_zone_config>:

VL53LX_Error VL53LX_set_zone_config(
	VL53LX_DEV                 Dev,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b084      	sub	sp, #16
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3318      	adds	r3, #24
 8003ec4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	331c      	adds	r3, #28
 8003ed0:	2214      	movs	r2, #20
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	f010 fa6a 	bl	80143ac <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781a      	ldrb	r2, [r3, #0]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	785a      	ldrb	r2, [r3, #1]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53LX_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	33c2      	adds	r3, #194	; 0xc2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff ffbf 	bl	8003e74 <VL53LX_init_zone_config_histogram_bins>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	785b      	ldrb	r3, [r3, #1]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d104      	bne.n	8003f0c <VL53LX_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8003f0a:	e00f      	b.n	8003f2c <VL53LX_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53LX_MAX_USER_ZONES)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	785b      	ldrb	r3, [r3, #1]
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d807      	bhi.n	8003f24 <VL53LX_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	785b      	ldrb	r3, [r3, #1]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
 8003f22:	e003      	b.n	8003f2c <VL53LX_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2206      	movs	r2, #6
 8003f28:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
				VL53LX_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 8003f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <VL53LX_get_preset_mode_timing_cfg>:
	VL53LX_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	607a      	str	r2, [r7, #4]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	460b      	mov	r3, r1
 8003f46:	72fb      	strb	r3, [r7, #11]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3318      	adds	r3, #24
 8003f50:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8003f52:	7afb      	ldrb	r3, [r7, #11]
 8003f54:	2b21      	cmp	r3, #33	; 0x21
 8003f56:	d030      	beq.n	8003fba <VL53LX_get_preset_mode_timing_cfg+0x82>
 8003f58:	2b21      	cmp	r3, #33	; 0x21
 8003f5a:	dc43      	bgt.n	8003fe4 <VL53LX_get_preset_mode_timing_cfg+0xac>
 8003f5c:	2b1b      	cmp	r3, #27
 8003f5e:	d002      	beq.n	8003f66 <VL53LX_get_preset_mode_timing_cfg+0x2e>
 8003f60:	2b1e      	cmp	r3, #30
 8003f62:	d015      	beq.n	8003f90 <VL53LX_get_preset_mode_timing_cfg+0x58>
 8003f64:	e03e      	b.n	8003fe4 <VL53LX_get_preset_mode_timing_cfg+0xac>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
		*pphasecal_config_timeout_us =
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	601a      	str	r2, [r3, #0]

	break;
 8003f8e:	e02c      	b.n	8003fea <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
		*pphasecal_config_timeout_us =
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	601a      	str	r2, [r3, #0]
	break;
 8003fb8:	e017      	b.n	8003fea <VL53LX_get_preset_mode_timing_cfg+0xb2>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
		*pdss_config__target_total_rate_mcps =
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
		*pphasecal_config_timeout_us =
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
		*pmm_config_timeout_us =
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*prange_config_timeout_us =
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	601a      	str	r2, [r3, #0]
	break;
 8003fe2:	e002      	b.n	8003fea <VL53LX_get_preset_mode_timing_cfg+0xb2>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8003fe4:	23fc      	movs	r3, #252	; 0xfc
 8003fe6:	75fb      	strb	r3, [r7, #23]
		break;
 8003fe8:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8003fea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <VL53LX_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b096      	sub	sp, #88	; 0x58
 8003ffe:	af06      	add	r7, sp, #24
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	607b      	str	r3, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	72fb      	strb	r3, [r7, #11]
 8004008:	4613      	mov	r3, r2
 800400a:	813b      	strh	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800400c:	2300      	movs	r3, #0
 800400e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53LX_LLDriverData_t *pdev =
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3318      	adds	r3, #24
 8004016:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800401e:	637b      	str	r3, [r7, #52]	; 0x34
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_hist_post_process_config_t *phistpostprocess =
 8004020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004022:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004026:	633b      	str	r3, [r7, #48]	; 0x30
			&(pdev->histpostprocess);

	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8004028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402a:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	f203 331e 	addw	r3, r3, #798	; 0x31e
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004042:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8004046:	623b      	str	r3, [r7, #32]
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8004048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800404e:	61fb      	str	r3, [r7, #28]
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004052:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004056:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8004058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405a:	33c2      	adds	r3, #194	; 0xc2
 800405c:	617b      	str	r3, [r7, #20]
	VL53LX_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	33f8      	adds	r3, #248	; 0xf8
 8004062:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	7afa      	ldrb	r2, [r7, #11]
 8004068:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800406e:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8004070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004072:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004074:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004078:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800407a:	615a      	str	r2, [r3, #20]



	VL53LX_init_ll_driver_state(
 800407c:	2103      	movs	r1, #3
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f003 fc2a 	bl	80078d8 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8004084:	7afb      	ldrb	r3, [r7, #11]
 8004086:	2b21      	cmp	r3, #33	; 0x21
 8004088:	d02e      	beq.n	80040e8 <VL53LX_set_preset_mode+0xee>
 800408a:	2b21      	cmp	r3, #33	; 0x21
 800408c:	dc40      	bgt.n	8004110 <VL53LX_set_preset_mode+0x116>
 800408e:	2b1b      	cmp	r3, #27
 8004090:	d002      	beq.n	8004098 <VL53LX_set_preset_mode+0x9e>
 8004092:	2b1e      	cmp	r3, #30
 8004094:	d014      	beq.n	80040c0 <VL53LX_set_preset_mode+0xc6>
 8004096:	e03b      	b.n	8004110 <VL53LX_set_preset_mode+0x116>
	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:

		status = VL53LX_preset_mode_histogram_long_range(
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	9304      	str	r3, [sp, #16]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	9303      	str	r3, [sp, #12]
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	9302      	str	r3, [sp, #8]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	9301      	str	r3, [sp, #4]
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040b4:	f003 f941 	bl	800733a <VL53LX_preset_mode_histogram_long_range>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80040be:	e02b      	b.n	8004118 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53LX_preset_mode_histogram_medium_range(
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	9304      	str	r3, [sp, #16]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	9303      	str	r3, [sp, #12]
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	9302      	str	r3, [sp, #8]
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	9301      	str	r3, [sp, #4]
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040dc:	f003 f9cb 	bl	8007476 <VL53LX_preset_mode_histogram_medium_range>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80040e6:	e017      	b.n	8004118 <VL53LX_set_preset_mode+0x11e>

	case VL53LX_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53LX_preset_mode_histogram_short_range(
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	9304      	str	r3, [sp, #16]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	9303      	str	r3, [sp, #12]
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	9302      	str	r3, [sp, #8]
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004100:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004102:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004104:	f003 fa55 	bl	80075b2 <VL53LX_preset_mode_histogram_short_range>
 8004108:	4603      	mov	r3, r0
 800410a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800410e:	e003      	b.n	8004118 <VL53LX_set_preset_mode+0x11e>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8004110:	23fc      	movs	r3, #252	; 0xfc
 8004112:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		break;
 8004116:	bf00      	nop

	}



	if (status == VL53LX_ERROR_NONE) {
 8004118:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800411c:	2b00      	cmp	r3, #0
 800411e:	d105      	bne.n	800412c <VL53LX_set_preset_mode+0x132>

		pstatic->dss_config__target_total_rate_mcps =
 8004120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004122:	893a      	ldrh	r2, [r7, #8]
 8004124:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8004126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004128:	893a      	ldrh	r2, [r7, #8]
 800412a:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53LX_ERROR_NONE)
 800412c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004130:	2b00      	cmp	r3, #0
 8004132:	d108      	bne.n	8004146 <VL53LX_set_preset_mode+0x14c>
		status =
			VL53LX_set_timeouts_us(
 8004134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f7ff fd9c 	bl	8003c78 <VL53LX_set_timeouts_us>
 8004140:	4603      	mov	r3, r0
 8004142:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53LX_ERROR_NONE)
 8004146:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <VL53LX_set_preset_mode+0x162>
		status =
			VL53LX_set_inter_measurement_period_ms(
 800414e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff fd63 	bl	8003c1c <VL53LX_set_inter_measurement_period_ms>
 8004156:	4603      	mov	r3, r0
 8004158:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 800415c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8004162:	3301      	adds	r3, #1
 8004164:	b2da      	uxtb	r2, r3
 8004166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004168:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 800416c:	4619      	mov	r1, r3
 800416e:	4610      	mov	r0, r2
 8004170:	f003 ffc8 	bl	8008104 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 8004174:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004178:	4618      	mov	r0, r3
 800417a:	3740      	adds	r7, #64	; 0x40
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <VL53LX_init_and_start_range>:

VL53LX_Error VL53LX_init_and_start_range(
	VL53LX_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53LX_DeviceConfigLevel       device_config_level)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b0d2      	sub	sp, #328	; 0x148
 8004184:	af00      	add	r7, sp, #0
 8004186:	1d3b      	adds	r3, r7, #4
 8004188:	6018      	str	r0, [r3, #0]
 800418a:	4608      	mov	r0, r1
 800418c:	4611      	mov	r1, r2
 800418e:	1cfb      	adds	r3, r7, #3
 8004190:	4602      	mov	r2, r0
 8004192:	701a      	strb	r2, [r3, #0]
 8004194:	1cbb      	adds	r3, r7, #2
 8004196:	460a      	mov	r2, r1
 8004198:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800419a:	2300      	movs	r3, #0
 800419c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80041a0:	1d3b      	adds	r3, r7, #4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3318      	adds	r3, #24
 80041a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53LX_LLDriverResults_t  *pres =
 80041aa:	1d3b      	adds	r3, r7, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80041b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 80041b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80041ba:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80041be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53LX_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 80041c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80041c6:	3348      	adds	r3, #72	; 0x48
 80041c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80041cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80041d0:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80041d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80041d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80041dc:	f203 331e 	addw	r3, r3, #798	; 0x31e
 80041e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80041e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80041e8:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80041ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80041f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80041f4:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80041f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53LX_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80041fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004200:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004204:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53LX_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8004208:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800420c:	332c      	adds	r3, #44	; 0x2c
 800420e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 8004212:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004216:	3348      	adds	r3, #72	; 0x48
 8004218:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800421c:	f107 030c 	add.w	r3, r7, #12
 8004220:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8004236:	2300      	movs	r3, #0
 8004238:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 800423c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004240:	1cfa      	adds	r2, r7, #3
 8004242:	7812      	ldrb	r2, [r2, #0]
 8004244:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8004246:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800424a:	791b      	ldrb	r3, [r3, #4]
 800424c:	b25b      	sxtb	r3, r3
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	b25a      	sxtb	r2, r3
		VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8004254:	1cfb      	adds	r3, r7, #3
 8004256:	f993 3000 	ldrsb.w	r3, [r3]
 800425a:	4313      	orrs	r3, r2
 800425c:	b25b      	sxtb	r3, r3
 800425e:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8004260:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004264:	711a      	strb	r2, [r3, #4]


	status =
		VL53LX_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 8004266:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800426a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53LX_set_user_zone(
 800426e:	3336      	adds	r3, #54	; 0x36
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004276:	4413      	add	r3, r2
 8004278:	1d9a      	adds	r2, r3, #6
 800427a:	1d3b      	adds	r3, r7, #4
 800427c:	4611      	mov	r1, r2
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	f7ff fd9f 	bl	8003dc2 <VL53LX_set_user_zone>
 8004284:	4603      	mov	r3, r0
 8004286:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 800428a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800428e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d016      	beq.n	80042c4 <VL53LX_init_and_start_range+0x144>
		status =
		VL53LX_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id])
 8004296:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800429a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800429e:	461a      	mov	r2, r3
		VL53LX_set_zone_dss_config(
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80042ac:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80042b0:	4413      	add	r3, r2
 80042b2:	1c9a      	adds	r2, r3, #2
 80042b4:	1d3b      	adds	r3, r7, #4
 80042b6:	4611      	mov	r1, r2
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	f001 fad7 	bl	800586c <VL53LX_set_zone_dss_config>
 80042be:	4603      	mov	r3, r0
 80042c0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 80042c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80042c8:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10d      	bne.n	80042f0 <VL53LX_init_and_start_range+0x170>
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 80042d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80042d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d107      	bne.n	80042f0 <VL53LX_init_and_start_range+0x170>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 80042e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80042e4:	f8b3 22a4 	ldrh.w	r2, [r3, #676]	; 0x2a4
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80042e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80042ec:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 80042f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80042f4:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80042f8:	3312      	adds	r3, #18
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2bff      	cmp	r3, #255	; 0xff
 80042fe:	d106      	bne.n	800430e <VL53LX_init_and_start_range+0x18e>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8004300:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004304:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004308:	3312      	adds	r3, #18
 800430a:	2200      	movs	r2, #0
 800430c:	701a      	strb	r2, [r3, #0]


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800430e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004312:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004316:	3311      	adds	r3, #17
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d133      	bne.n	8004386 <VL53LX_init_and_start_range+0x206>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800431e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004322:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8004326:	3312      	adds	r3, #18
 8004328:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800432a:	2b00      	cmp	r3, #0
 800432c:	d12b      	bne.n	8004386 <VL53LX_init_and_start_range+0x206>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800432e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004332:	f893 2320 	ldrb.w	r2, [r3, #800]	; 0x320
		pdev->low_power_auto_data.saved_interrupt_config =
 8004336:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800433a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800433e:	3313      	adds	r3, #19
 8004340:	701a      	strb	r2, [r3, #0]

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8004342:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004346:	2220      	movs	r2, #32
 8004348:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		if ((pdev->dyn_cfg.system__sequence_config & (
 800434c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004350:	f893 335d 	ldrb.w	r3, [r3, #861]	; 0x35d
 8004354:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004358:	2b00      	cmp	r3, #0
 800435a:	d109      	bne.n	8004370 <VL53LX_init_and_start_range+0x1f0>
			VL53LX_SEQUENCE_MM1_EN | VL53LX_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 800435c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004360:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004364:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 8004366:	b21a      	sxth	r2, r3
 8004368:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800436c:	825a      	strh	r2, [r3, #18]
 800436e:	e003      	b.n	8004378 <VL53LX_init_and_start_range+0x1f8>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 8004370:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004374:	2200      	movs	r2, #0
 8004376:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 8004378:	1cbb      	adds	r3, r7, #2
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b04      	cmp	r3, #4
 800437e:	d802      	bhi.n	8004386 <VL53LX_init_and_start_range+0x206>
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8004380:	1cbb      	adds	r3, r7, #2
 8004382:	2205      	movs	r2, #5
 8004384:	701a      	strb	r2, [r3, #0]
				VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004386:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800438a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800438e:	3311      	adds	r3, #17
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d114      	bne.n	80043c0 <VL53LX_init_and_start_range+0x240>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8004396:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800439a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800439e:	3312      	adds	r3, #18
 80043a0:	781b      	ldrb	r3, [r3, #0]
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d10c      	bne.n	80043c0 <VL53LX_init_and_start_range+0x240>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 80043a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80043aa:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80043ae:	3313      	adds	r3, #19
 80043b0:	781a      	ldrb	r2, [r3, #0]
		pdev->gen_cfg.system__interrupt_config_gpio =
 80043b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80043b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


		device_config_level = VL53LX_DEVICECONFIGLEVEL_FULL;
 80043ba:	1cbb      	adds	r3, r7, #2
 80043bc:	2206      	movs	r2, #6
 80043be:	701a      	strb	r2, [r3, #0]





	if (status == VL53LX_ERROR_NONE)
 80043c0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <VL53LX_init_and_start_range+0x256>
		status = VL53LX_save_cfg_data(Dev);
 80043c8:	1d3b      	adds	r3, r7, #4
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	f005 fe8e 	bl	800a0ec <VL53LX_save_cfg_data>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 80043d6:	1cbb      	adds	r3, r7, #2
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	3b01      	subs	r3, #1
 80043dc:	2b05      	cmp	r3, #5
 80043de:	d827      	bhi.n	8004430 <VL53LX_init_and_start_range+0x2b0>
 80043e0:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <VL53LX_init_and_start_range+0x268>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	08004429 	.word	0x08004429
 80043ec:	08004421 	.word	0x08004421
 80043f0:	08004419 	.word	0x08004419
 80043f4:	08004411 	.word	0x08004411
 80043f8:	08004409 	.word	0x08004409
 80043fc:	08004401 	.word	0x08004401
	case VL53LX_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53LX_STATIC_NVM_MANAGED_I2C_INDEX;
 8004400:	2301      	movs	r3, #1
 8004402:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004406:	e017      	b.n	8004438 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53LX_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8004408:	230d      	movs	r3, #13
 800440a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800440e:	e013      	b.n	8004438 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53LX_STATIC_CONFIG_I2C_INDEX;
 8004410:	2324      	movs	r3, #36	; 0x24
 8004412:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004416:	e00f      	b.n	8004438 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53LX_GENERAL_CONFIG_I2C_INDEX;
 8004418:	2344      	movs	r3, #68	; 0x44
 800441a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800441e:	e00b      	b.n	8004438 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53LX_TIMING_CONFIG_I2C_INDEX;
 8004420:	235a      	movs	r3, #90	; 0x5a
 8004422:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004426:	e007      	b.n	8004438 <VL53LX_init_and_start_range+0x2b8>
	case VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53LX_DYNAMIC_CONFIG_I2C_INDEX;
 8004428:	2371      	movs	r3, #113	; 0x71
 800442a:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800442e:	e003      	b.n	8004438 <VL53LX_init_and_start_range+0x2b8>
	default:
		i2c_index = VL53LX_SYSTEM_CONTROL_I2C_INDEX;
 8004430:	2383      	movs	r3, #131	; 0x83
 8004432:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8004436:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 8004438:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800443c:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8004440:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 8004444:	f107 030c 	add.w	r3, r7, #12
 8004448:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 800444c:	2300      	movs	r3, #0
 800444e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8004452:	e00b      	b.n	800446c <VL53LX_init_and_start_range+0x2ec>
		*pbuffer++ = 0;
 8004454:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800445e:	2200      	movs	r2, #0
 8004460:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 8004462:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8004466:	3301      	adds	r3, #1
 8004468:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800446c:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8004470:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8004474:	429a      	cmp	r2, r3
 8004476:	d3ed      	bcc.n	8004454 <VL53LX_init_and_start_range+0x2d4>



	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_FULL &&
 8004478:	1cbb      	adds	r3, r7, #2
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b05      	cmp	r3, #5
 800447e:	d917      	bls.n	80044b0 <VL53LX_init_and_start_range+0x330>
 8004480:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004484:	2b00      	cmp	r3, #0
 8004486:	d113      	bne.n	80044b0 <VL53LX_init_and_start_range+0x330>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004488:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800448c:	f1c3 0301 	rsb	r3, r3, #1
 8004490:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004494:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_nvm_managed(
 8004498:	f107 020c 	add.w	r2, r7, #12
 800449c:	4413      	add	r3, r2
 800449e:	461a      	mov	r2, r3
 80044a0:	210b      	movs	r1, #11
 80044a2:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80044a6:	f00a fdad 	bl	800f004 <VL53LX_i2c_encode_static_nvm_managed>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80044b0:	1cbb      	adds	r3, r7, #2
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d917      	bls.n	80044e8 <VL53LX_init_and_start_range+0x368>
 80044b8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d113      	bne.n	80044e8 <VL53LX_init_and_start_range+0x368>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80044c0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80044c4:	f1c3 030d 	rsb	r3, r3, #13
 80044c8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80044cc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_customer_nvm_managed(
 80044d0:	f107 020c 	add.w	r2, r7, #12
 80044d4:	4413      	add	r3, r2
 80044d6:	461a      	mov	r2, r3
 80044d8:	2117      	movs	r1, #23
 80044da:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80044de:	f00a fe6d 	bl	800f1bc <VL53LX_i2c_encode_customer_nvm_managed>
 80044e2:	4603      	mov	r3, r0
 80044e4:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 80044e8:	1cbb      	adds	r3, r7, #2
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d917      	bls.n	8004520 <VL53LX_init_and_start_range+0x3a0>
 80044f0:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d113      	bne.n	8004520 <VL53LX_init_and_start_range+0x3a0>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80044f8:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80044fc:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8004500:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_static_config(
				pstatic,
				VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004504:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_static_config(
 8004508:	f107 020c 	add.w	r2, r7, #12
 800450c:	4413      	add	r3, r2
 800450e:	461a      	mov	r2, r3
 8004510:	2120      	movs	r1, #32
 8004512:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8004516:	f00a ffb3 	bl	800f480 <VL53LX_i2c_encode_static_config>
 800451a:	4603      	mov	r3, r0
 800451c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8004520:	1cbb      	adds	r3, r7, #2
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b02      	cmp	r3, #2
 8004526:	d917      	bls.n	8004558 <VL53LX_init_and_start_range+0x3d8>
 8004528:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800452c:	2b00      	cmp	r3, #0
 800452e:	d113      	bne.n	8004558 <VL53LX_init_and_start_range+0x3d8>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004530:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004534:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8004538:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_general_config(
				pgeneral,
				VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800453c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_general_config(
 8004540:	f107 020c 	add.w	r2, r7, #12
 8004544:	4413      	add	r3, r2
 8004546:	461a      	mov	r2, r3
 8004548:	2116      	movs	r1, #22
 800454a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800454e:	f00b f87a 	bl	800f646 <VL53LX_i2c_encode_general_config>
 8004552:	4603      	mov	r3, r0
 8004554:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8004558:	1cbb      	adds	r3, r7, #2
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d917      	bls.n	8004590 <VL53LX_init_and_start_range+0x410>
 8004560:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004564:	2b00      	cmp	r3, #0
 8004566:	d113      	bne.n	8004590 <VL53LX_init_and_start_range+0x410>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004568:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800456c:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8004570:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_timing_config(
				ptiming,
				VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004574:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_timing_config(
 8004578:	f107 020c 	add.w	r2, r7, #12
 800457c:	4413      	add	r3, r2
 800457e:	461a      	mov	r2, r3
 8004580:	2117      	movs	r1, #23
 8004582:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8004586:	f00b f8e2 	bl	800f74e <VL53LX_i2c_encode_timing_config>
 800458a:	4603      	mov	r3, r0
 800458c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53LX_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8004590:	1cbb      	adds	r3, r7, #2
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d036      	beq.n	8004606 <VL53LX_init_and_start_range+0x486>
 8004598:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800459c:	2b00      	cmp	r3, #0
 800459e:	d132      	bne.n	8004606 <VL53LX_init_and_start_range+0x486>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80045a0:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80045a4:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 80045a8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53LX_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 80045ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80045b0:	791b      	ldrb	r3, [r3, #4]
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d017      	beq.n	80045ea <VL53LX_init_and_start_range+0x46a>
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045be:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045ca:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 80045cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d0:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 80045d2:	f043 0301 	orr.w	r3, r3, #1
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045dc:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e2:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 80045e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045e8:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53LX_i2c_encode_dynamic_config(
				pdynamic,
				VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80045ea:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_dynamic_config(
 80045ee:	f107 020c 	add.w	r2, r7, #12
 80045f2:	4413      	add	r3, r2
 80045f4:	461a      	mov	r2, r3
 80045f6:	2112      	movs	r1, #18
 80045f8:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80045fc:	f00b f929 	bl	800f852 <VL53LX_i2c_encode_dynamic_config>
 8004600:	4603      	mov	r3, r0
 8004602:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53LX_ERROR_NONE) {
 8004606:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800460a:	2b00      	cmp	r3, #0
 800460c:	d113      	bne.n	8004636 <VL53LX_init_and_start_range+0x4b6>

		i2c_buffer_offset_bytes =
 800460e:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8004612:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8004616:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53LX_i2c_encode_system_control(
				psystem,
				VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800461a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53LX_i2c_encode_system_control(
 800461e:	f107 020c 	add.w	r2, r7, #12
 8004622:	4413      	add	r3, r2
 8004624:	461a      	mov	r2, r3
 8004626:	2105      	movs	r1, #5
 8004628:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800462c:	f00b f996 	bl	800f95c <VL53LX_i2c_encode_system_control>
 8004630:	4603      	mov	r3, r0
 8004632:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53LX_ERROR_NONE) {
 8004636:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10c      	bne.n	8004658 <VL53LX_init_and_start_range+0x4d8>
		status =
			VL53LX_WriteMulti(
 800463e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8004642:	f107 020c 	add.w	r2, r7, #12
 8004646:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 800464a:	1d38      	adds	r0, r7, #4
 800464c:	6800      	ldr	r0, [r0, #0]
 800464e:	f00c fc55 	bl	8010efc <VL53LX_WriteMulti>
 8004652:	4603      	mov	r3, r0
 8004654:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53LX_ERROR_NONE)
 8004658:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <VL53LX_init_and_start_range+0x4ee>
		status = VL53LX_update_ll_driver_rd_state(Dev);
 8004660:	1d3b      	adds	r3, r7, #4
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	f003 f968 	bl	8007938 <VL53LX_update_ll_driver_rd_state>
 8004668:	4603      	mov	r3, r0
 800466a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53LX_ERROR_NONE)
 800466e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <VL53LX_init_and_start_range+0x504>
		status = VL53LX_update_ll_driver_cfg_state(Dev);
 8004676:	1d3b      	adds	r3, r7, #4
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	f003 fafd 	bl	8007c78 <VL53LX_update_ll_driver_cfg_state>
 800467e:	4603      	mov	r3, r0
 8004680:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 8004684:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8004688:	4618      	mov	r0, r3
 800468a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop

08004694 <VL53LX_stop_range>:


VL53LX_Error VL53LX_stop_range(
	VL53LX_DEV     Dev)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800469c:	2300      	movs	r3, #0
 800469e:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev =
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3318      	adds	r3, #24
 80046a4:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80046ac:	60fb      	str	r3, [r7, #12]
			VL53LXDevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80046b4:	b25b      	sxtb	r3, r3
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	b25b      	sxtb	r3, r3
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80046bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046c0:	b25b      	sxtb	r3, r3
 80046c2:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
			 VL53LX_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53LX_set_system_control(
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80046d0:	4619      	mov	r1, r3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f00b f97d 	bl	800f9d2 <VL53LX_set_system_control>
 80046d8:	4603      	mov	r3, r0
 80046da:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
				VL53LX_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53LX_init_ll_driver_state(
 80046ee:	2103      	movs	r1, #3
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f003 f8f1 	bl	80078d8 <VL53LX_init_ll_driver_state>
			Dev,
			VL53LX_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 80046fc:	3301      	adds	r3, #1
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8004706:	4619      	mov	r1, r3
 8004708:	4610      	mov	r0, r2
 800470a:	f003 fcfb 	bl	8008104 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f003 fd2d 	bl	800816e <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800471a:	3311      	adds	r3, #17
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d102      	bne.n	8004728 <VL53LX_stop_range+0x94>
		VL53LX_low_power_auto_data_stop_range(Dev);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f006 fddc 	bl	800b2e0 <VL53LX_low_power_auto_data_stop_range>

	return status;
 8004728:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <VL53LX_get_measurement_results>:


VL53LX_Error VL53LX_get_measurement_results(
	VL53LX_DEV                     Dev,
	VL53LX_DeviceResultsLevel      device_results_level)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b0c8      	sub	sp, #288	; 0x120
 8004738:	af00      	add	r7, sp, #0
 800473a:	1d3b      	adds	r3, r7, #4
 800473c:	6018      	str	r0, [r3, #0]
 800473e:	460a      	mov	r2, r1
 8004740:	1cfb      	adds	r3, r7, #3
 8004742:	701a      	strb	r2, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004744:	2300      	movs	r3, #0
 8004746:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800474a:	1d3b      	adds	r3, r7, #4
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3318      	adds	r3, #24
 8004750:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53LX_MAX_I2C_XFER_SIZE];

	VL53LX_system_results_t   *psystem_results = &(pdev->sys_results);
 8004754:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004758:	f203 3366 	addw	r3, r3, #870	; 0x366
 800475c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53LX_core_results_t     *pcore_results   = &(pdev->core_results);
 8004760:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004764:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8004768:	3318      	adds	r3, #24
 800476a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53LX_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800476e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004772:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8004776:	331c      	adds	r3, #28
 8004778:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53LX_SYSTEM_RESULTS_I2C_INDEX;
 800477c:	2388      	movs	r3, #136	; 0x88
 800477e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 800478e:	1cfb      	adds	r3, r7, #3
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d008      	beq.n	80047a8 <VL53LX_get_measurement_results+0x74>
 8004796:	2b02      	cmp	r3, #2
 8004798:	d10d      	bne.n	80047b6 <VL53LX_get_measurement_results+0x82>
	case VL53LX_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800479a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800479e:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 80047a2:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_DEBUG_RESULTS_I2C_INDEX +
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80047a6:	e00a      	b.n	80047be <VL53LX_get_measurement_results+0x8a>
	case VL53LX_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 80047a8:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80047ac:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 80047b0:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53LX_CORE_RESULTS_I2C_INDEX +
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 80047b4:	e003      	b.n	80047be <VL53LX_get_measurement_results+0x8a>
	default:
		i2c_buffer_size_bytes =
 80047b6:	232c      	movs	r3, #44	; 0x2c
 80047b8:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 80047bc:	bf00      	nop
	}



	if (status == VL53LX_ERROR_NONE)
 80047be:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10c      	bne.n	80047e0 <VL53LX_get_measurement_results+0xac>
		status =
			VL53LX_ReadMulti(
 80047c6:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80047ca:	f107 0208 	add.w	r2, r7, #8
 80047ce:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 80047d2:	1d38      	adds	r0, r7, #4
 80047d4:	6800      	ldr	r0, [r0, #0]
 80047d6:	f00c fbc7 	bl	8010f68 <VL53LX_ReadMulti>
 80047da:	4603      	mov	r3, r0
 80047dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_FULL &&
 80047e0:	1cfb      	adds	r3, r7, #3
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d917      	bls.n	8004818 <VL53LX_get_measurement_results+0xe4>
 80047e8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d113      	bne.n	8004818 <VL53LX_get_measurement_results+0xe4>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80047f0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80047f4:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 80047f8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_debug_results(
				VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80047fc:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_debug_results(
 8004800:	f107 0208 	add.w	r2, r7, #8
 8004804:	4413      	add	r3, r2
 8004806:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800480a:	4619      	mov	r1, r3
 800480c:	2038      	movs	r0, #56	; 0x38
 800480e:	f00b fa5e 	bl	800fcce <VL53LX_i2c_decode_debug_results>
 8004812:	4603      	mov	r3, r0
 8004814:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53LX_DEVICERESULTSLEVEL_UPTO_CORE &&
 8004818:	1cfb      	adds	r3, r7, #3
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d017      	beq.n	8004850 <VL53LX_get_measurement_results+0x11c>
 8004820:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8004824:	2b00      	cmp	r3, #0
 8004826:	d113      	bne.n	8004850 <VL53LX_get_measurement_results+0x11c>
		status == VL53LX_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004828:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800482c:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8004830:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53LX_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53LX_i2c_decode_core_results(
				VL53LX_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8004834:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_core_results(
 8004838:	f107 0208 	add.w	r2, r7, #8
 800483c:	4413      	add	r3, r2
 800483e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004842:	4619      	mov	r1, r3
 8004844:	2021      	movs	r0, #33	; 0x21
 8004846:	f00b f9e1 	bl	800fc0c <VL53LX_i2c_decode_core_results>
 800484a:	4603      	mov	r3, r0
 800484c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53LX_ERROR_NONE) {
 8004850:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8004854:	2b00      	cmp	r3, #0
 8004856:	d110      	bne.n	800487a <VL53LX_get_measurement_results+0x146>

		i2c_buffer_offset_bytes = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53LX_i2c_decode_system_results(
				VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800485e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53LX_i2c_decode_system_results(
 8004862:	f107 0208 	add.w	r2, r7, #8
 8004866:	4413      	add	r3, r2
 8004868:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800486c:	4619      	mov	r1, r3
 800486e:	202c      	movs	r0, #44	; 0x2c
 8004870:	f00b f8d6 	bl	800fa20 <VL53LX_i2c_decode_system_results>
 8004874:	4603      	mov	r3, r0
 8004876:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800487a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800487e:	4618      	mov	r0, r3
 8004880:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <VL53LX_get_device_results>:

VL53LX_Error VL53LX_get_device_results(
	VL53LX_DEV                    Dev,
	VL53LX_DeviceResultsLevel     device_results_level,
	VL53LX_range_results_t       *prange_results)
{
 8004888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800488c:	b0a0      	sub	sp, #128	; 0x80
 800488e:	af06      	add	r7, sp, #24
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	460b      	mov	r3, r1
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8004898:	2300      	movs	r3, #0
 800489a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53LX_LLDriverData_t *pdev =
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3318      	adds	r3, #24
 80048a2:	663b      	str	r3, [r7, #96]	; 0x60
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80048aa:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_range_results_t   *presults =
 80048ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ae:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53LX_zone_objects_t    *pobjects =
 80048b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048b2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80048b6:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53LX_p_003[0]);
	VL53LX_ll_driver_state_t *pstate   =
 80048b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ba:	332c      	adds	r3, #44	; 0x2c
 80048bc:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53LX_zone_config_t     *pzone_cfg =
 80048be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048c0:	33c2      	adds	r3, #194	; 0xc2
 80048c2:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53LX_zone_hist_info_t  *phist_info =
 80048c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c6:	f503 734c 	add.w	r3, r3, #816	; 0x330
 80048ca:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53LX_p_003[0]);

	VL53LX_dmax_calibration_data_t   dmax_cal;
	VL53LX_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 80048cc:	f107 0314 	add.w	r3, r7, #20
 80048d0:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80048d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048d4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80048d8:	643b      	str	r3, [r7, #64]	; 0x40
	VL53LX_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 80048da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80048e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53LX_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 80048e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048e4:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 80048e8:	3310      	adds	r3, #16
 80048ea:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_histogram_bin_data_t *pHD = &(pdev->hist_data);
 80048ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048f2:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_customer_nvm_managed_t *pN = &(pdev->customer);
 80048f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048f6:	3348      	adds	r3, #72	; 0x48
 80048f8:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_zone_histograms_t *pZH = &(pres->zone_hists);
 80048fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048fc:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53LX_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 8004902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004904:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8004908:	331c      	adds	r3, #28
 800490a:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_range_data_t *pdata;

	LOG_FUNCTION_START("");


	if ((pdev->sys_ctrl.system__mode_start &
 800490c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800490e:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 8290 	beq.w	8004e3c <VL53LX_get_device_results+0x5b4>
		 VL53LX_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53LX_get_histogram_bin_data(
 800491c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800491e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004922:	4619      	mov	r1, r3
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 fbcb 	bl	80050c0 <VL53LX_get_histogram_bin_data>
 800492a:	4603      	mov	r3, r0
 800492c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53LX_ERROR_NONE &&
 8004930:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004934:	2b00      	cmp	r3, #0
 8004936:	d118      	bne.n	800496a <VL53LX_get_device_results+0xe2>
			pHD->number_of_ambient_bins == 0) {
 8004938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493a:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53LX_ERROR_NONE &&
 800493c:	2b00      	cmp	r3, #0
 800493e:	d114      	bne.n	800496a <VL53LX_get_device_results+0xe2>
			zid = pdev->ll_state.rd_zone_id;
 8004940:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004942:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
			&(pZH->VL53LX_p_003[zid]),
 800494a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			status = VL53LX_hist_copy_and_scale_ambient_info(
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004952:	4413      	add	r3, r2
 8004954:	1d1a      	adds	r2, r3, #4
 8004956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004958:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800495c:	4619      	mov	r1, r3
 800495e:	4610      	mov	r0, r2
 8004960:	f004 f976 	bl	8008c50 <VL53LX_hist_copy_and_scale_ambient_info>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53LX_ERROR_NONE)
 800496a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800496e:	2b00      	cmp	r3, #0
 8004970:	f040 8206 	bne.w	8004d80 <VL53LX_get_device_results+0x4f8>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8004974:	f107 0313 	add.w	r3, r7, #19
 8004978:	4619      	mov	r1, r3
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f006 fdd5 	bl	800b52a <VL53LX_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8004980:	7cfb      	ldrb	r3, [r7, #19]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <VL53LX_get_device_results+0x102>
			histo_merge_nb = 1;
 8004986:	2301      	movs	r3, #1
 8004988:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 800498a:	7cfb      	ldrb	r3, [r7, #19]
 800498c:	3b01      	subs	r3, #1
 800498e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (pdev->tuning_parms.tp_hist_merge == 1)
 8004992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004994:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8004998:	2b01      	cmp	r3, #1
 800499a:	d107      	bne.n	80049ac <VL53LX_get_device_results+0x124>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 800499c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	3202      	adds	r2, #2
 80049a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 80049a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049aa:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 80049ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049ae:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 80049b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b4:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53LX_calc_crosstalk_plane_offset_with_margin(
 80049b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049bc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80049c0:	4619      	mov	r1, r3
 80049c2:	4610      	mov	r0, r2
 80049c4:	f004 f84a 	bl	8008a5c <VL53LX_calc_crosstalk_plane_offset_with_margin>
 80049c8:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 80049ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049cc:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80049ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80049d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d6:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80049d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049da:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80049de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e0:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 80049e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e4:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 80049e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049e8:	f883 2255 	strb.w	r2, [r3, #597]	; 0x255
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 80049ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ee:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 80049f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049f2:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 80049f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f8:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 80049fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049fc:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8004a00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a02:	f8b3 22fe 	ldrh.w	r2, [r3, #766]	; 0x2fe
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8004a06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a08:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8004a0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a0e:	f893 2331 	ldrb.w	r2, [r3, #817]	; 0x331
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8004a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a14:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8004a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a1a:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8004a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a20:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8004a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a24:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8004a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a2a:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8004a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2e:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8004a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a32:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 8004a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a36:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8004a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a3a:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53LX_copy_rtn_good_spads_to_buffer(
 8004a3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a3e:	f203 3292 	addw	r2, r3, #914	; 0x392
 8004a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a44:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	f003 fa3a 	bl	8007ec4 <VL53LX_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8004a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a52:	795b      	ldrb	r3, [r3, #5]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d002      	beq.n	8004a5e <VL53LX_get_device_results+0x1d6>
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d02e      	beq.n	8004aba <VL53LX_get_device_results+0x232>
 8004a5c:	e03d      	b.n	8004ada <VL53LX_get_device_results+0x252>

		case VL53LX_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8004a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a60:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8004a64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			VL53LX_hist_combine_mm1_mm2_offsets(
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8004a74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a76:	f893 e3c2 	ldrb.w	lr, [r3, #962]	; 0x3c2
 8004a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a7c:	f893 83c3 	ldrb.w	r8, [r3, #963]	; 0x3c3
 8004a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a82:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8004a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a88:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 8004a8c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004a8e:	319c      	adds	r1, #156	; 0x9c
 8004a90:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004a92:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 8004a96:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 8004a9a:	b2a4      	uxth	r4, r4
 8004a9c:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8004a9e:	351c      	adds	r5, #28
 8004aa0:	9505      	str	r5, [sp, #20]
 8004aa2:	9404      	str	r4, [sp, #16]
 8004aa4:	9003      	str	r0, [sp, #12]
 8004aa6:	9102      	str	r1, [sp, #8]
 8004aa8:	9201      	str	r2, [sp, #4]
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	4643      	mov	r3, r8
 8004aae:	4672      	mov	r2, lr
 8004ab0:	4661      	mov	r1, ip
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	f004 ff7d 	bl	80099b2 <VL53LX_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 8004ab8:	e013      	b.n	8004ae2 <VL53LX_get_device_results+0x25a>
		case VL53LX_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8004aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004abc:	331c      	adds	r3, #28
 8004abe:	4619      	mov	r1, r3
 8004ac0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004ac2:	f7fe fa4f 	bl	8002f64 <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 8004ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ac8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	b21a      	sxth	r2, r3
 8004ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad6:	839a      	strh	r2, [r3, #28]
		break;
 8004ad8:	e003      	b.n	8004ae2 <VL53LX_get_device_results+0x25a>
		default:
			pHP->range_offset_mm = 0;
 8004ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004adc:	2200      	movs	r2, #0
 8004ade:	839a      	strh	r2, [r3, #28]
		break;
 8004ae0:	bf00      	nop

		}



		if (status != VL53LX_ERROR_NONE)
 8004ae2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f040 814c 	bne.w	8004d84 <VL53LX_get_device_results+0x4fc>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53LX_calc_max_effective_spads(
 8004aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aee:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 8004af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af4:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 8004af8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004afa:	f503 72ec 	add.w	r2, r3, #472	; 0x1d8
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8004afe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b00:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		VL53LX_calc_max_effective_spads(
 8004b04:	b29c      	uxth	r4, r3
 8004b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b08:	f203 236a 	addw	r3, r3, #618	; 0x26a
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	4623      	mov	r3, r4
 8004b10:	f005 f8f4 	bl	8009cfc <VL53LX_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53LX_get_dmax_calibration_data(
 8004b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b16:	799b      	ldrb	r3, [r3, #6]
 8004b18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 fee2 	bl	80058e6 <VL53LX_get_dmax_calibration_data>
 8004b22:	4603      	mov	r3, r0
 8004b24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				Dev,
				pdev->dmax_mode,
				pdmax_cal);


		if (status != VL53LX_ERROR_NONE)
 8004b28:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f040 812b 	bne.w	8004d88 <VL53LX_get_device_results+0x500>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_ipp_hist_process_data(
 8004b32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b34:	f503 7515 	add.w	r5, r3, #596	; 0x254
 8004b38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b3a:	f503 7605 	add.w	r6, r3, #532	; 0x214
 8004b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b46:	f202 521c 	addw	r2, r2, #1308	; 0x51c
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8004b4a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004b4c:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
				pdev->wArea2,
 8004b50:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004b52:	f500 50d0 	add.w	r0, r0, #6656	; 0x1a00
		status = VL53LX_ipp_hist_process_data(
 8004b56:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004b58:	9405      	str	r4, [sp, #20]
 8004b5a:	f107 0413 	add.w	r4, r7, #19
 8004b5e:	9404      	str	r4, [sp, #16]
 8004b60:	9003      	str	r0, [sp, #12]
 8004b62:	9102      	str	r1, [sp, #8]
 8004b64:	9201      	str	r2, [sp, #4]
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	4633      	mov	r3, r6
 8004b6a:	462a      	mov	r2, r5
 8004b6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f00c fbf0 	bl	8011354 <VL53LX_ipp_hist_process_data>
 8004b74:	4603      	mov	r3, r0
 8004b76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004b7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b7c:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d150      	bne.n	8004c26 <VL53LX_get_device_results+0x39e>
			(histo_merge_nb > 1))
 8004b84:	7cfb      	ldrb	r3, [r7, #19]
		if ((pdev->tuning_parms.tp_hist_merge == 1) &&
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d94d      	bls.n	8004c26 <VL53LX_get_device_results+0x39e>
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004b90:	e045      	b.n	8004c1e <VL53LX_get_device_results+0x396>
			pdata = &(presults->VL53LX_p_003[i]);
 8004b92:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004b96:	224c      	movs	r2, #76	; 0x4c
 8004b98:	fb02 f303 	mul.w	r3, r2, r3
 8004b9c:	3310      	adds	r3, #16
 8004b9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ba0:	4413      	add	r3, r2
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	623b      	str	r3, [r7, #32]
			pdata->VL53LX_p_016 /= histo_merge_nb;
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	7cfa      	ldrb	r2, [r7, #19]
 8004bac:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53LX_p_017 /= histo_merge_nb;
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	7cfa      	ldrb	r2, [r7, #19]
 8004bba:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 /= histo_merge_nb;
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	7cfa      	ldrb	r2, [r7, #19]
 8004bc8:	fb93 f2f2 	sdiv	r2, r3, r2
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	7cfb      	ldrb	r3, [r7, #19]
 8004bd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004be6:	461a      	mov	r2, r3
 8004be8:	7cfb      	ldrb	r3, [r7, #19]
 8004bea:	fb92 f3f3 	sdiv	r3, r2, r3
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	7cfb      	ldrb	r3, [r7, #19]
 8004bfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_009 /= histo_merge_nb;
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	7cfa      	ldrb	r2, [r7, #19]
 8004c0c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53LX_MAX_RANGE_RESULTS; i++) {
 8004c14:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004c18:	3301      	adds	r3, #1
 8004c1a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004c1e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d9b5      	bls.n	8004b92 <VL53LX_get_device_results+0x30a>
		}


		if (status != VL53LX_ERROR_NONE)
 8004c26:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f040 80ae 	bne.w	8004d8c <VL53LX_get_device_results+0x504>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53LX_hist_wrap_dmax(
 8004c30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c32:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8004c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c38:	f503 7171 	add.w	r1, r3, #964	; 0x3c4
 8004c3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c3e:	330e      	adds	r3, #14
 8004c40:	461a      	mov	r2, r3
 8004c42:	f004 fe80 	bl	8009946 <VL53LX_hist_wrap_dmax>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53LX_ERROR_NONE)
 8004c4c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f040 809d 	bne.w	8004d90 <VL53LX_get_device_results+0x508>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8004c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8004c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c68:	4413      	add	r3, r2
 8004c6a:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8004c6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_phase_consistency_check(
 8004c70:	4613      	mov	r3, r2
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004c7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c7e:	4413      	add	r3, r2
 8004c80:	f103 0208 	add.w	r2, r3, #8
 8004c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f004 fa10 	bl	80090ac <VL53LX_hist_phase_consistency_check>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53LX_ERROR_NONE)
 8004c92:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d17c      	bne.n	8004d94 <VL53LX_get_device_results+0x50c>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8004c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53LX_p_003[zid]),
 8004ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cac:	4413      	add	r3, r2
 8004cae:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53LX_p_003[zid]),
 8004cb0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
		status = VL53LX_hist_xmonitor_consistency_check(
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	4413      	add	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004cc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f103 0208 	add.w	r2, r3, #8
 8004cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f004 fde1 	bl	8009896 <VL53LX_hist_xmonitor_consistency_check>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53LX_ERROR_NONE)
 8004cda:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d15a      	bne.n	8004d98 <VL53LX_get_device_results+0x510>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 8004ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ce4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		pZH->max_zones    = VL53LX_MAX_USER_ZONES;
 8004cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cee:	2205      	movs	r2, #5
 8004cf0:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 8004cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cf4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 8004cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfe:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8004d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004d06:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8004d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d0a:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
		if (zid <
 8004d0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d222      	bcs.n	8004d5c <VL53LX_get_device_results+0x4d4>

			phist_info =
			&(pZH->VL53LX_p_003[zid]);
 8004d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			phist_info =
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d1e:	4413      	add	r3, r2
 8004d20:	3304      	adds	r3, #4
 8004d22:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8004d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d26:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8004d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d2a:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 8004d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2e:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8004d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d32:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8004d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d36:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 8004d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d3c:	805a      	strh	r2, [r3, #2]

			phist_info->VL53LX_p_005 =
				pHD->VL53LX_p_005;
 8004d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d40:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53LX_p_005 =
 8004d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d46:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8004d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 8004d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d50:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8004d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d54:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 8004d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d5a:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53LX_ERROR_NONE)
 8004d5c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d11b      	bne.n	8004d9c <VL53LX_get_device_results+0x514>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53LX_hist_copy_results_to_sys_and_core(
 8004d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d66:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
 8004d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d6c:	f203 3266 	addw	r2, r3, #870	; 0x366
 8004d70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d72:	f503 5399 	add.w	r3, r3, #4896	; 0x1320
 8004d76:	3318      	adds	r3, #24
 8004d78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d7a:	f005 f91c 	bl	8009fb6 <VL53LX_hist_copy_results_to_sys_and_core>
 8004d7e:	e00e      	b.n	8004d9e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004d80:	bf00      	nop
 8004d82:	e00c      	b.n	8004d9e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004d84:	bf00      	nop
 8004d86:	e00a      	b.n	8004d9e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004d88:	bf00      	nop
 8004d8a:	e008      	b.n	8004d9e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004d8c:	bf00      	nop
 8004d8e:	e006      	b.n	8004d9e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004d90:	bf00      	nop
 8004d92:	e004      	b.n	8004d9e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004d94:	bf00      	nop
 8004d96:	e002      	b.n	8004d9e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004d98:	bf00      	nop
 8004d9a:	e000      	b.n	8004d9e <VL53LX_get_device_results+0x516>
			goto UPDATE_DYNAMIC_CONFIG;
 8004d9c:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 8004d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da0:	785b      	ldrb	r3, [r3, #1]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d036      	beq.n	8004e14 <VL53LX_get_device_results+0x58c>
			if (pstate->rd_device_state !=
 8004da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004da8:	79db      	ldrb	r3, [r3, #7]
 8004daa:	2b06      	cmp	r3, #6
 8004dac:	d00a      	beq.n	8004dc4 <VL53LX_get_device_results+0x53c>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53LX_ERROR_NONE) {
 8004dae:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d106      	bne.n	8004dc4 <VL53LX_get_device_results+0x53c>
					status = VL53LX_dynamic_zone_update(
 8004db6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f005 f9d0 	bl	800a15e <VL53LX_dynamic_zone_update>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004dca:	e015      	b.n	8004df8 <VL53LX_get_device_results+0x570>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 8004dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dce:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 8004dd2:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <VL53LX_get_device_results+0x556>
 8004dda:	2103      	movs	r1, #3
 8004ddc:	e000      	b.n	8004de0 <VL53LX_get_device_results+0x558>
 8004dde:	2101      	movs	r1, #1
 8004de0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004de4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004de6:	4413      	add	r3, r2
 8004de8:	460a      	mov	r2, r1
 8004dea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			for (i = 0; i < VL53LX_MAX_USER_ZONES; i++) {
 8004dee:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004df2:	3301      	adds	r3, #1
 8004df4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004df8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d9e5      	bls.n	8004dcc <VL53LX_get_device_results+0x544>
					VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53LX_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53LX_ERROR_NONE)
 8004e00:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d105      	bne.n	8004e14 <VL53LX_get_device_results+0x58c>
				status = VL53LX_multizone_hist_bins_update(Dev);
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f005 fa22 	bl	800a252 <VL53LX_multizone_hist_bins_update>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53LX_ERROR_NONE)
 8004e14:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d105      	bne.n	8004e28 <VL53LX_get_device_results+0x5a0>
			status = VL53LX_dynamic_xtalk_correction_corrector(Dev);
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f005 fe79 	bl	800ab14 <VL53LX_dynamic_xtalk_correction_corrector>
 8004e22:	4603      	mov	r3, r0
 8004e24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53LX_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (pdev->tuning_parms.tp_hist_merge == 1)
 8004e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e2a:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d151      	bne.n	8004ed6 <VL53LX_get_device_results+0x64e>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8004e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	e04c      	b.n	8004ed6 <VL53LX_get_device_results+0x64e>
	} else {

		if (status == VL53LX_ERROR_NONE)
 8004e3c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d107      	bne.n	8004e54 <VL53LX_get_device_results+0x5cc>
			status = VL53LX_get_measurement_results(
 8004e44:	7afb      	ldrb	r3, [r7, #11]
 8004e46:	4619      	mov	r1, r3
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f7ff fc73 	bl	8004734 <VL53LX_get_measurement_results>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53LX_ERROR_NONE)
 8004e54:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10d      	bne.n	8004e78 <VL53LX_get_device_results+0x5f0>
			VL53LX_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8004e5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e5e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53LX_copy_sys_and_core_results_to_range_results(
 8004e62:	4618      	mov	r0, r3
 8004e64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e66:	f203 3166 	addw	r1, r3, #870	; 0x366
 8004e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e6c:	f503 5299 	add.w	r2, r3, #4896	; 0x1320
 8004e70:	3218      	adds	r2, #24
 8004e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e74:	f000 fb86 	bl	8005584 <VL53LX_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 8004e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7a:	785b      	ldrb	r3, [r3, #1]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d12a      	bne.n	8004ed6 <VL53LX_get_device_results+0x64e>

			if ((status == VL53LX_ERROR_NONE) &&
 8004e80:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10d      	bne.n	8004ea4 <VL53LX_get_device_results+0x61c>
				(pL->low_power_auto_range_count == 0)) {
 8004e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8a:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53LX_ERROR_NONE) &&
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d109      	bne.n	8004ea4 <VL53LX_get_device_results+0x61c>

				status =
				VL53LX_low_power_auto_setup_manual_calibration(
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f006 fa70 	bl	800b376 <VL53LX_low_power_auto_setup_manual_calibration>
 8004e96:	4603      	mov	r3, r0
 8004e98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	709a      	strb	r2, [r3, #2]
 8004ea2:	e00a      	b.n	8004eba <VL53LX_get_device_results+0x632>
			} else if ((status == VL53LX_ERROR_NONE) &&
 8004ea4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d106      	bne.n	8004eba <VL53LX_get_device_results+0x632>
				(pL->low_power_auto_range_count == 1)) {
 8004eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eae:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53LX_ERROR_NONE) &&
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d102      	bne.n	8004eba <VL53LX_get_device_results+0x632>
				pL->low_power_auto_range_count = 2;
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	709a      	strb	r2, [r3, #2]
			}


			if ((pL->low_power_auto_range_count != 0xFF) &&
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	789b      	ldrb	r3, [r3, #2]
 8004ebe:	2bff      	cmp	r3, #255	; 0xff
 8004ec0:	d009      	beq.n	8004ed6 <VL53LX_get_device_results+0x64e>
 8004ec2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d105      	bne.n	8004ed6 <VL53LX_get_device_results+0x64e>
				(status == VL53LX_ERROR_NONE)) {
				status = VL53LX_low_power_auto_update_DSS(
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f006 faa5 	bl	800b41a <VL53LX_low_power_auto_update_DSS>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8004ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ed8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004edc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ede:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8004ee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ee2:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8004ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ee8:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 8004eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eec:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8004ef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ef2:	709a      	strb	r2, [r3, #2]

	if (status == VL53LX_ERROR_NONE) {
 8004ef4:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f040 80b0 	bne.w	800505e <VL53LX_get_device_results+0x7d6>


		pres->zone_results.max_zones    = VL53LX_MAX_USER_ZONES;
 8004efe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f00:	2205      	movs	r2, #5
 8004f02:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8004f06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f08:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f12:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
		zid = pdev->ll_state.rd_zone_id;
 8004f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (zid < pres->zone_results.max_zones) {
 8004f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f22:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8004f26:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	f080 8097 	bcs.w	800505e <VL53LX_get_device_results+0x7d6>

			pobjects =
			&(pres->zone_results.VL53LX_p_003[zid]);
 8004f30:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
			pobjects =
 8004f34:	4613      	mov	r3, r2
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8004f40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f42:	4413      	add	r3, r2
 8004f44:	3308      	adds	r3, #8
 8004f46:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 8004f48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f4a:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 8004f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f4e:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8004f50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f52:	785a      	ldrb	r2, [r3, #1]
 8004f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f56:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 8004f58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f5a:	789a      	ldrb	r2, [r3, #2]
 8004f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f5e:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8004f60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f62:	78da      	ldrb	r2, [r3, #3]
 8004f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f66:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53LX_p_016 =
				presults->xmonitor.VL53LX_p_016;
 8004f68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f6a:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53LX_p_016 =
 8004f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f70:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53LX_p_017 =
				presults->xmonitor.VL53LX_p_017;
 8004f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f74:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53LX_p_017 =
 8004f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f7a:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53LX_p_011 =
				presults->xmonitor.VL53LX_p_011;
 8004f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f7e:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53LX_p_011 =
 8004f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 8004f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f8a:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 8004f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 8004f94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f96:	7c5a      	ldrb	r2, [r3, #17]
 8004f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f9a:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 8004f9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f9e:	7c9a      	ldrb	r2, [r3, #18]
 8004fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fa2:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004faa:	e052      	b.n	8005052 <VL53LX_get_device_results+0x7ca>
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004fac:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004fb0:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_016;
 8004fb4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fb6:	204c      	movs	r0, #76	; 0x4c
 8004fb8:	fb00 f303 	mul.w	r3, r0, r3
 8004fbc:	440b      	add	r3, r1
 8004fbe:	3338      	adds	r3, #56	; 0x38
 8004fc0:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_016 =
 8004fc2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	4413      	add	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4403      	add	r3, r0
 8004fce:	3308      	adds	r3, #8
 8004fd0:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004fd2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004fd6:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_017;
 8004fda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fdc:	204c      	movs	r0, #76	; 0x4c
 8004fde:	fb00 f303 	mul.w	r3, r0, r3
 8004fe2:	440b      	add	r3, r1
 8004fe4:	333c      	adds	r3, #60	; 0x3c
 8004fe6:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_017 =
 8004fe8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004fea:	4613      	mov	r3, r2
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4403      	add	r3, r0
 8004ff4:	330c      	adds	r3, #12
 8004ff6:	6019      	str	r1, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8004ff8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 8004ffc:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].VL53LX_p_011;
 8005000:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005002:	204c      	movs	r0, #76	; 0x4c
 8005004:	fb00 f303 	mul.w	r3, r0, r3
 8005008:	440b      	add	r3, r1
 800500a:	3354      	adds	r3, #84	; 0x54
 800500c:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].VL53LX_p_011 =
 800500e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005010:	4613      	mov	r3, r2
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	3310      	adds	r3, #16
 800501c:	4602      	mov	r2, r0
 800501e:	801a      	strh	r2, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
					presults->VL53LX_p_003[i].range_status;
 8005020:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53LX_p_003[i].range_status =
 8005024:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53LX_p_003[i].range_status;
 8005028:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800502a:	204c      	movs	r0, #76	; 0x4c
 800502c:	fb00 f303 	mul.w	r3, r0, r3
 8005030:	440b      	add	r3, r1
 8005032:	335e      	adds	r3, #94	; 0x5e
 8005034:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53LX_p_003[i].range_status =
 8005036:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005038:	4613      	mov	r3, r2
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	4413      	add	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	440b      	add	r3, r1
 8005042:	3312      	adds	r3, #18
 8005044:	4602      	mov	r2, r0
 8005046:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 8005048:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800504c:	3301      	adds	r3, #1
 800504e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005054:	7c9b      	ldrb	r3, [r3, #18]
 8005056:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800505a:	429a      	cmp	r2, r3
 800505c:	d3a6      	bcc.n	8004fac <VL53LX_get_device_results+0x724>
		}
	}



	memcpy(
 800505e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8005062:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f00f f9a1 	bl	80143ac <memcpy>
		presults,
		sizeof(VL53LX_range_results_t));



	if (status == VL53LX_ERROR_NONE)
 800506a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800506e:	2b00      	cmp	r3, #0
 8005070:	d105      	bne.n	800507e <VL53LX_get_device_results+0x7f6>
		status = VL53LX_check_ll_driver_rd_state(Dev);
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f002 fd4e 	bl	8007b14 <VL53LX_check_ll_driver_rd_state>
 8005078:	4603      	mov	r3, r0
 800507a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53LX_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800507e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8005082:	4618      	mov	r0, r3
 8005084:	3768      	adds	r7, #104	; 0x68
 8005086:	46bd      	mov	sp, r7
 8005088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800508c <VL53LX_clear_interrupt_and_enable_next_range>:


VL53LX_Error VL53LX_clear_interrupt_and_enable_next_range(
	VL53LX_DEV        Dev,
	uint8_t           measurement_mode)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	460b      	mov	r3, r1
 8005096:	70fb      	strb	r3, [r7, #3]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8005098:	2300      	movs	r3, #0
 800509a:	73fb      	strb	r3, [r7, #15]





	if (status == VL53LX_ERROR_NONE)
 800509c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d107      	bne.n	80050b4 <VL53LX_clear_interrupt_and_enable_next_range+0x28>
		status = VL53LX_init_and_start_range(
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	2203      	movs	r2, #3
 80050a8:	4619      	mov	r1, r3
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7ff f868 	bl	8004180 <VL53LX_init_and_start_range>
 80050b0:	4603      	mov	r3, r0
 80050b2:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53LX_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 80050b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <VL53LX_get_histogram_bin_data>:


VL53LX_Error VL53LX_get_histogram_bin_data(
		VL53LX_DEV                   Dev,
		VL53LX_histogram_bin_data_t *pdata)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b0d2      	sub	sp, #328	; 0x148
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	1d3b      	adds	r3, r7, #4
 80050c8:	6018      	str	r0, [r3, #0]
 80050ca:	463b      	mov	r3, r7
 80050cc:	6019      	str	r1, [r3, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80050ce:	2300      	movs	r3, #0
 80050d0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53LX_LLDriverData_t *pdev =
 80050d4:	1d3b      	adds	r3, r7, #4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3318      	adds	r3, #24
 80050da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t *pres =
 80050de:	1d3b      	adds	r3, r7, #4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80050e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53LX_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 80050ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050ee:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80050f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53LX_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 80050f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050fa:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80050fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53LX_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8005102:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005106:	f203 331e 	addw	r3, r3, #798	; 0x31e
 800510a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53LX_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 800510e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005112:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005116:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53LX_range_results_t        *presults  = &(pres->range_results);
 800511a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800511e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53LX_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8005122:	f107 030c 	add.w	r3, r7, #12
 8005126:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 800512a:	2300      	movs	r3, #0
 800512c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c

	uint32_t   pll_period_us            = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t    i                        = 0;
 800514e:	2300      	movs	r3, #0
 8005150:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b

	int32_t    hist_merge				= 0;
 8005154:	f107 0308 	add.w	r3, r7, #8
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800515c:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <VL53LX_get_histogram_bin_data+0xba>
		status = VL53LX_ReadMulti(
 8005164:	1d38      	adds	r0, r7, #4
 8005166:	2353      	movs	r3, #83	; 0x53
 8005168:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800516c:	2188      	movs	r1, #136	; 0x88
 800516e:	6800      	ldr	r0, [r0, #0]
 8005170:	f00b fefa 	bl	8010f68 <VL53LX_ReadMulti>
 8005174:	4603      	mov	r3, r0
 8005176:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53LX_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 800517a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800517e:	781a      	ldrb	r2, [r3, #0]
 8005180:	463b      	mov	r3, r7
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 8005188:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800518c:	785a      	ldrb	r2, [r3, #1]
 800518e:	463b      	mov	r3, r7
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 8005196:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800519a:	789a      	ldrb	r2, [r3, #2]
 800519c:	463b      	mov	r3, r7
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 80051a4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80051a8:	78da      	ldrb	r2, [r3, #3]
 80051aa:	463b      	mov	r3, r7
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53LX_i2c_decode_uint16_t(2, pbuffer +   4);
 80051b2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80051b6:	3304      	adds	r3, #4
 80051b8:	4619      	mov	r1, r3
 80051ba:	2002      	movs	r0, #2
 80051bc:	f003 f9aa 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 80051c0:	4603      	mov	r3, r0
 80051c2:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 80051c4:	463b      	mov	r3, r7
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 80051cc:	234e      	movs	r3, #78	; 0x4e
 80051ce:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 80051d2:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80051d6:	f107 020c 	add.w	r2, r7, #12
 80051da:	4413      	add	r3, r2
 80051dc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53LX_i2c_decode_uint16_t(2, pbuffer);
 80051e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80051e4:	2002      	movs	r0, #2
 80051e6:	f003 f995 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 80051ea:	4603      	mov	r3, r0
 80051ec:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 80051ee:	463b      	mov	r3, r7
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 80051f6:	2350      	movs	r3, #80	; 0x50
 80051f8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_PHASECAL_RESULT__VCSEL_START -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 80051fc:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005200:	f107 020c 	add.w	r2, r7, #12
 8005204:	5cd2      	ldrb	r2, [r2, r3]
 8005206:	463b      	mov	r3, r7
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 800520e:	463b      	mov	r3, r7
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8005216:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800521a:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 800521e:	331c      	adds	r3, #28
 8005220:	801a      	strh	r2, [r3, #0]
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 8005222:	463b      	mov	r3, r7
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 800522a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800522e:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8005232:	331e      	adds	r3, #30
 8005234:	701a      	strb	r2, [r3, #0]



	i2c_buffer_offset_bytes =
 8005236:	2351      	movs	r3, #81	; 0x51
 8005238:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 800523c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005240:	f107 020c 	add.w	r2, r7, #12
 8005244:	5cd3      	ldrb	r3, [r2, r3]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 800524c:	2352      	movs	r3, #82	; 0x52
 800524e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 8005252:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005256:	f107 020c 	add.w	r2, r7, #12
 800525a:	5cd2      	ldrb	r2, [r2, r3]
 800525c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8005260:	4413      	add	r3, r2
 8005262:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 8005266:	234d      	movs	r3, #77	; 0x4d
 8005268:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_23_0 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 800526c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005270:	f107 020c 	add.w	r2, r7, #12
 8005274:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8005278:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 800527a:	2306      	movs	r3, #6
 800527c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53LX_RESULT__HISTOGRAM_BIN_0_2 -
			VL53LX_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8005280:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8005284:	f107 020c 	add.w	r2, r7, #12
 8005288:	4413      	add	r3, r2
 800528a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 800528e:	2300      	movs	r3, #0
 8005290:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8005294:	e017      	b.n	80052c6 <VL53LX_get_histogram_bin_data+0x206>
		pdata->bin_data[bin] =
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 8005296:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800529a:	2003      	movs	r0, #3
 800529c:	f003 f9d9 	bl	8008652 <VL53LX_i2c_decode_uint32_t>
 80052a0:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 80052a2:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53LX_i2c_decode_uint32_t(3, pbuffer);
 80052a6:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 80052a8:	463b      	mov	r3, r7
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3206      	adds	r2, #6
 80052ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 80052b2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80052b6:	3303      	adds	r3, #3
 80052b8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53LX_HISTOGRAM_BUFFER_SIZE; bin++) {
 80052bc:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80052c0:	3301      	adds	r3, #1
 80052c2:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80052c6:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80052ca:	2b17      	cmp	r3, #23
 80052cc:	d9e3      	bls.n	8005296 <VL53LX_get_histogram_bin_data+0x1d6>
	}




	VL53LX_get_tuning_parm(Dev, VL53LX_TUNINGPARM_HIST_MERGE, &hist_merge);
 80052ce:	f107 0208 	add.w	r2, r7, #8
 80052d2:	1d3b      	adds	r3, r7, #4
 80052d4:	f248 018d 	movw	r1, #32909	; 0x808d
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	f000 fb2f 	bl	800593c <VL53LX_get_tuning_parm>

	if (pdata->result__stream_count == 0) {
 80052de:	463b      	mov	r3, r7
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d118      	bne.n	800531c <VL53LX_get_histogram_bin_data+0x25c>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 80052ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052ee:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 80052f2:	3310      	adds	r3, #16
 80052f4:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80052f8:	2100      	movs	r1, #0
 80052fa:	4618      	mov	r0, r3
 80052fc:	f00f f864 	bl	80143c8 <memset>
		pdev->bin_rec_pos = 0;
 8005300:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005304:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8005308:	330c      	adds	r3, #12
 800530a:	2200      	movs	r2, #0
 800530c:	701a      	strb	r2, [r3, #0]
		pdev->pos_before_next_recom = 0;
 800530e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005312:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8005316:	330d      	adds	r3, #13
 8005318:	2200      	movs	r2, #0
 800531a:	701a      	strb	r2, [r3, #0]
	}

	if (hist_merge == 1)
 800531c:	f107 0308 	add.w	r3, r7, #8
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d105      	bne.n	8005332 <VL53LX_get_histogram_bin_data+0x272>
		vl53lx_histo_merge(Dev, pdata);
 8005326:	463a      	mov	r2, r7
 8005328:	1d3b      	adds	r3, r7, #4
 800532a:	6811      	ldr	r1, [r2, #0]
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	f7fd ff10 	bl	8003152 <vl53lx_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 8005332:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005336:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800533a:	463b      	mov	r3, r7
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	709a      	strb	r2, [r3, #2]
	pdata->VL53LX_p_019               = 0;
 8005340:	463b      	mov	r3, r7
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2200      	movs	r2, #0
 8005346:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020             = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8005348:	463b      	mov	r3, r7
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2218      	movs	r2, #24
 800534e:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021          = VL53LX_HISTOGRAM_BUFFER_SIZE;
 8005350:	463b      	mov	r3, r7
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2218      	movs	r2, #24
 8005356:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8005358:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800535c:	78da      	ldrb	r2, [r3, #3]
 800535e:	463b      	mov	r3, r7
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8005366:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800536a:	799b      	ldrb	r3, [r3, #6]
 800536c:	b29b      	uxth	r3, r3
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8005372:	463b      	mov	r3, r7
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 800537a:	463b      	mov	r3, r7
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 8005382:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005386:	7c1b      	ldrb	r3, [r3, #16]
 8005388:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 800538a:	4413      	add	r3, r2
 800538c:	b29a      	uxth	r2, r3
 800538e:	463b      	mov	r3, r7
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53LX_p_015 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8005396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800539a:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53LX_p_015 =
 800539c:	463b      	mov	r3, r7
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53LX_hist_get_bin_sequence_config(Dev, pdata);
 80053a4:	463a      	mov	r2, r7
 80053a6:	1d3b      	adds	r3, r7, #4
 80053a8:	6811      	ldr	r1, [r2, #0]
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	f003 fd20 	bl	8008df0 <VL53LX_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 80053b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d114      	bne.n	80053e6 <VL53LX_get_histogram_bin_data+0x326>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 80053bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053c0:	791b      	ldrb	r3, [r3, #4]
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 80053c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053cc:	795b      	ldrb	r3, [r3, #5]
 80053ce:	b29b      	uxth	r3, r3
		encoded_timeout =
 80053d0:	4413      	add	r3, r2
 80053d2:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 =  ptim_cfg->range_config__vcsel_period_a;
 80053d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053da:	799a      	ldrb	r2, [r3, #6]
 80053dc:	463b      	mov	r3, r7
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80053e4:	e013      	b.n	800540e <VL53LX_get_histogram_bin_data+0x34e>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 80053e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053ea:	79db      	ldrb	r3, [r3, #7]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 80053f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053f6:	7a1b      	ldrb	r3, [r3, #8]
 80053f8:	b29b      	uxth	r3, r3
		encoded_timeout =
 80053fa:	4413      	add	r3, r2
 80053fc:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53LX_p_005 = ptim_cfg->range_config__vcsel_period_b;
 8005400:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005404:	7a5a      	ldrb	r2, [r3, #9]
 8005406:	463b      	mov	r3, r7
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 800540e:	463b      	mov	r3, r7
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2200      	movs	r2, #0
 8005414:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 8005416:	2300      	movs	r3, #0
 8005418:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 800541c:	e016      	b.n	800544c <VL53LX_get_histogram_bin_data+0x38c>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 800541e:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8005422:	463a      	mov	r2, r7
 8005424:	6812      	ldr	r2, [r2, #0]
 8005426:	4413      	add	r3, r2
 8005428:	7b1b      	ldrb	r3, [r3, #12]
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	2b07      	cmp	r3, #7
 8005430:	d107      	bne.n	8005442 <VL53LX_get_histogram_bin_data+0x382>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 8005432:	463b      	mov	r3, r7
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	7adb      	ldrb	r3, [r3, #11]
 8005438:	3304      	adds	r3, #4
 800543a:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 800543c:	463b      	mov	r3, r7
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8005442:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8005446:	3301      	adds	r3, #1
 8005448:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 800544c:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8005450:	2b05      	cmp	r3, #5
 8005452:	d9e4      	bls.n	800541e <VL53LX_get_histogram_bin_data+0x35e>
	}

	pdata->total_periods_elapsed =
		VL53LX_decode_timeout(encoded_timeout);
 8005454:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005458:	4618      	mov	r0, r3
 800545a:	f003 fb6a 	bl	8008b32 <VL53LX_decode_timeout>
 800545e:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8005460:	463b      	mov	r3, r7
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53LX_calc_pll_period_us(pdata->VL53LX_p_015);
 8005468:	463b      	mov	r3, r7
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8005470:	4618      	mov	r0, r3
 8005472:	f006 f89a 	bl	800b5aa <VL53LX_calc_pll_period_us>
 8005476:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 800547a:	463b      	mov	r3, r7
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005482:	3301      	adds	r3, #1
 8005484:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 8005488:	463b      	mov	r3, r7
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53LX_duration_maths(
 8005490:	4619      	mov	r1, r3
 8005492:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005496:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800549a:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800549e:	f006 f89b 	bl	800b5d8 <VL53LX_duration_maths>
 80054a2:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 80054a4:	463b      	mov	r3, r7
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 80054ac:	463b      	mov	r3, r7
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53LX_hist_calc_zero_distance_phase(pdata);
 80054b6:	463b      	mov	r3, r7
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	f006 f9a4 	bl	800b806 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_ambient_bins(pdata);
 80054be:	463b      	mov	r3, r7
 80054c0:	6818      	ldr	r0, [r3, #0]
 80054c2:	f006 fdb0 	bl	800c026 <VL53LX_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 80054c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054ca:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80054ce:	463b      	mov	r3, r7
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 80054d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054d8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80054dc:	463b      	mov	r3, r7
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53LX_p_003[pdata->zone_id]);
 80054e2:	463b      	mov	r3, r7
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	789b      	ldrb	r3, [r3, #2]
 80054e8:	461a      	mov	r2, r3
 80054ea:	4613      	mov	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80054f6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80054fa:	4413      	add	r3, r2
 80054fc:	3302      	adds	r3, #2
 80054fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8005502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005506:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8005508:	463b      	mov	r3, r7
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8005510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005514:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8005516:	463b      	mov	r3, r7
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 800551e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005522:	2200      	movs	r2, #0
 8005524:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8005526:	463b      	mov	r3, r7
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800552e:	f003 031f 	and.w	r3, r3, #31
 8005532:	2b11      	cmp	r3, #17
 8005534:	bf8c      	ite	hi
 8005536:	2201      	movhi	r2, #1
 8005538:	2200      	movls	r2, #0
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	2a00      	cmp	r2, #0
 800553e:	d118      	bne.n	8005572 <VL53LX_get_histogram_bin_data+0x4b2>
 8005540:	2201      	movs	r2, #1
 8005542:	409a      	lsls	r2, r3
 8005544:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <VL53LX_get_histogram_bin_data+0x4c0>)
 8005546:	4013      	ands	r3, r2
 8005548:	2b00      	cmp	r3, #0
 800554a:	bf14      	ite	ne
 800554c:	2301      	movne	r3, #1
 800554e:	2300      	moveq	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00d      	beq.n	8005572 <VL53LX_get_histogram_bin_data+0x4b2>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8005556:	463b      	mov	r3, r7
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800555e:	f003 031f 	and.w	r3, r3, #31
 8005562:	b2da      	uxtb	r2, r3
 8005564:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005568:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53LX_ERROR_RANGE_ERROR;
 800556a:	23fa      	movs	r3, #250	; 0xfa
 800556c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 8005570:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005572:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8005576:	4618      	mov	r0, r3
 8005578:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	0002200e 	.word	0x0002200e

08005584 <VL53LX_copy_sys_and_core_results_to_range_results>:
void VL53LX_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore,
	VL53LX_range_results_t           *presults)
{
 8005584:	b480      	push	{r7}
 8005586:	b08b      	sub	sp, #44	; 0x2c
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8005592:	2300      	movs	r3, #0
 8005594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_range_data_t *pdata;
	int32_t range_mm = 0;
 8005598:	2300      	movs	r3, #0
 800559a:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 800559c:	2300      	movs	r3, #0
 800559e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2200      	movs	r2, #0
 80055a4:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	78da      	ldrb	r2, [r3, #3]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2200      	movs	r2, #0
 80055b2:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53LX_MAX_RANGE_RESULTS;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2204      	movs	r2, #4
 80055b8:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2201      	movs	r2, #1
 80055be:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	8a1b      	ldrh	r3, [r3, #16]
 80055c4:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	8a9b      	ldrh	r3, [r3, #20]
 80055ca:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	8a5b      	ldrh	r3, [r3, #18]
 80055d0:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 80055d2:	2300      	movs	r3, #0
 80055d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80055d8:	e00b      	b.n	80055f2 <VL53LX_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53LX_p_022[i] = 0;
 80055da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	4413      	add	r3, r2
 80055e4:	2200      	movs	r2, #0
 80055e6:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53LX_MAX_AMBIENT_DMAX_VALUES; i++)
 80055e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055ec:	3301      	adds	r3, #1
 80055ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80055f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d9ef      	bls.n	80055da <VL53LX_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53LX_p_003[0]);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	3314      	adds	r3, #20
 80055fe:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8005600:	2300      	movs	r3, #0
 8005602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005606:	e0fe      	b.n	8005806 <VL53LX_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800560e:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	2200      	movs	r2, #0
 8005614:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	78db      	ldrb	r3, [r3, #3]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10a      	bne.n	8005634 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	785b      	ldrb	r3, [r3, #1]
 8005622:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8005626:	2b09      	cmp	r3, #9
 8005628:	d104      	bne.n	8005634 <VL53LX_copy_sys_and_core_results_to_range_results+0xb0>
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53LX_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	2213      	movs	r2, #19
 800562e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8005632:	e007      	b.n	8005644 <VL53LX_copy_sys_and_core_results_to_range_results+0xc0>
				VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	785b      	ldrb	r3, [r3, #1]
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53LX_p_012 = 0;
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	2200      	movs	r2, #0
 8005648:	721a      	strb	r2, [r3, #8]
		pdata->VL53LX_p_019    = 0;
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	2200      	movs	r2, #0
 800564e:	725a      	strb	r2, [r3, #9]
		pdata->VL53LX_p_023   = 0;
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	2200      	movs	r2, #0
 8005654:	729a      	strb	r2, [r3, #10]
		pdata->VL53LX_p_024     = 0;
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	2200      	movs	r2, #0
 800565a:	72da      	strb	r2, [r3, #11]
		pdata->VL53LX_p_013   = 0;
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	2200      	movs	r2, #0
 8005660:	731a      	strb	r2, [r3, #12]
		pdata->VL53LX_p_025    = 0;
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	2200      	movs	r2, #0
 8005666:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8005668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <VL53LX_copy_sys_and_core_results_to_range_results+0xf2>
 8005670:	2b01      	cmp	r3, #1
 8005672:	d05c      	beq.n	800572e <VL53LX_copy_sys_and_core_results_to_range_results+0x1aa>
 8005674:	e0a8      	b.n	80057c8 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	789b      	ldrb	r3, [r3, #2]
 800567a:	2b07      	cmp	r3, #7
 800567c:	d103      	bne.n	8005686 <VL53LX_copy_sys_and_core_results_to_range_results+0x102>
				VL53LX_DEVICEREPORTSTATUS_MM1)
				pdata->VL53LX_p_004 =
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	8a7a      	ldrh	r2, [r7, #18]
 8005682:	82da      	strh	r2, [r3, #22]
 8005684:	e00b      	b.n	800569e <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	789b      	ldrb	r3, [r3, #2]
 800568a:	2b08      	cmp	r3, #8
 800568c:	d103      	bne.n	8005696 <VL53LX_copy_sys_and_core_results_to_range_results+0x112>
					VL53LX_DEVICEREPORTSTATUS_MM2)
				pdata->VL53LX_p_004 =
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	8aba      	ldrh	r2, [r7, #20]
 8005692:	82da      	strh	r2, [r3, #22]
 8005694:	e003      	b.n	800569e <VL53LX_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd0;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53LX_p_004 =
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	8afa      	ldrh	r2, [r7, #22]
 80056a2:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	895b      	ldrh	r3, [r3, #10]
 80056b8:	015b      	lsls	r3, r3, #5
 80056ba:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c2:	d302      	bcc.n	80056ca <VL53LX_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 80056c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056c8:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd0;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53LX_p_011 =
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 80056e0:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	fb02 f303 	mul.w	r3, r2, r3
 80056ea:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056f2:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	da01      	bge.n	80056fe <VL53LX_copy_sys_and_core_results_to_range_results+0x17a>
 80056fa:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80056fe:	12db      	asrs	r3, r3, #11
 8005700:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	b21a      	sxth	r2, r3
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd0;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685a      	ldr	r2, [r3, #4]
			pdata->VL53LX_p_017 =
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd0;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689a      	ldr	r2, [r3, #8]
			pdata->VL53LX_p_010 =
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd0;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681a      	ldr	r2, [r3, #0]
			pdata->VL53LX_p_016 =
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 800572c:	e04c      	b.n	80057c8 <VL53LX_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53LX_p_004 =
				psys->result__dss_actual_effective_spads_sd1;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53LX_p_004 =
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005744:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	8bdb      	ldrh	r3, [r3, #30]
 8005752:	015b      	lsls	r3, r3, #5
 8005754:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575c:	d302      	bcc.n	8005764 <VL53LX_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 800575e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005762:	61fb      	str	r3, [r7, #28]

			pdata->VL53LX_p_002 = (uint16_t)tmpu32;
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	b29a      	uxth	r2, r3
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53LX_p_011 =
				psys->result__phase_sd1;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53LX_p_011 =
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 800577a:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	fb02 f303 	mul.w	r3, r2, r3
 8005784:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800578c:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	2b00      	cmp	r3, #0
 8005792:	da01      	bge.n	8005798 <VL53LX_copy_sys_and_core_results_to_range_results+0x214>
 8005794:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005798:	12db      	asrs	r3, r3, #11
 800579a:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	b21a      	sxth	r2, r3
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53LX_p_017 =
				pcore->result_core__ranging_total_events_sd1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	695a      	ldr	r2, [r3, #20]
			pdata->VL53LX_p_017 =
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53LX_p_010 =
				pcore->result_core__signal_total_events_sd1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699a      	ldr	r2, [r3, #24]
			pdata->VL53LX_p_010 =
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	619a      	str	r2, [r3, #24]
			pdata->VL53LX_p_016 =
				pcore->result_core__ambient_window_events_sd1;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691a      	ldr	r2, [r3, #16]
			pdata->VL53LX_p_016 =
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 80057c6:	bf00      	nop
		}


		pdata->VL53LX_p_026    = pdata->VL53LX_p_011;
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53LX_p_027    = pdata->VL53LX_p_011;
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	334c      	adds	r3, #76	; 0x4c
 80057fa:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 80057fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005800:	3301      	adds	r3, #1
 8005802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800580a:	2b01      	cmp	r3, #1
 800580c:	f67f aefc 	bls.w	8005608 <VL53LX_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53LX_DEVICEERROR_NOUPDATE;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2200      	movs	r2, #0
 8005814:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	785b      	ldrb	r3, [r3, #1]
 800581a:	f003 031f 	and.w	r3, r3, #31
 800581e:	2b11      	cmp	r3, #17
 8005820:	bf8c      	ite	hi
 8005822:	2201      	movhi	r2, #1
 8005824:	2200      	movls	r2, #0
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	2a00      	cmp	r2, #0
 800582a:	d116      	bne.n	800585a <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
 800582c:	2201      	movs	r2, #1
 800582e:	409a      	lsls	r2, r3
 8005830:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <VL53LX_copy_sys_and_core_results_to_range_results+0x2e4>)
 8005832:	4013      	ands	r3, r2
 8005834:	2b00      	cmp	r3, #0
 8005836:	bf14      	ite	ne
 8005838:	2301      	movne	r3, #1
 800583a:	2300      	moveq	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00b      	beq.n	800585a <VL53LX_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53LX_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53LX_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53LX_DEVICEERROR_USERROICLIP:
	case VL53LX_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	785b      	ldrb	r3, [r3, #1]
 8005846:	f003 031f 	and.w	r3, r3, #31
 800584a:	b2da      	uxtb	r2, r3
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	741a      	strb	r2, [r3, #16]
				VL53LX_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53LX_p_003[0].range_status =
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53LX_DEVICEERROR_NOUPDATE;
	break;
 8005858:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800585a:	bf00      	nop
 800585c:	372c      	adds	r7, #44	; 0x2c
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	0002200e 	.word	0x0002200e

0800586c <VL53LX_set_zone_dss_config>:


VL53LX_Error VL53LX_set_zone_dss_config(
	VL53LX_DEV                      Dev,
	VL53LX_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8005876:	2300      	movs	r3, #0
 8005878:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3318      	adds	r3, #24
 800587e:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	332c      	adds	r3, #44	; 0x2c
 8005884:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b05      	cmp	r3, #5
 800588c:	d109      	bne.n	80058a2 <VL53LX_set_zone_dss_config+0x36>
		VL53LX_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2202      	movs	r2, #2
 8005892:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
		VL53LX_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
 80058a0:	e003      	b.n	80058aa <VL53LX_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 80058aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <VL53LX_set_dmax_mode>:


VL53LX_Error VL53LX_set_dmax_mode(
	VL53LX_DEV               Dev,
	VL53LX_DeviceDmaxMode    dmax_mode)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b085      	sub	sp, #20
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	460b      	mov	r3, r1
 80058c4:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80058c6:	2300      	movs	r3, #0
 80058c8:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3318      	adds	r3, #24
 80058ce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	78fa      	ldrb	r2, [r7, #3]
 80058d4:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 80058d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <VL53LX_get_dmax_calibration_data>:

VL53LX_Error VL53LX_get_dmax_calibration_data(
	VL53LX_DEV                      Dev,
	VL53LX_DeviceDmaxMode           dmax_mode,
	VL53LX_dmax_calibration_data_t *pdmax_cal)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b086      	sub	sp, #24
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	460b      	mov	r3, r1
 80058f0:	607a      	str	r2, [r7, #4]
 80058f2:	72fb      	strb	r3, [r7, #11]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80058f4:	2300      	movs	r3, #0
 80058f6:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t    *pdev =
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3318      	adds	r3, #24
 80058fc:	613b      	str	r3, [r7, #16]
		VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 80058fe:	7afb      	ldrb	r3, [r7, #11]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d009      	beq.n	8005918 <VL53LX_get_dmax_calibration_data+0x32>
 8005904:	2b02      	cmp	r3, #2
 8005906:	d10f      	bne.n	8005928 <VL53LX_get_dmax_calibration_data+0x42>

	case VL53LX_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 800590c:	220a      	movs	r2, #10
 800590e:	4619      	mov	r1, r3
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f00e fd4b 	bl	80143ac <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 8005916:	e00a      	b.n	800592e <VL53LX_get_dmax_calibration_data+0x48>

	case VL53LX_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 800591c:	220a      	movs	r2, #10
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f00e fd43 	bl	80143ac <memcpy>
			sizeof(VL53LX_dmax_calibration_data_t));
	break;
 8005926:	e002      	b.n	800592e <VL53LX_get_dmax_calibration_data+0x48>

	default:
		status = VL53LX_ERROR_INVALID_PARAMS;
 8005928:	23fc      	movs	r3, #252	; 0xfc
 800592a:	75fb      	strb	r3, [r7, #23]
	break;
 800592c:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800592e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <VL53LX_get_tuning_parm>:

VL53LX_Error VL53LX_get_tuning_parm(
	VL53LX_DEV                     Dev,
	VL53LX_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800593c:	b480      	push	{r7}
 800593e:	b089      	sub	sp, #36	; 0x24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	460b      	mov	r3, r1
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	817b      	strh	r3, [r7, #10]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800594a:	2300      	movs	r3, #0
 800594c:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3318      	adds	r3, #24
 8005952:	61bb      	str	r3, [r7, #24]
	VL53LX_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800595a:	617b      	str	r3, [r7, #20]
	VL53LX_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8005962:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8005964:	897b      	ldrh	r3, [r7, #10]
 8005966:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800596a:	2bb9      	cmp	r3, #185	; 0xb9
 800596c:	f200 86ca 	bhi.w	8006704 <VL53LX_get_tuning_parm+0xdc8>
 8005970:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <VL53LX_get_tuning_parm+0x3c>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	08005c61 	.word	0x08005c61
 800597c:	08005c71 	.word	0x08005c71
 8005980:	08005c81 	.word	0x08005c81
 8005984:	08005c91 	.word	0x08005c91
 8005988:	08005c9f 	.word	0x08005c9f
 800598c:	08005cad 	.word	0x08005cad
 8005990:	08005cbb 	.word	0x08005cbb
 8005994:	08005cc9 	.word	0x08005cc9
 8005998:	08005cd7 	.word	0x08005cd7
 800599c:	08005ce5 	.word	0x08005ce5
 80059a0:	08005cf3 	.word	0x08005cf3
 80059a4:	08005cff 	.word	0x08005cff
 80059a8:	08005d0d 	.word	0x08005d0d
 80059ac:	08005d1b 	.word	0x08005d1b
 80059b0:	08005d27 	.word	0x08005d27
 80059b4:	08005d35 	.word	0x08005d35
 80059b8:	08005d43 	.word	0x08005d43
 80059bc:	08005d53 	.word	0x08005d53
 80059c0:	08005d63 	.word	0x08005d63
 80059c4:	08005d71 	.word	0x08005d71
 80059c8:	08005d81 	.word	0x08005d81
 80059cc:	08005d8f 	.word	0x08005d8f
 80059d0:	08005d9f 	.word	0x08005d9f
 80059d4:	08005daf 	.word	0x08005daf
 80059d8:	08005dbf 	.word	0x08005dbf
 80059dc:	08005dcf 	.word	0x08005dcf
 80059e0:	08005ddf 	.word	0x08005ddf
 80059e4:	08005def 	.word	0x08005def
 80059e8:	08005dff 	.word	0x08005dff
 80059ec:	08005e0f 	.word	0x08005e0f
 80059f0:	08005e1f 	.word	0x08005e1f
 80059f4:	08005e2d 	.word	0x08005e2d
 80059f8:	08005e3d 	.word	0x08005e3d
 80059fc:	08005e4d 	.word	0x08005e4d
 8005a00:	08005e5d 	.word	0x08005e5d
 8005a04:	08005e6d 	.word	0x08005e6d
 8005a08:	08005e7d 	.word	0x08005e7d
 8005a0c:	08005e8d 	.word	0x08005e8d
 8005a10:	08005e9d 	.word	0x08005e9d
 8005a14:	08005ead 	.word	0x08005ead
 8005a18:	08005ebd 	.word	0x08005ebd
 8005a1c:	08005ecd 	.word	0x08005ecd
 8005a20:	08005edd 	.word	0x08005edd
 8005a24:	08005eed 	.word	0x08005eed
 8005a28:	08005efd 	.word	0x08005efd
 8005a2c:	08005f0d 	.word	0x08005f0d
 8005a30:	08005f1b 	.word	0x08005f1b
 8005a34:	08005f29 	.word	0x08005f29
 8005a38:	08005f37 	.word	0x08005f37
 8005a3c:	08005f45 	.word	0x08005f45
 8005a40:	08005f53 	.word	0x08005f53
 8005a44:	08005f61 	.word	0x08005f61
 8005a48:	08005f6f 	.word	0x08005f6f
 8005a4c:	08005f7d 	.word	0x08005f7d
 8005a50:	08005f8b 	.word	0x08005f8b
 8005a54:	08005f99 	.word	0x08005f99
 8005a58:	08005fa7 	.word	0x08005fa7
 8005a5c:	08005fb5 	.word	0x08005fb5
 8005a60:	08005fc3 	.word	0x08005fc3
 8005a64:	08005fd1 	.word	0x08005fd1
 8005a68:	08005fdf 	.word	0x08005fdf
 8005a6c:	08005fed 	.word	0x08005fed
 8005a70:	08005ffb 	.word	0x08005ffb
 8005a74:	08006009 	.word	0x08006009
 8005a78:	08006017 	.word	0x08006017
 8005a7c:	08006025 	.word	0x08006025
 8005a80:	08006033 	.word	0x08006033
 8005a84:	08006041 	.word	0x08006041
 8005a88:	0800604f 	.word	0x0800604f
 8005a8c:	0800605d 	.word	0x0800605d
 8005a90:	0800606b 	.word	0x0800606b
 8005a94:	08006079 	.word	0x08006079
 8005a98:	08006087 	.word	0x08006087
 8005a9c:	08006095 	.word	0x08006095
 8005aa0:	080060a1 	.word	0x080060a1
 8005aa4:	080060af 	.word	0x080060af
 8005aa8:	080060bd 	.word	0x080060bd
 8005aac:	080060c9 	.word	0x080060c9
 8005ab0:	080060d5 	.word	0x080060d5
 8005ab4:	080060e1 	.word	0x080060e1
 8005ab8:	080060ed 	.word	0x080060ed
 8005abc:	080060f9 	.word	0x080060f9
 8005ac0:	08006105 	.word	0x08006105
 8005ac4:	08006113 	.word	0x08006113
 8005ac8:	08006121 	.word	0x08006121
 8005acc:	0800612f 	.word	0x0800612f
 8005ad0:	0800613d 	.word	0x0800613d
 8005ad4:	0800614b 	.word	0x0800614b
 8005ad8:	08006159 	.word	0x08006159
 8005adc:	08006167 	.word	0x08006167
 8005ae0:	08006175 	.word	0x08006175
 8005ae4:	08006183 	.word	0x08006183
 8005ae8:	08006191 	.word	0x08006191
 8005aec:	0800619f 	.word	0x0800619f
 8005af0:	080061ad 	.word	0x080061ad
 8005af4:	080061bb 	.word	0x080061bb
 8005af8:	080061c9 	.word	0x080061c9
 8005afc:	080061d7 	.word	0x080061d7
 8005b00:	080061e5 	.word	0x080061e5
 8005b04:	080061f3 	.word	0x080061f3
 8005b08:	08006201 	.word	0x08006201
 8005b0c:	0800620f 	.word	0x0800620f
 8005b10:	0800621d 	.word	0x0800621d
 8005b14:	0800622b 	.word	0x0800622b
 8005b18:	08006239 	.word	0x08006239
 8005b1c:	08006247 	.word	0x08006247
 8005b20:	08006255 	.word	0x08006255
 8005b24:	08006263 	.word	0x08006263
 8005b28:	08006271 	.word	0x08006271
 8005b2c:	0800627f 	.word	0x0800627f
 8005b30:	0800628d 	.word	0x0800628d
 8005b34:	0800629b 	.word	0x0800629b
 8005b38:	080062a9 	.word	0x080062a9
 8005b3c:	080062b7 	.word	0x080062b7
 8005b40:	080062c5 	.word	0x080062c5
 8005b44:	080062d3 	.word	0x080062d3
 8005b48:	080062e1 	.word	0x080062e1
 8005b4c:	080062ef 	.word	0x080062ef
 8005b50:	080062fd 	.word	0x080062fd
 8005b54:	0800630f 	.word	0x0800630f
 8005b58:	08006321 	.word	0x08006321
 8005b5c:	08006331 	.word	0x08006331
 8005b60:	08006343 	.word	0x08006343
 8005b64:	08006355 	.word	0x08006355
 8005b68:	08006367 	.word	0x08006367
 8005b6c:	08006379 	.word	0x08006379
 8005b70:	0800638b 	.word	0x0800638b
 8005b74:	0800639d 	.word	0x0800639d
 8005b78:	080063b1 	.word	0x080063b1
 8005b7c:	080063c3 	.word	0x080063c3
 8005b80:	080063d5 	.word	0x080063d5
 8005b84:	080063e7 	.word	0x080063e7
 8005b88:	080063f9 	.word	0x080063f9
 8005b8c:	0800640b 	.word	0x0800640b
 8005b90:	0800641d 	.word	0x0800641d
 8005b94:	0800642f 	.word	0x0800642f
 8005b98:	08006441 	.word	0x08006441
 8005b9c:	08006453 	.word	0x08006453
 8005ba0:	08006461 	.word	0x08006461
 8005ba4:	0800646f 	.word	0x0800646f
 8005ba8:	0800647d 	.word	0x0800647d
 8005bac:	0800648b 	.word	0x0800648b
 8005bb0:	08006499 	.word	0x08006499
 8005bb4:	080064a7 	.word	0x080064a7
 8005bb8:	080064b5 	.word	0x080064b5
 8005bbc:	080064c7 	.word	0x080064c7
 8005bc0:	080064d5 	.word	0x080064d5
 8005bc4:	080064e3 	.word	0x080064e3
 8005bc8:	080064f1 	.word	0x080064f1
 8005bcc:	080064ff 	.word	0x080064ff
 8005bd0:	0800650d 	.word	0x0800650d
 8005bd4:	0800651b 	.word	0x0800651b
 8005bd8:	08006529 	.word	0x08006529
 8005bdc:	08006537 	.word	0x08006537
 8005be0:	08006545 	.word	0x08006545
 8005be4:	08006553 	.word	0x08006553
 8005be8:	08006561 	.word	0x08006561
 8005bec:	0800656f 	.word	0x0800656f
 8005bf0:	0800657d 	.word	0x0800657d
 8005bf4:	0800658b 	.word	0x0800658b
 8005bf8:	08006599 	.word	0x08006599
 8005bfc:	080065a7 	.word	0x080065a7
 8005c00:	080065b5 	.word	0x080065b5
 8005c04:	080065c3 	.word	0x080065c3
 8005c08:	080065d1 	.word	0x080065d1
 8005c0c:	080065df 	.word	0x080065df
 8005c10:	080065ed 	.word	0x080065ed
 8005c14:	080065fb 	.word	0x080065fb
 8005c18:	08006609 	.word	0x08006609
 8005c1c:	08006617 	.word	0x08006617
 8005c20:	08006625 	.word	0x08006625
 8005c24:	08006633 	.word	0x08006633
 8005c28:	08006641 	.word	0x08006641
 8005c2c:	0800664f 	.word	0x0800664f
 8005c30:	0800665d 	.word	0x0800665d
 8005c34:	0800666b 	.word	0x0800666b
 8005c38:	08006679 	.word	0x08006679
 8005c3c:	08006687 	.word	0x08006687
 8005c40:	08006695 	.word	0x08006695
 8005c44:	080066a3 	.word	0x080066a3
 8005c48:	080066b1 	.word	0x080066b1
 8005c4c:	080066bf 	.word	0x080066bf
 8005c50:	080066cd 	.word	0x080066cd
 8005c54:	080066db 	.word	0x080066db
 8005c58:	080066e9 	.word	0x080066e9
 8005c5c:	080066f7 	.word	0x080066f7

	case VL53LX_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005c66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	601a      	str	r2, [r3, #0]
	break;
 8005c6c:	f000 bd51 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 8005c76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	601a      	str	r2, [r3, #0]
	break;
 8005c7c:	f000 bd49 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8005c86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	601a      	str	r2, [r3, #0]
	break;
 8005c8c:	f000 bd41 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	601a      	str	r2, [r3, #0]
	break;
 8005c9a:	f000 bd3a 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	601a      	str	r2, [r3, #0]
	break;
 8005ca8:	f000 bd33 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	789b      	ldrb	r3, [r3, #2]
 8005cb0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	601a      	str	r2, [r3, #0]
	break;
 8005cb6:	f000 bd2c 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	78db      	ldrb	r3, [r3, #3]
 8005cbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	601a      	str	r2, [r3, #0]
	break;
 8005cc4:	f000 bd25 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	791b      	ldrb	r3, [r3, #4]
 8005ccc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	601a      	str	r2, [r3, #0]
	break;
 8005cd2:	f000 bd1e 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	795b      	ldrb	r3, [r3, #5]
 8005cda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	601a      	str	r2, [r3, #0]
	break;
 8005ce0:	f000 bd17 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	799b      	ldrb	r3, [r3, #6]
 8005ce8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	601a      	str	r2, [r3, #0]
	break;
 8005cee:	f000 bd10 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	601a      	str	r2, [r3, #0]
	break;
 8005cfa:	f000 bd0a 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	891b      	ldrh	r3, [r3, #8]
 8005d02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	601a      	str	r2, [r3, #0]
	break;
 8005d08:	f000 bd03 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	8a1b      	ldrh	r3, [r3, #16]
 8005d10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	601a      	str	r2, [r3, #0]
	break;
 8005d16:	f000 bcfc 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	601a      	str	r2, [r3, #0]
	break;
 8005d22:	f000 bcf6 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	7e1b      	ldrb	r3, [r3, #24]
 8005d2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	601a      	str	r2, [r3, #0]
	break;
 8005d30:	f000 bcef 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	8b5b      	ldrh	r3, [r3, #26]
 8005d38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	601a      	str	r2, [r3, #0]
	break;
 8005d3e:	f000 bce8 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8005d48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	601a      	str	r2, [r3, #0]
	break;
 8005d4e:	f000 bce0 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005d58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	601a      	str	r2, [r3, #0]
	break;
 8005d5e:	f000 bcd8 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	601a      	str	r2, [r3, #0]
	break;
 8005d6c:	f000 bcd1 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005d76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	601a      	str	r2, [r3, #0]
	break;
 8005d7c:	f000 bcc9 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	601a      	str	r2, [r3, #0]
	break;
 8005d8a:	f000 bcc2 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8005d94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	601a      	str	r2, [r3, #0]
	break;
 8005d9a:	f000 bcba 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8005da4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	601a      	str	r2, [r3, #0]
	break;
 8005daa:	f000 bcb2 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8005db4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	601a      	str	r2, [r3, #0]
	break;
 8005dba:	f000 bcaa 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8005dc4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	601a      	str	r2, [r3, #0]
	break;
 8005dca:	f000 bca2 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8005dd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
	break;
 8005dda:	f000 bc9a 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8005de4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	601a      	str	r2, [r3, #0]
	break;
 8005dea:	f000 bc92 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	f9b3 32a6 	ldrsh.w	r3, [r3, #678]	; 0x2a6
		*ptuning_parm_value = (int32_t)(
 8005df4:	461a      	mov	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	601a      	str	r2, [r3, #0]
	break;
 8005dfa:	f000 bc8a 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	f9b3 32a8 	ldrsh.w	r3, [r3, #680]	; 0x2a8
		*ptuning_parm_value = (int32_t)(
 8005e04:	461a      	mov	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	601a      	str	r2, [r3, #0]
	break;
 8005e0a:	f000 bc82 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8005e14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	601a      	str	r2, [r3, #0]
	break;
 8005e1a:	f000 bc7a 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	601a      	str	r2, [r3, #0]
	break;
 8005e28:	f000 bc73 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
		*ptuning_parm_value = (int32_t)(
 8005e32:	461a      	mov	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	601a      	str	r2, [r3, #0]
	break;
 8005e38:	f000 bc6b 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	601a      	str	r2, [r3, #0]
	break;
 8005e48:	f000 bc63 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	f9b3 329e 	ldrsh.w	r3, [r3, #670]	; 0x29e
 8005e52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	601a      	str	r2, [r3, #0]
	break;
 8005e58:	f000 bc5b 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8005e62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	601a      	str	r2, [r3, #0]
	break;
 8005e68:	f000 bc53 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8005e72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	601a      	str	r2, [r3, #0]
	break;
 8005e78:	f000 bc4b 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8005e82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	601a      	str	r2, [r3, #0]
	break;
 8005e88:	f000 bc43 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8005e92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	601a      	str	r2, [r3, #0]
	break;
 8005e98:	f000 bc3b 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8005ea2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	601a      	str	r2, [r3, #0]
	break;
 8005ea8:	f000 bc33 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 8005eb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	601a      	str	r2, [r3, #0]
	break;
 8005eb8:	f000 bc2b 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8005ec2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	601a      	str	r2, [r3, #0]
	break;
 8005ec8:	f000 bc23 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	f8b3 3114 	ldrh.w	r3, [r3, #276]	; 0x114
 8005ed2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	601a      	str	r2, [r3, #0]
	break;
 8005ed8:	f000 bc1b 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	f8b3 3116 	ldrh.w	r3, [r3, #278]	; 0x116
		*ptuning_parm_value = (int32_t)(
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	601a      	str	r2, [r3, #0]
	break;
 8005ee8:	f000 bc13 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8005ef2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	601a      	str	r2, [r3, #0]
	break;
 8005ef8:	f000 bc0b 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
		*ptuning_parm_value = (int32_t)(
 8005f02:	461a      	mov	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	601a      	str	r2, [r3, #0]
	break;
 8005f08:	f000 bc03 	b.w	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8005f12:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	601a      	str	r2, [r3, #0]
	break;
 8005f18:	e3fb      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 8005f20:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	601a      	str	r2, [r3, #0]
	break;
 8005f26:	e3f4      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8005f2e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]
	break;
 8005f34:	e3ed      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 8005f3c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	601a      	str	r2, [r3, #0]
	break;
 8005f42:	e3e6      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 8005f4a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	601a      	str	r2, [r3, #0]
	break;
 8005f50:	e3df      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8005f58:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	601a      	str	r2, [r3, #0]
	break;
 8005f5e:	e3d8      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8005f66:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	601a      	str	r2, [r3, #0]
	break;
 8005f6c:	e3d1      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	f9b3 32a0 	ldrsh.w	r3, [r3, #672]	; 0x2a0
 8005f74:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	601a      	str	r2, [r3, #0]
	break;
 8005f7a:	e3ca      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8005f82:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	601a      	str	r2, [r3, #0]
	break;
 8005f88:	e3c3      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8005f90:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	601a      	str	r2, [r3, #0]
	break;
 8005f96:	e3bc      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8005f9e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	601a      	str	r2, [r3, #0]
	break;
 8005fa4:	e3b5      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005fac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	601a      	str	r2, [r3, #0]
	break;
 8005fb2:	e3ae      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8005fba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	601a      	str	r2, [r3, #0]
	break;
 8005fc0:	e3a7      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8005fc8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	601a      	str	r2, [r3, #0]
	break;
 8005fce:	e3a0      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8005fd6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	601a      	str	r2, [r3, #0]
	break;
 8005fdc:	e399      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	f893 3254 	ldrb.w	r3, [r3, #596]	; 0x254
 8005fe4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	601a      	str	r2, [r3, #0]
	break;
 8005fea:	e392      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	f8b3 3260 	ldrh.w	r3, [r3, #608]	; 0x260
 8005ff2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	601a      	str	r2, [r3, #0]
	break;
 8005ff8:	e38b      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	f8b3 3262 	ldrh.w	r3, [r3, #610]	; 0x262
 8006000:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	601a      	str	r2, [r3, #0]
	break;
 8006006:	e384      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800600e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	601a      	str	r2, [r3, #0]
	break;
 8006014:	e37d      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	f8b3 3266 	ldrh.w	r3, [r3, #614]	; 0x266
 800601c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	601a      	str	r2, [r3, #0]
	break;
 8006022:	e376      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	f8b3 3268 	ldrh.w	r3, [r3, #616]	; 0x268
 800602a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	601a      	str	r2, [r3, #0]
	break;
 8006030:	e36f      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8006038:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	601a      	str	r2, [r3, #0]
	break;
 800603e:	e368      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8006046:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	601a      	str	r2, [r3, #0]
	break;
 800604c:	e361      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53LX_p_005;
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8006054:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	601a      	str	r2, [r3, #0]
	break;
 800605a:	e35a      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8006062:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	601a      	str	r2, [r3, #0]
	break;
 8006068:	e353      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8006070:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	601a      	str	r2, [r3, #0]
	break;
 8006076:	e34c      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800607e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	601a      	str	r2, [r3, #0]
	break;
 8006084:	e345      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800608c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	601a      	str	r2, [r3, #0]
	break;
 8006092:	e33e      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	7c1b      	ldrb	r3, [r3, #16]
 8006098:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	601a      	str	r2, [r3, #0]
	break;
 800609e:	e338      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80060a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	601a      	str	r2, [r3, #0]
	break;
 80060ac:	e331      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80060b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	601a      	str	r2, [r3, #0]
	break;
 80060ba:	e32a      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	601a      	str	r2, [r3, #0]
	break;
 80060c6:	e324      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	601a      	str	r2, [r3, #0]
	break;
 80060d2:	e31e      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	8adb      	ldrh	r3, [r3, #22]
 80060d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	601a      	str	r2, [r3, #0]
	break;
 80060de:	e318      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	8b1b      	ldrh	r3, [r3, #24]
 80060e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	601a      	str	r2, [r3, #0]
	break;
 80060ea:	e312      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	601a      	str	r2, [r3, #0]
	break;
 80060f6:	e30c      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	601a      	str	r2, [r3, #0]
	break;
 8006102:	e306      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800610a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	601a      	str	r2, [r3, #0]
	break;
 8006110:	e2ff      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006118:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	601a      	str	r2, [r3, #0]
	break;
 800611e:	e2f8      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006126:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	601a      	str	r2, [r3, #0]
	break;
 800612c:	e2f1      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006134:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	601a      	str	r2, [r3, #0]
	break;
 800613a:	e2ea      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	f893 32c0 	ldrb.w	r3, [r3, #704]	; 0x2c0
 8006142:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	601a      	str	r2, [r3, #0]
	break;
 8006148:	e2e3      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
 8006150:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	601a      	str	r2, [r3, #0]
	break;
 8006156:	e2dc      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
 800615e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	601a      	str	r2, [r3, #0]
	break;
 8006164:	e2d5      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	f8b3 32c4 	ldrh.w	r3, [r3, #708]	; 0x2c4
 800616c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	601a      	str	r2, [r3, #0]
	break;
 8006172:	e2ce      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800617a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	601a      	str	r2, [r3, #0]
	break;
 8006180:	e2c7      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006188:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	601a      	str	r2, [r3, #0]
	break;
 800618e:	e2c0      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f8b3 32d4 	ldrh.w	r3, [r3, #724]	; 0x2d4
 8006196:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	601a      	str	r2, [r3, #0]
	break;
 800619c:	e2b9      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80061a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	601a      	str	r2, [r3, #0]
	break;
 80061aa:	e2b2      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	f8b3 32d6 	ldrh.w	r3, [r3, #726]	; 0x2d6
 80061b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	601a      	str	r2, [r3, #0]
	break;
 80061b8:	e2ab      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53LX_p_005;
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 80061c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	601a      	str	r2, [r3, #0]
	break;
 80061c6:	e2a4      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 80061ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	601a      	str	r2, [r3, #0]
	break;
 80061d4:	e29d      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80061dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	601a      	str	r2, [r3, #0]
	break;
 80061e2:	e296      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 80061ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	601a      	str	r2, [r3, #0]
	break;
 80061f0:	e28f      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	f8b3 3126 	ldrh.w	r3, [r3, #294]	; 0x126
 80061f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	601a      	str	r2, [r3, #0]
	break;
 80061fe:	e288      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 8006206:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	601a      	str	r2, [r3, #0]
	break;
 800620c:	e281      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8006214:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	601a      	str	r2, [r3, #0]
	break;
 800621a:	e27a      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8006222:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	601a      	str	r2, [r3, #0]
	break;
 8006228:	e273      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8006230:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	601a      	str	r2, [r3, #0]
	break;
 8006236:	e26c      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800623e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	601a      	str	r2, [r3, #0]
	break;
 8006244:	e265      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800624c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	601a      	str	r2, [r3, #0]
	break;
 8006252:	e25e      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800625a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	601a      	str	r2, [r3, #0]
	break;
 8006260:	e257      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006268:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	601a      	str	r2, [r3, #0]
	break;
 800626e:	e250      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8006276:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	601a      	str	r2, [r3, #0]
	break;
 800627c:	e249      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006284:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	601a      	str	r2, [r3, #0]
	break;
 800628a:	e242      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8006292:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	601a      	str	r2, [r3, #0]
	break;
 8006298:	e23b      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80062a0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	601a      	str	r2, [r3, #0]
	break;
 80062a6:	e234      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80062ae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	601a      	str	r2, [r3, #0]
	break;
 80062b4:	e22d      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80062bc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	601a      	str	r2, [r3, #0]
	break;
 80062c2:	e226      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80062ca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	601a      	str	r2, [r3, #0]
	break;
 80062d0:	e21f      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80062d8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	601a      	str	r2, [r3, #0]
	break;
 80062de:	e218      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80062e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	601a      	str	r2, [r3, #0]
	break;
 80062ec:	e211      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80062f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	601a      	str	r2, [r3, #0]
	break;
 80062fa:	e20a      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006302:	3318      	adds	r3, #24
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	601a      	str	r2, [r3, #0]
	break;
 800630c:	e201      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006314:	331c      	adds	r3, #28
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	601a      	str	r2, [r3, #0]
	break;
 800631e:	e1f8      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	601a      	str	r2, [r3, #0]
	break;
 800632e:	e1f0      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006336:	3304      	adds	r3, #4
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	601a      	str	r2, [r3, #0]
	break;
 8006340:	e1e7      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006348:	3308      	adds	r3, #8
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	601a      	str	r2, [r3, #0]
	break;
 8006352:	e1de      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800635a:	330c      	adds	r3, #12
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	601a      	str	r2, [r3, #0]
	break;
 8006364:	e1d5      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800636c:	3310      	adds	r3, #16
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	601a      	str	r2, [r3, #0]
	break;
 8006376:	e1cc      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800637e:	3314      	adds	r3, #20
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	601a      	str	r2, [r3, #0]
	break;
 8006388:	e1c3      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8006390:	331c      	adds	r3, #28
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	601a      	str	r2, [r3, #0]
	break;
 800639a:	e1ba      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80063a2:	331e      	adds	r3, #30
 80063a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	601a      	str	r2, [r3, #0]
	break;
 80063ae:	e1b0      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80063b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	601a      	str	r2, [r3, #0]
	break;
 80063c0:	e1a7      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80063c8:	3302      	adds	r3, #2
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	601a      	str	r2, [r3, #0]
	break;
 80063d2:	e19e      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80063da:	3316      	adds	r3, #22
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	601a      	str	r2, [r3, #0]
	break;
 80063e4:	e195      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80063ec:	3318      	adds	r3, #24
 80063ee:	681b      	ldr	r3, [r3, #0]
		*ptuning_parm_value = (int32_t)(
 80063f0:	461a      	mov	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	601a      	str	r2, [r3, #0]
	break;
 80063f6:	e18c      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80063fe:	3304      	adds	r3, #4
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	601a      	str	r2, [r3, #0]
	break;
 8006408:	e183      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006410:	3308      	adds	r3, #8
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	601a      	str	r2, [r3, #0]
	break;
 800641a:	e17a      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006422:	330c      	adds	r3, #12
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	601a      	str	r2, [r3, #0]
	break;
 800642c:	e171      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 8006434:	3310      	adds	r3, #16
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	601a      	str	r2, [r3, #0]
	break;
 800643e:	e168      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 8006446:	3310      	adds	r3, #16
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	601a      	str	r2, [r3, #0]
	break;
 8006450:	e15f      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006458:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	601a      	str	r2, [r3, #0]
	break;
 800645e:	e158      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8006466:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	601a      	str	r2, [r3, #0]
	break;
 800646c:	e151      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	f8b3 312c 	ldrh.w	r3, [r3, #300]	; 0x12c
 8006474:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	601a      	str	r2, [r3, #0]
	break;
 800647a:	e14a      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8006482:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	601a      	str	r2, [r3, #0]
	break;
 8006488:	e143      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8006490:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	601a      	str	r2, [r3, #0]
	break;
 8006496:	e13c      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800649e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	601a      	str	r2, [r3, #0]
	break;
 80064a4:	e135      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 80064ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	601a      	str	r2, [r3, #0]
	break;
 80064b2:	e12e      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 80064ba:	3314      	adds	r3, #20
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	601a      	str	r2, [r3, #0]
	break;
 80064c4:	e125      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>

	case VL53LX_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	f893 3185 	ldrb.w	r3, [r3, #389]	; 0x185
 80064cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	601a      	str	r2, [r3, #0]
	break;
 80064d2:	e11e      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	f9b3 3186 	ldrsh.w	r3, [r3, #390]	; 0x186
 80064da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	601a      	str	r2, [r3, #0]
	break;
 80064e0:	e117      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	; 0x188
 80064e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	601a      	str	r2, [r3, #0]
	break;
 80064ee:	e110      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	; 0x18a
 80064f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	601a      	str	r2, [r3, #0]
	break;
 80064fc:	e109      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	; 0x18c
 8006504:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	601a      	str	r2, [r3, #0]
	break;
 800650a:	e102      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	; 0x18e
 8006512:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	601a      	str	r2, [r3, #0]
	break;
 8006518:	e0fb      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	f9b3 3190 	ldrsh.w	r3, [r3, #400]	; 0x190
 8006520:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	601a      	str	r2, [r3, #0]
	break;
 8006526:	e0f4      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 800652e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	601a      	str	r2, [r3, #0]
	break;
 8006534:	e0ed      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	f9b3 3194 	ldrsh.w	r3, [r3, #404]	; 0x194
 800653c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	601a      	str	r2, [r3, #0]
	break;
 8006542:	e0e6      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	f9b3 3196 	ldrsh.w	r3, [r3, #406]	; 0x196
 800654a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	601a      	str	r2, [r3, #0]
	break;
 8006550:	e0df      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	f9b3 3198 	ldrsh.w	r3, [r3, #408]	; 0x198
 8006558:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	601a      	str	r2, [r3, #0]
	break;
 800655e:	e0d8      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	f9b3 319a 	ldrsh.w	r3, [r3, #410]	; 0x19a
 8006566:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	601a      	str	r2, [r3, #0]
	break;
 800656c:	e0d1      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	f9b3 319c 	ldrsh.w	r3, [r3, #412]	; 0x19c
 8006574:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	601a      	str	r2, [r3, #0]
	break;
 800657a:	e0ca      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	f9b3 319e 	ldrsh.w	r3, [r3, #414]	; 0x19e
 8006582:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	601a      	str	r2, [r3, #0]
	break;
 8006588:	e0c3      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	f9b3 31a0 	ldrsh.w	r3, [r3, #416]	; 0x1a0
 8006590:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	601a      	str	r2, [r3, #0]
	break;
 8006596:	e0bc      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f9b3 31a2 	ldrsh.w	r3, [r3, #418]	; 0x1a2
 800659e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	601a      	str	r2, [r3, #0]
	break;
 80065a4:	e0b5      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	f9b3 31a4 	ldrsh.w	r3, [r3, #420]	; 0x1a4
 80065ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	601a      	str	r2, [r3, #0]
	break;
 80065b2:	e0ae      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	f9b3 31a6 	ldrsh.w	r3, [r3, #422]	; 0x1a6
 80065ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	601a      	str	r2, [r3, #0]
	break;
 80065c0:	e0a7      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	f9b3 31a8 	ldrsh.w	r3, [r3, #424]	; 0x1a8
 80065c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	601a      	str	r2, [r3, #0]
	break;
 80065ce:	e0a0      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	f9b3 31aa 	ldrsh.w	r3, [r3, #426]	; 0x1aa
 80065d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	601a      	str	r2, [r3, #0]
	break;
 80065dc:	e099      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	f9b3 31ac 	ldrsh.w	r3, [r3, #428]	; 0x1ac
 80065e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	601a      	str	r2, [r3, #0]
	break;
 80065ea:	e092      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	f9b3 31ae 	ldrsh.w	r3, [r3, #430]	; 0x1ae
 80065f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	601a      	str	r2, [r3, #0]
	break;
 80065f8:	e08b      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	f9b3 31b0 	ldrsh.w	r3, [r3, #432]	; 0x1b0
 8006600:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	601a      	str	r2, [r3, #0]
	break;
 8006606:	e084      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	; 0x1b2
 800660e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	601a      	str	r2, [r3, #0]
	break;
 8006614:	e07d      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	f9b3 31b4 	ldrsh.w	r3, [r3, #436]	; 0x1b4
 800661c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	601a      	str	r2, [r3, #0]
	break;
 8006622:	e076      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	f9b3 31b6 	ldrsh.w	r3, [r3, #438]	; 0x1b6
 800662a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	601a      	str	r2, [r3, #0]
	break;
 8006630:	e06f      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	f9b3 31b8 	ldrsh.w	r3, [r3, #440]	; 0x1b8
 8006638:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	601a      	str	r2, [r3, #0]
	break;
 800663e:	e068      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	f9b3 31ba 	ldrsh.w	r3, [r3, #442]	; 0x1ba
 8006646:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	601a      	str	r2, [r3, #0]
	break;
 800664c:	e061      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	f9b3 31bc 	ldrsh.w	r3, [r3, #444]	; 0x1bc
 8006654:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	601a      	str	r2, [r3, #0]
	break;
 800665a:	e05a      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 8006662:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	601a      	str	r2, [r3, #0]
	break;
 8006668:	e053      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 8006670:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	601a      	str	r2, [r3, #0]
	break;
 8006676:	e04c      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 800667e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	601a      	str	r2, [r3, #0]
	break;
 8006684:	e045      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 800668c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	601a      	str	r2, [r3, #0]
	break;
 8006692:	e03e      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 800669a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	601a      	str	r2, [r3, #0]
	break;
 80066a0:	e037      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 80066a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	601a      	str	r2, [r3, #0]
	break;
 80066ae:	e030      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 80066b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	601a      	str	r2, [r3, #0]
	break;
 80066bc:	e029      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 80066c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	601a      	str	r2, [r3, #0]
	break;
 80066ca:	e022      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 80066d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	601a      	str	r2, [r3, #0]
	break;
 80066d8:	e01b      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 80066e0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	601a      	str	r2, [r3, #0]
	break;
 80066e6:	e014      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 80066ee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	601a      	str	r2, [r3, #0]
	break;
 80066f4:	e00d      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>
	case VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 80066fc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	601a      	str	r2, [r3, #0]
	break;
 8006702:	e006      	b.n	8006712 <VL53LX_get_tuning_parm+0xdd6>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800670a:	601a      	str	r2, [r3, #0]
		status = VL53LX_ERROR_INVALID_PARAMS;
 800670c:	23fc      	movs	r3, #252	; 0xfc
 800670e:	77fb      	strb	r3, [r7, #31]
	break;
 8006710:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006712:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3724      	adds	r7, #36	; 0x24
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop

08006724 <VL53LX_dynamic_xtalk_correction_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_enable(
	VL53LX_DEV                          Dev
	)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800672c:	2300      	movs	r3, #0
 800672e:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3318      	adds	r3, #24
 8006734:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800673c:	3314      	adds	r3, #20
 800673e:	2201      	movs	r2, #1
 8006740:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006742:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <VL53LX_dynamic_xtalk_correction_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_disable(
	VL53LX_DEV                          Dev
	)
{
 8006752:	b480      	push	{r7}
 8006754:	b085      	sub	sp, #20
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800675a:	2300      	movs	r3, #0
 800675c:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	3318      	adds	r3, #24
 8006762:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800676a:	3314      	adds	r3, #20
 800676c:	2200      	movs	r2, #0
 800676e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006770:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <VL53LX_dynamic_xtalk_correction_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006788:	2300      	movs	r3, #0
 800678a:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3318      	adds	r3, #24
 8006790:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006798:	3315      	adds	r3, #21
 800679a:	2200      	movs	r2, #0
 800679c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800679e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <VL53LX_dynamic_xtalk_correction_single_apply_enable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b085      	sub	sp, #20
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80067b6:	2300      	movs	r3, #0
 80067b8:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3318      	adds	r3, #24
 80067be:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80067c6:	3316      	adds	r3, #22
 80067c8:	2201      	movs	r2, #1
 80067ca:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80067cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <VL53LX_dynamic_xtalk_correction_single_apply_disable>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_single_apply_disable(
	VL53LX_DEV                          Dev
	)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80067e4:	2300      	movs	r3, #0
 80067e6:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3318      	adds	r3, #24
 80067ec:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80067f4:	3316      	adds	r3, #22
 80067f6:	2200      	movs	r2, #0
 80067f8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80067fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <VL53LX_dynamic_xtalk_correction_apply_enable>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_apply_enable(
	VL53LX_DEV                          Dev
	)
{
 800680a:	b480      	push	{r7}
 800680c:	b085      	sub	sp, #20
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006812:	2300      	movs	r3, #0
 8006814:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3318      	adds	r3, #24
 800681a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8006822:	3315      	adds	r3, #21
 8006824:	2201      	movs	r2, #1
 8006826:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8006828:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <VL53LX_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53LX_Error VL53LX_init_refspadchar_config_struct(
	VL53LX_refspadchar_config_t   *pdata)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006840:	2300      	movs	r3, #0
 8006842:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2208      	movs	r2, #8
 8006848:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53LX_p_005              =
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	220b      	movs	r2, #11
 800684e:	705a      	strb	r2, [r3, #1]
		VL53LX_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006856:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800685e:	811a      	strh	r2, [r3, #8]
		VL53LX_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8006866:	815a      	strh	r2, [r3, #10]
		VL53LX_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800686e:	819a      	strh	r2, [r3, #12]
		VL53LX_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006870:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <VL53LX_init_ssc_config_struct>:


VL53LX_Error VL53LX_init_ssc_config_struct(
	VL53LX_ssc_config_t   *pdata)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006888:	2300      	movs	r3, #0
 800688a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53LX_DEVICESSCARRAY_RTN;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	701a      	strb	r2, [r3, #0]


	pdata->VL53LX_p_005 =
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2212      	movs	r2, #18
 8006896:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	220f      	movs	r2, #15
 800689c:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2202      	movs	r2, #2
 80068a2:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80068aa:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	220c      	movs	r2, #12
 80068b0:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80068b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <VL53LX_init_xtalk_config_struct>:


VL53LX_Error VL53LX_init_xtalk_config_struct(
	VL53LX_customer_nvm_managed_t *pnvm,
	VL53LX_xtalk_config_t   *pdata)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80068cc:	2300      	movs	r3, #0
 80068ce:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	895b      	ldrh	r3, [r3, #10]
 80068d4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	895b      	ldrh	r3, [r3, #10]
 80068f2:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2200      	movs	r2, #0
 8006910:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2200      	movs	r2, #0
 8006916:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2240      	movs	r2, #64	; 0x40
 800691c:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10d      	bne.n	8006942 <VL53LX_init_xtalk_config_struct+0x80>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d108      	bne.n	8006942 <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d103      	bne.n	8006942 <VL53LX_init_xtalk_config_struct+0x80>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2200      	movs	r2, #0
 800693e:	741a      	strb	r2, [r3, #16]
 8006940:	e002      	b.n	8006948 <VL53LX_init_xtalk_config_struct+0x86>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2201      	movs	r2, #1
 8006946:	741a      	strb	r2, [r3, #16]


	if ((status == VL53LX_ERROR_NONE) &&
 8006948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d114      	bne.n	800697a <VL53LX_init_xtalk_config_struct+0xb8>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53LX_ERROR_NONE) &&
 8006954:	2b01      	cmp	r3, #1
 8006956:	d110      	bne.n	800697a <VL53LX_init_xtalk_config_struct+0xb8>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53LX_calc_range_ignore_threshold(
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	6818      	ldr	r0, [r3, #0]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	7d9b      	ldrb	r3, [r3, #22]
 800696c:	f001 ffa0 	bl	80088b0 <VL53LX_calc_range_ignore_threshold>
 8006970:	4603      	mov	r3, r0
 8006972:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	831a      	strh	r2, [r3, #24]
 8006978:	e002      	b.n	8006980 <VL53LX_init_xtalk_config_struct+0xbe>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2200      	movs	r2, #0
 800697e:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8006986:	835a      	strh	r2, [r3, #26]
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2232      	movs	r2, #50	; 0x32
 800698c:	839a      	strh	r2, [r3, #28]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006994:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	228c      	movs	r2, #140	; 0x8c
 800699a:	841a      	strh	r2, [r3, #32]
			VL53LX_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800699c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <VL53LX_init_xtalk_extract_config_struct>:

VL53LX_Error VL53LX_init_xtalk_extract_config_struct(
	VL53LX_xtalkextract_config_t   *pdata)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80069b0:	2300      	movs	r3, #0
 80069b2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80069ba:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80069c2:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2207      	movs	r2, #7
 80069c8:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f643 2298 	movw	r2, #15000	; 0x3a98
 80069d0:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80069d8:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f64f 72ba 	movw	r2, #65466	; 0xffba
 80069e0:	825a      	strh	r2, [r3, #18]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2246      	movs	r2, #70	; 0x46
 80069e6:	829a      	strh	r2, [r3, #20]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80069ee:	82da      	strh	r2, [r3, #22]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	228c      	movs	r2, #140	; 0x8c
 80069f4:	831a      	strh	r2, [r3, #24]
		VL53LX_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 80069f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <VL53LX_init_offset_cal_config_struct>:


VL53LX_Error VL53LX_init_offset_cal_config_struct(
	VL53LX_offsetcal_config_t   *pdata)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b085      	sub	sp, #20
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006a18:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006a20:	605a      	str	r2, [r3, #4]
		VL53LX_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006a28:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006a30:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2208      	movs	r2, #8
 8006a36:	741a      	strb	r2, [r3, #16]
			VL53LX_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2228      	movs	r2, #40	; 0x28
 8006a3c:	745a      	strb	r2, [r3, #17]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2209      	movs	r2, #9
 8006a42:	749a      	strb	r2, [r3, #18]
			VL53LX_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <VL53LX_init_zone_cal_config_struct>:

VL53LX_Error VL53LX_init_zone_cal_config_struct(
	VL53LX_zonecal_config_t   *pdata)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006a66:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006a6e:	605a      	str	r2, [r3, #4]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a76:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006a7e:	609a      	str	r2, [r3, #8]
			VL53LX_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2210      	movs	r2, #16
 8006a84:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2208      	movs	r2, #8
 8006a8a:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <VL53LX_init_hist_post_process_config_struct>:


VL53LX_Error VL53LX_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53LX_hist_post_process_config_t   *pdata)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	6039      	str	r1, [r7, #0]
 8006aa6:	71fb      	strb	r3, [r7, #7]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2204      	movs	r2, #4
 8006ab0:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	705a      	strb	r2, [r3, #1]
			VL53LX_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2201      	movs	r2, #1
 8006abc:	709a      	strb	r2, [r3, #2]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	70da      	strb	r2, [r3, #3]
			VL53LX_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	711a      	strb	r2, [r3, #4]
			VL53LX_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2250      	movs	r2, #80	; 0x50
 8006ace:	715a      	strb	r2, [r3, #5]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	2264      	movs	r2, #100	; 0x64
 8006ad4:	719a      	strb	r2, [r3, #6]
			VL53LX_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	f241 023d 	movw	r2, #4157	; 0x103d
 8006adc:	811a      	strh	r2, [r3, #8]
			VL53LX_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2210      	movs	r2, #16
 8006ae2:	60da      	str	r2, [r3, #12]
			VL53LX_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2232      	movs	r2, #50	; 0x32
 8006ae8:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2264      	movs	r2, #100	; 0x64
 8006aee:	615a      	str	r2, [r3, #20]
		VL53LX_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2201      	movs	r2, #1
 8006af4:	761a      	strb	r2, [r3, #24]
		VL53LX_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	22b4      	movs	r2, #180	; 0xb4
 8006afa:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2200      	movs	r2, #0
 8006b00:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8006b08:	83da      	strh	r2, [r3, #30]
			VL53LX_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2208      	movs	r2, #8
 8006b0e:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2288      	movs	r2, #136	; 0x88
 8006b16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2208      	movs	r2, #8
 8006b1e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b30:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53LX_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2200      	movs	r2, #0
 8006b36:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53LX_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	79fa      	ldrb	r2, [r7, #7]
 8006b3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8006b46:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2232      	movs	r2, #50	; 0x32
 8006b4c:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006b54:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	228c      	movs	r2, #140	; 0x8c
 8006b5a:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2250      	movs	r2, #80	; 0x50
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53LX_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	2232      	movs	r2, #50	; 0x32
 8006b68:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 8006b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <VL53LX_init_tuning_parm_storage_struct>:
}


VL53LX_Error VL53LX_init_tuning_parm_storage_struct(
	VL53LX_tuning_parm_storage_t   *pdata)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	221e      	movs	r2, #30
 8006b8a:	801a      	strh	r2, [r3, #0]
			VL53LX_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	220e      	movs	r2, #14
 8006b90:	805a      	strh	r2, [r3, #2]
			VL53LX_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f642 7294 	movw	r2, #12180	; 0x2f94
 8006b98:	809a      	strh	r2, [r3, #4]
			VL53LX_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	220e      	movs	r2, #14
 8006b9e:	719a      	strb	r2, [r3, #6]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	220a      	movs	r2, #10
 8006ba4:	71da      	strb	r2, [r3, #7]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2206      	movs	r2, #6
 8006baa:	721a      	strb	r2, [r3, #8]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	220e      	movs	r2, #14
 8006bb0:	725a      	strb	r2, [r3, #9]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	220a      	movs	r2, #10
 8006bb6:	729a      	strb	r2, [r3, #10]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2206      	movs	r2, #6
 8006bbc:	72da      	strb	r2, [r3, #11]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2209      	movs	r2, #9
 8006bc2:	731a      	strb	r2, [r3, #12]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2205      	movs	r2, #5
 8006bc8:	735a      	strb	r2, [r3, #13]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2203      	movs	r2, #3
 8006bce:	739a      	strb	r2, [r3, #14]
		VL53LX_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2206      	movs	r2, #6
 8006bd4:	73da      	strb	r2, [r3, #15]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2206      	movs	r2, #6
 8006bda:	741a      	strb	r2, [r3, #16]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2206      	movs	r2, #6
 8006be0:	745a      	strb	r2, [r3, #17]
		VL53LX_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2202      	movs	r2, #2
 8006be6:	749a      	strb	r2, [r3, #18]
		VL53LX_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2221      	movs	r2, #33	; 0x21
 8006bec:	74da      	strb	r2, [r3, #19]
			VL53LX_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	759a      	strb	r2, [r3, #22]
			VL53LX_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	223c      	movs	r2, #60	; 0x3c
 8006bfe:	831a      	strh	r2, [r3, #24]
			VL53LX_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	223c      	movs	r2, #60	; 0x3c
 8006c04:	835a      	strh	r2, [r3, #26]
			VL53LX_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	223c      	movs	r2, #60	; 0x3c
 8006c0a:	839a      	strh	r2, [r3, #28]
			VL53LX_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2280      	movs	r2, #128	; 0x80
 8006c10:	83da      	strh	r2, [r3, #30]
		VL53LX_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2280      	movs	r2, #128	; 0x80
 8006c16:	841a      	strh	r2, [r3, #32]
		VL53LX_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2280      	movs	r2, #128	; 0x80
 8006c1c:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53LX_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2208      	movs	r2, #8
 8006c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2210      	movs	r2, #16
 8006c2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53LX_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53LX_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53LX_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53LX_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2202      	movs	r2, #2
 8006c4a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53LX_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53LX_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;
	pdata->tp_uwr_enable =
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53LX_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006c64:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f640 22be 	movw	r2, #2750	; 0xabe
 8006c6e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	22fa      	movs	r2, #250	; 0xfa
 8006c76:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c80:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006c8a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8006c94:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006c9e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8006ca8:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f64f 7238 	movw	r2, #65336	; 0xff38
 8006cb2:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	22c8      	movs	r2, #200	; 0xc8
 8006cba:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53LX_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8006cc4:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8006cd6:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f640 32ea 	movw	r2, #3050	; 0xbea
 8006ce0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8006cea:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f640 32ea 	movw	r2, #3050	; 0xbea
 8006cf4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8006cfe:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f641 0238 	movw	r2, #6200	; 0x1838
 8006d08:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53LX_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	22fa      	movs	r2, #250	; 0xfa
 8006d20:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006d2a:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8006d34:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f241 1294 	movw	r2, #4500	; 0x1194
 8006d3e:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f64f 7238 	movw	r2, #65336	; 0xff38
 8006d48:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	22c8      	movs	r2, #200	; 0xc8
 8006d50:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53LX_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f640 720a 	movw	r2, #3850	; 0xf0a
 8006d7a:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f241 12f8 	movw	r2, #4600	; 0x11f8
 8006d84:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f640 720a 	movw	r2, #3850	; 0xf0a
 8006d8e:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53LX_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006dd0:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53LX_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006dd8:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53LX_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006de0:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53LX_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006de8:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53LX_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006df0:	639a      	str	r2, [r3, #56]	; 0x38
		VL53LX_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006df8:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53LX_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f242 3228 	movw	r2, #9000	; 0x2328
 8006e00:	641a      	str	r2, [r3, #64]	; 0x40
	VL53LX_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f241 7270 	movw	r2, #6000	; 0x1770
 8006e08:	645a      	str	r2, [r3, #68]	; 0x44
	VL53LX_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006e10:	649a      	str	r2, [r3, #72]	; 0x48
	VL53LX_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f242 3228 	movw	r2, #9000	; 0x2328
 8006e18:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53LX_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f241 7270 	movw	r2, #6000	; 0x1770
 8006e20:	651a      	str	r2, [r3, #80]	; 0x50
		VL53LX_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e28:	655a      	str	r2, [r3, #84]	; 0x54
		VL53LX_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006e30:	659a      	str	r2, [r3, #88]	; 0x58
			VL53LX_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006e38:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53LX_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006e40:	661a      	str	r2, [r3, #96]	; 0x60
			VL53LX_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006e48:	665a      	str	r2, [r3, #100]	; 0x64
			VL53LX_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f24f 6218 	movw	r2, #63000	; 0xf618
 8006e50:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53LX_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006e58:	671a      	str	r2, [r3, #112]	; 0x70
		VL53LX_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006e60:	675a      	str	r2, [r3, #116]	; 0x74
			VL53LX_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006e68:	679a      	str	r2, [r3, #120]	; 0x78
		VL53LX_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	669a      	str	r2, [r3, #104]	; 0x68
		VL53LX_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006e76:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53LX_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006e7e:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53LX_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53LX_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53LX_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006e96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53LX_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2206      	movs	r2, #6
 8006e9e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53LX_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <VL53LX_init_hist_gen3_dmax_config_struct>:


VL53LX_Error VL53LX_init_hist_gen3_dmax_config_struct(
	VL53LX_hist_gen3_dmax_config_t   *pdata)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b085      	sub	sp, #20
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006ec4:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2238      	movs	r2, #56	; 0x38
 8006eca:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	701a      	strb	r2, [r3, #0]
			VL53LX_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2270      	movs	r2, #112	; 0x70
 8006ed6:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2210      	movs	r2, #16
 8006edc:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2264      	movs	r2, #100	; 0x64
 8006ee2:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006eea:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	220f      	movs	r2, #15
 8006ef0:	819a      	strh	r2, [r3, #12]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2234      	movs	r2, #52	; 0x34
 8006ef6:	81da      	strh	r2, [r3, #14]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	22c8      	movs	r2, #200	; 0xc8
 8006efc:	821a      	strh	r2, [r3, #16]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006f04:	825a      	strh	r2, [r3, #18]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006f0c:	829a      	strh	r2, [r3, #20]
			VL53LX_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <VL53LX_preset_mode_standard_ranging>:
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic,
	VL53LX_system_control_t   *psystem,
	VL53LX_tuning_parm_storage_t *ptuning_parms,
	VL53LX_zone_config_t      *pzone_cfg)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b087      	sub	sp, #28
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
 8006f2a:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006f36:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2211      	movs	r2, #17
 8006f78:	731a      	strb	r2, [r3, #12]
			VL53LX_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53LX_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2202      	movs	r2, #2
 8006f8a:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2208      	movs	r2, #8
 8006f90:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8006f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8006fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fae:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	22ff      	movs	r2, #255	; 0xff
 8006fd2:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8006fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd6:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2220      	movs	r2, #32
 8007006:	709a      	strb	r2, [r3, #2]
			VL53LX_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	220b      	movs	r2, #11
 800700c:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800700e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007010:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2202      	movs	r2, #2
 800701a:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	220d      	movs	r2, #13
 8007020:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	729a      	strb	r2, [r3, #10]
			VL53LX_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8007048:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2238      	movs	r2, #56	; 0x38
 8007054:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	22ff      	movs	r2, #255	; 0xff
 800705a:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2200      	movs	r2, #0
 8007066:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	221a      	movs	r2, #26
 800706c:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2200      	movs	r2, #0
 8007072:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2220      	movs	r2, #32
 8007078:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2201      	movs	r2, #1
 800707e:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	22cc      	movs	r2, #204	; 0xcc
 8007084:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	220b      	movs	r2, #11
 800708a:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2201      	movs	r2, #1
 8007090:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	22f5      	movs	r2, #245	; 0xf5
 8007096:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2209      	movs	r2, #9
 800709c:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 80070a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a8:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2208      	movs	r2, #8
 80070b2:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2278      	movs	r2, #120	; 0x78
 80070b8:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2200      	movs	r2, #0
 80070be:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2200      	movs	r2, #0
 80070c4:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2207      	movs	r2, #7
 80070ca:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2221      	movs	r2, #33	; 0x21
 80070d0:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2243      	movs	r2, #67	; 0x43
 80070d6:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2210      	movs	r2, #16
 80070dc:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2232      	movs	r2, #50	; 0x32
 80070e2:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2254      	movs	r2, #84	; 0x54
 80070e8:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2207      	movs	r2, #7
 80070ee:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2221      	movs	r2, #33	; 0x21
 80070f4:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2243      	movs	r2, #67	; 0x43
 80070fa:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2210      	movs	r2, #16
 8007100:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2202      	movs	r2, #2
 8007106:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2243      	movs	r2, #67	; 0x43
 800710c:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2205      	movs	r2, #5
 8007112:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2200      	movs	r2, #0
 8007118:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2207      	movs	r2, #7
 800711e:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2221      	movs	r2, #33	; 0x21
 8007124:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2243      	movs	r2, #67	; 0x43
 800712a:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2210      	movs	r2, #16
 8007130:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2232      	movs	r2, #50	; 0x32
 8007136:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	2254      	movs	r2, #84	; 0x54
 800713c:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007144:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800714c:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2200      	movs	r2, #0
 8007152:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53LX_MAX_USER_ZONES;
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	2205      	movs	r2, #5
 8007158:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 800715a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715c:	2200      	movs	r2, #0
 800715e:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 8007160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007162:	220f      	movs	r2, #15
 8007164:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 8007166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007168:	220f      	movs	r2, #15
 800716a:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	2208      	movs	r2, #8
 8007170:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	2208      	movs	r2, #8
 8007176:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	2201      	movs	r2, #1
 800717c:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	2200      	movs	r2, #0
 8007182:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	2200      	movs	r2, #0
 8007188:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	2200      	movs	r2, #0
 800718e:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	220b      	movs	r2, #11
 800719e:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	2209      	movs	r2, #9
 80071a4:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 80071ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b0:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	2201      	movs	r2, #1
 80071ba:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 80071c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	22c7      	movs	r2, #199	; 0xc7
 80071d4:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	22ff      	movs	r2, #255	; 0xff
 80071da:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	22db      	movs	r2, #219	; 0xdb
 80071e0:	745a      	strb	r2, [r3, #17]
			VL53LX_SEQUENCE_DSS1_EN |
			VL53LX_SEQUENCE_DSS2_EN |
			VL53LX_SEQUENCE_MM2_EN |
			VL53LX_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	2202      	movs	r2, #2
 80071e6:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	2200      	movs	r2, #0
 80071ec:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	2201      	movs	r2, #1
 80071f2:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	2201      	movs	r2, #1
 80071f8:	70da      	strb	r2, [r3, #3]
			VL53LX_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fc:	2221      	movs	r2, #33	; 0x21
 80071fe:	711a      	strb	r2, [r3, #4]
			VL53LX_DEVICEREADOUTMODE_SINGLE_SD |
			VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8007200:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007204:	4618      	mov	r0, r3
 8007206:	371c      	adds	r7, #28
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <VL53LX_preset_mode_histogram_ranging>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b090      	sub	sp, #64	; 0x40
 8007214:	af0a      	add	r7, sp, #40	; 0x28
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
 800721c:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800721e:	2300      	movs	r3, #0
 8007220:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_standard_ranging(
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	9303      	str	r3, [sp, #12]
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	9302      	str	r3, [sp, #8]
 800722a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722c:	9301      	str	r3, [sp, #4]
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	68b8      	ldr	r0, [r7, #8]
 800723a:	f7ff fe70 	bl	8006f1e <VL53LX_preset_mode_standard_ranging>
 800723e:	4603      	mov	r3, r0
 8007240:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007242:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d171      	bne.n	800732e <VL53LX_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007250:	801a      	strh	r2, [r3, #0]



		VL53LX_init_histogram_config_structure(
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	9308      	str	r3, [sp, #32]
 8007256:	2305      	movs	r3, #5
 8007258:	9307      	str	r3, [sp, #28]
 800725a:	2304      	movs	r3, #4
 800725c:	9306      	str	r3, [sp, #24]
 800725e:	2303      	movs	r3, #3
 8007260:	9305      	str	r3, [sp, #20]
 8007262:	2302      	movs	r3, #2
 8007264:	9304      	str	r3, [sp, #16]
 8007266:	2301      	movs	r3, #1
 8007268:	9303      	str	r3, [sp, #12]
 800726a:	2300      	movs	r3, #0
 800726c:	9302      	str	r3, [sp, #8]
 800726e:	2304      	movs	r3, #4
 8007270:	9301      	str	r3, [sp, #4]
 8007272:	2303      	movs	r3, #3
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	2302      	movs	r3, #2
 8007278:	2201      	movs	r2, #1
 800727a:	2100      	movs	r1, #0
 800727c:	2007      	movs	r0, #7
 800727e:	f000 ffab 	bl	80081d8 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	3302      	adds	r3, #2
 8007286:	9308      	str	r3, [sp, #32]
 8007288:	2305      	movs	r3, #5
 800728a:	9307      	str	r3, [sp, #28]
 800728c:	2304      	movs	r3, #4
 800728e:	9306      	str	r3, [sp, #24]
 8007290:	2303      	movs	r3, #3
 8007292:	9305      	str	r3, [sp, #20]
 8007294:	2302      	movs	r3, #2
 8007296:	9304      	str	r3, [sp, #16]
 8007298:	2301      	movs	r3, #1
 800729a:	9303      	str	r3, [sp, #12]
 800729c:	2300      	movs	r3, #0
 800729e:	9302      	str	r3, [sp, #8]
 80072a0:	2304      	movs	r3, #4
 80072a2:	9301      	str	r3, [sp, #4]
 80072a4:	2303      	movs	r3, #3
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	2302      	movs	r3, #2
 80072aa:	2201      	movs	r2, #1
 80072ac:	2100      	movs	r1, #0
 80072ae:	2007      	movs	r0, #7
 80072b0:	f001 f822 	bl	80082f8 <VL53LX_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	2209      	movs	r2, #9
 80072b8:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 80072ba:	6a3b      	ldr	r3, [r7, #32]
 80072bc:	220b      	movs	r2, #11
 80072be:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	2209      	movs	r2, #9
 80072c4:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 80072c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c8:	220b      	movs	r2, #11
 80072ca:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	2200      	movs	r2, #0
 80072d0:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	2220      	movs	r2, #32
 80072d6:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	2200      	movs	r2, #0
 80072dc:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	221a      	movs	r2, #26
 80072e2:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	2200      	movs	r2, #0
 80072e8:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	2228      	movs	r2, #40	; 0x28
 80072ee:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	2200      	movs	r2, #0
 80072f4:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	2221      	movs	r2, #33	; 0x21
 80072fa:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	22f5      	movs	r2, #245	; 0xf5
 8007300:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2208      	movs	r2, #8
 8007306:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2288      	movs	r2, #136	; 0x88
 800730e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	68b9      	ldr	r1, [r7, #8]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 f9e6 	bl	80076ee <VL53LX_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	229b      	movs	r2, #155	; 0x9b
 8007326:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	2226      	movs	r2, #38	; 0x26
 800732c:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800732e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3718      	adds	r7, #24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <VL53LX_preset_mode_histogram_long_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b090      	sub	sp, #64	; 0x40
 800733e:	af0a      	add	r7, sp, #40	; 0x28
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	607a      	str	r2, [r7, #4]
 8007346:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007348:	2300      	movs	r3, #0
 800734a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	9304      	str	r3, [sp, #16]
 8007350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007352:	9303      	str	r3, [sp, #12]
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	9302      	str	r3, [sp, #8]
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	68b9      	ldr	r1, [r7, #8]
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f7ff ff52 	bl	8007210 <VL53LX_preset_mode_histogram_ranging>
 800736c:	4603      	mov	r3, r0
 800736e:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 8007370:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d178      	bne.n	800746a <VL53LX_preset_mode_histogram_long_range+0x130>





		VL53LX_init_histogram_config_structure(
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	9308      	str	r3, [sp, #32]
 800737c:	2305      	movs	r3, #5
 800737e:	9307      	str	r3, [sp, #28]
 8007380:	2304      	movs	r3, #4
 8007382:	9306      	str	r3, [sp, #24]
 8007384:	2303      	movs	r3, #3
 8007386:	9305      	str	r3, [sp, #20]
 8007388:	2302      	movs	r3, #2
 800738a:	9304      	str	r3, [sp, #16]
 800738c:	2301      	movs	r3, #1
 800738e:	9303      	str	r3, [sp, #12]
 8007390:	2300      	movs	r3, #0
 8007392:	9302      	str	r3, [sp, #8]
 8007394:	2304      	movs	r3, #4
 8007396:	9301      	str	r3, [sp, #4]
 8007398:	2303      	movs	r3, #3
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	2302      	movs	r3, #2
 800739e:	2201      	movs	r2, #1
 80073a0:	2100      	movs	r1, #0
 80073a2:	2007      	movs	r0, #7
 80073a4:	f000 ff18 	bl	80081d8 <VL53LX_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80073a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073aa:	3302      	adds	r3, #2
 80073ac:	9308      	str	r3, [sp, #32]
 80073ae:	2305      	movs	r3, #5
 80073b0:	9307      	str	r3, [sp, #28]
 80073b2:	2304      	movs	r3, #4
 80073b4:	9306      	str	r3, [sp, #24]
 80073b6:	2303      	movs	r3, #3
 80073b8:	9305      	str	r3, [sp, #20]
 80073ba:	2302      	movs	r3, #2
 80073bc:	9304      	str	r3, [sp, #16]
 80073be:	2301      	movs	r3, #1
 80073c0:	9303      	str	r3, [sp, #12]
 80073c2:	2300      	movs	r3, #0
 80073c4:	9302      	str	r3, [sp, #8]
 80073c6:	2304      	movs	r3, #4
 80073c8:	9301      	str	r3, [sp, #4]
 80073ca:	2303      	movs	r3, #3
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	2302      	movs	r3, #2
 80073d0:	2201      	movs	r2, #1
 80073d2:	2100      	movs	r1, #0
 80073d4:	2007      	movs	r0, #7
 80073d6:	f000 ff8f 	bl	80082f8 <VL53LX_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	68b9      	ldr	r1, [r7, #8]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f982 	bl	80076ee <VL53LX_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	2209      	movs	r2, #9
 80073ee:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	220b      	movs	r2, #11
 80073f4:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	2200      	movs	r2, #0
 80073fa:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	2221      	movs	r2, #33	; 0x21
 8007400:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	2200      	movs	r2, #0
 8007406:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	221b      	movs	r2, #27
 800740c:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	2200      	movs	r2, #0
 8007412:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	2229      	movs	r2, #41	; 0x29
 8007418:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	2200      	movs	r2, #0
 800741e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	2222      	movs	r2, #34	; 0x22
 8007424:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2209      	movs	r2, #9
 800742a:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	22f5      	movs	r2, #245	; 0xf5
 8007430:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	2209      	movs	r2, #9
 8007436:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	220b      	movs	r2, #11
 800743c:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 800743e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007440:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2208      	movs	r2, #8
 8007452:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2288      	movs	r2, #136	; 0x88
 800745a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	229b      	movs	r2, #155	; 0x9b
 8007462:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	2226      	movs	r2, #38	; 0x26
 8007468:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800746a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <VL53LX_preset_mode_histogram_medium_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b090      	sub	sp, #64	; 0x40
 800747a:	af0a      	add	r7, sp, #40	; 0x28
 800747c:	60f8      	str	r0, [r7, #12]
 800747e:	60b9      	str	r1, [r7, #8]
 8007480:	607a      	str	r2, [r7, #4]
 8007482:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8007484:	2300      	movs	r3, #0
 8007486:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 8007488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748a:	9304      	str	r3, [sp, #16]
 800748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748e:	9303      	str	r3, [sp, #12]
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	9302      	str	r3, [sp, #8]
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	9301      	str	r3, [sp, #4]
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	68b9      	ldr	r1, [r7, #8]
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f7ff feb4 	bl	8007210 <VL53LX_preset_mode_histogram_ranging>
 80074a8:	4603      	mov	r3, r0
 80074aa:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80074ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d178      	bne.n	80075a6 <VL53LX_preset_mode_histogram_medium_range+0x130>





		VL53LX_init_histogram_config_structure(
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	9308      	str	r3, [sp, #32]
 80074b8:	2303      	movs	r3, #3
 80074ba:	9307      	str	r3, [sp, #28]
 80074bc:	2302      	movs	r3, #2
 80074be:	9306      	str	r3, [sp, #24]
 80074c0:	2301      	movs	r3, #1
 80074c2:	9305      	str	r3, [sp, #20]
 80074c4:	2302      	movs	r3, #2
 80074c6:	9304      	str	r3, [sp, #16]
 80074c8:	2301      	movs	r3, #1
 80074ca:	9303      	str	r3, [sp, #12]
 80074cc:	2300      	movs	r3, #0
 80074ce:	9302      	str	r3, [sp, #8]
 80074d0:	2302      	movs	r3, #2
 80074d2:	9301      	str	r3, [sp, #4]
 80074d4:	2302      	movs	r3, #2
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	2301      	movs	r3, #1
 80074da:	2201      	movs	r2, #1
 80074dc:	2100      	movs	r1, #0
 80074de:	2007      	movs	r0, #7
 80074e0:	f000 fe7a 	bl	80081d8 <VL53LX_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	3302      	adds	r3, #2
 80074e8:	9308      	str	r3, [sp, #32]
 80074ea:	2303      	movs	r3, #3
 80074ec:	9307      	str	r3, [sp, #28]
 80074ee:	2302      	movs	r3, #2
 80074f0:	9306      	str	r3, [sp, #24]
 80074f2:	2301      	movs	r3, #1
 80074f4:	9305      	str	r3, [sp, #20]
 80074f6:	2302      	movs	r3, #2
 80074f8:	9304      	str	r3, [sp, #16]
 80074fa:	2301      	movs	r3, #1
 80074fc:	9303      	str	r3, [sp, #12]
 80074fe:	2300      	movs	r3, #0
 8007500:	9302      	str	r3, [sp, #8]
 8007502:	2302      	movs	r3, #2
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	2302      	movs	r3, #2
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	2301      	movs	r3, #1
 800750c:	2201      	movs	r2, #1
 800750e:	2100      	movs	r1, #0
 8007510:	2007      	movs	r0, #7
 8007512:	f000 fef1 	bl	80082f8 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	68b9      	ldr	r1, [r7, #8]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f8e4 	bl	80076ee <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	2205      	movs	r2, #5
 800752a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	2207      	movs	r2, #7
 8007530:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	2200      	movs	r2, #0
 8007536:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	2236      	movs	r2, #54	; 0x36
 800753c:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	2200      	movs	r2, #0
 8007542:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	2228      	movs	r2, #40	; 0x28
 8007548:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800754a:	6a3b      	ldr	r3, [r7, #32]
 800754c:	2200      	movs	r2, #0
 800754e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	2244      	movs	r2, #68	; 0x44
 8007554:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	2200      	movs	r2, #0
 800755a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	2233      	movs	r2, #51	; 0x33
 8007560:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	2205      	movs	r2, #5
 8007566:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	22f5      	movs	r2, #245	; 0xf5
 800756c:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	2205      	movs	r2, #5
 8007572:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	2207      	movs	r2, #7
 8007578:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 800757a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757c:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2208      	movs	r2, #8
 800758e:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2248      	movs	r2, #72	; 0x48
 8007596:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	229b      	movs	r2, #155	; 0x9b
 800759e:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	2226      	movs	r2, #38	; 0x26
 80075a4:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80075a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <VL53LX_preset_mode_histogram_short_range>:
	VL53LX_timing_config_t             *ptiming,
	VL53LX_dynamic_config_t            *pdynamic,
	VL53LX_system_control_t            *psystem,
	VL53LX_tuning_parm_storage_t       *ptuning_parms,
	VL53LX_zone_config_t               *pzone_cfg)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b090      	sub	sp, #64	; 0x40
 80075b6:	af0a      	add	r7, sp, #40	; 0x28
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	607a      	str	r2, [r7, #4]
 80075be:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80075c0:	2300      	movs	r3, #0
 80075c2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_preset_mode_histogram_ranging(
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	9304      	str	r3, [sp, #16]
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	9303      	str	r3, [sp, #12]
 80075cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ce:	9302      	str	r3, [sp, #8]
 80075d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d2:	9301      	str	r3, [sp, #4]
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	68b9      	ldr	r1, [r7, #8]
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f7ff fe16 	bl	8007210 <VL53LX_preset_mode_histogram_ranging>
 80075e4:	4603      	mov	r3, r0
 80075e6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53LX_ERROR_NONE) {
 80075e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d178      	bne.n	80076e2 <VL53LX_preset_mode_histogram_short_range+0x130>





		VL53LX_init_histogram_config_structure(
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	9308      	str	r3, [sp, #32]
 80075f4:	2302      	movs	r3, #2
 80075f6:	9307      	str	r3, [sp, #28]
 80075f8:	2302      	movs	r3, #2
 80075fa:	9306      	str	r3, [sp, #24]
 80075fc:	2301      	movs	r3, #1
 80075fe:	9305      	str	r3, [sp, #20]
 8007600:	2301      	movs	r3, #1
 8007602:	9304      	str	r3, [sp, #16]
 8007604:	2301      	movs	r3, #1
 8007606:	9303      	str	r3, [sp, #12]
 8007608:	2300      	movs	r3, #0
 800760a:	9302      	str	r3, [sp, #8]
 800760c:	2301      	movs	r3, #1
 800760e:	9301      	str	r3, [sp, #4]
 8007610:	2301      	movs	r3, #1
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	2301      	movs	r3, #1
 8007616:	2200      	movs	r2, #0
 8007618:	2107      	movs	r1, #7
 800761a:	2007      	movs	r0, #7
 800761c:	f000 fddc 	bl	80081d8 <VL53LX_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53LX_init_histogram_multizone_config_structure(
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	3302      	adds	r3, #2
 8007624:	9308      	str	r3, [sp, #32]
 8007626:	2302      	movs	r3, #2
 8007628:	9307      	str	r3, [sp, #28]
 800762a:	2302      	movs	r3, #2
 800762c:	9306      	str	r3, [sp, #24]
 800762e:	2301      	movs	r3, #1
 8007630:	9305      	str	r3, [sp, #20]
 8007632:	2301      	movs	r3, #1
 8007634:	9304      	str	r3, [sp, #16]
 8007636:	2301      	movs	r3, #1
 8007638:	9303      	str	r3, [sp, #12]
 800763a:	2300      	movs	r3, #0
 800763c:	9302      	str	r3, [sp, #8]
 800763e:	2301      	movs	r3, #1
 8007640:	9301      	str	r3, [sp, #4]
 8007642:	2301      	movs	r3, #1
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	2301      	movs	r3, #1
 8007648:	2200      	movs	r2, #0
 800764a:	2107      	movs	r1, #7
 800764c:	2007      	movs	r0, #7
 800764e:	f000 fe53 	bl	80082f8 <VL53LX_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53LX_copy_hist_cfg_to_static_cfg(
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	68b9      	ldr	r1, [r7, #8]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f846 	bl	80076ee <VL53LX_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	2203      	movs	r2, #3
 8007666:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	2205      	movs	r2, #5
 800766c:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	2200      	movs	r2, #0
 8007672:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	2252      	movs	r2, #82	; 0x52
 8007678:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	2200      	movs	r2, #0
 800767e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	2237      	movs	r2, #55	; 0x37
 8007684:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	2200      	movs	r2, #0
 800768a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	2266      	movs	r2, #102	; 0x66
 8007690:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	2200      	movs	r2, #0
 8007696:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	2244      	movs	r2, #68	; 0x44
 800769c:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2203      	movs	r2, #3
 80076a2:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	22f5      	movs	r2, #245	; 0xf5
 80076a8:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	2203      	movs	r2, #3
 80076ae:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	2205      	movs	r2, #5
 80076b4:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 80076b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b8:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 80076be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c0:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2208      	movs	r2, #8
 80076ca:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2228      	movs	r2, #40	; 0x28
 80076d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	22bb      	movs	r2, #187	; 0xbb
 80076da:	745a      	strb	r2, [r3, #17]
				VL53LX_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80076dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076de:	2226      	movs	r2, #38	; 0x26
 80076e0:	711a      	strb	r2, [r3, #4]
				VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80076e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <VL53LX_copy_hist_cfg_to_static_cfg>:
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_general_config_t   *pgeneral,
	VL53LX_timing_config_t    *ptiming,
	VL53LX_dynamic_config_t   *pdynamic)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b085      	sub	sp, #20
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	60b9      	str	r1, [r7, #8]
 80076f8:	607a      	str	r2, [r7, #4]
 80076fa:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	79db      	ldrb	r3, [r3, #7]
 8007730:	b29b      	uxth	r3, r3
				<< 8)
 8007732:	021b      	lsls	r3, r3, #8
 8007734:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	7a1b      	ldrb	r3, [r3, #8]
 800773a:	b29b      	uxth	r3, r3
 800773c:	4413      	add	r3, r2
 800773e:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	785b      	ldrb	r3, [r3, #1]
 8007778:	b29b      	uxth	r3, r3
				<< 8)
 800777a:	021b      	lsls	r3, r3, #8
 800777c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	789b      	ldrb	r3, [r3, #2]
 8007782:	b29b      	uxth	r3, r3
 8007784:	4413      	add	r3, r2
 8007786:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	78db      	ldrb	r3, [r3, #3]
 8007790:	b29b      	uxth	r3, r3
				<< 8)
 8007792:	021b      	lsls	r3, r3, #8
 8007794:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	791b      	ldrb	r3, [r3, #4]
 800779a:	b29b      	uxth	r3, r3
 800779c:	4413      	add	r3, r2
 800779e:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 80077cc:	bf00      	nop
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <VL53LX_copy_hist_bins_to_static_cfg>:

void VL53LX_copy_hist_bins_to_static_cfg(
	VL53LX_histogram_config_t *phistogram,
	VL53LX_static_config_t    *pstatic,
	VL53LX_timing_config_t    *ptiming)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	79db      	ldrb	r3, [r3, #7]
 8007818:	b29b      	uxth	r3, r3
				<< 8)
 800781a:	021b      	lsls	r3, r3, #8
 800781c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	7a1b      	ldrb	r3, [r3, #8]
 8007822:	b29b      	uxth	r3, r3
 8007824:	4413      	add	r3, r2
 8007826:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	785b      	ldrb	r3, [r3, #1]
 8007858:	b29b      	uxth	r3, r3
				<< 8)
 800785a:	021b      	lsls	r3, r3, #8
 800785c:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	789b      	ldrb	r3, [r3, #2]
 8007862:	b29b      	uxth	r3, r3
 8007864:	4413      	add	r3, r2
 8007866:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	78db      	ldrb	r3, [r3, #3]
 8007870:	b29b      	uxth	r3, r3
				<< 8)
 8007872:	021b      	lsls	r3, r3, #8
 8007874:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	791b      	ldrb	r3, [r3, #4]
 800787a:	b29b      	uxth	r3, r3
 800787c:	4413      	add	r3, r2
 800787e:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 8007894:	bf00      	nop
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <VL53LX_init_version>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53LX_init_version(
	VL53LX_DEV        Dev)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3318      	adds	r3, #24
 80078ac:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53LX_LL_API_IMPLEMENTATION_VER_MAJOR;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53LX_LL_API_IMPLEMENTATION_VER_MINOR;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53LX_LL_API_IMPLEMENTATION_VER_SUB;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53LX_LL_API_IMPLEMENTATION_VER_REVISION;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	625a      	str	r2, [r3, #36]	; 0x24
}
 80078cc:	bf00      	nop
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <VL53LX_init_ll_driver_state>:


void  VL53LX_init_ll_driver_state(
	VL53LX_DEV         Dev,
	VL53LX_DeviceState device_state)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	460b      	mov	r3, r1
 80078e2:	70fb      	strb	r3, [r7, #3]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3318      	adds	r3, #24
 80078e8:	60fb      	str	r3, [r7, #12]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	332c      	adds	r3, #44	; 0x2c
 80078ee:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	78fa      	ldrb	r2, [r7, #3]
 80078f4:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	2200      	movs	r2, #0
 80078fa:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2202      	movs	r2, #2
 8007900:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2200      	movs	r2, #0
 8007906:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2200      	movs	r2, #0
 800790c:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	78fa      	ldrb	r2, [r7, #3]
 8007912:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2200      	movs	r2, #0
 8007918:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2202      	movs	r2, #2
 800791e:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2200      	movs	r2, #0
 8007924:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2200      	movs	r2, #0
 800792a:	735a      	strb	r2, [r3, #13]

}
 800792c:	bf00      	nop
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <VL53LX_update_ll_driver_rd_state>:


VL53LX_Error  VL53LX_update_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]


	VL53LX_Error        status  = VL53LX_ERROR_NONE;
 8007940:	2300      	movs	r3, #0
 8007942:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3318      	adds	r3, #24
 8007948:	613b      	str	r3, [r7, #16]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	332c      	adds	r3, #44	; 0x2c
 800794e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d115      	bne.n	800798a <VL53LX_update_ll_driver_rd_state+0x52>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2203      	movs	r2, #3
 8007962:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2202      	movs	r2, #2
 800797a:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	735a      	strb	r2, [r3, #13]
 8007988:	e0be      	b.n	8007b08 <VL53LX_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	7a1b      	ldrb	r3, [r3, #8]
 800798e:	2bff      	cmp	r3, #255	; 0xff
 8007990:	d103      	bne.n	800799a <VL53LX_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2280      	movs	r2, #128	; 0x80
 8007996:	721a      	strb	r2, [r3, #8]
 8007998:	e005      	b.n	80079a6 <VL53LX_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	7a1b      	ldrb	r3, [r3, #8]
 800799e:	3301      	adds	r3, #1
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	721a      	strb	r2, [r3, #8]


		status = VL53LX_update_internal_stream_counters(Dev,
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	7a19      	ldrb	r1, [r3, #8]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f103 0209 	add.w	r2, r3, #9
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	330a      	adds	r3, #10
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f002 fcf6 	bl	800a3a6 <VL53LX_update_internal_stream_counters>
 80079ba:	4603      	mov	r3, r0
 80079bc:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	7adb      	ldrb	r3, [r3, #11]
 80079c2:	f083 0302 	eor.w	r3, r3, #2
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	79db      	ldrb	r3, [r3, #7]
 80079d0:	3b03      	subs	r3, #3
 80079d2:	2b05      	cmp	r3, #5
 80079d4:	f200 8082 	bhi.w	8007adc <VL53LX_update_ll_driver_rd_state+0x1a4>
 80079d8:	a201      	add	r2, pc, #4	; (adr r2, 80079e0 <VL53LX_update_ll_driver_rd_state+0xa8>)
 80079da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079de:	bf00      	nop
 80079e0:	080079f9 	.word	0x080079f9
 80079e4:	08007add 	.word	0x08007add
 80079e8:	08007add 	.word	0x08007add
 80079ec:	08007a4b 	.word	0x08007a4b
 80079f0:	08007a81 	.word	0x08007a81
 80079f4:	08007aab 	.word	0x08007aab

		case VL53LX_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	f893 335e 	ldrb.w	r3, [r3, #862]	; 0x35e
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	dd03      	ble.n	8007a0e <VL53LX_update_ll_driver_rd_state+0xd6>
				VL53LX_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2206      	movs	r2, #6
 8007a0a:	71da      	strb	r2, [r3, #7]
 8007a0c:	e00d      	b.n	8007a2a <VL53LX_update_ll_driver_rd_state+0xf2>
				VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d303      	bcc.n	8007a24 <VL53LX_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2208      	movs	r2, #8
 8007a20:	71da      	strb	r2, [r3, #7]
 8007a22:	e002      	b.n	8007a2a <VL53LX_update_ll_driver_rd_state+0xf2>
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2207      	movs	r2, #7
 8007a28:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	735a      	strb	r2, [r3, #13]

			break;
 8007a48:	e05e      	b.n	8007b08 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d303      	bcc.n	8007a78 <VL53LX_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2208      	movs	r2, #8
 8007a74:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8007a76:	e047      	b.n	8007b08 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2207      	movs	r2, #7
 8007a7c:	71da      	strb	r2, [r3, #7]
			break;
 8007a7e:	e043      	b.n	8007b08 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	7b5b      	ldrb	r3, [r3, #13]
 8007a84:	3301      	adds	r3, #1
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d303      	bcc.n	8007aa2 <VL53LX_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2208      	movs	r2, #8
 8007a9e:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 8007aa0:	e032      	b.n	8007b08 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2207      	movs	r2, #7
 8007aa6:	71da      	strb	r2, [r3, #7]
			break;
 8007aa8:	e02e      	b.n	8007b08 <VL53LX_update_ll_driver_rd_state+0x1d0>

		case VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	7b1b      	ldrb	r3, [r3, #12]
 8007ab4:	f083 0301 	eor.w	r3, r3, #1
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d303      	bcc.n	8007ad4 <VL53LX_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2208      	movs	r2, #8
 8007ad0:	71da      	strb	r2, [r3, #7]
					VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53LX_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 8007ad2:	e019      	b.n	8007b08 <VL53LX_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2207      	movs	r2, #7
 8007ad8:	71da      	strb	r2, [r3, #7]
			break;
 8007ada:	e015      	b.n	8007b08 <VL53LX_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2203      	movs	r2, #3
 8007ae0:	71da      	strb	r2, [r3, #7]
				VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2202      	movs	r2, #2
 8007af8:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	735a      	strb	r2, [r3, #13]
			break;
 8007b06:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 8007b08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3718      	adds	r7, #24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <VL53LX_check_ll_driver_rd_state>:


VL53LX_Error VL53LX_check_ll_driver_rd_state(
	VL53LX_DEV         Dev)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b08d      	sub	sp, #52	; 0x34
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53LX_LLDriverData_t  *pdev =
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	3318      	adds	r3, #24
 8007b26:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8007b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b32:	332c      	adds	r3, #44	; 0x2c
 8007b34:	623b      	str	r3, [r7, #32]
	VL53LX_system_results_t   *psys_results = &(pdev->sys_results);
 8007b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b38:	f203 3366 	addw	r3, r3, #870	; 0x366
 8007b3c:	61fb      	str	r3, [r7, #28]
	VL53LX_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 8007b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007b44:	61bb      	str	r3, [r7, #24]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8007b4c:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 8007b52:	2300      	movs	r3, #0
 8007b54:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 8007b56:	2300      	movs	r3, #0
 8007b58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 8007b60:	2300      	movs	r3, #0
 8007b62:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8007b6c:	f003 031f 	and.w	r3, r3, #31
 8007b70:	74fb      	strb	r3, [r7, #19]
			VL53LX_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	78db      	ldrb	r3, [r3, #3]
 8007b76:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007b7e:	f003 0302 	and.w	r3, r3, #2
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM) ==
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	bf14      	ite	ne
 8007b86:	2301      	movne	r3, #1
 8007b88:	2300      	moveq	r3, #0
 8007b8a:	b2db      	uxtb	r3, r3
	histogram_mode =
 8007b8c:	747b      	strb	r3, [r7, #17]
		VL53LX_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	781b      	ldrb	r3, [r3, #0]
		VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8007b92:	111b      	asrs	r3, r3, #4
 8007b94:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 8007b9e:	7c7b      	ldrb	r3, [r7, #17]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d008      	beq.n	8007bb6 <VL53LX_check_ll_driver_rd_state+0xa2>
		device_gph_id = (phist_data->result__interrupt_status &
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53LX_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8007baa:	111b      	asrs	r3, r3, #4
 8007bac:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 8007bae:	f003 0302 	and.w	r3, r3, #2
 8007bb2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 8007bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb8:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007bbc:	f003 0320 	and.w	r3, r3, #32
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d04e      	beq.n	8007c62 <VL53LX_check_ll_driver_rd_state+0x14e>
		VL53LX_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	79db      	ldrb	r3, [r3, #7]
 8007bc8:	2b06      	cmp	r3, #6
 8007bca:	d109      	bne.n	8007be0 <VL53LX_check_ll_driver_rd_state+0xcc>
		VL53LX_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 8007bcc:	7c7b      	ldrb	r3, [r7, #17]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d14a      	bne.n	8007c68 <VL53LX_check_ll_driver_rd_state+0x154>
			if (device_range_status !=
 8007bd2:	7cfb      	ldrb	r3, [r7, #19]
 8007bd4:	2b12      	cmp	r3, #18
 8007bd6:	d047      	beq.n	8007c68 <VL53LX_check_ll_driver_rd_state+0x154>
			VL53LX_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 8007bd8:	23ef      	movs	r3, #239	; 0xef
 8007bda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007bde:	e043      	b.n	8007c68 <VL53LX_check_ll_driver_rd_state+0x154>
				VL53LX_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	7a1b      	ldrb	r3, [r3, #8]
 8007be4:	7cba      	ldrb	r2, [r7, #18]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d002      	beq.n	8007bf0 <VL53LX_check_ll_driver_rd_state+0xdc>
			status = VL53LX_ERROR_STREAM_COUNT_CHECK_FAIL;
 8007bea:	23ee      	movs	r3, #238	; 0xee
 8007bec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	7adb      	ldrb	r3, [r3, #11]
 8007bf4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d002      	beq.n	8007c02 <VL53LX_check_ll_driver_rd_state+0xee>
			status = VL53LX_ERROR_GPH_ID_CHECK_FAIL;
 8007bfc:	23ed      	movs	r3, #237	; 0xed
 8007bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_stream_count;
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	7b5b      	ldrb	r3, [r3, #13]
 8007c06:	4619      	mov	r1, r3
		expected_stream_count =
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	440b      	add	r3, r1
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	4413      	add	r3, r2
 8007c14:	3302      	adds	r3, #2
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id;
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	7b5b      	ldrb	r3, [r3, #13]
 8007c1e:	4619      	mov	r1, r3
		expected_gph_id =
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	460b      	mov	r3, r1
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	440b      	add	r3, r1
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	4413      	add	r3, r2
 8007c2c:	3303      	adds	r3, #3
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 8007c32:	7c3a      	ldrb	r2, [r7, #16]
 8007c34:	7cbb      	ldrb	r3, [r7, #18]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d00a      	beq.n	8007c50 <VL53LX_check_ll_driver_rd_state+0x13c>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 8007c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d102      	bne.n	8007c4a <VL53LX_check_ll_driver_rd_state+0x136>
 8007c44:	7cbb      	ldrb	r3, [r7, #18]
 8007c46:	2bff      	cmp	r3, #255	; 0xff
 8007c48:	d002      	beq.n	8007c50 <VL53LX_check_ll_driver_rd_state+0x13c>
				(device_stream_count == 255)))
				status =
 8007c4a:	23ec      	movs	r3, #236	; 0xec
 8007c4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 8007c50:	7bfa      	ldrb	r2, [r7, #15]
 8007c52:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d005      	beq.n	8007c66 <VL53LX_check_ll_driver_rd_state+0x152>
			status = VL53LX_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 8007c5a:	23eb      	movs	r3, #235	; 0xeb
 8007c5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007c60:	e002      	b.n	8007c68 <VL53LX_check_ll_driver_rd_state+0x154>
		goto ENDFUNC;
 8007c62:	bf00      	nop
 8007c64:	e000      	b.n	8007c68 <VL53LX_check_ll_driver_rd_state+0x154>

	}



ENDFUNC:
 8007c66:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 8007c68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3734      	adds	r7, #52	; 0x34
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <VL53LX_update_ll_driver_cfg_state>:


VL53LX_Error  VL53LX_update_ll_driver_cfg_state(
	VL53LX_DEV         Dev)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b088      	sub	sp, #32
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]


	VL53LX_Error         status = VL53LX_ERROR_NONE;
 8007c80:	2300      	movs	r3, #0
 8007c82:	77fb      	strb	r3, [r7, #31]
	VL53LX_LLDriverData_t  *pdev =
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3318      	adds	r3, #24
 8007c88:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8007c90:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	332c      	adds	r3, #44	; 0x2c
 8007c96:	613b      	str	r3, [r7, #16]
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8007c9e:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	f893 3364 	ldrb.w	r3, [r3, #868]	; 0x364
 8007ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d11b      	bne.n	8007ce6 <VL53LX_update_ll_driver_cfg_state+0x6e>
		VL53LX_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	2203      	movs	r2, #3
 8007cb2:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	2202      	movs	r2, #2
 8007cca:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	773b      	strb	r3, [r7, #28]
 8007ce4:	e0b1      	b.n	8007e4a <VL53LX_update_ll_driver_cfg_state+0x1d2>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	791b      	ldrb	r3, [r3, #4]
 8007cea:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	799b      	ldrb	r3, [r3, #6]
 8007cf0:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	785b      	ldrb	r3, [r3, #1]
 8007cf6:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	785b      	ldrb	r3, [r3, #1]
 8007cfc:	2bff      	cmp	r3, #255	; 0xff
 8007cfe:	d103      	bne.n	8007d08 <VL53LX_update_ll_driver_cfg_state+0x90>
			pstate->cfg_stream_count = 0x80;
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	2280      	movs	r2, #128	; 0x80
 8007d04:	705a      	strb	r2, [r3, #1]
 8007d06:	e005      	b.n	8007d14 <VL53LX_update_ll_driver_cfg_state+0x9c>
		else
			pstate->cfg_stream_count++;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	785b      	ldrb	r3, [r3, #1]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	705a      	strb	r2, [r3, #1]


		status = VL53LX_update_internal_stream_counters(
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	7859      	ldrb	r1, [r3, #1]
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	1c9a      	adds	r2, r3, #2
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	3303      	adds	r3, #3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f002 fb40 	bl	800a3a6 <VL53LX_update_internal_stream_counters>
 8007d26:	4603      	mov	r3, r0
 8007d28:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	791b      	ldrb	r3, [r3, #4]
 8007d2e:	f083 0302 	eor.w	r3, r3, #2
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	2b05      	cmp	r3, #5
 8007d3e:	d053      	beq.n	8007de8 <VL53LX_update_ll_driver_cfg_state+0x170>
 8007d40:	2b05      	cmp	r3, #5
 8007d42:	dc69      	bgt.n	8007e18 <VL53LX_update_ll_driver_cfg_state+0x1a0>
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d002      	beq.n	8007d4e <VL53LX_update_ll_driver_cfg_state+0xd6>
 8007d48:	2b04      	cmp	r3, #4
 8007d4a:	d02d      	beq.n	8007da8 <VL53LX_update_ll_driver_cfg_state+0x130>
 8007d4c:	e064      	b.n	8007e18 <VL53LX_update_ll_driver_cfg_state+0x1a0>

		case VL53LX_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	2201      	movs	r2, #1
 8007d52:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d909      	bls.n	8007d76 <VL53LX_update_ll_driver_cfg_state+0xfe>
				pstate->cfg_zone_id = 0;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	2200      	movs	r2, #0
 8007d66:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	795b      	ldrb	r3, [r3, #5]
 8007d6c:	f083 0301 	eor.w	r3, r3, #1
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d106      	bne.n	8007d94 <VL53LX_update_ll_driver_cfg_state+0x11c>
				pstate->cfg_internal_stream_count = 1;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	70da      	strb	r2, [r3, #3]
 8007d92:	e005      	b.n	8007da0 <VL53LX_update_ll_driver_cfg_state+0x128>
			} else {
				pstate->cfg_internal_stream_count = 0;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	2200      	movs	r2, #0
 8007d98:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	2204      	movs	r2, #4
 8007da4:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 8007da6:	e050      	b.n	8007e4a <VL53LX_update_ll_driver_cfg_state+0x1d2>

		case VL53LX_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	799b      	ldrb	r3, [r3, #6]
 8007dac:	3301      	adds	r3, #1
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d940      	bls.n	8007e44 <VL53LX_update_ll_driver_cfg_state+0x1cc>

				pstate->cfg_zone_id = 0;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	795b      	ldrb	r3, [r3, #5]
 8007dcc:	f083 0301 	eor.w	r3, r3, #1
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d031      	beq.n	8007e44 <VL53LX_update_ll_driver_cfg_state+0x1cc>
					pstate->cfg_device_state =
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	2205      	movs	r2, #5
 8007de4:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 8007de6:	e02d      	b.n	8007e44 <VL53LX_update_ll_driver_cfg_state+0x1cc>

		case VL53LX_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	799b      	ldrb	r3, [r3, #6]
 8007dec:	3301      	adds	r3, #1
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d922      	bls.n	8007e48 <VL53LX_update_ll_driver_cfg_state+0x1d0>
				pstate->cfg_zone_id = 0;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	2200      	movs	r2, #0
 8007e06:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	795b      	ldrb	r3, [r3, #5]
 8007e0c:	f083 0301 	eor.w	r3, r3, #1
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	715a      	strb	r2, [r3, #5]
			}
			break;
 8007e16:	e017      	b.n	8007e48 <VL53LX_update_ll_driver_cfg_state+0x1d0>

		default:
			pstate->cfg_device_state =
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	2203      	movs	r2, #3
 8007e1c:	701a      	strb	r2, [r3, #0]
					VL53LX_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	2200      	movs	r2, #0
 8007e22:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	2200      	movs	r2, #0
 8007e28:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	2202      	movs	r2, #2
 8007e34:	711a      	strb	r2, [r3, #4]
					VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	719a      	strb	r2, [r3, #6]
			break;
 8007e42:	e002      	b.n	8007e4a <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007e44:	bf00      	nop
 8007e46:	e000      	b.n	8007e4a <VL53LX_update_ll_driver_cfg_state+0x1d2>
			break;
 8007e48:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d11d      	bne.n	8007e90 <VL53LX_update_ll_driver_cfg_state+0x218>

		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007e54:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 8007e56:	7f3b      	ldrb	r3, [r7, #28]
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	b2d8      	uxtb	r0, r3
 8007e5c:	68f9      	ldr	r1, [r7, #12]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	005b      	lsls	r3, r3, #1
 8007e66:	440b      	add	r3, r1
 8007e68:	3302      	adds	r3, #2
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	701a      	strb	r2, [r3, #0]

		pZ->VL53LX_p_003[pstate->rd_zone_id].expected_gph_id =
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	7b5b      	ldrb	r3, [r3, #13]
 8007e72:	4619      	mov	r1, r3
 8007e74:	7f7b      	ldrb	r3, [r7, #29]
 8007e76:	f083 0302 	eor.w	r3, r3, #2
 8007e7a:	b2d8      	uxtb	r0, r3
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	460b      	mov	r3, r1
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	440b      	add	r3, r1
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	4413      	add	r3, r2
 8007e88:	3303      	adds	r3, #3
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	701a      	strb	r2, [r3, #0]
 8007e8e:	e013      	b.n	8007eb8 <VL53LX_update_ll_driver_cfg_state+0x240>
			prev_cfg_gph_id ^ VL53LX_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_stream_count
 8007e90:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 8007e92:	68f9      	ldr	r1, [r7, #12]
 8007e94:	4613      	mov	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	005b      	lsls	r3, r3, #1
 8007e9c:	440b      	add	r3, r1
 8007e9e:	3302      	adds	r3, #2
 8007ea0:	7f3a      	ldrb	r2, [r7, #28]
 8007ea2:	701a      	strb	r2, [r3, #0]
		pZ->VL53LX_p_003[prev_cfg_zone_id].expected_gph_id =
 8007ea4:	7fba      	ldrb	r2, [r7, #30]
 8007ea6:	68f9      	ldr	r1, [r7, #12]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	440b      	add	r3, r1
 8007eb2:	3303      	adds	r3, #3
 8007eb4:	7f7a      	ldrb	r2, [r7, #29]
 8007eb6:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 8007eb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3720      	adds	r7, #32
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <VL53LX_copy_rtn_good_spads_to_buffer>:


void VL53LX_copy_rtn_good_spads_to_buffer(
	VL53LX_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	7c1a      	ldrb	r2, [r3, #16]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	7c52      	ldrb	r2, [r2, #17]
 8007ede:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	3302      	adds	r3, #2
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	7c92      	ldrb	r2, [r2, #18]
 8007ee8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	3303      	adds	r3, #3
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	7cd2      	ldrb	r2, [r2, #19]
 8007ef2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	7d12      	ldrb	r2, [r2, #20]
 8007efc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	3305      	adds	r3, #5
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	7d52      	ldrb	r2, [r2, #21]
 8007f06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	3306      	adds	r3, #6
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	7d92      	ldrb	r2, [r2, #22]
 8007f10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	3307      	adds	r3, #7
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	7dd2      	ldrb	r2, [r2, #23]
 8007f1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	3308      	adds	r3, #8
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	7e12      	ldrb	r2, [r2, #24]
 8007f24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	3309      	adds	r3, #9
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	7e52      	ldrb	r2, [r2, #25]
 8007f2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	330a      	adds	r3, #10
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	7e92      	ldrb	r2, [r2, #26]
 8007f38:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	330b      	adds	r3, #11
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	7ed2      	ldrb	r2, [r2, #27]
 8007f42:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	330c      	adds	r3, #12
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	7f12      	ldrb	r2, [r2, #28]
 8007f4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	330d      	adds	r3, #13
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	7f52      	ldrb	r2, [r2, #29]
 8007f56:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	330e      	adds	r3, #14
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	7f92      	ldrb	r2, [r2, #30]
 8007f60:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	330f      	adds	r3, #15
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	7fd2      	ldrb	r2, [r2, #31]
 8007f6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	3310      	adds	r3, #16
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007f76:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	3311      	adds	r3, #17
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007f82:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	3312      	adds	r3, #18
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8007f8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	3313      	adds	r3, #19
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8007f9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	3314      	adds	r3, #20
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007fa6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	3315      	adds	r3, #21
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007fb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	3316      	adds	r3, #22
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8007fbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	3317      	adds	r3, #23
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8007fca:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	3318      	adds	r3, #24
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8007fd6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	3319      	adds	r3, #25
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8007fe2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	331a      	adds	r3, #26
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8007fee:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	331b      	adds	r3, #27
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8007ffa:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	331c      	adds	r3, #28
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8008006:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	331d      	adds	r3, #29
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8008012:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	331e      	adds	r3, #30
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800801e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	331f      	adds	r3, #31
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800802a:	701a      	strb	r2, [r3, #0]
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <VL53LX_init_system_results>:


void VL53LX_init_system_results(
		VL53LX_system_results_t  *pdata)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	22ff      	movs	r2, #255	; 0xff
 8008044:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	22ff      	movs	r2, #255	; 0xff
 800804a:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	22ff      	movs	r2, #255	; 0xff
 8008050:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	22ff      	movs	r2, #255	; 0xff
 8008056:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800805e:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008066:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800806e:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008076:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800807e:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008086:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800808e:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008096:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800809e:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080a6:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080ae:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080b6:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080be:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080c6:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080ce:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080d6:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080de:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080e6:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080ee:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	22ff      	movs	r2, #255	; 0xff
 80080f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53LX_zone_results_t  *pdata)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	6039      	str	r1, [r7, #0]
 800810e:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 8008110:	2300      	movs	r3, #0
 8008112:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_objects_t *pobjects;

	pdata->max_zones    = VL53LX_MAX_USER_ZONES;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2205      	movs	r2, #5
 8008118:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	79fa      	ldrb	r2, [r7, #7]
 800811e:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 8008120:	2300      	movs	r3, #0
 8008122:	73fb      	strb	r3, [r7, #15]
 8008124:	e017      	b.n	8008156 <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53LX_p_003[z]);
 8008126:	7bfa      	ldrb	r2, [r7, #15]
 8008128:	4613      	mov	r3, r2
 800812a:	011b      	lsls	r3, r3, #4
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	4413      	add	r3, r2
 8008134:	3304      	adds	r3, #4
 8008136:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53LX_DEVICESTATE_SW_STANDBY;
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2203      	movs	r2, #3
 800813c:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53LX_DEVICESTATE_SW_STANDBY;
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2203      	movs	r2, #3
 8008142:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53LX_MAX_RANGE_RESULTS;
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2204      	movs	r2, #4
 8008148:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	2200      	movs	r2, #0
 800814e:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 8008150:	7bfb      	ldrb	r3, [r7, #15]
 8008152:	3301      	adds	r3, #1
 8008154:	73fb      	strb	r3, [r7, #15]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	7bfa      	ldrb	r2, [r7, #15]
 800815c:	429a      	cmp	r2, r3
 800815e:	d3e2      	bcc.n	8008126 <V53L1_init_zone_results_structure+0x22>
	}
}
 8008160:	bf00      	nop
 8008162:	bf00      	nop
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53LX_DEV              Dev)
{
 800816e:	b480      	push	{r7}
 8008170:	b087      	sub	sp, #28
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverResults_t  *pres =
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800817c:	613b      	str	r3, [r7, #16]
			VL53LXDevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53LX_MAX_USER_ZONES;
 8008182:	2305      	movs	r3, #5
 8008184:	73fb      	strb	r3, [r7, #15]
	VL53LX_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800818c:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800818e:	2300      	movs	r3, #0
 8008190:	75fb      	strb	r3, [r7, #23]
 8008192:	e016      	b.n	80081c2 <V53L1_init_zone_dss_configs+0x54>
		pdata->VL53LX_p_003[z].dss_mode =
 8008194:	7dfa      	ldrb	r2, [r7, #23]
 8008196:	68b9      	ldr	r1, [r7, #8]
 8008198:	4613      	mov	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	005b      	lsls	r3, r3, #1
 80081a0:	440b      	add	r3, r1
 80081a2:	3304      	adds	r3, #4
 80081a4:	2201      	movs	r2, #1
 80081a6:	701a      	strb	r2, [r3, #0]
			VL53LX_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53LX_p_003[z].dss_requested_effective_spad_count = 0;
 80081a8:	7dfa      	ldrb	r2, [r7, #23]
 80081aa:	68b9      	ldr	r1, [r7, #8]
 80081ac:	4613      	mov	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4413      	add	r3, r2
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	440b      	add	r3, r1
 80081b6:	3306      	adds	r3, #6
 80081b8:	2200      	movs	r2, #0
 80081ba:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
 80081be:	3301      	adds	r3, #1
 80081c0:	75fb      	strb	r3, [r7, #23]
 80081c2:	7dfa      	ldrb	r2, [r7, #23]
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d3e4      	bcc.n	8008194 <V53L1_init_zone_dss_configs+0x26>
	}
}
 80081ca:	bf00      	nop
 80081cc:	bf00      	nop
 80081ce:	371c      	adds	r7, #28
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <VL53LX_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 80081d8:	b490      	push	{r4, r7}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	4604      	mov	r4, r0
 80081e0:	4608      	mov	r0, r1
 80081e2:	4611      	mov	r1, r2
 80081e4:	461a      	mov	r2, r3
 80081e6:	4623      	mov	r3, r4
 80081e8:	71fb      	strb	r3, [r7, #7]
 80081ea:	4603      	mov	r3, r0
 80081ec:	71bb      	strb	r3, [r7, #6]
 80081ee:	460b      	mov	r3, r1
 80081f0:	717b      	strb	r3, [r7, #5]
 80081f2:	4613      	mov	r3, r2
 80081f4:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 80081f6:	79bb      	ldrb	r3, [r7, #6]
 80081f8:	011b      	lsls	r3, r3, #4
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	79fb      	ldrb	r3, [r7, #7]
 80081fe:	4413      	add	r3, r2
 8008200:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8008202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008204:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8008206:	793b      	ldrb	r3, [r7, #4]
 8008208:	011b      	lsls	r3, r3, #4
 800820a:	b2da      	uxtb	r2, r3
 800820c:	797b      	ldrb	r3, [r7, #5]
 800820e:	4413      	add	r3, r2
 8008210:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8008212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008214:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8008216:	7d3b      	ldrb	r3, [r7, #20]
 8008218:	011b      	lsls	r3, r3, #4
 800821a:	b2da      	uxtb	r2, r3
 800821c:	7c3b      	ldrb	r3, [r7, #16]
 800821e:	4413      	add	r3, r2
 8008220:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 8008226:	7f3b      	ldrb	r3, [r7, #28]
 8008228:	011b      	lsls	r3, r3, #4
 800822a:	b2da      	uxtb	r2, r3
 800822c:	7e3b      	ldrb	r3, [r7, #24]
 800822e:	4413      	add	r3, r2
 8008230:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 8008236:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800823a:	011b      	lsls	r3, r3, #4
 800823c:	b2da      	uxtb	r2, r3
 800823e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008242:	4413      	add	r3, r2
 8008244:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 8008246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008248:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800824a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800824e:	011b      	lsls	r3, r3, #4
 8008250:	b2da      	uxtb	r2, r3
 8008252:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008256:	4413      	add	r3, r2
 8008258:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825c:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8008262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008264:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 8008266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008268:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 8008272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008274:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008280:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008284:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8008286:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800828a:	011b      	lsls	r3, r3, #4
 800828c:	b2da      	uxtb	r2, r3
 800828e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008292:	4413      	add	r3, r2
 8008294:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8008296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008298:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80082a0:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	2200      	movs	r2, #0
 80082a6:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 80082ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ae:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 80082b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b6:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 80082b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ba:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 80082bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082be:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 80082c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c2:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 80082c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c6:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 80082c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ca:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 80082cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ce:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 80082d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d2:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 80082d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d6:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 80082d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082de:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082e6:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 80082e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ea:	2200      	movs	r2, #0
 80082ec:	701a      	strb	r2, [r3, #0]

}
 80082ee:	bf00      	nop
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bc90      	pop	{r4, r7}
 80082f6:	4770      	bx	lr

080082f8 <VL53LX_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53LX_histogram_config_t  *pdata)
{
 80082f8:	b490      	push	{r4, r7}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	4604      	mov	r4, r0
 8008300:	4608      	mov	r0, r1
 8008302:	4611      	mov	r1, r2
 8008304:	461a      	mov	r2, r3
 8008306:	4623      	mov	r3, r4
 8008308:	71fb      	strb	r3, [r7, #7]
 800830a:	4603      	mov	r3, r0
 800830c:	71bb      	strb	r3, [r7, #6]
 800830e:	460b      	mov	r3, r1
 8008310:	717b      	strb	r3, [r7, #5]
 8008312:	4613      	mov	r3, r2
 8008314:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 8008316:	79bb      	ldrb	r3, [r7, #6]
 8008318:	011b      	lsls	r3, r3, #4
 800831a:	b2da      	uxtb	r2, r3
 800831c:	79fb      	ldrb	r3, [r7, #7]
 800831e:	4413      	add	r3, r2
 8008320:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 8008322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008324:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 8008326:	793b      	ldrb	r3, [r7, #4]
 8008328:	011b      	lsls	r3, r3, #4
 800832a:	b2da      	uxtb	r2, r3
 800832c:	797b      	ldrb	r3, [r7, #5]
 800832e:	4413      	add	r3, r2
 8008330:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 8008332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008334:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 8008336:	7d3b      	ldrb	r3, [r7, #20]
 8008338:	011b      	lsls	r3, r3, #4
 800833a:	b2da      	uxtb	r2, r3
 800833c:	7c3b      	ldrb	r3, [r7, #16]
 800833e:	4413      	add	r3, r2
 8008340:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 8008346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008348:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834c:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	789a      	ldrb	r2, [r3, #2]
 8008352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008354:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	78da      	ldrb	r2, [r3, #3]
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800835e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008360:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 8008362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008364:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 8008366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008368:	789a      	ldrb	r2, [r3, #2]
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800836e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008370:	78da      	ldrb	r2, [r3, #3]
 8008372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008374:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 8008376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008378:	791a      	ldrb	r2, [r3, #4]
 800837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837c:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800837e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008380:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008384:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 8008386:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800838a:	011b      	lsls	r3, r3, #4
 800838c:	b2da      	uxtb	r2, r3
 800838e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008392:	4413      	add	r3, r2
 8008394:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 8008396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008398:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800839a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80083a0:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 80083a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a4:	2200      	movs	r2, #0
 80083a6:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 80083a8:	7f3b      	ldrb	r3, [r7, #28]
 80083aa:	011b      	lsls	r3, r3, #4
 80083ac:	b2da      	uxtb	r2, r3
 80083ae:	7e3b      	ldrb	r3, [r7, #24]
 80083b0:	4413      	add	r3, r2
 80083b2:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 80083b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b6:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 80083b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80083bc:	011b      	lsls	r3, r3, #4
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083c4:	4413      	add	r3, r2
 80083c6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 80083c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ca:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 80083cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083d0:	011b      	lsls	r3, r3, #4
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80083d8:	4413      	add	r3, r2
 80083da:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 80083dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083de:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 80083e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e2:	7bda      	ldrb	r2, [r3, #15]
 80083e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e6:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	7c1a      	ldrb	r2, [r3, #16]
 80083ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ee:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 80083f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f2:	7c5a      	ldrb	r2, [r3, #17]
 80083f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f6:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 80083f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083fe:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008406:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 8008408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840a:	2200      	movs	r2, #0
 800840c:	701a      	strb	r2, [r3, #0]
}
 800840e:	bf00      	nop
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bc90      	pop	{r4, r7}
 8008416:	4770      	bx	lr

08008418 <VL53LX_init_xtalk_bin_data_struct>:

void VL53LX_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53LX_p_021,
	VL53LX_xtalk_histogram_shape_t *pdata)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	460b      	mov	r3, r1
 8008422:	607a      	str	r2, [r7, #4]
 8008424:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 8008426:	2300      	movs	r3, #0
 8008428:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_XTALK_HISTO_BINS;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	220c      	movs	r2, #12
 8008440:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 8008442:	897b      	ldrh	r3, [r7, #10]
 8008444:	b2da      	uxtb	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_015                = 0;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 8008478:	2300      	movs	r3, #0
 800847a:	82fb      	strh	r3, [r7, #22]
 800847c:	e015      	b.n	80084aa <VL53LX_init_xtalk_bin_data_struct+0x92>
		if (i < VL53LX_p_021)
 800847e:	8afa      	ldrh	r2, [r7, #22]
 8008480:	897b      	ldrh	r3, [r7, #10]
 8008482:	429a      	cmp	r2, r3
 8008484:	d207      	bcs.n	8008496 <VL53LX_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 8008486:	8afb      	ldrh	r3, [r7, #22]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	3302      	adds	r3, #2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	605a      	str	r2, [r3, #4]
 8008494:	e006      	b.n	80084a4 <VL53LX_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 8008496:	8afb      	ldrh	r3, [r7, #22]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	3302      	adds	r3, #2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	2200      	movs	r2, #0
 80084a2:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53LX_XTALK_HISTO_BINS; i++) {
 80084a4:	8afb      	ldrh	r3, [r7, #22]
 80084a6:	3301      	adds	r3, #1
 80084a8:	82fb      	strh	r3, [r7, #22]
 80084aa:	8afb      	ldrh	r3, [r7, #22]
 80084ac:	2b0b      	cmp	r3, #11
 80084ae:	d9e6      	bls.n	800847e <VL53LX_init_xtalk_bin_data_struct+0x66>
	}
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	371c      	adds	r7, #28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <VL53LX_i2c_encode_uint16_t>:

void VL53LX_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80084be:	b480      	push	{r7}
 80084c0:	b085      	sub	sp, #20
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	4603      	mov	r3, r0
 80084c6:	603a      	str	r2, [r7, #0]
 80084c8:	80fb      	strh	r3, [r7, #6]
 80084ca:	460b      	mov	r3, r1
 80084cc:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 80084ce:	2300      	movs	r3, #0
 80084d0:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53LX_p_003 = 0;
 80084d2:	2300      	movs	r3, #0
 80084d4:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 80084d6:	88fb      	ldrh	r3, [r7, #6]
 80084d8:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 80084da:	2300      	movs	r3, #0
 80084dc:	81fb      	strh	r3, [r7, #14]
 80084de:	e00e      	b.n	80084fe <VL53LX_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 80084e0:	88ba      	ldrh	r2, [r7, #4]
 80084e2:	89fb      	ldrh	r3, [r7, #14]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	3b01      	subs	r3, #1
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	4413      	add	r3, r2
 80084ec:	89ba      	ldrh	r2, [r7, #12]
 80084ee:	b2d2      	uxtb	r2, r2
 80084f0:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 80084f2:	89bb      	ldrh	r3, [r7, #12]
 80084f4:	0a1b      	lsrs	r3, r3, #8
 80084f6:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 80084f8:	89fb      	ldrh	r3, [r7, #14]
 80084fa:	3301      	adds	r3, #1
 80084fc:	81fb      	strh	r3, [r7, #14]
 80084fe:	89fa      	ldrh	r2, [r7, #14]
 8008500:	88bb      	ldrh	r3, [r7, #4]
 8008502:	429a      	cmp	r2, r3
 8008504:	d3ec      	bcc.n	80084e0 <VL53LX_i2c_encode_uint16_t+0x22>
	}
}
 8008506:	bf00      	nop
 8008508:	bf00      	nop
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <VL53LX_i2c_decode_uint16_t>:

uint16_t VL53LX_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	6039      	str	r1, [r7, #0]
 800851e:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 8008520:	2300      	movs	r3, #0
 8008522:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 8008524:	e00a      	b.n	800853c <VL53LX_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8008526:	89fb      	ldrh	r3, [r7, #14]
 8008528:	021b      	lsls	r3, r3, #8
 800852a:	b21a      	sxth	r2, r3
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	1c59      	adds	r1, r3, #1
 8008530:	6039      	str	r1, [r7, #0]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	b21b      	sxth	r3, r3
 8008536:	4313      	orrs	r3, r2
 8008538:	b21b      	sxth	r3, r3
 800853a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800853c:	88fb      	ldrh	r3, [r7, #6]
 800853e:	1e5a      	subs	r2, r3, #1
 8008540:	80fa      	strh	r2, [r7, #6]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1ef      	bne.n	8008526 <VL53LX_i2c_decode_uint16_t+0x12>

	return value;
 8008546:	89fb      	ldrh	r3, [r7, #14]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <VL53LX_i2c_encode_int16_t>:

void VL53LX_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	4603      	mov	r3, r0
 800855c:	603a      	str	r2, [r7, #0]
 800855e:	80fb      	strh	r3, [r7, #6]
 8008560:	460b      	mov	r3, r1
 8008562:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53LX_p_003 = 0;
 8008568:	2300      	movs	r3, #0
 800856a:	81bb      	strh	r3, [r7, #12]

	VL53LX_p_003 =  ip_value;
 800856c:	88fb      	ldrh	r3, [r7, #6]
 800856e:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 8008570:	2300      	movs	r3, #0
 8008572:	81fb      	strh	r3, [r7, #14]
 8008574:	e00f      	b.n	8008596 <VL53LX_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 8008576:	88ba      	ldrh	r2, [r7, #4]
 8008578:	89fb      	ldrh	r3, [r7, #14]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	3b01      	subs	r3, #1
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	4413      	add	r3, r2
 8008582:	89ba      	ldrh	r2, [r7, #12]
 8008584:	b2d2      	uxtb	r2, r2
 8008586:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008588:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800858c:	121b      	asrs	r3, r3, #8
 800858e:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 8008590:	89fb      	ldrh	r3, [r7, #14]
 8008592:	3301      	adds	r3, #1
 8008594:	81fb      	strh	r3, [r7, #14]
 8008596:	89fa      	ldrh	r2, [r7, #14]
 8008598:	88bb      	ldrh	r3, [r7, #4]
 800859a:	429a      	cmp	r2, r3
 800859c:	d3eb      	bcc.n	8008576 <VL53LX_i2c_encode_int16_t+0x22>
	}
}
 800859e:	bf00      	nop
 80085a0:	bf00      	nop
 80085a2:	3714      	adds	r7, #20
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <VL53LX_i2c_decode_int16_t>:

int16_t VL53LX_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	4603      	mov	r3, r0
 80085b4:	6039      	str	r1, [r7, #0]
 80085b6:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 80085b8:	2300      	movs	r3, #0
 80085ba:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	b25b      	sxtb	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	da0e      	bge.n	80085e4 <VL53LX_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 80085c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80085ca:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 80085cc:	e00a      	b.n	80085e4 <VL53LX_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 80085ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80085d2:	021b      	lsls	r3, r3, #8
 80085d4:	b21a      	sxth	r2, r3
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	1c59      	adds	r1, r3, #1
 80085da:	6039      	str	r1, [r7, #0]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	b21b      	sxth	r3, r3
 80085e0:	4313      	orrs	r3, r2
 80085e2:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 80085e4:	88fb      	ldrh	r3, [r7, #6]
 80085e6:	1e5a      	subs	r2, r3, #1
 80085e8:	80fa      	strh	r2, [r7, #6]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1ef      	bne.n	80085ce <VL53LX_i2c_decode_int16_t+0x22>

	return value;
 80085ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <VL53LX_i2c_encode_uint32_t>:

void VL53LX_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80085fe:	b480      	push	{r7}
 8008600:	b087      	sub	sp, #28
 8008602:	af00      	add	r7, sp, #0
 8008604:	60f8      	str	r0, [r7, #12]
 8008606:	460b      	mov	r3, r1
 8008608:	607a      	str	r2, [r7, #4]
 800860a:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 800860c:	2300      	movs	r3, #0
 800860e:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53LX_p_003 = 0;
 8008610:	2300      	movs	r3, #0
 8008612:	613b      	str	r3, [r7, #16]

	VL53LX_p_003 =  ip_value;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 8008618:	2300      	movs	r3, #0
 800861a:	82fb      	strh	r3, [r7, #22]
 800861c:	e00e      	b.n	800863c <VL53LX_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53LX_p_003 & 0x00FF);
 800861e:	897a      	ldrh	r2, [r7, #10]
 8008620:	8afb      	ldrh	r3, [r7, #22]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	3b01      	subs	r3, #1
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	4413      	add	r3, r2
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	b2d2      	uxtb	r2, r2
 800862e:	701a      	strb	r2, [r3, #0]
		VL53LX_p_003 = VL53LX_p_003 >> 8;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	0a1b      	lsrs	r3, r3, #8
 8008634:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 8008636:	8afb      	ldrh	r3, [r7, #22]
 8008638:	3301      	adds	r3, #1
 800863a:	82fb      	strh	r3, [r7, #22]
 800863c:	8afa      	ldrh	r2, [r7, #22]
 800863e:	897b      	ldrh	r3, [r7, #10]
 8008640:	429a      	cmp	r2, r3
 8008642:	d3ec      	bcc.n	800861e <VL53LX_i2c_encode_uint32_t+0x20>
	}
}
 8008644:	bf00      	nop
 8008646:	bf00      	nop
 8008648:	371c      	adds	r7, #28
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <VL53LX_i2c_decode_uint32_t>:

uint32_t VL53LX_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	4603      	mov	r3, r0
 800865a:	6039      	str	r1, [r7, #0]
 800865c:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800865e:	2300      	movs	r3, #0
 8008660:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 8008662:	e007      	b.n	8008674 <VL53LX_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	021a      	lsls	r2, r3, #8
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	1c59      	adds	r1, r3, #1
 800866c:	6039      	str	r1, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	4313      	orrs	r3, r2
 8008672:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 8008674:	88fb      	ldrh	r3, [r7, #6]
 8008676:	1e5a      	subs	r2, r3, #1
 8008678:	80fa      	strh	r2, [r7, #6]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1f2      	bne.n	8008664 <VL53LX_i2c_decode_uint32_t+0x12>

	return value;
 800867e:	68fb      	ldr	r3, [r7, #12]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <VL53LX_i2c_decode_int32_t>:
}

int32_t VL53LX_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	6039      	str	r1, [r7, #0]
 8008696:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 8008698:	2300      	movs	r3, #0
 800869a:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	b25b      	sxtb	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	da0b      	bge.n	80086be <VL53LX_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 80086a6:	f04f 33ff 	mov.w	r3, #4294967295
 80086aa:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 80086ac:	e007      	b.n	80086be <VL53LX_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	021a      	lsls	r2, r3, #8
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	1c59      	adds	r1, r3, #1
 80086b6:	6039      	str	r1, [r7, #0]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 80086be:	88fb      	ldrh	r3, [r7, #6]
 80086c0:	1e5a      	subs	r2, r3, #1
 80086c2:	80fa      	strh	r2, [r7, #6]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1f2      	bne.n	80086ae <VL53LX_i2c_decode_int32_t+0x22>

	return value;
 80086c8:	68fb      	ldr	r3, [r7, #12]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <VL53LX_start_test>:


VL53LX_Error VL53LX_start_test(
	VL53LX_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	460b      	mov	r3, r1
 80086e0:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80086e2:	2300      	movs	r3, #0
 80086e4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE) {
 80086e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d107      	bne.n	80086fe <VL53LX_start_test+0x28>
		status = VL53LX_WrByte(
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	461a      	mov	r2, r3
 80086f2:	2127      	movs	r1, #39	; 0x27
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f008 fc6d 	bl	8010fd4 <VL53LX_WrByte>
 80086fa:	4603      	mov	r3, r0
 80086fc:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 80086fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <VL53LX_set_firmware_enable_register>:


VL53LX_Error VL53LX_set_firmware_enable_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	460b      	mov	r3, r1
 8008714:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8008716:	2300      	movs	r3, #0
 8008718:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	3318      	adds	r3, #24
 800871e:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	78fa      	ldrb	r2, [r7, #3]
 8008724:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362

	status = VL53LX_WrByte(
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	f893 3362 	ldrb.w	r3, [r3, #866]	; 0x362
 800872e:	461a      	mov	r2, r3
 8008730:	2185      	movs	r1, #133	; 0x85
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f008 fc4e 	bl	8010fd4 <VL53LX_WrByte>
 8008738:	4603      	mov	r3, r0
 800873a:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53LX_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800873c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <VL53LX_enable_firmware>:

VL53LX_Error VL53LX_enable_firmware(
	VL53LX_DEV    Dev)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008750:	2300      	movs	r3, #0
 8008752:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x01);
 8008754:	2101      	movs	r1, #1
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f7ff ffd7 	bl	800870a <VL53LX_set_firmware_enable_register>
 800875c:	4603      	mov	r3, r0
 800875e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008760:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <VL53LX_disable_firmware>:


VL53LX_Error VL53LX_disable_firmware(
	VL53LX_DEV    Dev)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 8008774:	2300      	movs	r3, #0
 8008776:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_firmware_enable_register(Dev, 0x00);
 8008778:	2100      	movs	r1, #0
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7ff ffc5 	bl	800870a <VL53LX_set_firmware_enable_register>
 8008780:	4603      	mov	r3, r0
 8008782:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8008784:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <VL53LX_set_powerforce_register>:


VL53LX_Error VL53LX_set_powerforce_register(
	VL53LX_DEV    Dev,
	uint8_t       value)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	70fb      	strb	r3, [r7, #3]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	3318      	adds	r3, #24
 80087a4:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	78fa      	ldrb	r2, [r7, #3]
 80087aa:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360

	status = VL53LX_WrByte(
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	f893 3360 	ldrb.w	r3, [r3, #864]	; 0x360
 80087b4:	461a      	mov	r2, r3
 80087b6:	2183      	movs	r1, #131	; 0x83
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f008 fc0b 	bl	8010fd4 <VL53LX_WrByte>
 80087be:	4603      	mov	r3, r0
 80087c0:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 80087c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <VL53LX_enable_powerforce>:


VL53LX_Error VL53LX_enable_powerforce(
	VL53LX_DEV    Dev)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b084      	sub	sp, #16
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80087d6:	2300      	movs	r3, #0
 80087d8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x01);
 80087da:	2101      	movs	r1, #1
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7ff ffd7 	bl	8008790 <VL53LX_set_powerforce_register>
 80087e2:	4603      	mov	r3, r0
 80087e4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 80087e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <VL53LX_disable_powerforce>:


VL53LX_Error VL53LX_disable_powerforce(
	VL53LX_DEV    Dev)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b084      	sub	sp, #16
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53LX_set_powerforce_register(Dev, 0x00);
 80087fe:	2100      	movs	r1, #0
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7ff ffc5 	bl	8008790 <VL53LX_set_powerforce_register>
 8008806:	4603      	mov	r3, r0
 8008808:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800880a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <VL53LX_clear_interrupt>:


VL53LX_Error VL53LX_clear_interrupt(
	VL53LX_DEV    Dev)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b084      	sub	sp, #16
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 800881e:	2300      	movs	r3, #0
 8008820:	73fb      	strb	r3, [r7, #15]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	3318      	adds	r3, #24
 8008826:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53LX_CLEAR_RANGE_INT;
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363

	status = VL53LX_WrByte(
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 8008836:	461a      	mov	r2, r3
 8008838:	2186      	movs	r1, #134	; 0x86
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f008 fbca 	bl	8010fd4 <VL53LX_WrByte>
 8008840:	4603      	mov	r3, r0
 8008842:	73fb      	strb	r3, [r7, #15]
				VL53LX_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 8008844:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <VL53LX_calc_macro_period_us>:


uint32_t VL53LX_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53LX_p_005)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	460a      	mov	r2, r1
 800885a:	80fb      	strh	r3, [r7, #6]
 800885c:	4613      	mov	r3, r2
 800885e:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 8008860:	2300      	movs	r3, #0
 8008862:	617b      	str	r3, [r7, #20]
	uint8_t   VL53LX_p_030   = 0;
 8008864:	2300      	movs	r3, #0
 8008866:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 8008868:	2300      	movs	r3, #0
 800886a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800886c:	88fb      	ldrh	r3, [r7, #6]
 800886e:	4618      	mov	r0, r3
 8008870:	f002 fe9b 	bl	800b5aa <VL53LX_calc_pll_period_us>
 8008874:	6178      	str	r0, [r7, #20]



	VL53LX_p_030 = VL53LX_decode_vcsel_period(VL53LX_p_005);
 8008876:	797b      	ldrb	r3, [r7, #5]
 8008878:	4618      	mov	r0, r3
 800887a:	f003 fa69 	bl	800bd50 <VL53LX_decode_vcsel_period>
 800887e:	4603      	mov	r3, r0
 8008880:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	4613      	mov	r3, r2
 8008886:	00db      	lsls	r3, r3, #3
 8008888:	4413      	add	r3, r2
 800888a:	021b      	lsls	r3, r3, #8
 800888c:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53LX_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	099b      	lsrs	r3, r3, #6
 8008892:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53LX_p_030;
 8008894:	7cfa      	ldrb	r2, [r7, #19]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	fb02 f303 	mul.w	r3, r2, r3
 800889c:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	099b      	lsrs	r3, r3, #6
 80088a2:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 80088a4:	68fb      	ldr	r3, [r7, #12]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
	...

080088b0 <VL53LX_calc_range_ignore_threshold>:
uint16_t VL53LX_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b089      	sub	sp, #36	; 0x24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	4608      	mov	r0, r1
 80088ba:	4611      	mov	r1, r2
 80088bc:	461a      	mov	r2, r3
 80088be:	4603      	mov	r3, r0
 80088c0:	817b      	strh	r3, [r7, #10]
 80088c2:	460b      	mov	r3, r1
 80088c4:	813b      	strh	r3, [r7, #8]
 80088c6:	4613      	mov	r3, r2
 80088c8:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 80088d6:	2300      	movs	r3, #0
 80088d8:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 80088da:	2300      	movs	r3, #0
 80088dc:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	011b      	lsls	r3, r3, #4
 80088e2:	4a23      	ldr	r2, [pc, #140]	; (8008970 <VL53LX_calc_range_ignore_threshold+0xc0>)
 80088e4:	fb82 1203 	smull	r1, r2, r2, r3
 80088e8:	1192      	asrs	r2, r2, #6
 80088ea:	17db      	asrs	r3, r3, #31
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 80088f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	da03      	bge.n	8008900 <VL53LX_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 80088f8:	897b      	ldrh	r3, [r7, #10]
 80088fa:	425b      	negs	r3, r3
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 8008900:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008904:	2b00      	cmp	r3, #0
 8008906:	da03      	bge.n	8008910 <VL53LX_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8008908:	893b      	ldrh	r3, [r7, #8]
 800890a:	425b      	negs	r3, r3
 800890c:	b29b      	uxth	r3, r3
 800890e:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 8008910:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8008914:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008918:	4413      	add	r3, r2
 800891a:	015b      	lsls	r3, r3, #5
 800891c:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	4a13      	ldr	r2, [pc, #76]	; (8008970 <VL53LX_calc_range_ignore_threshold+0xc0>)
 8008922:	fb82 1203 	smull	r1, r2, r2, r3
 8008926:	1192      	asrs	r2, r2, #6
 8008928:	17db      	asrs	r3, r3, #31
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	4413      	add	r3, r2
 8008934:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8008936:	79fa      	ldrb	r2, [r7, #7]
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	fb02 f303 	mul.w	r3, r2, r3
 800893e:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	3310      	adds	r3, #16
 8008944:	2b00      	cmp	r3, #0
 8008946:	da00      	bge.n	800894a <VL53LX_calc_range_ignore_threshold+0x9a>
 8008948:	331f      	adds	r3, #31
 800894a:	115b      	asrs	r3, r3, #5
 800894c:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008954:	db03      	blt.n	800895e <VL53LX_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8008956:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800895a:	83fb      	strh	r3, [r7, #30]
 800895c:	e001      	b.n	8008962 <VL53LX_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8008962:	8bfb      	ldrh	r3, [r7, #30]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3724      	adds	r7, #36	; 0x24
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr
 8008970:	10624dd3 	.word	0x10624dd3

08008974 <VL53LX_calc_timeout_mclks>:


uint32_t VL53LX_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800897e:	2300      	movs	r3, #0
 8008980:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d102      	bne.n	800898e <VL53LX_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 8008988:	2300      	movs	r3, #0
 800898a:	60fb      	str	r3, [r7, #12]
 800898c:	e008      	b.n	80089a0 <VL53LX_calc_timeout_mclks+0x2c>
	else
		timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	031a      	lsls	r2, r3, #12
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	085b      	lsrs	r3, r3, #1
 8008996:	441a      	add	r2, r3
		timeout_mclks   =
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	fbb2 f3f3 	udiv	r3, r2, r3
 800899e:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 80089a0:	68fb      	ldr	r3, [r7, #12]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <VL53LX_calc_encoded_timeout>:


uint16_t VL53LX_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b084      	sub	sp, #16
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 80089b8:	2300      	movs	r3, #0
 80089ba:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 80089bc:	2300      	movs	r3, #0
 80089be:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53LX_calc_timeout_mclks(timeout_us, macro_period_us);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7ff ffd6 	bl	8008974 <VL53LX_calc_timeout_mclks>
 80089c8:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53LX_encode_timeout(timeout_mclks);
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f000 f885 	bl	8008ada <VL53LX_encode_timeout>
 80089d0:	4603      	mov	r3, r0
 80089d2:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 80089d4:	897b      	ldrh	r3, [r7, #10]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <VL53LX_calc_timeout_us>:


uint32_t VL53LX_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 80089de:	b4f0      	push	{r4, r5, r6, r7}
 80089e0:	b086      	sub	sp, #24
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 80089e8:	2300      	movs	r3, #0
 80089ea:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 80089ec:	f04f 0200 	mov.w	r2, #0
 80089f0:	f04f 0300 	mov.w	r3, #0
 80089f4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f04f 0100 	mov.w	r1, #0
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	461a      	mov	r2, r3
 8008a04:	f04f 0300 	mov.w	r3, #0
 8008a08:	fb02 fc01 	mul.w	ip, r2, r1
 8008a0c:	fb00 f603 	mul.w	r6, r0, r3
 8008a10:	4466      	add	r6, ip
 8008a12:	fba0 2302 	umull	r2, r3, r0, r2
 8008a16:	18f1      	adds	r1, r6, r3
 8008a18:	460b      	mov	r3, r1
 8008a1a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008a1e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8008a22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a26:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 8008a2a:	f143 0500 	adc.w	r5, r3, #0
 8008a2e:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 8008a32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a36:	f04f 0200 	mov.w	r2, #0
 8008a3a:	f04f 0300 	mov.w	r3, #0
 8008a3e:	0b02      	lsrs	r2, r0, #12
 8008a40:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8008a44:	0b0b      	lsrs	r3, r1, #12
 8008a46:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 8008a4e:	697b      	ldr	r3, [r7, #20]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bcf0      	pop	{r4, r5, r6, r7}
 8008a58:	4770      	bx	lr
	...

08008a5c <VL53LX_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53LX_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 8008a70:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 8008a74:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 8008a76:	4413      	add	r3, r2
 8008a78:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	da02      	bge.n	8008a86 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	e005      	b.n	8008a92 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a8c:	db01      	blt.n	8008a92 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 8008a8e:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <VL53LX_calc_crosstalk_plane_offset_with_margin+0x48>)
 8008a90:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 8008a96:	68bb      	ldr	r3, [r7, #8]

}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3714      	adds	r7, #20
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	0003ffff 	.word	0x0003ffff

08008aa8 <VL53LX_calc_decoded_timeout_us>:

uint32_t VL53LX_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	6039      	str	r1, [r7, #0]
 8008ab2:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53LX_decode_timeout(timeout_encoded);
 8008abc:	88fb      	ldrh	r3, [r7, #6]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 f837 	bl	8008b32 <VL53LX_decode_timeout>
 8008ac4:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53LX_calc_timeout_us(timeout_mclks, macro_period_us);
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	f7ff ff88 	bl	80089de <VL53LX_calc_timeout_us>
 8008ace:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <VL53LX_encode_timeout>:


uint16_t VL53LX_encode_timeout(uint32_t timeout_mclks)
{
 8008ada:	b480      	push	{r7}
 8008adc:	b087      	sub	sp, #28
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8008aea:	2300      	movs	r3, #0
 8008aec:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d017      	beq.n	8008b24 <VL53LX_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3b01      	subs	r3, #1
 8008af8:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008afa:	e005      	b.n	8008b08 <VL53LX_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	085b      	lsrs	r3, r3, #1
 8008b00:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008b02:	89fb      	ldrh	r3, [r7, #14]
 8008b04:	3301      	adds	r3, #1
 8008b06:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1f4      	bne.n	8008afc <VL53LX_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008b12:	89fb      	ldrh	r3, [r7, #14]
 8008b14:	021b      	lsls	r3, r3, #8
 8008b16:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008b20:	4413      	add	r3, r2
 8008b22:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008b24:	8afb      	ldrh	r3, [r7, #22]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	371c      	adds	r7, #28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <VL53LX_decode_timeout>:


uint32_t VL53LX_decode_timeout(uint16_t encoded_timeout)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b085      	sub	sp, #20
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	4603      	mov	r3, r0
 8008b3a:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008b40:	88fb      	ldrh	r3, [r7, #6]
 8008b42:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008b44:	88fa      	ldrh	r2, [r7, #6]
 8008b46:	0a12      	lsrs	r2, r2, #8
 8008b48:	b292      	uxth	r2, r2
 8008b4a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008b50:	68fb      	ldr	r3, [r7, #12]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <VL53LX_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53LX_general_config_t *pgeneral,
	VL53LX_timing_config_t  *ptiming)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b088      	sub	sp, #32
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	60f8      	str	r0, [r7, #12]
 8008b66:	60b9      	str	r1, [r7, #8]
 8008b68:	607a      	str	r2, [r7, #4]
 8008b6a:	807b      	strh	r3, [r7, #2]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8008b7c:	887b      	ldrh	r3, [r7, #2]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d102      	bne.n	8008b88 <VL53LX_calc_timeout_register_values+0x2a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8008b82:	23f1      	movs	r3, #241	; 0xf1
 8008b84:	77fb      	strb	r3, [r7, #31]
 8008b86:	e05d      	b.n	8008c44 <VL53LX_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53LX_calc_macro_period_us(
 8008b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8a:	799a      	ldrb	r2, [r3, #6]
 8008b8c:	887b      	ldrh	r3, [r7, #2]
 8008b8e:	4611      	mov	r1, r2
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7ff fe5d 	bl	8008850 <VL53LX_calc_macro_period_us>
 8008b96:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53LX_calc_timeout_mclks(
 8008b98:	6979      	ldr	r1, [r7, #20]
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f7ff feea 	bl	8008974 <VL53LX_calc_timeout_mclks>
 8008ba0:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	2bff      	cmp	r3, #255	; 0xff
 8008ba6:	d901      	bls.n	8008bac <VL53LX_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8008ba8:	23ff      	movs	r3, #255	; 0xff
 8008baa:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8008bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb2:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8008bb4:	6979      	ldr	r1, [r7, #20]
 8008bb6:	68b8      	ldr	r0, [r7, #8]
 8008bb8:	f7ff fef9 	bl	80089ae <VL53LX_calc_encoded_timeout>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008bc0:	8a7b      	ldrh	r3, [r7, #18]
 8008bc2:	0a1b      	lsrs	r3, r3, #8
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8008bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bca:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008bcc:	8a7b      	ldrh	r3, [r7, #18]
 8008bce:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8008bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd2:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53LX_calc_encoded_timeout(
 8008bd4:	6979      	ldr	r1, [r7, #20]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7ff fee9 	bl	80089ae <VL53LX_calc_encoded_timeout>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008be0:	8a7b      	ldrh	r3, [r7, #18]
 8008be2:	0a1b      	lsrs	r3, r3, #8
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8008be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bea:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008bec:	8a7b      	ldrh	r3, [r7, #18]
 8008bee:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8008bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf2:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53LX_calc_macro_period_us(
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	7a5a      	ldrb	r2, [r3, #9]
 8008bf8:	887b      	ldrh	r3, [r7, #2]
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7ff fe27 	bl	8008850 <VL53LX_calc_macro_period_us>
 8008c02:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53LX_calc_encoded_timeout(
 8008c04:	6979      	ldr	r1, [r7, #20]
 8008c06:	68b8      	ldr	r0, [r7, #8]
 8008c08:	f7ff fed1 	bl	80089ae <VL53LX_calc_encoded_timeout>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008c10:	8a7b      	ldrh	r3, [r7, #18]
 8008c12:	0a1b      	lsrs	r3, r3, #8
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8008c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1a:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008c1c:	8a7b      	ldrh	r3, [r7, #18]
 8008c1e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8008c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c22:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53LX_calc_encoded_timeout(
 8008c24:	6979      	ldr	r1, [r7, #20]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff fec1 	bl	80089ae <VL53LX_calc_encoded_timeout>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8008c30:	8a7b      	ldrh	r3, [r7, #18]
 8008c32:	0a1b      	lsrs	r3, r3, #8
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8008c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8008c3c:	8a7b      	ldrh	r3, [r7, #18]
 8008c3e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8008c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c42:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8008c44:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3720      	adds	r7, #32
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <VL53LX_hist_copy_and_scale_ambient_info>:


VL53LX_Error  VL53LX_hist_copy_and_scale_ambient_info(
	VL53LX_zone_hist_info_t       *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 8008c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c54:	b08b      	sub	sp, #44	; 0x2c
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27

	int64_t  evts              = 0;
 8008c62:	f04f 0000 	mov.w	r0, #0
 8008c66:	f04f 0100 	mov.w	r1, #0
 8008c6a:	e9c7 0106 	strd	r0, r1, [r7, #24]
	int64_t  tmpi              = 0;
 8008c6e:	f04f 0000 	mov.w	r0, #0
 8008c72:	f04f 0100 	mov.w	r1, #0
 8008c76:	e9c7 0104 	strd	r0, r1, [r7, #16]
	int64_t  tmpo              = 0;
 8008c7a:	f04f 0000 	mov.w	r0, #0
 8008c7e:	f04f 0100 	mov.w	r1, #0
 8008c82:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 8008c86:	6879      	ldr	r1, [r7, #4]
 8008c88:	8849      	ldrh	r1, [r1, #2]
 8008c8a:	2900      	cmp	r1, #0
 8008c8c:	d103      	bne.n	8008c96 <VL53LX_hist_copy_and_scale_ambient_info+0x46>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8008c8e:	23f1      	movs	r3, #241	; 0xf1
 8008c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c94:	e0a5      	b.n	8008de2 <VL53LX_hist_copy_and_scale_ambient_info+0x192>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 8008c96:	6879      	ldr	r1, [r7, #4]
 8008c98:	7849      	ldrb	r1, [r1, #1]
 8008c9a:	2900      	cmp	r1, #0
 8008c9c:	f000 80a1 	beq.w	8008de2 <VL53LX_hist_copy_and_scale_ambient_info+0x192>
			podata->number_of_ambient_bins == 0) {
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	7ac9      	ldrb	r1, [r1, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 8008ca4:	2900      	cmp	r1, #0
 8008ca6:	f040 809c 	bne.w	8008de2 <VL53LX_hist_copy_and_scale_ambient_info+0x192>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	f8d1 1088 	ldr.w	r1, [r1, #136]	; 0x88
 8008cb0:	4608      	mov	r0, r1
 8008cb2:	f04f 0100 	mov.w	r1, #0
 8008cb6:	f110 0a01 	adds.w	sl, r0, #1
 8008cba:	f141 0b00 	adc.w	fp, r1, #0
 8008cbe:	e9c7 ab02 	strd	sl, fp, [r7, #8]
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	f8b1 107c 	ldrh.w	r1, [r1, #124]	; 0x7c
 8008cc8:	b288      	uxth	r0, r1
 8008cca:	f04f 0100 	mov.w	r1, #0
			tmpo   *=
 8008cce:	68fe      	ldr	r6, [r7, #12]
 8008cd0:	fb00 fc06 	mul.w	ip, r0, r6
 8008cd4:	68be      	ldr	r6, [r7, #8]
 8008cd6:	fb01 f606 	mul.w	r6, r1, r6
 8008cda:	44b4      	add	ip, r6
 8008cdc:	68be      	ldr	r6, [r7, #8]
 8008cde:	fba6 0100 	umull	r0, r1, r6, r0
 8008ce2:	eb0c 0601 	add.w	r6, ip, r1
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8008cec:	e9c7 0102 	strd	r0, r1, [r7, #8]

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 8008cf0:	6879      	ldr	r1, [r7, #4]
 8008cf2:	6889      	ldr	r1, [r1, #8]
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	f04f 0100 	mov.w	r1, #0
 8008cfa:	1c44      	adds	r4, r0, #1
 8008cfc:	f141 0500 	adc.w	r5, r1, #0
 8008d00:	e9c7 4504 	strd	r4, r5, [r7, #16]
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 8008d04:	6879      	ldr	r1, [r7, #4]
 8008d06:	8849      	ldrh	r1, [r1, #2]
 8008d08:	b288      	uxth	r0, r1
 8008d0a:	f04f 0100 	mov.w	r1, #0
			tmpi   *=
 8008d0e:	697c      	ldr	r4, [r7, #20]
 8008d10:	fb00 f504 	mul.w	r5, r0, r4
 8008d14:	693c      	ldr	r4, [r7, #16]
 8008d16:	fb01 f404 	mul.w	r4, r1, r4
 8008d1a:	442c      	add	r4, r5
 8008d1c:	693d      	ldr	r5, [r7, #16]
 8008d1e:	fba5 0100 	umull	r0, r1, r5, r0
 8008d22:	440c      	add	r4, r1
 8008d24:	4621      	mov	r1, r4
 8008d26:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8008d2a:	e9c7 0104 	strd	r0, r1, [r7, #16]

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 8008d2e:	6879      	ldr	r1, [r7, #4]
 8008d30:	68c9      	ldr	r1, [r1, #12]
 8008d32:	4608      	mov	r0, r1
 8008d34:	ea4f 71e0 	mov.w	r1, r0, asr #31
			evts  = tmpo *
 8008d38:	68fc      	ldr	r4, [r7, #12]
 8008d3a:	fb00 f504 	mul.w	r5, r0, r4
 8008d3e:	68bc      	ldr	r4, [r7, #8]
 8008d40:	fb01 f404 	mul.w	r4, r1, r4
 8008d44:	442c      	add	r4, r5
 8008d46:	68bd      	ldr	r5, [r7, #8]
 8008d48:	fba5 0100 	umull	r0, r1, r5, r0
 8008d4c:	440c      	add	r4, r1
 8008d4e:	4621      	mov	r1, r4
 8008d50:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8008d54:	e9c7 0106 	strd	r0, r1, [r7, #24]
			evts += (tmpi/2);
 8008d58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008d5c:	0fcc      	lsrs	r4, r1, #31
 8008d5e:	f04f 0500 	mov.w	r5, #0
 8008d62:	1822      	adds	r2, r4, r0
 8008d64:	eb45 0301 	adc.w	r3, r5, r1
 8008d68:	f04f 0000 	mov.w	r0, #0
 8008d6c:	f04f 0100 	mov.w	r1, #0
 8008d70:	0850      	lsrs	r0, r2, #1
 8008d72:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8008d76:	1059      	asrs	r1, r3, #1
 8008d78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d7c:	eb12 0800 	adds.w	r8, r2, r0
 8008d80:	eb43 0901 	adc.w	r9, r3, r1
 8008d84:	e9c7 8906 	strd	r8, r9, [r7, #24]


			if (tmpi != 0)
 8008d88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	d009      	beq.n	8008da4 <VL53LX_hist_copy_and_scale_ambient_info+0x154>
				evts = do_division_s(evts, tmpi);
 8008d90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008d98:	f7f7 fa72 	bl	8000280 <__aeabi_ldivmod>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	460b      	mov	r3, r1
 8008da0:	e9c7 2306 	strd	r2, r3, [r7, #24]

			podata->ambient_events_sum = (int32_t)evts;
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53LX_p_028 =
				podata->ambient_events_sum;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53LX_p_028 =
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 +=
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	7852      	ldrb	r2, [r2, #1]
 8008dc2:	0852      	lsrs	r2, r2, #1
 8008dc4:	b2d2      	uxtb	r2, r2
			podata->VL53LX_p_028 +=
 8008dc6:	441a      	add	r2, r3
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53LX_p_028 /=
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	7852      	ldrb	r2, [r2, #1]
			podata->VL53LX_p_028 /=
 8008dd8:	fb93 f2f2 	sdiv	r2, r3, r2
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 8008de2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	372c      	adds	r7, #44	; 0x2c
 8008dea:	46bd      	mov	sp, r7
 8008dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008df0 <VL53LX_hist_get_bin_sequence_config>:


void  VL53LX_hist_get_bin_sequence_config(
	VL53LX_DEV                     Dev,
	VL53LX_histogram_bin_data_t   *pdata)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]


	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3318      	adds	r3, #24
 8008dfe:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 8008e00:	2300      	movs	r3, #0
 8008e02:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 8008e04:	2300      	movs	r3, #0
 8008e06:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	; 0x2fa
	amb_thresh_low  = 1024 *
 8008e12:	029b      	lsls	r3, r3, #10
 8008e14:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
	amb_thresh_high = 1024 *
 8008e1c:	029b      	lsls	r3, r3, #10
 8008e1e:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f040 8095 	bne.w	8008f5a <VL53LX_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
		pdata->bin_seq[5] =
 8008e36:	091b      	lsrs	r3, r3, #4
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f893 32ed 	ldrb.w	r3, [r3, #749]	; 0x2ed
 8008e44:	f003 030f 	and.w	r3, r3, #15
 8008e48:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
		pdata->bin_seq[3] =
 8008e54:	091b      	lsrs	r3, r3, #4
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	f893 32ec 	ldrb.w	r3, [r3, #748]	; 0x2ec
 8008e62:	f003 030f 	and.w	r3, r3, #15
 8008e66:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
		pdata->bin_seq[1] =
 8008e72:	091b      	lsrs	r3, r3, #4
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	f893 32eb 	ldrb.w	r3, [r3, #747]	; 0x2eb
 8008e80:	f003 030f 	and.w	r3, r3, #15
 8008e84:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	da2c      	bge.n	8008ef0 <VL53LX_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			pdata->bin_seq[5] =
 8008e9c:	091b      	lsrs	r3, r3, #4
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	f893 32f5 	ldrb.w	r3, [r3, #757]	; 0x2f5
			& 0x0F;
 8008eaa:	f003 030f 	and.w	r3, r3, #15
 8008eae:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			pdata->bin_seq[3] =
 8008eba:	091b      	lsrs	r3, r3, #4
 8008ebc:	b2da      	uxtb	r2, r3
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	f893 32f4 	ldrb.w	r3, [r3, #756]	; 0x2f4
			& 0x0F;
 8008ec8:	f003 030f 	and.w	r3, r3, #15
 8008ecc:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			pdata->bin_seq[1] =
 8008ed8:	091b      	lsrs	r3, r3, #4
 8008eda:	b2da      	uxtb	r2, r3
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	f893 32f3 	ldrb.w	r3, [r3, #755]	; 0x2f3
			& 0x0F;
 8008ee6:	f003 030f 	and.w	r3, r3, #15
 8008eea:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	f340 80c2 	ble.w	8009082 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			pdata->bin_seq[5] =
 8008f04:	091b      	lsrs	r3, r3, #4
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	f893 32e7 	ldrb.w	r3, [r3, #743]	; 0x2e7
			& 0x0F;
 8008f12:	f003 030f 	and.w	r3, r3, #15
 8008f16:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			pdata->bin_seq[3] =
 8008f22:	091b      	lsrs	r3, r3, #4
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
			& 0x0F;
 8008f30:	f003 030f 	and.w	r3, r3, #15
 8008f34:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			pdata->bin_seq[1] =
 8008f40:	091b      	lsrs	r3, r3, #4
 8008f42:	b2da      	uxtb	r2, r3
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
			& 0x0F;
 8008f4e:	f003 030f 	and.w	r3, r3, #15
 8008f52:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	731a      	strb	r2, [r3, #12]
 8008f58:	e093      	b.n	8009082 <VL53LX_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	f893 32f1 	ldrb.w	r3, [r3, #753]	; 0x2f1
			& 0x0F;
 8008f60:	f003 030f 	and.w	r3, r3, #15
 8008f64:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
			& 0x0F;
 8008f70:	f003 030f 	and.w	r3, r3, #15
 8008f74:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
		pdata->bin_seq[3] =
 8008f80:	091b      	lsrs	r3, r3, #4
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	f893 32ef 	ldrb.w	r3, [r3, #751]	; 0x2ef
 8008f8e:	f003 030f 	and.w	r3, r3, #15
 8008f92:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
		pdata->bin_seq[1] =
 8008f9e:	091b      	lsrs	r3, r3, #4
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f893 32ee 	ldrb.w	r3, [r3, #750]	; 0x2ee
			& 0x0F;
 8008fac:	f003 030f 	and.w	r3, r3, #15
 8008fb0:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	da2c      	bge.n	800901c <VL53LX_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			pdata->bin_seq[5] =
 8008fc8:	091b      	lsrs	r3, r3, #4
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
			& 0x0F;
 8008fd6:	f003 030f 	and.w	r3, r3, #15
 8008fda:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			pdata->bin_seq[3] =
 8008fe6:	091b      	lsrs	r3, r3, #4
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	f893 32f7 	ldrb.w	r3, [r3, #759]	; 0x2f7
			& 0x0F;
 8008ff4:	f003 030f 	and.w	r3, r3, #15
 8008ff8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			pdata->bin_seq[1] =
 8009004:	091b      	lsrs	r3, r3, #4
 8009006:	b2da      	uxtb	r2, r3
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	f893 32f6 	ldrb.w	r3, [r3, #758]	; 0x2f6
			& 0x0F;
 8009012:	f003 030f 	and.w	r3, r3, #15
 8009016:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	429a      	cmp	r2, r3
 8009026:	dd2c      	ble.n	8009082 <VL53LX_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			pdata->bin_seq[5] =
 800902e:	091b      	lsrs	r3, r3, #4
 8009030:	b2da      	uxtb	r2, r3
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	f893 32ea 	ldrb.w	r3, [r3, #746]	; 0x2ea
			& 0x0F;
 800903c:	f003 030f 	and.w	r3, r3, #15
 8009040:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			pdata->bin_seq[3] =
 800904c:	091b      	lsrs	r3, r3, #4
 800904e:	b2da      	uxtb	r2, r3
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
			& 0x0F;
 800905a:	f003 030f 	and.w	r3, r3, #15
 800905e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			pdata->bin_seq[1] =
 800906a:	091b      	lsrs	r3, r3, #4
 800906c:	b2da      	uxtb	r2, r3
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
			& 0x0F;
 8009078:	f003 030f 	and.w	r3, r3, #15
 800907c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8009082:	2300      	movs	r3, #0
 8009084:	75fb      	strb	r3, [r7, #23]
 8009086:	e007      	b.n	8009098 <VL53LX_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 8009088:	7dfb      	ldrb	r3, [r7, #23]
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	4413      	add	r3, r2
 800908e:	2201      	movs	r2, #1
 8009090:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 8009092:	7dfb      	ldrb	r3, [r7, #23]
 8009094:	3301      	adds	r3, #1
 8009096:	75fb      	strb	r3, [r7, #23]
 8009098:	7dfb      	ldrb	r3, [r7, #23]
 800909a:	2b05      	cmp	r3, #5
 800909c:	d9f4      	bls.n	8009088 <VL53LX_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800909e:	bf00      	nop
 80090a0:	bf00      	nop
 80090a2:	371c      	adds	r7, #28
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <VL53LX_hist_phase_consistency_check>:
VL53LX_Error  VL53LX_hist_phase_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_results_t      *prange_curr)
{
 80090ac:	b590      	push	{r4, r7, lr}
 80090ae:	b093      	sub	sp, #76	; 0x4c
 80090b0:	af04      	add	r7, sp, #16
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
 80090b8:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80090ba:	2300      	movs	r3, #0
 80090bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_LLDriverData_t *pdev =
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3318      	adds	r3, #24
 80090c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53LXDevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 80090c6:	2300      	movs	r3, #0
 80090c8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 80090cc:	2300      	movs	r3, #0
 80090ce:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 80090d2:	2300      	movs	r3, #0
 80090d4:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 80090da:	2300      	movs	r3, #0
 80090dc:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 80090de:	2300      	movs	r3, #0
 80090e0:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53LX_DeviceError  range_status = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 80090e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80090ec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 80090f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f2:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 80090f6:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 80090f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fa:	f8b3 323a 	ldrh.w	r3, [r3, #570]	; 0x23a
 80090fe:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 8009100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009102:	f893 3236 	ldrb.w	r3, [r3, #566]	; 0x236
 8009106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800910a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800910e:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 8009110:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009112:	021b      	lsls	r3, r3, #8
 8009114:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	785b      	ldrb	r3, [r3, #1]
 800911a:	2b07      	cmp	r3, #7
 800911c:	d006      	beq.n	800912c <VL53LX_hist_phase_consistency_check+0x80>
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	785b      	ldrb	r3, [r3, #1]
			VL53LX_DEVICESTATE_RANGING_GATHER_DATA &&
 8009122:	2b08      	cmp	r3, #8
 8009124:	d002      	beq.n	800912c <VL53LX_hist_phase_consistency_check+0x80>
				VL53LX_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 8009126:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800912a:	e0ec      	b.n	8009306 <VL53LX_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 800912c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800912e:	2b00      	cmp	r3, #0
 8009130:	d102      	bne.n	8009138 <VL53LX_hist_phase_consistency_check+0x8c>
		return status;
 8009132:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009136:	e0e6      	b.n	8009306 <VL53LX_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 8009138:	2300      	movs	r3, #0
 800913a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800913e:	e0d9      	b.n	80092f4 <VL53LX_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8009140:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009144:	683a      	ldr	r2, [r7, #0]
 8009146:	214c      	movs	r1, #76	; 0x4c
 8009148:	fb01 f303 	mul.w	r3, r1, r3
 800914c:	4413      	add	r3, r2
 800914e:	335e      	adds	r3, #94	; 0x5e
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	2b09      	cmp	r3, #9
 8009154:	d00b      	beq.n	800916e <VL53LX_hist_phase_consistency_check+0xc2>
			VL53LX_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53LX_p_003[lc].range_status ==
 8009156:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	214c      	movs	r1, #76	; 0x4c
 800915e:	fb01 f303 	mul.w	r3, r1, r3
 8009162:	4413      	add	r3, r2
 8009164:	335e      	adds	r3, #94	; 0x5e
 8009166:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53LX_p_003[lc].range_status ==
 8009168:	2b13      	cmp	r3, #19
 800916a:	f040 80bd 	bne.w	80092e8 <VL53LX_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	795b      	ldrb	r3, [r3, #5]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10a      	bne.n	800918c <VL53LX_hist_phase_consistency_check+0xe0>
			prange_curr->VL53LX_p_003[lc].range_status =
 8009176:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	214c      	movs	r1, #76	; 0x4c
 800917e:	fb01 f303 	mul.w	r3, r1, r3
 8009182:	4413      	add	r3, r2
 8009184:	335e      	adds	r3, #94	; 0x5e
 8009186:	2217      	movs	r2, #23
 8009188:	701a      	strb	r2, [r3, #0]
 800918a:	e009      	b.n	80091a0 <VL53LX_hist_phase_consistency_check+0xf4>
			VL53LX_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53LX_p_003[lc].range_status =
 800918c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	214c      	movs	r1, #76	; 0x4c
 8009194:	fb01 f303 	mul.w	r3, r1, r3
 8009198:	4413      	add	r3, r2
 800919a:	335e      	adds	r3, #94	; 0x5e
 800919c:	2207      	movs	r2, #7
 800919e:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 80091a0:	2300      	movs	r3, #0
 80091a2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80091a6:	e097      	b.n	80092d8 <VL53LX_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 80091a8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80091ac:	683a      	ldr	r2, [r7, #0]
 80091ae:	214c      	movs	r1, #76	; 0x4c
 80091b0:	fb01 f303 	mul.w	r3, r1, r3
 80091b4:	4413      	add	r3, r2
 80091b6:	3354      	adds	r3, #84	; 0x54
 80091b8:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011) {
 80091ba:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	4613      	mov	r3, r2
 80091c2:	005b      	lsls	r3, r3, #1
 80091c4:	4413      	add	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4403      	add	r3, r0
 80091ca:	3310      	adds	r3, #16
 80091cc:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53LX_p_003[lc].VL53LX_p_011 >
 80091ce:	4299      	cmp	r1, r3
 80091d0:	d915      	bls.n	80091fe <VL53LX_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011 -
 80091d2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	214c      	movs	r1, #76	; 0x4c
 80091da:	fb01 f303 	mul.w	r3, r1, r3
 80091de:	4413      	add	r3, r2
 80091e0:	3354      	adds	r3, #84	; 0x54
 80091e2:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53LX_p_003[p].VL53LX_p_011;
 80091e4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	4613      	mov	r3, r2
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4403      	add	r3, r0
 80091f4:	3310      	adds	r3, #16
 80091f6:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 80091f8:	1acb      	subs	r3, r1, r3
 80091fa:	867b      	strh	r3, [r7, #50]	; 0x32
 80091fc:	e014      	b.n	8009228 <VL53LX_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53LX_p_003[p].VL53LX_p_011 -
 80091fe:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8009202:	6879      	ldr	r1, [r7, #4]
 8009204:	4613      	mov	r3, r2
 8009206:	005b      	lsls	r3, r3, #1
 8009208:	4413      	add	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	440b      	add	r3, r1
 800920e:	3310      	adds	r3, #16
 8009210:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53LX_p_003[lc].VL53LX_p_011;
 8009212:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	204c      	movs	r0, #76	; 0x4c
 800921a:	fb00 f303 	mul.w	r3, r0, r3
 800921e:	440b      	add	r3, r1
 8009220:	3354      	adds	r3, #84	; 0x54
 8009222:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 8009228:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800922a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800922c:	429a      	cmp	r2, r3
 800922e:	d24e      	bcs.n	80092ce <VL53LX_hist_phase_consistency_check+0x222>





				if (status == VL53LX_ERROR_NONE)
 8009230:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009234:	2b00      	cmp	r3, #0
 8009236:	d125      	bne.n	8009284 <VL53LX_hist_phase_consistency_check+0x1d8>
					status =
					VL53LX_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53LX_p_003[p]),
 8009238:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53LX_hist_events_consistency_check(
 800923c:	4613      	mov	r3, r2
 800923e:	005b      	lsls	r3, r3, #1
 8009240:	4413      	add	r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	3308      	adds	r3, #8
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53LX_p_003[lc]),
 800924a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_events_consistency_check(
 800924e:	224c      	movs	r2, #76	; 0x4c
 8009250:	fb02 f303 	mul.w	r3, r2, r3
 8009254:	3310      	adds	r3, #16
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	4413      	add	r3, r2
 800925a:	3304      	adds	r3, #4
 800925c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800925e:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 8009262:	f107 0217 	add.w	r2, r7, #23
 8009266:	9203      	str	r2, [sp, #12]
 8009268:	f107 021c 	add.w	r2, r7, #28
 800926c:	9202      	str	r2, [sp, #8]
 800926e:	f107 0218 	add.w	r2, r7, #24
 8009272:	9201      	str	r2, [sp, #4]
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	4623      	mov	r3, r4
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	f000 f848 	bl	800930e <VL53LX_hist_events_consistency_check>
 800927e:	4603      	mov	r3, r0
 8009280:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53LX_ERROR_NONE &&
 8009284:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009288:	2b00      	cmp	r3, #0
 800928a:	d115      	bne.n	80092b8 <VL53LX_hist_phase_consistency_check+0x20c>
					range_status ==
 800928c:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53LX_ERROR_NONE &&
 800928e:	2b09      	cmp	r3, #9
 8009290:	d112      	bne.n	80092b8 <VL53LX_hist_phase_consistency_check+0x20c>
					VL53LX_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53LX_hist_merged_pulse_check(
 8009292:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53LX_p_003[lc]),
 8009296:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53LX_hist_merged_pulse_check(
 800929a:	224c      	movs	r2, #76	; 0x4c
 800929c:	fb02 f303 	mul.w	r3, r2, r3
 80092a0:	3310      	adds	r3, #16
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	4413      	add	r3, r2
 80092a6:	3304      	adds	r3, #4
 80092a8:	f107 0217 	add.w	r2, r7, #23
 80092ac:	4619      	mov	r1, r3
 80092ae:	f000 faaf 	bl	8009810 <VL53LX_hist_merged_pulse_check>
 80092b2:	4603      	mov	r3, r0
 80092b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53LX_p_003[lc].range_status =
 80092b8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80092bc:	7df8      	ldrb	r0, [r7, #23]
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	214c      	movs	r1, #76	; 0x4c
 80092c2:	fb01 f303 	mul.w	r3, r1, r3
 80092c6:	4413      	add	r3, r2
 80092c8:	335e      	adds	r3, #94	; 0x5e
 80092ca:	4602      	mov	r2, r0
 80092cc:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 80092ce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80092d2:	3301      	adds	r3, #1
 80092d4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	795b      	ldrb	r3, [r3, #5]
 80092dc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80092e0:	429a      	cmp	r2, r3
 80092e2:	f4ff af61 	bcc.w	80091a8 <VL53LX_hist_phase_consistency_check+0xfc>
 80092e6:	e000      	b.n	80092ea <VL53LX_hist_phase_consistency_check+0x23e>
			continue;
 80092e8:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 80092ea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80092ee:	3301      	adds	r3, #1
 80092f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	7c9b      	ldrb	r3, [r3, #18]
 80092f8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80092fc:	429a      	cmp	r2, r3
 80092fe:	f4ff af1f 	bcc.w	8009140 <VL53LX_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 8009302:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009306:	4618      	mov	r0, r3
 8009308:	373c      	adds	r7, #60	; 0x3c
 800930a:	46bd      	mov	sp, r7
 800930c:	bd90      	pop	{r4, r7, pc}

0800930e <VL53LX_hist_events_consistency_check>:
	VL53LX_object_data_t        *prange_prev,
	VL53LX_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53LX_DeviceError          *prange_status)
{
 800930e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009312:	b0a8      	sub	sp, #160	; 0xa0
 8009314:	af00      	add	r7, sp, #0
 8009316:	64ba      	str	r2, [r7, #72]	; 0x48
 8009318:	647b      	str	r3, [r7, #68]	; 0x44
 800931a:	4603      	mov	r3, r0
 800931c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009320:	460b      	mov	r3, r1
 8009322:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009326:	2300      	movs	r3, #0
 8009328:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	int64_t   tmpp                   = 0;
 800932c:	f04f 0200 	mov.w	r2, #0
 8009330:	f04f 0300 	mov.w	r3, #0
 8009334:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	int64_t   tmpc                   = 0;
 8009338:	f04f 0200 	mov.w	r2, #0
 800933c:	f04f 0300 	mov.w	r3, #0
 8009340:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	int64_t   events_scaler          = 0;
 8009344:	f04f 0200 	mov.w	r2, #0
 8009348:	f04f 0300 	mov.w	r3, #0
 800934c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	int64_t   events_scaler_sq       = 0;
 8009350:	f04f 0200 	mov.w	r2, #0
 8009354:	f04f 0300 	mov.w	r3, #0
 8009358:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t   c_signal_events        = 0;
 800935c:	f04f 0200 	mov.w	r2, #0
 8009360:	f04f 0300 	mov.w	r3, #0
 8009364:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	int64_t   c_sig_noise_sq         = 0;
 8009368:	f04f 0200 	mov.w	r2, #0
 800936c:	f04f 0300 	mov.w	r3, #0
 8009370:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t   c_amb_noise_sq         = 0;
 8009374:	f04f 0200 	mov.w	r2, #0
 8009378:	f04f 0300 	mov.w	r3, #0
 800937c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t   p_amb_noise_sq         = 0;
 8009380:	f04f 0200 	mov.w	r2, #0
 8009384:	f04f 0300 	mov.w	r3, #0
 8009388:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	int32_t   p_signal_events        = 0;
 800938c:	2300      	movs	r3, #0
 800938e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t  noise_sq_sum           = 0;
 8009390:	2300      	movs	r3, #0
 8009392:	653b      	str	r3, [r7, #80]	; 0x50



	if (event_sigma == 0) {
 8009394:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009398:	2b00      	cmp	r3, #0
 800939a:	d106      	bne.n	80093aa <VL53LX_hist_events_consistency_check+0x9c>
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 800939c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80093a0:	2209      	movs	r2, #9
 80093a2:	701a      	strb	r2, [r3, #0]
		return status;
 80093a4:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 80093a8:	e22d      	b.n	8009806 <VL53LX_hist_events_consistency_check+0x4f8>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 80093aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	461a      	mov	r2, r3
 80093b0:	f04f 0300 	mov.w	r3, #0
 80093b4:	f112 0801 	adds.w	r8, r2, #1
 80093b8:	f143 0900 	adc.w	r9, r3, #0
 80093bc:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 80093c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093c2:	885b      	ldrh	r3, [r3, #2]
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	f04f 0300 	mov.w	r3, #0
 80093ca:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80093ce:	fb02 f001 	mul.w	r0, r2, r1
 80093d2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80093d6:	fb03 f101 	mul.w	r1, r3, r1
 80093da:	4408      	add	r0, r1
 80093dc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80093e0:	fba1 2302 	umull	r2, r3, r1, r2
 80093e4:	18c1      	adds	r1, r0, r3
 80093e6:	460b      	mov	r3, r1
 80093e8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 80093ec:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 80093f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	461a      	mov	r2, r3
 80093f8:	f04f 0300 	mov.w	r3, #0
 80093fc:	f112 0a01 	adds.w	sl, r2, #1
 8009400:	f143 0b00 	adc.w	fp, r3, #0
 8009404:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
	tmpc *= (int64_t)prange_curr->VL53LX_p_004;
 8009408:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800940c:	8adb      	ldrh	r3, [r3, #22]
 800940e:	b29a      	uxth	r2, r3
 8009410:	f04f 0300 	mov.w	r3, #0
 8009414:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009418:	fb02 f001 	mul.w	r0, r2, r1
 800941c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009420:	fb03 f101 	mul.w	r1, r3, r1
 8009424:	4408      	add	r0, r1
 8009426:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800942a:	fba1 2302 	umull	r2, r3, r1, r2
 800942e:	18c1      	adds	r1, r0, r3
 8009430:	460b      	mov	r3, r1
 8009432:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8009436:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80



	events_scaler  = tmpp * 4096;
 800943a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800943e:	f04f 0000 	mov.w	r0, #0
 8009442:	f04f 0100 	mov.w	r1, #0
 8009446:	0319      	lsls	r1, r3, #12
 8009448:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800944c:	0310      	lsls	r0, r2, #12
 800944e:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
	if (tmpc != 0) {
 8009452:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009456:	4313      	orrs	r3, r2
 8009458:	d026      	beq.n	80094a8 <VL53LX_hist_events_consistency_check+0x19a>
		events_scaler += (tmpc/2);
 800945a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800945e:	0fcb      	lsrs	r3, r1, #31
 8009460:	461a      	mov	r2, r3
 8009462:	f04f 0300 	mov.w	r3, #0
 8009466:	1814      	adds	r4, r2, r0
 8009468:	eb43 0501 	adc.w	r5, r3, r1
 800946c:	f04f 0200 	mov.w	r2, #0
 8009470:	f04f 0300 	mov.w	r3, #0
 8009474:	0862      	lsrs	r2, r4, #1
 8009476:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800947a:	106b      	asrs	r3, r5, #1
 800947c:	4610      	mov	r0, r2
 800947e:	4619      	mov	r1, r3
 8009480:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009484:	1814      	adds	r4, r2, r0
 8009486:	63bc      	str	r4, [r7, #56]	; 0x38
 8009488:	414b      	adcs	r3, r1
 800948a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800948c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8009490:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		events_scaler  = do_division_s(events_scaler, tmpc);
 8009494:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009498:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800949c:	f7f6 fef0 	bl	8000280 <__aeabi_ldivmod>
 80094a0:	4602      	mov	r2, r0
 80094a2:	460b      	mov	r3, r1
 80094a4:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	}

	events_scaler_sq  = events_scaler * events_scaler;
 80094a8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80094ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094b0:	fb03 f102 	mul.w	r1, r3, r2
 80094b4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80094b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094bc:	fb03 f302 	mul.w	r3, r3, r2
 80094c0:	4419      	add	r1, r3
 80094c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094c6:	fba3 2303 	umull	r2, r3, r3, r3
 80094ca:	4419      	add	r1, r3
 80094cc:	460b      	mov	r3, r1
 80094ce:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 80094d2:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	events_scaler_sq += 2048;
 80094d6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80094da:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 80094de:	6339      	str	r1, [r7, #48]	; 0x30
 80094e0:	f143 0300 	adc.w	r3, r3, #0
 80094e4:	637b      	str	r3, [r7, #52]	; 0x34
 80094e6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80094ea:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	events_scaler_sq /= 4096;
 80094ee:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80094f2:	4610      	mov	r0, r2
 80094f4:	4619      	mov	r1, r3
 80094f6:	2800      	cmp	r0, #0
 80094f8:	f171 0300 	sbcs.w	r3, r1, #0
 80094fc:	da06      	bge.n	800950c <VL53LX_hist_events_consistency_check+0x1fe>
 80094fe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8009502:	f04f 0300 	mov.w	r3, #0
 8009506:	1880      	adds	r0, r0, r2
 8009508:	eb43 0101 	adc.w	r1, r3, r1
 800950c:	f04f 0200 	mov.w	r2, #0
 8009510:	f04f 0300 	mov.w	r3, #0
 8009514:	0b02      	lsrs	r2, r0, #12
 8009516:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800951a:	130b      	asrs	r3, r1, #12
 800951c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78



	c_signal_events  = (int64_t)prange_curr->VL53LX_p_017;
 8009520:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009526:	461a      	mov	r2, r3
 8009528:	f04f 0300 	mov.w	r3, #0
 800952c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events -= (int64_t)prange_curr->VL53LX_p_016;
 8009530:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009536:	4618      	mov	r0, r3
 8009538:	f04f 0100 	mov.w	r1, #0
 800953c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009540:	1a14      	subs	r4, r2, r0
 8009542:	62bc      	str	r4, [r7, #40]	; 0x28
 8009544:	eb63 0301 	sbc.w	r3, r3, r1
 8009548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800954a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800954e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events *= (int64_t)events_scaler;
 8009552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009554:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009558:	fb02 f203 	mul.w	r2, r2, r3
 800955c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009560:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009562:	fb01 f303 	mul.w	r3, r1, r3
 8009566:	18d1      	adds	r1, r2, r3
 8009568:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800956a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800956e:	fba2 2303 	umull	r2, r3, r2, r3
 8009572:	4419      	add	r1, r3
 8009574:	460b      	mov	r3, r1
 8009576:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800957a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	c_signal_events += 2048;
 800957e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009582:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009586:	6239      	str	r1, [r7, #32]
 8009588:	f143 0300 	adc.w	r3, r3, #0
 800958c:	627b      	str	r3, [r7, #36]	; 0x24
 800958e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8009592:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	c_signal_events /= 4096;
 8009596:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800959a:	2a00      	cmp	r2, #0
 800959c:	f173 0100 	sbcs.w	r1, r3, #0
 80095a0:	da06      	bge.n	80095b0 <VL53LX_hist_events_consistency_check+0x2a2>
 80095a2:	f640 70ff 	movw	r0, #4095	; 0xfff
 80095a6:	f04f 0100 	mov.w	r1, #0
 80095aa:	1812      	adds	r2, r2, r0
 80095ac:	eb41 0303 	adc.w	r3, r1, r3
 80095b0:	f04f 0000 	mov.w	r0, #0
 80095b4:	f04f 0100 	mov.w	r1, #0
 80095b8:	0b10      	lsrs	r0, r2, #12
 80095ba:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80095be:	1319      	asrs	r1, r3, #12
 80095c0:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 80095c4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80095c8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq *= (int64_t)prange_curr->VL53LX_p_017;
 80095cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80095d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d2:	461a      	mov	r2, r3
 80095d4:	f04f 0300 	mov.w	r3, #0
 80095d8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80095da:	fb02 f001 	mul.w	r0, r2, r1
 80095de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80095e0:	fb03 f101 	mul.w	r1, r3, r1
 80095e4:	4401      	add	r1, r0
 80095e6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80095e8:	fba0 2302 	umull	r2, r3, r0, r2
 80095ec:	4419      	add	r1, r3
 80095ee:	460b      	mov	r3, r1
 80095f0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 80095f4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	c_sig_noise_sq += 2048;
 80095f8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80095fc:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8009600:	61b9      	str	r1, [r7, #24]
 8009602:	f143 0300 	adc.w	r3, r3, #0
 8009606:	61fb      	str	r3, [r7, #28]
 8009608:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800960c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	c_sig_noise_sq /= 4096;
 8009610:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009614:	2a00      	cmp	r2, #0
 8009616:	f173 0100 	sbcs.w	r1, r3, #0
 800961a:	da06      	bge.n	800962a <VL53LX_hist_events_consistency_check+0x31c>
 800961c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8009620:	f04f 0100 	mov.w	r1, #0
 8009624:	1812      	adds	r2, r2, r0
 8009626:	eb41 0303 	adc.w	r3, r1, r3
 800962a:	f04f 0000 	mov.w	r0, #0
 800962e:	f04f 0100 	mov.w	r1, #0
 8009632:	0b10      	lsrs	r0, r2, #12
 8009634:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8009638:	1319      	asrs	r1, r3, #12
 800963a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800963e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009642:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq *= (int64_t)prange_curr->VL53LX_p_016;
 8009646:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800964a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964c:	461a      	mov	r2, r3
 800964e:	f04f 0300 	mov.w	r3, #0
 8009652:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009654:	fb02 f001 	mul.w	r0, r2, r1
 8009658:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800965a:	fb03 f101 	mul.w	r1, r3, r1
 800965e:	4401      	add	r1, r0
 8009660:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009662:	fba0 2302 	umull	r2, r3, r0, r2
 8009666:	4419      	add	r1, r3
 8009668:	460b      	mov	r3, r1
 800966a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 800966e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	c_amb_noise_sq += 2048;
 8009672:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009676:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800967a:	6139      	str	r1, [r7, #16]
 800967c:	f143 0300 	adc.w	r3, r3, #0
 8009680:	617b      	str	r3, [r7, #20]
 8009682:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009686:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4096;
 800968a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800968e:	2a00      	cmp	r2, #0
 8009690:	f173 0100 	sbcs.w	r1, r3, #0
 8009694:	da06      	bge.n	80096a4 <VL53LX_hist_events_consistency_check+0x396>
 8009696:	f640 70ff 	movw	r0, #4095	; 0xfff
 800969a:	f04f 0100 	mov.w	r1, #0
 800969e:	1812      	adds	r2, r2, r0
 80096a0:	eb41 0303 	adc.w	r3, r1, r3
 80096a4:	f04f 0000 	mov.w	r0, #0
 80096a8:	f04f 0100 	mov.w	r1, #0
 80096ac:	0b10      	lsrs	r0, r2, #12
 80096ae:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80096b2:	1319      	asrs	r1, r3, #12
 80096b4:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60


	c_amb_noise_sq += 2;
 80096b8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80096bc:	1c91      	adds	r1, r2, #2
 80096be:	60b9      	str	r1, [r7, #8]
 80096c0:	f143 0300 	adc.w	r3, r3, #0
 80096c4:	60fb      	str	r3, [r7, #12]
 80096c6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80096ca:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	c_amb_noise_sq /= 4;
 80096ce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80096d2:	2a00      	cmp	r2, #0
 80096d4:	f173 0100 	sbcs.w	r1, r3, #0
 80096d8:	da02      	bge.n	80096e0 <VL53LX_hist_events_consistency_check+0x3d2>
 80096da:	3203      	adds	r2, #3
 80096dc:	f143 0300 	adc.w	r3, r3, #0
 80096e0:	f04f 0000 	mov.w	r0, #0
 80096e4:	f04f 0100 	mov.w	r1, #0
 80096e8:	0890      	lsrs	r0, r2, #2
 80096ea:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80096ee:	1099      	asrs	r1, r3, #2
 80096f0:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53LX_p_016;
 80096f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096f6:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 80096f8:	461a      	mov	r2, r3
 80096fa:	f04f 0300 	mov.w	r3, #0
 80096fe:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	p_amb_noise_sq += 2;
 8009702:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009706:	1c91      	adds	r1, r2, #2
 8009708:	6039      	str	r1, [r7, #0]
 800970a:	f143 0300 	adc.w	r3, r3, #0
 800970e:	607b      	str	r3, [r7, #4]
 8009710:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009714:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	p_amb_noise_sq /= 4;
 8009718:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800971c:	2a00      	cmp	r2, #0
 800971e:	f173 0100 	sbcs.w	r1, r3, #0
 8009722:	da02      	bge.n	800972a <VL53LX_hist_events_consistency_check+0x41c>
 8009724:	3203      	adds	r2, #3
 8009726:	f143 0300 	adc.w	r3, r3, #0
 800972a:	f04f 0000 	mov.w	r0, #0
 800972e:	f04f 0100 	mov.w	r1, #0
 8009732:	0890      	lsrs	r0, r2, #2
 8009734:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8009738:	1099      	asrs	r1, r3, #2
 800973a:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

	noise_sq_sum =
		(uint32_t)prange_prev->VL53LX_p_017 +
 800973e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009740:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 8009742:	6ebb      	ldr	r3, [r7, #104]	; 0x68
		(uint32_t)prange_prev->VL53LX_p_017 +
 8009744:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 8009746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		(uint32_t)c_sig_noise_sq +
 8009748:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800974a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	noise_sq_sum =
 800974c:	4413      	add	r3, r2
 800974e:	653b      	str	r3, [r7, #80]	; 0x50

	*pevents_tolerance =
		(int32_t)VL53LX_isqrt(noise_sq_sum * 16);
 8009750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009752:	011b      	lsls	r3, r3, #4
 8009754:	4618      	mov	r0, r3
 8009756:	f002 f822 	bl	800b79e <VL53LX_isqrt>
 800975a:	4603      	mov	r3, r0
 800975c:	461a      	mov	r2, r3
	*pevents_tolerance =
 800975e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009762:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 8009764:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800976e:	fb02 f203 	mul.w	r2, r2, r3
 8009772:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009776:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 8009778:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f103 0220 	add.w	r2, r3, #32
 8009782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009786:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 8009788:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	da00      	bge.n	8009794 <VL53LX_hist_events_consistency_check+0x486>
 8009792:	333f      	adds	r3, #63	; 0x3f
 8009794:	119b      	asrs	r3, r3, #6
 8009796:	461a      	mov	r2, r3
 8009798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800979c:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53LX_p_017;
 800979e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	657b      	str	r3, [r7, #84]	; 0x54
	p_signal_events -= (int32_t)prange_prev->VL53LX_p_016;
 80097a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	461a      	mov	r2, r3
 80097aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097ac:	1a9b      	subs	r3, r3, r2
 80097ae:	657b      	str	r3, [r7, #84]	; 0x54

	if ((int32_t)c_signal_events > p_signal_events)
 80097b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097b4:	429a      	cmp	r2, r3
 80097b6:	da06      	bge.n	80097c6 <VL53LX_hist_events_consistency_check+0x4b8>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 80097b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80097ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097bc:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 80097be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	e005      	b.n	80097d2 <VL53LX_hist_events_consistency_check+0x4c4>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 80097c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097ca:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 80097cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097d0:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 80097d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	429a      	cmp	r2, r3
 80097e0:	dd0b      	ble.n	80097fa <VL53LX_hist_events_consistency_check+0x4ec>
		prange_curr->VL53LX_p_004 > min_effective_spad_count)
 80097e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80097e6:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 80097e8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d204      	bcs.n	80097fa <VL53LX_hist_events_consistency_check+0x4ec>
		*prange_status = VL53LX_DEVICEERROR_EVENTCONSISTENCY;
 80097f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80097f4:	2214      	movs	r2, #20
 80097f6:	701a      	strb	r2, [r3, #0]
 80097f8:	e003      	b.n	8009802 <VL53LX_hist_events_consistency_check+0x4f4>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 80097fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80097fe:	2209      	movs	r2, #9
 8009800:	701a      	strb	r2, [r3, #0]





	return status;
 8009802:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 8009806:	4618      	mov	r0, r3
 8009808:	37a0      	adds	r7, #160	; 0xa0
 800980a:	46bd      	mov	sp, r7
 800980c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009810 <VL53LX_hist_merged_pulse_check>:

VL53LX_Error  VL53LX_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53LX_range_data_t         *pdata,
	VL53LX_DeviceError          *prange_status)
{
 8009810:	b480      	push	{r7}
 8009812:	b087      	sub	sp, #28
 8009814:	af00      	add	r7, sp, #0
 8009816:	4603      	mov	r3, r0
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
 800981c:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error  status   = VL53LX_ERROR_NONE;
 800981e:	2300      	movs	r3, #0
 8009820:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 8009822:	2300      	movs	r3, #0
 8009824:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8009832:	429a      	cmp	r2, r3
 8009834:	dd0b      	ble.n	800984e <VL53LX_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800983c:	b29a      	uxth	r2, r3
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8009844:	b29b      	uxth	r3, r3
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	b29b      	uxth	r3, r3
		delta_mm =
 800984a:	82fb      	strh	r3, [r7, #22]
 800984c:	e00a      	b.n	8009864 <VL53LX_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8009854:	b29a      	uxth	r2, r3
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800985c:	b29b      	uxth	r3, r3
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	b29b      	uxth	r3, r3
		delta_mm =
 8009862:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 8009864:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009868:	2b00      	cmp	r3, #0
 800986a:	dd09      	ble.n	8009880 <VL53LX_hist_merged_pulse_check+0x70>
 800986c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009870:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009874:	429a      	cmp	r2, r3
 8009876:	dd03      	ble.n	8009880 <VL53LX_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2216      	movs	r2, #22
 800987c:	701a      	strb	r2, [r3, #0]
 800987e:	e002      	b.n	8009886 <VL53LX_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53LX_DEVICEERROR_RANGECOMPLETE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2209      	movs	r2, #9
 8009884:	701a      	strb	r2, [r3, #0]

	return status;
 8009886:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800988a:	4618      	mov	r0, r3
 800988c:	371c      	adds	r7, #28
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <VL53LX_hist_xmonitor_consistency_check>:
VL53LX_Error  VL53LX_hist_xmonitor_consistency_check(
	VL53LX_DEV                   Dev,
	VL53LX_zone_hist_info_t     *phist_prev,
	VL53LX_zone_objects_t       *prange_prev,
	VL53LX_range_data_t         *prange_curr)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b08e      	sub	sp, #56	; 0x38
 800989a:	af04      	add	r7, sp, #16
 800989c:	60f8      	str	r0, [r7, #12]
 800989e:	60b9      	str	r1, [r7, #8]
 80098a0:	607a      	str	r2, [r7, #4]
 80098a2:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 80098a4:	2300      	movs	r3, #0
 80098a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev =
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3318      	adds	r3, #24
 80098ae:	623b      	str	r3, [r7, #32]
		VL53LXDevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 80098b0:	2300      	movs	r3, #0
 80098b2:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 80098b4:	2300      	movs	r3, #0
 80098b6:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	f893 3250 	ldrb.w	r3, [r3, #592]	; 0x250
 80098be:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 80098c0:	6a3b      	ldr	r3, [r7, #32]
 80098c2:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 80098c6:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80098ce:	2b09      	cmp	r3, #9
 80098d0:	d009      	beq.n	80098e6 <VL53LX_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53LX_DEVICEERROR_RANGECOMPLETE ||
 80098d8:	2b13      	cmp	r3, #19
 80098da:	d004      	beq.n	80098e6 <VL53LX_hist_xmonitor_consistency_check+0x50>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 80098e2:	2b14      	cmp	r3, #20
 80098e4:	d129      	bne.n	800993a <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098ec:	2b09      	cmp	r3, #9
 80098ee:	d009      	beq.n	8009904 <VL53LX_hist_xmonitor_consistency_check+0x6e>
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53LX_DEVICEERROR_RANGECOMPLETE ||
 80098f6:	2b13      	cmp	r3, #19
 80098f8:	d004      	beq.n	8009904 <VL53LX_hist_xmonitor_consistency_check+0x6e>
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 8009900:	2b14      	cmp	r3, #20
 8009902:	d11a      	bne.n	800993a <VL53LX_hist_xmonitor_consistency_check+0xa4>
				VL53LX_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	2209      	movs	r2, #9
 8009908:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53LX_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53LX_hist_events_consistency_check(
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	334a      	adds	r3, #74	; 0x4a
				VL53LX_hist_events_consistency_check(
 8009916:	8bb9      	ldrh	r1, [r7, #28]
 8009918:	7ff8      	ldrb	r0, [r7, #31]
 800991a:	9303      	str	r3, [sp, #12]
 800991c:	f107 0318 	add.w	r3, r7, #24
 8009920:	9302      	str	r3, [sp, #8]
 8009922:	f107 0314 	add.w	r3, r7, #20
 8009926:	9301      	str	r3, [sp, #4]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	4613      	mov	r3, r2
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	f7ff fced 	bl	800930e <VL53LX_hist_events_consistency_check>
 8009934:	4603      	mov	r3, r0
 8009936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800993a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800993e:	4618      	mov	r0, r3
 8009940:	3728      	adds	r7, #40	; 0x28
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <VL53LX_hist_wrap_dmax>:

VL53LX_Error  VL53LX_hist_wrap_dmax(
	VL53LX_hist_post_process_config_t  *phistpostprocess,
	VL53LX_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b088      	sub	sp, #32
 800994a:	af00      	add	r7, sp, #0
 800994c:	60f8      	str	r0, [r7, #12]
 800994e:	60b9      	str	r1, [r7, #8]
 8009950:	607a      	str	r2, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 8009952:	2300      	movs	r3, #0
 8009954:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800995a:	2300      	movs	r3, #0
 800995c:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800995e:	2300      	movs	r3, #0
 8009960:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53LX_p_015 != 0) {
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800996e:	2b00      	cmp	r3, #0
 8009970:	d019      	beq.n	80099a6 <VL53LX_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53LX_calc_pll_period_mm(
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8009978:	4618      	mov	r0, r3
 800997a:	f002 f877 	bl	800ba6c <VL53LX_calc_pll_period_mm>
 800997e:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53LX_p_015);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 8009986:	021b      	lsls	r3, r3, #8
 8009988:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	69ba      	ldr	r2, [r7, #24]
 800998e:	fb02 f303 	mul.w	r3, r2, r3
 8009992:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800999a:	0bdb      	lsrs	r3, r3, #15
 800999c:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	b21a      	sxth	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 80099a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3720      	adds	r7, #32
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <VL53LX_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53LX_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 80099b2:	b590      	push	{r4, r7, lr}
 80099b4:	b08d      	sub	sp, #52	; 0x34
 80099b6:	af04      	add	r7, sp, #16
 80099b8:	4604      	mov	r4, r0
 80099ba:	4608      	mov	r0, r1
 80099bc:	4611      	mov	r1, r2
 80099be:	461a      	mov	r2, r3
 80099c0:	4623      	mov	r3, r4
 80099c2:	80fb      	strh	r3, [r7, #6]
 80099c4:	4603      	mov	r3, r0
 80099c6:	80bb      	strh	r3, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	70fb      	strb	r3, [r7, #3]
 80099cc:	4613      	mov	r3, r2
 80099ce:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 80099d4:	2300      	movs	r3, #0
 80099d6:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 80099dc:	2300      	movs	r3, #0
 80099de:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 80099ec:	2300      	movs	r3, #0
 80099ee:	613b      	str	r3, [r7, #16]



	VL53LX_calc_mm_effective_spads(
 80099f0:	78b9      	ldrb	r1, [r7, #2]
 80099f2:	78f8      	ldrb	r0, [r7, #3]
 80099f4:	f107 030c 	add.w	r3, r7, #12
 80099f8:	9303      	str	r3, [sp, #12]
 80099fa:	f107 030e 	add.w	r3, r7, #14
 80099fe:	9302      	str	r3, [sp, #8]
 8009a00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009a04:	9301      	str	r3, [sp, #4]
 8009a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a08:	9300      	str	r3, [sp, #0]
 8009a0a:	23ff      	movs	r3, #255	; 0xff
 8009a0c:	22c7      	movs	r2, #199	; 0xc7
 8009a0e:	f000 fa03 	bl	8009e18 <VL53LX_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 8009a12:	89fb      	ldrh	r3, [r7, #14]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d050      	beq.n	8009aba <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 8009a18:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d04d      	beq.n	8009aba <VL53LX_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;


	VL53LX_calc_mm_effective_spads(
 8009a1e:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 8009a22:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8009a26:	78b9      	ldrb	r1, [r7, #2]
 8009a28:	78f8      	ldrb	r0, [r7, #3]
 8009a2a:	f107 0308 	add.w	r3, r7, #8
 8009a2e:	9303      	str	r3, [sp, #12]
 8009a30:	f107 030a 	add.w	r3, r7, #10
 8009a34:	9302      	str	r3, [sp, #8]
 8009a36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009a3a:	9301      	str	r3, [sp, #4]
 8009a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	4623      	mov	r3, r4
 8009a42:	f000 f9e9 	bl	8009e18 <VL53LX_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 8009a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a48:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 8009a4a:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 8009a4c:	897b      	ldrh	r3, [r7, #10]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	fb02 f303 	mul.w	r3, r2, r3
 8009a56:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 8009a58:	89fb      	ldrh	r3, [r7, #14]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a62:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 8009a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a66:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 8009a68:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 8009a6a:	893b      	ldrh	r3, [r7, #8]
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	fb02 f303 	mul.w	r3, r2, r3
 8009a74:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 8009a76:	89bb      	ldrh	r3, [r7, #12]
 8009a78:	461a      	mov	r2, r3
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a80:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 8009a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a86:	69ba      	ldr	r2, [r7, #24]
 8009a88:	fb02 f303 	mul.w	r3, r2, r3
 8009a8c:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 8009a8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009a92:	697a      	ldr	r2, [r7, #20]
 8009a94:	fb02 f303 	mul.w	r3, r2, r3
 8009a98:	69fa      	ldr	r2, [r7, #28]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8009a9e:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 8009aa0:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 8009aa2:	4413      	add	r3, r2
 8009aa4:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d008      	beq.n	8009abe <VL53LX_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	009a      	lsls	r2, r3, #2
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	fb92 f3f3 	sdiv	r3, r2, r3
 8009ab6:	61fb      	str	r3, [r7, #28]
 8009ab8:	e002      	b.n	8009ac0 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 8009aba:	bf00      	nop
 8009abc:	e000      	b.n	8009ac0 <VL53LX_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 8009abe:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	b21a      	sxth	r2, r3
 8009ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ac6:	801a      	strh	r2, [r3, #0]

}
 8009ac8:	bf00      	nop
 8009aca:	3724      	adds	r7, #36	; 0x24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd90      	pop	{r4, r7, pc}

08009ad0 <VL53LX_spad_number_to_byte_bit_index>:
void VL53LX_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60b9      	str	r1, [r7, #8]
 8009ad8:	607a      	str	r2, [r7, #4]
 8009ada:	603b      	str	r3, [r7, #0]
 8009adc:	4603      	mov	r3, r0
 8009ade:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
 8009ae2:	08db      	lsrs	r3, r3, #3
 8009ae4:	b2da      	uxtb	r2, r3
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
 8009aec:	f003 0307 	and.w	r3, r3, #7
 8009af0:	b2da      	uxtb	r2, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	461a      	mov	r2, r3
 8009afc:	2301      	movs	r3, #1
 8009afe:	4093      	lsls	r3, r2
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	701a      	strb	r2, [r3, #0]

}
 8009b06:	bf00      	nop
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <VL53LX_encode_row_col>:

void VL53LX_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8009b12:	b480      	push	{r7}
 8009b14:	b083      	sub	sp, #12
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	4603      	mov	r3, r0
 8009b1a:	603a      	str	r2, [r7, #0]
 8009b1c:	71fb      	strb	r3, [r7, #7]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 8009b22:	79fb      	ldrb	r3, [r7, #7]
 8009b24:	2b07      	cmp	r3, #7
 8009b26:	d90a      	bls.n	8009b3e <VL53LX_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8009b28:	79bb      	ldrb	r3, [r7, #6]
 8009b2a:	00db      	lsls	r3, r3, #3
 8009b2c:	b2da      	uxtb	r2, r3
 8009b2e:	79fb      	ldrb	r3, [r7, #7]
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	3b71      	subs	r3, #113	; 0x71
 8009b36:	b2da      	uxtb	r2, r3
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 8009b3c:	e00a      	b.n	8009b54 <VL53LX_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8009b3e:	79bb      	ldrb	r3, [r7, #6]
 8009b40:	f1c3 030f 	rsb	r3, r3, #15
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	00db      	lsls	r3, r3, #3
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	79fb      	ldrb	r3, [r7, #7]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	b2da      	uxtb	r2, r3
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	701a      	strb	r2, [r3, #0]
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <VL53LX_decode_zone_size>:

void VL53LX_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	4603      	mov	r3, r0
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
 8009b6c:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
 8009b70:	091b      	lsrs	r3, r3, #4
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	f003 030f 	and.w	r3, r3, #15
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	701a      	strb	r2, [r3, #0]

}
 8009b84:	bf00      	nop
 8009b86:	3714      	adds	r7, #20
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <VL53LX_encode_zone_size>:

void VL53LX_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	603a      	str	r2, [r7, #0]
 8009b9a:	71fb      	strb	r3, [r7, #7]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 8009ba0:	79bb      	ldrb	r3, [r7, #6]
 8009ba2:	011b      	lsls	r3, r3, #4
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	79fb      	ldrb	r3, [r7, #7]
 8009ba8:	4413      	add	r3, r2
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	701a      	strb	r2, [r3, #0]

}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <VL53LX_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b086      	sub	sp, #24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60ba      	str	r2, [r7, #8]
 8009bc4:	607b      	str	r3, [r7, #4]
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	73fb      	strb	r3, [r7, #15]
 8009bca:	460b      	mov	r3, r1
 8009bcc:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	753b      	strb	r3, [r7, #20]



	VL53LX_decode_row_col(
 8009bde:	f107 0217 	add.w	r2, r7, #23
 8009be2:	f107 0116 	add.w	r1, r7, #22
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f002 f9ab 	bl	800bf44 <VL53LX_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53LX_decode_zone_size(
 8009bee:	f107 0214 	add.w	r2, r7, #20
 8009bf2:	f107 0115 	add.w	r1, r7, #21
 8009bf6:	7bbb      	ldrb	r3, [r7, #14]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff ffb1 	bl	8009b60 <VL53LX_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 8009bfe:	7dfb      	ldrb	r3, [r7, #23]
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	7d7b      	ldrb	r3, [r7, #21]
 8009c04:	3301      	adds	r3, #1
 8009c06:	0fd9      	lsrs	r1, r3, #31
 8009c08:	440b      	add	r3, r1
 8009c0a:	105b      	asrs	r3, r3, #1
 8009c0c:	425b      	negs	r3, r3
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	4413      	add	r3, r2
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	b21a      	sxth	r2, r3
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	da02      	bge.n	8009c2a <VL53LX_decode_zone_limits+0x6e>
		*px_ll = 0;
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	2200      	movs	r2, #0
 8009c28:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	7d7b      	ldrb	r3, [r7, #21]
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	4413      	add	r3, r2
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	b21a      	sxth	r2, r3
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53LX_SPAD_ARRAY_WIDTH-1))
 8009c40:	6a3b      	ldr	r3, [r7, #32]
 8009c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c46:	2b0f      	cmp	r3, #15
 8009c48:	dd02      	ble.n	8009c50 <VL53LX_decode_zone_limits+0x94>
		*px_ur = VL53LX_SPAD_ARRAY_WIDTH-1;
 8009c4a:	6a3b      	ldr	r3, [r7, #32]
 8009c4c:	220f      	movs	r2, #15
 8009c4e:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 8009c50:	7dbb      	ldrb	r3, [r7, #22]
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	7d3b      	ldrb	r3, [r7, #20]
 8009c56:	3301      	adds	r3, #1
 8009c58:	0fd9      	lsrs	r1, r3, #31
 8009c5a:	440b      	add	r3, r1
 8009c5c:	105b      	asrs	r3, r3, #1
 8009c5e:	425b      	negs	r3, r3
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	4413      	add	r3, r2
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	b21a      	sxth	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	da02      	bge.n	8009c7c <VL53LX_decode_zone_limits+0xc0>
		*py_ll = 0;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	7d3b      	ldrb	r3, [r7, #20]
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	4413      	add	r3, r2
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	b21a      	sxth	r2, r3
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53LX_SPAD_ARRAY_HEIGHT-1))
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c98:	2b0f      	cmp	r3, #15
 8009c9a:	dd02      	ble.n	8009ca2 <VL53LX_decode_zone_limits+0xe6>
		*py_ur = VL53LX_SPAD_ARRAY_HEIGHT-1;
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9e:	220f      	movs	r2, #15
 8009ca0:	801a      	strh	r2, [r3, #0]
}
 8009ca2:	bf00      	nop
 8009ca4:	3718      	adds	r7, #24
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <VL53LX_is_aperture_location>:


uint8_t VL53LX_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 8009caa:	b480      	push	{r7}
 8009cac:	b085      	sub	sp, #20
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	460a      	mov	r2, r1
 8009cb4:	71fb      	strb	r3, [r7, #7]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 8009cbe:	79fb      	ldrb	r3, [r7, #7]
 8009cc0:	f003 0303 	and.w	r3, r3, #3
 8009cc4:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 8009cc6:	79bb      	ldrb	r3, [r7, #6]
 8009cc8:	f003 0303 	and.w	r3, r3, #3
 8009ccc:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 8009cce:	7bbb      	ldrb	r3, [r7, #14]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d104      	bne.n	8009cde <VL53LX_is_aperture_location+0x34>
 8009cd4:	7b7b      	ldrb	r3, [r7, #13]
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d101      	bne.n	8009cde <VL53LX_is_aperture_location+0x34>
		is_aperture = 1;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 8009cde:	7bbb      	ldrb	r3, [r7, #14]
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d104      	bne.n	8009cee <VL53LX_is_aperture_location+0x44>
 8009ce4:	7b7b      	ldrb	r3, [r7, #13]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <VL53LX_is_aperture_location+0x44>
		is_aperture = 1;
 8009cea:	2301      	movs	r3, #1
 8009cec:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3714      	adds	r7, #20
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <VL53LX_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 8009cfc:	b590      	push	{r4, r7, lr}
 8009cfe:	b08b      	sub	sp, #44	; 0x2c
 8009d00:	af02      	add	r7, sp, #8
 8009d02:	603a      	str	r2, [r7, #0]
 8009d04:	461a      	mov	r2, r3
 8009d06:	4603      	mov	r3, r0
 8009d08:	71fb      	strb	r3, [r7, #7]
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	71bb      	strb	r3, [r7, #6]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 8009d12:	2300      	movs	r3, #0
 8009d14:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 8009d16:	2300      	movs	r3, #0
 8009d18:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 8009d22:	2300      	movs	r3, #0
 8009d24:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 8009d26:	2300      	movs	r3, #0
 8009d28:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	76fb      	strb	r3, [r7, #27]



	VL53LX_decode_zone_limits(
 8009d3e:	f107 0416 	add.w	r4, r7, #22
 8009d42:	f107 0218 	add.w	r2, r7, #24
 8009d46:	79b9      	ldrb	r1, [r7, #6]
 8009d48:	79f8      	ldrb	r0, [r7, #7]
 8009d4a:	f107 0312 	add.w	r3, r7, #18
 8009d4e:	9301      	str	r3, [sp, #4]
 8009d50:	f107 0314 	add.w	r3, r7, #20
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	4623      	mov	r3, r4
 8009d58:	f7ff ff30 	bl	8009bbc <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5e:	2200      	movs	r2, #0
 8009d60:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009d62:	8afb      	ldrh	r3, [r7, #22]
 8009d64:	83bb      	strh	r3, [r7, #28]
 8009d66:	e04c      	b.n	8009e02 <VL53LX_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009d68:	8b3b      	ldrh	r3, [r7, #24]
 8009d6a:	83fb      	strh	r3, [r7, #30]
 8009d6c:	e03d      	b.n	8009dea <VL53LX_calc_max_effective_spads+0xee>



			VL53LX_encode_row_col(
 8009d6e:	8bbb      	ldrh	r3, [r7, #28]
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	8bfa      	ldrh	r2, [r7, #30]
 8009d74:	b2d1      	uxtb	r1, r2
 8009d76:	f107 0211 	add.w	r2, r7, #17
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7ff fec9 	bl	8009b12 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009d80:	7c78      	ldrb	r0, [r7, #17]
 8009d82:	f107 030e 	add.w	r3, r7, #14
 8009d86:	f107 020f 	add.w	r2, r7, #15
 8009d8a:	f107 0110 	add.w	r1, r7, #16
 8009d8e:	f7ff fe9f 	bl	8009ad0 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009d92:	7c3b      	ldrb	r3, [r7, #16]
 8009d94:	461a      	mov	r2, r3
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	4413      	add	r3, r2
 8009d9a:	781a      	ldrb	r2, [r3, #0]
 8009d9c:	7bbb      	ldrb	r3, [r7, #14]
 8009d9e:	4013      	ands	r3, r2
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d01b      	beq.n	8009dde <VL53LX_calc_max_effective_spads+0xe2>


				is_aperture = VL53LX_is_aperture_location(
 8009da6:	8bbb      	ldrh	r3, [r7, #28]
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	8bfa      	ldrh	r2, [r7, #30]
 8009dac:	b2d2      	uxtb	r2, r2
 8009dae:	4611      	mov	r1, r2
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7ff ff7a 	bl	8009caa <VL53LX_is_aperture_location>
 8009db6:	4603      	mov	r3, r0
 8009db8:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009dba:	7efb      	ldrb	r3, [r7, #27]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d007      	beq.n	8009dd0 <VL53LX_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc2:	881a      	ldrh	r2, [r3, #0]
 8009dc4:	88bb      	ldrh	r3, [r7, #4]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dcc:	801a      	strh	r2, [r3, #0]
 8009dce:	e006      	b.n	8009dde <VL53LX_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd2:	881b      	ldrh	r3, [r3, #0]
 8009dd4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ddc:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009dde:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	3301      	adds	r3, #1
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	83fb      	strh	r3, [r7, #30]
 8009dea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009dee:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	ddbb      	ble.n	8009d6e <VL53LX_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009df6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	83bb      	strh	r3, [r7, #28]
 8009e02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009e06:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	ddac      	ble.n	8009d68 <VL53LX_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 8009e0e:	bf00      	nop
 8009e10:	bf00      	nop
 8009e12:	3724      	adds	r7, #36	; 0x24
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd90      	pop	{r4, r7, pc}

08009e18 <VL53LX_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 8009e18:	b590      	push	{r4, r7, lr}
 8009e1a:	b08d      	sub	sp, #52	; 0x34
 8009e1c:	af02      	add	r7, sp, #8
 8009e1e:	4604      	mov	r4, r0
 8009e20:	4608      	mov	r0, r1
 8009e22:	4611      	mov	r1, r2
 8009e24:	461a      	mov	r2, r3
 8009e26:	4623      	mov	r3, r4
 8009e28:	71fb      	strb	r3, [r7, #7]
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	71bb      	strb	r3, [r7, #6]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	717b      	strb	r3, [r7, #5]
 8009e32:	4613      	mov	r3, r2
 8009e34:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 8009e36:	2300      	movs	r3, #0
 8009e38:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 8009e42:	2300      	movs	r3, #0
 8009e44:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 8009e46:	2300      	movs	r3, #0
 8009e48:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 8009e52:	2300      	movs	r3, #0
 8009e54:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 8009e56:	2300      	movs	r3, #0
 8009e58:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 8009e66:	2300      	movs	r3, #0
 8009e68:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 8009e74:	2300      	movs	r3, #0
 8009e76:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53LX_decode_zone_limits(
 8009e78:	f107 041c 	add.w	r4, r7, #28
 8009e7c:	f107 021e 	add.w	r2, r7, #30
 8009e80:	79b9      	ldrb	r1, [r7, #6]
 8009e82:	79f8      	ldrb	r0, [r7, #7]
 8009e84:	f107 0318 	add.w	r3, r7, #24
 8009e88:	9301      	str	r3, [sp, #4]
 8009e8a:	f107 031a 	add.w	r3, r7, #26
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	4623      	mov	r3, r4
 8009e92:	f7ff fe93 	bl	8009bbc <VL53LX_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53LX_decode_zone_limits(
 8009e96:	f107 0414 	add.w	r4, r7, #20
 8009e9a:	f107 0216 	add.w	r2, r7, #22
 8009e9e:	7939      	ldrb	r1, [r7, #4]
 8009ea0:	7978      	ldrb	r0, [r7, #5]
 8009ea2:	f107 0310 	add.w	r3, r7, #16
 8009ea6:	9301      	str	r3, [sp, #4]
 8009ea8:	f107 0312 	add.w	r3, r7, #18
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	4623      	mov	r3, r4
 8009eb0:	f7ff fe84 	bl	8009bbc <VL53LX_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 8009eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 8009eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009ec0:	8abb      	ldrh	r3, [r7, #20]
 8009ec2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009ec4:	e06c      	b.n	8009fa0 <VL53LX_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009ec6:	8afb      	ldrh	r3, [r7, #22]
 8009ec8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009eca:	e05d      	b.n	8009f88 <VL53LX_calc_mm_effective_spads+0x170>



			VL53LX_encode_row_col(
 8009ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009ed2:	b2d1      	uxtb	r1, r2
 8009ed4:	f107 020f 	add.w	r2, r7, #15
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7ff fe1a 	bl	8009b12 <VL53LX_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53LX_spad_number_to_byte_bit_index(
 8009ede:	7bf8      	ldrb	r0, [r7, #15]
 8009ee0:	f107 030c 	add.w	r3, r7, #12
 8009ee4:	f107 020d 	add.w	r2, r7, #13
 8009ee8:	f107 010e 	add.w	r1, r7, #14
 8009eec:	f7ff fdf0 	bl	8009ad0 <VL53LX_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 8009ef0:	7bbb      	ldrb	r3, [r7, #14]
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef6:	4413      	add	r3, r2
 8009ef8:	781a      	ldrb	r2, [r3, #0]
 8009efa:	7b3b      	ldrb	r3, [r7, #12]
 8009efc:	4013      	ands	r3, r2
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d03b      	beq.n	8009f7c <VL53LX_calc_mm_effective_spads+0x164>


				is_aperture = VL53LX_is_aperture_location(
 8009f04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009f0a:	b2d2      	uxtb	r2, r2
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7ff fecb 	bl	8009caa <VL53LX_is_aperture_location>
 8009f14:	4603      	mov	r3, r0
 8009f16:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 8009f1a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d002      	beq.n	8009f28 <VL53LX_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 8009f22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009f24:	847b      	strh	r3, [r7, #34]	; 0x22
 8009f26:	e002      	b.n	8009f2e <VL53LX_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 8009f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f2c:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 8009f2e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009f32:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009f36:	429a      	cmp	r2, r3
 8009f38:	db19      	blt.n	8009f6e <VL53LX_calc_mm_effective_spads+0x156>
 8009f3a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009f3e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009f42:	429a      	cmp	r2, r3
 8009f44:	dc13      	bgt.n	8009f6e <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8009f46:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 8009f4a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	db0d      	blt.n	8009f6e <VL53LX_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 8009f52:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009f56:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	dc07      	bgt.n	8009f6e <VL53LX_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 8009f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f60:	881a      	ldrh	r2, [r3, #0]
 8009f62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f64:	4413      	add	r3, r2
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f6a:	801a      	strh	r2, [r3, #0]
 8009f6c:	e006      	b.n	8009f7c <VL53LX_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 8009f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f70:	881a      	ldrh	r2, [r3, #0]
 8009f72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f74:	4413      	add	r3, r2
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f7a:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 8009f7c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	3301      	adds	r3, #1
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009f88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009f8c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8009f90:	429a      	cmp	r2, r3
 8009f92:	dd9b      	ble.n	8009ecc <VL53LX_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 8009f94:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009fa0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009fa4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	dd8c      	ble.n	8009ec6 <VL53LX_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 8009fac:	bf00      	nop
 8009fae:	bf00      	nop
 8009fb0:	372c      	adds	r7, #44	; 0x2c
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd90      	pop	{r4, r7, pc}

08009fb6 <VL53LX_hist_copy_results_to_sys_and_core>:
void VL53LX_hist_copy_results_to_sys_and_core(
	VL53LX_histogram_bin_data_t      *pbins,
	VL53LX_range_results_t           *phist,
	VL53LX_system_results_t          *psys,
	VL53LX_core_results_t            *pcore)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b086      	sub	sp, #24
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	60f8      	str	r0, [r7, #12]
 8009fbe:	60b9      	str	r1, [r7, #8]
 8009fc0:	607a      	str	r2, [r7, #4]
 8009fc2:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53LX_init_system_results(psys);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7fe f835 	bl	8008038 <VL53LX_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	7c9a      	ldrb	r2, [r3, #18]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53LX_p_003[0]);
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	3314      	adds	r3, #20
 8009ff8:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	75fb      	strb	r3, [r7, #23]
 8009ffe:	e06b      	b.n	800a0d8 <VL53LX_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800a000:	7dfb      	ldrb	r3, [r7, #23]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d002      	beq.n	800a00c <VL53LX_hist_copy_results_to_sys_and_core+0x56>
 800a006:	2b01      	cmp	r3, #1
 800a008:	d034      	beq.n	800a074 <VL53LX_hist_copy_results_to_sys_and_core+0xbe>
 800a00a:	e05f      	b.n	800a0cc <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53LX_p_004;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53LX_p_002;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53LX_p_011;
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800a044:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	8a9a      	ldrh	r2, [r3, #20]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53LX_p_017;
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53LX_p_010;
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53LX_p_016;
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	601a      	str	r2, [r3, #0]

			break;
 800a072:	e02b      	b.n	800a0cc <VL53LX_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53LX_p_004;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53LX_p_002;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53LX_p_011;
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800a0a4:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53LX_p_017;
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53LX_p_010;
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53LX_p_016;
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	611a      	str	r2, [r3, #16]
			break;
 800a0ca:	bf00      	nop
		}

		pdata++;
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	334c      	adds	r3, #76	; 0x4c
 800a0d0:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800a0d2:	7dfb      	ldrb	r3, [r7, #23]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	75fb      	strb	r3, [r7, #23]
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	7c9b      	ldrb	r3, [r3, #18]
 800a0dc:	7dfa      	ldrb	r2, [r7, #23]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d38e      	bcc.n	800a000 <VL53LX_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800a0e2:	bf00      	nop
 800a0e4:	bf00      	nop
 800a0e6:	3718      	adds	r7, #24
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <VL53LX_save_cfg_data>:
}


VL53LX_Error VL53LX_save_cfg_data(
	VL53LX_DEV  Dev)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b089      	sub	sp, #36	; 0x24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	3318      	adds	r3, #24
 800a0fc:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a104:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);

	VL53LX_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53LX_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800a10c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53LX_p_003[pdev->ll_state.cfg_zone_id]);
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a114:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800a116:	4613      	mov	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	005b      	lsls	r3, r3, #1
 800a11e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	4413      	add	r3, r2
 800a126:	3302      	adds	r3, #2
 800a128:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800a14e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3724      	adds	r7, #36	; 0x24
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <VL53LX_dynamic_zone_update>:


VL53LX_Error VL53LX_dynamic_zone_update(
	VL53LX_DEV  Dev,
	VL53LX_range_results_t *presults)
{
 800a15e:	b480      	push	{r7}
 800a160:	b08b      	sub	sp, #44	; 0x2c
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a168:	2300      	movs	r3, #0
 800a16a:	77fb      	strb	r3, [r7, #31]

	VL53LX_LLDriverData_t  *pdev =
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	3318      	adds	r3, #24
 800a170:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);
	VL53LX_LLDriverResults_t  *pres =
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a178:	617b      	str	r3, [r7, #20]
			VL53LXDevStructGetLLResultsHandle(Dev);
	VL53LX_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a180:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a188:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800a190:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800a192:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a196:	623b      	str	r3, [r7, #32]
		pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count = 0;
 800a198:	7bfa      	ldrb	r2, [r7, #15]
 800a19a:	6939      	ldr	r1, [r7, #16]
 800a19c:	4613      	mov	r3, r2
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	4413      	add	r3, r2
 800a1a2:	005b      	lsls	r3, r3, #1
 800a1a4:	440b      	add	r3, r1
 800a1a6:	3306      	adds	r3, #6
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	801a      	strh	r2, [r3, #0]

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a1b2:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a1ba:	e01a      	b.n	800a1f2 <VL53LX_dynamic_zone_update+0x94>

		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53LX_p_003[i].total_rate_per_spad_mcps);

		if (presults->VL53LX_p_003[i].total_rate_per_spad_mcps >
 800a1bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1c0:	683a      	ldr	r2, [r7, #0]
 800a1c2:	214c      	movs	r1, #76	; 0x4c
 800a1c4:	fb01 f303 	mul.w	r3, r1, r3
 800a1c8:	4413      	add	r3, r2
 800a1ca:	334a      	adds	r3, #74	; 0x4a
 800a1cc:	881b      	ldrh	r3, [r3, #0]
 800a1ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d209      	bcs.n	800a1e8 <VL53LX_dynamic_zone_update+0x8a>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53LX_p_003[i].total_rate_per_spad_mcps;
 800a1d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800a1d8:	683a      	ldr	r2, [r7, #0]
 800a1da:	214c      	movs	r1, #76	; 0x4c
 800a1dc:	fb01 f303 	mul.w	r3, r1, r3
 800a1e0:	4413      	add	r3, r2
 800a1e2:	334a      	adds	r3, #74	; 0x4a
 800a1e4:	881b      	ldrh	r3, [r3, #0]
 800a1e6:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800a1e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	7c9b      	ldrb	r3, [r3, #18]
 800a1f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d3de      	bcc.n	800a1bc <VL53LX_dynamic_zone_update+0x5e>

	}

	if (max_total_rate_per_spads == 0) {
 800a1fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a200:	2b00      	cmp	r3, #0
 800a202:	d103      	bne.n	800a20c <VL53LX_dynamic_zone_update+0xae>

		temp = 0xFFFF;
 800a204:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a208:	623b      	str	r3, [r7, #32]
 800a20a:	e00e      	b.n	800a22a <VL53LX_dynamic_zone_update+0xcc>
	} else {

		temp = target_rate << 14;
 800a20c:	89bb      	ldrh	r3, [r7, #12]
 800a20e:	039b      	lsls	r3, r3, #14
 800a210:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800a212:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a214:	6a3a      	ldr	r2, [r7, #32]
 800a216:	fbb2 f3f3 	udiv	r3, r2, r3
 800a21a:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800a21c:	6a3b      	ldr	r3, [r7, #32]
 800a21e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a222:	d302      	bcc.n	800a22a <VL53LX_dynamic_zone_update+0xcc>
			temp = 0xFFFF;
 800a224:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a228:	623b      	str	r3, [r7, #32]
		trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800a22a:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	b298      	uxth	r0, r3
	pZ->VL53LX_p_003[zone_id].dss_requested_effective_spad_count =
 800a230:	6939      	ldr	r1, [r7, #16]
 800a232:	4613      	mov	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4413      	add	r3, r2
 800a238:	005b      	lsls	r3, r3, #1
 800a23a:	440b      	add	r3, r1
 800a23c:	3306      	adds	r3, #6
 800a23e:	4602      	mov	r2, r0
 800a240:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800a242:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a246:	4618      	mov	r0, r3
 800a248:	372c      	adds	r7, #44	; 0x2c
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <VL53LX_multizone_hist_bins_update>:

VL53LX_Error VL53LX_multizone_hist_bins_update(
	VL53LX_DEV  Dev)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b08a      	sub	sp, #40	; 0x28
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a25a:	2300      	movs	r3, #0
 800a25c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	3318      	adds	r3, #24
 800a264:	623b      	str	r3, [r7, #32]
	VL53LX_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	332c      	adds	r3, #44	; 0x2c
 800a26a:	61fb      	str	r3, [r7, #28]
	VL53LX_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800a26c:	6a3b      	ldr	r3, [r7, #32]
 800a26e:	33c2      	adds	r3, #194	; 0xc2
 800a270:	61bb      	str	r3, [r7, #24]
	VL53LX_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800a278:	617b      	str	r3, [r7, #20]
	VL53LX_histogram_config_t *pmulti_hist =
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	3302      	adds	r3, #2
 800a27e:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	785b      	ldrb	r3, [r3, #1]
 800a284:	f003 0301 	and.w	r3, r3, #1
 800a288:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a290:	461a      	mov	r2, r3
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	4413      	add	r3, r2
 800a296:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d11e      	bne.n	800a2dc <VL53LX_multizone_hist_bins_update+0x8a>
		VL53LX_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800a29e:	7bfb      	ldrb	r3, [r7, #15]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10b      	bne.n	800a2bc <VL53LX_multizone_hist_bins_update+0x6a>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a2bc:	7bfb      	ldrb	r3, [r7, #15]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d05d      	beq.n	800a37e <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	719a      	strb	r2, [r3, #6]
 800a2da:	e050      	b.n	800a37e <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a2dc:	6a3b      	ldr	r3, [r7, #32]
 800a2de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d11e      	bne.n	800a32e <VL53LX_multizone_hist_bins_update+0xdc>
		VL53LX_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800a2f0:	7bfb      	ldrb	r3, [r7, #15]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10b      	bne.n	800a30e <VL53LX_multizone_hist_bins_update+0xbc>
			trace_print(VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a30e:	7bfb      	ldrb	r3, [r7, #15]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d034      	beq.n	800a37e <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	719a      	strb	r2, [r3, #6]
 800a32c:	e027      	b.n	800a37e <VL53LX_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800a32e:	6a3b      	ldr	r3, [r7, #32]
 800a330:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a334:	461a      	mov	r2, r3
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	4413      	add	r3, r2
 800a33a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a33e:	2b03      	cmp	r3, #3
 800a340:	d11d      	bne.n	800a37e <VL53LX_multizone_hist_bins_update+0x12c>
			VL53LX_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800a342:	7bfb      	ldrb	r3, [r7, #15]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d10b      	bne.n	800a360 <VL53LX_multizone_hist_bins_update+0x10e>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800a360:	7bfb      	ldrb	r3, [r7, #15]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00b      	beq.n	800a37e <VL53LX_multizone_hist_bins_update+0x12c>
			trace_print (VL53LX_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53LX_ERROR_NONE) {
 800a37e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a382:	2b00      	cmp	r3, #0
 800a384:	d109      	bne.n	800a39a <VL53LX_multizone_hist_bins_update+0x148>
		VL53LX_copy_hist_bins_to_static_cfg(
 800a386:	6a3b      	ldr	r3, [r7, #32]
 800a388:	f203 21fe 	addw	r1, r3, #766	; 0x2fe
 800a38c:	6a3b      	ldr	r3, [r7, #32]
 800a38e:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800a392:	461a      	mov	r2, r3
 800a394:	6978      	ldr	r0, [r7, #20]
 800a396:	f7fd fa1f 	bl	80077d8 <VL53LX_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800a39a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3728      	adds	r7, #40	; 0x28
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <VL53LX_update_internal_stream_counters>:
VL53LX_Error VL53LX_update_internal_stream_counters(
	VL53LX_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b089      	sub	sp, #36	; 0x24
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	60f8      	str	r0, [r7, #12]
 800a3ae:	607a      	str	r2, [r7, #4]
 800a3b0:	603b      	str	r3, [r7, #0]
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	72fb      	strb	r3, [r7, #11]

	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53LX_LLDriverData_t  *pdev =
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	3318      	adds	r3, #24
 800a3be:	61bb      	str	r3, [r7, #24]
			VL53LXDevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a3c6:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800a3c8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d103      	bne.n	800a3d6 <VL53LX_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	7afa      	ldrb	r2, [r7, #11]
 800a3d2:	701a      	strb	r2, [r3, #0]
 800a3d4:	e01e      	b.n	800a414 <VL53LX_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	7dfb      	ldrb	r3, [r7, #23]
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d111      	bne.n	800a408 <VL53LX_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	2bff      	cmp	r3, #255	; 0xff
 800a3ea:	d103      	bne.n	800a3f4 <VL53LX_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2280      	movs	r2, #128	; 0x80
 800a3f0:	701a      	strb	r2, [r3, #0]
 800a3f2:	e005      	b.n	800a400 <VL53LX_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	2200      	movs	r2, #0
 800a404:	701a      	strb	r2, [r3, #0]
 800a406:	e005      	b.n	800a414 <VL53LX_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	3301      	adds	r3, #1
 800a40e:	b2da      	uxtb	r2, r3
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800a414:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3724      	adds	r7, #36	; 0x24
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <VL53LX_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b08a      	sub	sp, #40	; 0x28
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	607a      	str	r2, [r7, #4]
 800a42e:	461a      	mov	r2, r3
 800a430:	460b      	mov	r3, r1
 800a432:	72fb      	strb	r3, [r7, #11]
 800a434:	4613      	mov	r3, r2
 800a436:	813b      	strh	r3, [r7, #8]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800a438:	2300      	movs	r3, #0
 800a43a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3318      	adds	r3, #24
 800a442:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800a444:	2300      	movs	r3, #0
 800a446:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800a448:	2300      	movs	r3, #0
 800a44a:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53LX_calc_macro_period_us(
 800a44c:	7afa      	ldrb	r2, [r7, #11]
 800a44e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a450:	4611      	mov	r1, r2
 800a452:	4618      	mov	r0, r3
 800a454:	f7fe f9fc 	bl	8008850 <VL53LX_calc_macro_period_us>
 800a458:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800a45a:	6a3b      	ldr	r3, [r7, #32]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d101      	bne.n	800a464 <VL53LX_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800a460:	2301      	movs	r3, #1
 800a462:	623b      	str	r3, [r7, #32]


	timeout_mclks = phasecal_timeout_us << 12;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	031b      	lsls	r3, r3, #12
 800a468:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800a46a:	6a3b      	ldr	r3, [r7, #32]
 800a46c:	085b      	lsrs	r3, r3, #1
 800a46e:	69ba      	ldr	r2, [r7, #24]
 800a470:	4413      	add	r3, r2
 800a472:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800a474:	69ba      	ldr	r2, [r7, #24]
 800a476:	6a3b      	ldr	r3, [r7, #32]
 800a478:	fbb2 f3f3 	udiv	r3, r2, r3
 800a47c:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	2bff      	cmp	r3, #255	; 0xff
 800a482:	d904      	bls.n	800a48e <VL53LX_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	22ff      	movs	r2, #255	; 0xff
 800a488:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
 800a48c:	e004      	b.n	800a498 <VL53LX_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	7afa      	ldrb	r2, [r7, #11]
 800a49c:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a



	if (status == VL53LX_ERROR_NONE)
 800a4a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10a      	bne.n	800a4be <VL53LX_set_ref_spad_char_config+0x9a>
		status =
			VL53LX_WrByte(
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	f893 3325 	ldrb.w	r3, [r3, #805]	; 0x325
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	214b      	movs	r1, #75	; 0x4b
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	f006 fd8e 	bl	8010fd4 <VL53LX_WrByte>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53LX_ERROR_NONE)
 800a4be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10a      	bne.n	800a4dc <VL53LX_set_ref_spad_char_config+0xb8>
		status =
			VL53LX_WrByte(
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	2160      	movs	r1, #96	; 0x60
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f006 fd7f 	bl	8010fd4 <VL53LX_WrByte>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53LX_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a4e2:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 800a4ea:	757b      	strb	r3, [r7, #21]

	if (status == VL53LX_ERROR_NONE)
 800a4ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d109      	bne.n	800a508 <VL53LX_set_ref_spad_char_config+0xe4>
		status =
			VL53LX_WriteMulti(
 800a4f4:	f107 0214 	add.w	r2, r7, #20
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	2178      	movs	r1, #120	; 0x78
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f006 fcfd 	bl	8010efc <VL53LX_WriteMulti>
 800a502:	4603      	mov	r3, r0
 800a504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	893a      	ldrh	r2, [r7, #8]
 800a50c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53LX_ERROR_NONE)
 800a510:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a514:	2b00      	cmp	r3, #0
 800a516:	d108      	bne.n	800a52a <VL53LX_set_ref_spad_char_config+0x106>
		status =
			VL53LX_WrWord(
 800a518:	893b      	ldrh	r3, [r7, #8]
 800a51a:	461a      	mov	r2, r3
 800a51c:	211c      	movs	r1, #28
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f006 fd82 	bl	8011028 <VL53LX_WrWord>
 800a524:	4603      	mov	r3, r0
 800a526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a52a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d108      	bne.n	800a544 <VL53LX_set_ref_spad_char_config+0x120>
		status =
			VL53LX_WrWord(
 800a532:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a534:	461a      	mov	r2, r3
 800a536:	2164      	movs	r1, #100	; 0x64
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f006 fd75 	bl	8011028 <VL53LX_WrWord>
 800a53e:	4603      	mov	r3, r0
 800a540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53LX_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53LX_ERROR_NONE)
 800a544:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d108      	bne.n	800a55e <VL53LX_set_ref_spad_char_config+0x13a>
		status =
			VL53LX_WrWord(
 800a54c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a54e:	461a      	mov	r2, r3
 800a550:	2166      	movs	r1, #102	; 0x66
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f006 fd68 	bl	8011028 <VL53LX_WrWord>
 800a558:	4603      	mov	r3, r0
 800a55a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800a55e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a562:	4618      	mov	r0, r3
 800a564:	3728      	adds	r7, #40	; 0x28
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <VL53LX_dynamic_xtalk_correction_calc_required_samples>:


VL53LX_Error VL53LX_dynamic_xtalk_correction_calc_required_samples(
	VL53LX_DEV                          Dev
	)
{
 800a56a:	b5b0      	push	{r4, r5, r7, lr}
 800a56c:	b090      	sub	sp, #64	; 0x40
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a572:	2300      	movs	r3, #0
 800a574:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	3318      	adds	r3, #24
 800a57c:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800a584:	627b      	str	r3, [r7, #36]	; 0x24
	VL53LX_smudge_corrector_config_t *pconfig =
 800a586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a588:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a58c:	3314      	adds	r3, #20
 800a58e:	623b      	str	r3, [r7, #32]
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800a590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a592:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800a596:	3318      	adds	r3, #24
 800a598:	61fb      	str	r3, [r7, #28]
				&(pdev->smudge_corrector_internals);

	VL53LX_range_results_t *presults = &(pres->range_results);
 800a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59c:	61bb      	str	r3, [r7, #24]
	VL53LX_range_data_t *pxmonitor = &(presults->xmonitor);
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a5a4:	617b      	str	r3, [r7, #20]

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	69db      	ldr	r3, [r3, #28]
 800a5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	temp64a = pxmonitor->VL53LX_p_017 +
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53LX_p_016;
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53LX_p_017 +
 800a5b4:	4413      	add	r3, r2
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	f04f 0300 	mov.w	r3, #0
 800a5bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (peak_duration_us == 0)
 800a5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d102      	bne.n	800a5cc <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x62>
		peak_duration_us = 1000;
 800a5c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a5cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	f04f 0400 	mov.w	r4, #0
 800a5d8:	f04f 0500 	mov.w	r5, #0
 800a5dc:	015d      	lsls	r5, r3, #5
 800a5de:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a5e2:	0154      	lsls	r4, r2, #5
 800a5e4:	4622      	mov	r2, r4
 800a5e6:	462b      	mov	r3, r5
 800a5e8:	1a12      	subs	r2, r2, r0
 800a5ea:	eb63 0301 	sbc.w	r3, r3, r1
 800a5ee:	f04f 0400 	mov.w	r4, #0
 800a5f2:	f04f 0500 	mov.w	r5, #0
 800a5f6:	009d      	lsls	r5, r3, #2
 800a5f8:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a5fc:	0094      	lsls	r4, r2, #2
 800a5fe:	4622      	mov	r2, r4
 800a600:	462b      	mov	r3, r5
 800a602:	1812      	adds	r2, r2, r0
 800a604:	eb41 0303 	adc.w	r3, r1, r3
 800a608:	f04f 0000 	mov.w	r0, #0
 800a60c:	f04f 0100 	mov.w	r1, #0
 800a610:	00d9      	lsls	r1, r3, #3
 800a612:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a616:	00d0      	lsls	r0, r2, #3
 800a618:	4602      	mov	r2, r0
 800a61a:	460b      	mov	r3, r1
 800a61c:	4610      	mov	r0, r2
 800a61e:	4619      	mov	r1, r3
 800a620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a622:	461a      	mov	r2, r3
 800a624:	f04f 0300 	mov.w	r3, #0
 800a628:	f7f5 fe7a 	bl	8000320 <__aeabi_uldivmod>
 800a62c:	4602      	mov	r2, r0
 800a62e:	460b      	mov	r3, r1
 800a630:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800a634:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	f04f 0400 	mov.w	r4, #0
 800a640:	f04f 0500 	mov.w	r5, #0
 800a644:	015d      	lsls	r5, r3, #5
 800a646:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a64a:	0154      	lsls	r4, r2, #5
 800a64c:	4622      	mov	r2, r4
 800a64e:	462b      	mov	r3, r5
 800a650:	1a12      	subs	r2, r2, r0
 800a652:	eb63 0301 	sbc.w	r3, r3, r1
 800a656:	f04f 0400 	mov.w	r4, #0
 800a65a:	f04f 0500 	mov.w	r5, #0
 800a65e:	009d      	lsls	r5, r3, #2
 800a660:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a664:	0094      	lsls	r4, r2, #2
 800a666:	4622      	mov	r2, r4
 800a668:	462b      	mov	r3, r5
 800a66a:	1812      	adds	r2, r2, r0
 800a66c:	eb41 0303 	adc.w	r3, r1, r3
 800a670:	f04f 0000 	mov.w	r0, #0
 800a674:	f04f 0100 	mov.w	r1, #0
 800a678:	00d9      	lsls	r1, r3, #3
 800a67a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a67e:	00d0      	lsls	r0, r2, #3
 800a680:	4602      	mov	r2, r0
 800a682:	460b      	mov	r3, r1
 800a684:	4610      	mov	r0, r2
 800a686:	4619      	mov	r1, r3
 800a688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a68a:	461a      	mov	r2, r3
 800a68c:	f04f 0300 	mov.w	r3, #0
 800a690:	f7f5 fe46 	bl	8000320 <__aeabi_uldivmod>
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	e9c7 2302 	strd	r2, r3, [r7, #8]

	temp64z = pconfig->noise_margin * pxmonitor->VL53LX_p_004;
 800a69c:	6a3b      	ldr	r3, [r7, #32]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	697a      	ldr	r2, [r7, #20]
 800a6a2:	8ad2      	ldrh	r2, [r2, #22]
 800a6a4:	fb02 f303 	mul.w	r3, r2, r3
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	f04f 0300 	mov.w	r3, #0
 800a6ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (temp64z == 0)
 800a6b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	d105      	bne.n	800a6c6 <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x15c>
		temp64z = 1;
 800a6ba:	f04f 0201 	mov.w	r2, #1
 800a6be:	f04f 0300 	mov.w	r3, #0
 800a6c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	temp64a = temp64a * 1000 * 256;
 800a6c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	f04f 0400 	mov.w	r4, #0
 800a6d2:	f04f 0500 	mov.w	r5, #0
 800a6d6:	015d      	lsls	r5, r3, #5
 800a6d8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a6dc:	0154      	lsls	r4, r2, #5
 800a6de:	4622      	mov	r2, r4
 800a6e0:	462b      	mov	r3, r5
 800a6e2:	1a12      	subs	r2, r2, r0
 800a6e4:	eb63 0301 	sbc.w	r3, r3, r1
 800a6e8:	f04f 0400 	mov.w	r4, #0
 800a6ec:	f04f 0500 	mov.w	r5, #0
 800a6f0:	009d      	lsls	r5, r3, #2
 800a6f2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a6f6:	0094      	lsls	r4, r2, #2
 800a6f8:	4622      	mov	r2, r4
 800a6fa:	462b      	mov	r3, r5
 800a6fc:	1812      	adds	r2, r2, r0
 800a6fe:	eb41 0303 	adc.w	r3, r1, r3
 800a702:	f04f 0000 	mov.w	r0, #0
 800a706:	f04f 0100 	mov.w	r1, #0
 800a70a:	02d9      	lsls	r1, r3, #11
 800a70c:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800a710:	02d0      	lsls	r0, r2, #11
 800a712:	4602      	mov	r2, r0
 800a714:	460b      	mov	r3, r1
 800a716:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800a71a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a71e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a722:	f7f5 fdfd 	bl	8000320 <__aeabi_uldivmod>
 800a726:	4602      	mov	r2, r0
 800a728:	460b      	mov	r3, r1
 800a72a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = temp64a * 1000 * 256;
 800a72e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a732:	4602      	mov	r2, r0
 800a734:	460b      	mov	r3, r1
 800a736:	f04f 0400 	mov.w	r4, #0
 800a73a:	f04f 0500 	mov.w	r5, #0
 800a73e:	015d      	lsls	r5, r3, #5
 800a740:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800a744:	0154      	lsls	r4, r2, #5
 800a746:	4622      	mov	r2, r4
 800a748:	462b      	mov	r3, r5
 800a74a:	1a12      	subs	r2, r2, r0
 800a74c:	eb63 0301 	sbc.w	r3, r3, r1
 800a750:	f04f 0400 	mov.w	r4, #0
 800a754:	f04f 0500 	mov.w	r5, #0
 800a758:	009d      	lsls	r5, r3, #2
 800a75a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800a75e:	0094      	lsls	r4, r2, #2
 800a760:	4622      	mov	r2, r4
 800a762:	462b      	mov	r3, r5
 800a764:	1812      	adds	r2, r2, r0
 800a766:	eb41 0303 	adc.w	r3, r1, r3
 800a76a:	f04f 0000 	mov.w	r0, #0
 800a76e:	f04f 0100 	mov.w	r1, #0
 800a772:	02d9      	lsls	r1, r3, #11
 800a774:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800a778:	02d0      	lsls	r0, r2, #11
 800a77a:	4602      	mov	r2, r0
 800a77c:	460b      	mov	r3, r1
 800a77e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp64a = do_division_u(temp64a, temp64z);
 800a782:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a786:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a78a:	f7f5 fdc9 	bl	8000320 <__aeabi_uldivmod>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	e9c7 2302 	strd	r2, r3, [r7, #8]

	pint->required_samples = (uint32_t)temp64a;
 800a796:	68ba      	ldr	r2, [r7, #8]
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d802      	bhi.n	800a7aa <VL53LX_dynamic_xtalk_correction_calc_required_samples+0x240>
		pint->required_samples = 2;
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	2202      	movs	r2, #2
 800a7a8:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800a7aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3740      	adds	r7, #64	; 0x40
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a7b8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53LX_smudge_corrector_config_t	*pconfig,
	VL53LX_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b096      	sub	sp, #88	; 0x58
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]
 800a7c4:	603b      	str	r3, [r7, #0]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	3318      	adds	r3, #24
 800a7d0:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t  histo_merge_nb;
	uint8_t  i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800a7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a7d8:	633b      	str	r3, [r7, #48]	; 0x30
	VL53LX_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800a7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7dc:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800a7e0:	331c      	adds	r3, #28
 800a7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;

	LOG_FUNCTION_START("");


	if (add_smudge == 1) {
 800a7e4:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d107      	bne.n	800a7fc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x44>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	889b      	ldrh	r3, [r3, #4]
 800a7f0:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	609a      	str	r2, [r3, #8]
 800a7fa:	e002      	b.n	800a802 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x4a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800a802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800a808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80a:	899b      	ldrh	r3, [r3, #12]
 800a80c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800a810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a812:	89db      	ldrh	r3, [r3, #14]
 800a814:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d004      	beq.n	800a82c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x74>
		(pconfig->scaler_calc_method == 1)) &&
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d126      	bne.n	800a87a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800a82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82e:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800a830:	2b00      	cmp	r3, #0
 800a832:	d022      	beq.n	800a87a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xc2>

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800a834:	f107 0317 	add.w	r3, r7, #23
 800a838:	4619      	mov	r1, r3
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	f000 fe75 	bl	800b52a <VL53LX_compute_histo_merge_nb>

		if (histo_merge_nb == 0)
 800a840:	7dfb      	ldrb	r3, [r7, #23]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d101      	bne.n	800a84a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x92>
			histo_merge_nb = 1;
 800a846:	2301      	movs	r3, #1
 800a848:	75fb      	strb	r3, [r7, #23]
		if (pdev->tuning_parms.tp_hist_merge != 1)
 800a84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84c:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800a850:	2b01      	cmp	r3, #1
 800a852:	d003      	beq.n	800a85c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xa4>
			orig_xtalk_offset =
 800a854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	653b      	str	r3, [r7, #80]	; 0x50
 800a85a:	e006      	b.n	800a86a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800a85c:	7dfb      	ldrb	r3, [r7, #23]
 800a85e:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800a860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a862:	3202      	adds	r2, #2
 800a864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a868:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800a86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86c:	889b      	ldrh	r3, [r3, #4]
 800a86e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800a872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a874:	88db      	ldrh	r3, [r3, #6]
 800a876:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10a      	bne.n	800a89a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
 800a884:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d106      	bne.n	800a89a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0xe2>
		pout->gradient_zero_flag |= 0x01;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	795b      	ldrb	r3, [r3, #5]
 800a890:	f043 0301 	orr.w	r3, r3, #1
 800a894:	b2da      	uxtb	r2, r3
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10a      	bne.n	800a8ba <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
 800a8a4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d106      	bne.n	800a8ba <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x102>
		pout->gradient_zero_flag |= 0x02;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	795b      	ldrb	r3, [r3, #5]
 800a8b0:	f043 0302 	orr.w	r3, r3, #2
 800a8b4:	b2da      	uxtb	r2, r3
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800a8ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x10c>
		orig_xtalk_offset = 1;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d108      	bne.n	800a8e0 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x128>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8d2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a8da:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800a8de:	e019      	b.n	800a914 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x15c>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800a8e0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a8e4:	019b      	lsls	r3, r3, #6
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800a8f8:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800a8fa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800a8fe:	019b      	lsls	r3, r3, #6
 800a900:	461a      	mov	r2, r3
 800a902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a904:	fbb2 f3f3 	udiv	r3, r2, r3
 800a908:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a912:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d12a      	bne.n	800a974 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1bc>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800a926:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800a92a:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800a92c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a92e:	119b      	asrs	r3, r3, #6
 800a930:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a938:	db02      	blt.n	800a940 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x188>
			itemp32 = 0xFFFF;
 800a93a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a93e:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800a940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a942:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800a950:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800a954:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800a956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a958:	119b      	asrs	r3, r3, #6
 800a95a:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a95c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a95e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a962:	db02      	blt.n	800a96a <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1b2>
			itemp32 = 0xFFFF;
 800a964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a968:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800a96a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a96c:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	81da      	strh	r2, [r3, #14]
 800a972:	e042      	b.n	800a9fa <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>
	} else if (pconfig->scaler_calc_method == 1) {
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d13d      	bne.n	800a9fa <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x242>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800a982:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a984:	1ad3      	subs	r3, r2, r3
 800a986:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800a988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	da00      	bge.n	800a990 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1d8>
 800a98e:	330f      	adds	r3, #15
 800a990:	111b      	asrs	r3, r3, #4
 800a992:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800a994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800a99a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a99e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9a0:	4413      	add	r3, r2
 800a9a2:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a9a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9aa:	db02      	blt.n	800a9b2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x1fa>
			itemp32 = 0xFFFF;
 800a9ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a9b0:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800a9b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9b4:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800a9be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800a9c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9c6:	4a52      	ldr	r2, [pc, #328]	; (800ab10 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x358>)
 800a9c8:	fb82 1203 	smull	r1, r2, r2, r3
 800a9cc:	1152      	asrs	r2, r2, #5
 800a9ce:	17db      	asrs	r3, r3, #31
 800a9d0:	1ad3      	subs	r3, r2, r3
 800a9d2:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800a9d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800a9da:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800a9de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9e0:	4413      	add	r3, r2
 800a9e2:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800a9e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ea:	db02      	blt.n	800a9f2 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x23a>
			itemp32 = 0xFFFF;
 800a9ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a9f0:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800a9f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9f4:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	81da      	strh	r2, [r3, #14]
	}


	if ((pconfig->smudge_corr_apply_enabled == 1) &&
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	785b      	ldrb	r3, [r3, #1]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d178      	bne.n	800aaf4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
 800aa02:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d074      	beq.n	800aaf4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>
		(soft_update != 1)) {

		pout->new_xtalk_applied_flag = 1;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	62bb      	str	r3, [r7, #40]	; 0x28

		VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800aa16:	f107 0317 	add.w	r3, r7, #23
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 fd84 	bl	800b52a <VL53LX_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800aa22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa24:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800aa28:	627b      	str	r3, [r7, #36]	; 0x24
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800aa2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2c:	3308      	adds	r3, #8
 800aa2e:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) &&
 800aa30:	7dfb      	ldrb	r3, [r7, #23]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d042      	beq.n	800aabc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800aa36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa38:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		if ((histo_merge_nb > 0) &&
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d13d      	bne.n	800aabc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(pdev->tuning_parms.tp_hist_merge == 1) &&
 800aa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d03a      	beq.n	800aabc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			(nXtalk != 0)) {
			cXtalk =
 800aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	623b      	str	r3, [r7, #32]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800aa4c:	6a3b      	ldr	r3, [r7, #32]
 800aa4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa52:	fb02 f203 	mul.w	r2, r2, r3
 800aa56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa58:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa5c:	61fb      	str	r3, [r7, #28]
			if ((max ==  0)||
 800aa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d004      	beq.n	800aa6e <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2b6>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800aa68:	69fa      	ldr	r2, [r7, #28]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d303      	bcc.n	800aa76 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2be>
				pout->new_xtalk_applied_flag = 0;
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	2200      	movs	r2, #0
 800aa72:	719a      	strb	r2, [r3, #6]
 800aa74:	e022      	b.n	800aabc <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x304>
			else {
				incXtalk = nXtalk / max;
 800aa76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa7e:	61bb      	str	r3, [r7, #24]
				cval = 0;
 800aa80:	2300      	movs	r3, #0
 800aa82:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800aa84:	2300      	movs	r3, #0
 800aa86:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800aa8a:	e00e      	b.n	800aaaa <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2f2>
					cval += incXtalk;
 800aa8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	4413      	add	r3, r2
 800aa92:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800aa94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa98:	601a      	str	r2, [r3, #0]
					pcpo++;
 800aa9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa9c:	3304      	adds	r3, #4
 800aa9e:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800aaa0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800aaaa:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800aaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab0:	3b01      	subs	r3, #1
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d3ea      	bcc.n	800aa8c <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x2d4>
				}
				*pcpo = nXtalk;
 800aab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaba:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	799b      	ldrb	r3, [r3, #6]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d017      	beq.n	800aaf4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800aac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaca:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad4:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aade:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	789b      	ldrb	r3, [r3, #2]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d105      	bne.n	800aaf4 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x33c>

			pconfig->smudge_corr_apply_enabled = 0;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800aaf4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d002      	beq.n	800ab02 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk+0x34a>
		pout->smudge_corr_valid = 1;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	2201      	movs	r2, #1
 800ab00:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800ab02:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3758      	adds	r7, #88	; 0x58
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	66666667 	.word	0x66666667

0800ab14 <VL53LX_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53LX_Error VL53LX_dynamic_xtalk_correction_corrector(
	VL53LX_DEV                          Dev
	)
{
 800ab14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ab18:	b09a      	sub	sp, #104	; 0x68
 800ab1a:	af02      	add	r7, sp, #8
 800ab1c:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	3318      	adds	r3, #24
 800ab28:	64bb      	str	r3, [r7, #72]	; 0x48
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800ab30:	647b      	str	r3, [r7, #68]	; 0x44
	VL53LX_smudge_corrector_config_t *pconfig =
 800ab32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab34:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800ab38:	3314      	adds	r3, #20
 800ab3a:	643b      	str	r3, [r7, #64]	; 0x40
				&(pdev->smudge_correct_config);
	VL53LX_smudge_corrector_internals_t *pint =
 800ab3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab3e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800ab42:	3318      	adds	r3, #24
 800ab44:	63fb      	str	r3, [r7, #60]	; 0x3c
				&(pdev->smudge_corrector_internals);
	VL53LX_smudge_corrector_data_t *pout =
 800ab46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab48:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800ab4c:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pres->range_results.smudge_corrector_data);
	VL53LX_range_results_t  *pR = &(pres->range_results);
 800ab4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab50:	637b      	str	r3, [r7, #52]	; 0x34
	VL53LX_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800ab52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ab58:	633b      	str	r3, [r7, #48]	; 0x30

	uint8_t	run_smudge_detection = 0;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t merging_complete = 0;
 800ab60:	2300      	movs	r3, #0
 800ab62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t	run_nodetect = 0;
 800ab66:	2300      	movs	r3, #0
 800ab68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t ambient_check = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	int32_t itemp32 = 0;
 800ab72:	2300      	movs	r3, #0
 800ab74:	65bb      	str	r3, [r7, #88]	; 0x58
	uint64_t utemp64 = 0;
 800ab76:	f04f 0200 	mov.w	r2, #0
 800ab7a:	f04f 0300 	mov.w	r3, #0
 800ab7e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint8_t continue_processing = CONT_CONTINUE;
 800ab82:	2300      	movs	r3, #0
 800ab84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint32_t xtalk_offset_out = 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t xtalk_offset_in = 0;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	61fb      	str	r3, [r7, #28]
	uint32_t current_xtalk = 0;
 800ab90:	2300      	movs	r3, #0
 800ab92:	61bb      	str	r3, [r7, #24]
	uint32_t smudge_margin_adjusted = 0;
 800ab94:	2300      	movs	r3, #0
 800ab96:	617b      	str	r3, [r7, #20]
	uint8_t i = 0;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t nodetect_index = 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t histo_merge_nb;


	LOG_FUNCTION_START("");

	VL53LX_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800aba4:	f107 030b 	add.w	r3, r7, #11
 800aba8:	4619      	mov	r1, r3
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fcbd 	bl	800b52a <VL53LX_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) ||
 800abb0:	7afb      	ldrb	r3, [r7, #11]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d004      	beq.n	800abc0 <VL53LX_dynamic_xtalk_correction_corrector+0xac>
		(pdev->tuning_parms.tp_hist_merge != 1))
 800abb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abb8:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	if ((histo_merge_nb == 0) ||
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d001      	beq.n	800abc4 <VL53LX_dynamic_xtalk_correction_corrector+0xb0>
		histo_merge_nb = 1;
 800abc0:	2301      	movs	r3, #1
 800abc2:	72fb      	strb	r3, [r7, #11]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800abc4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800abc6:	f000 faeb 	bl	800b1a0 <VL53LX_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800abca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d009      	beq.n	800abe6 <VL53LX_dynamic_xtalk_correction_corrector+0xd2>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb)  >
 800abd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd6:	7afa      	ldrb	r2, [r7, #11]
 800abd8:	fb02 f303 	mul.w	r3, r2, r3
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800abdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abde:	f8b2 2178 	ldrh.w	r2, [r2, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d901      	bls.n	800abea <VL53LX_dynamic_xtalk_correction_corrector+0xd6>
 800abe6:	2301      	movs	r3, #1
 800abe8:	e000      	b.n	800abec <VL53LX_dynamic_xtalk_correction_corrector+0xd8>
 800abea:	2300      	movs	r3, #0
 800abec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d


	merging_complete =
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800abf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abf2:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d105      	bne.n	800ac06 <VL53LX_dynamic_xtalk_correction_corrector+0xf2>
		(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800abfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abfc:	f893 2184 	ldrb.w	r2, [r3, #388]	; 0x184
 800ac00:	7afb      	ldrb	r3, [r7, #11]
		((pdev->tuning_parms.tp_hist_merge != 1) ||
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d101      	bne.n	800ac0a <VL53LX_dynamic_xtalk_correction_corrector+0xf6>
 800ac06:	2301      	movs	r3, #1
 800ac08:	e000      	b.n	800ac0c <VL53LX_dynamic_xtalk_correction_corrector+0xf8>
 800ac0a:	2300      	movs	r3, #0
	merging_complete =
 800ac0c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800ac10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac12:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d10e      	bne.n	800ac36 <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pconfig->smudge_corr_enabled == 1) &&
 800ac18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d00a      	beq.n	800ac36 <VL53LX_dynamic_xtalk_correction_corrector+0x122>
		(pR->xmonitor.range_status
 800ac20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac22:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800ac26:	2b09      	cmp	r3, #9
 800ac28:	d105      	bne.n	800ac36 <VL53LX_dynamic_xtalk_correction_corrector+0x122>
			== VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800ac2a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <VL53LX_dynamic_xtalk_correction_corrector+0x122>
 800ac32:	2301      	movs	r3, #1
 800ac34:	e000      	b.n	800ac38 <VL53LX_dynamic_xtalk_correction_corrector+0x124>
 800ac36:	2300      	movs	r3, #0
	run_smudge_detection =
 800ac38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		merging_complete;


	if ((pR->xmonitor.range_status
 800ac3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3e:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800ac42:	2b09      	cmp	r3, #9
 800ac44:	f000 809e 	beq.w	800ad84 <VL53LX_dynamic_xtalk_correction_corrector+0x270>
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800ac48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac4a:	781b      	ldrb	r3, [r3, #0]
		!= VL53LX_DEVICEERROR_RANGECOMPLETE) &&
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	f040 8099 	bne.w	800ad84 <VL53LX_dynamic_xtalk_correction_corrector+0x270>

		run_nodetect = 2;
 800ac52:	2302      	movs	r3, #2
 800ac54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		for (i = 0; i < pR->active_results; i++) {
 800ac58:	2300      	movs	r3, #0
 800ac5a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ac5e:	e02d      	b.n	800acbc <VL53LX_dynamic_xtalk_correction_corrector+0x1a8>
			if (pR->VL53LX_p_003[i].range_status ==
 800ac60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ac64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac66:	214c      	movs	r1, #76	; 0x4c
 800ac68:	fb01 f303 	mul.w	r3, r1, r3
 800ac6c:	4413      	add	r3, r2
 800ac6e:	335e      	adds	r3, #94	; 0x5e
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	2b09      	cmp	r3, #9
 800ac74:	d11d      	bne.n	800acb2 <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				VL53LX_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53LX_p_003[i].median_range_mm
 800ac76:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ac7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac7c:	214c      	movs	r1, #76	; 0x4c
 800ac7e:	fb01 f303 	mul.w	r3, r1, r3
 800ac82:	4413      	add	r3, r2
 800ac84:	335a      	adds	r3, #90	; 0x5a
 800ac86:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac8a:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800ac8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac8e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53LX_p_003[i].median_range_mm
 800ac90:	429a      	cmp	r2, r3
 800ac92:	dc03      	bgt.n	800ac9c <VL53LX_dynamic_xtalk_correction_corrector+0x188>
					run_nodetect = 0;
 800ac94:	2300      	movs	r3, #0
 800ac96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ac9a:	e00a      	b.n	800acb2 <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
				} else {
					if (run_nodetect == 2) {
 800ac9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	d106      	bne.n	800acb2 <VL53LX_dynamic_xtalk_correction_corrector+0x19e>
						run_nodetect = 1;
 800aca4:	2301      	movs	r3, #1
 800aca6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						nodetect_index = i;
 800acaa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800acae:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		for (i = 0; i < pR->active_results; i++) {
 800acb2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800acb6:	3301      	adds	r3, #1
 800acb8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800acbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acbe:	7c9b      	ldrb	r3, [r3, #18]
 800acc0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d3cb      	bcc.n	800ac60 <VL53LX_dynamic_xtalk_correction_corrector+0x14c>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800acc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800accc:	2b02      	cmp	r3, #2
 800acce:	d102      	bne.n	800acd6 <VL53LX_dynamic_xtalk_correction_corrector+0x1c2>

			run_nodetect = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		amr =
		pR->VL53LX_p_003[nodetect_index].ambient_count_rate_mcps;
 800acd6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
		amr =
 800acda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acdc:	214c      	movs	r1, #76	; 0x4c
 800acde:	fb01 f303 	mul.w	r3, r1, r3
 800ace2:	4413      	add	r3, r2
 800ace4:	3348      	adds	r3, #72	; 0x48
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	827b      	strh	r3, [r7, #18]

		if (run_nodetect == 1) {
 800acea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d148      	bne.n	800ad84 <VL53LX_dynamic_xtalk_correction_corrector+0x270>




			utemp64 = 1000 * ((uint64_t)amr);
 800acf2:	8a78      	ldrh	r0, [r7, #18]
 800acf4:	f04f 0100 	mov.w	r1, #0
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	f04f 0400 	mov.w	r4, #0
 800ad00:	f04f 0500 	mov.w	r5, #0
 800ad04:	015d      	lsls	r5, r3, #5
 800ad06:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800ad0a:	0154      	lsls	r4, r2, #5
 800ad0c:	4622      	mov	r2, r4
 800ad0e:	462b      	mov	r3, r5
 800ad10:	1a12      	subs	r2, r2, r0
 800ad12:	eb63 0301 	sbc.w	r3, r3, r1
 800ad16:	f04f 0400 	mov.w	r4, #0
 800ad1a:	f04f 0500 	mov.w	r5, #0
 800ad1e:	009d      	lsls	r5, r3, #2
 800ad20:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800ad24:	0094      	lsls	r4, r2, #2
 800ad26:	4622      	mov	r2, r4
 800ad28:	462b      	mov	r3, r5
 800ad2a:	1812      	adds	r2, r2, r0
 800ad2c:	eb41 0303 	adc.w	r3, r1, r3
 800ad30:	f04f 0000 	mov.w	r0, #0
 800ad34:	f04f 0100 	mov.w	r1, #0
 800ad38:	00d9      	lsls	r1, r3, #3
 800ad3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ad3e:	00d0      	lsls	r0, r2, #3
 800ad40:	4602      	mov	r2, r0
 800ad42:	460b      	mov	r3, r1
 800ad44:	e9c7 2308 	strd	r2, r3, [r7, #32]


			utemp64 = utemp64 << 9;
 800ad48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ad4c:	f04f 0200 	mov.w	r2, #0
 800ad50:	f04f 0300 	mov.w	r3, #0
 800ad54:	024b      	lsls	r3, r1, #9
 800ad56:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800ad5a:	0242      	lsls	r2, r0, #9
 800ad5c:	e9c7 2308 	strd	r2, r3, [r7, #32]


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800ad60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad64:	461a      	mov	r2, r3
 800ad66:	f04f 0300 	mov.w	r3, #0
 800ad6a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ad6e:	4299      	cmp	r1, r3
 800ad70:	bf08      	it	eq
 800ad72:	4290      	cmpeq	r0, r2
 800ad74:	d203      	bcs.n	800ad7e <VL53LX_dynamic_xtalk_correction_corrector+0x26a>
				run_nodetect = 1;
 800ad76:	2301      	movs	r3, #1
 800ad78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ad7c:	e002      	b.n	800ad84 <VL53LX_dynamic_xtalk_correction_corrector+0x270>
			else
				run_nodetect = 0;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		}
	}


	if (run_smudge_detection) {
 800ad84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 8101 	beq.w	800af90 <VL53LX_dynamic_xtalk_correction_corrector+0x47c>

		pint->nodetect_counter = 0;
 800ad8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad90:	2200      	movs	r2, #0
 800ad92:	611a      	str	r2, [r3, #16]


		VL53LX_dynamic_xtalk_correction_calc_required_samples(Dev);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f7ff fbe8 	bl	800a56a <VL53LX_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800ad9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad9c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800ada0:	61fb      	str	r3, [r7, #28]
			pR->xmonitor.VL53LX_p_009;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	60fb      	str	r3, [r7, #12]
		current_xtalk = ((uint32_t)cco) << 2;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	61bb      	str	r3, [r7, #24]


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800adae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adb0:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	617b      	str	r3, [r7, #20]


		itemp32 = xtalk_offset_in - current_xtalk +
 800adb6:	69fa      	ldr	r2, [r7, #28]
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	1ad2      	subs	r2, r2, r3
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	4413      	add	r3, r2
 800adc0:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800adc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	da02      	bge.n	800adce <VL53LX_dynamic_xtalk_correction_corrector+0x2ba>
			itemp32 = itemp32 * (-1);
 800adc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800adca:	425b      	negs	r3, r3
 800adcc:	65bb      	str	r3, [r7, #88]	; 0x58


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800adce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800add0:	699b      	ldr	r3, [r3, #24]
 800add2:	461a      	mov	r2, r3
 800add4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800add6:	4293      	cmp	r3, r2
 800add8:	dd0c      	ble.n	800adf4 <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800adda:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted)) {
 800addc:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800adde:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	da03      	bge.n	800adee <VL53LX_dynamic_xtalk_correction_corrector+0x2da>
				pout->single_xtalk_delta_flag = 1;
 800ade6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade8:	2201      	movs	r2, #1
 800adea:	709a      	strb	r2, [r3, #2]
 800adec:	e002      	b.n	800adf4 <VL53LX_dynamic_xtalk_correction_corrector+0x2e0>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800adee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf0:	2202      	movs	r2, #2
 800adf2:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800adf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	1c5a      	adds	r2, r3, #1
 800adfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adfc:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800adfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d906      	bls.n	800ae18 <VL53LX_dynamic_xtalk_correction_corrector+0x304>
			pout->sample_limit_exceeded_flag = 1;
 800ae0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800ae10:	2302      	movs	r3, #2
 800ae12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800ae16:	e00d      	b.n	800ae34 <VL53LX_dynamic_xtalk_correction_corrector+0x320>
		} else {
			pint->accumulator = pint->accumulator +
 800ae18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae1a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	461a      	mov	r2, r3
 800ae22:	f04f 0300 	mov.w	r3, #0
 800ae26:	eb10 0802 	adds.w	r8, r0, r2
 800ae2a:	eb41 0903 	adc.w	r9, r1, r3
 800ae2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae30:	e9c3 8902 	strd	r8, r9, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800ae34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d202      	bcs.n	800ae46 <VL53LX_dynamic_xtalk_correction_corrector+0x332>
			continue_processing = CONT_NEXT_LOOP;
 800ae40:	2301      	movs	r3, #1
 800ae42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800ae46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae48:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ae4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	461a      	mov	r2, r3
 800ae52:	f04f 0300 	mov.w	r3, #0
 800ae56:	f7f5 fa63 	bl	8000320 <__aeabi_uldivmod>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	460b      	mov	r3, r1
		xtalk_offset_out =
 800ae5e:	4613      	mov	r3, r2
 800ae60:	653b      	str	r3, [r7, #80]	; 0x50
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800ae62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	1ad2      	subs	r2, r2, r3
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	4413      	add	r3, r2
 800ae6c:	65bb      	str	r3, [r7, #88]	; 0x58
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800ae6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	da02      	bge.n	800ae7a <VL53LX_dynamic_xtalk_correction_corrector+0x366>
			itemp32 = itemp32 * (-1);
 800ae74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae76:	425b      	negs	r3, r3
 800ae78:	65bb      	str	r3, [r7, #88]	; 0x58

		if (continue_processing == CONT_CONTINUE &&
 800ae7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d112      	bne.n	800aea8 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800ae82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae84:	69db      	ldr	r3, [r3, #28]
 800ae86:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800ae88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	db0c      	blt.n	800aea8 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800ae8e:	69ba      	ldr	r2, [r7, #24]
					(int32_t)smudge_margin_adjusted))
 800ae90:	697b      	ldr	r3, [r7, #20]
				((int32_t)current_xtalk -
 800ae92:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800ae94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae96:	429a      	cmp	r2, r3
 800ae98:	da03      	bge.n	800aea2 <VL53LX_dynamic_xtalk_correction_corrector+0x38e>
				pout->averaged_xtalk_delta_flag = 1;
 800ae9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	70da      	strb	r2, [r3, #3]
 800aea0:	e002      	b.n	800aea8 <VL53LX_dynamic_xtalk_correction_corrector+0x394>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800aea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea4:	2202      	movs	r2, #2
 800aea6:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800aea8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d108      	bne.n	800aec2 <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800aeb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeb2:	69db      	ldr	r3, [r3, #28]
 800aeb4:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800aeb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	da02      	bge.n	800aec2 <VL53LX_dynamic_xtalk_correction_corrector+0x3ae>
			)

			continue_processing = CONT_RESET;
 800aebc:	2302      	movs	r3, #2
 800aebe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



		pout->smudge_corr_clipped = 0;
 800aec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec4:	2200      	movs	r2, #0
 800aec6:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800aec8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d111      	bne.n	800aef4 <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800aed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed2:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d00d      	beq.n	800aef4 <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800aed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeda:	6a1b      	ldr	r3, [r3, #32]
 800aedc:	7afa      	ldrb	r2, [r7, #11]
 800aede:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800aee2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d905      	bls.n	800aef4 <VL53LX_dynamic_xtalk_correction_corrector+0x3e0>
				pout->smudge_corr_clipped = 1;
 800aee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeea:	2201      	movs	r2, #1
 800aeec:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800aeee:	2302      	movs	r3, #2
 800aef0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800aef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aef6:	7c1b      	ldrb	r3, [r3, #16]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d007      	beq.n	800af0c <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800aefc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aefe:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800af00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af02:	429a      	cmp	r2, r3
 800af04:	d902      	bls.n	800af0c <VL53LX_dynamic_xtalk_correction_corrector+0x3f8>
			xtalk_offset_out =
 800af06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800af0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af0e:	7c1b      	ldrb	r3, [r3, #16]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d107      	bne.n	800af24 <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800af14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af16:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800af18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d202      	bcs.n	800af24 <VL53LX_dynamic_xtalk_correction_corrector+0x410>
			xtalk_offset_out =
 800af1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	653b      	str	r3, [r7, #80]	; 0x50
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800af24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af26:	089b      	lsrs	r3, r3, #2
 800af28:	653b      	str	r3, [r7, #80]	; 0x50
		if (xtalk_offset_out > 0x3FFFF)
 800af2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af30:	d301      	bcc.n	800af36 <VL53LX_dynamic_xtalk_correction_corrector+0x422>
			xtalk_offset_out = 0x3FFFF;
 800af32:	4b3f      	ldr	r3, [pc, #252]	; (800b030 <VL53LX_dynamic_xtalk_correction_corrector+0x51c>)
 800af34:	653b      	str	r3, [r7, #80]	; 0x50


		if (continue_processing == CONT_CONTINUE) {
 800af36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d10d      	bne.n	800af5a <VL53LX_dynamic_xtalk_correction_corrector+0x446>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800af3e:	2300      	movs	r3, #0
 800af40:	9301      	str	r3, [sp, #4]
 800af42:	2301      	movs	r3, #1
 800af44:	9300      	str	r3, [sp, #0]
 800af46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7ff fc33 	bl	800a7b8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800af52:	2302      	movs	r3, #2
 800af54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800af58:	e009      	b.n	800af6e <VL53LX_dynamic_xtalk_correction_corrector+0x45a>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800af5a:	2301      	movs	r3, #1
 800af5c:	9301      	str	r3, [sp, #4]
 800af5e:	2301      	movs	r3, #1
 800af60:	9300      	str	r3, [sp, #0]
 800af62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7ff fc25 	bl	800a7b8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800af6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af72:	2b02      	cmp	r3, #2
 800af74:	d10c      	bne.n	800af90 <VL53LX_dynamic_xtalk_correction_corrector+0x47c>
			pint->accumulator = 0;
 800af76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af78:	f04f 0200 	mov.w	r2, #0
 800af7c:	f04f 0300 	mov.w	r3, #0
 800af80:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800af84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af86:	2200      	movs	r2, #0
 800af88:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800af8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af8c:	2200      	movs	r2, #0
 800af8e:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800af90:	2300      	movs	r3, #0
 800af92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (run_nodetect == 1) {
 800af96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d140      	bne.n	800b020 <VL53LX_dynamic_xtalk_correction_corrector+0x50c>

		pint->nodetect_counter += 1;
 800af9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	1c5a      	adds	r2, r3, #1
 800afa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa6:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800afa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afaa:	691a      	ldr	r2, [r3, #16]
 800afac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d202      	bcs.n	800afba <VL53LX_dynamic_xtalk_correction_corrector+0x4a6>
			continue_processing = CONT_NEXT_LOOP;
 800afb4:	2301      	movs	r3, #1
 800afb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800afba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afbe:	653b      	str	r3, [r7, #80]	; 0x50

		if (continue_processing == CONT_CONTINUE) {
 800afc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d110      	bne.n	800afea <VL53LX_dynamic_xtalk_correction_corrector+0x4d6>

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800afc8:	2300      	movs	r3, #0
 800afca:	9301      	str	r3, [sp, #4]
 800afcc:	2300      	movs	r3, #0
 800afce:	9300      	str	r3, [sp, #0]
 800afd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f7ff fbee 	bl	800a7b8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800afdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afde:	2202      	movs	r2, #2
 800afe0:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800afe2:	2302      	movs	r3, #2
 800afe4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800afe8:	e009      	b.n	800affe <VL53LX_dynamic_xtalk_correction_corrector+0x4ea>
		} else {

			VL53LX_dynamic_xtalk_correction_calc_new_xtalk(
 800afea:	2301      	movs	r3, #1
 800afec:	9301      	str	r3, [sp, #4]
 800afee:	2300      	movs	r3, #0
 800aff0:	9300      	str	r3, [sp, #0]
 800aff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aff6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f7ff fbdd 	bl	800a7b8 <VL53LX_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800affe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b002:	2b02      	cmp	r3, #2
 800b004:	d10c      	bne.n	800b020 <VL53LX_dynamic_xtalk_correction_corrector+0x50c>
			pint->accumulator = 0;
 800b006:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b008:	f04f 0200 	mov.w	r2, #0
 800b00c:	f04f 0300 	mov.w	r3, #0
 800b010:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800b014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b016:	2200      	movs	r2, #0
 800b018:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800b01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b01c:	2200      	movs	r2, #0
 800b01e:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800b020:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
}
 800b024:	4618      	mov	r0, r3
 800b026:	3760      	adds	r7, #96	; 0x60
 800b028:	46bd      	mov	sp, r7
 800b02a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b02e:	bf00      	nop
 800b030:	0003ffff 	.word	0x0003ffff

0800b034 <VL53LX_dynamic_xtalk_correction_data_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b086      	sub	sp, #24
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b03c:	2300      	movs	r3, #0
 800b03e:	75fb      	strb	r3, [r7, #23]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	3318      	adds	r3, #24
 800b044:	613b      	str	r3, [r7, #16]
	VL53LX_LLDriverResults_t *pres = VL53LXDevStructGetLLResultsHandle(Dev);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800b04c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b054:	3314      	adds	r3, #20
 800b056:	2201      	movs	r2, #1
 800b058:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b060:	3315      	adds	r3, #21
 800b062:	2201      	movs	r2, #1
 800b064:	701a      	strb	r2, [r3, #0]
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b06c:	3316      	adds	r3, #22
 800b06e:	2200      	movs	r2, #0
 800b070:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b078:	3318      	adds	r3, #24
 800b07a:	2200      	movs	r2, #0
 800b07c:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b084:	331c      	adds	r3, #28
 800b086:	2264      	movs	r2, #100	; 0x64
 800b088:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b090:	2200      	movs	r2, #0
 800b092:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b09a:	3304      	adds	r3, #4
 800b09c:	2200      	movs	r2, #0
 800b09e:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b0a6:	3308      	adds	r3, #8
 800b0a8:	22c8      	movs	r2, #200	; 0xc8
 800b0aa:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b0b2:	330c      	adds	r3, #12
 800b0b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0b8:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b0c0:	3310      	adds	r3, #16
 800b0c2:	f44f 729a 	mov.w	r2, #308	; 0x134
 800b0c6:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b0ce:	3314      	adds	r3, #20
 800b0d0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b0d4:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b0dc:	3318      	adds	r3, #24
 800b0de:	2280      	movs	r2, #128	; 0x80
 800b0e0:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b0e8:	331c      	adds	r3, #28
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	701a      	strb	r2, [r3, #0]
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800b0f4:	331e      	adds	r3, #30
 800b0f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0fa:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b102:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b106:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b10e:	3302      	adds	r3, #2
 800b110:	2200      	movs	r2, #0
 800b112:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b11a:	3304      	adds	r3, #4
 800b11c:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
 800b120:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b128:	3308      	adds	r3, #8
 800b12a:	2228      	movs	r2, #40	; 0x28
 800b12c:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b134:	330c      	adds	r3, #12
 800b136:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 800b13a:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b142:	3310      	adds	r3, #16
 800b144:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b148:	801a      	strh	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b150:	3314      	adds	r3, #20
 800b152:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b156:	601a      	str	r2, [r3, #0]
		VL53LX_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b15e:	3318      	adds	r3, #24
 800b160:	2200      	movs	r2, #0
 800b162:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.required_samples = 0;
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800b16a:	331c      	adds	r3, #28
 800b16c:	2200      	movs	r2, #0
 800b16e:	601a      	str	r2, [r3, #0]
	pdev->smudge_corrector_internals.accumulator = 0;
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	f503 519f 	add.w	r1, r3, #5088	; 0x13e0
 800b176:	f04f 0200 	mov.w	r2, #0
 800b17a:	f04f 0300 	mov.w	r3, #0
 800b17e:	e9c1 2300 	strd	r2, r3, [r1]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b188:	3308      	adds	r3, #8
 800b18a:	2200      	movs	r2, #0
 800b18c:	601a      	str	r2, [r3, #0]


	VL53LX_dynamic_xtalk_correction_output_init(pres);
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f000 f806 	bl	800b1a0 <VL53LX_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800b194:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3718      	adds	r7, #24
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <VL53LX_dynamic_xtalk_correction_output_init>:

VL53LX_Error VL53LX_dynamic_xtalk_correction_output_init(
	VL53LX_LLDriverResults_t *pres
	)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	73fb      	strb	r3, [r7, #15]
	VL53LX_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b1b2:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800b1f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3714      	adds	r7, #20
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <VL53LX_xtalk_cal_data_init>:


VL53LX_Error VL53LX_xtalk_cal_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b208:	2300      	movs	r3, #0
 800b20a:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	3318      	adds	r3, #24
 800b210:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800b218:	331c      	adds	r3, #28
 800b21a:	2200      	movs	r2, #0
 800b21c:	601a      	str	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800b224:	2200      	movs	r2, #0
 800b226:	801a      	strh	r2, [r3, #0]
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800b22e:	3302      	adds	r3, #2
 800b230:	2200      	movs	r2, #0
 800b232:	801a      	strh	r2, [r3, #0]
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 800b23a:	3304      	adds	r3, #4
 800b23c:	2218      	movs	r2, #24
 800b23e:	2100      	movs	r1, #0
 800b240:	4618      	mov	r0, r3
 800b242:	f009 f8c1 	bl	80143c8 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800b246:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <VL53LX_low_power_auto_data_init>:


VL53LX_Error VL53LX_low_power_auto_data_init(
	VL53LX_DEV                          Dev
	)
{
 800b252:	b480      	push	{r7}
 800b254:	b085      	sub	sp, #20
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b25a:	2300      	movs	r3, #0
 800b25c:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	3318      	adds	r3, #24
 800b262:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b26a:	3310      	adds	r3, #16
 800b26c:	2203      	movs	r2, #3
 800b26e:	701a      	strb	r2, [r3, #0]
		VL53LX_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b276:	3311      	adds	r3, #17
 800b278:	2200      	movs	r2, #0
 800b27a:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b282:	3312      	adds	r3, #18
 800b284:	2200      	movs	r2, #0
 800b286:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b28e:	3313      	adds	r3, #19
 800b290:	2200      	movs	r2, #0
 800b292:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b29a:	3314      	adds	r3, #20
 800b29c:	2200      	movs	r2, #0
 800b29e:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b2a6:	3315      	adds	r3, #21
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b2b2:	3316      	adds	r3, #22
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b2be:	3318      	adds	r3, #24
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b2ca:	331c      	adds	r3, #28
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800b2d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3714      	adds	r7, #20
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <VL53LX_low_power_auto_data_stop_range>:

VL53LX_Error VL53LX_low_power_auto_data_stop_range(
	VL53LX_DEV                          Dev
	)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]




	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	73fb      	strb	r3, [r7, #15]

	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	3318      	adds	r3, #24
 800b2f0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b2f8:	3312      	adds	r3, #18
 800b2fa:	22ff      	movs	r2, #255	; 0xff
 800b2fc:	701a      	strb	r2, [r3, #0]

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b304:	3316      	adds	r3, #22
 800b306:	2200      	movs	r2, #0
 800b308:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b310:	3318      	adds	r3, #24
 800b312:	2200      	movs	r2, #0
 800b314:	601a      	str	r2, [r3, #0]
	pdev->low_power_auto_data.dss__required_spads = 0;
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b31c:	331c      	adds	r3, #28
 800b31e:	2200      	movs	r2, #0
 800b320:	801a      	strh	r2, [r3, #0]


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b328:	3314      	adds	r3, #20
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d007      	beq.n	800b340 <VL53LX_low_power_auto_data_stop_range+0x60>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b336:	3314      	adds	r3, #20
 800b338:	781a      	ldrb	r2, [r3, #0]
		pdev->stat_nvm.vhv_config__init =
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b346:	3315      	adds	r3, #21
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d007      	beq.n	800b35e <VL53LX_low_power_auto_data_stop_range+0x7e>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b354:	3315      	adds	r3, #21
 800b356:	781a      	ldrb	r2, [r3, #0]
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	2200      	movs	r2, #0
 800b362:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	LOG_FUNCTION_END(status);

	return status;
 800b366:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3714      	adds	r7, #20
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr

0800b376 <VL53LX_low_power_auto_setup_manual_calibration>:
	return status;
}

VL53LX_Error VL53LX_low_power_auto_setup_manual_calibration(
	VL53LX_DEV        Dev)
{
 800b376:	b480      	push	{r7}
 800b378:	b085      	sub	sp, #20
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	3318      	adds	r3, #24
 800b382:	60fb      	str	r3, [r7, #12]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b384:	2300      	movs	r3, #0
 800b386:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f893 22e3 	ldrb.w	r2, [r3, #739]	; 0x2e3
	pdev->low_power_auto_data.saved_vhv_init =
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b394:	3314      	adds	r3, #20
 800b396:	701a      	strb	r2, [r3, #0]
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
	pdev->low_power_auto_data.saved_vhv_timeout =
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b3a4:	3315      	adds	r3, #21
 800b3a6:	701a      	strb	r2, [r3, #0]


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f893 32e3 	ldrb.w	r3, [r3, #739]	; 0x2e3
 800b3ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3b2:	b2da      	uxtb	r2, r3
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b3c0:	f003 0303 	and.w	r3, r3, #3
 800b3c4:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b3cc:	3310      	adds	r3, #16
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800b3d4:	4413      	add	r3, r2
 800b3d6:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 800b3ec:	331e      	adds	r3, #30
 800b3ee:	781a      	ldrb	r2, [r3, #0]
	pdev->low_power_auto_data.first_run_phasecal_result =
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b3f6:	3316      	adds	r3, #22
 800b3f8:	701a      	strb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b400:	3316      	adds	r3, #22
 800b402:	781a      	ldrb	r2, [r3, #0]
	pdev->gen_cfg.cal_config__vcsel_start =
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

	LOG_FUNCTION_END(status);

	return status;
 800b40a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3714      	adds	r7, #20
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr

0800b41a <VL53LX_low_power_auto_update_DSS>:

VL53LX_Error VL53LX_low_power_auto_update_DSS(
	VL53LX_DEV        Dev)
{
 800b41a:	b480      	push	{r7}
 800b41c:	b087      	sub	sp, #28
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]



	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	3318      	adds	r3, #24
 800b426:	60fb      	str	r3, [r7, #12]

	VL53LX_system_results_t *pS = &(pdev->sys_results);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f203 3366 	addw	r3, r3, #870	; 0x366
 800b42e:	60bb      	str	r3, [r7, #8]


	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b430:	2300      	movs	r3, #0
 800b432:	75fb      	strb	r3, [r7, #23]




	utemp32a =
		pS->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	8a1b      	ldrh	r3, [r3, #16]
 800b438:	461a      	mov	r2, r3
		 + pS->result__ambient_count_rate_mcps_sd0;
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	891b      	ldrh	r3, [r3, #8]
 800b43e:	4413      	add	r3, r2
	utemp32a =
 800b440:	613b      	str	r3, [r7, #16]


	if (utemp32a > 0xFFFF)
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b448:	d302      	bcc.n	800b450 <VL53LX_low_power_auto_update_DSS+0x36>
		utemp32a = 0xFFFF;
 800b44a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b44e:	613b      	str	r3, [r7, #16]



	utemp32a = utemp32a << 16;
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	041b      	lsls	r3, r3, #16
 800b454:	613b      	str	r3, [r7, #16]


	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d102      	bne.n	800b466 <VL53LX_low_power_auto_update_DSS+0x4c>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b460:	23f1      	movs	r3, #241	; 0xf1
 800b462:	75fb      	strb	r3, [r7, #23]
 800b464:	e03f      	b.n	800b4e6 <VL53LX_low_power_auto_update_DSS+0xcc>
	else {

		utemp32a = utemp32a /
		pdev->sys_results.result__dss_actual_effective_spads_sd0;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f8b3 336a 	ldrh.w	r3, [r3, #874]	; 0x36a
 800b46c:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	fbb3 f3f2 	udiv	r3, r3, r2
 800b474:	613b      	str	r3, [r7, #16]

		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b47c:	3318      	adds	r3, #24
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	601a      	str	r2, [r3, #0]
			utemp32a;


		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800b488:	041b      	lsls	r3, r3, #16
 800b48a:	613b      	str	r3, [r7, #16]
			16;


		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b492:	3318      	adds	r3, #24
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d102      	bne.n	800b4a0 <VL53LX_low_power_auto_update_DSS+0x86>
				== 0)
			status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800b49a:	23f1      	movs	r3, #241	; 0xf1
 800b49c:	75fb      	strb	r3, [r7, #23]
 800b49e:	e022      	b.n	800b4e6 <VL53LX_low_power_auto_update_DSS+0xcc>
		else {

			utemp32a = utemp32a /
			pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b4a6:	3318      	adds	r3, #24
 800b4a8:	681b      	ldr	r3, [r3, #0]
			utemp32a = utemp32a /
 800b4aa:	693a      	ldr	r2, [r7, #16]
 800b4ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4b0:	613b      	str	r3, [r7, #16]


			if (utemp32a > 0xFFFF)
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4b8:	d302      	bcc.n	800b4c0 <VL53LX_low_power_auto_update_DSS+0xa6>
				utemp32a = 0xFFFF;
 800b4ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4be:	613b      	str	r3, [r7, #16]


			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b4ca:	331c      	adds	r3, #28
 800b4cc:	801a      	strh	r2, [r3, #0]


			pdev->gen_cfg.dss_config__manual_effective_spads_select
			= pdev->low_power_auto_data.dss__required_spads;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b4d4:	331c      	adds	r3, #28
 800b4d6:	881a      	ldrh	r2, [r3, #0]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
			pdev->gen_cfg.dss_config__roi_mode_control =
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2202      	movs	r2, #2
 800b4e2:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53LX_ERROR_DIVISION_BY_ZERO) {
 800b4e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b4ea:	f113 0f0f 	cmn.w	r3, #15
 800b4ee:	d114      	bne.n	800b51a <VL53LX_low_power_auto_update_DSS+0x100>



		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b4f6:	331c      	adds	r3, #28
 800b4f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b4fc:	801a      	strh	r2, [r3, #0]


		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pdev->low_power_auto_data.dss__required_spads;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f503 539f 	add.w	r3, r3, #5088	; 0x13e0
 800b504:	331c      	adds	r3, #28
 800b506:	881a      	ldrh	r2, [r3, #0]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
		pdev->gen_cfg.dss_config__roi_mode_control =
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2202      	movs	r2, #2
 800b512:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
			VL53LX_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;


		status = VL53LX_ERROR_NONE;
 800b516:	2300      	movs	r3, #0
 800b518:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b51a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	371c      	adds	r7, #28
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr

0800b52a <VL53LX_compute_histo_merge_nb>:



VL53LX_Error VL53LX_compute_histo_merge_nb(
	VL53LX_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800b52a:	b480      	push	{r7}
 800b52c:	b087      	sub	sp, #28
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
 800b532:	6039      	str	r1, [r7, #0]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3318      	adds	r3, #24
 800b538:	613b      	str	r3, [r7, #16]
	VL53LX_Error  status = VL53LX_ERROR_NONE;
 800b53a:	2300      	movs	r3, #0
 800b53c:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800b53e:	2300      	movs	r3, #0
 800b540:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800b548:	2b07      	cmp	r3, #7
 800b54a:	bf0c      	ite	eq
 800b54c:	2301      	moveq	r3, #1
 800b54e:	2300      	movne	r3, #0
 800b550:	b2db      	uxtb	r3, r3
 800b552:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b554:	2300      	movs	r3, #0
 800b556:	75fb      	strb	r3, [r7, #23]
 800b558:	e019      	b.n	800b58e <VL53LX_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800b55a:	7df9      	ldrb	r1, [r7, #23]
 800b55c:	7bbb      	ldrb	r3, [r7, #14]
 800b55e:	6938      	ldr	r0, [r7, #16]
 800b560:	461a      	mov	r2, r3
 800b562:	0052      	lsls	r2, r2, #1
 800b564:	441a      	add	r2, r3
 800b566:	0153      	lsls	r3, r2, #5
 800b568:	461a      	mov	r2, r3
 800b56a:	460b      	mov	r3, r1
 800b56c:	005b      	lsls	r3, r3, #1
 800b56e:	440b      	add	r3, r1
 800b570:	019b      	lsls	r3, r3, #6
 800b572:	4413      	add	r3, r2
 800b574:	4403      	add	r3, r0
 800b576:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 800b57a:	330c      	adds	r3, #12
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	dd02      	ble.n	800b588 <VL53LX_compute_histo_merge_nb+0x5e>
			sum++;
 800b582:	7dbb      	ldrb	r3, [r7, #22]
 800b584:	3301      	adds	r3, #1
 800b586:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53LX_BIN_REC_SIZE; i++)
 800b588:	7dfb      	ldrb	r3, [r7, #23]
 800b58a:	3301      	adds	r3, #1
 800b58c:	75fb      	strb	r3, [r7, #23]
 800b58e:	7dfb      	ldrb	r3, [r7, #23]
 800b590:	2b05      	cmp	r3, #5
 800b592:	d9e2      	bls.n	800b55a <VL53LX_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	7dba      	ldrb	r2, [r7, #22]
 800b598:	701a      	strb	r2, [r3, #0]

	return status;
 800b59a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	371c      	adds	r7, #28
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <VL53LX_calc_pll_period_us>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53LX_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800b5aa:	b480      	push	{r7}
 800b5ac:	b085      	sub	sp, #20
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800b5b8:	88fb      	ldrh	r3, [r7, #6]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d005      	beq.n	800b5ca <VL53LX_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800b5be:	88fb      	ldrh	r3, [r7, #6]
 800b5c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b5c4:	fb92 f3f3 	sdiv	r3, r2, r3
 800b5c8:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3714      	adds	r7, #20
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <VL53LX_duration_maths>:
uint32_t  VL53LX_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b089      	sub	sp, #36	; 0x24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
 800b5e4:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800b5e6:	f04f 0200 	mov.w	r2, #0
 800b5ea:	f04f 0300 	mov.w	r3, #0
 800b5ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	fb02 f303 	mul.w	r3, r2, r3
 800b5fe:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	0b1b      	lsrs	r3, r3, #12
 800b604:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	461a      	mov	r2, r3
 800b60a:	f04f 0300 	mov.w	r3, #0
 800b60e:	e9c7 2306 	strd	r2, r3, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	68ba      	ldr	r2, [r7, #8]
 800b616:	fb02 f303 	mul.w	r3, r2, r3
 800b61a:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	091b      	lsrs	r3, r3, #4
 800b620:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	461a      	mov	r2, r3
 800b626:	f04f 0300 	mov.w	r3, #0
 800b62a:	69f9      	ldr	r1, [r7, #28]
 800b62c:	fb02 f001 	mul.w	r0, r2, r1
 800b630:	69b9      	ldr	r1, [r7, #24]
 800b632:	fb03 f101 	mul.w	r1, r3, r1
 800b636:	4401      	add	r1, r0
 800b638:	69b8      	ldr	r0, [r7, #24]
 800b63a:	fba0 2302 	umull	r2, r3, r0, r2
 800b63e:	4419      	add	r1, r3
 800b640:	460b      	mov	r3, r1
 800b642:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800b646:	e9c7 2306 	strd	r2, r3, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800b64a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b64e:	f04f 0200 	mov.w	r2, #0
 800b652:	f04f 0300 	mov.w	r3, #0
 800b656:	0b02      	lsrs	r2, r0, #12
 800b658:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b65c:	0b0b      	lsrs	r3, r1, #12
 800b65e:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800b662:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b666:	2b01      	cmp	r3, #1
 800b668:	bf08      	it	eq
 800b66a:	2a00      	cmpeq	r2, #0
 800b66c:	d305      	bcc.n	800b67a <VL53LX_duration_maths+0xa2>
		tmp_long_int = 0xFFFFFFFF;
 800b66e:	f04f 32ff 	mov.w	r2, #4294967295
 800b672:	f04f 0300 	mov.w	r3, #0
 800b676:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	617b      	str	r3, [r7, #20]

	return duration_us;
 800b67e:	697b      	ldr	r3, [r7, #20]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3724      	adds	r7, #36	; 0x24
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <VL53LX_events_per_spad_maths>:

uint32_t VL53LX_events_per_spad_maths(
	int32_t   VL53LX_p_010,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800b68c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b690:	b08e      	sub	sp, #56	; 0x38
 800b692:	af00      	add	r7, sp, #0
 800b694:	60f8      	str	r0, [r7, #12]
 800b696:	460b      	mov	r3, r1
 800b698:	607a      	str	r2, [r7, #4]
 800b69a:	817b      	strh	r3, [r7, #10]
	uint64_t total_hist_counts  = 0;
 800b69c:	f04f 0200 	mov.w	r2, #0
 800b6a0:	f04f 0300 	mov.w	r3, #0
 800b6a4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	uint64_t xtalk_per_spad     = 0;
 800b6a8:	f04f 0200 	mov.w	r2, #0
 800b6ac:	f04f 0300 	mov.w	r3, #0
 800b6b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint32_t rate_per_spad_kcps = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	627b      	str	r3, [r7, #36]	; 0x24





	uint64_t dividend = ((uint64_t)VL53LX_p_010
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	f04f 0400 	mov.w	r4, #0
 800b6c8:	f04f 0500 	mov.w	r5, #0
 800b6cc:	015d      	lsls	r5, r3, #5
 800b6ce:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800b6d2:	0154      	lsls	r4, r2, #5
 800b6d4:	4622      	mov	r2, r4
 800b6d6:	462b      	mov	r3, r5
 800b6d8:	1a12      	subs	r2, r2, r0
 800b6da:	eb63 0301 	sbc.w	r3, r3, r1
 800b6de:	f04f 0400 	mov.w	r4, #0
 800b6e2:	f04f 0500 	mov.w	r5, #0
 800b6e6:	009d      	lsls	r5, r3, #2
 800b6e8:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800b6ec:	0094      	lsls	r4, r2, #2
 800b6ee:	4622      	mov	r2, r4
 800b6f0:	462b      	mov	r3, r5
 800b6f2:	1812      	adds	r2, r2, r0
 800b6f4:	eb41 0303 	adc.w	r3, r1, r3
 800b6f8:	f04f 0000 	mov.w	r0, #0
 800b6fc:	f04f 0100 	mov.w	r1, #0
 800b700:	02d9      	lsls	r1, r3, #11
 800b702:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800b706:	02d0      	lsls	r0, r2, #11
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	e9c7 2306 	strd	r2, r3, [r7, #24]
			* 1000 * 256);

	if (num_spads != 0)
 800b710:	897b      	ldrh	r3, [r7, #10]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00a      	beq.n	800b72c <VL53LX_events_per_spad_maths+0xa0>
		total_hist_counts = do_division_u(
 800b716:	897a      	ldrh	r2, [r7, #10]
 800b718:	f04f 0300 	mov.w	r3, #0
 800b71c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b720:	f7f4 fdfe 	bl	8000320 <__aeabi_uldivmod>
 800b724:	4602      	mov	r2, r0
 800b726:	460b      	mov	r3, r1
 800b728:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d021      	beq.n	800b776 <VL53LX_events_per_spad_maths+0xea>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b732:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800b736:	f04f 0200 	mov.w	r2, #0
 800b73a:	f04f 0300 	mov.w	r3, #0
 800b73e:	02cb      	lsls	r3, r1, #11
 800b740:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b744:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800b746:	6879      	ldr	r1, [r7, #4]
 800b748:	0849      	lsrs	r1, r1, #1
 800b74a:	4608      	mov	r0, r1
 800b74c:	f04f 0100 	mov.w	r1, #0
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800b750:	eb12 0800 	adds.w	r8, r2, r0
 800b754:	eb43 0901 	adc.w	r9, r3, r1
 800b758:	e9c7 8904 	strd	r8, r9, [r7, #16]

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	461a      	mov	r2, r3
 800b760:	f04f 0300 	mov.w	r3, #0
 800b764:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b768:	f7f4 fdda 	bl	8000320 <__aeabi_uldivmod>
 800b76c:	4602      	mov	r2, r0
 800b76e:	460b      	mov	r3, r1
 800b770:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800b774:	e00b      	b.n	800b78e <VL53LX_events_per_spad_maths+0x102>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800b776:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800b77a:	f04f 0200 	mov.w	r2, #0
 800b77e:	f04f 0300 	mov.w	r3, #0
 800b782:	02cb      	lsls	r3, r1, #11
 800b784:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b788:	02c2      	lsls	r2, r0, #11
 800b78a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800b78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b790:	627b      	str	r3, [r7, #36]	; 0x24

	return rate_per_spad_kcps;
 800b792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b794:	4618      	mov	r0, r3
 800b796:	3738      	adds	r7, #56	; 0x38
 800b798:	46bd      	mov	sp, r7
 800b79a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800b79e <VL53LX_isqrt>:


uint32_t VL53LX_isqrt(uint32_t num)
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b085      	sub	sp, #20
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b7aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7ae:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800b7b0:	e002      	b.n	800b7b8 <VL53LX_isqrt+0x1a>
		bit >>= 2;
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	089b      	lsrs	r3, r3, #2
 800b7b6:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d8f8      	bhi.n	800b7b2 <VL53LX_isqrt+0x14>

	while (bit != 0) {
 800b7c0:	e017      	b.n	800b7f2 <VL53LX_isqrt+0x54>
		if (num >= res + bit)  {
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	4413      	add	r3, r2
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d30b      	bcc.n	800b7e6 <VL53LX_isqrt+0x48>
			num -= res + bit;
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	085b      	lsrs	r3, r3, #1
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	60fb      	str	r3, [r7, #12]
 800b7e4:	e002      	b.n	800b7ec <VL53LX_isqrt+0x4e>
		} else {
			res >>= 1;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	085b      	lsrs	r3, r3, #1
 800b7ea:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	089b      	lsrs	r3, r3, #2
 800b7f0:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d1e4      	bne.n	800b7c2 <VL53LX_isqrt+0x24>
	}

	return res;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3714      	adds	r7, #20
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <VL53LX_hist_calc_zero_distance_phase>:


void  VL53LX_hist_calc_zero_distance_phase(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b084      	sub	sp, #16
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800b80e:	2300      	movs	r3, #0
 800b810:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53LX_p_014         = 0;
 800b812:	2300      	movs	r3, #0
 800b814:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata->VL53LX_p_005);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b81c:	4618      	mov	r0, r3
 800b81e:	f000 fa97 	bl	800bd50 <VL53LX_decode_vcsel_period>
 800b822:	4603      	mov	r3, r0
	period = 2048 *
 800b824:	02db      	lsls	r3, r3, #11
 800b826:	60bb      	str	r3, [r7, #8]

	VL53LX_p_014  = period;
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (uint32_t)pdata->phasecal_result__reference_phase;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800b832:	461a      	mov	r2, r3
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	4413      	add	r3, r2
 800b838:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b840:	02db      	lsls	r3, r3, #11
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	4413      	add	r3, r2
 800b846:	60fb      	str	r3, [r7, #12]
	VL53LX_p_014 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b84e:	02db      	lsls	r3, r3, #11
 800b850:	68fa      	ldr	r2, [r7, #12]
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d009      	beq.n	800b870 <VL53LX_hist_calc_zero_distance_phase+0x6a>
		VL53LX_p_014  = VL53LX_p_014 % period;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	68ba      	ldr	r2, [r7, #8]
 800b860:	fbb3 f2f2 	udiv	r2, r3, r2
 800b864:	68b9      	ldr	r1, [r7, #8]
 800b866:	fb01 f202 	mul.w	r2, r1, r2
 800b86a:	1a9b      	subs	r3, r3, r2
 800b86c:	60fb      	str	r3, [r7, #12]
 800b86e:	e001      	b.n	800b874 <VL53LX_hist_calc_zero_distance_phase+0x6e>
	else
		VL53LX_p_014 = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53LX_p_014;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	b29a      	uxth	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800b87e:	bf00      	nop
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <VL53LX_hist_estimate_ambient_from_thresholded_bins>:


void  VL53LX_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b084      	sub	sp, #16
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
 800b88e:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800b890:	2300      	movs	r3, #0
 800b892:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53LX_p_031 = 0;
 800b894:	2300      	movs	r3, #0
 800b896:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53LX_hist_find_min_max_bin_values(pdata);
 800b898:	6838      	ldr	r0, [r7, #0]
 800b89a:	f000 fb82 	bl	800bfa2 <VL53LX_hist_find_min_max_bin_values>



	VL53LX_p_031  =
		(int32_t)VL53LX_isqrt((uint32_t)pdata->min_bin_value);
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f7ff ff7a 	bl	800b79e <VL53LX_isqrt>
 800b8aa:	4603      	mov	r3, r0
	VL53LX_p_031  =
 800b8ac:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 *= ambient_threshold_sigma;
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	fb02 f303 	mul.w	r3, r2, r3
 800b8b6:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += 0x07;
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	3307      	adds	r3, #7
 800b8bc:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031  = VL53LX_p_031 >> 4;
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	111b      	asrs	r3, r3, #4
 800b8c2:	60bb      	str	r3, [r7, #8]
	VL53LX_p_031 += pdata->min_bin_value;
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8ca:	68ba      	ldr	r2, [r7, #8]
 800b8cc:	4413      	add	r3, r2
 800b8ce:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	73fb      	strb	r3, [r7, #15]
 800b8e4:	e01e      	b.n	800b924 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53LX_p_031) {
 800b8e6:	7bfa      	ldrb	r2, [r7, #15]
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	3206      	adds	r2, #6
 800b8ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	dd13      	ble.n	800b91e <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800b8fc:	7bf9      	ldrb	r1, [r7, #15]
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	3106      	adds	r1, #6
 800b902:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b906:	441a      	add	r2, r3
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800b914:	3301      	adds	r3, #1
 800b916:	b2da      	uxtb	r2, r3
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++)
 800b91e:	7bfb      	ldrb	r3, [r7, #15]
 800b920:	3301      	adds	r3, #1
 800b922:	73fb      	strb	r3, [r7, #15]
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	7a9b      	ldrb	r3, [r3, #10]
 800b928:	7bfa      	ldrb	r2, [r7, #15]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d3db      	bcc.n	800b8e6 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800b934:	2b00      	cmp	r3, #0
 800b936:	d01c      	beq.n	800b972 <VL53LX_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53LX_p_028 =
			pdata->ambient_events_sum;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53LX_p_028 =
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800b94a:	683a      	ldr	r2, [r7, #0]
 800b94c:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800b950:	0852      	lsrs	r2, r2, #1
 800b952:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800b954:	441a      	add	r2, r3
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800b962:	683a      	ldr	r2, [r7, #0]
 800b964:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53LX_p_028 /=
 800b968:	fb93 f2f2 	sdiv	r2, r3, r2
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800b972:	bf00      	nop
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <VL53LX_hist_remove_ambient_bins>:


void  VL53LX_hist_remove_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800b97a:	b480      	push	{r7}
 800b97c:	b085      	sub	sp, #20
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800b982:	2300      	movs	r3, #0
 800b984:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800b986:	2300      	movs	r3, #0
 800b988:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800b98a:	2300      	movs	r3, #0
 800b98c:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	7b1b      	ldrb	r3, [r3, #12]
 800b992:	f003 0307 	and.w	r3, r3, #7
 800b996:	2b07      	cmp	r3, #7
 800b998:	d13a      	bne.n	800ba10 <VL53LX_hist_remove_ambient_bins+0x96>

		i = 0;
 800b99a:	2300      	movs	r3, #0
 800b99c:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b99e:	2300      	movs	r3, #0
 800b9a0:	73bb      	strb	r3, [r7, #14]
 800b9a2:	e01f      	b.n	800b9e4 <VL53LX_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800b9a4:	7bbb      	ldrb	r3, [r7, #14]
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	7b1b      	ldrb	r3, [r3, #12]
 800b9ac:	f003 0307 	and.w	r3, r3, #7
 800b9b0:	2b07      	cmp	r3, #7
 800b9b2:	d014      	beq.n	800b9de <VL53LX_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800b9b4:	7bba      	ldrb	r2, [r7, #14]
 800b9b6:	7b7b      	ldrb	r3, [r7, #13]
 800b9b8:	6879      	ldr	r1, [r7, #4]
 800b9ba:	440a      	add	r2, r1
 800b9bc:	7b11      	ldrb	r1, [r2, #12]
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	460a      	mov	r2, r1
 800b9c4:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800b9c6:	7bba      	ldrb	r2, [r7, #14]
 800b9c8:	7b7b      	ldrb	r3, [r7, #13]
 800b9ca:	6879      	ldr	r1, [r7, #4]
 800b9cc:	440a      	add	r2, r1
 800b9ce:	7c91      	ldrb	r1, [r2, #18]
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	460a      	mov	r2, r1
 800b9d6:	749a      	strb	r2, [r3, #18]
				i++;
 800b9d8:	7b7b      	ldrb	r3, [r7, #13]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b9de:	7bbb      	ldrb	r3, [r7, #14]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	73bb      	strb	r3, [r7, #14]
 800b9e4:	7bbb      	ldrb	r3, [r7, #14]
 800b9e6:	2b05      	cmp	r3, #5
 800b9e8:	d9dc      	bls.n	800b9a4 <VL53LX_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800b9ea:	7b7b      	ldrb	r3, [r7, #13]
 800b9ec:	73bb      	strb	r3, [r7, #14]
 800b9ee:	e00c      	b.n	800ba0a <VL53LX_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE + 1;
 800b9f0:	7bbb      	ldrb	r3, [r7, #14]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	2210      	movs	r2, #16
 800b9f8:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800b9fa:	7bbb      	ldrb	r3, [r7, #14]
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	4413      	add	r3, r2
 800ba00:	2200      	movs	r2, #0
 800ba02:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800ba04:	7bbb      	ldrb	r3, [r7, #14]
 800ba06:	3301      	adds	r3, #1
 800ba08:	73bb      	strb	r3, [r7, #14]
 800ba0a:	7bbb      	ldrb	r3, [r7, #14]
 800ba0c:	2b05      	cmp	r3, #5
 800ba0e:	d9ef      	bls.n	800b9f0 <VL53LX_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	7adb      	ldrb	r3, [r3, #11]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d023      	beq.n	800ba60 <VL53LX_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	7adb      	ldrb	r3, [r3, #11]
 800ba1c:	73fb      	strb	r3, [r7, #15]
 800ba1e:	e00f      	b.n	800ba40 <VL53LX_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53LX_p_020; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800ba20:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800ba22:	7bfb      	ldrb	r3, [r7, #15]
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	7ad2      	ldrb	r2, [r2, #11]
 800ba28:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	3106      	adds	r1, #6
 800ba2e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	3206      	adds	r2, #6
 800ba36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53LX_p_020; bin++) {
 800ba3a:	7bfb      	ldrb	r3, [r7, #15]
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	73fb      	strb	r3, [r7, #15]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800ba44:	7bfa      	ldrb	r2, [r7, #15]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d3ea      	bcc.n	800ba20 <VL53LX_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53LX_p_021 =
				pdata->VL53LX_p_021 -
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53LX_p_021 -
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	b2da      	uxtb	r2, r3
		pdata->VL53LX_p_021 =
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	72da      	strb	r2, [r3, #11]
	}
}
 800ba60:	bf00      	nop
 800ba62:	3714      	adds	r7, #20
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <VL53LX_calc_pll_period_mm>:


uint32_t VL53LX_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	4603      	mov	r3, r0
 800ba74:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800ba76:	2300      	movs	r3, #0
 800ba78:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800ba7e:	88fb      	ldrh	r3, [r7, #6]
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7ff fd92 	bl	800b5aa <VL53LX_calc_pll_period_us>
 800ba86:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800ba8c:	f249 2257 	movw	r2, #37463	; 0x9257
 800ba90:	fb02 f303 	mul.w	r3, r2, r3
 800ba94:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ba9c:	0c1b      	lsrs	r3, r3, #16
 800ba9e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800baa0:	68bb      	ldr	r3, [r7, #8]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <VL53LX_rate_maths>:


uint16_t VL53LX_rate_maths(
	int32_t   VL53LX_p_018,
	uint32_t  time_us)
{
 800baaa:	b480      	push	{r7}
 800baac:	b087      	sub	sp, #28
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800bab4:	2300      	movs	r3, #0
 800bab6:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800bab8:	2307      	movs	r3, #7
 800baba:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800babc:	2300      	movs	r3, #0
 800babe:	81fb      	strh	r3, [r7, #14]



	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_MAX)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bac6:	db03      	blt.n	800bad0 <VL53LX_rate_maths+0x26>
		tmp_int = VL53LX_SPAD_TOTAL_COUNT_MAX;
 800bac8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800bacc:	617b      	str	r3, [r7, #20]
 800bace:	e004      	b.n	800bada <VL53LX_rate_maths+0x30>
	else if (VL53LX_p_018 > 0)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	dd01      	ble.n	800bada <VL53LX_rate_maths+0x30>
		tmp_int = (uint32_t)VL53LX_p_018;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	617b      	str	r3, [r7, #20]




	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bae0:	dd02      	ble.n	800bae8 <VL53LX_rate_maths+0x3e>
		frac_bits = 3;
 800bae2:	2303      	movs	r3, #3
 800bae4:	613b      	str	r3, [r7, #16]
 800bae6:	e001      	b.n	800baec <VL53LX_rate_maths+0x42>
	else
		frac_bits = 7;
 800bae8:	2307      	movs	r3, #7
 800baea:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d009      	beq.n	800bb06 <VL53LX_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	409a      	lsls	r2, r3
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	085b      	lsrs	r3, r3, #1
 800bafc:	441a      	add	r2, r3
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb04:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_018 > VL53LX_SPAD_TOTAL_COUNT_RES_THRES)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bb0c:	dd02      	ble.n	800bb14 <VL53LX_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	011b      	lsls	r3, r3, #4
 800bb12:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb1a:	d302      	bcc.n	800bb22 <VL53LX_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800bb1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb20:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800bb26:	89fb      	ldrh	r3, [r7, #14]
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	371c      	adds	r7, #28
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <VL53LX_rate_per_spad_maths>:
uint16_t VL53LX_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b087      	sub	sp, #28
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	603b      	str	r3, [r7, #0]
 800bb40:	4613      	mov	r3, r2
 800bb42:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800bb44:	2300      	movs	r3, #0
 800bb46:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800bb4c:	88fb      	ldrh	r3, [r7, #6]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d010      	beq.n	800bb74 <VL53LX_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	021a      	lsls	r2, r3, #8
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	fa02 f303 	lsl.w	r3, r2, r3
 800bb5c:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800bb5e:	88fb      	ldrh	r3, [r7, #6]
 800bb60:	085b      	lsrs	r3, r3, #1
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800bb6a:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800bb6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb70:	617b      	str	r3, [r7, #20]
 800bb72:	e004      	b.n	800bb7e <VL53LX_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	fa02 f303 	lsl.w	r3, r2, r3
 800bb7c:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800bb7e:	697a      	ldr	r2, [r7, #20]
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d901      	bls.n	800bb8a <VL53LX_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800bb8e:	8a7b      	ldrh	r3, [r7, #18]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	371c      	adds	r7, #28
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <VL53LX_range_maths>:
	uint16_t  VL53LX_p_014,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800bb9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb9e:	b089      	sub	sp, #36	; 0x24
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	4606      	mov	r6, r0
 800bba4:	4608      	mov	r0, r1
 800bba6:	4611      	mov	r1, r2
 800bba8:	461a      	mov	r2, r3
 800bbaa:	4633      	mov	r3, r6
 800bbac:	80fb      	strh	r3, [r7, #6]
 800bbae:	4603      	mov	r3, r0
 800bbb0:	80bb      	strh	r3, [r7, #4]
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	807b      	strh	r3, [r7, #2]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	707b      	strb	r3, [r7, #1]


	uint32_t    pll_period_us = 0;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	61bb      	str	r3, [r7, #24]
	int64_t     tmp_long_int  = 0;
 800bbbe:	f04f 0200 	mov.w	r2, #0
 800bbc2:	f04f 0300 	mov.w	r3, #0
 800bbc6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int32_t     range_mm      = 0;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	61fb      	str	r3, [r7, #28]
	int32_t     range_mm_10   = 0;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	60fb      	str	r3, [r7, #12]



	pll_period_us  = VL53LX_calc_pll_period_us(fast_osc_frequency);
 800bbd2:	88fb      	ldrh	r3, [r7, #6]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7ff fce8 	bl	800b5aa <VL53LX_calc_pll_period_us>
 800bbda:	61b8      	str	r0, [r7, #24]



	tmp_long_int = (int64_t)VL53LX_p_014 - (int64_t)zero_distance_phase;
 800bbdc:	88b8      	ldrh	r0, [r7, #4]
 800bbde:	f04f 0100 	mov.w	r1, #0
 800bbe2:	887a      	ldrh	r2, [r7, #2]
 800bbe4:	f04f 0300 	mov.w	r3, #0
 800bbe8:	1a84      	subs	r4, r0, r2
 800bbea:	eb61 0503 	sbc.w	r5, r1, r3
 800bbee:	e9c7 4504 	strd	r4, r5, [r7, #16]



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	f04f 0300 	mov.w	r3, #0
 800bbfa:	6979      	ldr	r1, [r7, #20]
 800bbfc:	fb02 f001 	mul.w	r0, r2, r1
 800bc00:	6939      	ldr	r1, [r7, #16]
 800bc02:	fb03 f101 	mul.w	r1, r3, r1
 800bc06:	4401      	add	r1, r0
 800bc08:	6938      	ldr	r0, [r7, #16]
 800bc0a:	fba0 2302 	umull	r2, r3, r0, r2
 800bc0e:	4419      	add	r1, r3
 800bc10:	460b      	mov	r3, r1
 800bc12:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800bc16:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800bc1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bc1e:	2a00      	cmp	r2, #0
 800bc20:	f173 0100 	sbcs.w	r1, r3, #0
 800bc24:	da06      	bge.n	800bc34 <VL53LX_range_maths+0x98>
 800bc26:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bc2a:	f04f 0100 	mov.w	r1, #0
 800bc2e:	1812      	adds	r2, r2, r0
 800bc30:	eb41 0303 	adc.w	r3, r1, r3
 800bc34:	f04f 0000 	mov.w	r0, #0
 800bc38:	f04f 0100 	mov.w	r1, #0
 800bc3c:	0a50      	lsrs	r0, r2, #9
 800bc3e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800bc42:	1259      	asrs	r1, r3, #9
 800bc44:	e9c7 0104 	strd	r0, r1, [r7, #16]



	tmp_long_int =  tmp_long_int * VL53LX_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	f249 2257 	movw	r2, #37463	; 0x9257
 800bc4e:	fb02 f203 	mul.w	r2, r2, r3
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	2100      	movs	r1, #0
 800bc56:	fb01 f303 	mul.w	r3, r1, r3
 800bc5a:	18d1      	adds	r1, r2, r3
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	f249 2257 	movw	r2, #37463	; 0x9257
 800bc62:	fba3 2302 	umull	r2, r3, r3, r2
 800bc66:	4419      	add	r1, r3
 800bc68:	460b      	mov	r3, r1
 800bc6a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800bc6e:	e9c7 2304 	strd	r2, r3, [r7, #16]



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800bc72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bc76:	2a00      	cmp	r2, #0
 800bc78:	f173 0100 	sbcs.w	r1, r3, #0
 800bc7c:	da05      	bge.n	800bc8a <VL53LX_range_maths+0xee>
 800bc7e:	4832      	ldr	r0, [pc, #200]	; (800bd48 <VL53LX_range_maths+0x1ac>)
 800bc80:	f04f 0100 	mov.w	r1, #0
 800bc84:	1812      	adds	r2, r2, r0
 800bc86:	eb41 0303 	adc.w	r3, r1, r3
 800bc8a:	f04f 0000 	mov.w	r0, #0
 800bc8e:	f04f 0100 	mov.w	r1, #0
 800bc92:	0d90      	lsrs	r0, r2, #22
 800bc94:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800bc98:	1599      	asrs	r1, r3, #22
 800bc9a:	e9c7 0104 	strd	r0, r1, [r7, #16]


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bca2:	4413      	add	r3, r2
 800bca4:	61fb      	str	r3, [r7, #28]


	range_mm *= gain_factor;
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bcaa:	fb02 f303 	mul.w	r3, r2, r3
 800bcae:	61fb      	str	r3, [r7, #28]
	range_mm += 0x0400;
 800bcb0:	69fb      	ldr	r3, [r7, #28]
 800bcb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bcb6:	61fb      	str	r3, [r7, #28]
	range_mm /= 0x0800;
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	da01      	bge.n	800bcc2 <VL53LX_range_maths+0x126>
 800bcbe:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800bcc2:	12db      	asrs	r3, r3, #11
 800bcc4:	61fb      	str	r3, [r7, #28]


	if (fractional_bits == 0) {
 800bcc6:	787b      	ldrb	r3, [r7, #1]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d130      	bne.n	800bd2e <VL53LX_range_maths+0x192>
		range_mm_10 = range_mm * 10;
 800bccc:	69fa      	ldr	r2, [r7, #28]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4413      	add	r3, r2
 800bcd4:	005b      	lsls	r3, r3, #1
 800bcd6:	60fb      	str	r3, [r7, #12]
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	da00      	bge.n	800bce0 <VL53LX_range_maths+0x144>
 800bcde:	3303      	adds	r3, #3
 800bce0:	109b      	asrs	r3, r3, #2
 800bce2:	60fb      	str	r3, [r7, #12]
		if ((range_mm_10 % 10) < 5)
 800bce4:	68f9      	ldr	r1, [r7, #12]
 800bce6:	4b19      	ldr	r3, [pc, #100]	; (800bd4c <VL53LX_range_maths+0x1b0>)
 800bce8:	fb83 2301 	smull	r2, r3, r3, r1
 800bcec:	109a      	asrs	r2, r3, #2
 800bcee:	17cb      	asrs	r3, r1, #31
 800bcf0:	1ad2      	subs	r2, r2, r3
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	4413      	add	r3, r2
 800bcf8:	005b      	lsls	r3, r3, #1
 800bcfa:	1aca      	subs	r2, r1, r3
 800bcfc:	2a04      	cmp	r2, #4
 800bcfe:	dc09      	bgt.n	800bd14 <VL53LX_range_maths+0x178>
			range_mm = (int16_t)(range_mm_10 / 10);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	4a12      	ldr	r2, [pc, #72]	; (800bd4c <VL53LX_range_maths+0x1b0>)
 800bd04:	fb82 1203 	smull	r1, r2, r2, r3
 800bd08:	1092      	asrs	r2, r2, #2
 800bd0a:	17db      	asrs	r3, r3, #31
 800bd0c:	1ad3      	subs	r3, r2, r3
 800bd0e:	b21b      	sxth	r3, r3
 800bd10:	61fb      	str	r3, [r7, #28]
 800bd12:	e014      	b.n	800bd3e <VL53LX_range_maths+0x1a2>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	4a0d      	ldr	r2, [pc, #52]	; (800bd4c <VL53LX_range_maths+0x1b0>)
 800bd18:	fb82 1203 	smull	r1, r2, r2, r3
 800bd1c:	1092      	asrs	r2, r2, #2
 800bd1e:	17db      	asrs	r3, r3, #31
 800bd20:	1ad3      	subs	r3, r2, r3
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	3301      	adds	r3, #1
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	b21b      	sxth	r3, r3
 800bd2a:	61fb      	str	r3, [r7, #28]
 800bd2c:	e007      	b.n	800bd3e <VL53LX_range_maths+0x1a2>
	} else if (fractional_bits == 1)
 800bd2e:	787b      	ldrb	r3, [r7, #1]
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d104      	bne.n	800bd3e <VL53LX_range_maths+0x1a2>
		range_mm = range_mm / (0x01 << 1);
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	0fda      	lsrs	r2, r3, #31
 800bd38:	4413      	add	r3, r2
 800bd3a:	105b      	asrs	r3, r3, #1
 800bd3c:	61fb      	str	r3, [r7, #28]

	return range_mm;
 800bd3e:	69fb      	ldr	r3, [r7, #28]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3724      	adds	r7, #36	; 0x24
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd48:	003fffff 	.word	0x003fffff
 800bd4c:	66666667 	.word	0x66666667

0800bd50 <VL53LX_decode_vcsel_period>:


uint8_t VL53LX_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	4603      	mov	r3, r0
 800bd58:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53LX_p_030 = 0;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	73fb      	strb	r3, [r7, #15]

	VL53LX_p_030 = (vcsel_period_reg + 1) << 1;
 800bd5e:	79fb      	ldrb	r3, [r7, #7]
 800bd60:	3301      	adds	r3, #1
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	005b      	lsls	r3, r3, #1
 800bd66:	73fb      	strb	r3, [r7, #15]

	return VL53LX_p_030;
 800bd68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3714      	adds	r7, #20
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr

0800bd76 <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53LX_xtalk_histogram_shape_t *pxtalk,
		VL53LX_histogram_bin_data_t    *phist)
{
 800bd76:	b480      	push	{r7}
 800bd78:	b083      	sub	sp, #12
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
 800bd7e:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53LX_p_015 =
			pxtalk->VL53LX_p_015;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53LX_p_015 =
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53LX_p_019 =
			pxtalk->VL53LX_p_019;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53LX_p_019 =
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	781a      	ldrb	r2, [r3, #0]
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	709a      	strb	r2, [r3, #2]
	phist->VL53LX_p_020  = pxtalk->VL53LX_p_020;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	7a5a      	ldrb	r2, [r3, #9]
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	685a      	ldr	r2, [r3, #4]
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	605a      	str	r2, [r3, #4]
}
 800bde6:	bf00      	nop
 800bde8:	370c      	adds	r7, #12
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr

0800bdf2 <VL53LX_init_histogram_bin_data_struct>:

void VL53LX_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53LX_p_021,
	VL53LX_histogram_bin_data_t *pdata)
{
 800bdf2:	b480      	push	{r7}
 800bdf4:	b087      	sub	sp, #28
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	60f8      	str	r0, [r7, #12]
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	607a      	str	r2, [r7, #4]
 800bdfe:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800be00:	2300      	movs	r3, #0
 800be02:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53LX_DEVICESTATE_SW_STANDBY;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2203      	movs	r2, #3
 800be08:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53LX_DEVICESTATE_SW_STANDBY;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2203      	movs	r2, #3
 800be0e:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2200      	movs	r2, #0
 800be14:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_019                 = 0;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_020               = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2218      	movs	r2, #24
 800be26:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_021            = (uint8_t)VL53LX_p_021;
 800be28:	897b      	ldrh	r3, [r7, #10]
 800be2a:	b2da      	uxtb	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2200      	movs	r2, #0
 800be52:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2200      	movs	r2, #0
 800be72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53LX_p_005                       = 0;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2200      	movs	r2, #0
 800be82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53LX_p_015                = 0;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2200      	movs	r2, #0
 800be9a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2200      	movs	r2, #0
 800beaa:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2200      	movs	r2, #0
 800beba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53LX_p_028             = 0;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bec6:	2300      	movs	r3, #0
 800bec8:	82fb      	strh	r3, [r7, #22]
 800beca:	e009      	b.n	800bee0 <VL53LX_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800becc:	8afb      	ldrh	r3, [r7, #22]
 800bece:	8afa      	ldrh	r2, [r7, #22]
 800bed0:	b2d1      	uxtb	r1, r2
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	4413      	add	r3, r2
 800bed6:	460a      	mov	r2, r1
 800bed8:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800beda:	8afb      	ldrh	r3, [r7, #22]
 800bedc:	3301      	adds	r3, #1
 800bede:	82fb      	strh	r3, [r7, #22]
 800bee0:	8afb      	ldrh	r3, [r7, #22]
 800bee2:	2b05      	cmp	r3, #5
 800bee4:	d9f2      	bls.n	800becc <VL53LX_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bee6:	2300      	movs	r3, #0
 800bee8:	82fb      	strh	r3, [r7, #22]
 800beea:	e007      	b.n	800befc <VL53LX_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800beec:	8afb      	ldrh	r3, [r7, #22]
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	4413      	add	r3, r2
 800bef2:	2201      	movs	r2, #1
 800bef4:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53LX_MAX_BIN_SEQUENCE_LENGTH; i++)
 800bef6:	8afb      	ldrh	r3, [r7, #22]
 800bef8:	3301      	adds	r3, #1
 800befa:	82fb      	strh	r3, [r7, #22]
 800befc:	8afb      	ldrh	r3, [r7, #22]
 800befe:	2b05      	cmp	r3, #5
 800bf00:	d9f4      	bls.n	800beec <VL53LX_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800bf02:	2300      	movs	r3, #0
 800bf04:	82fb      	strh	r3, [r7, #22]
 800bf06:	e013      	b.n	800bf30 <VL53LX_init_histogram_bin_data_struct+0x13e>
		if (i < VL53LX_p_021)
 800bf08:	8afa      	ldrh	r2, [r7, #22]
 800bf0a:	897b      	ldrh	r3, [r7, #10]
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d206      	bcs.n	800bf1e <VL53LX_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800bf10:	8afa      	ldrh	r2, [r7, #22]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	3206      	adds	r2, #6
 800bf16:	68f9      	ldr	r1, [r7, #12]
 800bf18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bf1c:	e005      	b.n	800bf2a <VL53LX_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800bf1e:	8afa      	ldrh	r2, [r7, #22]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	3206      	adds	r2, #6
 800bf24:	2100      	movs	r1, #0
 800bf26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53LX_HISTOGRAM_BUFFER_SIZE; i++)
 800bf2a:	8afb      	ldrh	r3, [r7, #22]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	82fb      	strh	r3, [r7, #22]
 800bf30:	8afb      	ldrh	r3, [r7, #22]
 800bf32:	2b17      	cmp	r3, #23
 800bf34:	d9e8      	bls.n	800bf08 <VL53LX_init_histogram_bin_data_struct+0x116>


}
 800bf36:	bf00      	nop
 800bf38:	bf00      	nop
 800bf3a:	371c      	adds	r7, #28
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <VL53LX_decode_row_col>:

void VL53LX_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
 800bf50:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800bf52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	da10      	bge.n	800bf7c <VL53LX_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800bf5a:	7bfb      	ldrb	r3, [r7, #15]
 800bf5c:	43db      	mvns	r3, r3
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	f003 0307 	and.w	r3, r3, #7
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	3308      	adds	r3, #8
 800bf68:	b2da      	uxtb	r2, r3
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800bf6e:	7bfb      	ldrb	r3, [r7, #15]
 800bf70:	3b80      	subs	r3, #128	; 0x80
 800bf72:	10db      	asrs	r3, r3, #3
 800bf74:	b2da      	uxtb	r2, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800bf7a:	e00c      	b.n	800bf96 <VL53LX_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800bf7c:	7bfb      	ldrb	r3, [r7, #15]
 800bf7e:	f003 0307 	and.w	r3, r3, #7
 800bf82:	b2da      	uxtb	r2, r3
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800bf88:	7bfb      	ldrb	r3, [r7, #15]
 800bf8a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800bf8e:	10db      	asrs	r3, r3, #3
 800bf90:	b2da      	uxtb	r2, r3
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	701a      	strb	r2, [r3, #0]
}
 800bf96:	bf00      	nop
 800bf98:	3714      	adds	r7, #20
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr

0800bfa2 <VL53LX_hist_find_min_max_bin_values>:


void  VL53LX_hist_find_min_max_bin_values(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800bfa2:	b480      	push	{r7}
 800bfa4:	b085      	sub	sp, #20
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800bfae:	2300      	movs	r3, #0
 800bfb0:	73fb      	strb	r3, [r7, #15]
 800bfb2:	e02c      	b.n	800c00e <VL53LX_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800bfb4:	7bfb      	ldrb	r3, [r7, #15]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d009      	beq.n	800bfce <VL53LX_hist_find_min_max_bin_values+0x2c>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800bfc0:	7bf9      	ldrb	r1, [r7, #15]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	3106      	adds	r1, #6
 800bfc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	db07      	blt.n	800bfde <VL53LX_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800bfce:	7bfa      	ldrb	r2, [r7, #15]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	3206      	adds	r2, #6
 800bfd4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800bfde:	7bfb      	ldrb	r3, [r7, #15]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d009      	beq.n	800bff8 <VL53LX_hist_find_min_max_bin_values+0x56>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800bfea:	7bf9      	ldrb	r1, [r7, #15]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	3106      	adds	r1, #6
 800bff0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	dc07      	bgt.n	800c008 <VL53LX_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800bff8:	7bfa      	ldrb	r2, [r7, #15]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	3206      	adds	r2, #6
 800bffe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53LX_p_021; bin++) {
 800c008:	7bfb      	ldrb	r3, [r7, #15]
 800c00a:	3301      	adds	r3, #1
 800c00c:	73fb      	strb	r3, [r7, #15]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	7a9b      	ldrb	r3, [r3, #10]
 800c012:	7bfa      	ldrb	r2, [r7, #15]
 800c014:	429a      	cmp	r2, r3
 800c016:	d3cd      	bcc.n	800bfb4 <VL53LX_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800c018:	bf00      	nop
 800c01a:	bf00      	nop
 800c01c:	3714      	adds	r7, #20
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr

0800c026 <VL53LX_hist_estimate_ambient_from_ambient_bins>:


void  VL53LX_hist_estimate_ambient_from_ambient_bins(
	VL53LX_histogram_bin_data_t   *pdata)
{
 800c026:	b480      	push	{r7}
 800c028:	b085      	sub	sp, #20
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800c02e:	2300      	movs	r3, #0
 800c030:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	7adb      	ldrb	r3, [r3, #11]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d03a      	beq.n	800c0b0 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800c04c:	2300      	movs	r3, #0
 800c04e:	73fb      	strb	r3, [r7, #15]
 800c050:	e00e      	b.n	800c070 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c058:	7bf9      	ldrb	r1, [r7, #15]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	3106      	adds	r1, #6
 800c05e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c062:	441a      	add	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800c06a:	7bfb      	ldrb	r3, [r7, #15]
 800c06c:	3301      	adds	r3, #1
 800c06e:	73fb      	strb	r3, [r7, #15]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	7adb      	ldrb	r3, [r3, #11]
 800c074:	7bfa      	ldrb	r2, [r7, #15]
 800c076:	429a      	cmp	r2, r3
 800c078:	d3eb      	bcc.n	800c052 <VL53LX_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53LX_p_028 = pdata->ambient_events_sum;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 +=
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	7ad2      	ldrb	r2, [r2, #11]
 800c090:	0852      	lsrs	r2, r2, #1
 800c092:	b2d2      	uxtb	r2, r2
		pdata->VL53LX_p_028 +=
 800c094:	441a      	add	r2, r3
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53LX_p_028 /=
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53LX_p_028 /=
 800c0a6:	fb93 f2f2 	sdiv	r2, r3, r2
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800c0b0:	bf00      	nop
 800c0b2:	3714      	adds	r7, #20
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <VL53LX_f_001>:
	VL53LX_dmax_calibration_data_t	     *pcal,
	VL53LX_hist_gen3_dmax_config_t	     *pcfg,
	VL53LX_histogram_bin_data_t          *pbins,
	VL53LX_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800c0bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0c0:	b096      	sub	sp, #88	; 0x58
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6339      	str	r1, [r7, #48]	; 0x30
 800c0c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	86fb      	strh	r3, [r7, #54]	; 0x36



	VL53LX_Error status  = VL53LX_ERROR_NONE;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	uint32_t    pll_period_us       = 0;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t    periods_elapsed     = 0;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint32_t    tmp32               = 0;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	657b      	str	r3, [r7, #84]	; 0x54
	uint64_t    tmp64               = 0;
 800c0e0:	f04f 0200 	mov.w	r2, #0
 800c0e4:	f04f 0300 	mov.w	r3, #0
 800c0e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint32_t    amb_thres_delta     = 0;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	63bb      	str	r3, [r7, #56]	; 0x38

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_004     = 0x0000;
 800c0f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	8353      	strh	r3, [r2, #26]
	pdata->VL53LX_p_033 = 0x0000;
 800c0f6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	6153      	str	r3, [r2, #20]
	pdata->VL53LX_p_034          = 0x0000;
 800c0fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c0fe:	2300      	movs	r3, #0
 800c100:	8313      	strh	r3, [r2, #24]
	pdata->VL53LX_p_009    = 0x0000;
 800c102:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c104:	2300      	movs	r3, #0
 800c106:	6113      	str	r3, [r2, #16]
	pdata->VL53LX_p_028     = 0x0000;
 800c108:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c10a:	2300      	movs	r3, #0
 800c10c:	61d3      	str	r3, [r2, #28]
	pdata->VL53LX_p_035 = 0x0000;
 800c10e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c110:	2300      	movs	r3, #0
 800c112:	6213      	str	r3, [r2, #32]
	pdata->VL53LX_p_036             = 0;
 800c114:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c116:	2300      	movs	r3, #0
 800c118:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53LX_p_022            = 0;
 800c11a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c11c:	2300      	movs	r3, #0
 800c11e:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800c120:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c122:	2300      	movs	r3, #0
 800c124:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53LX_p_015        != 0) &&
 800c126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c128:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f000 80ab 	beq.w	800c288 <VL53LX_f_001+0x1cc>
		(pbins->total_periods_elapsed      != 0)) {
 800c132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53LX_p_015        != 0) &&
 800c138:	2b00      	cmp	r3, #0
 800c13a:	f000 80a5 	beq.w	800c288 <VL53LX_f_001+0x1cc>



		pll_period_us   =
			VL53LX_calc_pll_period_us(pbins->VL53LX_p_015);
 800c13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c140:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c144:	4618      	mov	r0, r3
 800c146:	f7ff fa30 	bl	800b5aa <VL53LX_calc_pll_period_us>
 800c14a:	6438      	str	r0, [r7, #64]	; 0x40



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800c14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c152:	3301      	adds	r3, #1
 800c154:	63fb      	str	r3, [r7, #60]	; 0x3c



		pdata->VL53LX_p_037  =
			VL53LX_duration_maths(
 800c156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c15c:	2110      	movs	r1, #16
 800c15e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c160:	f7ff fa3a 	bl	800b5d8 <VL53LX_duration_maths>
 800c164:	4602      	mov	r2, r0
		pdata->VL53LX_p_037  =
 800c166:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c168:	601a      	str	r2, [r3, #0]
				VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53LX_p_034 =
			VL53LX_rate_maths(
 800c16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4619      	mov	r1, r3
 800c176:	4610      	mov	r0, r2
 800c178:	f7ff fc97 	bl	800baaa <VL53LX_rate_maths>
 800c17c:	4603      	mov	r3, r0
		pdata->VL53LX_p_034 =
 800c17e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c180:	8313      	strh	r3, [r2, #24]
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_033   =
			VL53LX_events_per_spad_maths(
 800c182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c184:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800c188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18a:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800c18e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	461a      	mov	r2, r3
 800c194:	f7ff fa7a 	bl	800b68c <VL53LX_events_per_spad_maths>
 800c198:	4602      	mov	r2, r0
		pdata->VL53LX_p_033   =
 800c19a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c19c:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53LX_p_037);



		pdata->VL53LX_p_038 = pcfg->max_effective_spads;
 800c19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a0:	8adb      	ldrh	r3, [r3, #22]
 800c1a2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c1a4:	8193      	strh	r3, [r2, #12]
		pdata->VL53LX_p_004  = pcfg->max_effective_spads;
 800c1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a8:	8adb      	ldrh	r3, [r3, #22]
 800c1aa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c1ac:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53LX_p_033 > 0) {
 800c1ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1b0:	695b      	ldr	r3, [r3, #20]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d068      	beq.n	800c288 <VL53LX_f_001+0x1cc>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800c1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b8:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800c1ba:	b29a      	uxth	r2, r3
 800c1bc:	f04f 0300 	mov.w	r3, #0
 800c1c0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64  *= 1000;
 800c1c4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800c1c8:	4622      	mov	r2, r4
 800c1ca:	462b      	mov	r3, r5
 800c1cc:	f04f 0000 	mov.w	r0, #0
 800c1d0:	f04f 0100 	mov.w	r1, #0
 800c1d4:	0159      	lsls	r1, r3, #5
 800c1d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c1da:	0150      	lsls	r0, r2, #5
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	1b12      	subs	r2, r2, r4
 800c1e2:	eb63 0305 	sbc.w	r3, r3, r5
 800c1e6:	f04f 0000 	mov.w	r0, #0
 800c1ea:	f04f 0100 	mov.w	r1, #0
 800c1ee:	0099      	lsls	r1, r3, #2
 800c1f0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c1f4:	0090      	lsls	r0, r2, #2
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	1912      	adds	r2, r2, r4
 800c1fc:	eb45 0303 	adc.w	r3, r5, r3
 800c200:	f04f 0000 	mov.w	r0, #0
 800c204:	f04f 0100 	mov.w	r1, #0
 800c208:	00d9      	lsls	r1, r3, #3
 800c20a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c20e:	00d0      	lsls	r0, r2, #3
 800c210:	4602      	mov	r2, r0
 800c212:	460b      	mov	r3, r1
 800c214:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			tmp64 <<= (11+1);
 800c218:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c21c:	f04f 0000 	mov.w	r0, #0
 800c220:	f04f 0100 	mov.w	r1, #0
 800c224:	0319      	lsls	r1, r3, #12
 800c226:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800c22a:	0310      	lsls	r0, r2, #12
 800c22c:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
			tmp32 = pdata->VL53LX_p_033/2;
 800c230:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c232:	695b      	ldr	r3, [r3, #20]
 800c234:	085b      	lsrs	r3, r3, #1
 800c236:	657b      	str	r3, [r7, #84]	; 0x54
			tmp64 += (uint64_t)tmp32;
 800c238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c23a:	4618      	mov	r0, r3
 800c23c:	f04f 0100 	mov.w	r1, #0
 800c240:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c244:	eb12 0800 	adds.w	r8, r2, r0
 800c248:	eb43 0901 	adc.w	r9, r3, r1
 800c24c:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
			tmp64 = do_division_u(tmp64,
 800c250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c252:	695b      	ldr	r3, [r3, #20]
 800c254:	461a      	mov	r2, r3
 800c256:	f04f 0300 	mov.w	r3, #0
 800c25a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c25e:	f7f4 f85f 	bl	8000320 <__aeabi_uldivmod>
 800c262:	4602      	mov	r2, r0
 800c264:	460b      	mov	r3, r1
 800c266:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				(uint64_t)pdata->VL53LX_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800c26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26c:	8adb      	ldrh	r3, [r3, #22]
 800c26e:	b298      	uxth	r0, r3
 800c270:	f04f 0100 	mov.w	r1, #0
 800c274:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c278:	428b      	cmp	r3, r1
 800c27a:	bf08      	it	eq
 800c27c:	4282      	cmpeq	r2, r0
 800c27e:	d203      	bcs.n	800c288 <VL53LX_f_001+0x1cc>
				pdata->VL53LX_p_004 = (uint16_t)tmp64;
 800c280:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c284:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c286:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800c288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28a:	881b      	ldrh	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	f000 8203 	beq.w	800c698 <VL53LX_f_001+0x5dc>
		(pbins->VL53LX_p_015        != 0) &&
 800c292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c294:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f000 81fd 	beq.w	800c698 <VL53LX_f_001+0x5dc>
		(pcal->ref_reflectance_pc          != 0) &&
 800c29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a0:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53LX_p_015        != 0) &&
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f000 81f8 	beq.w	800c698 <VL53LX_f_001+0x5dc>
		(pbins->total_periods_elapsed      != 0)) {
 800c2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f000 81f2 	beq.w	800c698 <VL53LX_f_001+0x5dc>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800c2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b6:	885b      	ldrh	r3, [r3, #2]
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	f04f 0300 	mov.w	r3, #0
 800c2be:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64 *= (1000 * 256);
 800c2c2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800c2c6:	4622      	mov	r2, r4
 800c2c8:	462b      	mov	r3, r5
 800c2ca:	f04f 0000 	mov.w	r0, #0
 800c2ce:	f04f 0100 	mov.w	r1, #0
 800c2d2:	0159      	lsls	r1, r3, #5
 800c2d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c2d8:	0150      	lsls	r0, r2, #5
 800c2da:	4602      	mov	r2, r0
 800c2dc:	460b      	mov	r3, r1
 800c2de:	1b12      	subs	r2, r2, r4
 800c2e0:	eb63 0305 	sbc.w	r3, r3, r5
 800c2e4:	f04f 0000 	mov.w	r0, #0
 800c2e8:	f04f 0100 	mov.w	r1, #0
 800c2ec:	0099      	lsls	r1, r3, #2
 800c2ee:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c2f2:	0090      	lsls	r0, r2, #2
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	1912      	adds	r2, r2, r4
 800c2fa:	eb45 0303 	adc.w	r3, r5, r3
 800c2fe:	f04f 0000 	mov.w	r0, #0
 800c302:	f04f 0100 	mov.w	r1, #0
 800c306:	02d9      	lsls	r1, r3, #11
 800c308:	ea41 5152 	orr.w	r1, r1, r2, lsr #21
 800c30c:	02d0      	lsls	r0, r2, #11
 800c30e:	4602      	mov	r2, r0
 800c310:	460b      	mov	r3, r1
 800c312:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp32  = pcal->ref__actual_effective_spads/2;
 800c316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c318:	881b      	ldrh	r3, [r3, #0]
 800c31a:	085b      	lsrs	r3, r3, #1
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	657b      	str	r3, [r7, #84]	; 0x54
		tmp64 += (uint64_t)tmp32;
 800c320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c322:	4618      	mov	r0, r3
 800c324:	f04f 0100 	mov.w	r1, #0
 800c328:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c32c:	eb12 0a00 	adds.w	sl, r2, r0
 800c330:	eb43 0b01 	adc.w	fp, r3, r1
 800c334:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800c338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33a:	881b      	ldrh	r3, [r3, #0]
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	f04f 0300 	mov.w	r3, #0
 800c342:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c346:	f7f3 ffeb 	bl	8000320 <__aeabi_uldivmod>
 800c34a:	4602      	mov	r2, r0
 800c34c:	460b      	mov	r3, r1
 800c34e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53LX_p_009   = (uint32_t)tmp64;
 800c352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c356:	611a      	str	r2, [r3, #16]
		pdata->VL53LX_p_009 <<= 4;
 800c358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	011a      	lsls	r2, r3, #4
 800c35e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c360:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	461a      	mov	r2, r3
 800c368:	f04f 0300 	mov.w	r3, #0
 800c36c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_033;
 800c370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c372:	695b      	ldr	r3, [r3, #20]
 800c374:	461a      	mov	r2, r3
 800c376:	f04f 0300 	mov.w	r3, #0
 800c37a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c37c:	fb02 f001 	mul.w	r0, r2, r1
 800c380:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c382:	fb03 f101 	mul.w	r1, r3, r1
 800c386:	4401      	add	r1, r0
 800c388:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c38a:	fba0 2302 	umull	r2, r3, r0, r2
 800c38e:	4419      	add	r1, r3
 800c390:	460b      	mov	r3, r1
 800c392:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c396:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c39a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c39c:	8b5b      	ldrh	r3, [r3, #26]
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	f04f 0300 	mov.w	r3, #0
 800c3a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c3a6:	fb02 f001 	mul.w	r0, r2, r1
 800c3aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c3ac:	fb03 f101 	mul.w	r1, r3, r1
 800c3b0:	4401      	add	r1, r0
 800c3b2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c3b4:	fba0 2302 	umull	r2, r3, r0, r2
 800c3b8:	4419      	add	r1, r3
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c3c0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800c3c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c3c8:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800c3cc:	6239      	str	r1, [r7, #32]
 800c3ce:	f143 0300 	adc.w	r3, r3, #0
 800c3d2:	627b      	str	r3, [r7, #36]	; 0x24
 800c3d4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c3d8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800c3dc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c3e0:	f04f 0200 	mov.w	r2, #0
 800c3e4:	f04f 0300 	mov.w	r3, #0
 800c3e8:	0cc2      	lsrs	r2, r0, #19
 800c3ea:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800c3ee:	0ccb      	lsrs	r3, r1, #19
 800c3f0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  +=  500;
 800c3f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c3f8:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800c3fc:	61b9      	str	r1, [r7, #24]
 800c3fe:	f143 0300 	adc.w	r3, r3, #0
 800c402:	61fb      	str	r3, [r7, #28]
 800c404:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c408:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64   = do_division_u(tmp64, 1000);
 800c40c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c414:	f04f 0300 	mov.w	r3, #0
 800c418:	f7f3 ff82 	bl	8000320 <__aeabi_uldivmod>
 800c41c:	4602      	mov	r2, r0
 800c41e:	460b      	mov	r3, r1
 800c420:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800c424:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c428:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c42c:	f04f 0100 	mov.w	r1, #0
 800c430:	4299      	cmp	r1, r3
 800c432:	bf08      	it	eq
 800c434:	4290      	cmpeq	r0, r2
 800c436:	d205      	bcs.n	800c444 <VL53LX_f_001+0x388>
			tmp64 = 0x00FFFFFF;
 800c438:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c43c:	f04f 0300 	mov.w	r3, #0
 800c440:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_028     = (uint32_t)tmp64;
 800c444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c448:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53LX_p_037;
 800c44a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	461a      	mov	r2, r3
 800c450:	f04f 0300 	mov.w	r3, #0
 800c454:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_009;
 800c458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c45a:	691b      	ldr	r3, [r3, #16]
 800c45c:	461a      	mov	r2, r3
 800c45e:	f04f 0300 	mov.w	r3, #0
 800c462:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c464:	fb02 f001 	mul.w	r0, r2, r1
 800c468:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c46a:	fb03 f101 	mul.w	r1, r3, r1
 800c46e:	4401      	add	r1, r0
 800c470:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c472:	fba0 2302 	umull	r2, r3, r0, r2
 800c476:	4419      	add	r1, r3
 800c478:	460b      	mov	r3, r1
 800c47a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c47e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  *= (uint64_t)pdata->VL53LX_p_004;
 800c482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c484:	8b5b      	ldrh	r3, [r3, #26]
 800c486:	b29a      	uxth	r2, r3
 800c488:	f04f 0300 	mov.w	r3, #0
 800c48c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c48e:	fb02 f001 	mul.w	r0, r2, r1
 800c492:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c494:	fb03 f101 	mul.w	r1, r3, r1
 800c498:	4401      	add	r1, r0
 800c49a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c49c:	fba0 2302 	umull	r2, r3, r0, r2
 800c4a0:	4419      	add	r1, r3
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c4a8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		tmp64  += (1<<(11+7));
 800c4ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c4b0:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800c4b4:	6139      	str	r1, [r7, #16]
 800c4b6:	f143 0300 	adc.w	r3, r3, #0
 800c4ba:	617b      	str	r3, [r7, #20]
 800c4bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c4c0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64 >>= (11+8);
 800c4c4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c4c8:	f04f 0200 	mov.w	r2, #0
 800c4cc:	f04f 0300 	mov.w	r3, #0
 800c4d0:	0cc2      	lsrs	r2, r0, #19
 800c4d2:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800c4d6:	0ccb      	lsrs	r3, r1, #19
 800c4d8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48



		tmp64  *= ((uint64_t)target_reflectance *
 800c4dc:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 800c4de:	f04f 0100 	mov.w	r1, #0
				   (uint64_t)pcal->coverglass_transmission);
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e4:	891b      	ldrh	r3, [r3, #8]
 800c4e6:	b29a      	uxth	r2, r3
 800c4e8:	f04f 0300 	mov.w	r3, #0
		tmp64  *= ((uint64_t)target_reflectance *
 800c4ec:	fb02 f501 	mul.w	r5, r2, r1
 800c4f0:	fb00 f403 	mul.w	r4, r0, r3
 800c4f4:	442c      	add	r4, r5
 800c4f6:	fba0 2302 	umull	r2, r3, r0, r2
 800c4fa:	18e1      	adds	r1, r4, r3
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c500:	fb02 f001 	mul.w	r0, r2, r1
 800c504:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c506:	fb03 f101 	mul.w	r1, r3, r1
 800c50a:	4401      	add	r1, r0
 800c50c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c50e:	fba0 2302 	umull	r2, r3, r0, r2
 800c512:	4419      	add	r1, r3
 800c514:	460b      	mov	r3, r1
 800c516:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800c51a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800c51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c520:	88db      	ldrh	r3, [r3, #6]
 800c522:	b298      	uxth	r0, r3
 800c524:	f04f 0100 	mov.w	r1, #0
 800c528:	f04f 0200 	mov.w	r2, #0
 800c52c:	f04f 0300 	mov.w	r3, #0
 800c530:	01cb      	lsls	r3, r1, #7
 800c532:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 800c536:	01c2      	lsls	r2, r0, #7
 800c538:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c53c:	1884      	adds	r4, r0, r2
 800c53e:	60bc      	str	r4, [r7, #8]
 800c540:	eb41 0303 	adc.w	r3, r1, r3
 800c544:	60fb      	str	r3, [r7, #12]
 800c546:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c54a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64,
 800c54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c550:	88db      	ldrh	r3, [r3, #6]
 800c552:	b298      	uxth	r0, r3
 800c554:	f04f 0100 	mov.w	r1, #0
 800c558:	f04f 0200 	mov.w	r2, #0
 800c55c:	f04f 0300 	mov.w	r3, #0
 800c560:	020b      	lsls	r3, r1, #8
 800c562:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c566:	0202      	lsls	r2, r0, #8
 800c568:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c56c:	f7f3 fed8 	bl	8000320 <__aeabi_uldivmod>
 800c570:	4602      	mov	r2, r0
 800c572:	460b      	mov	r3, r1
 800c574:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800c578:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c57c:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800c580:	6039      	str	r1, [r7, #0]
 800c582:	f143 0300 	adc.w	r3, r3, #0
 800c586:	607b      	str	r3, [r7, #4]
 800c588:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c58c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		tmp64  = do_division_u(tmp64, 1000);
 800c590:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c594:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c598:	f04f 0300 	mov.w	r3, #0
 800c59c:	f7f3 fec0 	bl	8000320 <__aeabi_uldivmod>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48


		if (tmp64 > 0x00FFFFFF)
 800c5a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c5ac:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c5b0:	f04f 0100 	mov.w	r1, #0
 800c5b4:	4299      	cmp	r1, r3
 800c5b6:	bf08      	it	eq
 800c5b8:	4290      	cmpeq	r0, r2
 800c5ba:	d205      	bcs.n	800c5c8 <VL53LX_f_001+0x50c>
			tmp64 = 0x00FFFFFF;
 800c5bc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c5c0:	f04f 0300 	mov.w	r3, #0
 800c5c4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		pdata->VL53LX_p_035 = (uint32_t)tmp64;
 800c5c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5cc:	621a      	str	r2, [r3, #32]



		tmp32  = VL53LX_isqrt(pdata->VL53LX_p_028 << 8);
 800c5ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5d0:	69db      	ldr	r3, [r3, #28]
 800c5d2:	021b      	lsls	r3, r3, #8
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7ff f8e2 	bl	800b79e <VL53LX_isqrt>
 800c5da:	6578      	str	r0, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800c5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5de:	785b      	ldrb	r3, [r3, #1]
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5e4:	fb02 f303 	mul.w	r3, r2, r3
 800c5e8:	657b      	str	r3, [r7, #84]	; 0x54



		if (pdata->VL53LX_p_028 <
 800c5ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5ec:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800c5ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5f0:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53LX_p_028 <
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d20f      	bcs.n	800c616 <VL53LX_f_001+0x55a>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800c5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53LX_p_028;
 800c5fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5fe:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	63bb      	str	r3, [r7, #56]	; 0x38


			amb_thres_delta <<= 8;
 800c604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c606:	021b      	lsls	r3, r3, #8
 800c608:	63bb      	str	r3, [r7, #56]	; 0x38

			if (tmp32 < amb_thres_delta)
 800c60a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60e:	429a      	cmp	r2, r3
 800c610:	d201      	bcs.n	800c616 <VL53LX_f_001+0x55a>
				tmp32 = amb_thres_delta;
 800c612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c614:	657b      	str	r3, [r7, #84]	; 0x54
		}



		pdata->VL53LX_p_022 =
			(int16_t)VL53LX_f_002(
 800c616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c618:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53LX_p_035,
				(uint32_t)pcal->ref__distance_mm,
 800c61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61c:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c61e:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c622:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c624:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c626:	f000 f83e 	bl	800c6a6 <VL53LX_f_002>
 800c62a:	4603      	mov	r3, r0
 800c62c:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_022 =
 800c62e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c630:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53LX_p_035;
 800c632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c634:	6a1b      	ldr	r3, [r3, #32]
 800c636:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800c638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800c63e:	461a      	mov	r2, r3
 800c640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c642:	fb02 f303 	mul.w	r3, r2, r3
 800c646:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 += (1 << 3);
 800c648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c64a:	3308      	adds	r3, #8
 800c64c:	657b      	str	r3, [r7, #84]	; 0x54
		tmp32 /= (1 << 4);
 800c64e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c650:	091b      	lsrs	r3, r3, #4
 800c652:	657b      	str	r3, [r7, #84]	; 0x54

		pdata->VL53LX_p_036 =
			(int16_t)VL53LX_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800c654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c656:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53LX_f_002(
 800c658:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800c65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65c:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53LX_f_002(
 800c65e:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800c660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c662:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53LX_f_002(
 800c664:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c666:	f000 f81e 	bl	800c6a6 <VL53LX_f_002>
 800c66a:	4603      	mov	r3, r0
 800c66c:	b21a      	sxth	r2, r3
		pdata->VL53LX_p_036 =
 800c66e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c670:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53LX_p_036 < pdata->VL53LX_p_022)
 800c672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c674:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800c678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c67a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800c67e:	429a      	cmp	r2, r3
 800c680:	da05      	bge.n	800c68e <VL53LX_f_001+0x5d2>
			*pambient_dmax_mm = pdata->VL53LX_p_036;
 800c682:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c684:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800c688:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c68a:	801a      	strh	r2, [r3, #0]
 800c68c:	e004      	b.n	800c698 <VL53LX_f_001+0x5dc>
		else
			*pambient_dmax_mm = pdata->VL53LX_p_022;
 800c68e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c690:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800c694:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c696:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800c698:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47

}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3758      	adds	r7, #88	; 0x58
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c6a6 <VL53LX_f_002>:
uint32_t VL53LX_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800c6a6:	b580      	push	{r7, lr}
 800c6a8:	b086      	sub	sp, #24
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	60f8      	str	r0, [r7, #12]
 800c6ae:	60b9      	str	r1, [r7, #8]
 800c6b0:	607a      	str	r2, [r7, #4]
 800c6b2:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	fb03 f303 	mul.w	r3, r3, r3
 800c6c8:	693a      	ldr	r2, [r7, #16]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53LX_isqrt(tmp32);
 800c6ce:	6938      	ldr	r0, [r7, #16]
 800c6d0:	f7ff f865 	bl	800b79e <VL53LX_isqrt>
 800c6d4:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800c6d6:	693a      	ldr	r2, [r7, #16]
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	4413      	add	r3, r2
 800c6dc:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53LX_isqrt(ref_signal_events << 4);
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	011b      	lsls	r3, r3, #4
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7ff f85b 	bl	800b79e <VL53LX_isqrt>
 800c6e8:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	fb02 f303 	mul.w	r3, r2, r3
 800c6f2:	617b      	str	r3, [r7, #20]
	if (tmp32 != 0) {
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d009      	beq.n	800c70e <VL53LX_f_002+0x68>
		range_mm += (tmp32);
 800c6fa:	697a      	ldr	r2, [r7, #20]
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	4413      	add	r3, r2
 800c700:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	005b      	lsls	r3, r3, #1
 800c706:	697a      	ldr	r2, [r7, #20]
 800c708:	fbb2 f3f3 	udiv	r3, r2, r3
 800c70c:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800c70e:	697b      	ldr	r3, [r7, #20]

}
 800c710:	4618      	mov	r0, r3
 800c712:	3718      	adds	r7, #24
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <VL53LX_f_003>:
	level, VL53LX_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53LX_f_003(
	VL53LX_hist_gen3_algo_private_data_t   *palgo)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800c720:	2300      	movs	r3, #0
 800c722:	73fb      	strb	r3, [r7, #15]

	palgo->VL53LX_p_020              = VL53LX_HISTOGRAM_BUFFER_SIZE;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2218      	movs	r2, #24
 800c728:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019                = 0;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2200      	movs	r2, #0
 800c72e:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021           = 0;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_039         = 0;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2200      	movs	r2, #0
 800c73a:	711a      	strb	r2, [r3, #4]
	palgo->VL53LX_p_028   = 0;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	609a      	str	r2, [r3, #8]
	palgo->VL53LX_p_031 = 0;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	73fb      	strb	r3, [r7, #15]
 800c74e:	e01f      	b.n	800c790 <VL53LX_f_003+0x78>
		palgo->VL53LX_p_040[lb]      = 0;
 800c750:	7bfb      	ldrb	r3, [r7, #15]
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	4413      	add	r3, r2
 800c756:	2200      	movs	r2, #0
 800c758:	741a      	strb	r2, [r3, #16]
		palgo->VL53LX_p_041[lb] = 0;
 800c75a:	7bfb      	ldrb	r3, [r7, #15]
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	4413      	add	r3, r2
 800c760:	2200      	movs	r2, #0
 800c762:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53LX_p_042[lb]     = 0;
 800c766:	7bfb      	ldrb	r3, [r7, #15]
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	4413      	add	r3, r2
 800c76c:	2200      	movs	r2, #0
 800c76e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53LX_p_043[lb]      = 0;
 800c772:	7bfa      	ldrb	r2, [r7, #15]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	322e      	adds	r2, #46	; 0x2e
 800c778:	2100      	movs	r1, #0
 800c77a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53LX_p_018[lb]     = 0;
 800c77e:	7bfa      	ldrb	r2, [r7, #15]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	3246      	adds	r2, #70	; 0x46
 800c784:	2100      	movs	r1, #0
 800c786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53LX_p_019; lb < palgo->VL53LX_p_020; lb++) {
 800c78a:	7bfb      	ldrb	r3, [r7, #15]
 800c78c:	3301      	adds	r3, #1
 800c78e:	73fb      	strb	r3, [r7, #15]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	785b      	ldrb	r3, [r3, #1]
 800c794:	7bfa      	ldrb	r2, [r7, #15]
 800c796:	429a      	cmp	r2, r3
 800c798:	d3da      	bcc.n	800c750 <VL53LX_f_003+0x38>
	}

	palgo->VL53LX_p_044 = 0;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53LX_p_045               = VL53LX_D_001;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2208      	movs	r2, #8
 800c7a6:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53LX_p_046             = 0;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53LX_init_histogram_bin_data_struct(
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	2118      	movs	r1, #24
 800c7bc:	2000      	movs	r0, #0
 800c7be:	f7ff fb18 	bl	800bdf2 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_006));
	VL53LX_init_histogram_bin_data_struct(
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	2118      	movs	r1, #24
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	f7ff fb10 	bl	800bdf2 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_047));
	VL53LX_init_histogram_bin_data_struct(
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800c7d8:	461a      	mov	r2, r3
 800c7da:	2118      	movs	r1, #24
 800c7dc:	2000      	movs	r0, #0
 800c7de:	f7ff fb08 	bl	800bdf2 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_048));
	VL53LX_init_histogram_bin_data_struct(
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	2118      	movs	r1, #24
 800c7ec:	2000      	movs	r0, #0
 800c7ee:	f7ff fb00 	bl	800bdf2 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_049));
	VL53LX_init_histogram_bin_data_struct(
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	2118      	movs	r1, #24
 800c7fc:	2000      	movs	r0, #0
 800c7fe:	f7ff faf8 	bl	800bdf2 <VL53LX_init_histogram_bin_data_struct>
		0,
		VL53LX_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53LX_p_050));
}
 800c802:	bf00      	nop
 800c804:	3710      	adds	r7, #16
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}

0800c80a <VL53LX_f_006>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_histogram_bin_data_t           *pxtalk,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800c80a:	b5b0      	push	{r4, r5, r7, lr}
 800c80c:	b08c      	sub	sp, #48	; 0x30
 800c80e:	af00      	add	r7, sp, #0
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
 800c814:	461a      	mov	r2, r3
 800c816:	4603      	mov	r3, r0
 800c818:	81fb      	strh	r3, [r7, #14]
 800c81a:	4613      	mov	r3, r2
 800c81c:	737b      	strb	r3, [r7, #13]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800c81e:	2300      	movs	r3, #0
 800c820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  lb            = 0;
 800c824:	2300      	movs	r3, #0
 800c826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t  VL53LX_p_001            = 0;
 800c82a:	2300      	movs	r3, #0
 800c82c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int64_t  tmp          = 0;
 800c830:	f04f 0200 	mov.w	r2, #0
 800c834:	f04f 0300 	mov.w	r3, #0
 800c838:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int32_t  amb_events   = 0;
 800c83c:	2300      	movs	r3, #0
 800c83e:	617b      	str	r3, [r7, #20]
	int32_t  VL53LX_p_018       = 0;
 800c840:	2300      	movs	r3, #0
 800c842:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  samples      = 0;
 800c844:	2300      	movs	r3, #0
 800c846:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	palgo->VL53LX_p_020            = pbins->VL53LX_p_020;
 800c848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c84a:	7a5a      	ldrb	r2, [r3, #9]
 800c84c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c84e:	705a      	strb	r2, [r3, #1]
	palgo->VL53LX_p_019              = pbins->VL53LX_p_019;
 800c850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c852:	7a1a      	ldrb	r2, [r3, #8]
 800c854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c856:	701a      	strb	r2, [r3, #0]
	palgo->VL53LX_p_021         = pbins->VL53LX_p_021;
 800c858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c85a:	7a9a      	ldrb	r2, [r3, #10]
 800c85c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c85e:	709a      	strb	r2, [r3, #2]
	palgo->VL53LX_p_028 = pbins->VL53LX_p_028;
 800c860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c862:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c868:	609a      	str	r2, [r3, #8]



	palgo->VL53LX_p_030 =
			VL53LX_decode_vcsel_period(pbins->VL53LX_p_005);
 800c86a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c86c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c870:	4618      	mov	r0, r3
 800c872:	f7ff fa6d 	bl	800bd50 <VL53LX_decode_vcsel_period>
 800c876:	4603      	mov	r3, r0
 800c878:	461a      	mov	r2, r3
	palgo->VL53LX_p_030 =
 800c87a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c87c:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53LX_p_028;
 800c87e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c880:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c884:	461a      	mov	r2, r3
 800c886:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800c88a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800c88e:	89fa      	ldrh	r2, [r7, #14]
 800c890:	f04f 0300 	mov.w	r3, #0
 800c894:	69f9      	ldr	r1, [r7, #28]
 800c896:	fb02 f001 	mul.w	r0, r2, r1
 800c89a:	69b9      	ldr	r1, [r7, #24]
 800c89c:	fb03 f101 	mul.w	r1, r3, r1
 800c8a0:	4401      	add	r1, r0
 800c8a2:	69b8      	ldr	r0, [r7, #24]
 800c8a4:	fba0 2302 	umull	r2, r3, r0, r2
 800c8a8:	4419      	add	r1, r3
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800c8b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tmp += 2048;
 800c8b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c8b8:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 800c8bc:	f143 0500 	adc.w	r5, r3, #0
 800c8c0:	e9c7 4506 	strd	r4, r5, [r7, #24]
	tmp = do_division_s(tmp, 4096);
 800c8c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c8c8:	2a00      	cmp	r2, #0
 800c8ca:	f173 0100 	sbcs.w	r1, r3, #0
 800c8ce:	da06      	bge.n	800c8de <VL53LX_f_006+0xd4>
 800c8d0:	f640 70ff 	movw	r0, #4095	; 0xfff
 800c8d4:	f04f 0100 	mov.w	r1, #0
 800c8d8:	1812      	adds	r2, r2, r0
 800c8da:	eb41 0303 	adc.w	r3, r1, r3
 800c8de:	f04f 0000 	mov.w	r0, #0
 800c8e2:	f04f 0100 	mov.w	r1, #0
 800c8e6:	0b10      	lsrs	r0, r2, #12
 800c8e8:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800c8ec:	1319      	asrs	r1, r3, #12
 800c8ee:	e9c7 0106 	strd	r0, r1, [r7, #24]
	amb_events = (int32_t)tmp;
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	617b      	str	r3, [r7, #20]



	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c8fc:	e062      	b.n	800c9c4 <VL53LX_f_006+0x1ba>

		VL53LX_p_001 = lb >> 2;
 800c8fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c902:	089b      	lsrs	r3, r3, #2
 800c904:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		samples = (int32_t)pbins->bin_rep[VL53LX_p_001];
 800c908:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c90c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c90e:	4413      	add	r3, r2
 800c910:	7c9b      	ldrb	r3, [r3, #18]
 800c912:	613b      	str	r3, [r7, #16]

		if (samples > 0) {
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	2b00      	cmp	r3, #0
 800c918:	dd4f      	ble.n	800c9ba <VL53LX_f_006+0x1b0>

			if (lb < pxtalk->VL53LX_p_021 &&
 800c91a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c91c:	7a9b      	ldrb	r3, [r3, #10]
 800c91e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c922:	429a      	cmp	r2, r3
 800c924:	d20f      	bcs.n	800c946 <VL53LX_f_006+0x13c>
 800c926:	7b7b      	ldrb	r3, [r7, #13]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d00c      	beq.n	800c946 <VL53LX_f_006+0x13c>
				algo__crosstalk_compensation_enable > 0)
				VL53LX_p_018 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800c92c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c932:	3206      	adds	r2, #6
 800c934:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53LX_p_018 = samples * (amb_events +
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	441a      	add	r2, r3
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	fb02 f303 	mul.w	r3, r2, r3
 800c942:	62bb      	str	r3, [r7, #40]	; 0x28
 800c944:	e004      	b.n	800c950 <VL53LX_f_006+0x146>
			else
				VL53LX_p_018 = samples *  amb_events;
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	697a      	ldr	r2, [r7, #20]
 800c94a:	fb02 f303 	mul.w	r3, r2, r3
 800c94e:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018  = VL53LX_isqrt(VL53LX_p_018);
 800c950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c952:	4618      	mov	r0, r3
 800c954:	f7fe ff23 	bl	800b79e <VL53LX_isqrt>
 800c958:	4603      	mov	r3, r0
 800c95a:	62bb      	str	r3, [r7, #40]	; 0x28

			VL53LX_p_018 += (samples/2);
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	0fda      	lsrs	r2, r3, #31
 800c960:	4413      	add	r3, r2
 800c962:	105b      	asrs	r3, r3, #1
 800c964:	461a      	mov	r2, r3
 800c966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c968:	4413      	add	r3, r2
 800c96a:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= samples;
 800c96c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	fb92 f3f3 	sdiv	r3, r2, r3
 800c974:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 *= ambient_threshold_sigma;
 800c976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c978:	68ba      	ldr	r2, [r7, #8]
 800c97a:	fb02 f303 	mul.w	r3, r2, r3
 800c97e:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += 8;
 800c980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c982:	3308      	adds	r3, #8
 800c984:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 /= 16;
 800c986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c988:	2b00      	cmp	r3, #0
 800c98a:	da00      	bge.n	800c98e <VL53LX_f_006+0x184>
 800c98c:	330f      	adds	r3, #15
 800c98e:	111b      	asrs	r3, r3, #4
 800c990:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53LX_p_018 += amb_events;
 800c992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	4413      	add	r3, r2
 800c998:	62bb      	str	r3, [r7, #40]	; 0x28

			if (VL53LX_p_018 < min_ambient_threshold_events)
 800c99a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	da01      	bge.n	800c9a6 <VL53LX_f_006+0x19c>
				VL53LX_p_018 = min_ambient_threshold_events;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	62bb      	str	r3, [r7, #40]	; 0x28

			palgo->VL53LX_p_052[lb]             = VL53LX_p_018;
 800c9a6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c9aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ac:	3216      	adds	r2, #22
 800c9ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53LX_p_031 = VL53LX_p_018;
 800c9b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9b8:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53LX_p_021; lb++) {
 800c9ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c9be:	3301      	adds	r3, #1
 800c9c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c9c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9c6:	7a9b      	ldrb	r3, [r3, #10]
 800c9c8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d396      	bcc.n	800c8fe <VL53LX_f_006+0xf4>

	}



	palgo->VL53LX_p_039 = 0;
 800c9d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800c9d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9d8:	7a1b      	ldrb	r3, [r3, #8]
 800c9da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c9de:	e033      	b.n	800ca48 <VL53LX_f_006+0x23e>

		if (pbins->bin_data[lb] > palgo->VL53LX_p_052[lb]) {
 800c9e0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c9e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9e6:	3206      	adds	r2, #6
 800c9e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c9ec:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800c9f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9f2:	3116      	adds	r1, #22
 800c9f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	dd13      	ble.n	800ca24 <VL53LX_f_006+0x21a>
			palgo->VL53LX_p_040[lb]      = 1;
 800c9fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca02:	4413      	add	r3, r2
 800ca04:	2201      	movs	r2, #1
 800ca06:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 1;
 800ca08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca0e:	4413      	add	r3, r2
 800ca10:	2201      	movs	r2, #1
 800ca12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53LX_p_039++;
 800ca16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca18:	791b      	ldrb	r3, [r3, #4]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	b2da      	uxtb	r2, r3
 800ca1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca20:	711a      	strb	r2, [r3, #4]
 800ca22:	e00c      	b.n	800ca3e <VL53LX_f_006+0x234>
		} else {
			palgo->VL53LX_p_040[lb]      = 0;
 800ca24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca2a:	4413      	add	r3, r2
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	741a      	strb	r2, [r3, #16]
			palgo->VL53LX_p_041[lb] = 0;
 800ca30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca36:	4413      	add	r3, r2
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53LX_p_019; lb < pbins->VL53LX_p_021; lb++) {
 800ca3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ca42:	3301      	adds	r3, #1
 800ca44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ca48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca4a:	7a9b      	ldrb	r3, [r3, #10]
 800ca4c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d3c5      	bcc.n	800c9e0 <VL53LX_f_006+0x1d6>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800ca54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3730      	adds	r7, #48	; 0x30
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bdb0      	pop	{r4, r5, r7, pc}

0800ca60 <VL53LX_f_007>:



VL53LX_Error VL53LX_f_007(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b085      	sub	sp, #20
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800ca70:	2300      	movs	r3, #0
 800ca72:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800ca74:	2300      	movs	r3, #0
 800ca76:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53LX_p_044 = 0;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800ca80:	2300      	movs	r3, #0
 800ca82:	73fb      	strb	r3, [r7, #15]
 800ca84:	e02d      	b.n	800cae2 <VL53LX_f_007+0x82>

		j = (i + 1) % palgo->VL53LX_p_030;
 800ca86:	7bfb      	ldrb	r3, [r7, #15]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	78d2      	ldrb	r2, [r2, #3]
 800ca8e:	fb93 f1f2 	sdiv	r1, r3, r2
 800ca92:	fb02 f201 	mul.w	r2, r2, r1
 800ca96:	1a9b      	subs	r3, r3, r2
 800ca98:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	789b      	ldrb	r3, [r3, #2]
 800ca9e:	7bfa      	ldrb	r2, [r7, #15]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d21b      	bcs.n	800cadc <VL53LX_f_007+0x7c>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	789b      	ldrb	r3, [r3, #2]
 800caa8:	7b3a      	ldrb	r2, [r7, #12]
 800caaa:	429a      	cmp	r2, r3
 800caac:	d216      	bcs.n	800cadc <VL53LX_f_007+0x7c>
			if (palgo->VL53LX_p_041[i] == 0 &&
 800caae:	7bfb      	ldrb	r3, [r7, #15]
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	4413      	add	r3, r2
 800cab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d10f      	bne.n	800cadc <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800cabc:	7b3b      	ldrb	r3, [r7, #12]
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	4413      	add	r3, r2
 800cac2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d108      	bne.n	800cadc <VL53LX_f_007+0x7c>
				palgo->VL53LX_p_041[j] == 1 &&
 800caca:	7bbb      	ldrb	r3, [r7, #14]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d105      	bne.n	800cadc <VL53LX_f_007+0x7c>
				found == 0) {
				palgo->VL53LX_p_044 = i;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	7bfa      	ldrb	r2, [r7, #15]
 800cad4:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800cad8:	2301      	movs	r3, #1
 800cada:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53LX_p_030; i++) {
 800cadc:	7bfb      	ldrb	r3, [r7, #15]
 800cade:	3301      	adds	r3, #1
 800cae0:	73fb      	strb	r3, [r7, #15]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	78db      	ldrb	r3, [r3, #3]
 800cae6:	7bfa      	ldrb	r2, [r7, #15]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d3cc      	bcc.n	800ca86 <VL53LX_f_007+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800caec:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3714      	adds	r7, #20
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <VL53LX_f_008>:


VL53LX_Error VL53LX_f_008(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b085      	sub	sp, #20
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cb04:	2300      	movs	r3, #0
 800cb06:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800cb10:	2300      	movs	r3, #0
 800cb12:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53LX_p_044;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800cb1a:	73fb      	strb	r3, [r7, #15]
 800cb1c:	e05a      	b.n	800cbd4 <VL53LX_f_008+0xd8>
		palgo->VL53LX_p_030);
		lb++) {



		i =  lb      % palgo->VL53LX_p_030;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	78da      	ldrb	r2, [r3, #3]
 800cb22:	7bfb      	ldrb	r3, [r7, #15]
 800cb24:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb28:	fb02 f201 	mul.w	r2, r2, r1
 800cb2c:	1a9b      	subs	r3, r3, r2
 800cb2e:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53LX_p_030;
 800cb30:	7bfb      	ldrb	r3, [r7, #15]
 800cb32:	3301      	adds	r3, #1
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	78d2      	ldrb	r2, [r2, #3]
 800cb38:	fb93 f1f2 	sdiv	r1, r3, r2
 800cb3c:	fb02 f201 	mul.w	r2, r2, r1
 800cb40:	1a9b      	subs	r3, r3, r2
 800cb42:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53LX_p_021 && j < palgo->VL53LX_p_021) {
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	789b      	ldrb	r3, [r3, #2]
 800cb48:	7b7a      	ldrb	r2, [r7, #13]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d23f      	bcs.n	800cbce <VL53LX_f_008+0xd2>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	789b      	ldrb	r3, [r3, #2]
 800cb52:	7b3a      	ldrb	r2, [r7, #12]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d23a      	bcs.n	800cbce <VL53LX_f_008+0xd2>

			if (palgo->VL53LX_p_041[i] == 0 &&
 800cb58:	7b7b      	ldrb	r3, [r7, #13]
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d10e      	bne.n	800cb84 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_041[j] == 1)
 800cb66:	7b3b      	ldrb	r3, [r7, #12]
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	4413      	add	r3, r2
 800cb6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53LX_p_041[i] == 0 &&
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d107      	bne.n	800cb84 <VL53LX_f_008+0x88>
				palgo->VL53LX_p_046++;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	b2da      	uxtb	r2, r3
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_046 > palgo->VL53LX_p_045)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d905      	bls.n	800cba0 <VL53LX_f_008+0xa4>
				palgo->VL53LX_p_046 = palgo->VL53LX_p_045;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53LX_p_041[i] > 0)
 800cba0:	7b7b      	ldrb	r3, [r7, #13]
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	4413      	add	r3, r2
 800cba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d009      	beq.n	800cbc2 <VL53LX_f_008+0xc6>
				palgo->VL53LX_p_042[i] = palgo->VL53LX_p_046;
 800cbae:	7b7b      	ldrb	r3, [r7, #13]
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	4413      	add	r3, r2
 800cbba:	460a      	mov	r2, r1
 800cbbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cbc0:	e005      	b.n	800cbce <VL53LX_f_008+0xd2>
			else
				palgo->VL53LX_p_042[i] = 0;
 800cbc2:	7b7b      	ldrb	r3, [r7, #13]
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	4413      	add	r3, r2
 800cbc8:	2200      	movs	r2, #0
 800cbca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800cbce:	7bfb      	ldrb	r3, [r7, #15]
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53LX_p_044 +
 800cbd4:	7bfa      	ldrb	r2, [r7, #15]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800cbdc:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800cbe2:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	db9a      	blt.n	800cb1e <VL53LX_f_008+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800cbe8:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3714      	adds	r7, #20
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <VL53LX_f_009>:


VL53LX_Error VL53LX_f_009(
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b087      	sub	sp, #28
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cc00:	2300      	movs	r3, #0
 800cc02:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800cc04:	2300      	movs	r3, #0
 800cc06:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800cc10:	2300      	movs	r3, #0
 800cc12:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800cc14:	2300      	movs	r3, #0
 800cc16:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53LX_p_030 - 1;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	78db      	ldrb	r3, [r3, #3]
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800cc20:	7cbb      	ldrb	r3, [r7, #18]
 800cc22:	085b      	lsrs	r3, r3, #1
 800cc24:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53LX_p_044;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800cc2c:	75fb      	strb	r3, [r7, #23]
 800cc2e:	e0a2      	b.n	800cd76 <VL53LX_f_009+0x17e>
		palgo->VL53LX_p_030);
		blb++) {



		i =  blb      % palgo->VL53LX_p_030;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	78da      	ldrb	r2, [r3, #3]
 800cc34:	7dfb      	ldrb	r3, [r7, #23]
 800cc36:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc3a:	fb02 f201 	mul.w	r2, r2, r1
 800cc3e:	1a9b      	subs	r3, r3, r2
 800cc40:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53LX_p_030;
 800cc42:	7dfb      	ldrb	r3, [r7, #23]
 800cc44:	3301      	adds	r3, #1
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	78d2      	ldrb	r2, [r2, #3]
 800cc4a:	fb93 f1f2 	sdiv	r1, r3, r2
 800cc4e:	fb02 f201 	mul.w	r2, r2, r1
 800cc52:	1a9b      	subs	r3, r3, r2
 800cc54:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53LX_p_021 &&
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	789b      	ldrb	r3, [r3, #2]
 800cc5a:	7d7a      	ldrb	r2, [r7, #21]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	f080 8087 	bcs.w	800cd70 <VL53LX_f_009+0x178>
				j < palgo->VL53LX_p_021) {
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53LX_p_021 &&
 800cc66:	7d3a      	ldrb	r2, [r7, #20]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	f080 8081 	bcs.w	800cd70 <VL53LX_f_009+0x178>



			if (palgo->VL53LX_p_042[i] == 0 &&
 800cc6e:	7d7b      	ldrb	r3, [r7, #21]
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	4413      	add	r3, r2
 800cc74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d12f      	bne.n	800ccdc <VL53LX_f_009+0xe4>
					palgo->VL53LX_p_042[j] > 0) {
 800cc7c:	7d3b      	ldrb	r3, [r7, #20]
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	4413      	add	r3, r2
 800cc82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53LX_p_042[i] == 0 &&
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d028      	beq.n	800ccdc <VL53LX_f_009+0xe4>

				pulse_no = palgo->VL53LX_p_042[j] - 1;
 800cc8a:	7d3b      	ldrb	r3, [r7, #20]
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	4413      	add	r3, r2
 800cc90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cc94:	3b01      	subs	r3, #1
 800cc96:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800cc9e:	7cfa      	ldrb	r2, [r7, #19]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d21b      	bcs.n	800ccdc <VL53LX_f_009+0xe4>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800cca4:	7cfa      	ldrb	r2, [r7, #19]
 800cca6:	4613      	mov	r3, r2
 800cca8:	00db      	lsls	r3, r3, #3
 800ccaa:	4413      	add	r3, r2
 800ccac:	009b      	lsls	r3, r3, #2
 800ccae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ccb2:	687a      	ldr	r2, [r7, #4]
 800ccb4:	4413      	add	r3, r2
 800ccb6:	3304      	adds	r3, #4
 800ccb8:	60fb      	str	r3, [r7, #12]
					pdata->VL53LX_p_012 = blb;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	7dfa      	ldrb	r2, [r7, #23]
 800ccbe:	701a      	strb	r2, [r3, #0]
					pdata->VL53LX_p_019    = blb + 1;
 800ccc0:	7dfb      	ldrb	r3, [r7, #23]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	b2da      	uxtb	r2, r3
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	705a      	strb	r2, [r3, #1]
					pdata->VL53LX_p_023   = 0xFF;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	22ff      	movs	r2, #255	; 0xff
 800ccce:	709a      	strb	r2, [r3, #2]
					pdata->VL53LX_p_024     = 0;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013   = 0;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53LX_p_042[i] > 0
 800ccdc:	7d7b      	ldrb	r3, [r7, #21]
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	4413      	add	r3, r2
 800cce2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d042      	beq.n	800cd70 <VL53LX_f_009+0x178>
				&& palgo->VL53LX_p_042[j] == 0) {
 800ccea:	7d3b      	ldrb	r3, [r7, #20]
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	4413      	add	r3, r2
 800ccf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d13b      	bne.n	800cd70 <VL53LX_f_009+0x178>

				pulse_no = palgo->VL53LX_p_042[i] - 1;
 800ccf8:	7d7b      	ldrb	r3, [r7, #21]
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd02:	3b01      	subs	r3, #1
 800cd04:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53LX_p_045) {
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800cd0c:	7cfa      	ldrb	r2, [r7, #19]
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d22e      	bcs.n	800cd70 <VL53LX_f_009+0x178>
					pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800cd12:	7cfa      	ldrb	r2, [r7, #19]
 800cd14:	4613      	mov	r3, r2
 800cd16:	00db      	lsls	r3, r3, #3
 800cd18:	4413      	add	r3, r2
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	4413      	add	r3, r2
 800cd24:	3304      	adds	r3, #4
 800cd26:	60fb      	str	r3, [r7, #12]

					pdata->VL53LX_p_024    = blb;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	7dfa      	ldrb	r2, [r7, #23]
 800cd2c:	70da      	strb	r2, [r3, #3]
					pdata->VL53LX_p_013  = blb + 1;
 800cd2e:	7dfb      	ldrb	r3, [r7, #23]
 800cd30:	3301      	adds	r3, #1
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	711a      	strb	r2, [r3, #4]

					pdata->VL53LX_p_025 =
						(pdata->VL53LX_p_024 + 1) -
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53LX_p_019;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53LX_p_024 + 1) -
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	3301      	adds	r3, #1
 800cd46:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_025 =
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	715a      	strb	r2, [r3, #5]
					pdata->VL53LX_p_051 =
						(pdata->VL53LX_p_013 + 1) -
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53LX_p_012;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53LX_p_013 + 1) -
 800cd54:	1ad3      	subs	r3, r2, r3
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	3301      	adds	r3, #1
 800cd5a:	b2da      	uxtb	r2, r3
					pdata->VL53LX_p_051 =
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53LX_p_051 >
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	799b      	ldrb	r3, [r3, #6]
 800cd64:	7cba      	ldrb	r2, [r7, #18]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d202      	bcs.n	800cd70 <VL53LX_f_009+0x178>
						max_filter_half_width)
						pdata->VL53LX_p_051 =
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	7cba      	ldrb	r2, [r7, #18]
 800cd6e:	719a      	strb	r2, [r3, #6]
		blb++) {
 800cd70:	7dfb      	ldrb	r3, [r7, #23]
 800cd72:	3301      	adds	r3, #1
 800cd74:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53LX_p_044 +
 800cd76:	7dfa      	ldrb	r2, [r7, #23]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800cd7e:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53LX_p_044 +
 800cd84:	440b      	add	r3, r1
	for (blb = palgo->VL53LX_p_044;
 800cd86:	429a      	cmp	r2, r3
 800cd88:	f6ff af52 	blt.w	800cc30 <VL53LX_f_009+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800cd8c:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800cd90:	4618      	mov	r0, r3
 800cd92:	371c      	adds	r7, #28
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <VL53LX_f_016>:


VL53LX_Error VL53LX_f_016(
	VL53LX_HistTargetOrder                target_order,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b090      	sub	sp, #64	; 0x40
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	4603      	mov	r3, r0
 800cda4:	6039      	str	r1, [r7, #0]
 800cda6:	71fb      	strb	r3, [r7, #7]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53LX_hist_pulse_data_t  tmp;
	VL53LX_hist_pulse_data_t *ptmp = &tmp;
 800cdae:	f107 030c 	add.w	r3, r7, #12
 800cdb2:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53LX_hist_pulse_data_t *p0;
	VL53LX_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53LX_p_046 > 1))
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d965      	bls.n	800ce96 <VL53LX_f_016+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800cdca:	e05f      	b.n	800ce8c <VL53LX_f_016+0xf0>

		swapped = 0;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cdd8:	e051      	b.n	800ce7e <VL53LX_f_016+0xe2>

			p0 = &(palgo->VL53LX_p_003[i-1]);
 800cdda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cdde:	1e5a      	subs	r2, r3, #1
 800cde0:	4613      	mov	r3, r2
 800cde2:	00db      	lsls	r3, r3, #3
 800cde4:	4413      	add	r3, r2
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cdec:	683a      	ldr	r2, [r7, #0]
 800cdee:	4413      	add	r3, r2
 800cdf0:	3304      	adds	r3, #4
 800cdf2:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53LX_p_003[i]);
 800cdf4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800cdf8:	4613      	mov	r3, r2
 800cdfa:	00db      	lsls	r3, r3, #3
 800cdfc:	4413      	add	r3, r2
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ce04:	683a      	ldr	r2, [r7, #0]
 800ce06:	4413      	add	r3, r2
 800ce08:	3304      	adds	r3, #4
 800ce0a:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 800ce0c:	79fb      	ldrb	r3, [r7, #7]
 800ce0e:	2b02      	cmp	r3, #2
 800ce10:	d118      	bne.n	800ce44 <VL53LX_f_016+0xa8>
			== VL53LX_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53LX_p_010 <
 800ce12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce14:	691a      	ldr	r2, [r3, #16]
						p1->VL53LX_p_010) {
 800ce16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce18:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53LX_p_010 <
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	da2a      	bge.n	800ce74 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800ce1e:	2224      	movs	r2, #36	; 0x24
 800ce20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce24:	f007 fac2 	bl	80143ac <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800ce28:	2224      	movs	r2, #36	; 0x24
 800ce2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ce2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce2e:	f007 fabd 	bl	80143ac <memcpy>
					p0, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800ce32:	2224      	movs	r2, #36	; 0x24
 800ce34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ce38:	f007 fab8 	bl	80143ac <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800ce42:	e017      	b.n	800ce74 <VL53LX_f_016+0xd8>
				}

			} else {

				if (p0->VL53LX_p_011 > p1->VL53LX_p_011) {
 800ce44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce46:	699a      	ldr	r2, [r3, #24]
 800ce48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4a:	699b      	ldr	r3, [r3, #24]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d911      	bls.n	800ce74 <VL53LX_f_016+0xd8>



					memcpy(ptmp,
 800ce50:	2224      	movs	r2, #36	; 0x24
 800ce52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce56:	f007 faa9 	bl	80143ac <memcpy>
					p1, sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p1,
 800ce5a:	2224      	movs	r2, #36	; 0x24
 800ce5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ce5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce60:	f007 faa4 	bl	80143ac <memcpy>
					p0,   sizeof(VL53LX_hist_pulse_data_t));
					memcpy(p0,
 800ce64:	2224      	movs	r2, #36	; 0x24
 800ce66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ce6a:	f007 fa9f 	bl	80143ac <memcpy>
					ptmp, sizeof(VL53LX_hist_pulse_data_t));

					swapped = 1;
 800ce6e:	2301      	movs	r3, #1
 800ce70:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53LX_p_046; i++) {
 800ce74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ce78:	3301      	adds	r3, #1
 800ce7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800ce84:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d3a6      	bcc.n	800cdda <VL53LX_f_016+0x3e>
	while (swapped > 0) {
 800ce8c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d19b      	bne.n	800cdcc <VL53LX_f_016+0x30>

			}
		}
	}

ENDFUNC:
 800ce94:	e000      	b.n	800ce98 <VL53LX_f_016+0xfc>
		goto ENDFUNC;
 800ce96:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800ce98:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3740      	adds	r7, #64	; 0x40
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <VL53LX_f_010>:

VL53LX_Error VL53LX_f_010(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b087      	sub	sp, #28
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	4603      	mov	r3, r0
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]
 800ceb0:	73fb      	strb	r3, [r7, #15]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800ceba:	2300      	movs	r3, #0
 800cebc:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800cebe:	7bfa      	ldrb	r2, [r7, #15]
 800cec0:	4613      	mov	r3, r2
 800cec2:	00db      	lsls	r3, r3, #3
 800cec4:	4413      	add	r3, r2
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	4413      	add	r3, r2
 800ced0:	3304      	adds	r3, #4
 800ced2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53LX_p_017  = 0;
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	2200      	movs	r2, #0
 800ced8:	60da      	str	r2, [r3, #12]
	pdata->VL53LX_p_016 = 0;
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	2200      	movs	r2, #0
 800cede:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	75fb      	strb	r3, [r7, #23]
 800cee6:	e01c      	b.n	800cf22 <VL53LX_f_010+0x7e>
		i =  lb % palgo->VL53LX_p_030;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	78da      	ldrb	r2, [r3, #3]
 800ceec:	7dfb      	ldrb	r3, [r7, #23]
 800ceee:	fbb3 f1f2 	udiv	r1, r3, r2
 800cef2:	fb02 f201 	mul.w	r2, r2, r1
 800cef6:	1a9b      	subs	r3, r3, r2
 800cef8:	757b      	strb	r3, [r7, #21]
		pdata->VL53LX_p_017  += pbins->bin_data[i];
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	68da      	ldr	r2, [r3, #12]
 800cefe:	7d79      	ldrb	r1, [r7, #21]
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	3106      	adds	r1, #6
 800cf04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf08:	441a      	add	r2, r3
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	60da      	str	r2, [r3, #12]
		pdata->VL53LX_p_016 += palgo->VL53LX_p_028;
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	689a      	ldr	r2, [r3, #8]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	441a      	add	r2, r3
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800cf1c:	7dfb      	ldrb	r3, [r7, #23]
 800cf1e:	3301      	adds	r3, #1
 800cf20:	75fb      	strb	r3, [r7, #23]
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	791b      	ldrb	r3, [r3, #4]
 800cf26:	7dfa      	ldrb	r2, [r7, #23]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d9dd      	bls.n	800cee8 <VL53LX_f_010+0x44>
	}



	pdata->VL53LX_p_010 =
		pdata->VL53LX_p_017 - pdata->VL53LX_p_016;
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	68da      	ldr	r2, [r3, #12]
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	689b      	ldr	r3, [r3, #8]
 800cf34:	1ad2      	subs	r2, r2, r3
	pdata->VL53LX_p_010 =
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800cf3a:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	371c      	adds	r7, #28
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr

0800cf4a <VL53LX_f_015>:
VL53LX_Error VL53LX_f_015(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo)
{
 800cf4a:	b590      	push	{r4, r7, lr}
 800cf4c:	b08d      	sub	sp, #52	; 0x34
 800cf4e:	af02      	add	r7, sp, #8
 800cf50:	60ba      	str	r2, [r7, #8]
 800cf52:	607b      	str	r3, [r7, #4]
 800cf54:	4603      	mov	r3, r0
 800cf56:	73fb      	strb	r3, [r7, #15]
 800cf58:	460b      	mov	r3, r1
 800cf5a:	73bb      	strb	r3, [r7, #14]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 800cf62:	2300      	movs	r3, #0
 800cf64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53LX_p_012 = 0;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	843b      	strh	r3, [r7, #32]
	int16_t   VL53LX_p_013   = 0;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800cf70:	2300      	movs	r3, #0
 800cf72:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 800cf74:	2300      	movs	r3, #0
 800cf76:	61bb      	str	r3, [r7, #24]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800cf78:	7bfa      	ldrb	r2, [r7, #15]
 800cf7a:	4613      	mov	r3, r2
 800cf7c:	00db      	lsls	r3, r3, #3
 800cf7e:	4413      	add	r3, r2
 800cf80:	009b      	lsls	r3, r3, #2
 800cf82:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	4413      	add	r3, r2
 800cf8a:	3304      	adds	r3, #4
 800cf8c:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53LX_p_023 == 0xFF)
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	789b      	ldrb	r3, [r3, #2]
 800cf92:	2bff      	cmp	r3, #255	; 0xff
 800cf94:	d102      	bne.n	800cf9c <VL53LX_f_015+0x52>
		pdata->VL53LX_p_023 = 1;
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53LX_p_023 % palgo->VL53LX_p_030;
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	789b      	ldrb	r3, [r3, #2]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	78d2      	ldrb	r2, [r2, #3]
 800cfa4:	fbb3 f1f2 	udiv	r1, r3, r2
 800cfa8:	fb02 f201 	mul.w	r2, r2, r1
 800cfac:	1a9b      	subs	r3, r3, r2
 800cfae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53LX_p_012  = (int16_t)i;
 800cfb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cfb6:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 += (int16_t)pdata->VL53LX_p_012;
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	b29a      	uxth	r2, r3
 800cfbe:	8c3b      	ldrh	r3, [r7, #32]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	843b      	strh	r3, [r7, #32]
	VL53LX_p_012 -= (int16_t)pdata->VL53LX_p_023;
 800cfc6:	8c3a      	ldrh	r2, [r7, #32]
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	789b      	ldrb	r3, [r3, #2]
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	1ad3      	subs	r3, r2, r3
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	843b      	strh	r3, [r7, #32]

	VL53LX_p_013    = (int16_t)i;
 800cfd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cfd8:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   += (int16_t)pdata->VL53LX_p_013;
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	791b      	ldrb	r3, [r3, #4]
 800cfde:	b29a      	uxth	r2, r3
 800cfe0:	8bfb      	ldrh	r3, [r7, #30]
 800cfe2:	4413      	add	r3, r2
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	83fb      	strh	r3, [r7, #30]
	VL53LX_p_013   -= (int16_t)pdata->VL53LX_p_023;
 800cfe8:	8bfa      	ldrh	r2, [r7, #30]
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	789b      	ldrb	r3, [r3, #2]
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	1ad3      	subs	r3, r2, r3
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	83fb      	strh	r3, [r7, #30]


	window_width = VL53LX_p_013 - VL53LX_p_012;
 800cff6:	8bfa      	ldrh	r2, [r7, #30]
 800cff8:	8c3b      	ldrh	r3, [r7, #32]
 800cffa:	1ad3      	subs	r3, r2, r3
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 800d000:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d004:	2b03      	cmp	r3, #3
 800d006:	dd01      	ble.n	800d00c <VL53LX_f_015+0xc2>
		window_width = 3;
 800d008:	2303      	movs	r3, #3
 800d00a:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53LX_f_020(
			VL53LX_p_012,
			VL53LX_p_012 + window_width,
 800d00c:	8c3a      	ldrh	r2, [r7, #32]
 800d00e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d010:	4413      	add	r3, r2
 800d012:	b29b      	uxth	r3, r3
		VL53LX_f_020(
 800d014:	b219      	sxth	r1, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	78da      	ldrb	r2, [r3, #3]
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	3314      	adds	r3, #20
 800d01e:	7bbc      	ldrb	r4, [r7, #14]
 800d020:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800d024:	9301      	str	r3, [sp, #4]
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	9300      	str	r3, [sp, #0]
 800d02a:	4623      	mov	r3, r4
 800d02c:	f000 f846 	bl	800d0bc <VL53LX_f_020>
 800d030:	4603      	mov	r3, r0
 800d032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53LX_p_026));


	if (status == VL53LX_ERROR_NONE)
 800d036:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d114      	bne.n	800d068 <VL53LX_f_015+0x11e>
		status =
			VL53LX_f_020(
				VL53LX_p_013 - window_width,
 800d03e:	8bfa      	ldrh	r2, [r7, #30]
 800d040:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d042:	1ad3      	subs	r3, r2, r3
 800d044:	b29b      	uxth	r3, r3
			VL53LX_f_020(
 800d046:	b218      	sxth	r0, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	78da      	ldrb	r2, [r3, #3]
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	331c      	adds	r3, #28
 800d050:	7bbc      	ldrb	r4, [r7, #14]
 800d052:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800d056:	9301      	str	r3, [sp, #4]
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	9300      	str	r3, [sp, #0]
 800d05c:	4623      	mov	r3, r4
 800d05e:	f000 f82d 	bl	800d0bc <VL53LX_f_020>
 800d062:	4603      	mov	r3, r0
 800d064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53LX_p_027));


	if (pdata->VL53LX_p_026 > pdata->VL53LX_p_027) {
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	695a      	ldr	r2, [r3, #20]
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	69db      	ldr	r3, [r3, #28]
 800d070:	429a      	cmp	r2, r3
 800d072:	d909      	bls.n	800d088 <VL53LX_f_015+0x13e>
		tmp_phase        = pdata->VL53LX_p_026;
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	695b      	ldr	r3, [r3, #20]
 800d078:	61bb      	str	r3, [r7, #24]
		pdata->VL53LX_p_026 = pdata->VL53LX_p_027;
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	69da      	ldr	r2, [r3, #28]
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	615a      	str	r2, [r3, #20]
		pdata->VL53LX_p_027 = tmp_phase;
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	69ba      	ldr	r2, [r7, #24]
 800d086:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53LX_p_011 < pdata->VL53LX_p_026)
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	699a      	ldr	r2, [r3, #24]
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	695b      	ldr	r3, [r3, #20]
 800d090:	429a      	cmp	r2, r3
 800d092:	d203      	bcs.n	800d09c <VL53LX_f_015+0x152>
		pdata->VL53LX_p_026 = pdata->VL53LX_p_011;
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	699a      	ldr	r2, [r3, #24]
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	615a      	str	r2, [r3, #20]


	if (pdata->VL53LX_p_011 > pdata->VL53LX_p_027)
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	699a      	ldr	r2, [r3, #24]
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	69db      	ldr	r3, [r3, #28]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d903      	bls.n	800d0b0 <VL53LX_f_015+0x166>
		pdata->VL53LX_p_027 = pdata->VL53LX_p_011;
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	699a      	ldr	r2, [r3, #24]
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800d0b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	372c      	adds	r7, #44	; 0x2c
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd90      	pop	{r4, r7, pc}

0800d0bc <VL53LX_f_020>:
	int16_t                            VL53LX_p_024,
	uint8_t                            VL53LX_p_030,
	uint8_t                            clip_events,
	VL53LX_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800d0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c0:	b093      	sub	sp, #76	; 0x4c
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	4616      	mov	r6, r2
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	83fb      	strh	r3, [r7, #30]
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	83bb      	strh	r3, [r7, #28]
 800d0d0:	4633      	mov	r3, r6
 800d0d2:	76fb      	strb	r3, [r7, #27]
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	76bb      	strb	r3, [r7, #26]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	int16_t  i            = 0;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t  lb            = 0;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	int64_t VL53LX_p_018        = 0;
 800d0ea:	f04f 0200 	mov.w	r2, #0
 800d0ee:	f04f 0300 	mov.w	r3, #0
 800d0f2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int64_t event_sum     = 0;
 800d0f6:	f04f 0200 	mov.w	r2, #0
 800d0fa:	f04f 0300 	mov.w	r3, #0
 800d0fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	int64_t weighted_sum  = 0;
 800d102:	f04f 0200 	mov.w	r2, #0
 800d106:	f04f 0300 	mov.w	r3, #0
 800d10a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	LOG_FUNCTION_START("");

	*pphase = VL53LX_MAX_ALLOWED_PHASE;
 800d10e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d114:	601a      	str	r2, [r3, #0]

	if (VL53LX_p_030 != 0)
 800d116:	7efb      	ldrb	r3, [r7, #27]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	f000 808b 	beq.w	800d234 <VL53LX_f_020+0x178>
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d11e:	8bfb      	ldrh	r3, [r7, #30]
 800d120:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d124:	e07f      	b.n	800d226 <VL53LX_f_020+0x16a>

		if (lb < 0)
 800d126:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	da08      	bge.n	800d140 <VL53LX_f_020+0x84>
			i = lb + (int16_t)VL53LX_p_030;
 800d12e:	7efb      	ldrb	r3, [r7, #27]
 800d130:	b29a      	uxth	r2, r3
 800d132:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d136:	4413      	add	r3, r2
 800d138:	b29b      	uxth	r3, r3
 800d13a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d13e:	e009      	b.n	800d154 <VL53LX_f_020+0x98>
		else
			i = lb % (int16_t)VL53LX_p_030;
 800d140:	f9b7 1044 	ldrsh.w	r1, [r7, #68]	; 0x44
 800d144:	7efa      	ldrb	r2, [r7, #27]
 800d146:	fb91 f3f2 	sdiv	r3, r1, r2
 800d14a:	fb02 f303 	mul.w	r3, r2, r3
 800d14e:	1acb      	subs	r3, r1, r3
 800d150:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		if ((i >= 0) && (i < VL53LX_HISTOGRAM_BUFFER_SIZE)) {
 800d154:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d158:	2b00      	cmp	r3, #0
 800d15a:	db5d      	blt.n	800d218 <VL53LX_f_020+0x15c>
 800d15c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d160:	2b17      	cmp	r3, #23
 800d162:	dc59      	bgt.n	800d218 <VL53LX_f_020+0x15c>
			VL53LX_p_018 =
				(int64_t)pbins->bin_data[i] -
 800d164:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800d168:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d16a:	3306      	adds	r3, #6
 800d16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d170:	4618      	mov	r0, r3
 800d172:	ea4f 71e0 	mov.w	r1, r0, asr #31
				(int64_t)pbins->VL53LX_p_028;
 800d176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d178:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d17c:	461a      	mov	r2, r3
 800d17e:	ea4f 73e2 	mov.w	r3, r2, asr #31
			VL53LX_p_018 =
 800d182:	1a86      	subs	r6, r0, r2
 800d184:	613e      	str	r6, [r7, #16]
 800d186:	eb61 0303 	sbc.w	r3, r1, r3
 800d18a:	617b      	str	r3, [r7, #20]
 800d18c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d190:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

			if (clip_events > 0 && VL53LX_p_018 < 0)
 800d194:	7ebb      	ldrb	r3, [r7, #26]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00b      	beq.n	800d1b2 <VL53LX_f_020+0xf6>
 800d19a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d19e:	2a00      	cmp	r2, #0
 800d1a0:	f173 0300 	sbcs.w	r3, r3, #0
 800d1a4:	da05      	bge.n	800d1b2 <VL53LX_f_020+0xf6>
				VL53LX_p_018 = 0;
 800d1a6:	f04f 0200 	mov.w	r2, #0
 800d1aa:	f04f 0300 	mov.w	r3, #0
 800d1ae:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			event_sum += VL53LX_p_018;
 800d1b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800d1b6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d1ba:	1886      	adds	r6, r0, r2
 800d1bc:	60be      	str	r6, [r7, #8]
 800d1be:	eb41 0303 	adc.w	r3, r1, r3
 800d1c2:	60fb      	str	r3, [r7, #12]
 800d1c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d1c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			weighted_sum +=
				(VL53LX_p_018 * (1024 + (2048*(int64_t)lb)));
 800d1cc:	f9b7 0044 	ldrsh.w	r0, [r7, #68]	; 0x44
 800d1d0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800d1d4:	f04f 0200 	mov.w	r2, #0
 800d1d8:	f04f 0300 	mov.w	r3, #0
 800d1dc:	02cb      	lsls	r3, r1, #11
 800d1de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800d1e2:	02c2      	lsls	r2, r0, #11
 800d1e4:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 800d1e8:	f143 0900 	adc.w	r9, r3, #0
 800d1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ee:	fb09 f203 	mul.w	r2, r9, r3
 800d1f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1f4:	fb08 f303 	mul.w	r3, r8, r3
 800d1f8:	441a      	add	r2, r3
 800d1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fc:	fba3 0108 	umull	r0, r1, r3, r8
 800d200:	1853      	adds	r3, r2, r1
 800d202:	4619      	mov	r1, r3
			weighted_sum +=
 800d204:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d208:	1816      	adds	r6, r2, r0
 800d20a:	603e      	str	r6, [r7, #0]
 800d20c:	414b      	adcs	r3, r1
 800d20e:	607b      	str	r3, [r7, #4]
 800d210:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d214:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	for (lb = VL53LX_p_019; lb <= VL53LX_p_024; lb++) {
 800d218:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	3301      	adds	r3, #1
 800d220:	b29b      	uxth	r3, r3
 800d222:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d226:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	; 0x44
 800d22a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800d22e:	429a      	cmp	r2, r3
 800d230:	f77f af79 	ble.w	800d126 <VL53LX_f_020+0x6a>
			VL53LX_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800d234:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d238:	2a01      	cmp	r2, #1
 800d23a:	f173 0300 	sbcs.w	r3, r3, #0
 800d23e:	db33      	blt.n	800d2a8 <VL53LX_f_020+0x1ec>
		weighted_sum += do_division_s(event_sum, 2);
 800d240:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d244:	0fd9      	lsrs	r1, r3, #31
 800d246:	4608      	mov	r0, r1
 800d248:	f04f 0100 	mov.w	r1, #0
 800d24c:	1884      	adds	r4, r0, r2
 800d24e:	eb41 0503 	adc.w	r5, r1, r3
 800d252:	f04f 0200 	mov.w	r2, #0
 800d256:	f04f 0300 	mov.w	r3, #0
 800d25a:	0862      	lsrs	r2, r4, #1
 800d25c:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800d260:	106b      	asrs	r3, r5, #1
 800d262:	4610      	mov	r0, r2
 800d264:	4619      	mov	r1, r3
 800d266:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d26a:	eb12 0a00 	adds.w	sl, r2, r0
 800d26e:	eb43 0b01 	adc.w	fp, r3, r1
 800d272:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800d276:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d27a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d27e:	f7f2 ffff 	bl	8000280 <__aeabi_ldivmod>
 800d282:	4602      	mov	r2, r0
 800d284:	460b      	mov	r3, r1
 800d286:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		if (weighted_sum < 0)
 800d28a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d28e:	2a00      	cmp	r2, #0
 800d290:	f173 0300 	sbcs.w	r3, r3, #0
 800d294:	da05      	bge.n	800d2a2 <VL53LX_f_020+0x1e6>
			weighted_sum = 0;
 800d296:	f04f 0200 	mov.w	r2, #0
 800d29a:	f04f 0300 	mov.w	r3, #0
 800d29e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		*pphase = (uint32_t)weighted_sum;
 800d2a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2a6:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800d2a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	374c      	adds	r7, #76	; 0x4c
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d2b6 <VL53LX_f_011>:
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *pbins,
	VL53LX_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53LX_histogram_bin_data_t           *ppulse)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b086      	sub	sp, #24
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	607a      	str	r2, [r7, #4]
 800d2c0:	603b      	str	r3, [r7, #0]
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	73fb      	strb	r3, [r7, #15]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	75fb      	strb	r3, [r7, #23]

	VL53LX_hist_pulse_data_t *pdata = &(palgo->VL53LX_p_003[pulse_no]);
 800d2d2:	7bfa      	ldrb	r2, [r7, #15]
 800d2d4:	4613      	mov	r3, r2
 800d2d6:	00db      	lsls	r3, r3, #3
 800d2d8:	4413      	add	r3, r2
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	3304      	adds	r3, #4
 800d2e6:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53LX_histogram_bin_data_t));
 800d2e8:	22ac      	movs	r2, #172	; 0xac
 800d2ea:	68b9      	ldr	r1, [r7, #8]
 800d2ec:	6a38      	ldr	r0, [r7, #32]
 800d2ee:	f007 f85d 	bl	80143ac <memcpy>



	for (lb = palgo->VL53LX_p_044;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d2f8:	75fb      	strb	r3, [r7, #23]
 800d2fa:	e020      	b.n	800d33e <VL53LX_f_011+0x88>
		lb < (palgo->VL53LX_p_044 +
		palgo->VL53LX_p_030);
		lb++) {

		if (lb < pdata->VL53LX_p_012 || lb > pdata->VL53LX_p_013) {
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	7dfa      	ldrb	r2, [r7, #23]
 800d302:	429a      	cmp	r2, r3
 800d304:	d304      	bcc.n	800d310 <VL53LX_f_011+0x5a>
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	791b      	ldrb	r3, [r3, #4]
 800d30a:	7dfa      	ldrb	r2, [r7, #23]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d913      	bls.n	800d338 <VL53LX_f_011+0x82>
			i =  lb % palgo->VL53LX_p_030;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	78da      	ldrb	r2, [r3, #3]
 800d314:	7dfb      	ldrb	r3, [r7, #23]
 800d316:	fbb3 f1f2 	udiv	r1, r3, r2
 800d31a:	fb02 f201 	mul.w	r2, r2, r1
 800d31e:	1a9b      	subs	r3, r3, r2
 800d320:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53LX_p_021)
 800d322:	6a3b      	ldr	r3, [r7, #32]
 800d324:	7a9b      	ldrb	r3, [r3, #10]
 800d326:	7d7a      	ldrb	r2, [r7, #21]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d205      	bcs.n	800d338 <VL53LX_f_011+0x82>
				ppulse->bin_data[i] = pad_value;
 800d32c:	7d7a      	ldrb	r2, [r7, #21]
 800d32e:	6a3b      	ldr	r3, [r7, #32]
 800d330:	3206      	adds	r2, #6
 800d332:	6839      	ldr	r1, [r7, #0]
 800d334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 800d338:	7dfb      	ldrb	r3, [r7, #23]
 800d33a:	3301      	adds	r3, #1
 800d33c:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53LX_p_044 +
 800d33e:	7dfa      	ldrb	r2, [r7, #23]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800d346:	4619      	mov	r1, r3
		palgo->VL53LX_p_030);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53LX_p_044 +
 800d34c:	440b      	add	r3, r1
	for (lb = palgo->VL53LX_p_044;
 800d34e:	429a      	cmp	r2, r3
 800d350:	dbd4      	blt.n	800d2fc <VL53LX_f_011+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800d352:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d356:	4618      	mov	r0, r3
 800d358:	3718      	adds	r7, #24
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <VL53LX_f_014>:
	uint8_t                       crosstalk_compensation_enable,
	VL53LX_histogram_bin_data_t  *phist_data_ap,
	VL53LX_histogram_bin_data_t  *phist_data_zp,
	VL53LX_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 800d35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d362:	b096      	sub	sp, #88	; 0x58
 800d364:	af08      	add	r7, sp, #32
 800d366:	4604      	mov	r4, r0
 800d368:	4608      	mov	r0, r1
 800d36a:	4611      	mov	r1, r2
 800d36c:	461a      	mov	r2, r3
 800d36e:	4623      	mov	r3, r4
 800d370:	73fb      	strb	r3, [r7, #15]
 800d372:	4603      	mov	r3, r0
 800d374:	73bb      	strb	r3, [r7, #14]
 800d376:	460b      	mov	r3, r1
 800d378:	737b      	strb	r3, [r7, #13]
 800d37a:	4613      	mov	r3, r2
 800d37c:	733b      	strb	r3, [r7, #12]


	VL53LX_Error status      = VL53LX_ERROR_NONE;
 800d37e:	2300      	movs	r3, #0
 800d380:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53LX_Error func_status = VL53LX_ERROR_NONE;
 800d384:	2300      	movs	r3, #0
 800d386:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 800d38a:	2300      	movs	r3, #0
 800d38c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53LX_p_007    = 0;
 800d390:	2300      	movs	r3, #0
 800d392:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53LX_p_032    = 0;
 800d394:	2300      	movs	r3, #0
 800d396:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53LX_p_001    = 0;
 800d398:	2300      	movs	r3, #0
 800d39a:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 800d39c:	2300      	movs	r3, #0
 800d39e:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	617b      	str	r3, [r7, #20]


	if (VL53LX_p_030 == 0) {
 800d3b0:	7b7b      	ldrb	r3, [r7, #13]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d106      	bne.n	800d3c4 <VL53LX_f_014+0x66>
		*psigma_est = 0xFFFF;
 800d3b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d3b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3bc:	801a      	strh	r2, [r3, #0]
		return VL53LX_ERROR_DIVISION_BY_ZERO;
 800d3be:	f06f 030e 	mvn.w	r3, #14
 800d3c2:	e06f      	b.n	800d4a4 <VL53LX_f_014+0x146>
	}
	i = bin % VL53LX_p_030;
 800d3c4:	7bfb      	ldrb	r3, [r7, #15]
 800d3c6:	7b7a      	ldrb	r2, [r7, #13]
 800d3c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3cc:	fb02 f201 	mul.w	r2, r2, r1
 800d3d0:	1a9b      	subs	r3, r3, r2
 800d3d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53LX_f_022(
 800d3d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d3da:	7b39      	ldrb	r1, [r7, #12]
 800d3dc:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d3e0:	f107 0320 	add.w	r3, r7, #32
 800d3e4:	9301      	str	r3, [sp, #4]
 800d3e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d3ea:	9300      	str	r3, [sp, #0]
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d3f0:	f000 fda8 	bl	800df44 <VL53LX_f_022>
			&VL53LX_p_032,
			&c_zp);



	VL53LX_f_022(
 800d3f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d3f8:	7b39      	ldrb	r1, [r7, #12]
 800d3fa:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d3fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d402:	9301      	str	r3, [sp, #4]
 800d404:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d408:	9300      	str	r3, [sp, #0]
 800d40a:	4613      	mov	r3, r2
 800d40c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d40e:	f000 fd99 	bl	800df44 <VL53LX_f_022>
			phist_data_ap,
			&VL53LX_p_007,
			&VL53LX_p_032,
			&VL53LX_p_001);

	if (crosstalk_compensation_enable > 0)
 800d412:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00e      	beq.n	800d438 <VL53LX_f_014+0xda>
		VL53LX_f_022(
 800d41a:	f107 021c 	add.w	r2, r7, #28
 800d41e:	7b39      	ldrb	r1, [r7, #12]
 800d420:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 800d424:	f107 0314 	add.w	r3, r7, #20
 800d428:	9301      	str	r3, [sp, #4]
 800d42a:	f107 0318 	add.w	r3, r7, #24
 800d42e:	9300      	str	r3, [sp, #0]
 800d430:	4613      	mov	r3, r2
 800d432:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d434:	f000 fd86 	bl	800df44 <VL53LX_f_022>




	func_status =
		VL53LX_f_023(
 800d438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43a:	469c      	mov	ip, r3
 800d43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43e:	469e      	mov	lr, r3
 800d440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d442:	4698      	mov	r8, r3
 800d444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d446:	4619      	mov	r1, r3
 800d448:	6a3b      	ldr	r3, [r7, #32]
 800d44a:	461c      	mov	r4, r3
 800d44c:	69bb      	ldr	r3, [r7, #24]
 800d44e:	461d      	mov	r5, r3
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	461e      	mov	r6, r3
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53LX_p_028,
 800d458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d45a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53LX_f_023(
 800d45e:	607b      	str	r3, [r7, #4]
 800d460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d462:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800d466:	7bb8      	ldrb	r0, [r7, #14]
 800d468:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d46a:	9207      	str	r2, [sp, #28]
 800d46c:	9306      	str	r3, [sp, #24]
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	9205      	str	r2, [sp, #20]
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	9304      	str	r3, [sp, #16]
 800d476:	9603      	str	r6, [sp, #12]
 800d478:	9502      	str	r5, [sp, #8]
 800d47a:	9401      	str	r4, [sp, #4]
 800d47c:	9100      	str	r1, [sp, #0]
 800d47e:	4643      	mov	r3, r8
 800d480:	4672      	mov	r2, lr
 800d482:	4661      	mov	r1, ip
 800d484:	f002 fee6 	bl	8010254 <VL53LX_f_023>
 800d488:	4603      	mov	r3, r0
 800d48a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53LX_ERROR_DIVISION_BY_ZERO)
 800d48e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800d492:	f113 0f0f 	cmn.w	r3, #15
 800d496:	d103      	bne.n	800d4a0 <VL53LX_f_014+0x142>
		*psigma_est = 0xFFFF;
 800d498:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d49a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d49e:	801a      	strh	r2, [r3, #0]


	return status;
 800d4a0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3738      	adds	r7, #56	; 0x38
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d4ae <VL53LX_f_017>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53LX_histogram_bin_data_t *pbins,
	VL53LX_hist_pulse_data_t    *ppulse,
	VL53LX_range_data_t         *pdata)
{
 800d4ae:	b490      	push	{r4, r7}
 800d4b0:	b084      	sub	sp, #16
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	4604      	mov	r4, r0
 800d4b6:	4608      	mov	r0, r1
 800d4b8:	4611      	mov	r1, r2
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	4623      	mov	r3, r4
 800d4be:	71fb      	strb	r3, [r7, #7]
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	71bb      	strb	r3, [r7, #6]
 800d4c4:	460b      	mov	r3, r1
 800d4c6:	717b      	strb	r3, [r7, #5]
 800d4c8:	4613      	mov	r3, r2
 800d4ca:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 800d4d4:	6a3b      	ldr	r3, [r7, #32]
 800d4d6:	79fa      	ldrb	r2, [r7, #7]
 800d4d8:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 800d4da:	6a3b      	ldr	r3, [r7, #32]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	605a      	str	r2, [r3, #4]

	pdata->VL53LX_p_012          = ppulse->VL53LX_p_012;
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	781a      	ldrb	r2, [r3, #0]
 800d4e4:	6a3b      	ldr	r3, [r7, #32]
 800d4e6:	721a      	strb	r2, [r3, #8]
	pdata->VL53LX_p_019             = ppulse->VL53LX_p_019;
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	785a      	ldrb	r2, [r3, #1]
 800d4ec:	6a3b      	ldr	r3, [r7, #32]
 800d4ee:	725a      	strb	r2, [r3, #9]
	pdata->VL53LX_p_023            = ppulse->VL53LX_p_023;
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	789a      	ldrb	r2, [r3, #2]
 800d4f4:	6a3b      	ldr	r3, [r7, #32]
 800d4f6:	729a      	strb	r2, [r3, #10]
	pdata->VL53LX_p_024              = ppulse->VL53LX_p_024;
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	78da      	ldrb	r2, [r3, #3]
 800d4fc:	6a3b      	ldr	r3, [r7, #32]
 800d4fe:	72da      	strb	r2, [r3, #11]
	pdata->VL53LX_p_013            = ppulse->VL53LX_p_013;
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	791a      	ldrb	r2, [r3, #4]
 800d504:	6a3b      	ldr	r3, [r7, #32]
 800d506:	731a      	strb	r2, [r3, #12]
	pdata->VL53LX_p_025             = ppulse->VL53LX_p_025;
 800d508:	69fb      	ldr	r3, [r7, #28]
 800d50a:	795a      	ldrb	r2, [r3, #5]
 800d50c:	6a3b      	ldr	r3, [r7, #32]
 800d50e:	735a      	strb	r2, [r3, #13]



	pdata->VL53LX_p_029  =
		(ppulse->VL53LX_p_013 + 1) - ppulse->VL53LX_p_012;
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	791a      	ldrb	r2, [r3, #4]
 800d514:	69fb      	ldr	r3, [r7, #28]
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	1ad3      	subs	r3, r2, r3
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	3301      	adds	r3, #1
 800d51e:	b2da      	uxtb	r2, r3
	pdata->VL53LX_p_029  =
 800d520:	6a3b      	ldr	r3, [r7, #32]
 800d522:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800d52a:	6a3b      	ldr	r3, [r7, #32]
 800d52c:	829a      	strh	r2, [r3, #20]
	pdata->VL53LX_p_002              = ppulse->VL53LX_p_002;
 800d52e:	69fb      	ldr	r3, [r7, #28]
 800d530:	8c1a      	ldrh	r2, [r3, #32]
 800d532:	6a3b      	ldr	r3, [r7, #32]
 800d534:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53LX_p_026             = (uint16_t)ppulse->VL53LX_p_026;
 800d536:	69fb      	ldr	r3, [r7, #28]
 800d538:	695b      	ldr	r3, [r3, #20]
 800d53a:	b29a      	uxth	r2, r3
 800d53c:	6a3b      	ldr	r3, [r7, #32]
 800d53e:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53LX_p_011          = (uint16_t)ppulse->VL53LX_p_011;
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	699b      	ldr	r3, [r3, #24]
 800d544:	b29a      	uxth	r2, r3
 800d546:	6a3b      	ldr	r3, [r7, #32]
 800d548:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53LX_p_027             = (uint16_t)ppulse->VL53LX_p_027;
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	69db      	ldr	r3, [r3, #28]
 800d550:	b29a      	uxth	r2, r3
 800d552:	6a3b      	ldr	r3, [r7, #32]
 800d554:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53LX_p_017  = (uint32_t)ppulse->VL53LX_p_017;
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	461a      	mov	r2, r3
 800d55e:	6a3b      	ldr	r3, [r7, #32]
 800d560:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53LX_p_010   = ppulse->VL53LX_p_010;
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	691a      	ldr	r2, [r3, #16]
 800d566:	6a3b      	ldr	r3, [r7, #32]
 800d568:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53LX_p_016 = (uint32_t)ppulse->VL53LX_p_016;
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	689b      	ldr	r3, [r3, #8]
 800d56e:	461a      	mov	r2, r3
 800d570:	6a3b      	ldr	r3, [r7, #32]
 800d572:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 800d574:	69bb      	ldr	r3, [r7, #24]
 800d576:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d57a:	6a3b      	ldr	r3, [r7, #32]
 800d57c:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53LX_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800d57e:	6a3b      	ldr	r3, [r7, #32]
 800d580:	2213      	movs	r2, #19
 800d582:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 800d586:	887b      	ldrh	r3, [r7, #2]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d00a      	beq.n	800d5a2 <VL53LX_f_017+0xf4>
		(uint32_t)ppulse->VL53LX_p_002 > ((uint32_t)sigma_thres << 5))
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	8c1b      	ldrh	r3, [r3, #32]
 800d590:	461a      	mov	r2, r3
 800d592:	887b      	ldrh	r3, [r7, #2]
 800d594:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 800d596:	429a      	cmp	r2, r3
 800d598:	d903      	bls.n	800d5a2 <VL53LX_f_017+0xf4>
		pdata->range_status = VL53LX_DEVICEERROR_SIGMATHRESHOLDCHECK;
 800d59a:	6a3b      	ldr	r3, [r7, #32]
 800d59c:	2206      	movs	r2, #6
 800d59e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 800d5a2:	79bb      	ldrb	r3, [r7, #6]
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	021b      	lsls	r3, r3, #8
 800d5a8:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 800d5aa:	6a3b      	ldr	r3, [r7, #32]
 800d5ac:	8a9b      	ldrh	r3, [r3, #20]
 800d5ae:	89fa      	ldrh	r2, [r7, #14]
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d205      	bcs.n	800d5c0 <VL53LX_f_017+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 800d5b4:	6a3b      	ldr	r3, [r7, #32]
 800d5b6:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 800d5b8:	89fb      	ldrh	r3, [r7, #14]
 800d5ba:	1ad3      	subs	r3, r2, r3
 800d5bc:	81fb      	strh	r3, [r7, #14]
 800d5be:	e001      	b.n	800d5c4 <VL53LX_f_017+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 800d5c4:	797b      	ldrb	r3, [r7, #5]
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	021b      	lsls	r3, r3, #8
 800d5ca:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 800d5cc:	69bb      	ldr	r3, [r7, #24]
 800d5ce:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 800d5d2:	89bb      	ldrh	r3, [r7, #12]
 800d5d4:	4413      	add	r3, r2
 800d5d6:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d5d8:	6a3b      	ldr	r3, [r7, #32]
 800d5da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d5de:	89fa      	ldrh	r2, [r7, #14]
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d805      	bhi.n	800d5f0 <VL53LX_f_017+0x142>
		pdata->VL53LX_p_011 > upper_phase_limit)
 800d5e4:	6a3b      	ldr	r3, [r7, #32]
 800d5e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53LX_p_011 < lower_phase_limit ||
 800d5ea:	89ba      	ldrh	r2, [r7, #12]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d203      	bcs.n	800d5f8 <VL53LX_f_017+0x14a>
		pdata->range_status = VL53LX_DEVICEERROR_RANGEPHASECHECK;
 800d5f0:	6a3b      	ldr	r3, [r7, #32]
 800d5f2:	2205      	movs	r2, #5
 800d5f4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 800d5f8:	bf00      	nop
 800d5fa:	3710      	adds	r7, #16
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bc90      	pop	{r4, r7}
 800d600:	4770      	bx	lr

0800d602 <VL53LX_f_025>:
	VL53LX_hist_gen3_algo_private_data_t   *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53LX_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53LX_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 800d602:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d604:	b08f      	sub	sp, #60	; 0x3c
 800d606:	af06      	add	r7, sp, #24
 800d608:	60f8      	str	r0, [r7, #12]
 800d60a:	60b9      	str	r1, [r7, #8]
 800d60c:	607a      	str	r2, [r7, #4]
 800d60e:	603b      	str	r3, [r7, #0]


	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800d610:	2300      	movs	r3, #0
 800d612:	77fb      	strb	r3, [r7, #31]

	VL53LX_hist_pulse_data_t     *ppulse_data;
	VL53LX_range_data_t          *prange_data;

	uint8_t                       p = 0;
 800d614:	2300      	movs	r3, #0
 800d616:	77bb      	strb	r3, [r7, #30]
	VL53LX_histogram_bin_data_t *pB = &(palgo3->VL53LX_p_006);
 800d618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d61a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d61e:	61bb      	str	r3, [r7, #24]





	VL53LX_f_003(palgo3);
 800d620:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d622:	f7ff f879 	bl	800c718 <VL53LX_f_003>



	memcpy(
		&(palgo3->VL53LX_p_006),
 800d626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d628:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 800d62c:	22ac      	movs	r2, #172	; 0xac
 800d62e:	6839      	ldr	r1, [r7, #0]
 800d630:	4618      	mov	r0, r3
 800d632:	f006 febb 	bl	80143ac <memcpy>
		pbins_input,
		sizeof(VL53LX_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	781a      	ldrb	r2, [r3, #0]
 800d63a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d63c:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	785a      	ldrb	r2, [r3, #1]
 800d642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d644:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	789a      	ldrb	r2, [r3, #2]
 800d64a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d64c:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800d654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d656:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 800d658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d65a:	2200      	movs	r2, #0
 800d65c:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53LX_MAX_RANGE_RESULTS;
 800d65e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d660:	2204      	movs	r2, #4
 800d662:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 800d664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d666:	2200      	movs	r2, #0
 800d668:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d66a:	2300      	movs	r3, #0
 800d66c:	77bb      	strb	r3, [r7, #30]
 800d66e:	e008      	b.n	800d682 <VL53LX_f_025+0x80>
		presults->VL53LX_p_022[p] = 0;
 800d670:	7fbb      	ldrb	r3, [r7, #30]
 800d672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d674:	005b      	lsls	r3, r3, #1
 800d676:	4413      	add	r3, r2
 800d678:	2200      	movs	r2, #0
 800d67a:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++)
 800d67c:	7fbb      	ldrb	r3, [r7, #30]
 800d67e:	3301      	adds	r3, #1
 800d680:	77bb      	strb	r3, [r7, #30]
 800d682:	7fbb      	ldrb	r3, [r7, #30]
 800d684:	2b04      	cmp	r3, #4
 800d686:	d9f3      	bls.n	800d670 <VL53LX_f_025+0x6e>



	VL53LX_hist_calc_zero_distance_phase(&(palgo3->VL53LX_p_006));
 800d688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d68a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d68e:	4618      	mov	r0, r3
 800d690:	f7fe f8b9 	bl	800b806 <VL53LX_hist_calc_zero_distance_phase>



	VL53LX_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	795b      	ldrb	r3, [r3, #5]
	VL53LX_hist_estimate_ambient_from_thresholded_bins(
 800d698:	461a      	mov	r2, r3
 800d69a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d69c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	4610      	mov	r0, r2
 800d6a4:	f7fe f8ef 	bl	800b886 <VL53LX_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53LX_p_006));

	VL53LX_hist_estimate_ambient_from_ambient_bins(
 800d6a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6aa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fe fcb9 	bl	800c026 <VL53LX_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53LX_p_006));


	VL53LX_hist_remove_ambient_bins(&(palgo3->VL53LX_p_006));
 800d6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6b6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fe f95d 	bl	800b97a <VL53LX_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d009      	beq.n	800d6de <VL53LX_f_025+0xdc>
		VL53LX_f_005(
 800d6ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6cc:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d6d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6d2:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d6da:	f000 fd7b 	bl	800e1d4 <VL53LX_f_005>
				&(palgo3->VL53LX_p_006),
				&(palgo3->VL53LX_p_047));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	77bb      	strb	r3, [r7, #30]
 800d6ea:	e01e      	b.n	800d72a <VL53LX_f_025+0x128>
		if (status == VL53LX_ERROR_NONE) {
 800d6ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d117      	bne.n	800d724 <VL53LX_f_025+0x122>
			status =
			VL53LX_f_001(
 800d6f4:	7fbb      	ldrb	r3, [r7, #30]
 800d6f6:	68ba      	ldr	r2, [r7, #8]
 800d6f8:	3304      	adds	r3, #4
 800d6fa:	005b      	lsls	r3, r3, #1
 800d6fc:	4413      	add	r3, r2
 800d6fe:	8898      	ldrh	r0, [r3, #4]
 800d700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d702:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53LX_p_006),
				pdmax_algo,
				&(presults->VL53LX_p_022[p]));
 800d706:	7fbb      	ldrb	r3, [r7, #30]
			VL53LX_f_001(
 800d708:	005b      	lsls	r3, r3, #1
 800d70a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d70c:	4413      	add	r3, r2
 800d70e:	3304      	adds	r3, #4
 800d710:	9301      	str	r3, [sp, #4]
 800d712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	460b      	mov	r3, r1
 800d718:	68ba      	ldr	r2, [r7, #8]
 800d71a:	68f9      	ldr	r1, [r7, #12]
 800d71c:	f7fe fcce 	bl	800c0bc <VL53LX_f_001>
 800d720:	4603      	mov	r3, r0
 800d722:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53LX_MAX_AMBIENT_DMAX_VALUES; p++) {
 800d724:	7fbb      	ldrb	r3, [r7, #30]
 800d726:	3301      	adds	r3, #1
 800d728:	77bb      	strb	r3, [r7, #30]
 800d72a:	7fbb      	ldrb	r3, [r7, #30]
 800d72c:	2b04      	cmp	r3, #4
 800d72e:	d9dd      	bls.n	800d6ec <VL53LX_f_025+0xea>





	if (status == VL53LX_ERROR_NONE)
 800d730:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d11a      	bne.n	800d76e <VL53LX_f_025+0x16c>
		status =
			VL53LX_f_006(
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	785b      	ldrb	r3, [r3, #1]
			VL53LX_f_006(
 800d740:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	68dc      	ldr	r4, [r3, #12]
			VL53LX_f_006(
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 800d74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d74e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d752:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d754:	f502 7252 	add.w	r2, r2, #840	; 0x348
 800d758:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d75a:	9102      	str	r1, [sp, #8]
 800d75c:	9201      	str	r2, [sp, #4]
 800d75e:	9300      	str	r3, [sp, #0]
 800d760:	462b      	mov	r3, r5
 800d762:	4622      	mov	r2, r4
 800d764:	4631      	mov	r1, r6
 800d766:	f7ff f850 	bl	800c80a <VL53LX_f_006>
 800d76a:	4603      	mov	r3, r0
 800d76c:	77fb      	strb	r3, [r7, #31]





	if (status == VL53LX_ERROR_NONE)
 800d76e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d104      	bne.n	800d780 <VL53LX_f_025+0x17e>
		status =
			VL53LX_f_007(palgo3);
 800d776:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d778:	f7ff f972 	bl	800ca60 <VL53LX_f_007>
 800d77c:	4603      	mov	r3, r0
 800d77e:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800d780:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d104      	bne.n	800d792 <VL53LX_f_025+0x190>
		status =
			VL53LX_f_008(palgo3);
 800d788:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d78a:	f7ff f9b7 	bl	800cafc <VL53LX_f_008>
 800d78e:	4603      	mov	r3, r0
 800d790:	77fb      	strb	r3, [r7, #31]



	if (status == VL53LX_ERROR_NONE)
 800d792:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d104      	bne.n	800d7a4 <VL53LX_f_025+0x1a2>
		status =
			VL53LX_f_009(palgo3);
 800d79a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d79c:	f7ff fa2c 	bl	800cbf8 <VL53LX_f_009>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	77bb      	strb	r3, [r7, #30]
 800d7a8:	e0a6      	b.n	800d8f8 <VL53LX_f_025+0x2f6>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800d7aa:	7fba      	ldrb	r2, [r7, #30]
 800d7ac:	4613      	mov	r3, r2
 800d7ae:	00db      	lsls	r3, r3, #3
 800d7b0:	4413      	add	r3, r2
 800d7b2:	009b      	lsls	r3, r3, #2
 800d7b4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d7b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7ba:	4413      	add	r3, r2
 800d7bc:	3304      	adds	r3, #4
 800d7be:	617b      	str	r3, [r7, #20]



		if (status == VL53LX_ERROR_NONE)
 800d7c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d109      	bne.n	800d7dc <VL53LX_f_025+0x1da>
			status =
				VL53LX_f_010(
 800d7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ca:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d7ce:	7fbb      	ldrb	r3, [r7, #30]
 800d7d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7ff fb66 	bl	800cea4 <VL53LX_f_010>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_006),
					palgo3);



		if (status == VL53LX_ERROR_NONE)
 800d7dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d110      	bne.n	800d806 <VL53LX_f_025+0x204>
			status =
				VL53LX_f_011(
 800d7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7e6:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d7ea:	69bb      	ldr	r3, [r7, #24]
 800d7ec:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800d7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7f2:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800d7f6:	7fb8      	ldrb	r0, [r7, #30]
 800d7f8:	9300      	str	r3, [sp, #0]
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7fe:	f7ff fd5a 	bl	800d2b6 <VL53LX_f_011>
 800d802:	4603      	mov	r3, r0
 800d804:	77fb      	strb	r3, [r7, #31]
					pB->VL53LX_p_028,
					&(palgo3->VL53LX_p_048));



		if (status == VL53LX_ERROR_NONE) {
 800d806:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d10d      	bne.n	800d82a <VL53LX_f_025+0x228>
			status =
				VL53LX_f_011(
 800d80e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d810:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 800d814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d816:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800d81a:	7fb8      	ldrb	r0, [r7, #30]
 800d81c:	9300      	str	r3, [sp, #0]
 800d81e:	2300      	movs	r3, #0
 800d820:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d822:	f7ff fd48 	bl	800d2b6 <VL53LX_f_011>
 800d826:	4603      	mov	r3, r0
 800d828:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_049));
		}



		if (status == VL53LX_ERROR_NONE) {
 800d82a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d10d      	bne.n	800d84e <VL53LX_f_025+0x24c>
			status =
				VL53LX_f_011(
 800d832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d834:	f503 7152 	add.w	r1, r3, #840	; 0x348
 800d838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d83a:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800d83e:	7fb8      	ldrb	r0, [r7, #30]
 800d840:	9300      	str	r3, [sp, #0]
 800d842:	2300      	movs	r3, #0
 800d844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d846:	f7ff fd36 	bl	800d2b6 <VL53LX_f_011>
 800d84a:	4603      	mov	r3, r0
 800d84c:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53LX_p_050));
		}



		if (status == VL53LX_ERROR_NONE)
 800d84e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d109      	bne.n	800d86a <VL53LX_f_025+0x268>
			status =
				VL53LX_f_026(
 800d856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d858:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 800d85c:	7fb8      	ldrb	r0, [r7, #30]
 800d85e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d860:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d862:	f000 f8dd 	bl	800da20 <VL53LX_f_026>
 800d866:	4603      	mov	r3, r0
 800d868:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53LX_ERROR_NONE)
 800d86a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d108      	bne.n	800d884 <VL53LX_f_025+0x282>
			status =
				VL53LX_f_027(
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	8a19      	ldrh	r1, [r3, #16]
 800d876:	7fb8      	ldrb	r0, [r7, #30]
 800d878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d87a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d87c:	f000 f95c 	bl	800db38 <VL53LX_f_027>
 800d880:	4603      	mov	r3, r0
 800d882:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53LX_ERROR_NONE)
 800d884:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d124      	bne.n	800d8d6 <VL53LX_f_025+0x2d4>
			status =
			VL53LX_f_014(
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	789d      	ldrb	r5, [r3, #2]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	7e1e      	ldrb	r6, [r3, #24]
 800d894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d896:	f893 c003 	ldrb.w	ip, [r3, #3]
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	f893 e006 	ldrb.w	lr, [r3, #6]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d8a8:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 800d8ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d8ae:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 800d8b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d8b4:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 800d8b8:	697c      	ldr	r4, [r7, #20]
 800d8ba:	3420      	adds	r4, #32
 800d8bc:	9404      	str	r4, [sp, #16]
 800d8be:	9003      	str	r0, [sp, #12]
 800d8c0:	9102      	str	r1, [sp, #8]
 800d8c2:	9201      	str	r2, [sp, #4]
 800d8c4:	9300      	str	r3, [sp, #0]
 800d8c6:	4673      	mov	r3, lr
 800d8c8:	4662      	mov	r2, ip
 800d8ca:	4631      	mov	r1, r6
 800d8cc:	4628      	mov	r0, r5
 800d8ce:	f7ff fd46 	bl	800d35e <VL53LX_f_014>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53LX_p_050),
			&(ppulse_data->VL53LX_p_002));



		if (status == VL53LX_ERROR_NONE)
 800d8d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d109      	bne.n	800d8f2 <VL53LX_f_025+0x2f0>
			status =
				VL53LX_f_015(
 800d8de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8e0:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 800d8e4:	7fb8      	ldrb	r0, [r7, #30]
 800d8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8e8:	2101      	movs	r1, #1
 800d8ea:	f7ff fb2e 	bl	800cf4a <VL53LX_f_015>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d8f2:	7fbb      	ldrb	r3, [r7, #30]
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	77bb      	strb	r3, [r7, #30]
 800d8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8fa:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800d8fe:	7fba      	ldrb	r2, [r7, #30]
 800d900:	429a      	cmp	r2, r3
 800d902:	f4ff af52 	bcc.w	800d7aa <VL53LX_f_025+0x1a8>

	}



	if (status == VL53LX_ERROR_NONE)
 800d906:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d107      	bne.n	800d91e <VL53LX_f_025+0x31c>
		status =
			VL53LX_f_016(
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	785b      	ldrb	r3, [r3, #1]
 800d912:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d914:	4618      	mov	r0, r3
 800d916:	f7ff fa41 	bl	800cd9c <VL53LX_f_016>
 800d91a:	4603      	mov	r3, r0
 800d91c:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800d91e:	2300      	movs	r3, #0
 800d920:	77bb      	strb	r3, [r7, #30]
 800d922:	e071      	b.n	800da08 <VL53LX_f_025+0x406>

		ppulse_data = &(palgo3->VL53LX_p_003[p]);
 800d924:	7fba      	ldrb	r2, [r7, #30]
 800d926:	4613      	mov	r3, r2
 800d928:	00db      	lsls	r3, r3, #3
 800d92a:	4413      	add	r3, r2
 800d92c:	009b      	lsls	r3, r3, #2
 800d92e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d932:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d934:	4413      	add	r3, r2
 800d936:	3304      	adds	r3, #4
 800d938:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 800d93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d93c:	7c9a      	ldrb	r2, [r3, #18]
 800d93e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d940:	7c5b      	ldrb	r3, [r3, #17]
 800d942:	429a      	cmp	r2, r3
 800d944:	d25c      	bcs.n	800da00 <VL53LX_f_025+0x3fe>
			continue;




		if (ppulse_data->VL53LX_p_010 >
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53LX_p_010 >
 800d94e:	429a      	cmp	r2, r3
 800d950:	dd57      	ble.n	800da02 <VL53LX_f_025+0x400>
			ppulse_data->VL53LX_p_023 < 0xFF) {
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 800d956:	2bff      	cmp	r3, #255	; 0xff
 800d958:	d053      	beq.n	800da02 <VL53LX_f_025+0x400>

			prange_data =
			&(presults->VL53LX_p_003[presults->active_results]);
 800d95a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d95c:	7c9b      	ldrb	r3, [r3, #18]
 800d95e:	461a      	mov	r2, r3
			prange_data =
 800d960:	234c      	movs	r3, #76	; 0x4c
 800d962:	fb03 f302 	mul.w	r3, r3, r2
 800d966:	3310      	adds	r3, #16
 800d968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d96a:	4413      	add	r3, r2
 800d96c:	3304      	adds	r3, #4
 800d96e:	613b      	str	r3, [r7, #16]

			if (status == VL53LX_ERROR_NONE)
 800d970:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d115      	bne.n	800d9a4 <VL53LX_f_025+0x3a2>
				VL53LX_f_017(
 800d978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d97a:	7c98      	ldrb	r0, [r3, #18]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f893 1020 	ldrb.w	r1, [r3, #32]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	8b5d      	ldrh	r5, [r3, #26]
 800d98c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d98e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800d992:	693a      	ldr	r2, [r7, #16]
 800d994:	9202      	str	r2, [sp, #8]
 800d996:	697a      	ldr	r2, [r7, #20]
 800d998:	9201      	str	r2, [sp, #4]
 800d99a:	9300      	str	r3, [sp, #0]
 800d99c:	462b      	mov	r3, r5
 800d99e:	4622      	mov	r2, r4
 800d9a0:	f7ff fd85 	bl	800d4ae <VL53LX_f_017>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53LX_p_006),
						ppulse_data,
						prange_data);

			if (status == VL53LX_ERROR_NONE)
 800d9a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d115      	bne.n	800d9d8 <VL53LX_f_025+0x3d6>
				status =
				VL53LX_f_018(
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 800d9b2:	69bb      	ldr	r3, [r7, #24]
 800d9b4:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d9be:	69bb      	ldr	r3, [r7, #24]
 800d9c0:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 800d9c4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800d9c8:	9301      	str	r3, [sp, #4]
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	9300      	str	r3, [sp, #0]
 800d9ce:	4623      	mov	r3, r4
 800d9d0:	f000 fb11 	bl	800dff6 <VL53LX_f_018>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53LX_ERROR_NONE)
 800d9d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d108      	bne.n	800d9f2 <VL53LX_f_025+0x3f0>
				VL53LX_f_019(
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	8bd8      	ldrh	r0, [r3, #30]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800d9ea:	693a      	ldr	r2, [r7, #16]
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	f000 fba7 	bl	800e140 <VL53LX_f_019>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 800d9f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9f4:	7c9b      	ldrb	r3, [r3, #18]
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	b2da      	uxtb	r2, r3
 800d9fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9fc:	749a      	strb	r2, [r3, #18]
 800d9fe:	e000      	b.n	800da02 <VL53LX_f_025+0x400>
			continue;
 800da00:	bf00      	nop
	for (p = 0; p < palgo3->VL53LX_p_046; p++) {
 800da02:	7fbb      	ldrb	r3, [r7, #30]
 800da04:	3301      	adds	r3, #1
 800da06:	77bb      	strb	r3, [r7, #30]
 800da08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da0a:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800da0e:	7fba      	ldrb	r2, [r7, #30]
 800da10:	429a      	cmp	r2, r3
 800da12:	d387      	bcc.n	800d924 <VL53LX_f_025+0x322>



	LOG_FUNCTION_END(status);

	return status;
 800da14:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3724      	adds	r7, #36	; 0x24
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da20 <VL53LX_f_026>:
VL53LX_Error VL53LX_f_026(
	uint8_t                                pulse_no,
	VL53LX_histogram_bin_data_t           *ppulse,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b08c      	sub	sp, #48	; 0x30
 800da24:	af02      	add	r7, sp, #8
 800da26:	60b9      	str	r1, [r7, #8]
 800da28:	607a      	str	r2, [r7, #4]
 800da2a:	603b      	str	r3, [r7, #0]
 800da2c:	4603      	mov	r3, r0
 800da2e:	73fb      	strb	r3, [r7, #15]




	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800da30:	2300      	movs	r3, #0
 800da32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800da36:	7bfa      	ldrb	r2, [r7, #15]
 800da38:	4613      	mov	r3, r2
 800da3a:	00db      	lsls	r3, r3, #3
 800da3c:	4413      	add	r3, r2
 800da3e:	009b      	lsls	r3, r3, #2
 800da40:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800da44:	687a      	ldr	r2, [r7, #4]
 800da46:	4413      	add	r3, r2
 800da48:	3304      	adds	r3, #4
 800da4a:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 800da4c:	2300      	movs	r3, #0
 800da4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 800da52:	2300      	movs	r3, #0
 800da54:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 800da56:	2300      	movs	r3, #0
 800da58:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 800da5a:	2300      	movs	r3, #0
 800da5c:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 800da5e:	2300      	movs	r3, #0
 800da60:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53LX_p_020    = palgo3->VL53LX_p_020;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	785a      	ldrb	r2, [r3, #1]
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53LX_p_019      = palgo3->VL53LX_p_019;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	781a      	ldrb	r2, [r3, #0]
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53LX_p_021 = palgo3->VL53LX_p_021;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	789a      	ldrb	r2, [r3, #2]
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800da7a:	6a3b      	ldr	r3, [r7, #32]
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da82:	e04d      	b.n	800db20 <VL53LX_f_026+0x100>

		i =  lb  % palgo3->VL53LX_p_030;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	78da      	ldrb	r2, [r3, #3]
 800da88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da8c:	fbb3 f1f2 	udiv	r1, r3, r2
 800da90:	fb02 f201 	mul.w	r2, r2, r1
 800da94:	1a9b      	subs	r3, r3, r2
 800da96:	77fb      	strb	r3, [r7, #31]


		VL53LX_f_022(
 800da98:	6a3b      	ldr	r3, [r7, #32]
 800da9a:	7999      	ldrb	r1, [r3, #6]
 800da9c:	f107 0218 	add.w	r2, r7, #24
 800daa0:	7ff8      	ldrb	r0, [r7, #31]
 800daa2:	f107 0310 	add.w	r3, r7, #16
 800daa6:	9301      	str	r3, [sp, #4]
 800daa8:	f107 0314 	add.w	r3, r7, #20
 800daac:	9300      	str	r3, [sp, #0]
 800daae:	4613      	mov	r3, r2
 800dab0:	68ba      	ldr	r2, [r7, #8]
 800dab2:	f000 fa47 	bl	800df44 <VL53LX_f_022>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53LX_p_007[i] = suma;
 800dab6:	7ffb      	ldrb	r3, [r7, #31]
 800dab8:	69ba      	ldr	r2, [r7, #24]
 800daba:	6839      	ldr	r1, [r7, #0]
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	440b      	add	r3, r1
 800dac0:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_032[i] = sumb;
 800dac2:	7ffb      	ldrb	r3, [r7, #31]
 800dac4:	697a      	ldr	r2, [r7, #20]
 800dac6:	6839      	ldr	r1, [r7, #0]
 800dac8:	3318      	adds	r3, #24
 800daca:	009b      	lsls	r3, r3, #2
 800dacc:	440b      	add	r3, r1
 800dace:	605a      	str	r2, [r3, #4]
		pfiltered->VL53LX_p_001[i] = sumc;
 800dad0:	7ffb      	ldrb	r3, [r7, #31]
 800dad2:	693a      	ldr	r2, [r7, #16]
 800dad4:	6839      	ldr	r1, [r7, #0]
 800dad6:	3330      	adds	r3, #48	; 0x30
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	440b      	add	r3, r1
 800dadc:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_053[i] =
			(suma + sumb) -
 800dade:	69ba      	ldr	r2, [r7, #24]
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53LX_p_028);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	689a      	ldr	r2, [r3, #8]
 800dae8:	693b      	ldr	r3, [r7, #16]
 800daea:	441a      	add	r2, r3
		pfiltered->VL53LX_p_053[i] =
 800daec:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 800daee:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_053[i] =
 800daf0:	6839      	ldr	r1, [r7, #0]
 800daf2:	3348      	adds	r3, #72	; 0x48
 800daf4:	009b      	lsls	r3, r3, #2
 800daf6:	440b      	add	r3, r1
 800daf8:	605a      	str	r2, [r3, #4]



		pfiltered->VL53LX_p_054[i] =
			(sumb + sumc) -
 800dafa:	697a      	ldr	r2, [r7, #20]
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53LX_p_028);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	689a      	ldr	r2, [r3, #8]
 800db04:	69bb      	ldr	r3, [r7, #24]
 800db06:	441a      	add	r2, r3
		pfiltered->VL53LX_p_054[i] =
 800db08:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 800db0a:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53LX_p_054[i] =
 800db0c:	6839      	ldr	r1, [r7, #0]
 800db0e:	3360      	adds	r3, #96	; 0x60
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	440b      	add	r3, r1
 800db14:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53LX_p_012; lb <= pdata->VL53LX_p_013; lb++) {
 800db16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db1a:	3301      	adds	r3, #1
 800db1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db20:	6a3b      	ldr	r3, [r7, #32]
 800db22:	791b      	ldrb	r3, [r3, #4]
 800db24:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800db28:	429a      	cmp	r2, r3
 800db2a:	d9ab      	bls.n	800da84 <VL53LX_f_026+0x64>
	}

	return status;
 800db2c:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800db30:	4618      	mov	r0, r3
 800db32:	3728      	adds	r7, #40	; 0x28
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <VL53LX_f_027>:
VL53LX_Error VL53LX_f_027(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53LX_hist_gen3_algo_private_data_t  *palgo3)
{
 800db38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db3a:	b08f      	sub	sp, #60	; 0x3c
 800db3c:	af06      	add	r7, sp, #24
 800db3e:	60ba      	str	r2, [r7, #8]
 800db40:	607b      	str	r3, [r7, #4]
 800db42:	4603      	mov	r3, r0
 800db44:	73fb      	strb	r3, [r7, #15]
 800db46:	460b      	mov	r3, r1
 800db48:	81bb      	strh	r3, [r7, #12]



	VL53LX_Error  status       = VL53LX_ERROR_NONE;
 800db4a:	2300      	movs	r3, #0
 800db4c:	77bb      	strb	r3, [r7, #30]
	VL53LX_Error  func_status  = VL53LX_ERROR_NONE;
 800db4e:	2300      	movs	r3, #0
 800db50:	777b      	strb	r3, [r7, #29]

	VL53LX_hist_pulse_data_t *pdata = &(palgo3->VL53LX_p_003[pulse_no]);
 800db52:	7bfa      	ldrb	r2, [r7, #15]
 800db54:	4613      	mov	r3, r2
 800db56:	00db      	lsls	r3, r3, #3
 800db58:	4413      	add	r3, r2
 800db5a:	009b      	lsls	r3, r3, #2
 800db5c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	4413      	add	r3, r2
 800db64:	3304      	adds	r3, #4
 800db66:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 800db68:	2300      	movs	r3, #0
 800db6a:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 800db6c:	2300      	movs	r3, #0
 800db6e:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 800db70:	2300      	movs	r3, #0
 800db72:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800db74:	69bb      	ldr	r3, [r7, #24]
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	77fb      	strb	r3, [r7, #31]
 800db7a:	e0b9      	b.n	800dcf0 <VL53LX_f_027+0x1b8>

		i =  lb    % palgo3->VL53LX_p_030;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	78da      	ldrb	r2, [r3, #3]
 800db80:	7ffb      	ldrb	r3, [r7, #31]
 800db82:	fbb3 f1f2 	udiv	r1, r3, r2
 800db86:	fb02 f201 	mul.w	r2, r2, r1
 800db8a:	1a9b      	subs	r3, r3, r2
 800db8c:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53LX_p_030;
 800db8e:	7ffb      	ldrb	r3, [r7, #31]
 800db90:	3301      	adds	r3, #1
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	78d2      	ldrb	r2, [r2, #3]
 800db96:	fb93 f1f2 	sdiv	r1, r3, r2
 800db9a:	fb02 f201 	mul.w	r2, r2, r1
 800db9e:	1a9b      	subs	r3, r3, r2
 800dba0:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53LX_p_021 &&
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	789b      	ldrb	r3, [r3, #2]
 800dba6:	7dfa      	ldrb	r2, [r7, #23]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	f080 809e 	bcs.w	800dcea <VL53LX_f_027+0x1b2>
			j < palgo3->VL53LX_p_021) {
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53LX_p_021 &&
 800dbb2:	7dba      	ldrb	r2, [r7, #22]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	f080 8098 	bcs.w	800dcea <VL53LX_f_027+0x1b2>

			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800dbba:	7dfb      	ldrb	r3, [r7, #23]
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	3348      	adds	r3, #72	; 0x48
 800dbc0:	009b      	lsls	r3, r3, #2
 800dbc2:	4413      	add	r3, r2
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d10e      	bne.n	800dbe8 <VL53LX_f_027+0xb0>
				pfiltered->VL53LX_p_054[i] == 0)
 800dbca:	7dfb      	ldrb	r3, [r7, #23]
 800dbcc:	68ba      	ldr	r2, [r7, #8]
 800dbce:	3360      	adds	r3, #96	; 0x60
 800dbd0:	009b      	lsls	r3, r3, #2
 800dbd2:	4413      	add	r3, r2
 800dbd4:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53LX_p_053[i] == 0 &&
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d106      	bne.n	800dbe8 <VL53LX_f_027+0xb0>

				pfiltered->VL53LX_p_040[i] = 0;
 800dbda:	7dfb      	ldrb	r3, [r7, #23]
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	4413      	add	r3, r2
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800dbe6:	e043      	b.n	800dc70 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800dbe8:	7dfb      	ldrb	r3, [r7, #23]
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	3348      	adds	r3, #72	; 0x48
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	4413      	add	r3, r2
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	db0e      	blt.n	800dc16 <VL53LX_f_027+0xde>
					 pfiltered->VL53LX_p_054[i] >= 0)
 800dbf8:	7dfb      	ldrb	r3, [r7, #23]
 800dbfa:	68ba      	ldr	r2, [r7, #8]
 800dbfc:	3360      	adds	r3, #96	; 0x60
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	4413      	add	r3, r2
 800dc02:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] >= 0 &&
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	db06      	blt.n	800dc16 <VL53LX_f_027+0xde>
				pfiltered->VL53LX_p_040[i] = 1;
 800dc08:	7dfb      	ldrb	r3, [r7, #23]
 800dc0a:	68ba      	ldr	r2, [r7, #8]
 800dc0c:	4413      	add	r3, r2
 800dc0e:	2201      	movs	r2, #1
 800dc10:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800dc14:	e02c      	b.n	800dc70 <VL53LX_f_027+0x138>

			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800dc16:	7dfb      	ldrb	r3, [r7, #23]
 800dc18:	68ba      	ldr	r2, [r7, #8]
 800dc1a:	3348      	adds	r3, #72	; 0x48
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	4413      	add	r3, r2
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	da1e      	bge.n	800dc64 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800dc26:	7dfb      	ldrb	r3, [r7, #23]
 800dc28:	68ba      	ldr	r2, [r7, #8]
 800dc2a:	3360      	adds	r3, #96	; 0x60
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	4413      	add	r3, r2
 800dc30:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53LX_p_053[i] <  0 &&
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	db16      	blt.n	800dc64 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800dc36:	7dbb      	ldrb	r3, [r7, #22]
 800dc38:	68ba      	ldr	r2, [r7, #8]
 800dc3a:	3348      	adds	r3, #72	; 0x48
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	4413      	add	r3, r2
 800dc40:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_054[i] >= 0 &&
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	db0e      	blt.n	800dc64 <VL53LX_f_027+0x12c>
					 pfiltered->VL53LX_p_054[j] <  0)
 800dc46:	7dbb      	ldrb	r3, [r7, #22]
 800dc48:	68ba      	ldr	r2, [r7, #8]
 800dc4a:	3360      	adds	r3, #96	; 0x60
 800dc4c:	009b      	lsls	r3, r3, #2
 800dc4e:	4413      	add	r3, r2
 800dc50:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53LX_p_053[j] >= 0 &&
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	da06      	bge.n	800dc64 <VL53LX_f_027+0x12c>
				pfiltered->VL53LX_p_040[i] = 1;
 800dc56:	7dfb      	ldrb	r3, [r7, #23]
 800dc58:	68ba      	ldr	r2, [r7, #8]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800dc62:	e005      	b.n	800dc70 <VL53LX_f_027+0x138>

			else
				pfiltered->VL53LX_p_040[i] = 0;
 800dc64:	7dfb      	ldrb	r3, [r7, #23]
 800dc66:	68ba      	ldr	r2, [r7, #8]
 800dc68:	4413      	add	r3, r2
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53LX_p_040[i] > 0) {
 800dc70:	7dfb      	ldrb	r3, [r7, #23]
 800dc72:	68ba      	ldr	r2, [r7, #8]
 800dc74:	4413      	add	r3, r2
 800dc76:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d035      	beq.n	800dcea <VL53LX_f_027+0x1b2>

				pdata->VL53LX_p_023 = lb;
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	7ffa      	ldrb	r2, [r7, #31]
 800dc82:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53LX_f_028(
 800dc84:	7dfb      	ldrb	r3, [r7, #23]
 800dc86:	68ba      	ldr	r2, [r7, #8]
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	4413      	add	r3, r2
 800dc8c:	685c      	ldr	r4, [r3, #4]
 800dc8e:	7dfb      	ldrb	r3, [r7, #23]
 800dc90:	68ba      	ldr	r2, [r7, #8]
 800dc92:	3318      	adds	r3, #24
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	4413      	add	r3, r2
 800dc98:	685d      	ldr	r5, [r3, #4]
 800dc9a:	7dfb      	ldrb	r3, [r7, #23]
 800dc9c:	68ba      	ldr	r2, [r7, #8]
 800dc9e:	3330      	adds	r3, #48	; 0x30
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	4413      	add	r3, r2
 800dca4:	685e      	ldr	r6, [r3, #4]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	689b      	ldr	r3, [r3, #8]
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	78d2      	ldrb	r2, [r2, #3]
 800dcae:	69b9      	ldr	r1, [r7, #24]
 800dcb0:	3118      	adds	r1, #24
 800dcb2:	7ff8      	ldrb	r0, [r7, #31]
 800dcb4:	9105      	str	r1, [sp, #20]
 800dcb6:	9204      	str	r2, [sp, #16]
 800dcb8:	9303      	str	r3, [sp, #12]
 800dcba:	2300      	movs	r3, #0
 800dcbc:	9302      	str	r3, [sp, #8]
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	9301      	str	r3, [sp, #4]
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	9300      	str	r3, [sp, #0]
 800dcc6:	4633      	mov	r3, r6
 800dcc8:	462a      	mov	r2, r5
 800dcca:	4621      	mov	r1, r4
 800dccc:	f000 f81c 	bl	800dd08 <VL53LX_f_028>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53LX_p_028,
					palgo3->VL53LX_p_030,
					&(pdata->VL53LX_p_011));

				if (func_status ==
 800dcd4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dcd8:	f113 0f0f 	cmn.w	r3, #15
 800dcdc:	d105      	bne.n	800dcea <VL53LX_f_027+0x1b2>
					VL53LX_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53LX_p_040[i] = 0;
 800dcde:	7dfb      	ldrb	r3, [r7, #23]
 800dce0:	68ba      	ldr	r2, [r7, #8]
 800dce2:	4413      	add	r3, r2
 800dce4:	2200      	movs	r2, #0
 800dce6:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53LX_p_012; lb < pdata->VL53LX_p_013; lb++) {
 800dcea:	7ffb      	ldrb	r3, [r7, #31]
 800dcec:	3301      	adds	r3, #1
 800dcee:	77fb      	strb	r3, [r7, #31]
 800dcf0:	69bb      	ldr	r3, [r7, #24]
 800dcf2:	791b      	ldrb	r3, [r3, #4]
 800dcf4:	7ffa      	ldrb	r2, [r7, #31]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	f4ff af40 	bcc.w	800db7c <VL53LX_f_027+0x44>

			}
		}
	}

	return status;
 800dcfc:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3724      	adds	r7, #36	; 0x24
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dd08 <VL53LX_f_028>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53LX_p_028,
	uint8_t   VL53LX_p_030,
	uint32_t *pmean_phase)
{
 800dd08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd0c:	b09e      	sub	sp, #120	; 0x78
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	64b9      	str	r1, [r7, #72]	; 0x48
 800dd12:	647a      	str	r2, [r7, #68]	; 0x44
 800dd14:	643b      	str	r3, [r7, #64]	; 0x40
 800dd16:	4603      	mov	r3, r0
 800dd18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error  status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800dd1c:	23f1      	movs	r3, #241	; 0xf1
 800dd1e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  mean_phase  = VL53LX_MAX_ALLOWED_PHASE;
 800dd22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd26:	f04f 0300 	mov.w	r3, #0
 800dd2a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int32_t  mean_phase32;
	int64_t  VL53LX_p_055   = 0;
 800dd2e:	f04f 0200 	mov.w	r2, #0
 800dd32:	f04f 0300 	mov.w	r3, #0
 800dd36:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  half_b_minus_amb = 0;
 800dd3a:	f04f 0200 	mov.w	r2, #0
 800dd3e:	f04f 0300 	mov.w	r3, #0
 800dd42:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58


	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800dd46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd48:	4618      	mov	r0, r3
 800dd4a:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800dd4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dd52:	461a      	mov	r2, r3
 800dd54:	ea4f 73e2 	mov.w	r3, r2, asr #31
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800dd58:	ebb0 0802 	subs.w	r8, r0, r2
 800dd5c:	eb61 0903 	sbc.w	r9, r1, r3
		(int64_t)cx - (int64_t)VL53LX_p_007 -  (int64_t)ax);
 800dd60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd62:	461a      	mov	r2, r3
 800dd64:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800dd68:	ebb8 0a02 	subs.w	sl, r8, r2
 800dd6c:	eb69 0b03 	sbc.w	fp, r9, r3
 800dd70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dd74:	461a      	mov	r2, r3
 800dd76:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800dd7a:	ebba 0402 	subs.w	r4, sl, r2
 800dd7e:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53LX_p_055    =     4096 * ((int64_t)VL53LX_p_001 -
 800dd82:	f04f 0200 	mov.w	r2, #0
 800dd86:	f04f 0300 	mov.w	r3, #0
 800dd8a:	032b      	lsls	r3, r5, #12
 800dd8c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800dd90:	0322      	lsls	r2, r4, #12
 800dd92:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800dd96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd98:	4618      	mov	r0, r3
 800dd9a:	ea4f 71e0 	mov.w	r1, r0, asr #31
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800dd9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dda2:	461a      	mov	r2, r3
 800dda4:	ea4f 73e2 	mov.w	r3, r2, asr #31
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800dda8:	1a84      	subs	r4, r0, r2
 800ddaa:	63bc      	str	r4, [r7, #56]	; 0x38
 800ddac:	eb61 0303 	sbc.w	r3, r1, r3
 800ddb0:	63fb      	str	r3, [r7, #60]	; 0x3c
		(int64_t)bx - (int64_t)VL53LX_p_028);
 800ddb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ddbc:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800ddc0:	4621      	mov	r1, r4
 800ddc2:	1a89      	subs	r1, r1, r2
 800ddc4:	6339      	str	r1, [r7, #48]	; 0x30
 800ddc6:	4629      	mov	r1, r5
 800ddc8:	eb61 0303 	sbc.w	r3, r1, r3
 800ddcc:	637b      	str	r3, [r7, #52]	; 0x34
	half_b_minus_amb  = 4096 * ((int64_t)VL53LX_p_032 -
 800ddce:	f04f 0200 	mov.w	r2, #0
 800ddd2:	f04f 0300 	mov.w	r3, #0
 800ddd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800ddda:	4629      	mov	r1, r5
 800dddc:	030b      	lsls	r3, r1, #12
 800ddde:	4621      	mov	r1, r4
 800dde0:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 800dde4:	4621      	mov	r1, r4
 800dde6:	030a      	lsls	r2, r1, #12
 800dde8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	if (half_b_minus_amb != 0) {
 800ddec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ddf0:	4313      	orrs	r3, r2
 800ddf2:	f000 809c 	beq.w	800df2e <VL53LX_f_028+0x226>

		mean_phase = (4096 * VL53LX_p_055) + half_b_minus_amb;
 800ddf6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800ddfa:	f04f 0000 	mov.w	r0, #0
 800ddfe:	f04f 0100 	mov.w	r1, #0
 800de02:	0319      	lsls	r1, r3, #12
 800de04:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800de08:	0310      	lsls	r0, r2, #12
 800de0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800de0e:	1814      	adds	r4, r2, r0
 800de10:	623c      	str	r4, [r7, #32]
 800de12:	414b      	adcs	r3, r1
 800de14:	627b      	str	r3, [r7, #36]	; 0x24
 800de16:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800de1a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 800de1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800de22:	1891      	adds	r1, r2, r2
 800de24:	61b9      	str	r1, [r7, #24]
 800de26:	415b      	adcs	r3, r3
 800de28:	61fb      	str	r3, [r7, #28]
 800de2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800de2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800de32:	f7f2 fa25 	bl	8000280 <__aeabi_ldivmod>
 800de36:	4602      	mov	r2, r0
 800de38:	460b      	mov	r3, r1
 800de3a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		mean_phase  +=  2048;
 800de3e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800de42:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800de46:	6139      	str	r1, [r7, #16]
 800de48:	f143 0300 	adc.w	r3, r3, #0
 800de4c:	617b      	str	r3, [r7, #20]
 800de4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800de52:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
		mean_phase  += (4096 * (int64_t)bin);
 800de56:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 800de5a:	f04f 0100 	mov.w	r1, #0
 800de5e:	f04f 0200 	mov.w	r2, #0
 800de62:	f04f 0300 	mov.w	r3, #0
 800de66:	030b      	lsls	r3, r1, #12
 800de68:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 800de6c:	0302      	lsls	r2, r0, #12
 800de6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800de72:	1884      	adds	r4, r0, r2
 800de74:	60bc      	str	r4, [r7, #8]
 800de76:	eb41 0303 	adc.w	r3, r1, r3
 800de7a:	60fb      	str	r3, [r7, #12]
 800de7c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800de80:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


		mean_phase  = do_division_s((mean_phase + 1), 2);
 800de84:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800de88:	1c51      	adds	r1, r2, #1
 800de8a:	62b9      	str	r1, [r7, #40]	; 0x28
 800de8c:	f143 0300 	adc.w	r3, r3, #0
 800de90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de92:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800de96:	462b      	mov	r3, r5
 800de98:	0fdb      	lsrs	r3, r3, #31
 800de9a:	461a      	mov	r2, r3
 800de9c:	f04f 0300 	mov.w	r3, #0
 800dea0:	4621      	mov	r1, r4
 800dea2:	1851      	adds	r1, r2, r1
 800dea4:	6039      	str	r1, [r7, #0]
 800dea6:	4629      	mov	r1, r5
 800dea8:	eb43 0101 	adc.w	r1, r3, r1
 800deac:	6079      	str	r1, [r7, #4]
 800deae:	f04f 0200 	mov.w	r2, #0
 800deb2:	f04f 0300 	mov.w	r3, #0
 800deb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800deba:	4621      	mov	r1, r4
 800debc:	084a      	lsrs	r2, r1, #1
 800debe:	4629      	mov	r1, r5
 800dec0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800dec4:	4629      	mov	r1, r5
 800dec6:	104b      	asrs	r3, r1, #1
 800dec8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		if (mean_phase  < 0)
 800decc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ded0:	2a00      	cmp	r2, #0
 800ded2:	f173 0300 	sbcs.w	r3, r3, #0
 800ded6:	da05      	bge.n	800dee4 <VL53LX_f_028+0x1dc>
			mean_phase = 0;
 800ded8:	f04f 0200 	mov.w	r2, #0
 800dedc:	f04f 0300 	mov.w	r3, #0
 800dee0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		if (mean_phase > VL53LX_MAX_ALLOWED_PHASE)
 800dee4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800dee8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800deec:	f04f 0100 	mov.w	r1, #0
 800def0:	4290      	cmp	r0, r2
 800def2:	eb71 0303 	sbcs.w	r3, r1, r3
 800def6:	da05      	bge.n	800df04 <VL53LX_f_028+0x1fc>
			mean_phase = VL53LX_MAX_ALLOWED_PHASE;
 800def8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800defc:	f04f 0300 	mov.w	r3, #0
 800df00:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


		mean_phase32 = (int32_t)mean_phase;
 800df04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df06:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase32 = mean_phase32 %
			((int32_t)VL53LX_p_030 * 2048);
 800df08:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800df0c:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 800df0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df10:	fb93 f1f2 	sdiv	r1, r3, r2
 800df14:	fb02 f201 	mul.w	r2, r2, r1
 800df18:	1a9b      	subs	r3, r3, r2
 800df1a:	657b      	str	r3, [r7, #84]	; 0x54
		mean_phase = mean_phase32;
 800df1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df1e:	461a      	mov	r2, r3
 800df20:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800df24:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		status = VL53LX_ERROR_NONE;
 800df28:	2300      	movs	r3, #0
 800df2a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	}

	*pmean_phase = (uint32_t)mean_phase;
 800df2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800df30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800df34:	601a      	str	r2, [r3, #0]

	return status;
 800df36:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3778      	adds	r7, #120	; 0x78
 800df3e:	46bd      	mov	sp, r7
 800df40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800df44 <VL53LX_f_022>:
	uint8_t                         filter_woi,
	VL53LX_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 800df44:	b480      	push	{r7}
 800df46:	b087      	sub	sp, #28
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60ba      	str	r2, [r7, #8]
 800df4c:	607b      	str	r3, [r7, #4]
 800df4e:	4603      	mov	r3, r0
 800df50:	73fb      	strb	r3, [r7, #15]
 800df52:	460b      	mov	r3, r1
 800df54:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2200      	movs	r2, #0
 800df62:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53LX_p_032];
 800df64:	7bfa      	ldrb	r2, [r7, #15]
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	3206      	adds	r2, #6
 800df6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800df6e:	6a3b      	ldr	r3, [r7, #32]
 800df70:	601a      	str	r2, [r3, #0]
	*pc = 0;
 800df72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df74:	2200      	movs	r2, #0
 800df76:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800df78:	2300      	movs	r3, #0
 800df7a:	75fb      	strb	r3, [r7, #23]
 800df7c:	e02f      	b.n	800dfde <VL53LX_f_022+0x9a>


		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800df7e:	7bfa      	ldrb	r2, [r7, #15]
 800df80:	7dfb      	ldrb	r3, [r7, #23]
 800df82:	4413      	add	r3, r2
 800df84:	68ba      	ldr	r2, [r7, #8]
 800df86:	7a92      	ldrb	r2, [r2, #10]
 800df88:	441a      	add	r2, r3
 800df8a:	7bbb      	ldrb	r3, [r7, #14]
 800df8c:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53LX_p_021;
 800df8e:	68ba      	ldr	r2, [r7, #8]
 800df90:	7a92      	ldrb	r2, [r2, #10]
 800df92:	fb93 f1f2 	sdiv	r1, r3, r2
 800df96:	fb02 f201 	mul.w	r2, r2, r1
 800df9a:	1a9b      	subs	r3, r3, r2
		j = ((VL53LX_p_032 + w + pbins->VL53LX_p_021) -
 800df9c:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 800df9e:	7dfa      	ldrb	r2, [r7, #23]
 800dfa0:	7bbb      	ldrb	r3, [r7, #14]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d20a      	bcs.n	800dfbc <VL53LX_f_022+0x78>
			*pa += pbins->bin_data[j];
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	7db9      	ldrb	r1, [r7, #22]
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	3106      	adds	r1, #6
 800dfb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dfb4:	441a      	add	r2, r3
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	601a      	str	r2, [r3, #0]
 800dfba:	e00d      	b.n	800dfd8 <VL53LX_f_022+0x94>
		else if (w > filter_woi)
 800dfbc:	7dfa      	ldrb	r2, [r7, #23]
 800dfbe:	7bbb      	ldrb	r3, [r7, #14]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d909      	bls.n	800dfd8 <VL53LX_f_022+0x94>
			*pc += pbins->bin_data[j];
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc6:	681a      	ldr	r2, [r3, #0]
 800dfc8:	7db9      	ldrb	r1, [r7, #22]
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	3106      	adds	r1, #6
 800dfce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dfd2:	441a      	add	r2, r3
 800dfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd6:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 800dfd8:	7dfb      	ldrb	r3, [r7, #23]
 800dfda:	3301      	adds	r3, #1
 800dfdc:	75fb      	strb	r3, [r7, #23]
 800dfde:	7bbb      	ldrb	r3, [r7, #14]
 800dfe0:	005a      	lsls	r2, r3, #1
 800dfe2:	7dfb      	ldrb	r3, [r7, #23]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	daca      	bge.n	800df7e <VL53LX_f_022+0x3a>
	}
}
 800dfe8:	bf00      	nop
 800dfea:	bf00      	nop
 800dfec:	371c      	adds	r7, #28
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr

0800dff6 <VL53LX_f_018>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53LX_p_004,
	VL53LX_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 800dff6:	b580      	push	{r7, lr}
 800dff8:	b088      	sub	sp, #32
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	60ba      	str	r2, [r7, #8]
 800dffe:	461a      	mov	r2, r3
 800e000:	4603      	mov	r3, r0
 800e002:	81fb      	strh	r3, [r7, #14]
 800e004:	460b      	mov	r3, r1
 800e006:	81bb      	strh	r3, [r7, #12]
 800e008:	4613      	mov	r3, r2
 800e00a:	80fb      	strh	r3, [r7, #6]
	VL53LX_Error     status = VL53LX_ERROR_NONE;
 800e00c:	2300      	movs	r3, #0
 800e00e:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 800e010:	2300      	movs	r3, #0
 800e012:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 800e014:	2300      	movs	r3, #0
 800e016:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 800e018:	2300      	movs	r3, #0
 800e01a:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 800e01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01e:	89fa      	ldrh	r2, [r7, #14]
 800e020:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 800e022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e024:	89ba      	ldrh	r2, [r7, #12]
 800e026:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 800e028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02a:	68ba      	ldr	r2, [r7, #8]
 800e02c:	619a      	str	r2, [r3, #24]
	pdata->VL53LX_p_004 = VL53LX_p_004;
 800e02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e030:	88fa      	ldrh	r2, [r7, #6]
 800e032:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 800e034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e036:	8a5b      	ldrh	r3, [r3, #18]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d101      	bne.n	800e040 <VL53LX_f_018+0x4a>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e03c:	23f1      	movs	r3, #241	; 0xf1
 800e03e:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 800e040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e042:	699b      	ldr	r3, [r3, #24]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d101      	bne.n	800e04c <VL53LX_f_018+0x56>
		status = VL53LX_ERROR_DIVISION_BY_ZERO;
 800e048:	23f1      	movs	r3, #241	; 0xf1
 800e04a:	77fb      	strb	r3, [r7, #31]

	if (status == VL53LX_ERROR_NONE) {
 800e04c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d16f      	bne.n	800e134 <VL53LX_f_018+0x13e>



		pll_period_us =
			VL53LX_calc_pll_period_us(pdata->fast_osc_frequency);
 800e054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e056:	8a5b      	ldrh	r3, [r3, #18]
 800e058:	4618      	mov	r0, r3
 800e05a:	f7fd faa6 	bl	800b5aa <VL53LX_calc_pll_period_us>
 800e05e:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 800e060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e062:	699b      	ldr	r3, [r3, #24]
 800e064:	3301      	adds	r3, #1
 800e066:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53LX_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 800e068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06a:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53LX_duration_maths(
 800e06c:	4619      	mov	r1, r3
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e074:	6978      	ldr	r0, [r7, #20]
 800e076:	f7fd faaf 	bl	800b5d8 <VL53LX_duration_maths>
 800e07a:	4602      	mov	r2, r0
 800e07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e07e:	61da      	str	r2, [r3, #28]
			VL53LX_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53LX_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53LX_p_029) << 4,
 800e080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e082:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53LX_duration_maths(
 800e084:	0119      	lsls	r1, r3, #4
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e08c:	6978      	ldr	r0, [r7, #20]
 800e08e:	f7fd faa3 	bl	800b5d8 <VL53LX_duration_maths>
 800e092:	4602      	mov	r2, r0
 800e094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e096:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53LX_rate_maths(
 800e09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09e:	69db      	ldr	r3, [r3, #28]
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	4610      	mov	r0, r2
 800e0a4:	f7fd fd01 	bl	800baaa <VL53LX_rate_maths>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ae:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_010,
 800e0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53LX_rate_maths(
 800e0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b6:	6a1b      	ldr	r3, [r3, #32]
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	4610      	mov	r0, r2
 800e0bc:	f7fd fcf5 	bl	800baaa <VL53LX_rate_maths>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c6:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
			(int32_t)pdata->VL53LX_p_016,
 800e0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53LX_rate_maths(
 800e0cc:	461a      	mov	r2, r3
 800e0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d0:	6a1b      	ldr	r3, [r3, #32]
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	4610      	mov	r0, r2
 800e0d6:	f7fd fce8 	bl	800baaa <VL53LX_rate_maths>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	461a      	mov	r2, r3
 800e0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e0:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 800e0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800e0e6:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 800e0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ea:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 800e0ec:	4413      	add	r3, r2
 800e0ee:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 800e0f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d905      	bls.n	800e104 <VL53LX_f_018+0x10e>
			count_rate_total /= histo_merge_nb;
 800e0f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e0fc:	69ba      	ldr	r2, [r7, #24]
 800e0fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800e102:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53LX_rate_per_spad_maths(
 800e104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e106:	8ada      	ldrh	r2, [r3, #22]
 800e108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e10c:	69b9      	ldr	r1, [r7, #24]
 800e10e:	2006      	movs	r0, #6
 800e110:	f7fd fd10 	bl	800bb34 <VL53LX_rate_per_spad_maths>
 800e114:	4603      	mov	r3, r0
 800e116:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 800e118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11a:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53LX_p_009   =
			VL53LX_events_per_spad_maths(
 800e11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e122:	8ad9      	ldrh	r1, [r3, #22]
 800e124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e126:	69db      	ldr	r3, [r3, #28]
 800e128:	461a      	mov	r2, r3
 800e12a:	f7fd faaf 	bl	800b68c <VL53LX_events_per_spad_maths>
 800e12e:	4602      	mov	r2, r0
		pdata->VL53LX_p_009   =
 800e130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e132:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 800e134:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3720      	adds	r7, #32
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <VL53LX_f_019>:

void VL53LX_f_019(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53LX_range_data_t *pdata)
{
 800e140:	b590      	push	{r4, r7, lr}
 800e142:	b085      	sub	sp, #20
 800e144:	af02      	add	r7, sp, #8
 800e146:	4603      	mov	r3, r0
 800e148:	603a      	str	r2, [r7, #0]
 800e14a:	80fb      	strh	r3, [r7, #6]
 800e14c:	460b      	mov	r3, r1
 800e14e:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53LX_range_maths(
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	8a58      	ldrh	r0, [r3, #18]
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	8a9c      	ldrh	r4, [r3, #20]
 800e15c:	88fb      	ldrh	r3, [r7, #6]
 800e15e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e162:	9201      	str	r2, [sp, #4]
 800e164:	9300      	str	r3, [sp, #0]
 800e166:	2300      	movs	r3, #0
 800e168:	4622      	mov	r2, r4
 800e16a:	f7fd fd17 	bl	800bb9c <VL53LX_range_maths>
 800e16e:	4603      	mov	r3, r0
 800e170:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53LX_range_maths(
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	8a58      	ldrh	r0, [r3, #18]
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	8a9c      	ldrh	r4, [r3, #20]
 800e186:	88fb      	ldrh	r3, [r7, #6]
 800e188:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e18c:	9201      	str	r2, [sp, #4]
 800e18e:	9300      	str	r3, [sp, #0]
 800e190:	2300      	movs	r3, #0
 800e192:	4622      	mov	r2, r4
 800e194:	f7fd fd02 	bl	800bb9c <VL53LX_range_maths>
 800e198:	4603      	mov	r3, r0
 800e19a:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53LX_range_maths(
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	8a58      	ldrh	r0, [r3, #18]
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	8a9c      	ldrh	r4, [r3, #20]
 800e1b0:	88fb      	ldrh	r3, [r7, #6]
 800e1b2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800e1b6:	9201      	str	r2, [sp, #4]
 800e1b8:	9300      	str	r3, [sp, #0]
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	4622      	mov	r2, r4
 800e1be:	f7fd fced 	bl	800bb9c <VL53LX_range_maths>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 800e1cc:	bf00      	nop
 800e1ce:	370c      	adds	r7, #12
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd90      	pop	{r4, r7, pc}

0800e1d4 <VL53LX_f_005>:

void  VL53LX_f_005(
	VL53LX_histogram_bin_data_t   *pxtalk,
	VL53LX_histogram_bin_data_t   *pbins,
	VL53LX_histogram_bin_data_t   *pxtalk_realigned)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b086      	sub	sp, #24
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	757b      	strb	r3, [r7, #21]





	memcpy(
 800e1f0:	22ac      	movs	r2, #172	; 0xac
 800e1f2:	68b9      	ldr	r1, [r7, #8]
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f006 f8d9 	bl	80143ac <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53LX_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	75fb      	strb	r3, [r7, #23]
 800e1fe:	e008      	b.n	800e212 <VL53LX_f_005+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 800e200:	7dfa      	ldrb	r2, [r7, #23]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	3206      	adds	r2, #6
 800e206:	2100      	movs	r1, #0
 800e208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53LX_p_020 ; i++)
 800e20c:	7dfb      	ldrb	r3, [r7, #23]
 800e20e:	3301      	adds	r3, #1
 800e210:	75fb      	strb	r3, [r7, #23]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	7a5b      	ldrb	r3, [r3, #9]
 800e216:	7dfa      	ldrb	r2, [r7, #23]
 800e218:	429a      	cmp	r2, r3
 800e21a:	d3f1      	bcc.n	800e200 <VL53LX_f_005+0x2c>



	bin_offset =  VL53LX_f_030(
 800e21c:	68f9      	ldr	r1, [r7, #12]
 800e21e:	68b8      	ldr	r0, [r7, #8]
 800e220:	f000 f878 	bl	800e314 <VL53LX_f_030>
 800e224:	4603      	mov	r3, r0
 800e226:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53LX_p_021 < pbins->VL53LX_p_021)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	7a9a      	ldrb	r2, [r3, #10]
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	7a9b      	ldrb	r3, [r3, #10]
 800e230:	429a      	cmp	r2, r3
 800e232:	d203      	bcs.n	800e23c <VL53LX_f_005+0x68>
		min_bins = pxtalk->VL53LX_p_021;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	7a9b      	ldrb	r3, [r3, #10]
 800e238:	75bb      	strb	r3, [r7, #22]
 800e23a:	e002      	b.n	800e242 <VL53LX_f_005+0x6e>
	else
		min_bins = pbins->VL53LX_p_021;
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	7a9b      	ldrb	r3, [r3, #10]
 800e240:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 800e242:	2300      	movs	r3, #0
 800e244:	75fb      	strb	r3, [r7, #23]
 800e246:	e05c      	b.n	800e302 <VL53LX_f_005+0x12e>



		if (bin_offset >= 0)
 800e248:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	db0f      	blt.n	800e270 <VL53LX_f_005+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800e250:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e254:	461a      	mov	r2, r3
 800e256:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e25a:	4413      	add	r3, r2
				% (int8_t)pbins->VL53LX_p_021;
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	7a92      	ldrb	r2, [r2, #10]
 800e260:	b252      	sxtb	r2, r2
 800e262:	fb93 f1f2 	sdiv	r1, r3, r2
 800e266:	fb02 f201 	mul.w	r2, r2, r1
 800e26a:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 800e26c:	757b      	strb	r3, [r7, #21]
 800e26e:	e013      	b.n	800e298 <VL53LX_f_005+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	7a9b      	ldrb	r3, [r3, #10]
 800e274:	b25b      	sxtb	r3, r3
 800e276:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 800e278:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e27c:	4619      	mov	r1, r3
 800e27e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e282:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e284:	4413      	add	r3, r2
					% (int8_t)pbins->VL53LX_p_021;
 800e286:	68ba      	ldr	r2, [r7, #8]
 800e288:	7a92      	ldrb	r2, [r2, #10]
 800e28a:	b252      	sxtb	r2, r2
 800e28c:	fb93 f1f2 	sdiv	r1, r3, r2
 800e290:	fb02 f201 	mul.w	r2, r2, r1
 800e294:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53LX_p_021 +
 800e296:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 800e298:	7d7b      	ldrb	r3, [r7, #21]
 800e29a:	461a      	mov	r2, r3
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	3206      	adds	r2, #6
 800e2a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 800e2a4:	7df9      	ldrb	r1, [r7, #23]
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	3106      	adds	r1, #6
 800e2aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	dd12      	ble.n	800e2d8 <VL53LX_f_005+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 800e2b2:	7d7b      	ldrb	r3, [r7, #21]
 800e2b4:	461a      	mov	r2, r3
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	3206      	adds	r2, #6
 800e2ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 800e2be:	7df9      	ldrb	r1, [r7, #23]
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	3106      	adds	r1, #6
 800e2c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 800e2c8:	7d79      	ldrb	r1, [r7, #21]
 800e2ca:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 800e2cc:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	1d82      	adds	r2, r0, #6
 800e2d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e2d6:	e006      	b.n	800e2e6 <VL53LX_f_005+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 800e2d8:	7d7b      	ldrb	r3, [r7, #21]
 800e2da:	461a      	mov	r2, r3
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	3206      	adds	r2, #6
 800e2e0:	2100      	movs	r1, #0
 800e2e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 800e2e6:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e2e8:	7d7b      	ldrb	r3, [r7, #21]
 800e2ea:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	3206      	adds	r2, #6
 800e2f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	1d82      	adds	r2, r0, #6
 800e2f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 800e2fc:	7dfb      	ldrb	r3, [r7, #23]
 800e2fe:	3301      	adds	r3, #1
 800e300:	75fb      	strb	r3, [r7, #23]
 800e302:	7dfa      	ldrb	r2, [r7, #23]
 800e304:	7dbb      	ldrb	r3, [r7, #22]
 800e306:	429a      	cmp	r2, r3
 800e308:	d39e      	bcc.n	800e248 <VL53LX_f_005+0x74>
	}



	LOG_FUNCTION_END(0);
}
 800e30a:	bf00      	nop
 800e30c:	bf00      	nop
 800e30e:	3718      	adds	r7, #24
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}

0800e314 <VL53LX_f_030>:


int8_t  VL53LX_f_030(
	VL53LX_histogram_bin_data_t   *pdata1,
	VL53LX_histogram_bin_data_t   *pdata2)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b086      	sub	sp, #24
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 800e31e:	2300      	movs	r3, #0
 800e320:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 800e322:	2300      	movs	r3, #0
 800e324:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 800e326:	2300      	movs	r3, #0
 800e328:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 800e32a:	2300      	movs	r3, #0
 800e32c:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53LX_decode_vcsel_period(pdata1->VL53LX_p_005);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e334:	4618      	mov	r0, r3
 800e336:	f7fd fd0b 	bl	800bd50 <VL53LX_decode_vcsel_period>
 800e33a:	4603      	mov	r3, r0
	period = 2048 *
 800e33c:	02db      	lsls	r3, r3, #11
 800e33e:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d00a      	beq.n	800e35c <VL53LX_f_030+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 800e34c:	68ba      	ldr	r2, [r7, #8]
 800e34e:	fbb3 f2f2 	udiv	r2, r3, r2
 800e352:	68b9      	ldr	r1, [r7, #8]
 800e354:	fb01 f202 	mul.w	r2, r1, r2
 800e358:	1a9b      	subs	r3, r3, r2
 800e35a:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800e362:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 800e364:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 800e366:	1ad3      	subs	r3, r2, r3
 800e368:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	dd09      	ble.n	800e384 <VL53LX_f_030+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e376:	2b00      	cmp	r3, #0
 800e378:	da01      	bge.n	800e37e <VL53LX_f_030+0x6a>
 800e37a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800e37e:	12db      	asrs	r3, r3, #11
 800e380:	75fb      	strb	r3, [r7, #23]
 800e382:	e008      	b.n	800e396 <VL53LX_f_030+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	da01      	bge.n	800e392 <VL53LX_f_030+0x7e>
 800e38e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800e392:	12db      	asrs	r3, r3, #11
 800e394:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 800e396:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3718      	adds	r7, #24
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}

0800e3a2 <VL53LX_f_031>:


VL53LX_Error  VL53LX_f_031(
	VL53LX_histogram_bin_data_t   *pidata,
	VL53LX_histogram_bin_data_t   *podata)
{
 800e3a2:	b580      	push	{r7, lr}
 800e3a4:	b08e      	sub	sp, #56	; 0x38
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	6078      	str	r0, [r7, #4]
 800e3aa:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53LX_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53LX_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53LX_p_032       = 0;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53LX_histogram_bin_data_t));
 800e3d4:	22ac      	movs	r2, #172	; 0xac
 800e3d6:	6879      	ldr	r1, [r7, #4]
 800e3d8:	6838      	ldr	r0, [r7, #0]
 800e3da:	f005 ffe7 	bl	80143ac <memcpy>


	podata->VL53LX_p_021 = 0;
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e3ea:	e00a      	b.n	800e402 <VL53LX_f_031+0x60>
		podata->bin_seq[lc] = VL53LX_MAX_BIN_SEQUENCE_CODE+1;
 800e3ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e3f0:	683a      	ldr	r2, [r7, #0]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	2210      	movs	r2, #16
 800e3f6:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 800e3f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e402:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e406:	2b05      	cmp	r3, #5
 800e408:	d9f0      	bls.n	800e3ec <VL53LX_f_031+0x4a>

	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e40a:	2300      	movs	r3, #0
 800e40c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e410:	e00b      	b.n	800e42a <VL53LX_f_031+0x88>
		podata->bin_data[lc] = 0;
 800e412:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	3206      	adds	r2, #6
 800e41a:	2100      	movs	r1, #0
 800e41c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53LX_p_020 ; lc++)
 800e420:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e424:	3301      	adds	r3, #1
 800e426:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	7a5b      	ldrb	r3, [r3, #9]
 800e42e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e432:	429a      	cmp	r2, r3
 800e434:	d3ed      	bcc.n	800e412 <VL53LX_f_031+0x70>



	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e436:	2300      	movs	r3, #0
 800e438:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e43c:	e014      	b.n	800e468 <VL53LX_f_031+0xc6>
		bin_initial_index[lc] = 0x00;
 800e43e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e442:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e446:	4413      	add	r3, r2
 800e448:	2200      	movs	r2, #0
 800e44a:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 800e44e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e452:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e456:	4413      	add	r3, r2
 800e458:	2200      	movs	r2, #0
 800e45a:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e45e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e462:	3301      	adds	r3, #1
 800e464:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e468:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e46c:	2b0f      	cmp	r3, #15
 800e46e:	d9e6      	bls.n	800e43e <VL53LX_f_031+0x9c>
	}




	bin_seq_length = 0x00;
 800e470:	2300      	movs	r3, #0
 800e472:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e476:	2300      	movs	r3, #0
 800e478:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e47c:	e06c      	b.n	800e558 <VL53LX_f_031+0x1b6>

		bin_cfg = pidata->bin_seq[lc];
 800e47e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	4413      	add	r3, r2
 800e486:	7b1b      	ldrb	r3, [r3, #12]
 800e488:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 800e48c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e490:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e494:	4413      	add	r3, r2
 800e496:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d116      	bne.n	800e4cc <VL53LX_f_031+0x12a>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 800e49e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e4a2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e4a6:	0092      	lsls	r2, r2, #2
 800e4a8:	b2d2      	uxtb	r2, r2
 800e4aa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e4ae:	440b      	add	r3, r1
 800e4b0:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 800e4b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4b8:	683a      	ldr	r2, [r7, #0]
 800e4ba:	4413      	add	r3, r2
 800e4bc:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800e4c0:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 800e4c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 800e4cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e4d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e4d4:	441a      	add	r2, r3
 800e4d6:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800e4da:	3201      	adds	r2, #1
 800e4dc:	b2d2      	uxtb	r2, r2
 800e4de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e4e2:	440b      	add	r3, r1
 800e4e4:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53LX_p_032 = bin_initial_index[bin_cfg];
 800e4e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e4ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e4f0:	4413      	add	r3, r2
 800e4f2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e4f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e500:	e021      	b.n	800e546 <VL53LX_f_031+0x1a4>
			podata->bin_data[VL53LX_p_032+i] +=
 800e502:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e506:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e50a:	441a      	add	r2, r3
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	3206      	adds	r2, #6
 800e510:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 800e514:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e518:	009a      	lsls	r2, r3, #2
 800e51a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e51e:	441a      	add	r2, r3
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	3206      	adds	r2, #6
 800e524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53LX_p_032+i] +=
 800e528:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 800e52c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800e530:	4402      	add	r2, r0
 800e532:	4419      	add	r1, r3
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	3206      	adds	r2, #6
 800e538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 800e53c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e540:	3301      	adds	r3, #1
 800e542:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e546:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e54a:	2b03      	cmp	r3, #3
 800e54c:	d9d9      	bls.n	800e502 <VL53LX_f_031+0x160>
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e54e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e552:	3301      	adds	r3, #1
 800e554:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e558:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e55c:	2b05      	cmp	r3, #5
 800e55e:	d98e      	bls.n	800e47e <VL53LX_f_031+0xdc>

	}



	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e560:	2300      	movs	r3, #0
 800e562:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e566:	e023      	b.n	800e5b0 <VL53LX_f_031+0x20e>

		bin_cfg = podata->bin_seq[lc];
 800e568:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e56c:	683a      	ldr	r2, [r7, #0]
 800e56e:	4413      	add	r3, r2
 800e570:	7b1b      	ldrb	r3, [r3, #12]
 800e572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53LX_MAX_BIN_SEQUENCE_CODE)
 800e576:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e57a:	2b0f      	cmp	r3, #15
 800e57c:	d80d      	bhi.n	800e59a <VL53LX_f_031+0x1f8>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 800e57e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 800e582:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 800e586:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e58a:	440a      	add	r2, r1
 800e58c:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 800e590:	683a      	ldr	r2, [r7, #0]
 800e592:	4413      	add	r3, r2
 800e594:	460a      	mov	r2, r1
 800e596:	749a      	strb	r2, [r3, #18]
 800e598:	e005      	b.n	800e5a6 <VL53LX_f_031+0x204>
		else
			podata->bin_rep[lc] = 0;
 800e59a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e59e:	683a      	ldr	r2, [r7, #0]
 800e5a0:	4413      	add	r3, r2
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53LX_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 800e5a6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e5b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e5b4:	2b05      	cmp	r3, #5
 800e5b6:	d9d7      	bls.n	800e568 <VL53LX_f_031+0x1c6>
	}

	podata->VL53LX_p_021 = bin_seq_length * 4;
 800e5b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	b2da      	uxtb	r2, r3
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e5ca:	e052      	b.n	800e672 <VL53LX_f_031+0x2d0>

		repeat_count = (int32_t)bin_repeat_count[lc];
 800e5cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e5d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e5d4:	4413      	add	r3, r2
 800e5d6:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800e5da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 800e5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	dd42      	ble.n	800e668 <VL53LX_f_031+0x2c6>

			VL53LX_p_032 = bin_initial_index[lc];
 800e5e2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e5e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e5ea:	4413      	add	r3, r2
 800e5ec:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800e5f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e5fa:	e031      	b.n	800e660 <VL53LX_f_031+0x2be>
				podata->bin_data[VL53LX_p_032+i] +=
 800e5fc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e600:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e604:	441a      	add	r2, r3
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	3206      	adds	r2, #6
 800e60a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 800e60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e610:	0fda      	lsrs	r2, r3, #31
 800e612:	4413      	add	r3, r2
 800e614:	105b      	asrs	r3, r3, #1
 800e616:	4618      	mov	r0, r3
				podata->bin_data[VL53LX_p_032+i] +=
 800e618:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e61c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e620:	441a      	add	r2, r3
 800e622:	4401      	add	r1, r0
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	3206      	adds	r2, #6
 800e628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53LX_p_032+i] /=
 800e62c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e630:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e634:	441a      	add	r2, r3
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	3206      	adds	r2, #6
 800e63a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e63e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e642:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e646:	441a      	add	r2, r3
 800e648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64a:	fb91 f1f3 	sdiv	r1, r1, r3
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	3206      	adds	r2, #6
 800e652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 800e656:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e65a:	3301      	adds	r3, #1
 800e65c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800e660:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800e664:	2b03      	cmp	r3, #3
 800e666:	d9c9      	bls.n	800e5fc <VL53LX_f_031+0x25a>
	for (lc = 0 ; lc <= VL53LX_MAX_BIN_SEQUENCE_CODE ; lc++) {
 800e668:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e66c:	3301      	adds	r3, #1
 800e66e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800e672:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e676:	2b0f      	cmp	r3, #15
 800e678:	d9a8      	bls.n	800e5cc <VL53LX_f_031+0x22a>
		}
	}



	podata->number_of_ambient_bins = 0;
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	2200      	movs	r2, #0
 800e67e:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 800e680:	7bfb      	ldrb	r3, [r7, #15]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d102      	bne.n	800e68c <VL53LX_f_031+0x2ea>
		(bin_repeat_count[15] > 0))
 800e686:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d002      	beq.n	800e692 <VL53LX_f_031+0x2f0>
		podata->number_of_ambient_bins = 4;
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	2204      	movs	r2, #4
 800e690:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 800e692:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 800e696:	4618      	mov	r0, r3
 800e698:	3738      	adds	r7, #56	; 0x38
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <VL53LX_hist_process_data>:
	VL53LX_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53LX_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 800e69e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6a0:	b0cb      	sub	sp, #300	; 0x12c
 800e6a2:	af06      	add	r7, sp, #24
 800e6a4:	f107 040c 	add.w	r4, r7, #12
 800e6a8:	6020      	str	r0, [r4, #0]
 800e6aa:	f107 0008 	add.w	r0, r7, #8
 800e6ae:	6001      	str	r1, [r0, #0]
 800e6b0:	1d39      	adds	r1, r7, #4
 800e6b2:	600a      	str	r2, [r1, #0]
 800e6b4:	463a      	mov	r2, r7
 800e6b6:	6013      	str	r3, [r2, #0]



	VL53LX_Error  status  = VL53LX_ERROR_NONE;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53LX_hist_gen3_algo_private_data_t  *palgo_gen3 =
 800e6be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e6c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53LX_hist_gen3_algo_private_data_t *) pArea1;
	VL53LX_hist_gen4_algo_filtered_data_t *pfiltered4 =
 800e6c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e6ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53LX_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53LX_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53LX_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 800e6ce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800e6d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53LX_histogram_bin_data_t             bins_averaged;
	VL53LX_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 800e6d6:	f107 0318 	add.w	r3, r7, #24
 800e6da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53LX_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 800e700:	2300      	movs	r3, #0
 800e702:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53LX_f_031(
 800e706:	463b      	mov	r3, r7
 800e708:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800e70c:	6818      	ldr	r0, [r3, #0]
 800e70e:	f7ff fe48 	bl	800e3a2 <VL53LX_f_031>



	VL53LX_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53LX_p_021,
 800e712:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e716:	7a9b      	ldrb	r3, [r3, #10]
	VL53LX_init_histogram_bin_data_struct(
 800e718:	b299      	uxth	r1, r3
 800e71a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e71e:	3348      	adds	r3, #72	; 0x48
 800e720:	461a      	mov	r2, r3
 800e722:	2000      	movs	r0, #0
 800e724:	f7fd fb65 	bl	800bdf2 <VL53LX_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53LX_copy_xtalk_bin_data_to_histogram_data_struct(
 800e728:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800e72c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e730:	3348      	adds	r3, #72	; 0x48
 800e732:	4619      	mov	r1, r3
 800e734:	4610      	mov	r0, r2
 800e736:	f7fd fb1e 	bl	800bd76 <VL53LX_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53LX_ERROR_NONE) &&
 800e73a:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d12d      	bne.n	800e79e <VL53LX_hist_process_data+0x100>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800e742:	1d3b      	adds	r3, r7, #4
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d027      	beq.n	800e79e <VL53LX_hist_process_data+0x100>
		status =
		VL53LX_f_032(
 800e74e:	1d3b      	adds	r3, r7, #4
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800e754:	1d3b      	adds	r3, r7, #4
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 800e75c:	1d3b      	adds	r3, r7, #4
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 800e764:	463b      	mov	r3, r7
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800e76c:	463a      	mov	r2, r7
 800e76e:	6812      	ldr	r2, [r2, #0]
 800e770:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 800e774:	4639      	mov	r1, r7
 800e776:	6809      	ldr	r1, [r1, #0]
 800e778:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 800e77c:	f107 0014 	add.w	r0, r7, #20
 800e780:	9004      	str	r0, [sp, #16]
 800e782:	9103      	str	r1, [sp, #12]
 800e784:	9202      	str	r2, [sp, #8]
 800e786:	9301      	str	r3, [sp, #4]
 800e788:	2300      	movs	r3, #0
 800e78a:	9300      	str	r3, [sp, #0]
 800e78c:	2300      	movs	r3, #0
 800e78e:	4632      	mov	r2, r6
 800e790:	4629      	mov	r1, r5
 800e792:	4620      	mov	r0, r4
 800e794:	f002 f8bf 	bl	8010916 <VL53LX_f_032>
 800e798:	4603      	mov	r3, r0
 800e79a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53LX_ERROR_NONE) &&
 800e79e:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d112      	bne.n	800e7cc <VL53LX_hist_process_data+0x12e>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 800e7a6:	1d3b      	adds	r3, r7, #4
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53LX_ERROR_NONE) &&
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d00c      	beq.n	800e7cc <VL53LX_hist_process_data+0x12e>
		status =
			VL53LX_f_033(
 800e7b2:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800e7b6:	697a      	ldr	r2, [r7, #20]
 800e7b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e7bc:	3348      	adds	r3, #72	; 0x48
 800e7be:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800e7c2:	f002 faab 	bl	8010d1c <VL53LX_f_033>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 800e7cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e7d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 800e7d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e7d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53LX_p_004 =
		pbins_averaged->result__dss_actual_effective_spads;
 800e7dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e7e0:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53LX_p_004 =
 800e7e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e7e8:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 800e7ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53LX_p_009     = 0;
 800e7f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 800e800:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e804:	2200      	movs	r2, #0
 800e806:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53LX_DEVICEERROR_NOUPDATE;
 800e80a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e80e:	2200      	movs	r2, #0
 800e810:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 800e814:	2300      	movs	r3, #0
 800e816:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 800e81a:	1d3b      	adds	r3, r7, #4
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e822:	2b00      	cmp	r3, #0
 800e824:	d002      	beq.n	800e82c <VL53LX_hist_process_data+0x18e>
		xtalk_enable = 1;
 800e826:	2301      	movs	r3, #1
 800e828:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 800e82c:	2300      	movs	r3, #0
 800e82e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800e832:	e0ef      	b.n	800ea14 <VL53LX_hist_process_data+0x376>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 800e834:	1d3b      	adds	r3, r7, #4
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800e83c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53LX_f_025(
 800e840:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e844:	3348      	adds	r3, #72	; 0x48
 800e846:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800e84a:	7814      	ldrb	r4, [r2, #0]
 800e84c:	1d3a      	adds	r2, r7, #4
 800e84e:	f107 0108 	add.w	r1, r7, #8
 800e852:	f107 000c 	add.w	r0, r7, #12
 800e856:	9405      	str	r4, [sp, #20]
 800e858:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800e85c:	9404      	str	r4, [sp, #16]
 800e85e:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 800e862:	9403      	str	r4, [sp, #12]
 800e864:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 800e868:	9402      	str	r4, [sp, #8]
 800e86a:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800e86e:	9401      	str	r4, [sp, #4]
 800e870:	9300      	str	r3, [sp, #0]
 800e872:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e876:	6812      	ldr	r2, [r2, #0]
 800e878:	6809      	ldr	r1, [r1, #0]
 800e87a:	6800      	ldr	r0, [r0, #0]
 800e87c:	f7fe fec1 	bl	800d602 <VL53LX_f_025>
 800e880:	4603      	mov	r3, r0
 800e882:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53LX_ERROR_NONE && r == 0))
 800e886:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	f040 80bc 	bne.w	800ea08 <VL53LX_hist_process_data+0x36a>
 800e890:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800e894:	2b00      	cmp	r3, #0
 800e896:	f040 80b7 	bne.w	800ea08 <VL53LX_hist_process_data+0x36a>
			continue;



		if (presults->active_results == 0) {
 800e89a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e89e:	7c9b      	ldrb	r3, [r3, #18]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d110      	bne.n	800e8c6 <VL53LX_hist_process_data+0x228>
			pdata = &(presults->VL53LX_p_003[0]);
 800e8a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e8a8:	3314      	adds	r3, #20
 800e8aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53LX_p_034;
 800e8ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e8b2:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 800e8b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e8b8:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53LX_p_004 =
				pdmax_algo_gen3->VL53LX_p_004;
 800e8ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e8be:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53LX_p_004 =
 800e8c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e8c4:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 800e8c6:	1d3b      	adds	r3, r7, #4
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 800e8cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 800e8d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e8dc:	fb02 f303 	mul.w	r3, r2, r3
 800e8e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 800e8e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e8e8:	011b      	lsls	r3, r3, #4
 800e8ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800e8f4:	e07f      	b.n	800e9f6 <VL53LX_hist_process_data+0x358>

			pdata = &(presults->VL53LX_p_003[t]);
 800e8f6:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800e8fa:	224c      	movs	r2, #76	; 0x4c
 800e8fc:	fb02 f303 	mul.w	r3, r2, r3
 800e900:	3310      	adds	r3, #16
 800e902:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800e906:	4413      	add	r3, r2
 800e908:	3304      	adds	r3, #4
 800e90a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 800e90e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e912:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800e916:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e91a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800e91e:	429a      	cmp	r2, r3
 800e920:	dd0e      	ble.n	800e940 <VL53LX_hist_process_data+0x2a2>
				delta_mm =
					pdata->max_range_mm -
 800e922:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e926:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800e92a:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 800e92c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e930:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800e934:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 800e936:	1ad3      	subs	r3, r2, r3
 800e938:	b29b      	uxth	r3, r3
				delta_mm =
 800e93a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800e93e:	e00d      	b.n	800e95c <VL53LX_hist_process_data+0x2be>
			else
				delta_mm =
					pdata->min_range_mm -
 800e940:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e944:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800e948:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 800e94a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e94e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800e952:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 800e954:	1ad3      	subs	r3, r2, r3
 800e956:	b29b      	uxth	r3, r3
				delta_mm =
 800e958:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 800e95c:	1d3b      	adds	r3, r7, #4
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 800e962:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 800e966:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	461a      	mov	r2, r3
 800e96e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e972:	fb02 f303 	mul.w	r3, r2, r3
 800e976:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 800e97a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e97e:	015b      	lsls	r3, r3, #5
 800e980:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 800e984:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e988:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800e98c:	1d3b      	adds	r3, r7, #4
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 800e994:	429a      	cmp	r2, r3
 800e996:	dd29      	ble.n	800e9ec <VL53LX_hist_process_data+0x34e>
			pdata->median_range_mm  <
 800e998:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e99c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800e9a0:	1d3b      	adds	r3, r7, #4
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	da1f      	bge.n	800e9ec <VL53LX_hist_process_data+0x34e>
			pdata->VL53LX_p_009 <
 800e9ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 800e9b2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d918      	bls.n	800e9ec <VL53LX_hist_process_data+0x34e>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800e9ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e9be:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e9c0:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 800e9c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	d910      	bls.n	800e9ec <VL53LX_hist_process_data+0x34e>
			delta_mm <
 800e9ca:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 800e9ce:	1d3a      	adds	r2, r7, #4
 800e9d0:	6812      	ldr	r2, [r2, #0]
 800e9d2:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53LX_p_002 < XtalkDetectMaxSigma &&
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	da09      	bge.n	800e9ec <VL53LX_hist_process_data+0x34e>



				memcpy(
					&(presults->xmonitor),
 800e9d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e9dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 800e9e0:	224c      	movs	r2, #76	; 0x4c
 800e9e2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f005 fce0 	bl	80143ac <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 800e9ec:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 800e9f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e9fa:	7c9b      	ldrb	r3, [r3, #18]
 800e9fc:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 800ea00:	429a      	cmp	r2, r3
 800ea02:	f4ff af78 	bcc.w	800e8f6 <VL53LX_hist_process_data+0x258>
 800ea06:	e000      	b.n	800ea0a <VL53LX_hist_process_data+0x36c>
			continue;
 800ea08:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 800ea0a:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800ea0e:	3301      	adds	r3, #1
 800ea10:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 800ea14:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800ea18:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	f67f af09 	bls.w	800e834 <VL53LX_hist_process_data+0x196>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 800ea22:	1d3b      	adds	r3, r7, #4
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800ea2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 800ea2e:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea3c <VL53LX_nvm_enable>:

VL53LX_Error VL53LX_nvm_enable(
	VL53LX_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b086      	sub	sp, #24
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	460b      	mov	r3, r1
 800ea46:	607a      	str	r2, [r7, #4]
 800ea48:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53LX_ERROR_NONE)
 800ea4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d104      	bne.n	800ea60 <VL53LX_nvm_enable+0x24>
		status = VL53LX_disable_firmware(Dev);
 800ea56:	68f8      	ldr	r0, [r7, #12]
 800ea58:	f7f9 fe88 	bl	800876c <VL53LX_disable_firmware>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	75fb      	strb	r3, [r7, #23]




	if (status == VL53LX_ERROR_NONE)
 800ea60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d104      	bne.n	800ea72 <VL53LX_nvm_enable+0x36>
		status = VL53LX_enable_powerforce(Dev);
 800ea68:	68f8      	ldr	r0, [r7, #12]
 800ea6a:	f7f9 feb0 	bl	80087ce <VL53LX_enable_powerforce>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	75fb      	strb	r3, [r7, #23]



	if (status == VL53LX_ERROR_NONE)
 800ea72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d105      	bne.n	800ea86 <VL53LX_nvm_enable+0x4a>
		status = VL53LX_WaitUs(
 800ea7a:	21fa      	movs	r1, #250	; 0xfa
 800ea7c:	68f8      	ldr	r0, [r7, #12]
 800ea7e:	f002 fb9d 	bl	80111bc <VL53LX_WaitUs>
 800ea82:	4603      	mov	r3, r0
 800ea84:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53LX_ERROR_NONE)
 800ea86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d107      	bne.n	800ea9e <VL53LX_nvm_enable+0x62>
		status = VL53LX_WrByte(
 800ea8e:	2201      	movs	r2, #1
 800ea90:	f240 7181 	movw	r1, #1921	; 0x781
 800ea94:	68f8      	ldr	r0, [r7, #12]
 800ea96:	f002 fa9d 	bl	8010fd4 <VL53LX_WrByte>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800ea9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d107      	bne.n	800eab6 <VL53LX_nvm_enable+0x7a>
		status = VL53LX_WrByte(
 800eaa6:	2205      	movs	r2, #5
 800eaa8:	f240 6183 	movw	r1, #1667	; 0x683
 800eaac:	68f8      	ldr	r0, [r7, #12]
 800eaae:	f002 fa91 	bl	8010fd4 <VL53LX_WrByte>
 800eab2:	4603      	mov	r3, r0
 800eab4:	75fb      	strb	r3, [r7, #23]
					VL53LX_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53LX_ERROR_NONE)
 800eab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d105      	bne.n	800eaca <VL53LX_nvm_enable+0x8e>
		status = VL53LX_WaitUs(
 800eabe:	6879      	ldr	r1, [r7, #4]
 800eac0:	68f8      	ldr	r0, [r7, #12]
 800eac2:	f002 fb7b 	bl	80111bc <VL53LX_WaitUs>
 800eac6:	4603      	mov	r3, r0
 800eac8:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53LX_ERROR_NONE)
 800eaca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d107      	bne.n	800eae2 <VL53LX_nvm_enable+0xa6>
		status = VL53LX_WrByte(
 800ead2:	2201      	movs	r2, #1
 800ead4:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800ead8:	68f8      	ldr	r0, [r7, #12]
 800eada:	f002 fa7b 	bl	8010fd4 <VL53LX_WrByte>
 800eade:	4603      	mov	r3, r0
 800eae0:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53LX_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53LX_ERROR_NONE)
 800eae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d108      	bne.n	800eafc <VL53LX_nvm_enable+0xc0>
		status = VL53LX_WrWord(
 800eaea:	897b      	ldrh	r3, [r7, #10]
 800eaec:	461a      	mov	r2, r3
 800eaee:	f240 7184 	movw	r1, #1924	; 0x784
 800eaf2:	68f8      	ldr	r0, [r7, #12]
 800eaf4:	f002 fa98 	bl	8011028 <VL53LX_WrWord>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	75fb      	strb	r3, [r7, #23]
			VL53LX_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 800eafc:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3718      	adds	r7, #24
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <VL53LX_nvm_read>:
VL53LX_Error VL53LX_nvm_read(
	VL53LX_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b086      	sub	sp, #24
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	60f8      	str	r0, [r7, #12]
 800eb10:	607b      	str	r3, [r7, #4]
 800eb12:	460b      	mov	r3, r1
 800eb14:	72fb      	strb	r3, [r7, #11]
 800eb16:	4613      	mov	r3, r2
 800eb18:	72bb      	strb	r3, [r7, #10]


	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53LX_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 800eb22:	7afb      	ldrb	r3, [r7, #11]
 800eb24:	75bb      	strb	r3, [r7, #22]
 800eb26:	e041      	b.n	800ebac <VL53LX_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53LX_ERROR_NONE)
 800eb28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d108      	bne.n	800eb42 <VL53LX_nvm_read+0x3a>
			status = VL53LX_WrByte(
 800eb30:	7dbb      	ldrb	r3, [r7, #22]
 800eb32:	461a      	mov	r2, r3
 800eb34:	f240 7194 	movw	r1, #1940	; 0x794
 800eb38:	68f8      	ldr	r0, [r7, #12]
 800eb3a:	f002 fa4b 	bl	8010fd4 <VL53LX_WrByte>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53LX_ERROR_NONE)
 800eb42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d107      	bne.n	800eb5a <VL53LX_nvm_read+0x52>
			status = VL53LX_WrByte(
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	f240 7183 	movw	r1, #1923	; 0x783
 800eb50:	68f8      	ldr	r0, [r7, #12]
 800eb52:	f002 fa3f 	bl	8010fd4 <VL53LX_WrByte>
 800eb56:	4603      	mov	r3, r0
 800eb58:	75fb      	strb	r3, [r7, #23]
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53LX_ERROR_NONE)
 800eb5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d105      	bne.n	800eb6e <VL53LX_nvm_read+0x66>
			status = VL53LX_WaitUs(
 800eb62:	2105      	movs	r1, #5
 800eb64:	68f8      	ldr	r0, [r7, #12]
 800eb66:	f002 fb29 	bl	80111bc <VL53LX_WaitUs>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53LX_ERROR_NONE)
 800eb6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d107      	bne.n	800eb86 <VL53LX_nvm_read+0x7e>
			status = VL53LX_WrByte(
 800eb76:	2201      	movs	r2, #1
 800eb78:	f240 7183 	movw	r1, #1923	; 0x783
 800eb7c:	68f8      	ldr	r0, [r7, #12]
 800eb7e:	f002 fa29 	bl	8010fd4 <VL53LX_WrByte>
 800eb82:	4603      	mov	r3, r0
 800eb84:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53LX_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53LX_ERROR_NONE)
 800eb86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d108      	bne.n	800eba0 <VL53LX_nvm_read+0x98>
			status = VL53LX_ReadMulti(
 800eb8e:	2304      	movs	r3, #4
 800eb90:	687a      	ldr	r2, [r7, #4]
 800eb92:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 800eb96:	68f8      	ldr	r0, [r7, #12]
 800eb98:	f002 f9e6 	bl	8010f68 <VL53LX_ReadMulti>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	3304      	adds	r3, #4
 800eba4:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 800eba6:	7dbb      	ldrb	r3, [r7, #22]
 800eba8:	3301      	adds	r3, #1
 800ebaa:	75bb      	strb	r3, [r7, #22]
 800ebac:	7dba      	ldrb	r2, [r7, #22]
 800ebae:	7af9      	ldrb	r1, [r7, #11]
 800ebb0:	7abb      	ldrb	r3, [r7, #10]
 800ebb2:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	dbb7      	blt.n	800eb28 <VL53LX_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 800ebb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3718      	adds	r7, #24
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <VL53LX_nvm_disable>:


VL53LX_Error VL53LX_nvm_disable(
	VL53LX_DEV    Dev)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800ebd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d107      	bne.n	800ebe8 <VL53LX_nvm_disable+0x24>
		status = VL53LX_WrByte(
 800ebd8:	2201      	movs	r2, #1
 800ebda:	f240 7183 	movw	r1, #1923	; 0x783
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f002 f9f8 	bl	8010fd4 <VL53LX_WrByte>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53LX_ERROR_NONE)
 800ebe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d107      	bne.n	800ec00 <VL53LX_nvm_disable+0x3c>
		status = VL53LX_WrByte(
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	f240 7181 	movw	r1, #1921	; 0x781
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f002 f9ec 	bl	8010fd4 <VL53LX_WrByte>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	73fb      	strb	r3, [r7, #15]
					VL53LX_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53LX_ERROR_NONE)
 800ec00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d104      	bne.n	800ec12 <VL53LX_nvm_disable+0x4e>
		status = VL53LX_disable_powerforce(Dev);
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f7f9 fdf2 	bl	80087f2 <VL53LX_disable_powerforce>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	73fb      	strb	r3, [r7, #15]



	if (status == VL53LX_ERROR_NONE)
 800ec12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d104      	bne.n	800ec24 <VL53LX_nvm_disable+0x60>
		status = VL53LX_enable_firmware(Dev);
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f7f9 fd94 	bl	8008748 <VL53LX_enable_firmware>
 800ec20:	4603      	mov	r3, r0
 800ec22:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800ec24:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3710      	adds	r7, #16
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <VL53LX_nvm_decode_optical_centre>:

VL53LX_Error VL53LX_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_optical_centre_t    *pdata)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b087      	sub	sp, #28
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	4603      	mov	r3, r0
 800ec38:	60b9      	str	r1, [r7, #8]
 800ec3a:	607a      	str	r2, [r7, #4]
 800ec3c:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ec3e:	2300      	movs	r3, #0
 800ec40:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 800ec42:	2300      	movs	r3, #0
 800ec44:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53LX_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 800ec46:	89fb      	ldrh	r3, [r7, #14]
 800ec48:	2b03      	cmp	r3, #3
 800ec4a:	d802      	bhi.n	800ec52 <VL53LX_nvm_decode_optical_centre+0x22>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ec4c:	f06f 0308 	mvn.w	r3, #8
 800ec50:	e018      	b.n	800ec84 <VL53LX_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 800ec52:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec56:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	3302      	adds	r3, #2
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	8afa      	ldrh	r2, [r7, #22]
 800ec62:	1ad3      	subs	r3, r2, r3
 800ec64:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 800ec66:	8afb      	ldrh	r3, [r7, #22]
 800ec68:	2bff      	cmp	r3, #255	; 0xff
 800ec6a:	d901      	bls.n	800ec70 <VL53LX_nvm_decode_optical_centre+0x40>
		tmp = 0;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 800ec70:	8afb      	ldrh	r3, [r7, #22]
 800ec72:	b2da      	uxtb	r2, r3
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	78da      	ldrb	r2, [r3, #3]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	705a      	strb	r2, [r3, #1]

	return status;
 800ec80:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	371c      	adds	r7, #28
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr

0800ec90 <VL53LX_nvm_decode_cal_peak_rate_map>:

VL53LX_Error VL53LX_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53LX_cal_peak_rate_map_t *pdata)
{
 800ec90:	b590      	push	{r4, r7, lr}
 800ec92:	b087      	sub	sp, #28
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	4603      	mov	r3, r0
 800ec98:	60b9      	str	r1, [r7, #8]
 800ec9a:	607a      	str	r2, [r7, #4]
 800ec9c:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 800eca2:	2300      	movs	r3, #0
 800eca4:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 800eca6:	2300      	movs	r3, #0
 800eca8:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53LX_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 800ecaa:	89fb      	ldrh	r3, [r7, #14]
 800ecac:	2b37      	cmp	r3, #55	; 0x37
 800ecae:	d802      	bhi.n	800ecb6 <VL53LX_nvm_decode_cal_peak_rate_map+0x26>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ecb0:	f06f 0308 	mvn.w	r3, #8
 800ecb4:	e03e      	b.n	800ed34 <VL53LX_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800ecb6:	68b9      	ldr	r1, [r7, #8]
 800ecb8:	2002      	movs	r0, #2
 800ecba:	f7f9 fc2b 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	3302      	adds	r3, #2
 800ecca:	4619      	mov	r1, r3
 800eccc:	2002      	movs	r0, #2
 800ecce:	f7f9 fc21 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 800ecde:	099b      	lsrs	r3, r3, #6
 800ece0:	b29a      	uxth	r2, r3
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53LX_NVM_PEAK_RATE_MAP_SAMPLES;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2219      	movs	r2, #25
 800ecea:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53LX_NVM_PEAK_RATE_MAP_WIDTH;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2205      	movs	r2, #5
 800ecf0:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53LX_NVM_PEAK_RATE_MAP_HEIGHT;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2205      	movs	r2, #5
 800ecf6:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	3304      	adds	r3, #4
 800ecfc:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800ecfe:	2300      	movs	r3, #0
 800ed00:	74fb      	strb	r3, [r7, #19]
 800ed02:	e012      	b.n	800ed2a <VL53LX_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 800ed04:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53LX_i2c_decode_uint16_t(2, ptmp);
 800ed06:	6979      	ldr	r1, [r7, #20]
 800ed08:	2002      	movs	r0, #2
 800ed0a:	f7f9 fc03 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 800ed12:	687a      	ldr	r2, [r7, #4]
 800ed14:	1d23      	adds	r3, r4, #4
 800ed16:	005b      	lsls	r3, r3, #1
 800ed18:	4413      	add	r3, r2
 800ed1a:	460a      	mov	r2, r1
 800ed1c:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	3302      	adds	r3, #2
 800ed22:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53LX_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 800ed24:	7cfb      	ldrb	r3, [r7, #19]
 800ed26:	3301      	adds	r3, #1
 800ed28:	74fb      	strb	r3, [r7, #19]
 800ed2a:	7cfb      	ldrb	r3, [r7, #19]
 800ed2c:	2b18      	cmp	r3, #24
 800ed2e:	d9e9      	bls.n	800ed04 <VL53LX_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 800ed30:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	371c      	adds	r7, #28
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd90      	pop	{r4, r7, pc}

0800ed3c <VL53LX_nvm_decode_additional_offset_cal_data>:

VL53LX_Error VL53LX_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_additional_offset_cal_data_t *pdata)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b086      	sub	sp, #24
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	4603      	mov	r3, r0
 800ed44:	60b9      	str	r1, [r7, #8]
 800ed46:	607a      	str	r2, [r7, #4]
 800ed48:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 800ed4e:	89fb      	ldrh	r3, [r7, #14]
 800ed50:	2b07      	cmp	r3, #7
 800ed52:	d802      	bhi.n	800ed5a <VL53LX_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800ed54:	f06f 0308 	mvn.w	r3, #8
 800ed58:	e027      	b.n	800edaa <VL53LX_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800ed5a:	68b9      	ldr	r1, [r7, #8]
 800ed5c:	2002      	movs	r0, #2
 800ed5e:	f7f9 fbd9 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800ed62:	4603      	mov	r3, r0
 800ed64:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 2);
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	3302      	adds	r3, #2
 800ed6e:	4619      	mov	r1, r3
 800ed70:	2002      	movs	r0, #2
 800ed72:	f7f9 fbcf 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800ed76:	4603      	mov	r3, r0
 800ed78:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	3304      	adds	r3, #4
 800ed82:	4619      	mov	r1, r3
 800ed84:	2002      	movs	r0, #2
 800ed86:	f7f9 fbc5 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	3306      	adds	r3, #6
 800ed96:	4619      	mov	r1, r3
 800ed98:	2002      	movs	r0, #2
 800ed9a:	f7f9 fbbb 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	80da      	strh	r2, [r3, #6]

	return status;
 800eda6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3718      	adds	r7, #24
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}

0800edb2 <VL53LX_nvm_decode_fmt_range_results_data>:

VL53LX_Error VL53LX_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53LX_decoded_nvm_fmt_range_data_t *pdata)
{
 800edb2:	b580      	push	{r7, lr}
 800edb4:	b086      	sub	sp, #24
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	4603      	mov	r3, r0
 800edba:	60b9      	str	r1, [r7, #8]
 800edbc:	607a      	str	r2, [r7, #4]
 800edbe:	81fb      	strh	r3, [r7, #14]

	VL53LX_Error status   = VL53LX_ERROR_NONE;
 800edc0:	2300      	movs	r3, #0
 800edc2:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 800edc4:	89fb      	ldrh	r3, [r7, #14]
 800edc6:	2b0f      	cmp	r3, #15
 800edc8:	d802      	bhi.n	800edd0 <VL53LX_nvm_decode_fmt_range_results_data+0x1e>
		return VL53LX_ERROR_BUFFER_TOO_SMALL;
 800edca:	f06f 0308 	mvn.w	r3, #8
 800edce:	e04d      	b.n	800ee6c <VL53LX_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer);
 800edd0:	68b9      	ldr	r1, [r7, #8]
 800edd2:	2002      	movs	r0, #2
 800edd4:	f7f9 fb9e 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800edd8:	4603      	mov	r3, r0
 800edda:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	789a      	ldrb	r2, [r3, #2]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	78da      	ldrb	r2, [r3, #3]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 4);
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	3304      	adds	r3, #4
 800edf4:	4619      	mov	r1, r3
 800edf6:	2002      	movs	r0, #2
 800edf8:	f7f9 fb8c 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800edfc:	4603      	mov	r3, r0
 800edfe:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 6);
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	3306      	adds	r3, #6
 800ee08:	4619      	mov	r1, r3
 800ee0a:	2002      	movs	r0, #2
 800ee0c:	f7f9 fb82 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800ee10:	4603      	mov	r3, r0
 800ee12:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 8);
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	3308      	adds	r3, #8
 800ee1c:	4619      	mov	r1, r3
 800ee1e:	2002      	movs	r0, #2
 800ee20:	f7f9 fb78 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800ee24:	4603      	mov	r3, r0
 800ee26:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 10);
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	330a      	adds	r3, #10
 800ee30:	4619      	mov	r1, r3
 800ee32:	2002      	movs	r0, #2
 800ee34:	f7f9 fb6e 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 12);
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	330c      	adds	r3, #12
 800ee44:	4619      	mov	r1, r3
 800ee46:	2002      	movs	r0, #2
 800ee48:	f7f9 fb64 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53LX_i2c_decode_uint16_t(2, pbuffer + 14);
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	330e      	adds	r3, #14
 800ee58:	4619      	mov	r1, r3
 800ee5a:	2002      	movs	r0, #2
 800ee5c:	f7f9 fb5a 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800ee60:	4603      	mov	r3, r0
 800ee62:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	81da      	strh	r2, [r3, #14]

	return status;
 800ee68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3718      	adds	r7, #24
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}

0800ee74 <VL53LX_read_nvm_raw_data>:
VL53LX_Error VL53LX_read_nvm_raw_data(
	VL53LX_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b086      	sub	sp, #24
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	60f8      	str	r0, [r7, #12]
 800ee7c:	607b      	str	r3, [r7, #4]
 800ee7e:	460b      	mov	r3, r1
 800ee80:	72fb      	strb	r3, [r7, #11]
 800ee82:	4613      	mov	r3, r2
 800ee84:	72bb      	strb	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ee86:	2300      	movs	r3, #0
 800ee88:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53LX_ERROR_NONE)
 800ee8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d106      	bne.n	800eea0 <VL53LX_read_nvm_raw_data+0x2c>
		status = VL53LX_nvm_enable(
 800ee92:	2232      	movs	r2, #50	; 0x32
 800ee94:	2104      	movs	r1, #4
 800ee96:	68f8      	ldr	r0, [r7, #12]
 800ee98:	f7ff fdd0 	bl	800ea3c <VL53LX_nvm_enable>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53LX_NVM_POWER_UP_DELAY_US);



	if (status == VL53LX_ERROR_NONE)
 800eea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d107      	bne.n	800eeb8 <VL53LX_read_nvm_raw_data+0x44>
		status = VL53LX_nvm_read(
 800eea8:	7aba      	ldrb	r2, [r7, #10]
 800eeaa:	7af9      	ldrb	r1, [r7, #11]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	68f8      	ldr	r0, [r7, #12]
 800eeb0:	f7ff fe2a 	bl	800eb08 <VL53LX_nvm_read>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53LX_ERROR_NONE)
 800eeb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d104      	bne.n	800eeca <VL53LX_read_nvm_raw_data+0x56>
		status = VL53LX_nvm_disable(Dev);
 800eec0:	68f8      	ldr	r0, [r7, #12]
 800eec2:	f7ff fe7f 	bl	800ebc4 <VL53LX_nvm_disable>
 800eec6:	4603      	mov	r3, r0
 800eec8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 800eeca:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800eece:	4618      	mov	r0, r3
 800eed0:	3718      	adds	r7, #24
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <VL53LX_read_nvm_optical_centre>:


VL53LX_Error VL53LX_read_nvm_optical_centre(
	VL53LX_DEV                        Dev,
	VL53LX_optical_centre_t          *pcentre)
{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b084      	sub	sp, #16
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
 800eede:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800eee0:	2300      	movs	r3, #0
 800eee2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800eee4:	f107 0308 	add.w	r3, r7, #8
 800eee8:	2201      	movs	r2, #1
 800eeea:	212e      	movs	r1, #46	; 0x2e
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f7ff ffc1 	bl	800ee74 <VL53LX_read_nvm_raw_data>
 800eef2:	4603      	mov	r3, r0
 800eef4:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800eef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d108      	bne.n	800ef10 <VL53LX_read_nvm_optical_centre+0x3a>
		status =
			VL53LX_nvm_decode_optical_centre(
 800eefe:	f107 0308 	add.w	r3, r7, #8
 800ef02:	683a      	ldr	r2, [r7, #0]
 800ef04:	4619      	mov	r1, r3
 800ef06:	2004      	movs	r0, #4
 800ef08:	f7ff fe92 	bl	800ec30 <VL53LX_nvm_decode_optical_centre>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 800ef10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3710      	adds	r7, #16
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <VL53LX_read_nvm_cal_peak_rate_map>:


VL53LX_Error VL53LX_read_nvm_cal_peak_rate_map(
	VL53LX_DEV                           Dev,
	VL53LX_cal_peak_rate_map_t          *pcal_data)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b092      	sub	sp, #72	; 0x48
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ef26:	2300      	movs	r3, #0
 800ef28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800ef2c:	f107 030c 	add.w	r3, r7, #12
 800ef30:	220e      	movs	r2, #14
 800ef32:	2157      	movs	r1, #87	; 0x57
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f7ff ff9d 	bl	800ee74 <VL53LX_read_nvm_raw_data>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800ef40:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d109      	bne.n	800ef5c <VL53LX_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53LX_nvm_decode_cal_peak_rate_map(
 800ef48:	f107 030c 	add.w	r3, r7, #12
 800ef4c:	683a      	ldr	r2, [r7, #0]
 800ef4e:	4619      	mov	r1, r3
 800ef50:	2038      	movs	r0, #56	; 0x38
 800ef52:	f7ff fe9d 	bl	800ec90 <VL53LX_nvm_decode_cal_peak_rate_map>
 800ef56:	4603      	mov	r3, r0
 800ef58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800ef5c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3748      	adds	r7, #72	; 0x48
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <VL53LX_read_nvm_additional_offset_cal_data>:


VL53LX_Error VL53LX_read_nvm_additional_offset_cal_data(
	VL53LX_DEV                           Dev,
	VL53LX_additional_offset_cal_data_t *pcal_data)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b086      	sub	sp, #24
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	6039      	str	r1, [r7, #0]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ef72:	2300      	movs	r3, #0
 800ef74:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53LX_read_nvm_raw_data(
 800ef76:	f107 030c 	add.w	r3, r7, #12
 800ef7a:	2202      	movs	r2, #2
 800ef7c:	2165      	movs	r1, #101	; 0x65
 800ef7e:	6878      	ldr	r0, [r7, #4]
 800ef80:	f7ff ff78 	bl	800ee74 <VL53LX_read_nvm_raw_data>
 800ef84:	4603      	mov	r3, r0
 800ef86:	75fb      	strb	r3, [r7, #23]
			VL53LX_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800ef88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d108      	bne.n	800efa2 <VL53LX_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53LX_nvm_decode_additional_offset_cal_data(
 800ef90:	f107 030c 	add.w	r3, r7, #12
 800ef94:	683a      	ldr	r2, [r7, #0]
 800ef96:	4619      	mov	r1, r3
 800ef98:	2008      	movs	r0, #8
 800ef9a:	f7ff fecf 	bl	800ed3c <VL53LX_nvm_decode_additional_offset_cal_data>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 800efa2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3718      	adds	r7, #24
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}

0800efae <VL53LX_read_nvm_fmt_range_results_data>:

VL53LX_Error VL53LX_read_nvm_fmt_range_results_data(
	VL53LX_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53LX_decoded_nvm_fmt_range_data_t *prange_data)
{
 800efae:	b580      	push	{r7, lr}
 800efb0:	b08a      	sub	sp, #40	; 0x28
 800efb2:	af00      	add	r7, sp, #0
 800efb4:	60f8      	str	r0, [r7, #12]
 800efb6:	460b      	mov	r3, r1
 800efb8:	607a      	str	r2, [r7, #4]
 800efba:	817b      	strh	r3, [r7, #10]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 800efbc:	2300      	movs	r3, #0
 800efbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53LX_read_nvm_raw_data(
 800efc2:	897b      	ldrh	r3, [r7, #10]
 800efc4:	089b      	lsrs	r3, r3, #2
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	b2d9      	uxtb	r1, r3
 800efca:	f107 0314 	add.w	r3, r7, #20
 800efce:	2204      	movs	r2, #4
 800efd0:	68f8      	ldr	r0, [r7, #12]
 800efd2:	f7ff ff4f 	bl	800ee74 <VL53LX_read_nvm_raw_data>
 800efd6:	4603      	mov	r3, r0
 800efd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53LX_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53LX_ERROR_NONE)
 800efdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d109      	bne.n	800eff8 <VL53LX_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53LX_nvm_decode_fmt_range_results_data(
 800efe4:	f107 0314 	add.w	r3, r7, #20
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	4619      	mov	r1, r3
 800efec:	2010      	movs	r0, #16
 800efee:	f7ff fee0 	bl	800edb2 <VL53LX_nvm_decode_fmt_range_results_data>
 800eff2:	4603      	mov	r3, r0
 800eff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 800eff8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 800effc:	4618      	mov	r0, r3
 800effe:	3728      	adds	r7, #40	; 0x28
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <VL53LX_i2c_encode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_static_nvm_managed(
	VL53LX_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b086      	sub	sp, #24
 800f008:	af00      	add	r7, sp, #0
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	460b      	mov	r3, r1
 800f00e:	607a      	str	r2, [r7, #4]
 800f010:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f012:	2300      	movs	r3, #0
 800f014:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f016:	897b      	ldrh	r3, [r7, #10]
 800f018:	2b0a      	cmp	r3, #10
 800f01a:	d802      	bhi.n	800f022 <VL53LX_i2c_encode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f01c:	f06f 0309 	mvn.w	r3, #9
 800f020:	e047      	b.n	800f0b2 <VL53LX_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f02a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800f038:	f002 020f 	and.w	r2, r2, #15
 800f03c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f03e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800f048:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f04c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f04e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800f058:	f002 0203 	and.w	r2, r2, #3
 800f05c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f05e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800f068:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f06c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f06e:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	88d8      	ldrh	r0, [r3, #6]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	3305      	adds	r3, #5
 800f078:	461a      	mov	r2, r3
 800f07a:	2102      	movs	r1, #2
 800f07c:	f7f9 fa1f 	bl	80084be <VL53LX_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800f084:	68fa      	ldr	r2, [r7, #12]
 800f086:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f088:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800f08e:	68fa      	ldr	r2, [r7, #12]
 800f090:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f092:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800f09c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f0a0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f0a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800f0a8:	68fa      	ldr	r2, [r7, #12]
 800f0aa:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800f0ac:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f0ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3718      	adds	r7, #24
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}

0800f0ba <VL53LX_i2c_decode_static_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f0ba:	b580      	push	{r7, lr}
 800f0bc:	b086      	sub	sp, #24
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	60b9      	str	r1, [r7, #8]
 800f0c4:	607a      	str	r2, [r7, #4]
 800f0c6:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 800f0cc:	89fb      	ldrh	r3, [r7, #14]
 800f0ce:	2b0a      	cmp	r3, #10
 800f0d0:	d802      	bhi.n	800f0d8 <VL53LX_i2c_decode_static_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f0d2:	f06f 0309 	mvn.w	r3, #9
 800f0d6:	e046      	b.n	800f166 <VL53LX_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0e0:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	f003 030f 	and.w	r3, r3, #15
 800f0f0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	3302      	adds	r3, #2
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f100:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	3303      	adds	r3, #3
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	f003 0303 	and.w	r3, r3, #3
 800f110:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	3304      	adds	r3, #4
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f120:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   5));
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	3305      	adds	r3, #5
 800f12a:	4619      	mov	r1, r3
 800f12c:	2002      	movs	r0, #2
 800f12e:	f7f9 f9f1 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800f132:	4603      	mov	r3, r0
 800f134:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	79da      	ldrb	r2, [r3, #7]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	7a1a      	ldrb	r2, [r3, #8]
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	3309      	adds	r3, #9
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f154:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	7a9a      	ldrb	r2, [r3, #10]
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800f162:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f166:	4618      	mov	r0, r3
 800f168:	3718      	adds	r7, #24
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}

0800f16e <VL53LX_get_static_nvm_managed>:


VL53LX_Error VL53LX_get_static_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_static_nvm_managed_t  *pdata)
{
 800f16e:	b580      	push	{r7, lr}
 800f170:	b086      	sub	sp, #24
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
 800f176:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f178:	2300      	movs	r3, #0
 800f17a:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f17c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d108      	bne.n	800f196 <VL53LX_get_static_nvm_managed+0x28>
		status = VL53LX_ReadMulti(
 800f184:	f107 020c 	add.w	r2, r7, #12
 800f188:	230b      	movs	r3, #11
 800f18a:	2101      	movs	r1, #1
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f001 feeb 	bl	8010f68 <VL53LX_ReadMulti>
 800f192:	4603      	mov	r3, r0
 800f194:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53LX_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53LX_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f196:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d108      	bne.n	800f1b0 <VL53LX_get_static_nvm_managed+0x42>
		status = VL53LX_i2c_decode_static_nvm_managed(
 800f19e:	f107 030c 	add.w	r3, r7, #12
 800f1a2:	683a      	ldr	r2, [r7, #0]
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	200b      	movs	r0, #11
 800f1a8:	f7ff ff87 	bl	800f0ba <VL53LX_i2c_decode_static_nvm_managed>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800f1b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3718      	adds	r7, #24
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}

0800f1bc <VL53LX_i2c_encode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_encode_customer_nvm_managed(
	VL53LX_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b086      	sub	sp, #24
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	460b      	mov	r3, r1
 800f1c6:	607a      	str	r2, [r7, #4]
 800f1c8:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f1ce:	897b      	ldrh	r3, [r7, #10]
 800f1d0:	2b16      	cmp	r3, #22
 800f1d2:	d802      	bhi.n	800f1da <VL53LX_i2c_encode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f1d4:	f06f 0309 	mvn.w	r3, #9
 800f1d8:	e076      	b.n	800f2c8 <VL53LX_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800f1e6:	68fa      	ldr	r2, [r7, #12]
 800f1e8:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f1ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800f1f0:	68fa      	ldr	r2, [r7, #12]
 800f1f2:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f1f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800f1fa:	68fa      	ldr	r2, [r7, #12]
 800f1fc:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800f1fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800f204:	68fa      	ldr	r2, [r7, #12]
 800f206:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f208:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800f212:	f002 020f 	and.w	r2, r2, #15
 800f216:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f218:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800f21e:	68fa      	ldr	r2, [r7, #12]
 800f220:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800f222:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800f22c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f230:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f232:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800f23c:	f002 0203 	and.w	r2, r2, #3
 800f240:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f242:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	8958      	ldrh	r0, [r3, #10]
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	3309      	adds	r3, #9
 800f24c:	461a      	mov	r2, r3
 800f24e:	2102      	movs	r1, #2
 800f250:	f7f9 f935 	bl	80084be <VL53LX_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53LX_i2c_encode_int16_t(
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	330b      	adds	r3, #11
 800f25e:	461a      	mov	r2, r3
 800f260:	2102      	movs	r1, #2
 800f262:	f7f9 f977 	bl	8008554 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53LX_i2c_encode_int16_t(
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	330d      	adds	r3, #13
 800f270:	461a      	mov	r2, r3
 800f272:	2102      	movs	r1, #2
 800f274:	f7f9 f96e 	bl	8008554 <VL53LX_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53LX_i2c_encode_uint16_t(
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	8a18      	ldrh	r0, [r3, #16]
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	330f      	adds	r3, #15
 800f280:	461a      	mov	r2, r3
 800f282:	2102      	movs	r1, #2
 800f284:	f7f9 f91b 	bl	80084be <VL53LX_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53LX_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53LX_i2c_encode_int16_t(
 800f28e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f292:	b218      	sxth	r0, r3
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	3311      	adds	r3, #17
 800f298:	461a      	mov	r2, r3
 800f29a:	2102      	movs	r1, #2
 800f29c:	f7f9 f95a 	bl	8008554 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53LX_i2c_encode_int16_t(
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	3313      	adds	r3, #19
 800f2aa:	461a      	mov	r2, r3
 800f2ac:	2102      	movs	r1, #2
 800f2ae:	f7f9 f951 	bl	8008554 <VL53LX_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53LX_i2c_encode_int16_t(
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	3315      	adds	r3, #21
 800f2bc:	461a      	mov	r2, r3
 800f2be:	2102      	movs	r1, #2
 800f2c0:	f7f9 f948 	bl	8008554 <VL53LX_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800f2c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3718      	adds	r7, #24
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <VL53LX_i2c_decode_customer_nvm_managed>:

VL53LX_Error VL53LX_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b086      	sub	sp, #24
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	60b9      	str	r1, [r7, #8]
 800f2da:	607a      	str	r2, [r7, #4]
 800f2dc:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 800f2e2:	89fb      	ldrh	r3, [r7, #14]
 800f2e4:	2b16      	cmp	r3, #22
 800f2e6:	d802      	bhi.n	800f2ee <VL53LX_i2c_decode_customer_nvm_managed+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f2e8:	f06f 0309 	mvn.w	r3, #9
 800f2ec:	e079      	b.n	800f3e2 <VL53LX_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	785a      	ldrb	r2, [r3, #1]
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	789a      	ldrb	r2, [r3, #2]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	78da      	ldrb	r2, [r3, #3]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	791a      	ldrb	r2, [r3, #4]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	3305      	adds	r3, #5
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	f003 030f 	and.w	r3, r3, #15
 800f320:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	799a      	ldrb	r2, [r3, #6]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	3307      	adds	r3, #7
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f338:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	3308      	adds	r3, #8
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	f003 0303 	and.w	r3, r3, #3
 800f348:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   9));
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	3309      	adds	r3, #9
 800f352:	4619      	mov	r1, r3
 800f354:	2002      	movs	r0, #2
 800f356:	f7f9 f8dd 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800f35a:	4603      	mov	r3, r0
 800f35c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  11));
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	330b      	adds	r3, #11
 800f366:	4619      	mov	r1, r3
 800f368:	2002      	movs	r0, #2
 800f36a:	f7f9 f91f 	bl	80085ac <VL53LX_i2c_decode_int16_t>
 800f36e:	4603      	mov	r3, r0
 800f370:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  13));
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	330d      	adds	r3, #13
 800f37a:	4619      	mov	r1, r3
 800f37c:	2002      	movs	r0, #2
 800f37e:	f7f9 f915 	bl	80085ac <VL53LX_i2c_decode_int16_t>
 800f382:	4603      	mov	r3, r0
 800f384:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  15));
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	330f      	adds	r3, #15
 800f38e:	4619      	mov	r1, r3
 800f390:	2002      	movs	r0, #2
 800f392:	f7f9 f8bf 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800f396:	4603      	mov	r3, r0
 800f398:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	3311      	adds	r3, #17
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	2002      	movs	r0, #2
 800f3a6:	f7f9 f901 	bl	80085ac <VL53LX_i2c_decode_int16_t>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f3b0:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  19));
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	3313      	adds	r3, #19
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	2002      	movs	r0, #2
 800f3be:	f7f9 f8f5 	bl	80085ac <VL53LX_i2c_decode_int16_t>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53LX_i2c_decode_int16_t(2, pbuffer +  21));
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	3315      	adds	r3, #21
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	2002      	movs	r0, #2
 800f3d2:	f7f9 f8eb 	bl	80085ac <VL53LX_i2c_decode_int16_t>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800f3de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3718      	adds	r7, #24
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}

0800f3ea <VL53LX_get_customer_nvm_managed>:


VL53LX_Error VL53LX_get_customer_nvm_managed(
	VL53LX_DEV                 Dev,
	VL53LX_customer_nvm_managed_t  *pdata)
{
 800f3ea:	b580      	push	{r7, lr}
 800f3ec:	b08a      	sub	sp, #40	; 0x28
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	6078      	str	r0, [r7, #4]
 800f3f2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t comms_buffer[VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];
	int16_t offset;

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f3fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d109      	bne.n	800f416 <VL53LX_get_customer_nvm_managed+0x2c>
		status = VL53LX_ReadMulti(
 800f402:	f107 020c 	add.w	r2, r7, #12
 800f406:	2317      	movs	r3, #23
 800f408:	210d      	movs	r1, #13
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f001 fdac 	bl	8010f68 <VL53LX_ReadMulti>
 800f410:	4603      	mov	r3, r0
 800f412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev,
			VL53LX_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 800f416:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d109      	bne.n	800f432 <VL53LX_get_customer_nvm_managed+0x48>
		status = VL53LX_i2c_decode_customer_nvm_managed(
 800f41e:	f107 030c 	add.w	r3, r7, #12
 800f422:	683a      	ldr	r2, [r7, #0]
 800f424:	4619      	mov	r1, r3
 800f426:	2017      	movs	r0, #23
 800f428:	f7ff ff52 	bl	800f2d0 <VL53LX_i2c_decode_customer_nvm_managed>
 800f42c:	4603      	mov	r3, r0
 800f42e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53LX_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
			comms_buffer,
			pdata);

	if (status == VL53LX_ERROR_NONE) {
 800f432:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f436:	2b00      	cmp	r3, #0
 800f438:	d11c      	bne.n	800f474 <VL53LX_get_customer_nvm_managed+0x8a>
		offset = pdata->algo__part_to_part_range_offset_mm;
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	8a5b      	ldrh	r3, [r3, #18]
 800f43e:	84bb      	strh	r3, [r7, #36]	; 0x24
		offset = offset / 4;
 800f440:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f444:	2b00      	cmp	r3, #0
 800f446:	da00      	bge.n	800f44a <VL53LX_get_customer_nvm_managed+0x60>
 800f448:	3303      	adds	r3, #3
 800f44a:	109b      	asrs	r3, r3, #2
 800f44c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (offset >= 1024)
 800f44e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f456:	db04      	blt.n	800f462 <VL53LX_get_customer_nvm_managed+0x78>
			offset -= 2048;
 800f458:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f45a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800f45e:	b29b      	uxth	r3, r3
 800f460:	84bb      	strh	r3, [r7, #36]	; 0x24
		pdata->algo__part_to_part_range_offset_mm = 0;
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	2200      	movs	r2, #0
 800f466:	825a      	strh	r2, [r3, #18]
		pdata->mm_config__inner_offset_mm = offset;
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f46c:	829a      	strh	r2, [r3, #20]
		pdata->mm_config__outer_offset_mm = offset;
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f472:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800f474:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3728      	adds	r7, #40	; 0x28
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <VL53LX_i2c_encode_static_config>:

VL53LX_Error VL53LX_i2c_encode_static_config(
	VL53LX_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b086      	sub	sp, #24
 800f484:	af00      	add	r7, sp, #0
 800f486:	60f8      	str	r0, [r7, #12]
 800f488:	460b      	mov	r3, r1
 800f48a:	607a      	str	r2, [r7, #4]
 800f48c:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f48e:	2300      	movs	r3, #0
 800f490:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_STATIC_CONFIG_I2C_SIZE_BYTES)
 800f492:	897b      	ldrh	r3, [r7, #10]
 800f494:	2b1f      	cmp	r3, #31
 800f496:	d802      	bhi.n	800f49e <VL53LX_i2c_encode_static_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f498:	f06f 0309 	mvn.w	r3, #9
 800f49c:	e0cf      	b.n	800f63e <VL53LX_i2c_encode_static_config+0x1be>

	VL53LX_i2c_encode_uint16_t(
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	881b      	ldrh	r3, [r3, #0]
 800f4a2:	687a      	ldr	r2, [r7, #4]
 800f4a4:	2102      	movs	r1, #2
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7f9 f809 	bl	80084be <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800f4b4:	f002 0201 	and.w	r2, r2, #1
 800f4b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f4ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800f4c4:	f002 020f 	and.w	r2, r2, #15
 800f4c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f4ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800f4d4:	f002 020f 	and.w	r2, r2, #15
 800f4d8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f4da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800f4e4:	f002 021f 	and.w	r2, r2, #31
 800f4e8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f4ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800f4f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f4f8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f4fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800f504:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f508:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f50a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800f514:	f002 0201 	and.w	r2, r2, #1
 800f518:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800f51a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800f520:	68fa      	ldr	r2, [r7, #12]
 800f522:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800f524:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800f52e:	f002 0201 	and.w	r2, r2, #1
 800f532:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f534:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800f53e:	f002 0203 	and.w	r2, r2, #3
 800f542:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f544:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800f54e:	f002 021f 	and.w	r2, r2, #31
 800f552:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f554:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800f55e:	f002 0203 	and.w	r2, r2, #3
 800f562:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f564:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800f56e:	f002 0203 	and.w	r2, r2, #3
 800f572:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800f574:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800f57e:	f002 0207 	and.w	r2, r2, #7
 800f582:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800f584:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800f58e:	f002 021f 	and.w	r2, r2, #31
 800f592:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800f594:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800f59e:	f002 0201 	and.w	r2, r2, #1
 800f5a2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f5a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800f5aa:	68fa      	ldr	r2, [r7, #12]
 800f5ac:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f5ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800f5b4:	68fa      	ldr	r2, [r7, #12]
 800f5b6:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f5b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800f5be:	68fa      	ldr	r2, [r7, #12]
 800f5c0:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f5c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800f5c8:	68fa      	ldr	r2, [r7, #12]
 800f5ca:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f5cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800f5d2:	68fa      	ldr	r2, [r7, #12]
 800f5d4:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800f5d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800f5dc:	68fa      	ldr	r2, [r7, #12]
 800f5de:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800f5e0:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	8b18      	ldrh	r0, [r3, #24]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	3318      	adds	r3, #24
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	2102      	movs	r1, #2
 800f5ee:	f7f8 ff66 	bl	80084be <VL53LX_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800f5f6:	68fa      	ldr	r2, [r7, #12]
 800f5f8:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800f5fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800f600:	68fa      	ldr	r2, [r7, #12]
 800f602:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800f604:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800f60e:	f002 020f 	and.w	r2, r2, #15
 800f612:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800f614:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800f61a:	68fa      	ldr	r2, [r7, #12]
 800f61c:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800f61e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800f628:	f002 020f 	and.w	r2, r2, #15
 800f62c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800f62e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800f634:	68fa      	ldr	r2, [r7, #12]
 800f636:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800f638:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f63a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f63e:	4618      	mov	r0, r3
 800f640:	3718      	adds	r7, #24
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}

0800f646 <VL53LX_i2c_encode_general_config>:

VL53LX_Error VL53LX_i2c_encode_general_config(
	VL53LX_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f646:	b580      	push	{r7, lr}
 800f648:	b086      	sub	sp, #24
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	60f8      	str	r0, [r7, #12]
 800f64e:	460b      	mov	r3, r1
 800f650:	607a      	str	r2, [r7, #4]
 800f652:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f654:	2300      	movs	r3, #0
 800f656:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_GENERAL_CONFIG_I2C_SIZE_BYTES)
 800f658:	897b      	ldrh	r3, [r7, #10]
 800f65a:	2b15      	cmp	r3, #21
 800f65c:	d802      	bhi.n	800f664 <VL53LX_i2c_encode_general_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f65e:	f06f 0309 	mvn.w	r3, #9
 800f662:	e070      	b.n	800f746 <VL53LX_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800f670:	68fa      	ldr	r2, [r7, #12]
 800f672:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f674:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800f67a:	68fa      	ldr	r2, [r7, #12]
 800f67c:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800f67e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800f688:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f68c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f68e:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	889b      	ldrh	r3, [r3, #4]
	VL53LX_i2c_encode_uint16_t(
 800f694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f698:	b298      	uxth	r0, r3
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	3304      	adds	r3, #4
 800f69e:	461a      	mov	r2, r3
 800f6a0:	2102      	movs	r1, #2
 800f6a2:	f7f8 ff0c 	bl	80084be <VL53LX_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800f6ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f6b2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f6b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800f6ba:	68fa      	ldr	r2, [r7, #12]
 800f6bc:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800f6be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800f6c4:	68fa      	ldr	r2, [r7, #12]
 800f6c6:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f6c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800f6d2:	f002 0201 	and.w	r2, r2, #1
 800f6d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f6d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800f6e2:	f002 0207 	and.w	r2, r2, #7
 800f6e6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f6e8:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	8998      	ldrh	r0, [r3, #12]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	330c      	adds	r3, #12
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	2102      	movs	r1, #2
 800f6f6:	f7f8 fee2 	bl	80084be <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53LX_i2c_encode_uint16_t(
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	89d8      	ldrh	r0, [r3, #14]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	330e      	adds	r3, #14
 800f702:	461a      	mov	r2, r3
 800f704:	2102      	movs	r1, #2
 800f706:	f7f8 feda 	bl	80084be <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53LX_i2c_encode_uint16_t(
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	8a18      	ldrh	r0, [r3, #16]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	3310      	adds	r3, #16
 800f712:	461a      	mov	r2, r3
 800f714:	2102      	movs	r1, #2
 800f716:	f7f8 fed2 	bl	80084be <VL53LX_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800f71e:	68fa      	ldr	r2, [r7, #12]
 800f720:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800f722:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800f728:	68fa      	ldr	r2, [r7, #12]
 800f72a:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800f72c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800f732:	68fa      	ldr	r2, [r7, #12]
 800f734:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800f736:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800f740:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f742:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f746:	4618      	mov	r0, r3
 800f748:	3718      	adds	r7, #24
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}

0800f74e <VL53LX_i2c_encode_timing_config>:

VL53LX_Error VL53LX_i2c_encode_timing_config(
	VL53LX_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f74e:	b580      	push	{r7, lr}
 800f750:	b086      	sub	sp, #24
 800f752:	af00      	add	r7, sp, #0
 800f754:	60f8      	str	r0, [r7, #12]
 800f756:	460b      	mov	r3, r1
 800f758:	607a      	str	r2, [r7, #4]
 800f75a:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f75c:	2300      	movs	r3, #0
 800f75e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_TIMING_CONFIG_I2C_SIZE_BYTES)
 800f760:	897b      	ldrh	r3, [r7, #10]
 800f762:	2b16      	cmp	r3, #22
 800f764:	d802      	bhi.n	800f76c <VL53LX_i2c_encode_timing_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f766:	f06f 0309 	mvn.w	r3, #9
 800f76a:	e06e      	b.n	800f84a <VL53LX_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	f003 030f 	and.w	r3, r3, #15
 800f774:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800f77e:	68fa      	ldr	r2, [r7, #12]
 800f780:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800f782:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800f78c:	f002 020f 	and.w	r2, r2, #15
 800f790:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f792:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800f798:	68fa      	ldr	r2, [r7, #12]
 800f79a:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800f79c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800f7a6:	f002 020f 	and.w	r2, r2, #15
 800f7aa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800f7ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800f7b2:	68fa      	ldr	r2, [r7, #12]
 800f7b4:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800f7b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800f7c0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f7c4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f7c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800f7d0:	f002 020f 	and.w	r2, r2, #15
 800f7d4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800f7d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800f7dc:	68fa      	ldr	r2, [r7, #12]
 800f7de:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800f7e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800f7ea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800f7ee:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f7f0:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	8958      	ldrh	r0, [r3, #10]
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	330a      	adds	r3, #10
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	2102      	movs	r1, #2
 800f7fe:	f7f8 fe5e 	bl	80084be <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53LX_i2c_encode_uint16_t(
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	8998      	ldrh	r0, [r3, #12]
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	330c      	adds	r3, #12
 800f80a:	461a      	mov	r2, r3
 800f80c:	2102      	movs	r1, #2
 800f80e:	f7f8 fe56 	bl	80084be <VL53LX_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800f816:	68fa      	ldr	r2, [r7, #12]
 800f818:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800f81a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800f820:	68fa      	ldr	r2, [r7, #12]
 800f822:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800f824:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint32_t(
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	6918      	ldr	r0, [r3, #16]
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	3312      	adds	r3, #18
 800f82e:	461a      	mov	r2, r3
 800f830:	2104      	movs	r1, #4
 800f832:	f7f8 fee4 	bl	80085fe <VL53LX_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800f83e:	f002 0201 	and.w	r2, r2, #1
 800f842:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800f844:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f846:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	3718      	adds	r7, #24
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}

0800f852 <VL53LX_i2c_encode_dynamic_config>:

VL53LX_Error VL53LX_i2c_encode_dynamic_config(
	VL53LX_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f852:	b580      	push	{r7, lr}
 800f854:	b086      	sub	sp, #24
 800f856:	af00      	add	r7, sp, #0
 800f858:	60f8      	str	r0, [r7, #12]
 800f85a:	460b      	mov	r3, r1
 800f85c:	607a      	str	r2, [r7, #4]
 800f85e:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f860:	2300      	movs	r3, #0
 800f862:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 800f864:	897b      	ldrh	r3, [r7, #10]
 800f866:	2b11      	cmp	r3, #17
 800f868:	d802      	bhi.n	800f870 <VL53LX_i2c_encode_dynamic_config+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f86a:	f06f 0309 	mvn.w	r3, #9
 800f86e:	e071      	b.n	800f954 <VL53LX_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	f003 0303 	and.w	r3, r3, #3
 800f878:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	701a      	strb	r2, [r3, #0]
	VL53LX_i2c_encode_uint16_t(
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	8858      	ldrh	r0, [r3, #2]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	3301      	adds	r3, #1
 800f886:	461a      	mov	r2, r3
 800f888:	2102      	movs	r1, #2
 800f88a:	f7f8 fe18 	bl	80084be <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53LX_i2c_encode_uint16_t(
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	8898      	ldrh	r0, [r3, #4]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	3303      	adds	r3, #3
 800f896:	461a      	mov	r2, r3
 800f898:	2102      	movs	r1, #2
 800f89a:	f7f8 fe10 	bl	80084be <VL53LX_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800f8a6:	f002 0201 	and.w	r2, r2, #1
 800f8aa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800f8ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800f8b6:	f002 0207 	and.w	r2, r2, #7
 800f8ba:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800f8bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800f8c2:	68fa      	ldr	r2, [r7, #12]
 800f8c4:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800f8c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800f8cc:	68fa      	ldr	r2, [r7, #12]
 800f8ce:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800f8d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800f8da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f8de:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800f8e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800f8ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f8ee:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800f8f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800f8fa:	f002 0203 	and.w	r2, r2, #3
 800f8fe:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800f900:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800f90a:	f002 0203 	and.w	r2, r2, #3
 800f90e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800f910:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800f91a:	f002 020f 	and.w	r2, r2, #15
 800f91e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800f920:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800f926:	68fa      	ldr	r2, [r7, #12]
 800f928:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800f92a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800f930:	68fa      	ldr	r2, [r7, #12]
 800f932:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800f934:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800f93a:	68fa      	ldr	r2, [r7, #12]
 800f93c:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800f93e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800f948:	f002 0203 	and.w	r2, r2, #3
 800f94c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800f94e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f950:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f954:	4618      	mov	r0, r3
 800f956:	3718      	adds	r7, #24
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <VL53LX_i2c_encode_system_control>:

VL53LX_Error VL53LX_i2c_encode_system_control(
	VL53LX_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800f95c:	b480      	push	{r7}
 800f95e:	b087      	sub	sp, #28
 800f960:	af00      	add	r7, sp, #0
 800f962:	60f8      	str	r0, [r7, #12]
 800f964:	460b      	mov	r3, r1
 800f966:	607a      	str	r2, [r7, #4]
 800f968:	817b      	strh	r3, [r7, #10]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f96a:	2300      	movs	r3, #0
 800f96c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 800f96e:	897b      	ldrh	r3, [r7, #10]
 800f970:	2b04      	cmp	r3, #4
 800f972:	d802      	bhi.n	800f97a <VL53LX_i2c_encode_system_control+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800f974:	f06f 0309 	mvn.w	r3, #9
 800f978:	e025      	b.n	800f9c6 <VL53LX_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	f003 0301 	and.w	r3, r3, #1
 800f982:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800f990:	f002 0201 	and.w	r2, r2, #1
 800f994:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800f996:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800f9a0:	f002 0201 	and.w	r2, r2, #1
 800f9a4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800f9a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800f9b0:	f002 0203 	and.w	r2, r2, #3
 800f9b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800f9b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800f9bc:	68fa      	ldr	r2, [r7, #12]
 800f9be:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800f9c0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800f9c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	371c      	adds	r7, #28
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d0:	4770      	bx	lr

0800f9d2 <VL53LX_set_system_control>:


VL53LX_Error VL53LX_set_system_control(
	VL53LX_DEV                 Dev,
	VL53LX_system_control_t   *pdata)
{
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b084      	sub	sp, #16
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
 800f9da:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 800f9e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d108      	bne.n	800f9fa <VL53LX_set_system_control+0x28>
		status = VL53LX_i2c_encode_system_control(
 800f9e8:	f107 0308 	add.w	r3, r7, #8
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	2105      	movs	r1, #5
 800f9f0:	6838      	ldr	r0, [r7, #0]
 800f9f2:	f7ff ffb3 	bl	800f95c <VL53LX_i2c_encode_system_control>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53LX_ERROR_NONE)
 800f9fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d108      	bne.n	800fa14 <VL53LX_set_system_control+0x42>
		status = VL53LX_WriteMulti(
 800fa02:	f107 0208 	add.w	r2, r7, #8
 800fa06:	2305      	movs	r3, #5
 800fa08:	2183      	movs	r1, #131	; 0x83
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f001 fa76 	bl	8010efc <VL53LX_WriteMulti>
 800fa10:	4603      	mov	r3, r0
 800fa12:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53LX_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 800fa14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3710      	adds	r7, #16
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <VL53LX_i2c_decode_system_results>:

VL53LX_Error VL53LX_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_system_results_t   *pdata)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b086      	sub	sp, #24
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	4603      	mov	r3, r0
 800fa28:	60b9      	str	r1, [r7, #8]
 800fa2a:	607a      	str	r2, [r7, #4]
 800fa2c:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 800fa32:	89fb      	ldrh	r3, [r7, #14]
 800fa34:	2b2b      	cmp	r3, #43	; 0x2b
 800fa36:	d802      	bhi.n	800fa3e <VL53LX_i2c_decode_system_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fa38:	f06f 0309 	mvn.w	r3, #9
 800fa3c:	e0e2      	b.n	800fc04 <VL53LX_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa46:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	785a      	ldrb	r2, [r3, #1]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	3302      	adds	r3, #2
 800fa58:	781b      	ldrb	r3, [r3, #0]
 800fa5a:	f003 030f 	and.w	r3, r3, #15
 800fa5e:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	78da      	ldrb	r2, [r3, #3]
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   4));
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	3304      	adds	r3, #4
 800fa70:	4619      	mov	r1, r3
 800fa72:	2002      	movs	r0, #2
 800fa74:	f7f8 fd4e 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   6));
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	3306      	adds	r3, #6
 800fa84:	4619      	mov	r1, r3
 800fa86:	2002      	movs	r0, #2
 800fa88:	f7f8 fd44 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8));
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	3308      	adds	r3, #8
 800fa98:	4619      	mov	r1, r3
 800fa9a:	2002      	movs	r0, #2
 800fa9c:	f7f8 fd3a 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800faa0:	4603      	mov	r3, r0
 800faa2:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  10));
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	330a      	adds	r3, #10
 800faac:	4619      	mov	r1, r3
 800faae:	2002      	movs	r0, #2
 800fab0:	f7f8 fd30 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fab4:	4603      	mov	r3, r0
 800fab6:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  12));
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	330c      	adds	r3, #12
 800fac0:	4619      	mov	r1, r3
 800fac2:	2002      	movs	r0, #2
 800fac4:	f7f8 fd26 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fac8:	4603      	mov	r3, r0
 800faca:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  14));
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	330e      	adds	r3, #14
 800fad4:	4619      	mov	r1, r3
 800fad6:	2002      	movs	r0, #2
 800fad8:	f7f8 fd1c 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fadc:	4603      	mov	r3, r0
 800fade:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  16));
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	3310      	adds	r3, #16
 800fae8:	4619      	mov	r1, r3
 800faea:	2002      	movs	r0, #2
 800faec:	f7f8 fd12 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800faf0:	4603      	mov	r3, r0
 800faf2:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18));
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	3312      	adds	r3, #18
 800fafc:	4619      	mov	r1, r3
 800fafe:	2002      	movs	r0, #2
 800fb00:	f7f8 fd08 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fb04:	4603      	mov	r3, r0
 800fb06:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  20));
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	3314      	adds	r3, #20
 800fb10:	4619      	mov	r1, r3
 800fb12:	2002      	movs	r0, #2
 800fb14:	f7f8 fcfe 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	3316      	adds	r3, #22
 800fb24:	4619      	mov	r1, r3
 800fb26:	2002      	movs	r0, #2
 800fb28:	f7f8 fcf4 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	3318      	adds	r3, #24
 800fb38:	4619      	mov	r1, r3
 800fb3a:	2002      	movs	r0, #2
 800fb3c:	f7f8 fcea 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fb40:	4603      	mov	r3, r0
 800fb42:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  26));
 800fb48:	68bb      	ldr	r3, [r7, #8]
 800fb4a:	331a      	adds	r3, #26
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	2002      	movs	r0, #2
 800fb50:	f7f8 fce0 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fb54:	4603      	mov	r3, r0
 800fb56:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  28));
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	331c      	adds	r3, #28
 800fb60:	4619      	mov	r1, r3
 800fb62:	2002      	movs	r0, #2
 800fb64:	f7f8 fcd6 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  30));
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	331e      	adds	r3, #30
 800fb74:	4619      	mov	r1, r3
 800fb76:	2002      	movs	r0, #2
 800fb78:	f7f8 fccc 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  32));
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	3320      	adds	r3, #32
 800fb88:	4619      	mov	r1, r3
 800fb8a:	2002      	movs	r0, #2
 800fb8c:	f7f8 fcc2 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fb90:	4603      	mov	r3, r0
 800fb92:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  34));
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	3322      	adds	r3, #34	; 0x22
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	2002      	movs	r0, #2
 800fba0:	f7f8 fcb8 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fba4:	4603      	mov	r3, r0
 800fba6:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  36));
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	3324      	adds	r3, #36	; 0x24
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	2002      	movs	r0, #2
 800fbb4:	f7f8 fcae 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  38));
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	3326      	adds	r3, #38	; 0x26
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	2002      	movs	r0, #2
 800fbc8:	f7f8 fca4 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  40));
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	3328      	adds	r3, #40	; 0x28
 800fbd8:	4619      	mov	r1, r3
 800fbda:	2002      	movs	r0, #2
 800fbdc:	f7f8 fc9a 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800fc00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3718      	adds	r7, #24
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <VL53LX_i2c_decode_core_results>:

VL53LX_Error VL53LX_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_core_results_t     *pdata)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b086      	sub	sp, #24
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	4603      	mov	r3, r0
 800fc14:	60b9      	str	r1, [r7, #8]
 800fc16:	607a      	str	r2, [r7, #4]
 800fc18:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_CORE_RESULTS_I2C_SIZE_BYTES)
 800fc1e:	89fb      	ldrh	r3, [r7, #14]
 800fc20:	2b20      	cmp	r3, #32
 800fc22:	d802      	bhi.n	800fc2a <VL53LX_i2c_decode_core_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fc24:	f06f 0309 	mvn.w	r3, #9
 800fc28:	e04d      	b.n	800fcc6 <VL53LX_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   0));
 800fc2a:	68b9      	ldr	r1, [r7, #8]
 800fc2c:	2004      	movs	r0, #4
 800fc2e:	f7f8 fd10 	bl	8008652 <VL53LX_i2c_decode_uint32_t>
 800fc32:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +   4));
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	3304      	adds	r3, #4
 800fc3c:	4619      	mov	r1, r3
 800fc3e:	2004      	movs	r0, #4
 800fc40:	f7f8 fd07 	bl	8008652 <VL53LX_i2c_decode_uint32_t>
 800fc44:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +   8));
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	3308      	adds	r3, #8
 800fc4e:	4619      	mov	r1, r3
 800fc50:	2004      	movs	r0, #4
 800fc52:	f7f8 fd1b 	bl	800868c <VL53LX_i2c_decode_int32_t>
 800fc56:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  12));
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	330c      	adds	r3, #12
 800fc60:	4619      	mov	r1, r3
 800fc62:	2004      	movs	r0, #4
 800fc64:	f7f8 fcf5 	bl	8008652 <VL53LX_i2c_decode_uint32_t>
 800fc68:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  16));
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	3310      	adds	r3, #16
 800fc72:	4619      	mov	r1, r3
 800fc74:	2004      	movs	r0, #4
 800fc76:	f7f8 fcec 	bl	8008652 <VL53LX_i2c_decode_uint32_t>
 800fc7a:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  20));
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	3314      	adds	r3, #20
 800fc84:	4619      	mov	r1, r3
 800fc86:	2004      	movs	r0, #4
 800fc88:	f7f8 fce3 	bl	8008652 <VL53LX_i2c_decode_uint32_t>
 800fc8c:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53LX_i2c_decode_int32_t(4, pbuffer +  24));
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	3318      	adds	r3, #24
 800fc96:	4619      	mov	r1, r3
 800fc98:	2004      	movs	r0, #4
 800fc9a:	f7f8 fcf7 	bl	800868c <VL53LX_i2c_decode_int32_t>
 800fc9e:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  28));
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	331c      	adds	r3, #28
 800fca8:	4619      	mov	r1, r3
 800fcaa:	2004      	movs	r0, #4
 800fcac:	f7f8 fcd1 	bl	8008652 <VL53LX_i2c_decode_uint32_t>
 800fcb0:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	f893 2020 	ldrb.w	r2, [r3, #32]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800fcc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3718      	adds	r7, #24
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}

0800fcce <VL53LX_i2c_decode_debug_results>:

VL53LX_Error VL53LX_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_debug_results_t    *pdata)
{
 800fcce:	b580      	push	{r7, lr}
 800fcd0:	b086      	sub	sp, #24
 800fcd2:	af00      	add	r7, sp, #0
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	60b9      	str	r1, [r7, #8]
 800fcd8:	607a      	str	r2, [r7, #4]
 800fcda:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_DEBUG_RESULTS_I2C_SIZE_BYTES)
 800fce0:	89fb      	ldrh	r3, [r7, #14]
 800fce2:	2b37      	cmp	r3, #55	; 0x37
 800fce4:	d802      	bhi.n	800fcec <VL53LX_i2c_decode_debug_results+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800fce6:	f06f 0309 	mvn.w	r3, #9
 800fcea:	e15e      	b.n	800ffaa <VL53LX_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   0));
 800fcec:	68b9      	ldr	r1, [r7, #8]
 800fcee:	2002      	movs	r0, #2
 800fcf0:	f7f8 fc10 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	3302      	adds	r3, #2
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd06:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	3303      	adds	r3, #3
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd16:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	3304      	adds	r3, #4
 800fd20:	781b      	ldrb	r3, [r3, #0]
 800fd22:	f003 0303 	and.w	r3, r3, #3
 800fd26:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	3305      	adds	r3, #5
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	f003 0301 	and.w	r3, r3, #1
 800fd36:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	3306      	adds	r3, #6
 800fd40:	781b      	ldrb	r3, [r3, #0]
 800fd42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd46:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	3307      	adds	r3, #7
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd56:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800fd5c:	68bb      	ldr	r3, [r7, #8]
 800fd5e:	3308      	adds	r3, #8
 800fd60:	4619      	mov	r1, r3
 800fd62:	2002      	movs	r0, #2
 800fd64:	f7f8 fbd6 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fd6e:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	330a      	adds	r3, #10
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	f003 0303 	and.w	r3, r3, #3
 800fd7e:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	330b      	adds	r3, #11
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	f003 0303 	and.w	r3, r3, #3
 800fd8e:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	330c      	adds	r3, #12
 800fd98:	781b      	ldrb	r3, [r3, #0]
 800fd9a:	f003 030f 	and.w	r3, r3, #15
 800fd9e:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	330d      	adds	r3, #13
 800fda8:	781b      	ldrb	r3, [r3, #0]
 800fdaa:	f003 0307 	and.w	r3, r3, #7
 800fdae:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	330e      	adds	r3, #14
 800fdb8:	781b      	ldrb	r3, [r3, #0]
 800fdba:	f003 0301 	and.w	r3, r3, #1
 800fdbe:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	330f      	adds	r3, #15
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	f003 0303 	and.w	r3, r3, #3
 800fdce:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	7c1a      	ldrb	r2, [r3, #16]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	7c5a      	ldrb	r2, [r3, #17]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	3312      	adds	r3, #18
 800fde8:	4619      	mov	r1, r3
 800fdea:	2002      	movs	r0, #2
 800fdec:	f7f8 fb92 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fdf6:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  22));
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	3316      	adds	r3, #22
 800fe00:	4619      	mov	r1, r3
 800fe02:	2002      	movs	r0, #2
 800fe04:	f7f8 fb86 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +  24));
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	3318      	adds	r3, #24
 800fe14:	4619      	mov	r1, r3
 800fe16:	2002      	movs	r0, #2
 800fe18:	f7f8 fb7c 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	331a      	adds	r3, #26
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	f003 0301 	and.w	r3, r3, #1
 800fe2e:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	331b      	adds	r3, #27
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	f003 0307 	and.w	r3, r3, #7
 800fe3e:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	7f1a      	ldrb	r2, [r3, #28]
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	7f5a      	ldrb	r2, [r3, #29]
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	331e      	adds	r3, #30
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe5e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	331f      	adds	r3, #31
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe6e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	3320      	adds	r3, #32
 800fe78:	781b      	ldrb	r3, [r3, #0]
 800fe7a:	f003 0303 	and.w	r3, r3, #3
 800fe7e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	3321      	adds	r3, #33	; 0x21
 800fe88:	781b      	ldrb	r3, [r3, #0]
 800fe8a:	f003 030f 	and.w	r3, r3, #15
 800fe8e:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	3325      	adds	r3, #37	; 0x25
 800febc:	781b      	ldrb	r3, [r3, #0]
 800febe:	f003 0301 	and.w	r3, r3, #1
 800fec2:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	3326      	adds	r3, #38	; 0x26
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	f003 0303 	and.w	r3, r3, #3
 800fed4:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	3327      	adds	r3, #39	; 0x27
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	f003 031f 	and.w	r3, r3, #31
 800fee6:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	3328      	adds	r3, #40	; 0x28
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	f003 031f 	and.w	r3, r3, #31
 800fef8:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	3329      	adds	r3, #41	; 0x29
 800ff04:	781b      	ldrb	r3, [r3, #0]
 800ff06:	f003 031f 	and.w	r3, r3, #31
 800ff0a:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	332a      	adds	r3, #42	; 0x2a
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	f003 0301 	and.w	r3, r3, #1
 800ff1c:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	332b      	adds	r3, #43	; 0x2b
 800ff28:	781b      	ldrb	r3, [r3, #0]
 800ff2a:	f003 0301 	and.w	r3, r3, #1
 800ff2e:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	332c      	adds	r3, #44	; 0x2c
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	f003 0303 	and.w	r3, r3, #3
 800ff40:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	332d      	adds	r3, #45	; 0x2d
 800ff4c:	781b      	ldrb	r3, [r3, #0]
 800ff4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff52:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	332e      	adds	r3, #46	; 0x2e
 800ff5e:	4619      	mov	r1, r3
 800ff60:	2004      	movs	r0, #4
 800ff62:	f7f8 fb76 	bl	8008652 <VL53LX_i2c_decode_uint32_t>
 800ff66:	4603      	mov	r3, r0
 800ff68:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53LX_i2c_decode_uint32_t(4, pbuffer +  50));
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	3332      	adds	r3, #50	; 0x32
 800ff74:	4619      	mov	r1, r3
 800ff76:	2004      	movs	r0, #4
 800ff78:	f7f8 fb6b 	bl	8008652 <VL53LX_i2c_decode_uint32_t>
 800ff7c:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800ff82:	68bb      	ldr	r3, [r7, #8]
 800ff84:	3336      	adds	r3, #54	; 0x36
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	f003 0301 	and.w	r3, r3, #1
 800ff8c:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	3337      	adds	r3, #55	; 0x37
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	f003 0301 	and.w	r3, r3, #1
 800ff9e:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800ffa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3718      	adds	r7, #24
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}

0800ffb2 <VL53LX_i2c_decode_nvm_copy_data>:

VL53LX_Error VL53LX_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53LX_nvm_copy_data_t    *pdata)
{
 800ffb2:	b580      	push	{r7, lr}
 800ffb4:	b086      	sub	sp, #24
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	4603      	mov	r3, r0
 800ffba:	60b9      	str	r1, [r7, #8]
 800ffbc:	607a      	str	r2, [r7, #4]
 800ffbe:	81fb      	strh	r3, [r7, #14]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES)
 800ffc4:	89fb      	ldrh	r3, [r7, #14]
 800ffc6:	2b30      	cmp	r3, #48	; 0x30
 800ffc8:	d802      	bhi.n	800ffd0 <VL53LX_i2c_decode_nvm_copy_data+0x1e>
		return VL53LX_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ffca:	f06f 0309 	mvn.w	r3, #9
 800ffce:	e112      	b.n	80101f6 <VL53LX_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	785a      	ldrb	r2, [r3, #1]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	789a      	ldrb	r2, [r3, #2]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53LX_i2c_decode_uint16_t(2, pbuffer +   3));
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	3303      	adds	r3, #3
 800ffec:	4619      	mov	r1, r3
 800ffee:	2002      	movs	r0, #2
 800fff0:	f7f8 fa90 	bl	8008514 <VL53LX_i2c_decode_uint16_t>
 800fff4:	4603      	mov	r3, r0
 800fff6:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800fffc:	68bb      	ldr	r3, [r7, #8]
 800fffe:	3305      	adds	r3, #5
 8010000:	781b      	ldrb	r3, [r3, #0]
 8010002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010006:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	3306      	adds	r3, #6
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	f003 0307 	and.w	r3, r3, #7
 8010016:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	3307      	adds	r3, #7
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	f003 0307 	and.w	r3, r3, #7
 8010026:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	3308      	adds	r3, #8
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010036:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	3309      	adds	r3, #9
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010046:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	330a      	adds	r3, #10
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	f003 0301 	and.w	r3, r3, #1
 8010056:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	330b      	adds	r3, #11
 8010060:	781b      	ldrb	r3, [r3, #0]
 8010062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010066:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	330c      	adds	r3, #12
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	f003 0301 	and.w	r3, r3, #1
 8010076:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	330d      	adds	r3, #13
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010086:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	330e      	adds	r3, #14
 8010090:	781b      	ldrb	r3, [r3, #0]
 8010092:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010096:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	7bda      	ldrb	r2, [r3, #15]
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	7c1a      	ldrb	r2, [r3, #16]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	7c5a      	ldrb	r2, [r3, #17]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	7c9a      	ldrb	r2, [r3, #18]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	7cda      	ldrb	r2, [r3, #19]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	7d1a      	ldrb	r2, [r3, #20]
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	7d5a      	ldrb	r2, [r3, #21]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	7d9a      	ldrb	r2, [r3, #22]
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	7dda      	ldrb	r2, [r3, #23]
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	7e1a      	ldrb	r2, [r3, #24]
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	7e5a      	ldrb	r2, [r3, #25]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	7e9a      	ldrb	r2, [r3, #26]
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	7eda      	ldrb	r2, [r3, #27]
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	7f1a      	ldrb	r2, [r3, #28]
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	7f5a      	ldrb	r2, [r3, #29]
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	7f9a      	ldrb	r2, [r3, #30]
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	7fda      	ldrb	r2, [r3, #31]
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	f893 2020 	ldrb.w	r2, [r3, #32]
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8010192:	68bb      	ldr	r3, [r7, #8]
 8010194:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80101f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3718      	adds	r7, #24
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}

080101fe <VL53LX_get_nvm_copy_data>:


VL53LX_Error VL53LX_get_nvm_copy_data(
	VL53LX_DEV                 Dev,
	VL53LX_nvm_copy_data_t    *pdata)
{
 80101fe:	b580      	push	{r7, lr}
 8010200:	b090      	sub	sp, #64	; 0x40
 8010202:	af00      	add	r7, sp, #0
 8010204:	6078      	str	r0, [r7, #4]
 8010206:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010208:	2300      	movs	r3, #0
 801020a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53LX_ERROR_NONE)
 801020e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010212:	2b00      	cmp	r3, #0
 8010214:	d10a      	bne.n	801022c <VL53LX_get_nvm_copy_data+0x2e>
		status = VL53LX_ReadMulti(
 8010216:	f107 020c 	add.w	r2, r7, #12
 801021a:	2331      	movs	r3, #49	; 0x31
 801021c:	f240 110f 	movw	r1, #271	; 0x10f
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f000 fea1 	bl	8010f68 <VL53LX_ReadMulti>
 8010226:	4603      	mov	r3, r0
 8010228:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53LX_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53LX_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53LX_ERROR_NONE)
 801022c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010230:	2b00      	cmp	r3, #0
 8010232:	d109      	bne.n	8010248 <VL53LX_get_nvm_copy_data+0x4a>
		status = VL53LX_i2c_decode_nvm_copy_data(
 8010234:	f107 030c 	add.w	r3, r7, #12
 8010238:	683a      	ldr	r2, [r7, #0]
 801023a:	4619      	mov	r1, r3
 801023c:	2031      	movs	r0, #49	; 0x31
 801023e:	f7ff feb8 	bl	800ffb2 <VL53LX_i2c_decode_nvm_copy_data>
 8010242:	4603      	mov	r3, r0
 8010244:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8010248:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801024c:	4618      	mov	r0, r3
 801024e:	3740      	adds	r7, #64	; 0x40
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <VL53LX_f_023>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53LX_p_028,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 8010254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010258:	b0a1      	sub	sp, #132	; 0x84
 801025a:	af00      	add	r7, sp, #0
 801025c:	64b9      	str	r1, [r7, #72]	; 0x48
 801025e:	647a      	str	r2, [r7, #68]	; 0x44
 8010260:	643b      	str	r3, [r7, #64]	; 0x40
 8010262:	4603      	mov	r3, r0
 8010264:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f


	VL53LX_Error status = VL53LX_ERROR_DIVISION_BY_ZERO;
 8010268:	23f1      	movs	r3, #241	; 0xf1
 801026a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint32_t sigma_int  = VL53LX_D_002;
 801026e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010272:	657b      	str	r3, [r7, #84]	; 0x54

	uint32_t pll_period_mm  = 0;
 8010274:	2300      	movs	r3, #0
 8010276:	653b      	str	r3, [r7, #80]	; 0x50

	uint64_t tmp0        = 0;
 8010278:	f04f 0200 	mov.w	r2, #0
 801027c:	f04f 0300 	mov.w	r3, #0
 8010280:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	uint64_t tmp1        = 0;
 8010284:	f04f 0200 	mov.w	r2, #0
 8010288:	f04f 0300 	mov.w	r3, #0
 801028c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	uint64_t b_minus_amb = 0;
 8010290:	f04f 0200 	mov.w	r2, #0
 8010294:	f04f 0300 	mov.w	r3, #0
 8010298:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t VL53LX_p_055   = 0;
 801029c:	f04f 0200 	mov.w	r2, #0
 80102a0:	f04f 0300 	mov.w	r3, #0
 80102a4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	*psigma_est  = VL53LX_D_002;
 80102a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80102ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80102b0:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 80102b2:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	f000 8259 	beq.w	801076e <VL53LX_f_023+0x51a>



		pll_period_mm = VL53LX_calc_pll_period_mm(fast_osc_frequency);
 80102bc:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7fb fbd3 	bl	800ba6c <VL53LX_calc_pll_period_mm>
 80102c6:	6538      	str	r0, [r7, #80]	; 0x50



		if (VL53LX_p_028 > VL53LX_p_032)
 80102c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80102cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d90f      	bls.n	80102f2 <VL53LX_f_023+0x9e>
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 80102d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80102d6:	4618      	mov	r0, r3
 80102d8:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_032;
 80102dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102de:	461a      	mov	r2, r3
 80102e0:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_028 -
 80102e4:	ebb0 0a02 	subs.w	sl, r0, r2
 80102e8:	eb61 0b03 	sbc.w	fp, r1, r3
 80102ec:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 80102f0:	e00e      	b.n	8010310 <VL53LX_f_023+0xbc>
		else
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 80102f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102f4:	4618      	mov	r0, r3
 80102f6:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_028;
 80102fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80102fe:	461a      	mov	r2, r3
 8010300:	f04f 0300 	mov.w	r3, #0
			b_minus_amb =  (uint64_t)VL53LX_p_032 -
 8010304:	ebb0 0802 	subs.w	r8, r0, r2
 8010308:	eb61 0903 	sbc.w	r9, r1, r3
 801030c:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60



		if (VL53LX_p_007 > VL53LX_p_001)
 8010310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010314:	429a      	cmp	r2, r3
 8010316:	d911      	bls.n	801033c <VL53LX_f_023+0xe8>
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8010318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801031a:	4618      	mov	r0, r3
 801031c:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_001;
 8010320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010322:	461a      	mov	r2, r3
 8010324:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_007 -
 8010328:	1a86      	subs	r6, r0, r2
 801032a:	62be      	str	r6, [r7, #40]	; 0x28
 801032c:	eb61 0303 	sbc.w	r3, r1, r3
 8010330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010332:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010336:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 801033a:	e010      	b.n	801035e <VL53LX_f_023+0x10a>
		else
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 801033c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801033e:	4618      	mov	r0, r3
 8010340:	f04f 0100 	mov.w	r1, #0
			(uint64_t)VL53LX_p_007;
 8010344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010346:	461a      	mov	r2, r3
 8010348:	f04f 0300 	mov.w	r3, #0
			VL53LX_p_055 =  (uint64_t)VL53LX_p_001 -
 801034c:	1a86      	subs	r6, r0, r2
 801034e:	623e      	str	r6, [r7, #32]
 8010350:	eb61 0303 	sbc.w	r3, r1, r3
 8010354:	627b      	str	r3, [r7, #36]	; 0x24
 8010356:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801035a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58



		if (b_minus_amb != 0) {
 801035e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010362:	4313      	orrs	r3, r2
 8010364:	f000 8203 	beq.w	801076e <VL53LX_f_023+0x51a>




			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 8010368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801036a:	4618      	mov	r0, r3
 801036c:	f04f 0100 	mov.w	r1, #0
 8010370:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010374:	461a      	mov	r2, r3
 8010376:	f04f 0300 	mov.w	r3, #0
 801037a:	1884      	adds	r4, r0, r2
 801037c:	eb41 0503 	adc.w	r5, r1, r3
					(uint64_t)VL53LX_p_028;
 8010380:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010384:	461a      	mov	r2, r3
 8010386:	f04f 0300 	mov.w	r3, #0
			tmp0 = (uint64_t)VL53LX_p_032 + (uint64_t)bx +
 801038a:	18a1      	adds	r1, r4, r2
 801038c:	61b9      	str	r1, [r7, #24]
 801038e:	eb45 0303 	adc.w	r3, r5, r3
 8010392:	61fb      	str	r3, [r7, #28]
 8010394:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010398:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > VL53LX_D_003)
 801039c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80103a0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80103a4:	f04f 0100 	mov.w	r1, #0
 80103a8:	4299      	cmp	r1, r3
 80103aa:	bf08      	it	eq
 80103ac:	4290      	cmpeq	r0, r2
 80103ae:	d205      	bcs.n	80103bc <VL53LX_f_023+0x168>
				tmp0 = VL53LX_D_003;
 80103b0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80103b4:	f04f 0300 	mov.w	r3, #0
 80103b8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			tmp1 = (uint64_t)VL53LX_p_055 * (uint64_t)VL53LX_p_055;
 80103bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80103c0:	fb02 f203 	mul.w	r2, r2, r3
 80103c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80103c8:	fb01 f303 	mul.w	r3, r1, r3
 80103cc:	18d1      	adds	r1, r2, r3
 80103ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103d0:	fba3 2303 	umull	r2, r3, r3, r3
 80103d4:	4419      	add	r1, r3
 80103d6:	460b      	mov	r3, r1
 80103d8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 80103dc:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 << 8;
 80103e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80103e4:	f04f 0200 	mov.w	r2, #0
 80103e8:	f04f 0300 	mov.w	r3, #0
 80103ec:	020b      	lsls	r3, r1, #8
 80103ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80103f2:	0202      	lsls	r2, r0, #8
 80103f4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > VL53LX_D_004)
 80103f8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80103fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010400:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010404:	4299      	cmp	r1, r3
 8010406:	bf08      	it	eq
 8010408:	4290      	cmpeq	r0, r2
 801040a:	d205      	bcs.n	8010418 <VL53LX_f_023+0x1c4>
				tmp1 = VL53LX_D_004;
 801040c:	f04f 32ff 	mov.w	r2, #4294967295
 8010410:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010414:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp1 = do_division_u(tmp1, b_minus_amb);
 8010418:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801041c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010420:	f7ef ff7e 	bl	8000320 <__aeabi_uldivmod>
 8010424:	4602      	mov	r2, r0
 8010426:	460b      	mov	r3, r1
 8010428:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = do_division_u(tmp1, b_minus_amb);
 801042c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010430:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010434:	f7ef ff74 	bl	8000320 <__aeabi_uldivmod>
 8010438:	4602      	mov	r2, r0
 801043a:	460b      	mov	r3, r1
 801043c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_005)
 8010440:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010444:	2b80      	cmp	r3, #128	; 0x80
 8010446:	bf08      	it	eq
 8010448:	2a00      	cmpeq	r2, #0
 801044a:	d305      	bcc.n	8010458 <VL53LX_f_023+0x204>
				tmp1 = (uint64_t)VL53LX_D_005;
 801044c:	f04f 32ff 	mov.w	r2, #4294967295
 8010450:	f04f 037f 	mov.w	r3, #127	; 0x7f
 8010454:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 * tmp0;
 8010458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801045a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801045c:	fb02 f203 	mul.w	r2, r2, r3
 8010460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010462:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010464:	fb01 f303 	mul.w	r3, r1, r3
 8010468:	18d1      	adds	r1, r2, r3
 801046a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801046c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801046e:	fba2 2303 	umull	r2, r3, r2, r3
 8010472:	4419      	add	r1, r3
 8010474:	460b      	mov	r3, r1
 8010476:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 801047a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 801047e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010482:	4618      	mov	r0, r3
 8010484:	f04f 0100 	mov.w	r1, #0
 8010488:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801048c:	461a      	mov	r2, r3
 801048e:	f04f 0300 	mov.w	r3, #0
 8010492:	1884      	adds	r4, r0, r2
 8010494:	63bc      	str	r4, [r7, #56]	; 0x38
 8010496:	eb41 0303 	adc.w	r3, r1, r3
 801049a:	63fb      	str	r3, [r7, #60]	; 0x3c
				(uint64_t)a_zp + (uint64_t)ax_zp;
 801049c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80104a0:	461a      	mov	r2, r3
 80104a2:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80104a6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80104aa:	4621      	mov	r1, r4
 80104ac:	1889      	adds	r1, r1, r2
 80104ae:	6339      	str	r1, [r7, #48]	; 0x30
 80104b0:	4629      	mov	r1, r5
 80104b2:	eb43 0101 	adc.w	r1, r3, r1
 80104b6:	6379      	str	r1, [r7, #52]	; 0x34
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80104b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80104bc:	461a      	mov	r2, r3
 80104be:	f04f 0300 	mov.w	r3, #0
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80104c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80104c6:	4621      	mov	r1, r4
 80104c8:	1889      	adds	r1, r1, r2
 80104ca:	6139      	str	r1, [r7, #16]
 80104cc:	4629      	mov	r1, r5
 80104ce:	eb43 0101 	adc.w	r1, r3, r1
 80104d2:	6179      	str	r1, [r7, #20]
 80104d4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80104d8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmp1 > (uint64_t)VL53LX_D_003)
 80104dc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80104e0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80104e4:	f04f 0100 	mov.w	r1, #0
 80104e8:	4299      	cmp	r1, r3
 80104ea:	bf08      	it	eq
 80104ec:	4290      	cmpeq	r0, r2
 80104ee:	d205      	bcs.n	80104fc <VL53LX_f_023+0x2a8>
				tmp1 = (uint64_t)VL53LX_D_003;
 80104f0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80104f4:	f04f 0300 	mov.w	r3, #0
 80104f8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			tmp1 = tmp1 << 8;
 80104fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8010500:	f04f 0200 	mov.w	r2, #0
 8010504:	f04f 0300 	mov.w	r3, #0
 8010508:	020b      	lsls	r3, r1, #8
 801050a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801050e:	0202      	lsls	r2, r0, #8
 8010510:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68


			tmp0 = tmp1 + tmp0;
 8010514:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010518:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801051c:	1884      	adds	r4, r0, r2
 801051e:	60bc      	str	r4, [r7, #8]
 8010520:	eb41 0303 	adc.w	r3, r1, r3
 8010524:	60fb      	str	r3, [r7, #12]
 8010526:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801052a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			if (tmp0 > (uint64_t)VL53LX_D_006)
 801052e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010532:	2a00      	cmp	r2, #0
 8010534:	f173 0300 	sbcs.w	r3, r3, #0
 8010538:	da05      	bge.n	8010546 <VL53LX_f_023+0x2f2>
				tmp0 = (uint64_t)VL53LX_D_006;
 801053a:	f04f 32ff 	mov.w	r2, #4294967295
 801053e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010542:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70





			if (tmp0 > (uint64_t)VL53LX_D_007) {
 8010546:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801054a:	2b01      	cmp	r3, #1
 801054c:	bf08      	it	eq
 801054e:	2a00      	cmpeq	r2, #0
 8010550:	d31e      	bcc.n	8010590 <VL53LX_f_023+0x33c>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8010552:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010556:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 801055a:	f7ef fee1 	bl	8000320 <__aeabi_uldivmod>
 801055e:	4602      	mov	r2, r0
 8010560:	460b      	mov	r3, r1
 8010562:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 8010566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010568:	461a      	mov	r2, r3
 801056a:	f04f 0300 	mov.w	r3, #0
 801056e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010570:	fb02 f001 	mul.w	r0, r2, r1
 8010574:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010576:	fb03 f101 	mul.w	r1, r3, r1
 801057a:	4401      	add	r1, r0
 801057c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801057e:	fba0 2302 	umull	r2, r3, r0, r2
 8010582:	4419      	add	r1, r3
 8010584:	460b      	mov	r3, r1
 8010586:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 801058a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 801058e:	e01d      	b.n	80105cc <VL53LX_f_023+0x378>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010592:	461a      	mov	r2, r3
 8010594:	f04f 0300 	mov.w	r3, #0
 8010598:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801059a:	fb02 f001 	mul.w	r0, r2, r1
 801059e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80105a0:	fb03 f101 	mul.w	r1, r3, r1
 80105a4:	4401      	add	r1, r0
 80105a6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80105a8:	fba0 2302 	umull	r2, r3, r0, r2
 80105ac:	4419      	add	r1, r3
 80105ae:	460b      	mov	r3, r1
 80105b0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80105b4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80105b8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80105bc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80105c0:	f7ef feae 	bl	8000320 <__aeabi_uldivmod>
 80105c4:	4602      	mov	r2, r0
 80105c6:	460b      	mov	r3, r1
 80105c8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 80105cc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80105d0:	2a00      	cmp	r2, #0
 80105d2:	f173 0300 	sbcs.w	r3, r3, #0
 80105d6:	da05      	bge.n	80105e4 <VL53LX_f_023+0x390>
				tmp0 = (uint64_t)VL53LX_D_006;
 80105d8:	f04f 32ff 	mov.w	r2, #4294967295
 80105dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80105e0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70



			if (tmp0 > (uint64_t)VL53LX_D_007) {
 80105e4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	bf08      	it	eq
 80105ec:	2a00      	cmpeq	r2, #0
 80105ee:	d32a      	bcc.n	8010646 <VL53LX_f_023+0x3f2>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80105f0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80105f4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80105f8:	f7ef fe92 	bl	8000320 <__aeabi_uldivmod>
 80105fc:	4602      	mov	r2, r0
 80105fe:	460b      	mov	r3, r1
 8010600:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 8010604:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010608:	f04f 0200 	mov.w	r2, #0
 801060c:	f04f 0300 	mov.w	r3, #0
 8010610:	0882      	lsrs	r2, r0, #2
 8010612:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010616:	088b      	lsrs	r3, r1, #2
 8010618:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = tmp0 * pll_period_mm;
 801061c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801061e:	461a      	mov	r2, r3
 8010620:	f04f 0300 	mov.w	r3, #0
 8010624:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010626:	fb02 f001 	mul.w	r0, r2, r1
 801062a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801062c:	fb03 f101 	mul.w	r1, r3, r1
 8010630:	4401      	add	r1, r0
 8010632:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010634:	fba0 2302 	umull	r2, r3, r0, r2
 8010638:	4419      	add	r1, r3
 801063a:	460b      	mov	r3, r1
 801063c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010640:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8010644:	e029      	b.n	801069a <VL53LX_f_023+0x446>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8010646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010648:	461a      	mov	r2, r3
 801064a:	f04f 0300 	mov.w	r3, #0
 801064e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010650:	fb02 f001 	mul.w	r0, r2, r1
 8010654:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010656:	fb03 f101 	mul.w	r1, r3, r1
 801065a:	4401      	add	r1, r0
 801065c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801065e:	fba0 2302 	umull	r2, r3, r0, r2
 8010662:	4419      	add	r1, r3
 8010664:	460b      	mov	r3, r1
 8010666:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 801066a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, b_minus_amb);
 801066e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8010672:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010676:	f7ef fe53 	bl	8000320 <__aeabi_uldivmod>
 801067a:	4602      	mov	r2, r0
 801067c:	460b      	mov	r3, r1
 801067e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				tmp0 = do_division_u(tmp0, 4);
 8010682:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010686:	f04f 0200 	mov.w	r2, #0
 801068a:	f04f 0300 	mov.w	r3, #0
 801068e:	0882      	lsrs	r2, r0, #2
 8010690:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8010694:	088b      	lsrs	r3, r1, #2
 8010696:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			}


			if (tmp0 > (uint64_t)VL53LX_D_006)
 801069a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801069e:	2a00      	cmp	r2, #0
 80106a0:	f173 0300 	sbcs.w	r3, r3, #0
 80106a4:	da05      	bge.n	80106b2 <VL53LX_f_023+0x45e>
				tmp0 = (uint64_t)VL53LX_D_006;
 80106a6:	f04f 32ff 	mov.w	r2, #4294967295
 80106aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80106ae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp0 = tmp0 >> 2;
 80106b2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80106b6:	f04f 0200 	mov.w	r2, #0
 80106ba:	f04f 0300 	mov.w	r3, #0
 80106be:	0882      	lsrs	r2, r0, #2
 80106c0:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80106c4:	088b      	lsrs	r3, r1, #2
 80106c6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 80106ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80106ce:	2b01      	cmp	r3, #1
 80106d0:	bf08      	it	eq
 80106d2:	2a00      	cmpeq	r2, #0
 80106d4:	d305      	bcc.n	80106e2 <VL53LX_f_023+0x48e>
				tmp0 = (uint64_t)VL53LX_D_007;
 80106d6:	f04f 32ff 	mov.w	r2, #4294967295
 80106da:	f04f 0300 	mov.w	r3, #0
 80106de:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 80106e2:	f897 004f 	ldrb.w	r0, [r7, #79]	; 0x4f
 80106e6:	f04f 0100 	mov.w	r1, #0
 80106ea:	f04f 0200 	mov.w	r2, #0
 80106ee:	f04f 0300 	mov.w	r3, #0
 80106f2:	01cb      	lsls	r3, r1, #7
 80106f4:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 80106f8:	01c2      	lsls	r2, r0, #7
 80106fa:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp1 = tmp1 * tmp1;
 80106fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010700:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010702:	fb02 f203 	mul.w	r2, r2, r3
 8010706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010708:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801070a:	fb01 f303 	mul.w	r3, r1, r3
 801070e:	18d1      	adds	r1, r2, r3
 8010710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010712:	fba3 2303 	umull	r2, r3, r3, r3
 8010716:	4419      	add	r1, r3
 8010718:	460b      	mov	r3, r1
 801071a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 801071e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			tmp0 = tmp0 + tmp1;
 8010722:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010726:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801072a:	1884      	adds	r4, r0, r2
 801072c:	603c      	str	r4, [r7, #0]
 801072e:	eb41 0303 	adc.w	r3, r1, r3
 8010732:	607b      	str	r3, [r7, #4]
 8010734:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010738:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70


			if (tmp0 > (uint64_t)VL53LX_D_007)
 801073c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010740:	2b01      	cmp	r3, #1
 8010742:	bf08      	it	eq
 8010744:	2a00      	cmpeq	r2, #0
 8010746:	d305      	bcc.n	8010754 <VL53LX_f_023+0x500>
				tmp0 = (uint64_t)VL53LX_D_007;
 8010748:	f04f 32ff 	mov.w	r2, #4294967295
 801074c:	f04f 0300 	mov.w	r3, #0
 8010750:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70


			sigma_int = VL53LX_isqrt((uint32_t)tmp0);
 8010754:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010756:	4618      	mov	r0, r3
 8010758:	f7fb f821 	bl	800b79e <VL53LX_isqrt>
 801075c:	6578      	str	r0, [r7, #84]	; 0x54

			*psigma_est = (uint16_t)sigma_int;
 801075e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010760:	b29a      	uxth	r2, r3
 8010762:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010766:	801a      	strh	r2, [r3, #0]

			status = VL53LX_ERROR_NONE;
 8010768:	2300      	movs	r3, #0
 801076a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}

	}

	return status;
 801076e:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 8010772:	4618      	mov	r0, r3
 8010774:	3784      	adds	r7, #132	; 0x84
 8010776:	46bd      	mov	sp, r7
 8010778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801077c <VL53LX_wait_for_test_completion>:
}


VL53LX_Error VL53LX_wait_for_test_completion(
	VL53LX_DEV     Dev)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b086      	sub	sp, #24
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010784:	2300      	movs	r3, #0
 8010786:	75fb      	strb	r3, [r7, #23]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	3318      	adds	r3, #24
 801078c:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 801078e:	2300      	movs	r3, #0
 8010790:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53LX_WAIT_METHOD_BLOCKING) {
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	781b      	ldrb	r3, [r3, #0]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d107      	bne.n	80107aa <VL53LX_wait_for_test_completion+0x2e>



		status =
			VL53LX_poll_for_range_completion(
 801079a:	f64e 2160 	movw	r1, #60000	; 0xea60
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f000 f88b 	bl	80108ba <VL53LX_poll_for_range_completion>
 80107a4:	4603      	mov	r3, r0
 80107a6:	75fb      	strb	r3, [r7, #23]
 80107a8:	e01b      	b.n	80107e2 <VL53LX_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 80107aa:	2300      	movs	r3, #0
 80107ac:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 80107ae:	e011      	b.n	80107d4 <VL53LX_wait_for_test_completion+0x58>
			status = VL53LX_is_new_data_ready(
 80107b0:	f107 030f 	add.w	r3, r7, #15
 80107b4:	4619      	mov	r1, r3
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f000 f819 	bl	80107ee <VL53LX_is_new_data_ready>
 80107bc:	4603      	mov	r3, r0
 80107be:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53LX_ERROR_NONE) {
 80107c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d105      	bne.n	80107d4 <VL53LX_wait_for_test_completion+0x58>
				status = VL53LX_WaitMs(
 80107c8:	2101      	movs	r1, #1
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f000 fce6 	bl	801119c <VL53LX_WaitMs>
 80107d0:	4603      	mov	r3, r0
 80107d2:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53LX_ERROR_NONE) {
 80107d4:	7bfb      	ldrb	r3, [r7, #15]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d103      	bne.n	80107e2 <VL53LX_wait_for_test_completion+0x66>
 80107da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d0e6      	beq.n	80107b0 <VL53LX_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 80107e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3718      	adds	r7, #24
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}

080107ee <VL53LX_is_new_data_ready>:


VL53LX_Error VL53LX_is_new_data_ready(
	VL53LX_DEV     Dev,
	uint8_t       *pready)
{
 80107ee:	b580      	push	{r7, lr}
 80107f0:	b086      	sub	sp, #24
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	6078      	str	r0, [r7, #4]
 80107f6:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80107f8:	2300      	movs	r3, #0
 80107fa:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	3318      	adds	r3, #24
 8010800:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8010802:	2300      	movs	r3, #0
 8010804:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8010806:	2300      	movs	r3, #0
 8010808:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 801080a:	2300      	movs	r3, #0
 801080c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 8010814:	f003 0310 	and.w	r3, r3, #16
 8010818:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 801081a:	7bfb      	ldrb	r3, [r7, #15]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d102      	bne.n	8010826 <VL53LX_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 8010820:	2301      	movs	r3, #1
 8010822:	75fb      	strb	r3, [r7, #23]
 8010824:	e001      	b.n	801082a <VL53LX_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 8010826:	2300      	movs	r3, #0
 8010828:	75fb      	strb	r3, [r7, #23]



	status = VL53LX_RdByte(
 801082a:	f107 030e 	add.w	r3, r7, #14
 801082e:	461a      	mov	r2, r3
 8010830:	2131      	movs	r1, #49	; 0x31
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f000 fc2a 	bl	801108c <VL53LX_RdByte>
 8010838:	4603      	mov	r3, r0
 801083a:	75bb      	strb	r3, [r7, #22]
					VL53LX_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 801083c:	7bbb      	ldrb	r3, [r7, #14]
 801083e:	f003 0201 	and.w	r2, r3, #1
 8010842:	7dfb      	ldrb	r3, [r7, #23]
 8010844:	429a      	cmp	r2, r3
 8010846:	d103      	bne.n	8010850 <VL53LX_is_new_data_ready+0x62>
		*pready = 0x01;
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	2201      	movs	r2, #1
 801084c:	701a      	strb	r2, [r3, #0]
 801084e:	e002      	b.n	8010856 <VL53LX_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	2200      	movs	r2, #0
 8010854:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8010856:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 801085a:	4618      	mov	r0, r3
 801085c:	3718      	adds	r7, #24
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}

08010862 <VL53LX_poll_for_boot_completion>:


VL53LX_Error VL53LX_poll_for_boot_completion(
	VL53LX_DEV    Dev,
	uint32_t      timeout_ms)
{
 8010862:	b580      	push	{r7, lr}
 8010864:	b086      	sub	sp, #24
 8010866:	af02      	add	r7, sp, #8
 8010868:	6078      	str	r0, [r7, #4]
 801086a:	6039      	str	r1, [r7, #0]


	VL53LX_Error status       = VL53LX_ERROR_NONE;
 801086c:	2300      	movs	r3, #0
 801086e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53LX_WaitUs(
 8010870:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f000 fca1 	bl	80111bc <VL53LX_WaitUs>
 801087a:	4603      	mov	r3, r0
 801087c:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53LX_FIRMWARE_BOOT_TIME_US);

	if (status == VL53LX_ERROR_NONE)
 801087e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d10b      	bne.n	801089e <VL53LX_poll_for_boot_completion+0x3c>
		status =
			VL53LX_WaitValueMaskEx(
 8010886:	2301      	movs	r3, #1
 8010888:	9301      	str	r3, [sp, #4]
 801088a:	2301      	movs	r3, #1
 801088c:	9300      	str	r3, [sp, #0]
 801088e:	2301      	movs	r3, #1
 8010890:	22e5      	movs	r2, #229	; 0xe5
 8010892:	6839      	ldr	r1, [r7, #0]
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f000 fca9 	bl	80111ec <VL53LX_WaitValueMaskEx>
 801089a:	4603      	mov	r3, r0
 801089c:	73fb      	strb	r3, [r7, #15]
				VL53LX_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53LX_POLLING_DELAY_MS);

	if (status == VL53LX_ERROR_NONE)
 801089e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d103      	bne.n	80108ae <VL53LX_poll_for_boot_completion+0x4c>
		VL53LX_init_ll_driver_state(Dev, VL53LX_DEVICESTATE_SW_STANDBY);
 80108a6:	2103      	movs	r1, #3
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f7f7 f815 	bl	80078d8 <VL53LX_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 80108ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80108b2:	4618      	mov	r0, r3
 80108b4:	3710      	adds	r7, #16
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}

080108ba <VL53LX_poll_for_range_completion>:


VL53LX_Error VL53LX_poll_for_range_completion(
	VL53LX_DEV     Dev,
	uint32_t       timeout_ms)
{
 80108ba:	b580      	push	{r7, lr}
 80108bc:	b088      	sub	sp, #32
 80108be:	af02      	add	r7, sp, #8
 80108c0:	6078      	str	r0, [r7, #4]
 80108c2:	6039      	str	r1, [r7, #0]


	VL53LX_Error status = VL53LX_ERROR_NONE;
 80108c4:	2300      	movs	r3, #0
 80108c6:	75bb      	strb	r3, [r7, #22]
	VL53LX_LLDriverData_t *pdev = VL53LXDevStructGetLLDriverHandle(Dev);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	3318      	adds	r3, #24
 80108cc:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 80108ce:	2300      	movs	r3, #0
 80108d0:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 80108d2:	2300      	movs	r3, #0
 80108d4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 80108d6:	693b      	ldr	r3, [r7, #16]
 80108d8:	f893 330a 	ldrb.w	r3, [r3, #778]	; 0x30a
	gpio__mux_active_high_hv =
 80108dc:	f003 0310 	and.w	r3, r3, #16
 80108e0:	73fb      	strb	r3, [r7, #15]
			VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53LX_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 80108e2:	7bfb      	ldrb	r3, [r7, #15]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d102      	bne.n	80108ee <VL53LX_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 80108e8:	2301      	movs	r3, #1
 80108ea:	75fb      	strb	r3, [r7, #23]
 80108ec:	e001      	b.n	80108f2 <VL53LX_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 80108ee:	2300      	movs	r3, #0
 80108f0:	75fb      	strb	r3, [r7, #23]

	status =
		VL53LX_WaitValueMaskEx(
 80108f2:	7dfb      	ldrb	r3, [r7, #23]
 80108f4:	2201      	movs	r2, #1
 80108f6:	9201      	str	r2, [sp, #4]
 80108f8:	2201      	movs	r2, #1
 80108fa:	9200      	str	r2, [sp, #0]
 80108fc:	2231      	movs	r2, #49	; 0x31
 80108fe:	6839      	ldr	r1, [r7, #0]
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	f000 fc73 	bl	80111ec <VL53LX_WaitValueMaskEx>
 8010906:	4603      	mov	r3, r0
 8010908:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53LX_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 801090a:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 801090e:	4618      	mov	r0, r3
 8010910:	3718      	adds	r7, #24
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}

08010916 <VL53LX_f_032>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 8010916:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801091a:	b0a2      	sub	sp, #136	; 0x88
 801091c:	af00      	add	r7, sp, #0
 801091e:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010920:	4618      	mov	r0, r3
 8010922:	460b      	mov	r3, r1
 8010924:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8010928:	4613      	mov	r3, r2
 801092a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 801092e:	4603      	mov	r3, r0
 8010930:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57



	VL53LX_Error status = VL53LX_ERROR_NONE;
 8010934:	2300      	movs	r3, #0
 8010936:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	uint8_t row = 0;
 801093a:	2300      	movs	r3, #0
 801093c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t col = 0;
 8010940:	2300      	movs	r3, #0
 8010942:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65



	int16_t  bound_l_x = 0;
 8010946:	2300      	movs	r3, #0
 8010948:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	int16_t  bound_r_x = 0;
 801094c:	2300      	movs	r3, #0
 801094e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	int16_t  bound_u_y = 0;
 8010952:	2300      	movs	r3, #0
 8010954:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	int16_t  bound_d_y = 0;
 8010958:	2300      	movs	r3, #0
 801095a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

	int64_t xtalk_rate_ll = 0;
 801095e:	f04f 0200 	mov.w	r2, #0
 8010962:	f04f 0300 	mov.w	r3, #0
 8010966:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	int64_t xtalk_rate_ur = 0;
 801096a:	f04f 0200 	mov.w	r2, #0
 801096e:	f04f 0300 	mov.w	r3, #0
 8010972:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	int64_t xtalk_avg = 0;
 8010976:	f04f 0200 	mov.w	r2, #0
 801097a:	f04f 0300 	mov.w	r3, #0
 801097e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	if (status == VL53LX_ERROR_NONE) {
 8010982:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010986:	2b00      	cmp	r3, #0
 8010988:	d108      	bne.n	801099c <VL53LX_f_032+0x86>
		VL53LX_decode_row_col(
 801098a:	f107 0265 	add.w	r2, r7, #101	; 0x65
 801098e:	f107 0166 	add.w	r1, r7, #102	; 0x66
 8010992:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8010996:	4618      	mov	r0, r3
 8010998:	f7fb fad4 	bl	800bf44 <VL53LX_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53LX_ERROR_NONE) {
 801099c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d165      	bne.n	8010a70 <VL53LX_f_032+0x15a>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 80109a4:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80109a8:	091b      	lsrs	r3, r3, #4
 80109aa:	b2db      	uxtb	r3, r3
 80109ac:	f003 0301 	and.w	r3, r3, #1
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d00e      	beq.n	80109d2 <VL53LX_f_032+0xbc>
			bound_l_x = (int16_t) col -
 80109b4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80109b8:	b29a      	uxth	r2, r3
 80109ba:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80109be:	095b      	lsrs	r3, r3, #5
 80109c0:	b2db      	uxtb	r3, r3
 80109c2:	b29b      	uxth	r3, r3
 80109c4:	1ad3      	subs	r3, r2, r3
 80109c6:	b29b      	uxth	r3, r3
 80109c8:	3b01      	subs	r3, #1
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 80109d0:	e00b      	b.n	80109ea <VL53LX_f_032+0xd4>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 80109d2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80109d6:	b29a      	uxth	r2, r3
 80109d8:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80109dc:	095b      	lsrs	r3, r3, #5
 80109de:	b2db      	uxtb	r3, r3
 80109e0:	b29b      	uxth	r3, r3
 80109e2:	1ad3      	subs	r3, r2, r3
 80109e4:	b29b      	uxth	r3, r3
 80109e6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 80109ea:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80109ee:	b29a      	uxth	r2, r3
 80109f0:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80109f4:	095b      	lsrs	r3, r3, #5
 80109f6:	b2db      	uxtb	r3, r3
 80109f8:	b29b      	uxth	r3, r3
 80109fa:	4413      	add	r3, r2
 80109fc:	b29b      	uxth	r3, r3
 80109fe:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 8010a02:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010a06:	f003 0301 	and.w	r3, r3, #1
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d011      	beq.n	8010a32 <VL53LX_f_032+0x11c>
			bound_d_y = (int16_t) row -
 8010a0e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8010a12:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 8010a14:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010a18:	f003 020f 	and.w	r2, r3, #15
 8010a1c:	0fd3      	lsrs	r3, r2, #31
 8010a1e:	4413      	add	r3, r2
 8010a20:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 8010a22:	b29b      	uxth	r3, r3
 8010a24:	1acb      	subs	r3, r1, r3
 8010a26:	b29b      	uxth	r3, r3
 8010a28:	3b01      	subs	r3, #1
 8010a2a:	b29b      	uxth	r3, r3
 8010a2c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8010a30:	e00f      	b.n	8010a52 <VL53LX_f_032+0x13c>
		else
			bound_d_y = (int16_t) row -
 8010a32:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8010a36:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 8010a38:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010a3c:	f003 020f 	and.w	r2, r3, #15
 8010a40:	0fd3      	lsrs	r3, r2, #31
 8010a42:	4413      	add	r3, r2
 8010a44:	105b      	asrs	r3, r3, #1
 8010a46:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 8010a48:	b29b      	uxth	r3, r3
 8010a4a:	440b      	add	r3, r1
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

		bound_u_y = (int16_t) row +
 8010a52:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8010a56:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 8010a58:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8010a5c:	f003 020f 	and.w	r2, r3, #15
 8010a60:	0fd3      	lsrs	r3, r2, #31
 8010a62:	4413      	add	r3, r2
 8010a64:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8010a66:	b29b      	uxth	r3, r3
 8010a68:	440b      	add	r3, r1
 8010a6a:	b29b      	uxth	r3, r3
 8010a6c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8010a70:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d133      	bne.n	8010ae0 <VL53LX_f_032+0x1ca>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8010a78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010a7c:	b29a      	uxth	r2, r3
 8010a7e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8010a82:	4413      	add	r3, r2
 8010a84:	b29b      	uxth	r3, r3
 8010a86:	005b      	lsls	r3, r3, #1
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	3b0f      	subs	r3, #15
 8010a8c:	b29b      	uxth	r3, r3
 8010a8e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8010a92:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010a96:	b29a      	uxth	r2, r3
 8010a98:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8010a9c:	4413      	add	r3, r2
 8010a9e:	b29b      	uxth	r3, r3
 8010aa0:	005b      	lsls	r3, r3, #1
 8010aa2:	b29b      	uxth	r3, r3
 8010aa4:	3b0f      	subs	r3, #15
 8010aa6:	b29b      	uxth	r3, r3
 8010aa8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8010aac:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 8010ab0:	b29a      	uxth	r2, r3
 8010ab2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8010ab6:	4413      	add	r3, r2
 8010ab8:	b29b      	uxth	r3, r3
 8010aba:	005b      	lsls	r3, r3, #1
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	3b0f      	subs	r3, #15
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8010ac6:	f997 30a8 	ldrsb.w	r3, [r7, #168]	; 0xa8
 8010aca:	b29a      	uxth	r2, r3
 8010acc:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8010ad0:	4413      	add	r3, r2
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	005b      	lsls	r3, r3, #1
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	3b0f      	subs	r3, #15
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
		"Bound_d_y", bound_d_y);




	if (status == VL53LX_ERROR_NONE) {
 8010ae0:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	f040 80cb 	bne.w	8010c80 <VL53LX_f_032+0x36a>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010aea:	f9b7 0086 	ldrsh.w	r0, [r7, #134]	; 0x86
 8010aee:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010af2:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8010af6:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010afa:	fb02 f501 	mul.w	r5, r2, r1
 8010afe:	fb00 f403 	mul.w	r4, r0, r3
 8010b02:	442c      	add	r4, r5
 8010b04:	fba0 8902 	umull	r8, r9, r0, r2
 8010b08:	eb04 0309 	add.w	r3, r4, r9
 8010b0c:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010b0e:	f9b7 0080 	ldrsh.w	r0, [r7, #128]	; 0x80
 8010b12:	ea4f 71e0 	mov.w	r1, r0, asr #31
					((int64_t)ygradient));
 8010b16:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8010b1a:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8010b1e:	fb02 f501 	mul.w	r5, r2, r1
 8010b22:	fb00 f403 	mul.w	r4, r0, r3
 8010b26:	442c      	add	r4, r5
 8010b28:	fba0 2302 	umull	r2, r3, r0, r2
 8010b2c:	18e1      	adds	r1, r4, r3
 8010b2e:	460b      	mov	r3, r1
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8010b30:	eb18 0102 	adds.w	r1, r8, r2
 8010b34:	6339      	str	r1, [r7, #48]	; 0x30
 8010b36:	eb49 0303 	adc.w	r3, r9, r3
 8010b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8010b3c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8010b40:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8010b44:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010b48:	f112 0a01 	adds.w	sl, r2, #1
 8010b4c:	f143 0b00 	adc.w	fp, r3, #0
 8010b50:	ea4f 73db 	mov.w	r3, fp, lsr #31
 8010b54:	461a      	mov	r2, r3
 8010b56:	f04f 0300 	mov.w	r3, #0
 8010b5a:	eb12 010a 	adds.w	r1, r2, sl
 8010b5e:	62b9      	str	r1, [r7, #40]	; 0x28
 8010b60:	eb43 030b 	adc.w	r3, r3, fp
 8010b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b66:	f04f 0200 	mov.w	r2, #0
 8010b6a:	f04f 0300 	mov.w	r3, #0
 8010b6e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8010b72:	4621      	mov	r1, r4
 8010b74:	084a      	lsrs	r2, r1, #1
 8010b76:	4629      	mov	r1, r5
 8010b78:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010b7c:	4629      	mov	r1, r5
 8010b7e:	104b      	asrs	r3, r1, #1
 8010b80:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8010b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b86:	461a      	mov	r2, r3
 8010b88:	f04f 0300 	mov.w	r3, #0
 8010b8c:	f04f 0000 	mov.w	r0, #0
 8010b90:	f04f 0100 	mov.w	r1, #0
 8010b94:	0099      	lsls	r1, r3, #2
 8010b96:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8010b9a:	0090      	lsls	r0, r2, #2
 8010b9c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8010ba0:	1814      	adds	r4, r2, r0
 8010ba2:	623c      	str	r4, [r7, #32]
 8010ba4:	414b      	adcs	r3, r1
 8010ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8010ba8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010bac:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8010bb0:	f9b7 0084 	ldrsh.w	r0, [r7, #132]	; 0x84
 8010bb4:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8010bb8:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8010bbc:	ea4f 73e2 	mov.w	r3, r2, asr #31
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8010bc0:	fb02 f501 	mul.w	r5, r2, r1
 8010bc4:	fb00 f403 	mul.w	r4, r0, r3
 8010bc8:	442c      	add	r4, r5
 8010bca:	fba0 8902 	umull	r8, r9, r0, r2
 8010bce:	eb04 0309 	add.w	r3, r4, r9
 8010bd2:	4699      	mov	r9, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8010bd4:	f9b7 0082 	ldrsh.w	r0, [r7, #130]	; 0x82
 8010bd8:	ea4f 71e0 	mov.w	r1, r0, asr #31
			((int64_t)ygradient));
 8010bdc:	f9b7 2058 	ldrsh.w	r2, [r7, #88]	; 0x58
 8010be0:	ea4f 73e2 	mov.w	r3, r2, asr #31
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8010be4:	fb02 f501 	mul.w	r5, r2, r1
 8010be8:	fb00 f403 	mul.w	r4, r0, r3
 8010bec:	442c      	add	r4, r5
 8010bee:	fba0 2302 	umull	r2, r3, r0, r2
 8010bf2:	18e1      	adds	r1, r4, r3
 8010bf4:	460b      	mov	r3, r1
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8010bf6:	eb18 0102 	adds.w	r1, r8, r2
 8010bfa:	61b9      	str	r1, [r7, #24]
 8010bfc:	eb49 0303 	adc.w	r3, r9, r3
 8010c00:	61fb      	str	r3, [r7, #28]
 8010c02:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010c06:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8010c0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010c0e:	1c51      	adds	r1, r2, #1
 8010c10:	64b9      	str	r1, [r7, #72]	; 0x48
 8010c12:	f143 0300 	adc.w	r3, r3, #0
 8010c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010c18:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8010c1c:	462b      	mov	r3, r5
 8010c1e:	0fdb      	lsrs	r3, r3, #31
 8010c20:	461a      	mov	r2, r3
 8010c22:	f04f 0300 	mov.w	r3, #0
 8010c26:	4621      	mov	r1, r4
 8010c28:	1851      	adds	r1, r2, r1
 8010c2a:	6139      	str	r1, [r7, #16]
 8010c2c:	4629      	mov	r1, r5
 8010c2e:	eb43 0101 	adc.w	r1, r3, r1
 8010c32:	6179      	str	r1, [r7, #20]
 8010c34:	f04f 0200 	mov.w	r2, #0
 8010c38:	f04f 0300 	mov.w	r3, #0
 8010c3c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010c40:	4621      	mov	r1, r4
 8010c42:	084a      	lsrs	r2, r1, #1
 8010c44:	4629      	mov	r1, r5
 8010c46:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010c4a:	4629      	mov	r1, r5
 8010c4c:	104b      	asrs	r3, r1, #1
 8010c4e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8010c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c54:	4618      	mov	r0, r3
 8010c56:	f04f 0100 	mov.w	r1, #0
 8010c5a:	f04f 0200 	mov.w	r2, #0
 8010c5e:	f04f 0300 	mov.w	r3, #0
 8010c62:	008b      	lsls	r3, r1, #2
 8010c64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010c68:	0082      	lsls	r2, r0, #2
 8010c6a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8010c6e:	1884      	adds	r4, r0, r2
 8010c70:	60bc      	str	r4, [r7, #8]
 8010c72:	eb41 0303 	adc.w	r3, r1, r3
 8010c76:	60fb      	str	r3, [r7, #12]
 8010c78:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8010c7c:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53LX_ERROR_NONE)
 8010c80:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d12e      	bne.n	8010ce6 <VL53LX_f_032+0x3d0>
		xtalk_avg = do_division_s(
 8010c88:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8010c8c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8010c90:	1884      	adds	r4, r0, r2
 8010c92:	643c      	str	r4, [r7, #64]	; 0x40
 8010c94:	eb41 0303 	adc.w	r3, r1, r3
 8010c98:	647b      	str	r3, [r7, #68]	; 0x44
 8010c9a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	3301      	adds	r3, #1
 8010ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ca4:	4613      	mov	r3, r2
 8010ca6:	f143 0300 	adc.w	r3, r3, #0
 8010caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010cac:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8010cb0:	462b      	mov	r3, r5
 8010cb2:	0fdb      	lsrs	r3, r3, #31
 8010cb4:	461a      	mov	r2, r3
 8010cb6:	f04f 0300 	mov.w	r3, #0
 8010cba:	4621      	mov	r1, r4
 8010cbc:	1851      	adds	r1, r2, r1
 8010cbe:	6039      	str	r1, [r7, #0]
 8010cc0:	4629      	mov	r1, r5
 8010cc2:	eb43 0101 	adc.w	r1, r3, r1
 8010cc6:	6079      	str	r1, [r7, #4]
 8010cc8:	f04f 0200 	mov.w	r2, #0
 8010ccc:	f04f 0300 	mov.w	r3, #0
 8010cd0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010cd4:	4621      	mov	r1, r4
 8010cd6:	084a      	lsrs	r2, r1, #1
 8010cd8:	4629      	mov	r1, r5
 8010cda:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010cde:	4629      	mov	r1, r5
 8010ce0:	104b      	asrs	r3, r1, #1
 8010ce2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53LX_ERROR_NONE)
 8010ce6:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d10b      	bne.n	8010d06 <VL53LX_f_032+0x3f0>
		if (xtalk_avg < 0)
 8010cee:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8010cf2:	2a00      	cmp	r2, #0
 8010cf4:	f173 0300 	sbcs.w	r3, r3, #0
 8010cf8:	da05      	bge.n	8010d06 <VL53LX_f_032+0x3f0>
			xtalk_avg = 0;
 8010cfa:	f04f 0200 	mov.w	r2, #0
 8010cfe:	f04f 0300 	mov.w	r3, #0
 8010d02:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8010d06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010d08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010d0c:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8010d0e:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3788      	adds	r7, #136	; 0x88
 8010d16:	46bd      	mov	sp, r7
 8010d18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010d1c <VL53LX_f_033>:
	VL53LX_histogram_bin_data_t    *phist_data,
	VL53LX_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53LX_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8010d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d20:	b08d      	sub	sp, #52	; 0x34
 8010d22:	af00      	add	r7, sp, #0
 8010d24:	60f8      	str	r0, [r7, #12]
 8010d26:	60b9      	str	r1, [r7, #8]
 8010d28:	607a      	str	r2, [r7, #4]
 8010d2a:	603b      	str	r3, [r7, #0]


	VL53LX_Error status              = VL53LX_ERROR_NONE;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	uint64_t xtalk_events_per_spad = 0;
 8010d32:	f04f 0200 	mov.w	r2, #0
 8010d36:	f04f 0300 	mov.w	r3, #0
 8010d3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint64_t xtalk_total_events = 0;
 8010d3e:	f04f 0200 	mov.w	r2, #0
 8010d42:	f04f 0300 	mov.w	r3, #0
 8010d46:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t xtalk_temp_bin = 0;
 8010d4a:	f04f 0200 	mov.w	r2, #0
 8010d4e:	f04f 0300 	mov.w	r3, #0
 8010d52:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t  i = 0;
 8010d56:	2300      	movs	r3, #0
 8010d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f04f 0100 	mov.w	r1, #0
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	f04f 0300 	mov.w	r3, #0
 8010d70:	fb02 fc01 	mul.w	ip, r2, r1
 8010d74:	fb00 f603 	mul.w	r6, r0, r3
 8010d78:	4466      	add	r6, ip
 8010d7a:	fba0 2302 	umull	r2, r3, r0, r2
 8010d7e:	18f1      	adds	r1, r6, r3
 8010d80:	460b      	mov	r3, r1
 8010d82:	f512 7afa 	adds.w	sl, r2, #500	; 0x1f4
 8010d86:	f143 0b00 	adc.w	fp, r3, #0
 8010d8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010d8e:	f04f 0300 	mov.w	r3, #0
 8010d92:	4650      	mov	r0, sl
 8010d94:	4659      	mov	r1, fp
 8010d96:	f7ef fac3 	bl	8000320 <__aeabi_uldivmod>
 8010d9a:	4602      	mov	r2, r0
 8010d9c:	460b      	mov	r3, r1
 8010d9e:	e9c7 2306 	strd	r2, r3, [r7, #24]




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8010da8:	b29a      	uxth	r2, r3
 8010daa:	f04f 0300 	mov.w	r3, #0
	xtalk_total_events = xtalk_events_per_spad *
 8010dae:	69f9      	ldr	r1, [r7, #28]
 8010db0:	fb02 f001 	mul.w	r0, r2, r1
 8010db4:	69b9      	ldr	r1, [r7, #24]
 8010db6:	fb03 f101 	mul.w	r1, r3, r1
 8010dba:	4401      	add	r1, r0
 8010dbc:	69b8      	ldr	r0, [r7, #24]
 8010dbe:	fba0 2302 	umull	r2, r3, r0, r2
 8010dc2:	4419      	add	r1, r3
 8010dc4:	460b      	mov	r3, r1
 8010dc6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8010dca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8010dce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8010dd2:	f04f 0200 	mov.w	r2, #0
 8010dd6:	f04f 0300 	mov.w	r3, #0
 8010dda:	0a02      	lsrs	r2, r0, #8
 8010ddc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8010de0:	0a0b      	lsrs	r3, r1, #8
 8010de2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8010de6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010dea:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 8010dee:	f143 0900 	adc.w	r9, r3, #0
 8010df2:	f04f 0200 	mov.w	r2, #0
 8010df6:	f04f 0300 	mov.w	r3, #0
 8010dfa:	ea4f 22d8 	mov.w	r2, r8, lsr #11
 8010dfe:	ea42 5249 	orr.w	r2, r2, r9, lsl #21
 8010e02:	ea4f 23d9 	mov.w	r3, r9, lsr #11
 8010e06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (xtalk_total_events > 0xFFFFFFFF)
 8010e0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	bf08      	it	eq
 8010e12:	2a00      	cmpeq	r2, #0
 8010e14:	d305      	bcc.n	8010e22 <VL53LX_f_033+0x106>
		xtalk_total_events = 0xFFFFFFFF;
 8010e16:	f04f 32ff 	mov.w	r2, #4294967295
 8010e1a:	f04f 0300 	mov.w	r3, #0
 8010e1e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28





	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8010e22:	2300      	movs	r3, #0
 8010e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e28:	e035      	b.n	8010e96 <VL53LX_f_033+0x17a>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8010e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e2e:	68ba      	ldr	r2, [r7, #8]
 8010e30:	3302      	adds	r3, #2
 8010e32:	009b      	lsls	r3, r3, #2
 8010e34:	4413      	add	r3, r2
 8010e36:	685b      	ldr	r3, [r3, #4]
 8010e38:	461a      	mov	r2, r3
 8010e3a:	f04f 0300 	mov.w	r3, #0
 8010e3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e40:	fb02 f001 	mul.w	r0, r2, r1
 8010e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010e46:	fb03 f101 	mul.w	r1, r3, r1
 8010e4a:	4401      	add	r1, r0
 8010e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e4e:	fba0 2302 	umull	r2, r3, r0, r2
 8010e52:	4419      	add	r1, r3
 8010e54:	460b      	mov	r3, r1
 8010e56:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8010e5a:	e9c7 2304 	strd	r2, r3, [r7, #16]
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8010e5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010e62:	f512 7400 	adds.w	r4, r2, #512	; 0x200
 8010e66:	f143 0500 	adc.w	r5, r3, #0
 8010e6a:	f04f 0200 	mov.w	r2, #0
 8010e6e:	f04f 0300 	mov.w	r3, #0
 8010e72:	0aa2      	lsrs	r2, r4, #10
 8010e74:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
 8010e78:	0aab      	lsrs	r3, r5, #10
 8010e7a:	e9c7 2304 	strd	r2, r3, [r7, #16]

		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8010e7e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010e82:	6939      	ldr	r1, [r7, #16]
 8010e84:	683b      	ldr	r3, [r7, #0]
 8010e86:	3206      	adds	r2, #6
 8010e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53LX_p_021; i++) {
 8010e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e90:	3301      	adds	r3, #1
 8010e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	7a9b      	ldrb	r3, [r3, #10]
 8010e9a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	d3c3      	bcc.n	8010e2a <VL53LX_f_033+0x10e>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8010ea2:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3734      	adds	r7, #52	; 0x34
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010eb0 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b084      	sub	sp, #16
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	60f8      	str	r0, [r7, #12]
 8010eb8:	60b9      	str	r1, [r7, #8]
 8010eba:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	68db      	ldr	r3, [r3, #12]
 8010ec0:	68fa      	ldr	r2, [r7, #12]
 8010ec2:	8910      	ldrh	r0, [r2, #8]
 8010ec4:	687a      	ldr	r2, [r7, #4]
 8010ec6:	b292      	uxth	r2, r2
 8010ec8:	68b9      	ldr	r1, [r7, #8]
 8010eca:	4798      	blx	r3
 8010ecc:	4603      	mov	r3, r0
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3710      	adds	r7, #16
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}

08010ed6 <_I2CRead>:

int _I2CRead(VL53LX_DEV Dev, uint8_t *pdata, uint32_t count) {
 8010ed6:	b580      	push	{r7, lr}
 8010ed8:	b084      	sub	sp, #16
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	60f8      	str	r0, [r7, #12]
 8010ede:	60b9      	str	r1, [r7, #8]
 8010ee0:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	691b      	ldr	r3, [r3, #16]
 8010ee6:	68fa      	ldr	r2, [r7, #12]
 8010ee8:	8910      	ldrh	r0, [r2, #8]
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	b292      	uxth	r2, r2
 8010eee:	68b9      	ldr	r1, [r7, #8]
 8010ef0:	4798      	blx	r3
 8010ef2:	4603      	mov	r3, r0
}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3710      	adds	r7, #16
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}

08010efc <VL53LX_WriteMulti>:

VL53LX_Error VL53LX_WriteMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b086      	sub	sp, #24
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	60f8      	str	r0, [r7, #12]
 8010f04:	607a      	str	r2, [r7, #4]
 8010f06:	603b      	str	r3, [r7, #0]
 8010f08:	460b      	mov	r3, r1
 8010f0a:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	2bff      	cmp	r3, #255	; 0xff
 8010f14:	d902      	bls.n	8010f1c <VL53LX_WriteMulti+0x20>
        return VL53LX_ERROR_INVALID_PARAMS;
 8010f16:	f06f 0303 	mvn.w	r3, #3
 8010f1a:	e01d      	b.n	8010f58 <VL53LX_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8010f1c:	897b      	ldrh	r3, [r7, #10]
 8010f1e:	0a1b      	lsrs	r3, r3, #8
 8010f20:	b29b      	uxth	r3, r3
 8010f22:	b2da      	uxtb	r2, r3
 8010f24:	4b0e      	ldr	r3, [pc, #56]	; (8010f60 <VL53LX_WriteMulti+0x64>)
 8010f26:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010f28:	897b      	ldrh	r3, [r7, #10]
 8010f2a:	b2da      	uxtb	r2, r3
 8010f2c:	4b0c      	ldr	r3, [pc, #48]	; (8010f60 <VL53LX_WriteMulti+0x64>)
 8010f2e:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8010f30:	683a      	ldr	r2, [r7, #0]
 8010f32:	6879      	ldr	r1, [r7, #4]
 8010f34:	480b      	ldr	r0, [pc, #44]	; (8010f64 <VL53LX_WriteMulti+0x68>)
 8010f36:	f003 fa39 	bl	80143ac <memcpy>
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	3302      	adds	r3, #2
 8010f3e:	461a      	mov	r2, r3
 8010f40:	4907      	ldr	r1, [pc, #28]	; (8010f60 <VL53LX_WriteMulti+0x64>)
 8010f42:	68f8      	ldr	r0, [r7, #12]
 8010f44:	f7ff ffb4 	bl	8010eb0 <_I2CWrite>
 8010f48:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010f4a:	693b      	ldr	r3, [r7, #16]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d001      	beq.n	8010f54 <VL53LX_WriteMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010f50:	23f3      	movs	r3, #243	; 0xf3
 8010f52:	75fb      	strb	r3, [r7, #23]
    }
    VL53LX_PutI2cBus();
    return Status;
 8010f54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3718      	adds	r7, #24
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}
 8010f60:	200071ec 	.word	0x200071ec
 8010f64:	200071ee 	.word	0x200071ee

08010f68 <VL53LX_ReadMulti>:

VL53LX_Error VL53LX_ReadMulti(VL53LX_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b086      	sub	sp, #24
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	60f8      	str	r0, [r7, #12]
 8010f70:	607a      	str	r2, [r7, #4]
 8010f72:	603b      	str	r3, [r7, #0]
 8010f74:	460b      	mov	r3, r1
 8010f76:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010f7c:	897b      	ldrh	r3, [r7, #10]
 8010f7e:	0a1b      	lsrs	r3, r3, #8
 8010f80:	b29b      	uxth	r3, r3
 8010f82:	b2da      	uxtb	r2, r3
 8010f84:	4b12      	ldr	r3, [pc, #72]	; (8010fd0 <VL53LX_ReadMulti+0x68>)
 8010f86:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010f88:	897b      	ldrh	r3, [r7, #10]
 8010f8a:	b2da      	uxtb	r2, r3
 8010f8c:	4b10      	ldr	r3, [pc, #64]	; (8010fd0 <VL53LX_ReadMulti+0x68>)
 8010f8e:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8010f90:	2202      	movs	r2, #2
 8010f92:	490f      	ldr	r1, [pc, #60]	; (8010fd0 <VL53LX_ReadMulti+0x68>)
 8010f94:	68f8      	ldr	r0, [r7, #12]
 8010f96:	f7ff ff8b 	bl	8010eb0 <_I2CWrite>
 8010f9a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d002      	beq.n	8010fa8 <VL53LX_ReadMulti+0x40>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010fa2:	23f3      	movs	r3, #243	; 0xf3
 8010fa4:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010fa6:	e00c      	b.n	8010fc2 <VL53LX_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8010fa8:	683a      	ldr	r2, [r7, #0]
 8010faa:	6879      	ldr	r1, [r7, #4]
 8010fac:	68f8      	ldr	r0, [r7, #12]
 8010fae:	f7ff ff92 	bl	8010ed6 <_I2CRead>
 8010fb2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d002      	beq.n	8010fc0 <VL53LX_ReadMulti+0x58>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8010fba:	23f3      	movs	r3, #243	; 0xf3
 8010fbc:	75fb      	strb	r3, [r7, #23]
 8010fbe:	e000      	b.n	8010fc2 <VL53LX_ReadMulti+0x5a>
    }
done:
 8010fc0:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 8010fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	3718      	adds	r7, #24
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}
 8010fce:	bf00      	nop
 8010fd0:	200071ec 	.word	0x200071ec

08010fd4 <VL53LX_WrByte>:

VL53LX_Error VL53LX_WrByte(VL53LX_DEV Dev, uint16_t index, uint8_t data) {
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b084      	sub	sp, #16
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	460b      	mov	r3, r1
 8010fde:	807b      	strh	r3, [r7, #2]
 8010fe0:	4613      	mov	r3, r2
 8010fe2:	707b      	strb	r3, [r7, #1]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8010fe8:	887b      	ldrh	r3, [r7, #2]
 8010fea:	0a1b      	lsrs	r3, r3, #8
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	b2da      	uxtb	r2, r3
 8010ff0:	4b0c      	ldr	r3, [pc, #48]	; (8011024 <VL53LX_WrByte+0x50>)
 8010ff2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8010ff4:	887b      	ldrh	r3, [r7, #2]
 8010ff6:	b2da      	uxtb	r2, r3
 8010ff8:	4b0a      	ldr	r3, [pc, #40]	; (8011024 <VL53LX_WrByte+0x50>)
 8010ffa:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8010ffc:	4a09      	ldr	r2, [pc, #36]	; (8011024 <VL53LX_WrByte+0x50>)
 8010ffe:	787b      	ldrb	r3, [r7, #1]
 8011000:	7093      	strb	r3, [r2, #2]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8011002:	2203      	movs	r2, #3
 8011004:	4907      	ldr	r1, [pc, #28]	; (8011024 <VL53LX_WrByte+0x50>)
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f7ff ff52 	bl	8010eb0 <_I2CWrite>
 801100c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 801100e:	68bb      	ldr	r3, [r7, #8]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d001      	beq.n	8011018 <VL53LX_WrByte+0x44>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011014:	23f3      	movs	r3, #243	; 0xf3
 8011016:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 8011018:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801101c:	4618      	mov	r0, r3
 801101e:	3710      	adds	r7, #16
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}
 8011024:	200071ec 	.word	0x200071ec

08011028 <VL53LX_WrWord>:

VL53LX_Error VL53LX_WrWord(VL53LX_DEV Dev, uint16_t index, uint16_t data) {
 8011028:	b580      	push	{r7, lr}
 801102a:	b084      	sub	sp, #16
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	460b      	mov	r3, r1
 8011032:	807b      	strh	r3, [r7, #2]
 8011034:	4613      	mov	r3, r2
 8011036:	803b      	strh	r3, [r7, #0]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011038:	2300      	movs	r3, #0
 801103a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 801103c:	887b      	ldrh	r3, [r7, #2]
 801103e:	0a1b      	lsrs	r3, r3, #8
 8011040:	b29b      	uxth	r3, r3
 8011042:	b2da      	uxtb	r2, r3
 8011044:	4b10      	ldr	r3, [pc, #64]	; (8011088 <VL53LX_WrWord+0x60>)
 8011046:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8011048:	887b      	ldrh	r3, [r7, #2]
 801104a:	b2da      	uxtb	r2, r3
 801104c:	4b0e      	ldr	r3, [pc, #56]	; (8011088 <VL53LX_WrWord+0x60>)
 801104e:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 8011050:	883b      	ldrh	r3, [r7, #0]
 8011052:	0a1b      	lsrs	r3, r3, #8
 8011054:	b29b      	uxth	r3, r3
 8011056:	b2da      	uxtb	r2, r3
 8011058:	4b0b      	ldr	r3, [pc, #44]	; (8011088 <VL53LX_WrWord+0x60>)
 801105a:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 801105c:	883b      	ldrh	r3, [r7, #0]
 801105e:	b2da      	uxtb	r2, r3
 8011060:	4b09      	ldr	r3, [pc, #36]	; (8011088 <VL53LX_WrWord+0x60>)
 8011062:	70da      	strb	r2, [r3, #3]

    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 8011064:	2204      	movs	r2, #4
 8011066:	4908      	ldr	r1, [pc, #32]	; (8011088 <VL53LX_WrWord+0x60>)
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f7ff ff21 	bl	8010eb0 <_I2CWrite>
 801106e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d001      	beq.n	801107a <VL53LX_WrWord+0x52>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011076:	23f3      	movs	r3, #243	; 0xf3
 8011078:	73fb      	strb	r3, [r7, #15]
    }
    VL53LX_PutI2cBus();
    return Status;
 801107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801107e:	4618      	mov	r0, r3
 8011080:	3710      	adds	r7, #16
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
 8011086:	bf00      	nop
 8011088:	200071ec 	.word	0x200071ec

0801108c <VL53LX_RdByte>:
    Status = VL53LX_WrByte(Dev, index, data);
done:
    return Status;
}

VL53LX_Error VL53LX_RdByte(VL53LX_DEV Dev, uint16_t index, uint8_t *data) {
 801108c:	b580      	push	{r7, lr}
 801108e:	b086      	sub	sp, #24
 8011090:	af00      	add	r7, sp, #0
 8011092:	60f8      	str	r0, [r7, #12]
 8011094:	460b      	mov	r3, r1
 8011096:	607a      	str	r2, [r7, #4]
 8011098:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 801109a:	2300      	movs	r3, #0
 801109c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 801109e:	897b      	ldrh	r3, [r7, #10]
 80110a0:	0a1b      	lsrs	r3, r3, #8
 80110a2:	b29b      	uxth	r3, r3
 80110a4:	b2da      	uxtb	r2, r3
 80110a6:	4b12      	ldr	r3, [pc, #72]	; (80110f0 <VL53LX_RdByte+0x64>)
 80110a8:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80110aa:	897b      	ldrh	r3, [r7, #10]
 80110ac:	b2da      	uxtb	r2, r3
 80110ae:	4b10      	ldr	r3, [pc, #64]	; (80110f0 <VL53LX_RdByte+0x64>)
 80110b0:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80110b2:	2202      	movs	r2, #2
 80110b4:	490e      	ldr	r1, [pc, #56]	; (80110f0 <VL53LX_RdByte+0x64>)
 80110b6:	68f8      	ldr	r0, [r7, #12]
 80110b8:	f7ff fefa 	bl	8010eb0 <_I2CWrite>
 80110bc:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d002      	beq.n	80110ca <VL53LX_RdByte+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80110c4:	23f3      	movs	r3, #243	; 0xf3
 80110c6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80110c8:	e00c      	b.n	80110e4 <VL53LX_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 80110ca:	2201      	movs	r2, #1
 80110cc:	6879      	ldr	r1, [r7, #4]
 80110ce:	68f8      	ldr	r0, [r7, #12]
 80110d0:	f7ff ff01 	bl	8010ed6 <_I2CRead>
 80110d4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d002      	beq.n	80110e2 <VL53LX_RdByte+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 80110dc:	23f3      	movs	r3, #243	; 0xf3
 80110de:	75fb      	strb	r3, [r7, #23]
 80110e0:	e000      	b.n	80110e4 <VL53LX_RdByte+0x58>
    }
done:
 80110e2:	bf00      	nop
    VL53LX_PutI2cBus();
    return Status;
 80110e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3718      	adds	r7, #24
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}
 80110f0:	200071ec 	.word	0x200071ec

080110f4 <VL53LX_RdWord>:

VL53LX_Error VL53LX_RdWord(VL53LX_DEV Dev, uint16_t index, uint16_t *data) {
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b086      	sub	sp, #24
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	60f8      	str	r0, [r7, #12]
 80110fc:	460b      	mov	r3, r1
 80110fe:	607a      	str	r2, [r7, #4]
 8011100:	817b      	strh	r3, [r7, #10]
    VL53LX_Error Status = VL53LX_ERROR_NONE;
 8011102:	2300      	movs	r3, #0
 8011104:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8011106:	897b      	ldrh	r3, [r7, #10]
 8011108:	0a1b      	lsrs	r3, r3, #8
 801110a:	b29b      	uxth	r3, r3
 801110c:	b2da      	uxtb	r2, r3
 801110e:	4b18      	ldr	r3, [pc, #96]	; (8011170 <VL53LX_RdWord+0x7c>)
 8011110:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8011112:	897b      	ldrh	r3, [r7, #10]
 8011114:	b2da      	uxtb	r2, r3
 8011116:	4b16      	ldr	r3, [pc, #88]	; (8011170 <VL53LX_RdWord+0x7c>)
 8011118:	705a      	strb	r2, [r3, #1]
    VL53LX_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 801111a:	2202      	movs	r2, #2
 801111c:	4914      	ldr	r1, [pc, #80]	; (8011170 <VL53LX_RdWord+0x7c>)
 801111e:	68f8      	ldr	r0, [r7, #12]
 8011120:	f7ff fec6 	bl	8010eb0 <_I2CWrite>
 8011124:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d002      	beq.n	8011132 <VL53LX_RdWord+0x3e>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 801112c:	23f3      	movs	r3, #243	; 0xf3
 801112e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011130:	e017      	b.n	8011162 <VL53LX_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8011132:	2202      	movs	r2, #2
 8011134:	490e      	ldr	r1, [pc, #56]	; (8011170 <VL53LX_RdWord+0x7c>)
 8011136:	68f8      	ldr	r0, [r7, #12]
 8011138:	f7ff fecd 	bl	8010ed6 <_I2CRead>
 801113c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801113e:	693b      	ldr	r3, [r7, #16]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d002      	beq.n	801114a <VL53LX_RdWord+0x56>
        Status = VL53LX_ERROR_CONTROL_INTERFACE;
 8011144:	23f3      	movs	r3, #243	; 0xf3
 8011146:	75fb      	strb	r3, [r7, #23]
        goto done;
 8011148:	e00b      	b.n	8011162 <VL53LX_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 801114a:	4b09      	ldr	r3, [pc, #36]	; (8011170 <VL53LX_RdWord+0x7c>)
 801114c:	781b      	ldrb	r3, [r3, #0]
 801114e:	b29b      	uxth	r3, r3
 8011150:	021b      	lsls	r3, r3, #8
 8011152:	b29a      	uxth	r2, r3
 8011154:	4b06      	ldr	r3, [pc, #24]	; (8011170 <VL53LX_RdWord+0x7c>)
 8011156:	785b      	ldrb	r3, [r3, #1]
 8011158:	b29b      	uxth	r3, r3
 801115a:	4413      	add	r3, r2
 801115c:	b29a      	uxth	r2, r3
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	801a      	strh	r2, [r3, #0]
done:
    VL53LX_PutI2cBus();
    return Status;
 8011162:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011166:	4618      	mov	r0, r3
 8011168:	3718      	adds	r7, #24
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}
 801116e:	bf00      	nop
 8011170:	200071ec 	.word	0x200071ec

08011174 <VL53LX_GetTickCount>:
    VL53LX_PutI2cBus();
    return Status;
}

VL53LX_Error VL53LX_GetTickCount(VL53LX_DEV Dev, uint32_t *ptick_count_ms)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b084      	sub	sp, #16
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53LX_Error status  = VL53LX_ERROR_NONE;
 801117e:	2300      	movs	r3, #0
 8011180:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	695b      	ldr	r3, [r3, #20]
 8011186:	4798      	blx	r3
 8011188:	4603      	mov	r3, r0
 801118a:	461a      	mov	r2, r3
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	601a      	str	r2, [r3, #0]
		VL53LX_TRACE_LEVEL_DEBUG,
		"VL53LX_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8011190:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011194:	4618      	mov	r0, r3
 8011196:	3710      	adds	r7, #16
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}

0801119c <VL53LX_WaitMs>:
	
	trace_print(VL53LX_TRACE_LEVEL_INFO, "VL53LX_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53LX_ERROR_NONE;
}

VL53LX_Error VL53LX_WaitMs(VL53LX_DEV Dev, int32_t wait_ms){
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
 80111a4:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_ms);
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	4619      	mov	r1, r3
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	f000 f8b8 	bl	8011320 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 80111b0:	2300      	movs	r3, #0
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3708      	adds	r7, #8
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}
	...

080111bc <VL53LX_WaitUs>:

VL53LX_Error VL53LX_WaitUs(VL53LX_DEV Dev, int32_t wait_us){
 80111bc:	b580      	push	{r7, lr}
 80111be:	b082      	sub	sp, #8
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	6039      	str	r1, [r7, #0]
	VL53LX_Delay(Dev, wait_us/1000);
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	4a07      	ldr	r2, [pc, #28]	; (80111e8 <VL53LX_WaitUs+0x2c>)
 80111ca:	fb82 1203 	smull	r1, r2, r2, r3
 80111ce:	1192      	asrs	r2, r2, #6
 80111d0:	17db      	asrs	r3, r3, #31
 80111d2:	1ad3      	subs	r3, r2, r3
 80111d4:	4619      	mov	r1, r3
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f000 f8a2 	bl	8011320 <VL53LX_Delay>
    return VL53LX_ERROR_NONE;
 80111dc:	2300      	movs	r3, #0
}
 80111de:	4618      	mov	r0, r3
 80111e0:	3708      	adds	r7, #8
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bd80      	pop	{r7, pc}
 80111e6:	bf00      	nop
 80111e8:	10624dd3 	.word	0x10624dd3

080111ec <VL53LX_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 80111ec:	b590      	push	{r4, r7, lr}
 80111ee:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80111f2:	af00      	add	r7, sp, #0
 80111f4:	f107 040c 	add.w	r4, r7, #12
 80111f8:	6020      	str	r0, [r4, #0]
 80111fa:	f107 0008 	add.w	r0, r7, #8
 80111fe:	6001      	str	r1, [r0, #0]
 8011200:	4619      	mov	r1, r3
 8011202:	1dbb      	adds	r3, r7, #6
 8011204:	801a      	strh	r2, [r3, #0]
 8011206:	1d7b      	adds	r3, r7, #5
 8011208:	460a      	mov	r2, r1
 801120a:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53LX_Error status         = VL53LX_ERROR_NONE;
 801120c:	2300      	movs	r3, #0
 801120e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8011212:	2300      	movs	r3, #0
 8011214:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8011218:	2300      	movs	r3, #0
 801121a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 801121e:	2300      	movs	r3, #0
 8011220:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8011224:	2300      	movs	r3, #0
 8011226:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 801122a:	2300      	movs	r3, #0
 801122c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53LX_get_register_name(
			index,
			register_name);
#else
	VL53LX_COPYSTRING(register_name, "");
 8011230:	f107 0310 	add.w	r3, r7, #16
 8011234:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011238:	4938      	ldr	r1, [pc, #224]	; (801131c <VL53LX_WaitValueMaskEx+0x130>)
 801123a:	4618      	mov	r0, r3
 801123c:	f003 f95a 	bl	80144f4 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53LX_GetTickCount(Dev, &start_time_ms);
 8011240:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8011244:	f107 030c 	add.w	r3, r7, #12
 8011248:	4611      	mov	r1, r2
 801124a:	6818      	ldr	r0, [r3, #0]
 801124c:	f7ff ff92 	bl	8011174 <VL53LX_GetTickCount>
	VL53LX_set_trace_functions(VL53LX_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53LX_ERROR_NONE) &&
 8011250:	e042      	b.n	80112d8 <VL53LX_WaitValueMaskEx+0xec>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53LX_ERROR_NONE)
 8011252:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011256:	2b00      	cmp	r3, #0
 8011258:	d10b      	bne.n	8011272 <VL53LX_WaitValueMaskEx+0x86>
			status = VL53LX_RdByte(
 801125a:	f207 2213 	addw	r2, r7, #531	; 0x213
 801125e:	1dbb      	adds	r3, r7, #6
 8011260:	8819      	ldrh	r1, [r3, #0]
 8011262:	f107 030c 	add.w	r3, r7, #12
 8011266:	6818      	ldr	r0, [r3, #0]
 8011268:	f7ff ff10 	bl	801108c <VL53LX_RdByte>
 801126c:	4603      	mov	r3, r0
 801126e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8011272:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8011276:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 801127a:	4013      	ands	r3, r2
 801127c:	b2db      	uxtb	r3, r3
 801127e:	1d7a      	adds	r2, r7, #5
 8011280:	7812      	ldrb	r2, [r2, #0]
 8011282:	429a      	cmp	r2, r3
 8011284:	d102      	bne.n	801128c <VL53LX_WaitValueMaskEx+0xa0>
			found = 1;
 8011286:	2301      	movs	r3, #1
 8011288:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53LX_ERROR_NONE  &&
 801128c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011290:	2b00      	cmp	r3, #0
 8011292:	d112      	bne.n	80112ba <VL53LX_WaitValueMaskEx+0xce>
 8011294:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8011298:	2b00      	cmp	r3, #0
 801129a:	d10e      	bne.n	80112ba <VL53LX_WaitValueMaskEx+0xce>
			found == 0 &&
 801129c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d00a      	beq.n	80112ba <VL53LX_WaitValueMaskEx+0xce>
			poll_delay_ms > 0)
			status = VL53LX_WaitMs(
 80112a4:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80112a8:	f107 030c 	add.w	r3, r7, #12
 80112ac:	4611      	mov	r1, r2
 80112ae:	6818      	ldr	r0, [r3, #0]
 80112b0:	f7ff ff74 	bl	801119c <VL53LX_WaitMs>
 80112b4:	4603      	mov	r3, r0
 80112b6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53LX_GetTickCount(Dev, &current_time_ms);
 80112ba:	f507 7205 	add.w	r2, r7, #532	; 0x214
 80112be:	f107 030c 	add.w	r3, r7, #12
 80112c2:	4611      	mov	r1, r2
 80112c4:	6818      	ldr	r0, [r3, #0]
 80112c6:	f7ff ff55 	bl	8011174 <VL53LX_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 80112ca:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80112ce:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80112d2:	1ad3      	subs	r3, r2, r3
 80112d4:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53LX_ERROR_NONE) &&
 80112d8:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d10a      	bne.n	80112f6 <VL53LX_WaitValueMaskEx+0x10a>
 80112e0:	f107 0308 	add.w	r3, r7, #8
 80112e4:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	429a      	cmp	r2, r3
 80112ec:	d203      	bcs.n	80112f6 <VL53LX_WaitValueMaskEx+0x10a>
		   (polling_time_ms < timeout_ms) &&
 80112ee:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d0ad      	beq.n	8011252 <VL53LX_WaitValueMaskEx+0x66>
#ifdef VL53LX_LOG_ENABLE
	/* Restore function logging */
	VL53LX_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53LX_ERROR_NONE)
 80112f6:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d106      	bne.n	801130c <VL53LX_WaitValueMaskEx+0x120>
 80112fe:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8011302:	2b00      	cmp	r3, #0
 8011304:	d102      	bne.n	801130c <VL53LX_WaitValueMaskEx+0x120>
		status = VL53LX_ERROR_TIME_OUT;
 8011306:	23f9      	movs	r3, #249	; 0xf9
 8011308:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 801130c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8011310:	4618      	mov	r0, r3
 8011312:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8011316:	46bd      	mov	sp, r7
 8011318:	bd90      	pop	{r4, r7, pc}
 801131a:	bf00      	nop
 801131c:	08015574 	.word	0x08015574

08011320 <VL53LX_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53LX_Error
  */
static VL53LX_Error VL53LX_Delay(VL53LX_DEV Dev, uint32_t Delay)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b084      	sub	sp, #16
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
 8011328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	695b      	ldr	r3, [r3, #20]
 801132e:	4798      	blx	r3
 8011330:	4603      	mov	r3, r0
 8011332:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8011334:	bf00      	nop
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	695b      	ldr	r3, [r3, #20]
 801133a:	4798      	blx	r3
 801133c:	4603      	mov	r3, r0
 801133e:	461a      	mov	r2, r3
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	1ad3      	subs	r3, r2, r3
 8011344:	683a      	ldr	r2, [r7, #0]
 8011346:	429a      	cmp	r2, r3
 8011348:	d8f5      	bhi.n	8011336 <VL53LX_Delay+0x16>
  {
  }

  return VL53LX_ERROR_NONE;
 801134a:	2300      	movs	r3, #0
}
 801134c:	4618      	mov	r0, r3
 801134e:	3710      	adds	r7, #16
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}

08011354 <VL53LX_ipp_hist_process_data>:
	VL53LX_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53LX_range_results_t            *presults)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b08c      	sub	sp, #48	; 0x30
 8011358:	af06      	add	r7, sp, #24
 801135a:	60f8      	str	r0, [r7, #12]
 801135c:	60b9      	str	r1, [r7, #8]
 801135e:	607a      	str	r2, [r7, #4]
 8011360:	603b      	str	r3, [r7, #0]



	VL53LX_Error status         = VL53LX_ERROR_NONE;
 8011362:	2300      	movs	r3, #0
 8011364:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53LX_hist_process_data(
 8011366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011368:	9304      	str	r3, [sp, #16]
 801136a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801136c:	9303      	str	r3, [sp, #12]
 801136e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011370:	9302      	str	r3, [sp, #8]
 8011372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011374:	9301      	str	r3, [sp, #4]
 8011376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011378:	9300      	str	r3, [sp, #0]
 801137a:	6a3b      	ldr	r3, [r7, #32]
 801137c:	683a      	ldr	r2, [r7, #0]
 801137e:	6879      	ldr	r1, [r7, #4]
 8011380:	68b8      	ldr	r0, [r7, #8]
 8011382:	f7fd f98c 	bl	800e69e <VL53LX_hist_process_data>
 8011386:	4603      	mov	r3, r0
 8011388:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 801138a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801138e:	4618      	mov	r0, r3
 8011390:	3718      	adds	r7, #24
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}

08011396 <VL53L3CX_RegisterBusIO>:
  * @param pObj    vl53l3cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_RegisterBusIO(VL53L3CX_Object_t *pObj, VL53L3CX_IO_t *pIO)
{
 8011396:	b580      	push	{r7, lr}
 8011398:	b084      	sub	sp, #16
 801139a:	af00      	add	r7, sp, #0
 801139c:	6078      	str	r0, [r7, #4]
 801139e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d103      	bne.n	80113ae <VL53L3CX_RegisterBusIO+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80113a6:	f06f 0301 	mvn.w	r3, #1
 80113aa:	60fb      	str	r3, [r7, #12]
 80113ac:	e023      	b.n	80113f6 <VL53L3CX_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	681a      	ldr	r2, [r3, #0]
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80113b6:	683b      	ldr	r3, [r7, #0]
 80113b8:	685a      	ldr	r2, [r3, #4]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80113be:	683b      	ldr	r3, [r7, #0]
 80113c0:	891a      	ldrh	r2, [r3, #8]
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	68da      	ldr	r2, [r3, #12]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	691a      	ldr	r2, [r3, #16]
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	695a      	ldr	r2, [r3, #20]
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d004      	beq.n	80113f0 <VL53L3CX_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	4798      	blx	r3
 80113ec:	60f8      	str	r0, [r7, #12]
 80113ee:	e002      	b.n	80113f6 <VL53L3CX_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L3CX_ERROR;
 80113f0:	f04f 33ff 	mov.w	r3, #4294967295
 80113f4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80113f6:	68fb      	ldr	r3, [r7, #12]
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3710      	adds	r7, #16
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <VL53L3CX_Init>:
  * @brief Initializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Init(VL53L3CX_Object_t *pObj)
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b084      	sub	sp, #16
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801140e:	3328      	adds	r3, #40	; 0x28
 8011410:	781b      	ldrb	r3, [r3, #0]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d003      	beq.n	801141e <VL53L3CX_Init+0x1e>
  {
    ret =  VL53L3CX_ERROR;
 8011416:	f04f 33ff 	mov.w	r3, #4294967295
 801141a:	60fb      	str	r3, [r7, #12]
 801141c:	e043      	b.n	80114a6 <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_WaitDeviceBooted(pObj) != VL53LX_ERROR_NONE)
 801141e:	6878      	ldr	r0, [r7, #4]
 8011420:	f7f0 fcb8 	bl	8001d94 <VL53LX_WaitDeviceBooted>
 8011424:	4603      	mov	r3, r0
 8011426:	2b00      	cmp	r3, #0
 8011428:	d003      	beq.n	8011432 <VL53L3CX_Init+0x32>
  {
    ret =  VL53L3CX_ERROR;
 801142a:	f04f 33ff 	mov.w	r3, #4294967295
 801142e:	60fb      	str	r3, [r7, #12]
 8011430:	e039      	b.n	80114a6 <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_DataInit(pObj) != VL53LX_ERROR_NONE)
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f7f0 fc53 	bl	8001cde <VL53LX_DataInit>
 8011438:	4603      	mov	r3, r0
 801143a:	2b00      	cmp	r3, #0
 801143c:	d003      	beq.n	8011446 <VL53L3CX_Init+0x46>
  {
    ret = VL53L3CX_ERROR;
 801143e:	f04f 33ff 	mov.w	r3, #4294967295
 8011442:	60fb      	str	r3, [r7, #12]
 8011444:	e02f      	b.n	80114a6 <VL53L3CX_Init+0xa6>
  }
  else if (VL53LX_PerformRefSpadManagement(pObj) != VL53LX_ERROR_NONE)
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f7f1 fb46 	bl	8002ad8 <VL53LX_PerformRefSpadManagement>
 801144c:	4603      	mov	r3, r0
 801144e:	2b00      	cmp	r3, #0
 8011450:	d003      	beq.n	801145a <VL53L3CX_Init+0x5a>
  {
    ret = VL53L3CX_ERROR;
 8011452:	f04f 33ff 	mov.w	r3, #4294967295
 8011456:	60fb      	str	r3, [r7, #12]
 8011458:	e025      	b.n	80114a6 <VL53L3CX_Init+0xa6>
  }
  else
  {
    pObj->IsRanging = 0;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011460:	3329      	adds	r3, #41	; 0x29
 8011462:	2200      	movs	r2, #0
 8011464:	701a      	strb	r2, [r3, #0]
    pObj->IsBlocking = 0;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801146c:	332a      	adds	r3, #42	; 0x2a
 801146e:	2200      	movs	r2, #0
 8011470:	701a      	strb	r2, [r3, #0]
    pObj->IsContinuous = 0;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011478:	332b      	adds	r3, #43	; 0x2b
 801147a:	2200      	movs	r2, #0
 801147c:	701a      	strb	r2, [r3, #0]
    pObj->IsAmbientEnabled = 0;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011484:	332c      	adds	r3, #44	; 0x2c
 8011486:	2200      	movs	r2, #0
 8011488:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = 0;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011490:	332d      	adds	r3, #45	; 0x2d
 8011492:	2200      	movs	r2, #0
 8011494:	701a      	strb	r2, [r3, #0]
    pObj->IsInitialized = 1;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801149c:	3328      	adds	r3, #40	; 0x28
 801149e:	2201      	movs	r2, #1
 80114a0:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 80114a2:	2300      	movs	r3, #0
 80114a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80114a6:	68fb      	ldr	r3, [r7, #12]
}
 80114a8:	4618      	mov	r0, r3
 80114aa:	3710      	adds	r7, #16
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}

080114b0 <VL53L3CX_DeInit>:
  * @brief Deinitializes the vl53l3cx.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_DeInit(VL53L3CX_Object_t *pObj)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b084      	sub	sp, #16
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L3CX_ERROR;
 80114b8:	f04f 33ff 	mov.w	r3, #4294967295
 80114bc:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80114c4:	3328      	adds	r3, #40	; 0x28
 80114c6:	781b      	ldrb	r3, [r3, #0]
 80114c8:	2b01      	cmp	r3, #1
 80114ca:	d111      	bne.n	80114f0 <VL53L3CX_DeInit+0x40>
  {
    /* De-initialize the vl53l3cx interface */
    if (pObj->IO.DeInit() != 0)
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	685b      	ldr	r3, [r3, #4]
 80114d0:	4798      	blx	r3
 80114d2:	4603      	mov	r3, r0
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d003      	beq.n	80114e0 <VL53L3CX_DeInit+0x30>
    {
      ret = VL53L3CX_ERROR;
 80114d8:	f04f 33ff 	mov.w	r3, #4294967295
 80114dc:	60fb      	str	r3, [r7, #12]
 80114de:	e007      	b.n	80114f0 <VL53L3CX_DeInit+0x40>
    }
    else
    {
      ret = VL53L3CX_OK;
 80114e0:	2300      	movs	r3, #0
 80114e2:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80114ea:	3328      	adds	r3, #40	; 0x28
 80114ec:	2200      	movs	r2, #0
 80114ee:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80114f0:	68fb      	ldr	r3, [r7, #12]
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3710      	adds	r7, #16
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}

080114fa <VL53L3CX_ReadID>:
  * @param pObj    vl53l3cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ReadID(VL53L3CX_Object_t *pObj, uint32_t *pId)
{
 80114fa:	b580      	push	{r7, lr}
 80114fc:	b084      	sub	sp, #16
 80114fe:	af00      	add	r7, sp, #0
 8011500:	6078      	str	r0, [r7, #4]
 8011502:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d002      	beq.n	8011510 <VL53L3CX_ReadID+0x16>
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d103      	bne.n	8011518 <VL53L3CX_ReadID+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011510:	f06f 0301 	mvn.w	r3, #1
 8011514:	60fb      	str	r3, [r7, #12]
 8011516:	e00a      	b.n	801152e <VL53L3CX_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	2200      	movs	r2, #0
 801151c:	601a      	str	r2, [r3, #0]
    ret = VL53LX_RdWord(pObj, VL53L3CX_ID_REG, (uint16_t *) pId);
 801151e:	683a      	ldr	r2, [r7, #0]
 8011520:	f240 110f 	movw	r1, #271	; 0x10f
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f7ff fde5 	bl	80110f4 <VL53LX_RdWord>
 801152a:	4603      	mov	r3, r0
 801152c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801152e:	68fb      	ldr	r3, [r7, #12]
}
 8011530:	4618      	mov	r0, r3
 8011532:	3710      	adds	r7, #16
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}

08011538 <VL53L3CX_GetCapabilities>:
  * @param pObj    vl53l3cx context object.
  * @param pCap    Pointer to the vl53l3cx capabilities.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetCapabilities(VL53L3CX_Object_t *pObj, VL53L3CX_Capabilities_t *pCap)
{
 8011538:	b480      	push	{r7}
 801153a:	b085      	sub	sp, #20
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
 8011540:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d002      	beq.n	801154e <VL53L3CX_GetCapabilities+0x16>
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d103      	bne.n	8011556 <VL53L3CX_GetCapabilities+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 801154e:	f06f 0301 	mvn.w	r3, #1
 8011552:	60fb      	str	r3, [r7, #12]
 8011554:	e00d      	b.n	8011572 <VL53L3CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	2201      	movs	r2, #1
 801155a:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L3CX_NB_TARGET_PER_ZONE;
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	2204      	movs	r2, #4
 8011560:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	2201      	movs	r2, #1
 8011566:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	2200      	movs	r2, #0
 801156c:	60da      	str	r2, [r3, #12]

    ret = VL53L3CX_OK;
 801156e:	2300      	movs	r3, #0
 8011570:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011572:	68fb      	ldr	r3, [r7, #12]
}
 8011574:	4618      	mov	r0, r3
 8011576:	3714      	adds	r7, #20
 8011578:	46bd      	mov	sp, r7
 801157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157e:	4770      	bx	lr

08011580 <VL53L3CX_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L3CX the profile corresponds to the distance modes.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigProfile(VL53L3CX_Object_t *pObj, VL53L3CX_ProfileConfig_t *pConfig)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b084      	sub	sp, #16
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d009      	beq.n	80115a4 <VL53L3CX_ConfigProfile+0x24>
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d006      	beq.n	80115a4 <VL53L3CX_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	781b      	ldrb	r3, [r3, #0]
 801159a:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L3CX_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 801159c:	7afb      	ldrb	r3, [r7, #11]
 801159e:	2b01      	cmp	r3, #1
 80115a0:	d103      	bne.n	80115aa <VL53L3CX_ConfigProfile+0x2a>
 80115a2:	e00c      	b.n	80115be <VL53L3CX_ConfigProfile+0x3e>
    return VL53L3CX_INVALID_PARAM;
 80115a4:	f06f 0301 	mvn.w	r3, #1
 80115a8:	e043      	b.n	8011632 <VL53L3CX_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L3CX_PROFILE_SHORT) &&
 80115aa:	7afb      	ldrb	r3, [r7, #11]
 80115ac:	2b02      	cmp	r3, #2
 80115ae:	d006      	beq.n	80115be <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_MEDIUM) &&
 80115b0:	7afb      	ldrb	r3, [r7, #11]
 80115b2:	2b03      	cmp	r3, #3
 80115b4:	d003      	beq.n	80115be <VL53L3CX_ConfigProfile+0x3e>
      (ranging_profile != VL53L3CX_PROFILE_LONG))
  {
    ret = VL53L3CX_INVALID_PARAM;
 80115b6:	f06f 0301 	mvn.w	r3, #1
 80115ba:	60fb      	str	r3, [r7, #12]
 80115bc:	e038      	b.n	8011630 <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetDistanceMode(pObj, ranging_profile) != VL53LX_ERROR_NONE)
 80115be:	7afb      	ldrb	r3, [r7, #11]
 80115c0:	4619      	mov	r1, r3
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f7f0 fcc9 	bl	8001f5a <VL53LX_SetDistanceMode>
 80115c8:	4603      	mov	r3, r0
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d003      	beq.n	80115d6 <VL53L3CX_ConfigProfile+0x56>
  {
    ret = VL53L3CX_ERROR;
 80115ce:	f04f 33ff 	mov.w	r3, #4294967295
 80115d2:	60fb      	str	r3, [r7, #12]
 80115d4:	e02c      	b.n	8011630 <VL53L3CX_ConfigProfile+0xb0>
  }
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53LX_ERROR_NONE)
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	685b      	ldr	r3, [r3, #4]
  else if (VL53LX_SetMeasurementTimingBudgetMicroSeconds(
 80115da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80115de:	fb02 f303 	mul.w	r3, r2, r3
 80115e2:	4619      	mov	r1, r3
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f7f0 fd1f 	bl	8002028 <VL53LX_SetMeasurementTimingBudgetMicroSeconds>
 80115ea:	4603      	mov	r3, r0
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d003      	beq.n	80115f8 <VL53L3CX_ConfigProfile+0x78>
  {
    ret = VL53L3CX_ERROR;
 80115f0:	f04f 33ff 	mov.w	r3, #4294967295
 80115f4:	60fb      	str	r3, [r7, #12]
 80115f6:	e01b      	b.n	8011630 <VL53L3CX_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	68db      	ldr	r3, [r3, #12]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	bf14      	ite	ne
 8011600:	2301      	movne	r3, #1
 8011602:	2300      	moveq	r3, #0
 8011604:	b2db      	uxtb	r3, r3
 8011606:	461a      	mov	r2, r3
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801160e:	332c      	adds	r3, #44	; 0x2c
 8011610:	701a      	strb	r2, [r3, #0]
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	691b      	ldr	r3, [r3, #16]
 8011616:	2b00      	cmp	r3, #0
 8011618:	bf14      	ite	ne
 801161a:	2301      	movne	r3, #1
 801161c:	2300      	moveq	r3, #0
 801161e:	b2db      	uxtb	r3, r3
 8011620:	461a      	mov	r2, r3
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011628:	332d      	adds	r3, #45	; 0x2d
 801162a:	701a      	strb	r2, [r3, #0]

    ret = VL53L3CX_OK;
 801162c:	2300      	movs	r3, #0
 801162e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011630:	68fb      	ldr	r3, [r7, #12]
}
 8011632:	4618      	mov	r0, r3
 8011634:	3710      	adds	r7, #16
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}

0801163a <VL53L3CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigROI(VL53L3CX_Object_t *pObj, VL53L3CX_ROIConfig_t *pROIConfig)
{
 801163a:	b580      	push	{r7, lr}
 801163c:	b084      	sub	sp, #16
 801163e:	af00      	add	r7, sp, #0
 8011640:	6078      	str	r0, [r7, #4]
 8011642:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53LX_UserRoi_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d002      	beq.n	8011650 <VL53L3CX_ConfigROI+0x16>
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d103      	bne.n	8011658 <VL53L3CX_ConfigROI+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011650:	f06f 0301 	mvn.w	r3, #1
 8011654:	60fb      	str	r3, [r7, #12]
 8011656:	e01a      	b.n	801168e <VL53L3CX_ConfigROI+0x54>
  }
  else
  {
    roi_settings.BotRightX = pROIConfig->BotRightX;
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	789b      	ldrb	r3, [r3, #2]
 801165c:	72bb      	strb	r3, [r7, #10]
    roi_settings.BotRightY = pROIConfig->BotRightY;
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	78db      	ldrb	r3, [r3, #3]
 8011662:	72fb      	strb	r3, [r7, #11]
    roi_settings.TopLeftX = pROIConfig->TopLeftX;
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	781b      	ldrb	r3, [r3, #0]
 8011668:	723b      	strb	r3, [r7, #8]
    roi_settings.TopLeftY = pROIConfig->TopLeftY;
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	785b      	ldrb	r3, [r3, #1]
 801166e:	727b      	strb	r3, [r7, #9]

    if (VL53LX_SetUserROI(pObj, &roi_settings) != VL53LX_ERROR_NONE)
 8011670:	f107 0308 	add.w	r3, r7, #8
 8011674:	4619      	mov	r1, r3
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f7f0 fd4e 	bl	8002118 <VL53LX_SetUserROI>
 801167c:	4603      	mov	r3, r0
 801167e:	2b00      	cmp	r3, #0
 8011680:	d003      	beq.n	801168a <VL53L3CX_ConfigROI+0x50>
    {
      ret = VL53L3CX_ERROR;
 8011682:	f04f 33ff 	mov.w	r3, #4294967295
 8011686:	60fb      	str	r3, [r7, #12]
 8011688:	e001      	b.n	801168e <VL53L3CX_ConfigROI+0x54>
    }
    else
    {
      ret = VL53L3CX_OK;
 801168a:	2300      	movs	r3, #0
 801168c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 801168e:	68fb      	ldr	r3, [r7, #12]
}
 8011690:	4618      	mov	r0, r3
 8011692:	3710      	adds	r7, #16
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}

08011698 <VL53L3CX_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_ConfigIT(VL53L3CX_Object_t *pObj, VL53L3CX_ITConfig_t *pITConfig)
{
 8011698:	b480      	push	{r7}
 801169a:	b083      	sub	sp, #12
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
 80116a0:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L3CX_NOT_IMPLEMENTED;
 80116a2:	f06f 0303 	mvn.w	r3, #3
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	370c      	adds	r7, #12
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr

080116b2 <VL53L3CX_GetDistance>:
  * @param pObj    vl53l3cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetDistance(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 80116b2:	b580      	push	{r7, lr}
 80116b4:	b084      	sub	sp, #16
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6078      	str	r0, [r7, #4]
 80116ba:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d002      	beq.n	80116c8 <VL53L3CX_GetDistance+0x16>
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d103      	bne.n	80116d0 <VL53L3CX_GetDistance+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80116c8:	f06f 0301 	mvn.w	r3, #1
 80116cc:	60fb      	str	r3, [r7, #12]
 80116ce:	e01d      	b.n	801170c <VL53L3CX_GetDistance+0x5a>
  }
  else if (pObj->IsRanging == 0U)
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80116d6:	3329      	adds	r3, #41	; 0x29
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d103      	bne.n	80116e6 <VL53L3CX_GetDistance+0x34>
  {
    ret = VL53L3CX_ERROR;
 80116de:	f04f 33ff 	mov.w	r3, #4294967295
 80116e2:	60fb      	str	r3, [r7, #12]
 80116e4:	e012      	b.n	801170c <VL53L3CX_GetDistance+0x5a>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80116ec:	332a      	adds	r3, #42	; 0x2a
 80116ee:	781b      	ldrb	r3, [r3, #0]
 80116f0:	2b01      	cmp	r3, #1
 80116f2:	d106      	bne.n	8011702 <VL53L3CX_GetDistance+0x50>
    {
      ret = vl53l3cx_poll_for_measurement(pObj, V53L3CX_POLL_TIMEOUT);
 80116f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f000 f92b 	bl	8011954 <vl53l3cx_poll_for_measurement>
 80116fe:	60f8      	str	r0, [r7, #12]
 8011700:	e004      	b.n	801170c <VL53L3CX_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l3cx_poll_for_measurement(pObj, 0U);
 8011702:	2100      	movs	r1, #0
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f000 f925 	bl	8011954 <vl53l3cx_poll_for_measurement>
 801170a:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L3CX_OK)
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d119      	bne.n	8011746 <VL53L3CX_GetDistance+0x94>
  {
    /* retrieve measurements and fill result structure */
    if (vl53l3cx_get_result(pObj, pResult) != VL53L3CX_OK)
 8011712:	6839      	ldr	r1, [r7, #0]
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f000 f94b 	bl	80119b0 <vl53l3cx_get_result>
 801171a:	4603      	mov	r3, r0
 801171c:	2b00      	cmp	r3, #0
 801171e:	d003      	beq.n	8011728 <VL53L3CX_GetDistance+0x76>
    {
      ret = VL53L3CX_ERROR;
 8011720:	f04f 33ff 	mov.w	r3, #4294967295
 8011724:	60fb      	str	r3, [r7, #12]
 8011726:	e00e      	b.n	8011746 <VL53L3CX_GetDistance+0x94>
    }
    else if (pObj->IsContinuous == 1U)
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801172e:	332b      	adds	r3, #43	; 0x2b
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	2b01      	cmp	r3, #1
 8011734:	d105      	bne.n	8011742 <VL53L3CX_GetDistance+0x90>
    {
      /* trigger new measurement if device configured in continuous mode */
      ret = (int32_t)VL53LX_ClearInterruptAndStartMeasurement(pObj);
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f7f0 fdbe 	bl	80022b8 <VL53LX_ClearInterruptAndStartMeasurement>
 801173c:	4603      	mov	r3, r0
 801173e:	60fb      	str	r3, [r7, #12]
 8011740:	e001      	b.n	8011746 <VL53L3CX_GetDistance+0x94>
    }
    else
    {
      ret = VL53L3CX_OK;
 8011742:	2300      	movs	r3, #0
 8011744:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011746:	68fb      	ldr	r3, [r7, #12]
}
 8011748:	4618      	mov	r0, r3
 801174a:	3710      	adds	r7, #16
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}

08011750 <VL53L3CX_Start>:
  * @param pObj    vl53l3cx context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Start(VL53L3CX_Object_t *pObj, uint32_t Mode)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b084      	sub	sp, #16
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d103      	bne.n	8011768 <VL53L3CX_Start+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011760:	f06f 0301 	mvn.w	r3, #1
 8011764:	60fb      	str	r3, [r7, #12]
 8011766:	e068      	b.n	801183a <VL53L3CX_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801176e:	3329      	adds	r3, #41	; 0x29
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	2b01      	cmp	r3, #1
 8011774:	d103      	bne.n	801177e <VL53L3CX_Start+0x2e>
  {
    ret = VL53L3CX_ERROR;
 8011776:	f04f 33ff 	mov.w	r3, #4294967295
 801177a:	60fb      	str	r3, [r7, #12]
 801177c:	e05d      	b.n	801183a <VL53L3CX_Start+0xea>
  }
  else if (VL53LX_StartMeasurement(pObj) == VL53LX_ERROR_NONE)
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	f7f0 fd38 	bl	80021f4 <VL53LX_StartMeasurement>
 8011784:	4603      	mov	r3, r0
 8011786:	2b00      	cmp	r3, #0
 8011788:	d154      	bne.n	8011834 <VL53L3CX_Start+0xe4>
  {
    pObj->IsRanging = 1;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011790:	3329      	adds	r3, #41	; 0x29
 8011792:	2201      	movs	r2, #1
 8011794:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8011796:	2300      	movs	r3, #0
 8011798:	60fb      	str	r3, [r7, #12]
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	3b01      	subs	r3, #1
 801179e:	2b03      	cmp	r3, #3
 80117a0:	d83e      	bhi.n	8011820 <VL53L3CX_Start+0xd0>
 80117a2:	a201      	add	r2, pc, #4	; (adr r2, 80117a8 <VL53L3CX_Start+0x58>)
 80117a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117a8:	080117b9 	.word	0x080117b9
 80117ac:	080117d3 	.word	0x080117d3
 80117b0:	080117ed 	.word	0x080117ed
 80117b4:	08011807 	.word	0x08011807

    switch (Mode)
    {
    case VL53L3CX_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117be:	332b      	adds	r3, #43	; 0x2b
 80117c0:	2201      	movs	r2, #1
 80117c2:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117ca:	332a      	adds	r3, #42	; 0x2a
 80117cc:	2201      	movs	r2, #1
 80117ce:	701a      	strb	r2, [r3, #0]
      break;
 80117d0:	e033      	b.n	801183a <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117d8:	332b      	adds	r3, #43	; 0x2b
 80117da:	2200      	movs	r2, #0
 80117dc:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 1U;
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117e4:	332a      	adds	r3, #42	; 0x2a
 80117e6:	2201      	movs	r2, #1
 80117e8:	701a      	strb	r2, [r3, #0]
      break;
 80117ea:	e026      	b.n	801183a <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117f2:	332b      	adds	r3, #43	; 0x2b
 80117f4:	2201      	movs	r2, #1
 80117f6:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 80117fe:	332a      	adds	r3, #42	; 0x2a
 8011800:	2200      	movs	r2, #0
 8011802:	701a      	strb	r2, [r3, #0]
      break;
 8011804:	e019      	b.n	801183a <VL53L3CX_Start+0xea>

    case VL53L3CX_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 801180c:	332b      	adds	r3, #43	; 0x2b
 801180e:	2200      	movs	r2, #0
 8011810:	701a      	strb	r2, [r3, #0]
      pObj->IsBlocking = 0U;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011818:	332a      	adds	r3, #42	; 0x2a
 801181a:	2200      	movs	r2, #0
 801181c:	701a      	strb	r2, [r3, #0]
      break;
 801181e:	e00c      	b.n	801183a <VL53L3CX_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011826:	3329      	adds	r3, #41	; 0x29
 8011828:	2200      	movs	r2, #0
 801182a:	701a      	strb	r2, [r3, #0]
      ret = VL53L3CX_INVALID_PARAM;
 801182c:	f06f 0301 	mvn.w	r3, #1
 8011830:	60fb      	str	r3, [r7, #12]
      break;
 8011832:	e002      	b.n	801183a <VL53L3CX_Start+0xea>
    }
  }
  else
  {
    ret = VL53L3CX_ERROR;
 8011834:	f04f 33ff 	mov.w	r3, #4294967295
 8011838:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801183a:	68fb      	ldr	r3, [r7, #12]
}
 801183c:	4618      	mov	r0, r3
 801183e:	3710      	adds	r7, #16
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}

08011844 <VL53L3CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l3cx context object.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_Stop(VL53L3CX_Object_t *pObj)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b084      	sub	sp, #16
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d103      	bne.n	801185a <VL53L3CX_Stop+0x16>
  {
    ret = VL53L3CX_INVALID_PARAM;
 8011852:	f06f 0301 	mvn.w	r3, #1
 8011856:	60fb      	str	r3, [r7, #12]
 8011858:	e01c      	b.n	8011894 <VL53L3CX_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011860:	3329      	adds	r3, #41	; 0x29
 8011862:	781b      	ldrb	r3, [r3, #0]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d103      	bne.n	8011870 <VL53L3CX_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L3CX_ERROR;
 8011868:	f04f 33ff 	mov.w	r3, #4294967295
 801186c:	60fb      	str	r3, [r7, #12]
 801186e:	e011      	b.n	8011894 <VL53L3CX_Stop+0x50>
  }
  else if (VL53LX_StopMeasurement(pObj) == VL53LX_ERROR_NONE)
 8011870:	6878      	ldr	r0, [r7, #4]
 8011872:	f7f0 fd0d 	bl	8002290 <VL53LX_StopMeasurement>
 8011876:	4603      	mov	r3, r0
 8011878:	2b00      	cmp	r3, #0
 801187a:	d108      	bne.n	801188e <VL53L3CX_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011882:	3329      	adds	r3, #41	; 0x29
 8011884:	2200      	movs	r2, #0
 8011886:	701a      	strb	r2, [r3, #0]
    ret = VL53L3CX_OK;
 8011888:	2300      	movs	r3, #0
 801188a:	60fb      	str	r3, [r7, #12]
 801188c:	e002      	b.n	8011894 <VL53L3CX_Stop+0x50>
  }
  else
  {
    ret = VL53L3CX_ERROR;
 801188e:	f04f 33ff 	mov.w	r3, #4294967295
 8011892:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011894:	68fb      	ldr	r3, [r7, #12]
}
 8011896:	4618      	mov	r0, r3
 8011898:	3710      	adds	r7, #16
 801189a:	46bd      	mov	sp, r7
 801189c:	bd80      	pop	{r7, pc}

0801189e <VL53L3CX_SetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param Address     New I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetAddress(VL53L3CX_Object_t *pObj, uint32_t Address)
{
 801189e:	b580      	push	{r7, lr}
 80118a0:	b084      	sub	sp, #16
 80118a2:	af00      	add	r7, sp, #0
 80118a4:	6078      	str	r0, [r7, #4]
 80118a6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d103      	bne.n	80118b6 <VL53L3CX_SetAddress+0x18>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80118ae:	f06f 0301 	mvn.w	r3, #1
 80118b2:	60fb      	str	r3, [r7, #12]
 80118b4:	e012      	b.n	80118dc <VL53L3CX_SetAddress+0x3e>
  }
  else if (VL53LX_SetDeviceAddress(pObj, (uint8_t)Address) != VL53LX_ERROR_NONE)
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	b2db      	uxtb	r3, r3
 80118ba:	4619      	mov	r1, r3
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f7f0 f9e7 	bl	8001c90 <VL53LX_SetDeviceAddress>
 80118c2:	4603      	mov	r3, r0
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d003      	beq.n	80118d0 <VL53L3CX_SetAddress+0x32>
  {
    ret = VL53L3CX_ERROR;
 80118c8:	f04f 33ff 	mov.w	r3, #4294967295
 80118cc:	60fb      	str	r3, [r7, #12]
 80118ce:	e005      	b.n	80118dc <VL53L3CX_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	b29a      	uxth	r2, r3
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	811a      	strh	r2, [r3, #8]
    ret = VL53L3CX_OK;
 80118d8:	2300      	movs	r3, #0
 80118da:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80118dc:	68fb      	ldr	r3, [r7, #12]
}
 80118de:	4618      	mov	r0, r3
 80118e0:	3710      	adds	r7, #16
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}

080118e6 <VL53L3CX_GetAddress>:
  * @param pObj    vl53l3cx context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetAddress(VL53L3CX_Object_t *pObj, uint32_t *pAddress)
{
 80118e6:	b480      	push	{r7}
 80118e8:	b085      	sub	sp, #20
 80118ea:	af00      	add	r7, sp, #0
 80118ec:	6078      	str	r0, [r7, #4]
 80118ee:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d002      	beq.n	80118fc <VL53L3CX_GetAddress+0x16>
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d103      	bne.n	8011904 <VL53L3CX_GetAddress+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80118fc:	f06f 0301 	mvn.w	r3, #1
 8011900:	60fb      	str	r3, [r7, #12]
 8011902:	e006      	b.n	8011912 <VL53L3CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	891b      	ldrh	r3, [r3, #8]
 8011908:	461a      	mov	r2, r3
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	601a      	str	r2, [r3, #0]
    ret = VL53L3CX_OK;
 801190e:	2300      	movs	r3, #0
 8011910:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011912:	68fb      	ldr	r3, [r7, #12]
}
 8011914:	4618      	mov	r0, r3
 8011916:	3714      	adds	r7, #20
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr

08011920 <VL53L3CX_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_SetPowerMode(VL53L3CX_Object_t *pObj, uint32_t PowerMode)
{
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
 8011928:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L3CX_NOT_IMPLEMENTED;
 801192a:	f06f 0303 	mvn.w	r3, #3
}
 801192e:	4618      	mov	r0, r3
 8011930:	370c      	adds	r7, #12
 8011932:	46bd      	mov	sp, r7
 8011934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011938:	4770      	bx	lr

0801193a <VL53L3CX_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L3CX status
  */
int32_t VL53L3CX_GetPowerMode(VL53L3CX_Object_t *pObj, uint32_t *pPowerMode)
{
 801193a:	b480      	push	{r7}
 801193c:	b083      	sub	sp, #12
 801193e:	af00      	add	r7, sp, #0
 8011940:	6078      	str	r0, [r7, #4]
 8011942:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L3CX_NOT_IMPLEMENTED;
 8011944:	f06f 0303 	mvn.w	r3, #3
}
 8011948:	4618      	mov	r0, r3
 801194a:	370c      	adds	r7, #12
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr

08011954 <vl53l3cx_poll_for_measurement>:
/** @defgroup VL53L3CX_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l3cx_poll_for_measurement(VL53L3CX_Object_t *pObj, uint32_t Timeout)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b084      	sub	sp, #16
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
 801195c:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 801195e:	2300      	movs	r3, #0
 8011960:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d102      	bne.n	801196e <vl53l3cx_poll_for_measurement+0x1a>
  {
    return VL53L3CX_INVALID_PARAM;
 8011968:	f06f 0301 	mvn.w	r3, #1
 801196c:	e01b      	b.n	80119a6 <vl53l3cx_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	695b      	ldr	r3, [r3, #20]
 8011972:	4798      	blx	r3
 8011974:	4603      	mov	r3, r0
 8011976:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53LX_GetMeasurementDataReady(pObj, &NewDataReady);
 8011978:	f107 030b 	add.w	r3, r7, #11
 801197c:	4619      	mov	r1, r3
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f7f0 fcb0 	bl	80022e4 <VL53LX_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8011984:	7afb      	ldrb	r3, [r7, #11]
 8011986:	2b01      	cmp	r3, #1
 8011988:	d101      	bne.n	801198e <vl53l3cx_poll_for_measurement+0x3a>
    {
      return VL53L3CX_OK;
 801198a:	2300      	movs	r3, #0
 801198c:	e00b      	b.n	80119a6 <vl53l3cx_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	695b      	ldr	r3, [r3, #20]
 8011992:	4798      	blx	r3
 8011994:	4603      	mov	r3, r0
 8011996:	461a      	mov	r2, r3
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	1ad3      	subs	r3, r2, r3
 801199c:	683a      	ldr	r2, [r7, #0]
 801199e:	429a      	cmp	r2, r3
 80119a0:	d8ea      	bhi.n	8011978 <vl53l3cx_poll_for_measurement+0x24>

  return VL53L3CX_TIMEOUT;
 80119a2:	f06f 0302 	mvn.w	r3, #2
}
 80119a6:	4618      	mov	r0, r3
 80119a8:	3710      	adds	r7, #16
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}
	...

080119b0 <vl53l3cx_get_result>:

static int32_t vl53l3cx_get_result(VL53L3CX_Object_t *pObj, VL53L3CX_Result_t *pResult)
{
 80119b0:	b590      	push	{r4, r7, lr}
 80119b2:	b09f      	sub	sp, #124	; 0x7c
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  VL53LX_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d002      	beq.n	80119c6 <vl53l3cx_get_result+0x16>
 80119c0:	683b      	ldr	r3, [r7, #0]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d103      	bne.n	80119ce <vl53l3cx_get_result+0x1e>
  {
    ret = VL53L3CX_INVALID_PARAM;
 80119c6:	f06f 0301 	mvn.w	r3, #1
 80119ca:	677b      	str	r3, [r7, #116]	; 0x74
 80119cc:	e126      	b.n	8011c1c <vl53l3cx_get_result+0x26c>
  }
  else if (VL53LX_GetMultiRangingData(pObj, &data) != VL53LX_ERROR_NONE)
 80119ce:	f107 0308 	add.w	r3, r7, #8
 80119d2:	4619      	mov	r1, r3
 80119d4:	6878      	ldr	r0, [r7, #4]
 80119d6:	f7f1 f858 	bl	8002a8a <VL53LX_GetMultiRangingData>
 80119da:	4603      	mov	r3, r0
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d003      	beq.n	80119e8 <vl53l3cx_get_result+0x38>
  {
    ret = VL53L3CX_ERROR;
 80119e0:	f04f 33ff 	mov.w	r3, #4294967295
 80119e4:	677b      	str	r3, [r7, #116]	; 0x74
 80119e6:	e119      	b.n	8011c1c <vl53l3cx_get_result+0x26c>
  }
  else
  {
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 80119e8:	2300      	movs	r3, #0
 80119ea:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80119ee:	e10b      	b.n	8011c08 <vl53l3cx_get_result+0x258>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 80119f0:	7b7b      	ldrb	r3, [r7, #13]
 80119f2:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80119f6:	4618      	mov	r0, r3
 80119f8:	6839      	ldr	r1, [r7, #0]
 80119fa:	4613      	mov	r3, r2
 80119fc:	011b      	lsls	r3, r3, #4
 80119fe:	4413      	add	r3, r2
 8011a00:	009b      	lsls	r3, r3, #2
 8011a02:	440b      	add	r3, r1
 8011a04:	3304      	adds	r3, #4
 8011a06:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8011a08:	2300      	movs	r3, #0
 8011a0a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8011a0e:	e0f0      	b.n	8011bf2 <vl53l3cx_get_result+0x242>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8011a10:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011a14:	4613      	mov	r3, r2
 8011a16:	009b      	lsls	r3, r3, #2
 8011a18:	4413      	add	r3, r2
 8011a1a:	009b      	lsls	r3, r3, #2
 8011a1c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011a20:	4413      	add	r3, r2
 8011a22:	3b58      	subs	r3, #88	; 0x58
 8011a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	da0d      	bge.n	8011a48 <vl53l3cx_get_result+0x98>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8011a2c:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011a30:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011a34:	6839      	ldr	r1, [r7, #0]
 8011a36:	4613      	mov	r3, r2
 8011a38:	011b      	lsls	r3, r3, #4
 8011a3a:	4413      	add	r3, r2
 8011a3c:	4403      	add	r3, r0
 8011a3e:	009b      	lsls	r3, r3, #2
 8011a40:	440b      	add	r3, r1
 8011a42:	2200      	movs	r2, #0
 8011a44:	609a      	str	r2, [r3, #8]
 8011a46:	e018      	b.n	8011a7a <vl53l3cx_get_result+0xca>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8011a48:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011a4c:	4613      	mov	r3, r2
 8011a4e:	009b      	lsls	r3, r3, #2
 8011a50:	4413      	add	r3, r2
 8011a52:	009b      	lsls	r3, r3, #2
 8011a54:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011a58:	4413      	add	r3, r2
 8011a5a:	3b58      	subs	r3, #88	; 0x58
 8011a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a60:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011a64:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011a68:	461c      	mov	r4, r3
 8011a6a:	6839      	ldr	r1, [r7, #0]
 8011a6c:	4613      	mov	r3, r2
 8011a6e:	011b      	lsls	r3, r3, #4
 8011a70:	4413      	add	r3, r2
 8011a72:	4403      	add	r3, r0
 8011a74:	009b      	lsls	r3, r3, #2
 8011a76:	440b      	add	r3, r1
 8011a78:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011a80:	332c      	adds	r3, #44	; 0x2c
 8011a82:	781b      	ldrb	r3, [r3, #0]
 8011a84:	2b01      	cmp	r3, #1
 8011a86:	d137      	bne.n	8011af8 <vl53l3cx_get_result+0x148>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8011a88:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011a8c:	4613      	mov	r3, r2
 8011a8e:	009b      	lsls	r3, r3, #2
 8011a90:	4413      	add	r3, r2
 8011a92:	009b      	lsls	r3, r3, #2
 8011a94:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011a98:	4413      	add	r3, r2
 8011a9a:	3b60      	subs	r3, #96	; 0x60
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	ee07 3a90 	vmov	s15, r3
 8011aa2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011aa6:	eddf 6a60 	vldr	s13, [pc, #384]	; 8011c28 <vl53l3cx_get_result+0x278>
 8011aaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011aae:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8011c2c <vl53l3cx_get_result+0x27c>
 8011ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011ab6:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8011aba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011abe:	0a1b      	lsrs	r3, r3, #8
 8011ac0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 8011ac4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8011ac8:	ee07 3a90 	vmov	s15, r3
 8011acc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011ad0:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011ad4:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011ad8:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8011adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011ae0:	6839      	ldr	r1, [r7, #0]
 8011ae2:	4613      	mov	r3, r2
 8011ae4:	011b      	lsls	r3, r3, #4
 8011ae6:	4413      	add	r3, r2
 8011ae8:	4403      	add	r3, r0
 8011aea:	3308      	adds	r3, #8
 8011aec:	009b      	lsls	r3, r3, #2
 8011aee:	440b      	add	r3, r1
 8011af0:	3308      	adds	r3, #8
 8011af2:	edc3 7a00 	vstr	s15, [r3]
 8011af6:	e00f      	b.n	8011b18 <vl53l3cx_get_result+0x168>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8011af8:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011afc:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011b00:	6839      	ldr	r1, [r7, #0]
 8011b02:	4613      	mov	r3, r2
 8011b04:	011b      	lsls	r3, r3, #4
 8011b06:	4413      	add	r3, r2
 8011b08:	4403      	add	r3, r0
 8011b0a:	3308      	adds	r3, #8
 8011b0c:	009b      	lsls	r3, r3, #2
 8011b0e:	440b      	add	r3, r1
 8011b10:	3308      	adds	r3, #8
 8011b12:	f04f 0200 	mov.w	r2, #0
 8011b16:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f503 5313 	add.w	r3, r3, #9408	; 0x24c0
 8011b1e:	332d      	adds	r3, #45	; 0x2d
 8011b20:	781b      	ldrb	r3, [r3, #0]
 8011b22:	2b01      	cmp	r3, #1
 8011b24:	d137      	bne.n	8011b96 <vl53l3cx_get_result+0x1e6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8011b26:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011b2a:	4613      	mov	r3, r2
 8011b2c:	009b      	lsls	r3, r3, #2
 8011b2e:	4413      	add	r3, r2
 8011b30:	009b      	lsls	r3, r3, #2
 8011b32:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011b36:	4413      	add	r3, r2
 8011b38:	3b64      	subs	r3, #100	; 0x64
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	ee07 3a90 	vmov	s15, r3
 8011b40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011b44:	eddf 6a38 	vldr	s13, [pc, #224]	; 8011c28 <vl53l3cx_get_result+0x278>
 8011b48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011b4c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8011c2c <vl53l3cx_get_result+0x27c>
 8011b50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b54:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8011b58:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8011b5c:	0a1b      	lsrs	r3, r3, #8
 8011b5e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 8011b62:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8011b66:	ee07 3a90 	vmov	s15, r3
 8011b6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011b6e:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011b72:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011b76:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8011b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011b7e:	6839      	ldr	r1, [r7, #0]
 8011b80:	4613      	mov	r3, r2
 8011b82:	011b      	lsls	r3, r3, #4
 8011b84:	4413      	add	r3, r2
 8011b86:	4403      	add	r3, r0
 8011b88:	330c      	adds	r3, #12
 8011b8a:	009b      	lsls	r3, r3, #2
 8011b8c:	440b      	add	r3, r1
 8011b8e:	3308      	adds	r3, #8
 8011b90:	edc3 7a00 	vstr	s15, [r3]
 8011b94:	e00f      	b.n	8011bb6 <vl53l3cx_get_result+0x206>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8011b96:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011b9a:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011b9e:	6839      	ldr	r1, [r7, #0]
 8011ba0:	4613      	mov	r3, r2
 8011ba2:	011b      	lsls	r3, r3, #4
 8011ba4:	4413      	add	r3, r2
 8011ba6:	4403      	add	r3, r0
 8011ba8:	330c      	adds	r3, #12
 8011baa:	009b      	lsls	r3, r3, #2
 8011bac:	440b      	add	r3, r1
 8011bae:	3308      	adds	r3, #8
 8011bb0:	f04f 0200 	mov.w	r2, #0
 8011bb4:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 8011bb6:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011bba:	4613      	mov	r3, r2
 8011bbc:	009b      	lsls	r3, r3, #2
 8011bbe:	4413      	add	r3, r2
 8011bc0:	009b      	lsls	r3, r3, #2
 8011bc2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011bc6:	4413      	add	r3, r2
 8011bc8:	3b56      	subs	r3, #86	; 0x56
 8011bca:	781b      	ldrb	r3, [r3, #0]
 8011bcc:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8011bd0:	f897 0072 	ldrb.w	r0, [r7, #114]	; 0x72
 8011bd4:	461c      	mov	r4, r3
 8011bd6:	6839      	ldr	r1, [r7, #0]
 8011bd8:	4613      	mov	r3, r2
 8011bda:	011b      	lsls	r3, r3, #4
 8011bdc:	4413      	add	r3, r2
 8011bde:	4403      	add	r3, r0
 8011be0:	3304      	adds	r3, #4
 8011be2:	009b      	lsls	r3, r3, #2
 8011be4:	440b      	add	r3, r1
 8011be6:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8011be8:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8011bec:	3301      	adds	r3, #1
 8011bee:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8011bf2:	7b7b      	ldrb	r3, [r7, #13]
 8011bf4:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	f4ff af09 	bcc.w	8011a10 <vl53l3cx_get_result+0x60>
    for (i = 0; i < VL53L3CX_MAX_NB_ZONES; i++)
 8011bfe:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8011c02:	3301      	adds	r3, #1
 8011c04:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8011c08:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	f43f aeef 	beq.w	80119f0 <vl53l3cx_get_result+0x40>
      }
    }

    pResult->NumberOfZones = VL53L3CX_MAX_NB_ZONES;
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	2201      	movs	r2, #1
 8011c16:	601a      	str	r2, [r3, #0]

    ret = VL53L3CX_OK;
 8011c18:	2300      	movs	r3, #0
 8011c1a:	677b      	str	r3, [r7, #116]	; 0x74
  }

  return ret;
 8011c1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	377c      	adds	r7, #124	; 0x7c
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd90      	pop	{r4, r7, pc}
 8011c26:	bf00      	nop
 8011c28:	47800000 	.word	0x47800000
 8011c2c:	447a0000 	.word	0x447a0000

08011c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8011c34:	4b0e      	ldr	r3, [pc, #56]	; (8011c70 <HAL_Init+0x40>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	4a0d      	ldr	r2, [pc, #52]	; (8011c70 <HAL_Init+0x40>)
 8011c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8011c40:	4b0b      	ldr	r3, [pc, #44]	; (8011c70 <HAL_Init+0x40>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	4a0a      	ldr	r2, [pc, #40]	; (8011c70 <HAL_Init+0x40>)
 8011c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011c4c:	4b08      	ldr	r3, [pc, #32]	; (8011c70 <HAL_Init+0x40>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	4a07      	ldr	r2, [pc, #28]	; (8011c70 <HAL_Init+0x40>)
 8011c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011c58:	2003      	movs	r0, #3
 8011c5a:	f000 f931 	bl	8011ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8011c5e:	2000      	movs	r0, #0
 8011c60:	f000 f808 	bl	8011c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8011c64:	f7ef f8bc 	bl	8000de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011c68:	2300      	movs	r3, #0
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	bd80      	pop	{r7, pc}
 8011c6e:	bf00      	nop
 8011c70:	40023c00 	.word	0x40023c00

08011c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b082      	sub	sp, #8
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8011c7c:	4b12      	ldr	r3, [pc, #72]	; (8011cc8 <HAL_InitTick+0x54>)
 8011c7e:	681a      	ldr	r2, [r3, #0]
 8011c80:	4b12      	ldr	r3, [pc, #72]	; (8011ccc <HAL_InitTick+0x58>)
 8011c82:	781b      	ldrb	r3, [r3, #0]
 8011c84:	4619      	mov	r1, r3
 8011c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011c92:	4618      	mov	r0, r3
 8011c94:	f000 f93b 	bl	8011f0e <HAL_SYSTICK_Config>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d001      	beq.n	8011ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	e00e      	b.n	8011cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2b0f      	cmp	r3, #15
 8011ca6:	d80a      	bhi.n	8011cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8011ca8:	2200      	movs	r2, #0
 8011caa:	6879      	ldr	r1, [r7, #4]
 8011cac:	f04f 30ff 	mov.w	r0, #4294967295
 8011cb0:	f000 f911 	bl	8011ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8011cb4:	4a06      	ldr	r2, [pc, #24]	; (8011cd0 <HAL_InitTick+0x5c>)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	e000      	b.n	8011cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8011cbe:	2301      	movs	r3, #1
}
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	3708      	adds	r7, #8
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}
 8011cc8:	20000018 	.word	0x20000018
 8011ccc:	20000084 	.word	0x20000084
 8011cd0:	20000080 	.word	0x20000080

08011cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011cd4:	b480      	push	{r7}
 8011cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011cd8:	4b06      	ldr	r3, [pc, #24]	; (8011cf4 <HAL_IncTick+0x20>)
 8011cda:	781b      	ldrb	r3, [r3, #0]
 8011cdc:	461a      	mov	r2, r3
 8011cde:	4b06      	ldr	r3, [pc, #24]	; (8011cf8 <HAL_IncTick+0x24>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	4413      	add	r3, r2
 8011ce4:	4a04      	ldr	r2, [pc, #16]	; (8011cf8 <HAL_IncTick+0x24>)
 8011ce6:	6013      	str	r3, [r2, #0]
}
 8011ce8:	bf00      	nop
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	20000084 	.word	0x20000084
 8011cf8:	200073ec 	.word	0x200073ec

08011cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011cfc:	b480      	push	{r7}
 8011cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8011d00:	4b03      	ldr	r3, [pc, #12]	; (8011d10 <HAL_GetTick+0x14>)
 8011d02:	681b      	ldr	r3, [r3, #0]
}
 8011d04:	4618      	mov	r0, r3
 8011d06:	46bd      	mov	sp, r7
 8011d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0c:	4770      	bx	lr
 8011d0e:	bf00      	nop
 8011d10:	200073ec 	.word	0x200073ec

08011d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b084      	sub	sp, #16
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011d1c:	f7ff ffee 	bl	8011cfc <HAL_GetTick>
 8011d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d2c:	d005      	beq.n	8011d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8011d2e:	4b0a      	ldr	r3, [pc, #40]	; (8011d58 <HAL_Delay+0x44>)
 8011d30:	781b      	ldrb	r3, [r3, #0]
 8011d32:	461a      	mov	r2, r3
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	4413      	add	r3, r2
 8011d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8011d3a:	bf00      	nop
 8011d3c:	f7ff ffde 	bl	8011cfc <HAL_GetTick>
 8011d40:	4602      	mov	r2, r0
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	1ad3      	subs	r3, r2, r3
 8011d46:	68fa      	ldr	r2, [r7, #12]
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d8f7      	bhi.n	8011d3c <HAL_Delay+0x28>
  {
  }
}
 8011d4c:	bf00      	nop
 8011d4e:	bf00      	nop
 8011d50:	3710      	adds	r7, #16
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}
 8011d56:	bf00      	nop
 8011d58:	20000084 	.word	0x20000084

08011d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011d5c:	b480      	push	{r7}
 8011d5e:	b085      	sub	sp, #20
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f003 0307 	and.w	r3, r3, #7
 8011d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011d6c:	4b0c      	ldr	r3, [pc, #48]	; (8011da0 <__NVIC_SetPriorityGrouping+0x44>)
 8011d6e:	68db      	ldr	r3, [r3, #12]
 8011d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011d72:	68ba      	ldr	r2, [r7, #8]
 8011d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011d78:	4013      	ands	r3, r2
 8011d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011d8e:	4a04      	ldr	r2, [pc, #16]	; (8011da0 <__NVIC_SetPriorityGrouping+0x44>)
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	60d3      	str	r3, [r2, #12]
}
 8011d94:	bf00      	nop
 8011d96:	3714      	adds	r7, #20
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9e:	4770      	bx	lr
 8011da0:	e000ed00 	.word	0xe000ed00

08011da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8011da4:	b480      	push	{r7}
 8011da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011da8:	4b04      	ldr	r3, [pc, #16]	; (8011dbc <__NVIC_GetPriorityGrouping+0x18>)
 8011daa:	68db      	ldr	r3, [r3, #12]
 8011dac:	0a1b      	lsrs	r3, r3, #8
 8011dae:	f003 0307 	and.w	r3, r3, #7
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	46bd      	mov	sp, r7
 8011db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dba:	4770      	bx	lr
 8011dbc:	e000ed00 	.word	0xe000ed00

08011dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b083      	sub	sp, #12
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	6039      	str	r1, [r7, #0]
 8011dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	db0a      	blt.n	8011dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	b2da      	uxtb	r2, r3
 8011dd8:	490c      	ldr	r1, [pc, #48]	; (8011e0c <__NVIC_SetPriority+0x4c>)
 8011dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011dde:	0112      	lsls	r2, r2, #4
 8011de0:	b2d2      	uxtb	r2, r2
 8011de2:	440b      	add	r3, r1
 8011de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8011de8:	e00a      	b.n	8011e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011dea:	683b      	ldr	r3, [r7, #0]
 8011dec:	b2da      	uxtb	r2, r3
 8011dee:	4908      	ldr	r1, [pc, #32]	; (8011e10 <__NVIC_SetPriority+0x50>)
 8011df0:	79fb      	ldrb	r3, [r7, #7]
 8011df2:	f003 030f 	and.w	r3, r3, #15
 8011df6:	3b04      	subs	r3, #4
 8011df8:	0112      	lsls	r2, r2, #4
 8011dfa:	b2d2      	uxtb	r2, r2
 8011dfc:	440b      	add	r3, r1
 8011dfe:	761a      	strb	r2, [r3, #24]
}
 8011e00:	bf00      	nop
 8011e02:	370c      	adds	r7, #12
 8011e04:	46bd      	mov	sp, r7
 8011e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0a:	4770      	bx	lr
 8011e0c:	e000e100 	.word	0xe000e100
 8011e10:	e000ed00 	.word	0xe000ed00

08011e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011e14:	b480      	push	{r7}
 8011e16:	b089      	sub	sp, #36	; 0x24
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	60f8      	str	r0, [r7, #12]
 8011e1c:	60b9      	str	r1, [r7, #8]
 8011e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	f003 0307 	and.w	r3, r3, #7
 8011e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011e28:	69fb      	ldr	r3, [r7, #28]
 8011e2a:	f1c3 0307 	rsb	r3, r3, #7
 8011e2e:	2b04      	cmp	r3, #4
 8011e30:	bf28      	it	cs
 8011e32:	2304      	movcs	r3, #4
 8011e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011e36:	69fb      	ldr	r3, [r7, #28]
 8011e38:	3304      	adds	r3, #4
 8011e3a:	2b06      	cmp	r3, #6
 8011e3c:	d902      	bls.n	8011e44 <NVIC_EncodePriority+0x30>
 8011e3e:	69fb      	ldr	r3, [r7, #28]
 8011e40:	3b03      	subs	r3, #3
 8011e42:	e000      	b.n	8011e46 <NVIC_EncodePriority+0x32>
 8011e44:	2300      	movs	r3, #0
 8011e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011e48:	f04f 32ff 	mov.w	r2, #4294967295
 8011e4c:	69bb      	ldr	r3, [r7, #24]
 8011e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8011e52:	43da      	mvns	r2, r3
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	401a      	ands	r2, r3
 8011e58:	697b      	ldr	r3, [r7, #20]
 8011e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	fa01 f303 	lsl.w	r3, r1, r3
 8011e66:	43d9      	mvns	r1, r3
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011e6c:	4313      	orrs	r3, r2
         );
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3724      	adds	r7, #36	; 0x24
 8011e72:	46bd      	mov	sp, r7
 8011e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e78:	4770      	bx	lr
	...

08011e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b082      	sub	sp, #8
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	3b01      	subs	r3, #1
 8011e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011e8c:	d301      	bcc.n	8011e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8011e8e:	2301      	movs	r3, #1
 8011e90:	e00f      	b.n	8011eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011e92:	4a0a      	ldr	r2, [pc, #40]	; (8011ebc <SysTick_Config+0x40>)
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	3b01      	subs	r3, #1
 8011e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011e9a:	210f      	movs	r1, #15
 8011e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8011ea0:	f7ff ff8e 	bl	8011dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011ea4:	4b05      	ldr	r3, [pc, #20]	; (8011ebc <SysTick_Config+0x40>)
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011eaa:	4b04      	ldr	r3, [pc, #16]	; (8011ebc <SysTick_Config+0x40>)
 8011eac:	2207      	movs	r2, #7
 8011eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011eb0:	2300      	movs	r3, #0
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3708      	adds	r7, #8
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
 8011eba:	bf00      	nop
 8011ebc:	e000e010 	.word	0xe000e010

08011ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b082      	sub	sp, #8
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f7ff ff47 	bl	8011d5c <__NVIC_SetPriorityGrouping>
}
 8011ece:	bf00      	nop
 8011ed0:	3708      	adds	r7, #8
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	bd80      	pop	{r7, pc}

08011ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011ed6:	b580      	push	{r7, lr}
 8011ed8:	b086      	sub	sp, #24
 8011eda:	af00      	add	r7, sp, #0
 8011edc:	4603      	mov	r3, r0
 8011ede:	60b9      	str	r1, [r7, #8]
 8011ee0:	607a      	str	r2, [r7, #4]
 8011ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011ee8:	f7ff ff5c 	bl	8011da4 <__NVIC_GetPriorityGrouping>
 8011eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011eee:	687a      	ldr	r2, [r7, #4]
 8011ef0:	68b9      	ldr	r1, [r7, #8]
 8011ef2:	6978      	ldr	r0, [r7, #20]
 8011ef4:	f7ff ff8e 	bl	8011e14 <NVIC_EncodePriority>
 8011ef8:	4602      	mov	r2, r0
 8011efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011efe:	4611      	mov	r1, r2
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7ff ff5d 	bl	8011dc0 <__NVIC_SetPriority>
}
 8011f06:	bf00      	nop
 8011f08:	3718      	adds	r7, #24
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}

08011f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011f0e:	b580      	push	{r7, lr}
 8011f10:	b082      	sub	sp, #8
 8011f12:	af00      	add	r7, sp, #0
 8011f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f7ff ffb0 	bl	8011e7c <SysTick_Config>
 8011f1c:	4603      	mov	r3, r0
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3708      	adds	r7, #8
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
	...

08011f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011f28:	b480      	push	{r7}
 8011f2a:	b089      	sub	sp, #36	; 0x24
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011f32:	2300      	movs	r3, #0
 8011f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8011f36:	2300      	movs	r3, #0
 8011f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011f3e:	2300      	movs	r3, #0
 8011f40:	61fb      	str	r3, [r7, #28]
 8011f42:	e159      	b.n	80121f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011f44:	2201      	movs	r2, #1
 8011f46:	69fb      	ldr	r3, [r7, #28]
 8011f48:	fa02 f303 	lsl.w	r3, r2, r3
 8011f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	697a      	ldr	r2, [r7, #20]
 8011f54:	4013      	ands	r3, r2
 8011f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011f58:	693a      	ldr	r2, [r7, #16]
 8011f5a:	697b      	ldr	r3, [r7, #20]
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	f040 8148 	bne.w	80121f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	685b      	ldr	r3, [r3, #4]
 8011f66:	f003 0303 	and.w	r3, r3, #3
 8011f6a:	2b01      	cmp	r3, #1
 8011f6c:	d005      	beq.n	8011f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	685b      	ldr	r3, [r3, #4]
 8011f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011f76:	2b02      	cmp	r3, #2
 8011f78:	d130      	bne.n	8011fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	689b      	ldr	r3, [r3, #8]
 8011f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011f80:	69fb      	ldr	r3, [r7, #28]
 8011f82:	005b      	lsls	r3, r3, #1
 8011f84:	2203      	movs	r2, #3
 8011f86:	fa02 f303 	lsl.w	r3, r2, r3
 8011f8a:	43db      	mvns	r3, r3
 8011f8c:	69ba      	ldr	r2, [r7, #24]
 8011f8e:	4013      	ands	r3, r2
 8011f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	68da      	ldr	r2, [r3, #12]
 8011f96:	69fb      	ldr	r3, [r7, #28]
 8011f98:	005b      	lsls	r3, r3, #1
 8011f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8011f9e:	69ba      	ldr	r2, [r7, #24]
 8011fa0:	4313      	orrs	r3, r2
 8011fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	69ba      	ldr	r2, [r7, #24]
 8011fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011fb0:	2201      	movs	r2, #1
 8011fb2:	69fb      	ldr	r3, [r7, #28]
 8011fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8011fb8:	43db      	mvns	r3, r3
 8011fba:	69ba      	ldr	r2, [r7, #24]
 8011fbc:	4013      	ands	r3, r2
 8011fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	685b      	ldr	r3, [r3, #4]
 8011fc4:	091b      	lsrs	r3, r3, #4
 8011fc6:	f003 0201 	and.w	r2, r3, #1
 8011fca:	69fb      	ldr	r3, [r7, #28]
 8011fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8011fd0:	69ba      	ldr	r2, [r7, #24]
 8011fd2:	4313      	orrs	r3, r2
 8011fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	69ba      	ldr	r2, [r7, #24]
 8011fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	685b      	ldr	r3, [r3, #4]
 8011fe0:	f003 0303 	and.w	r3, r3, #3
 8011fe4:	2b03      	cmp	r3, #3
 8011fe6:	d017      	beq.n	8012018 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	68db      	ldr	r3, [r3, #12]
 8011fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8011fee:	69fb      	ldr	r3, [r7, #28]
 8011ff0:	005b      	lsls	r3, r3, #1
 8011ff2:	2203      	movs	r2, #3
 8011ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8011ff8:	43db      	mvns	r3, r3
 8011ffa:	69ba      	ldr	r2, [r7, #24]
 8011ffc:	4013      	ands	r3, r2
 8011ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	689a      	ldr	r2, [r3, #8]
 8012004:	69fb      	ldr	r3, [r7, #28]
 8012006:	005b      	lsls	r3, r3, #1
 8012008:	fa02 f303 	lsl.w	r3, r2, r3
 801200c:	69ba      	ldr	r2, [r7, #24]
 801200e:	4313      	orrs	r3, r2
 8012010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	69ba      	ldr	r2, [r7, #24]
 8012016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	685b      	ldr	r3, [r3, #4]
 801201c:	f003 0303 	and.w	r3, r3, #3
 8012020:	2b02      	cmp	r3, #2
 8012022:	d123      	bne.n	801206c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8012024:	69fb      	ldr	r3, [r7, #28]
 8012026:	08da      	lsrs	r2, r3, #3
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	3208      	adds	r2, #8
 801202c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012032:	69fb      	ldr	r3, [r7, #28]
 8012034:	f003 0307 	and.w	r3, r3, #7
 8012038:	009b      	lsls	r3, r3, #2
 801203a:	220f      	movs	r2, #15
 801203c:	fa02 f303 	lsl.w	r3, r2, r3
 8012040:	43db      	mvns	r3, r3
 8012042:	69ba      	ldr	r2, [r7, #24]
 8012044:	4013      	ands	r3, r2
 8012046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	691a      	ldr	r2, [r3, #16]
 801204c:	69fb      	ldr	r3, [r7, #28]
 801204e:	f003 0307 	and.w	r3, r3, #7
 8012052:	009b      	lsls	r3, r3, #2
 8012054:	fa02 f303 	lsl.w	r3, r2, r3
 8012058:	69ba      	ldr	r2, [r7, #24]
 801205a:	4313      	orrs	r3, r2
 801205c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801205e:	69fb      	ldr	r3, [r7, #28]
 8012060:	08da      	lsrs	r2, r3, #3
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	3208      	adds	r2, #8
 8012066:	69b9      	ldr	r1, [r7, #24]
 8012068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012072:	69fb      	ldr	r3, [r7, #28]
 8012074:	005b      	lsls	r3, r3, #1
 8012076:	2203      	movs	r2, #3
 8012078:	fa02 f303 	lsl.w	r3, r2, r3
 801207c:	43db      	mvns	r3, r3
 801207e:	69ba      	ldr	r2, [r7, #24]
 8012080:	4013      	ands	r3, r2
 8012082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012084:	683b      	ldr	r3, [r7, #0]
 8012086:	685b      	ldr	r3, [r3, #4]
 8012088:	f003 0203 	and.w	r2, r3, #3
 801208c:	69fb      	ldr	r3, [r7, #28]
 801208e:	005b      	lsls	r3, r3, #1
 8012090:	fa02 f303 	lsl.w	r3, r2, r3
 8012094:	69ba      	ldr	r2, [r7, #24]
 8012096:	4313      	orrs	r3, r2
 8012098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	69ba      	ldr	r2, [r7, #24]
 801209e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	f000 80a2 	beq.w	80121f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80120ae:	2300      	movs	r3, #0
 80120b0:	60fb      	str	r3, [r7, #12]
 80120b2:	4b57      	ldr	r3, [pc, #348]	; (8012210 <HAL_GPIO_Init+0x2e8>)
 80120b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120b6:	4a56      	ldr	r2, [pc, #344]	; (8012210 <HAL_GPIO_Init+0x2e8>)
 80120b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80120bc:	6453      	str	r3, [r2, #68]	; 0x44
 80120be:	4b54      	ldr	r3, [pc, #336]	; (8012210 <HAL_GPIO_Init+0x2e8>)
 80120c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80120c6:	60fb      	str	r3, [r7, #12]
 80120c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80120ca:	4a52      	ldr	r2, [pc, #328]	; (8012214 <HAL_GPIO_Init+0x2ec>)
 80120cc:	69fb      	ldr	r3, [r7, #28]
 80120ce:	089b      	lsrs	r3, r3, #2
 80120d0:	3302      	adds	r3, #2
 80120d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80120d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80120d8:	69fb      	ldr	r3, [r7, #28]
 80120da:	f003 0303 	and.w	r3, r3, #3
 80120de:	009b      	lsls	r3, r3, #2
 80120e0:	220f      	movs	r2, #15
 80120e2:	fa02 f303 	lsl.w	r3, r2, r3
 80120e6:	43db      	mvns	r3, r3
 80120e8:	69ba      	ldr	r2, [r7, #24]
 80120ea:	4013      	ands	r3, r2
 80120ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	4a49      	ldr	r2, [pc, #292]	; (8012218 <HAL_GPIO_Init+0x2f0>)
 80120f2:	4293      	cmp	r3, r2
 80120f4:	d019      	beq.n	801212a <HAL_GPIO_Init+0x202>
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	4a48      	ldr	r2, [pc, #288]	; (801221c <HAL_GPIO_Init+0x2f4>)
 80120fa:	4293      	cmp	r3, r2
 80120fc:	d013      	beq.n	8012126 <HAL_GPIO_Init+0x1fe>
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	4a47      	ldr	r2, [pc, #284]	; (8012220 <HAL_GPIO_Init+0x2f8>)
 8012102:	4293      	cmp	r3, r2
 8012104:	d00d      	beq.n	8012122 <HAL_GPIO_Init+0x1fa>
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	4a46      	ldr	r2, [pc, #280]	; (8012224 <HAL_GPIO_Init+0x2fc>)
 801210a:	4293      	cmp	r3, r2
 801210c:	d007      	beq.n	801211e <HAL_GPIO_Init+0x1f6>
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	4a45      	ldr	r2, [pc, #276]	; (8012228 <HAL_GPIO_Init+0x300>)
 8012112:	4293      	cmp	r3, r2
 8012114:	d101      	bne.n	801211a <HAL_GPIO_Init+0x1f2>
 8012116:	2304      	movs	r3, #4
 8012118:	e008      	b.n	801212c <HAL_GPIO_Init+0x204>
 801211a:	2307      	movs	r3, #7
 801211c:	e006      	b.n	801212c <HAL_GPIO_Init+0x204>
 801211e:	2303      	movs	r3, #3
 8012120:	e004      	b.n	801212c <HAL_GPIO_Init+0x204>
 8012122:	2302      	movs	r3, #2
 8012124:	e002      	b.n	801212c <HAL_GPIO_Init+0x204>
 8012126:	2301      	movs	r3, #1
 8012128:	e000      	b.n	801212c <HAL_GPIO_Init+0x204>
 801212a:	2300      	movs	r3, #0
 801212c:	69fa      	ldr	r2, [r7, #28]
 801212e:	f002 0203 	and.w	r2, r2, #3
 8012132:	0092      	lsls	r2, r2, #2
 8012134:	4093      	lsls	r3, r2
 8012136:	69ba      	ldr	r2, [r7, #24]
 8012138:	4313      	orrs	r3, r2
 801213a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801213c:	4935      	ldr	r1, [pc, #212]	; (8012214 <HAL_GPIO_Init+0x2ec>)
 801213e:	69fb      	ldr	r3, [r7, #28]
 8012140:	089b      	lsrs	r3, r3, #2
 8012142:	3302      	adds	r3, #2
 8012144:	69ba      	ldr	r2, [r7, #24]
 8012146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801214a:	4b38      	ldr	r3, [pc, #224]	; (801222c <HAL_GPIO_Init+0x304>)
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	43db      	mvns	r3, r3
 8012154:	69ba      	ldr	r2, [r7, #24]
 8012156:	4013      	ands	r3, r2
 8012158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801215a:	683b      	ldr	r3, [r7, #0]
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012162:	2b00      	cmp	r3, #0
 8012164:	d003      	beq.n	801216e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8012166:	69ba      	ldr	r2, [r7, #24]
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	4313      	orrs	r3, r2
 801216c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801216e:	4a2f      	ldr	r2, [pc, #188]	; (801222c <HAL_GPIO_Init+0x304>)
 8012170:	69bb      	ldr	r3, [r7, #24]
 8012172:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8012174:	4b2d      	ldr	r3, [pc, #180]	; (801222c <HAL_GPIO_Init+0x304>)
 8012176:	685b      	ldr	r3, [r3, #4]
 8012178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801217a:	693b      	ldr	r3, [r7, #16]
 801217c:	43db      	mvns	r3, r3
 801217e:	69ba      	ldr	r2, [r7, #24]
 8012180:	4013      	ands	r3, r2
 8012182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	685b      	ldr	r3, [r3, #4]
 8012188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801218c:	2b00      	cmp	r3, #0
 801218e:	d003      	beq.n	8012198 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8012190:	69ba      	ldr	r2, [r7, #24]
 8012192:	693b      	ldr	r3, [r7, #16]
 8012194:	4313      	orrs	r3, r2
 8012196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8012198:	4a24      	ldr	r2, [pc, #144]	; (801222c <HAL_GPIO_Init+0x304>)
 801219a:	69bb      	ldr	r3, [r7, #24]
 801219c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801219e:	4b23      	ldr	r3, [pc, #140]	; (801222c <HAL_GPIO_Init+0x304>)
 80121a0:	689b      	ldr	r3, [r3, #8]
 80121a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80121a4:	693b      	ldr	r3, [r7, #16]
 80121a6:	43db      	mvns	r3, r3
 80121a8:	69ba      	ldr	r2, [r7, #24]
 80121aa:	4013      	ands	r3, r2
 80121ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80121ae:	683b      	ldr	r3, [r7, #0]
 80121b0:	685b      	ldr	r3, [r3, #4]
 80121b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d003      	beq.n	80121c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80121ba:	69ba      	ldr	r2, [r7, #24]
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	4313      	orrs	r3, r2
 80121c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80121c2:	4a1a      	ldr	r2, [pc, #104]	; (801222c <HAL_GPIO_Init+0x304>)
 80121c4:	69bb      	ldr	r3, [r7, #24]
 80121c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80121c8:	4b18      	ldr	r3, [pc, #96]	; (801222c <HAL_GPIO_Init+0x304>)
 80121ca:	68db      	ldr	r3, [r3, #12]
 80121cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80121ce:	693b      	ldr	r3, [r7, #16]
 80121d0:	43db      	mvns	r3, r3
 80121d2:	69ba      	ldr	r2, [r7, #24]
 80121d4:	4013      	ands	r3, r2
 80121d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80121d8:	683b      	ldr	r3, [r7, #0]
 80121da:	685b      	ldr	r3, [r3, #4]
 80121dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d003      	beq.n	80121ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80121e4:	69ba      	ldr	r2, [r7, #24]
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	4313      	orrs	r3, r2
 80121ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80121ec:	4a0f      	ldr	r2, [pc, #60]	; (801222c <HAL_GPIO_Init+0x304>)
 80121ee:	69bb      	ldr	r3, [r7, #24]
 80121f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80121f2:	69fb      	ldr	r3, [r7, #28]
 80121f4:	3301      	adds	r3, #1
 80121f6:	61fb      	str	r3, [r7, #28]
 80121f8:	69fb      	ldr	r3, [r7, #28]
 80121fa:	2b0f      	cmp	r3, #15
 80121fc:	f67f aea2 	bls.w	8011f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8012200:	bf00      	nop
 8012202:	bf00      	nop
 8012204:	3724      	adds	r7, #36	; 0x24
 8012206:	46bd      	mov	sp, r7
 8012208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220c:	4770      	bx	lr
 801220e:	bf00      	nop
 8012210:	40023800 	.word	0x40023800
 8012214:	40013800 	.word	0x40013800
 8012218:	40020000 	.word	0x40020000
 801221c:	40020400 	.word	0x40020400
 8012220:	40020800 	.word	0x40020800
 8012224:	40020c00 	.word	0x40020c00
 8012228:	40021000 	.word	0x40021000
 801222c:	40013c00 	.word	0x40013c00

08012230 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8012230:	b480      	push	{r7}
 8012232:	b087      	sub	sp, #28
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
 8012238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801223a:	2300      	movs	r3, #0
 801223c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801223e:	2300      	movs	r3, #0
 8012240:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8012242:	2300      	movs	r3, #0
 8012244:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012246:	2300      	movs	r3, #0
 8012248:	617b      	str	r3, [r7, #20]
 801224a:	e0bb      	b.n	80123c4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801224c:	2201      	movs	r2, #1
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	fa02 f303 	lsl.w	r3, r2, r3
 8012254:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8012256:	683a      	ldr	r2, [r7, #0]
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	4013      	ands	r3, r2
 801225c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801225e:	68fa      	ldr	r2, [r7, #12]
 8012260:	693b      	ldr	r3, [r7, #16]
 8012262:	429a      	cmp	r2, r3
 8012264:	f040 80ab 	bne.w	80123be <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8012268:	4a5c      	ldr	r2, [pc, #368]	; (80123dc <HAL_GPIO_DeInit+0x1ac>)
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	089b      	lsrs	r3, r3, #2
 801226e:	3302      	adds	r3, #2
 8012270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012274:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8012276:	697b      	ldr	r3, [r7, #20]
 8012278:	f003 0303 	and.w	r3, r3, #3
 801227c:	009b      	lsls	r3, r3, #2
 801227e:	220f      	movs	r2, #15
 8012280:	fa02 f303 	lsl.w	r3, r2, r3
 8012284:	68ba      	ldr	r2, [r7, #8]
 8012286:	4013      	ands	r3, r2
 8012288:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	4a54      	ldr	r2, [pc, #336]	; (80123e0 <HAL_GPIO_DeInit+0x1b0>)
 801228e:	4293      	cmp	r3, r2
 8012290:	d019      	beq.n	80122c6 <HAL_GPIO_DeInit+0x96>
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	4a53      	ldr	r2, [pc, #332]	; (80123e4 <HAL_GPIO_DeInit+0x1b4>)
 8012296:	4293      	cmp	r3, r2
 8012298:	d013      	beq.n	80122c2 <HAL_GPIO_DeInit+0x92>
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	4a52      	ldr	r2, [pc, #328]	; (80123e8 <HAL_GPIO_DeInit+0x1b8>)
 801229e:	4293      	cmp	r3, r2
 80122a0:	d00d      	beq.n	80122be <HAL_GPIO_DeInit+0x8e>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	4a51      	ldr	r2, [pc, #324]	; (80123ec <HAL_GPIO_DeInit+0x1bc>)
 80122a6:	4293      	cmp	r3, r2
 80122a8:	d007      	beq.n	80122ba <HAL_GPIO_DeInit+0x8a>
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	4a50      	ldr	r2, [pc, #320]	; (80123f0 <HAL_GPIO_DeInit+0x1c0>)
 80122ae:	4293      	cmp	r3, r2
 80122b0:	d101      	bne.n	80122b6 <HAL_GPIO_DeInit+0x86>
 80122b2:	2304      	movs	r3, #4
 80122b4:	e008      	b.n	80122c8 <HAL_GPIO_DeInit+0x98>
 80122b6:	2307      	movs	r3, #7
 80122b8:	e006      	b.n	80122c8 <HAL_GPIO_DeInit+0x98>
 80122ba:	2303      	movs	r3, #3
 80122bc:	e004      	b.n	80122c8 <HAL_GPIO_DeInit+0x98>
 80122be:	2302      	movs	r3, #2
 80122c0:	e002      	b.n	80122c8 <HAL_GPIO_DeInit+0x98>
 80122c2:	2301      	movs	r3, #1
 80122c4:	e000      	b.n	80122c8 <HAL_GPIO_DeInit+0x98>
 80122c6:	2300      	movs	r3, #0
 80122c8:	697a      	ldr	r2, [r7, #20]
 80122ca:	f002 0203 	and.w	r2, r2, #3
 80122ce:	0092      	lsls	r2, r2, #2
 80122d0:	4093      	lsls	r3, r2
 80122d2:	68ba      	ldr	r2, [r7, #8]
 80122d4:	429a      	cmp	r2, r3
 80122d6:	d132      	bne.n	801233e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80122d8:	4b46      	ldr	r3, [pc, #280]	; (80123f4 <HAL_GPIO_DeInit+0x1c4>)
 80122da:	681a      	ldr	r2, [r3, #0]
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	43db      	mvns	r3, r3
 80122e0:	4944      	ldr	r1, [pc, #272]	; (80123f4 <HAL_GPIO_DeInit+0x1c4>)
 80122e2:	4013      	ands	r3, r2
 80122e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80122e6:	4b43      	ldr	r3, [pc, #268]	; (80123f4 <HAL_GPIO_DeInit+0x1c4>)
 80122e8:	685a      	ldr	r2, [r3, #4]
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	43db      	mvns	r3, r3
 80122ee:	4941      	ldr	r1, [pc, #260]	; (80123f4 <HAL_GPIO_DeInit+0x1c4>)
 80122f0:	4013      	ands	r3, r2
 80122f2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80122f4:	4b3f      	ldr	r3, [pc, #252]	; (80123f4 <HAL_GPIO_DeInit+0x1c4>)
 80122f6:	689a      	ldr	r2, [r3, #8]
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	43db      	mvns	r3, r3
 80122fc:	493d      	ldr	r1, [pc, #244]	; (80123f4 <HAL_GPIO_DeInit+0x1c4>)
 80122fe:	4013      	ands	r3, r2
 8012300:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8012302:	4b3c      	ldr	r3, [pc, #240]	; (80123f4 <HAL_GPIO_DeInit+0x1c4>)
 8012304:	68da      	ldr	r2, [r3, #12]
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	43db      	mvns	r3, r3
 801230a:	493a      	ldr	r1, [pc, #232]	; (80123f4 <HAL_GPIO_DeInit+0x1c4>)
 801230c:	4013      	ands	r3, r2
 801230e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	f003 0303 	and.w	r3, r3, #3
 8012316:	009b      	lsls	r3, r3, #2
 8012318:	220f      	movs	r2, #15
 801231a:	fa02 f303 	lsl.w	r3, r2, r3
 801231e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8012320:	4a2e      	ldr	r2, [pc, #184]	; (80123dc <HAL_GPIO_DeInit+0x1ac>)
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	089b      	lsrs	r3, r3, #2
 8012326:	3302      	adds	r3, #2
 8012328:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801232c:	68bb      	ldr	r3, [r7, #8]
 801232e:	43da      	mvns	r2, r3
 8012330:	482a      	ldr	r0, [pc, #168]	; (80123dc <HAL_GPIO_DeInit+0x1ac>)
 8012332:	697b      	ldr	r3, [r7, #20]
 8012334:	089b      	lsrs	r3, r3, #2
 8012336:	400a      	ands	r2, r1
 8012338:	3302      	adds	r3, #2
 801233a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681a      	ldr	r2, [r3, #0]
 8012342:	697b      	ldr	r3, [r7, #20]
 8012344:	005b      	lsls	r3, r3, #1
 8012346:	2103      	movs	r1, #3
 8012348:	fa01 f303 	lsl.w	r3, r1, r3
 801234c:	43db      	mvns	r3, r3
 801234e:	401a      	ands	r2, r3
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012354:	697b      	ldr	r3, [r7, #20]
 8012356:	08da      	lsrs	r2, r3, #3
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	3208      	adds	r2, #8
 801235c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	f003 0307 	and.w	r3, r3, #7
 8012366:	009b      	lsls	r3, r3, #2
 8012368:	220f      	movs	r2, #15
 801236a:	fa02 f303 	lsl.w	r3, r2, r3
 801236e:	43db      	mvns	r3, r3
 8012370:	697a      	ldr	r2, [r7, #20]
 8012372:	08d2      	lsrs	r2, r2, #3
 8012374:	4019      	ands	r1, r3
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	3208      	adds	r2, #8
 801237a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	68da      	ldr	r2, [r3, #12]
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	005b      	lsls	r3, r3, #1
 8012386:	2103      	movs	r1, #3
 8012388:	fa01 f303 	lsl.w	r3, r1, r3
 801238c:	43db      	mvns	r3, r3
 801238e:	401a      	ands	r2, r3
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	685a      	ldr	r2, [r3, #4]
 8012398:	2101      	movs	r1, #1
 801239a:	697b      	ldr	r3, [r7, #20]
 801239c:	fa01 f303 	lsl.w	r3, r1, r3
 80123a0:	43db      	mvns	r3, r3
 80123a2:	401a      	ands	r2, r3
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	689a      	ldr	r2, [r3, #8]
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	005b      	lsls	r3, r3, #1
 80123b0:	2103      	movs	r1, #3
 80123b2:	fa01 f303 	lsl.w	r3, r1, r3
 80123b6:	43db      	mvns	r3, r3
 80123b8:	401a      	ands	r2, r3
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80123be:	697b      	ldr	r3, [r7, #20]
 80123c0:	3301      	adds	r3, #1
 80123c2:	617b      	str	r3, [r7, #20]
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	2b0f      	cmp	r3, #15
 80123c8:	f67f af40 	bls.w	801224c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80123cc:	bf00      	nop
 80123ce:	bf00      	nop
 80123d0:	371c      	adds	r7, #28
 80123d2:	46bd      	mov	sp, r7
 80123d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d8:	4770      	bx	lr
 80123da:	bf00      	nop
 80123dc:	40013800 	.word	0x40013800
 80123e0:	40020000 	.word	0x40020000
 80123e4:	40020400 	.word	0x40020400
 80123e8:	40020800 	.word	0x40020800
 80123ec:	40020c00 	.word	0x40020c00
 80123f0:	40021000 	.word	0x40021000
 80123f4:	40013c00 	.word	0x40013c00

080123f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80123f8:	b480      	push	{r7}
 80123fa:	b085      	sub	sp, #20
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
 8012400:	460b      	mov	r3, r1
 8012402:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	691a      	ldr	r2, [r3, #16]
 8012408:	887b      	ldrh	r3, [r7, #2]
 801240a:	4013      	ands	r3, r2
 801240c:	2b00      	cmp	r3, #0
 801240e:	d002      	beq.n	8012416 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012410:	2301      	movs	r3, #1
 8012412:	73fb      	strb	r3, [r7, #15]
 8012414:	e001      	b.n	801241a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8012416:	2300      	movs	r3, #0
 8012418:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801241a:	7bfb      	ldrb	r3, [r7, #15]
}
 801241c:	4618      	mov	r0, r3
 801241e:	3714      	adds	r7, #20
 8012420:	46bd      	mov	sp, r7
 8012422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012426:	4770      	bx	lr

08012428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012428:	b480      	push	{r7}
 801242a:	b083      	sub	sp, #12
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
 8012430:	460b      	mov	r3, r1
 8012432:	807b      	strh	r3, [r7, #2]
 8012434:	4613      	mov	r3, r2
 8012436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012438:	787b      	ldrb	r3, [r7, #1]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d003      	beq.n	8012446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801243e:	887a      	ldrh	r2, [r7, #2]
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012444:	e003      	b.n	801244e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8012446:	887b      	ldrh	r3, [r7, #2]
 8012448:	041a      	lsls	r2, r3, #16
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	619a      	str	r2, [r3, #24]
}
 801244e:	bf00      	nop
 8012450:	370c      	adds	r7, #12
 8012452:	46bd      	mov	sp, r7
 8012454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012458:	4770      	bx	lr
	...

0801245c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b084      	sub	sp, #16
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d101      	bne.n	801246e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801246a:	2301      	movs	r3, #1
 801246c:	e12b      	b.n	80126c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012474:	b2db      	uxtb	r3, r3
 8012476:	2b00      	cmp	r3, #0
 8012478:	d106      	bne.n	8012488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	2200      	movs	r2, #0
 801247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f000 f95d 	bl	8012742 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2224      	movs	r2, #36	; 0x24
 801248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	681a      	ldr	r2, [r3, #0]
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	f022 0201 	bic.w	r2, r2, #1
 801249e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	681a      	ldr	r2, [r3, #0]
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80124ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	681a      	ldr	r2, [r3, #0]
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80124be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80124c0:	f001 fc0c 	bl	8013cdc <HAL_RCC_GetPCLK1Freq>
 80124c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	685b      	ldr	r3, [r3, #4]
 80124ca:	4a81      	ldr	r2, [pc, #516]	; (80126d0 <HAL_I2C_Init+0x274>)
 80124cc:	4293      	cmp	r3, r2
 80124ce:	d807      	bhi.n	80124e0 <HAL_I2C_Init+0x84>
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	4a80      	ldr	r2, [pc, #512]	; (80126d4 <HAL_I2C_Init+0x278>)
 80124d4:	4293      	cmp	r3, r2
 80124d6:	bf94      	ite	ls
 80124d8:	2301      	movls	r3, #1
 80124da:	2300      	movhi	r3, #0
 80124dc:	b2db      	uxtb	r3, r3
 80124de:	e006      	b.n	80124ee <HAL_I2C_Init+0x92>
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	4a7d      	ldr	r2, [pc, #500]	; (80126d8 <HAL_I2C_Init+0x27c>)
 80124e4:	4293      	cmp	r3, r2
 80124e6:	bf94      	ite	ls
 80124e8:	2301      	movls	r3, #1
 80124ea:	2300      	movhi	r3, #0
 80124ec:	b2db      	uxtb	r3, r3
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d001      	beq.n	80124f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80124f2:	2301      	movs	r3, #1
 80124f4:	e0e7      	b.n	80126c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	4a78      	ldr	r2, [pc, #480]	; (80126dc <HAL_I2C_Init+0x280>)
 80124fa:	fba2 2303 	umull	r2, r3, r2, r3
 80124fe:	0c9b      	lsrs	r3, r3, #18
 8012500:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	685b      	ldr	r3, [r3, #4]
 8012508:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	68ba      	ldr	r2, [r7, #8]
 8012512:	430a      	orrs	r2, r1
 8012514:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	6a1b      	ldr	r3, [r3, #32]
 801251c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	685b      	ldr	r3, [r3, #4]
 8012524:	4a6a      	ldr	r2, [pc, #424]	; (80126d0 <HAL_I2C_Init+0x274>)
 8012526:	4293      	cmp	r3, r2
 8012528:	d802      	bhi.n	8012530 <HAL_I2C_Init+0xd4>
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	3301      	adds	r3, #1
 801252e:	e009      	b.n	8012544 <HAL_I2C_Init+0xe8>
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012536:	fb02 f303 	mul.w	r3, r2, r3
 801253a:	4a69      	ldr	r2, [pc, #420]	; (80126e0 <HAL_I2C_Init+0x284>)
 801253c:	fba2 2303 	umull	r2, r3, r2, r3
 8012540:	099b      	lsrs	r3, r3, #6
 8012542:	3301      	adds	r3, #1
 8012544:	687a      	ldr	r2, [r7, #4]
 8012546:	6812      	ldr	r2, [r2, #0]
 8012548:	430b      	orrs	r3, r1
 801254a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	69db      	ldr	r3, [r3, #28]
 8012552:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8012556:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	685b      	ldr	r3, [r3, #4]
 801255e:	495c      	ldr	r1, [pc, #368]	; (80126d0 <HAL_I2C_Init+0x274>)
 8012560:	428b      	cmp	r3, r1
 8012562:	d819      	bhi.n	8012598 <HAL_I2C_Init+0x13c>
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	1e59      	subs	r1, r3, #1
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	005b      	lsls	r3, r3, #1
 801256e:	fbb1 f3f3 	udiv	r3, r1, r3
 8012572:	1c59      	adds	r1, r3, #1
 8012574:	f640 73fc 	movw	r3, #4092	; 0xffc
 8012578:	400b      	ands	r3, r1
 801257a:	2b00      	cmp	r3, #0
 801257c:	d00a      	beq.n	8012594 <HAL_I2C_Init+0x138>
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	1e59      	subs	r1, r3, #1
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	685b      	ldr	r3, [r3, #4]
 8012586:	005b      	lsls	r3, r3, #1
 8012588:	fbb1 f3f3 	udiv	r3, r1, r3
 801258c:	3301      	adds	r3, #1
 801258e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012592:	e051      	b.n	8012638 <HAL_I2C_Init+0x1dc>
 8012594:	2304      	movs	r3, #4
 8012596:	e04f      	b.n	8012638 <HAL_I2C_Init+0x1dc>
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	689b      	ldr	r3, [r3, #8]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d111      	bne.n	80125c4 <HAL_I2C_Init+0x168>
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	1e58      	subs	r0, r3, #1
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	6859      	ldr	r1, [r3, #4]
 80125a8:	460b      	mov	r3, r1
 80125aa:	005b      	lsls	r3, r3, #1
 80125ac:	440b      	add	r3, r1
 80125ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80125b2:	3301      	adds	r3, #1
 80125b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	bf0c      	ite	eq
 80125bc:	2301      	moveq	r3, #1
 80125be:	2300      	movne	r3, #0
 80125c0:	b2db      	uxtb	r3, r3
 80125c2:	e012      	b.n	80125ea <HAL_I2C_Init+0x18e>
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	1e58      	subs	r0, r3, #1
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	6859      	ldr	r1, [r3, #4]
 80125cc:	460b      	mov	r3, r1
 80125ce:	009b      	lsls	r3, r3, #2
 80125d0:	440b      	add	r3, r1
 80125d2:	0099      	lsls	r1, r3, #2
 80125d4:	440b      	add	r3, r1
 80125d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80125da:	3301      	adds	r3, #1
 80125dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	bf0c      	ite	eq
 80125e4:	2301      	moveq	r3, #1
 80125e6:	2300      	movne	r3, #0
 80125e8:	b2db      	uxtb	r3, r3
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d001      	beq.n	80125f2 <HAL_I2C_Init+0x196>
 80125ee:	2301      	movs	r3, #1
 80125f0:	e022      	b.n	8012638 <HAL_I2C_Init+0x1dc>
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	689b      	ldr	r3, [r3, #8]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d10e      	bne.n	8012618 <HAL_I2C_Init+0x1bc>
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	1e58      	subs	r0, r3, #1
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	6859      	ldr	r1, [r3, #4]
 8012602:	460b      	mov	r3, r1
 8012604:	005b      	lsls	r3, r3, #1
 8012606:	440b      	add	r3, r1
 8012608:	fbb0 f3f3 	udiv	r3, r0, r3
 801260c:	3301      	adds	r3, #1
 801260e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012616:	e00f      	b.n	8012638 <HAL_I2C_Init+0x1dc>
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	1e58      	subs	r0, r3, #1
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6859      	ldr	r1, [r3, #4]
 8012620:	460b      	mov	r3, r1
 8012622:	009b      	lsls	r3, r3, #2
 8012624:	440b      	add	r3, r1
 8012626:	0099      	lsls	r1, r3, #2
 8012628:	440b      	add	r3, r1
 801262a:	fbb0 f3f3 	udiv	r3, r0, r3
 801262e:	3301      	adds	r3, #1
 8012630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012634:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012638:	6879      	ldr	r1, [r7, #4]
 801263a:	6809      	ldr	r1, [r1, #0]
 801263c:	4313      	orrs	r3, r2
 801263e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	69da      	ldr	r2, [r3, #28]
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6a1b      	ldr	r3, [r3, #32]
 8012652:	431a      	orrs	r2, r3
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	430a      	orrs	r2, r1
 801265a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	689b      	ldr	r3, [r3, #8]
 8012662:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8012666:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801266a:	687a      	ldr	r2, [r7, #4]
 801266c:	6911      	ldr	r1, [r2, #16]
 801266e:	687a      	ldr	r2, [r7, #4]
 8012670:	68d2      	ldr	r2, [r2, #12]
 8012672:	4311      	orrs	r1, r2
 8012674:	687a      	ldr	r2, [r7, #4]
 8012676:	6812      	ldr	r2, [r2, #0]
 8012678:	430b      	orrs	r3, r1
 801267a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	68db      	ldr	r3, [r3, #12]
 8012682:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	695a      	ldr	r2, [r3, #20]
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	699b      	ldr	r3, [r3, #24]
 801268e:	431a      	orrs	r2, r3
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	430a      	orrs	r2, r1
 8012696:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	681a      	ldr	r2, [r3, #0]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	f042 0201 	orr.w	r2, r2, #1
 80126a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	2200      	movs	r2, #0
 80126ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	2220      	movs	r2, #32
 80126b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2200      	movs	r2, #0
 80126ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2200      	movs	r2, #0
 80126c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80126c4:	2300      	movs	r3, #0
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	3710      	adds	r7, #16
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}
 80126ce:	bf00      	nop
 80126d0:	000186a0 	.word	0x000186a0
 80126d4:	001e847f 	.word	0x001e847f
 80126d8:	003d08ff 	.word	0x003d08ff
 80126dc:	431bde83 	.word	0x431bde83
 80126e0:	10624dd3 	.word	0x10624dd3

080126e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b082      	sub	sp, #8
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d101      	bne.n	80126f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80126f2:	2301      	movs	r3, #1
 80126f4:	e021      	b.n	801273a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2224      	movs	r2, #36	; 0x24
 80126fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	681a      	ldr	r2, [r3, #0]
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	f022 0201 	bic.w	r2, r2, #1
 801270c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	f000 f821 	bl	8012756 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	2200      	movs	r2, #0
 8012718:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2200      	movs	r2, #0
 801271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	2200      	movs	r2, #0
 8012726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	2200      	movs	r2, #0
 801272c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	2200      	movs	r2, #0
 8012734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012738:	2300      	movs	r3, #0
}
 801273a:	4618      	mov	r0, r3
 801273c:	3708      	adds	r7, #8
 801273e:	46bd      	mov	sp, r7
 8012740:	bd80      	pop	{r7, pc}

08012742 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8012742:	b480      	push	{r7}
 8012744:	b083      	sub	sp, #12
 8012746:	af00      	add	r7, sp, #0
 8012748:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 801274a:	bf00      	nop
 801274c:	370c      	adds	r7, #12
 801274e:	46bd      	mov	sp, r7
 8012750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012754:	4770      	bx	lr

08012756 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8012756:	b480      	push	{r7}
 8012758:	b083      	sub	sp, #12
 801275a:	af00      	add	r7, sp, #0
 801275c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 801275e:	bf00      	nop
 8012760:	370c      	adds	r7, #12
 8012762:	46bd      	mov	sp, r7
 8012764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012768:	4770      	bx	lr
	...

0801276c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b088      	sub	sp, #32
 8012770:	af02      	add	r7, sp, #8
 8012772:	60f8      	str	r0, [r7, #12]
 8012774:	607a      	str	r2, [r7, #4]
 8012776:	461a      	mov	r2, r3
 8012778:	460b      	mov	r3, r1
 801277a:	817b      	strh	r3, [r7, #10]
 801277c:	4613      	mov	r3, r2
 801277e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8012780:	f7ff fabc 	bl	8011cfc <HAL_GetTick>
 8012784:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801278c:	b2db      	uxtb	r3, r3
 801278e:	2b20      	cmp	r3, #32
 8012790:	f040 80e0 	bne.w	8012954 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8012794:	697b      	ldr	r3, [r7, #20]
 8012796:	9300      	str	r3, [sp, #0]
 8012798:	2319      	movs	r3, #25
 801279a:	2201      	movs	r2, #1
 801279c:	4970      	ldr	r1, [pc, #448]	; (8012960 <HAL_I2C_Master_Transmit+0x1f4>)
 801279e:	68f8      	ldr	r0, [r7, #12]
 80127a0:	f000 fc72 	bl	8013088 <I2C_WaitOnFlagUntilTimeout>
 80127a4:	4603      	mov	r3, r0
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d001      	beq.n	80127ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80127aa:	2302      	movs	r3, #2
 80127ac:	e0d3      	b.n	8012956 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80127b4:	2b01      	cmp	r3, #1
 80127b6:	d101      	bne.n	80127bc <HAL_I2C_Master_Transmit+0x50>
 80127b8:	2302      	movs	r3, #2
 80127ba:	e0cc      	b.n	8012956 <HAL_I2C_Master_Transmit+0x1ea>
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	2201      	movs	r2, #1
 80127c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	f003 0301 	and.w	r3, r3, #1
 80127ce:	2b01      	cmp	r3, #1
 80127d0:	d007      	beq.n	80127e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	681a      	ldr	r2, [r3, #0]
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	f042 0201 	orr.w	r2, r2, #1
 80127e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	681a      	ldr	r2, [r3, #0]
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80127f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	2221      	movs	r2, #33	; 0x21
 80127f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	2210      	movs	r2, #16
 80127fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	2200      	movs	r2, #0
 8012806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	687a      	ldr	r2, [r7, #4]
 801280c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	893a      	ldrh	r2, [r7, #8]
 8012812:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012818:	b29a      	uxth	r2, r3
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	4a50      	ldr	r2, [pc, #320]	; (8012964 <HAL_I2C_Master_Transmit+0x1f8>)
 8012822:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8012824:	8979      	ldrh	r1, [r7, #10]
 8012826:	697b      	ldr	r3, [r7, #20]
 8012828:	6a3a      	ldr	r2, [r7, #32]
 801282a:	68f8      	ldr	r0, [r7, #12]
 801282c:	f000 fadc 	bl	8012de8 <I2C_MasterRequestWrite>
 8012830:	4603      	mov	r3, r0
 8012832:	2b00      	cmp	r3, #0
 8012834:	d001      	beq.n	801283a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8012836:	2301      	movs	r3, #1
 8012838:	e08d      	b.n	8012956 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801283a:	2300      	movs	r3, #0
 801283c:	613b      	str	r3, [r7, #16]
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	695b      	ldr	r3, [r3, #20]
 8012844:	613b      	str	r3, [r7, #16]
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	699b      	ldr	r3, [r3, #24]
 801284c:	613b      	str	r3, [r7, #16]
 801284e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8012850:	e066      	b.n	8012920 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012852:	697a      	ldr	r2, [r7, #20]
 8012854:	6a39      	ldr	r1, [r7, #32]
 8012856:	68f8      	ldr	r0, [r7, #12]
 8012858:	f000 fcec 	bl	8013234 <I2C_WaitOnTXEFlagUntilTimeout>
 801285c:	4603      	mov	r3, r0
 801285e:	2b00      	cmp	r3, #0
 8012860:	d00d      	beq.n	801287e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012866:	2b04      	cmp	r3, #4
 8012868:	d107      	bne.n	801287a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	681a      	ldr	r2, [r3, #0]
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012878:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801287a:	2301      	movs	r3, #1
 801287c:	e06b      	b.n	8012956 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012882:	781a      	ldrb	r2, [r3, #0]
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801288e:	1c5a      	adds	r2, r3, #1
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012898:	b29b      	uxth	r3, r3
 801289a:	3b01      	subs	r3, #1
 801289c:	b29a      	uxth	r2, r3
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80128a6:	3b01      	subs	r3, #1
 80128a8:	b29a      	uxth	r2, r3
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	695b      	ldr	r3, [r3, #20]
 80128b4:	f003 0304 	and.w	r3, r3, #4
 80128b8:	2b04      	cmp	r3, #4
 80128ba:	d11b      	bne.n	80128f4 <HAL_I2C_Master_Transmit+0x188>
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d017      	beq.n	80128f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128c8:	781a      	ldrb	r2, [r3, #0]
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128d4:	1c5a      	adds	r2, r3, #1
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80128de:	b29b      	uxth	r3, r3
 80128e0:	3b01      	subs	r3, #1
 80128e2:	b29a      	uxth	r2, r3
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80128ec:	3b01      	subs	r3, #1
 80128ee:	b29a      	uxth	r2, r3
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80128f4:	697a      	ldr	r2, [r7, #20]
 80128f6:	6a39      	ldr	r1, [r7, #32]
 80128f8:	68f8      	ldr	r0, [r7, #12]
 80128fa:	f000 fcdc 	bl	80132b6 <I2C_WaitOnBTFFlagUntilTimeout>
 80128fe:	4603      	mov	r3, r0
 8012900:	2b00      	cmp	r3, #0
 8012902:	d00d      	beq.n	8012920 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012908:	2b04      	cmp	r3, #4
 801290a:	d107      	bne.n	801291c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	681a      	ldr	r2, [r3, #0]
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801291a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801291c:	2301      	movs	r3, #1
 801291e:	e01a      	b.n	8012956 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012924:	2b00      	cmp	r3, #0
 8012926:	d194      	bne.n	8012852 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	681a      	ldr	r2, [r3, #0]
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	2220      	movs	r2, #32
 801293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	2200      	movs	r2, #0
 8012944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	2200      	movs	r2, #0
 801294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8012950:	2300      	movs	r3, #0
 8012952:	e000      	b.n	8012956 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8012954:	2302      	movs	r3, #2
  }
}
 8012956:	4618      	mov	r0, r3
 8012958:	3718      	adds	r7, #24
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
 801295e:	bf00      	nop
 8012960:	00100002 	.word	0x00100002
 8012964:	ffff0000 	.word	0xffff0000

08012968 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b08c      	sub	sp, #48	; 0x30
 801296c:	af02      	add	r7, sp, #8
 801296e:	60f8      	str	r0, [r7, #12]
 8012970:	607a      	str	r2, [r7, #4]
 8012972:	461a      	mov	r2, r3
 8012974:	460b      	mov	r3, r1
 8012976:	817b      	strh	r3, [r7, #10]
 8012978:	4613      	mov	r3, r2
 801297a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801297c:	f7ff f9be 	bl	8011cfc <HAL_GetTick>
 8012980:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012988:	b2db      	uxtb	r3, r3
 801298a:	2b20      	cmp	r3, #32
 801298c:	f040 820b 	bne.w	8012da6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8012990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012992:	9300      	str	r3, [sp, #0]
 8012994:	2319      	movs	r3, #25
 8012996:	2201      	movs	r2, #1
 8012998:	497c      	ldr	r1, [pc, #496]	; (8012b8c <HAL_I2C_Master_Receive+0x224>)
 801299a:	68f8      	ldr	r0, [r7, #12]
 801299c:	f000 fb74 	bl	8013088 <I2C_WaitOnFlagUntilTimeout>
 80129a0:	4603      	mov	r3, r0
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d001      	beq.n	80129aa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80129a6:	2302      	movs	r3, #2
 80129a8:	e1fe      	b.n	8012da8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80129b0:	2b01      	cmp	r3, #1
 80129b2:	d101      	bne.n	80129b8 <HAL_I2C_Master_Receive+0x50>
 80129b4:	2302      	movs	r3, #2
 80129b6:	e1f7      	b.n	8012da8 <HAL_I2C_Master_Receive+0x440>
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	2201      	movs	r2, #1
 80129bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	f003 0301 	and.w	r3, r3, #1
 80129ca:	2b01      	cmp	r3, #1
 80129cc:	d007      	beq.n	80129de <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	681a      	ldr	r2, [r3, #0]
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	f042 0201 	orr.w	r2, r2, #1
 80129dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	681a      	ldr	r2, [r3, #0]
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80129ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	2222      	movs	r2, #34	; 0x22
 80129f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	2210      	movs	r2, #16
 80129fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	2200      	movs	r2, #0
 8012a02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	687a      	ldr	r2, [r7, #4]
 8012a08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	893a      	ldrh	r2, [r7, #8]
 8012a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012a14:	b29a      	uxth	r2, r3
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	4a5c      	ldr	r2, [pc, #368]	; (8012b90 <HAL_I2C_Master_Receive+0x228>)
 8012a1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8012a20:	8979      	ldrh	r1, [r7, #10]
 8012a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a26:	68f8      	ldr	r0, [r7, #12]
 8012a28:	f000 fa60 	bl	8012eec <I2C_MasterRequestRead>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d001      	beq.n	8012a36 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8012a32:	2301      	movs	r3, #1
 8012a34:	e1b8      	b.n	8012da8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d113      	bne.n	8012a66 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012a3e:	2300      	movs	r3, #0
 8012a40:	623b      	str	r3, [r7, #32]
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	695b      	ldr	r3, [r3, #20]
 8012a48:	623b      	str	r3, [r7, #32]
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	699b      	ldr	r3, [r3, #24]
 8012a50:	623b      	str	r3, [r7, #32]
 8012a52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	681a      	ldr	r2, [r3, #0]
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012a62:	601a      	str	r2, [r3, #0]
 8012a64:	e18c      	b.n	8012d80 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a6a:	2b01      	cmp	r3, #1
 8012a6c:	d11b      	bne.n	8012aa6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	681a      	ldr	r2, [r3, #0]
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012a7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012a7e:	2300      	movs	r3, #0
 8012a80:	61fb      	str	r3, [r7, #28]
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	695b      	ldr	r3, [r3, #20]
 8012a88:	61fb      	str	r3, [r7, #28]
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	699b      	ldr	r3, [r3, #24]
 8012a90:	61fb      	str	r3, [r7, #28]
 8012a92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	681a      	ldr	r2, [r3, #0]
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012aa2:	601a      	str	r2, [r3, #0]
 8012aa4:	e16c      	b.n	8012d80 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012aaa:	2b02      	cmp	r3, #2
 8012aac:	d11b      	bne.n	8012ae6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	681a      	ldr	r2, [r3, #0]
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012abc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	681a      	ldr	r2, [r3, #0]
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012acc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012ace:	2300      	movs	r3, #0
 8012ad0:	61bb      	str	r3, [r7, #24]
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	695b      	ldr	r3, [r3, #20]
 8012ad8:	61bb      	str	r3, [r7, #24]
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	699b      	ldr	r3, [r3, #24]
 8012ae0:	61bb      	str	r3, [r7, #24]
 8012ae2:	69bb      	ldr	r3, [r7, #24]
 8012ae4:	e14c      	b.n	8012d80 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	681a      	ldr	r2, [r3, #0]
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012af4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012af6:	2300      	movs	r3, #0
 8012af8:	617b      	str	r3, [r7, #20]
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	695b      	ldr	r3, [r3, #20]
 8012b00:	617b      	str	r3, [r7, #20]
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	699b      	ldr	r3, [r3, #24]
 8012b08:	617b      	str	r3, [r7, #20]
 8012b0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8012b0c:	e138      	b.n	8012d80 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b12:	2b03      	cmp	r3, #3
 8012b14:	f200 80f1 	bhi.w	8012cfa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b1c:	2b01      	cmp	r3, #1
 8012b1e:	d123      	bne.n	8012b68 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012b24:	68f8      	ldr	r0, [r7, #12]
 8012b26:	f000 fc07 	bl	8013338 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d001      	beq.n	8012b34 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8012b30:	2301      	movs	r3, #1
 8012b32:	e139      	b.n	8012da8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	691a      	ldr	r2, [r3, #16]
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b3e:	b2d2      	uxtb	r2, r2
 8012b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b46:	1c5a      	adds	r2, r3, #1
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b50:	3b01      	subs	r3, #1
 8012b52:	b29a      	uxth	r2, r3
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012b5c:	b29b      	uxth	r3, r3
 8012b5e:	3b01      	subs	r3, #1
 8012b60:	b29a      	uxth	r2, r3
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012b66:	e10b      	b.n	8012d80 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b6c:	2b02      	cmp	r3, #2
 8012b6e:	d14e      	bne.n	8012c0e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b72:	9300      	str	r3, [sp, #0]
 8012b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b76:	2200      	movs	r2, #0
 8012b78:	4906      	ldr	r1, [pc, #24]	; (8012b94 <HAL_I2C_Master_Receive+0x22c>)
 8012b7a:	68f8      	ldr	r0, [r7, #12]
 8012b7c:	f000 fa84 	bl	8013088 <I2C_WaitOnFlagUntilTimeout>
 8012b80:	4603      	mov	r3, r0
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d008      	beq.n	8012b98 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8012b86:	2301      	movs	r3, #1
 8012b88:	e10e      	b.n	8012da8 <HAL_I2C_Master_Receive+0x440>
 8012b8a:	bf00      	nop
 8012b8c:	00100002 	.word	0x00100002
 8012b90:	ffff0000 	.word	0xffff0000
 8012b94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	681a      	ldr	r2, [r3, #0]
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012ba6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	691a      	ldr	r2, [r3, #16]
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bb2:	b2d2      	uxtb	r2, r2
 8012bb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bba:	1c5a      	adds	r2, r3, #1
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012bc4:	3b01      	subs	r3, #1
 8012bc6:	b29a      	uxth	r2, r3
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012bd0:	b29b      	uxth	r3, r3
 8012bd2:	3b01      	subs	r3, #1
 8012bd4:	b29a      	uxth	r2, r3
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	691a      	ldr	r2, [r3, #16]
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012be4:	b2d2      	uxtb	r2, r2
 8012be6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bec:	1c5a      	adds	r2, r3, #1
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012bf6:	3b01      	subs	r3, #1
 8012bf8:	b29a      	uxth	r2, r3
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012c02:	b29b      	uxth	r3, r3
 8012c04:	3b01      	subs	r3, #1
 8012c06:	b29a      	uxth	r2, r3
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012c0c:	e0b8      	b.n	8012d80 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c10:	9300      	str	r3, [sp, #0]
 8012c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c14:	2200      	movs	r2, #0
 8012c16:	4966      	ldr	r1, [pc, #408]	; (8012db0 <HAL_I2C_Master_Receive+0x448>)
 8012c18:	68f8      	ldr	r0, [r7, #12]
 8012c1a:	f000 fa35 	bl	8013088 <I2C_WaitOnFlagUntilTimeout>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d001      	beq.n	8012c28 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8012c24:	2301      	movs	r3, #1
 8012c26:	e0bf      	b.n	8012da8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	681a      	ldr	r2, [r3, #0]
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012c36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	691a      	ldr	r2, [r3, #16]
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c42:	b2d2      	uxtb	r2, r2
 8012c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c4a:	1c5a      	adds	r2, r3, #1
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c54:	3b01      	subs	r3, #1
 8012c56:	b29a      	uxth	r2, r3
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012c60:	b29b      	uxth	r3, r3
 8012c62:	3b01      	subs	r3, #1
 8012c64:	b29a      	uxth	r2, r3
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8012c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c6c:	9300      	str	r3, [sp, #0]
 8012c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c70:	2200      	movs	r2, #0
 8012c72:	494f      	ldr	r1, [pc, #316]	; (8012db0 <HAL_I2C_Master_Receive+0x448>)
 8012c74:	68f8      	ldr	r0, [r7, #12]
 8012c76:	f000 fa07 	bl	8013088 <I2C_WaitOnFlagUntilTimeout>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d001      	beq.n	8012c84 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8012c80:	2301      	movs	r3, #1
 8012c82:	e091      	b.n	8012da8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	681a      	ldr	r2, [r3, #0]
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012c92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	691a      	ldr	r2, [r3, #16]
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c9e:	b2d2      	uxtb	r2, r2
 8012ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ca6:	1c5a      	adds	r2, r3, #1
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012cb0:	3b01      	subs	r3, #1
 8012cb2:	b29a      	uxth	r2, r3
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012cbc:	b29b      	uxth	r3, r3
 8012cbe:	3b01      	subs	r3, #1
 8012cc0:	b29a      	uxth	r2, r3
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	691a      	ldr	r2, [r3, #16]
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cd0:	b2d2      	uxtb	r2, r2
 8012cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cd8:	1c5a      	adds	r2, r3, #1
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ce2:	3b01      	subs	r3, #1
 8012ce4:	b29a      	uxth	r2, r3
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012cee:	b29b      	uxth	r3, r3
 8012cf0:	3b01      	subs	r3, #1
 8012cf2:	b29a      	uxth	r2, r3
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012cf8:	e042      	b.n	8012d80 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012cfe:	68f8      	ldr	r0, [r7, #12]
 8012d00:	f000 fb1a 	bl	8013338 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012d04:	4603      	mov	r3, r0
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d001      	beq.n	8012d0e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	e04c      	b.n	8012da8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	691a      	ldr	r2, [r3, #16]
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d18:	b2d2      	uxtb	r2, r2
 8012d1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d20:	1c5a      	adds	r2, r3, #1
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d2a:	3b01      	subs	r3, #1
 8012d2c:	b29a      	uxth	r2, r3
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d36:	b29b      	uxth	r3, r3
 8012d38:	3b01      	subs	r3, #1
 8012d3a:	b29a      	uxth	r2, r3
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	695b      	ldr	r3, [r3, #20]
 8012d46:	f003 0304 	and.w	r3, r3, #4
 8012d4a:	2b04      	cmp	r3, #4
 8012d4c:	d118      	bne.n	8012d80 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	691a      	ldr	r2, [r3, #16]
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d58:	b2d2      	uxtb	r2, r2
 8012d5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d60:	1c5a      	adds	r2, r3, #1
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d6a:	3b01      	subs	r3, #1
 8012d6c:	b29a      	uxth	r2, r3
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d76:	b29b      	uxth	r3, r3
 8012d78:	3b01      	subs	r3, #1
 8012d7a:	b29a      	uxth	r2, r3
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	f47f aec2 	bne.w	8012b0e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	2220      	movs	r2, #32
 8012d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	2200      	movs	r2, #0
 8012d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8012da2:	2300      	movs	r3, #0
 8012da4:	e000      	b.n	8012da8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8012da6:	2302      	movs	r3, #2
  }
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3728      	adds	r7, #40	; 0x28
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}
 8012db0:	00010004 	.word	0x00010004

08012db4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8012db4:	b480      	push	{r7}
 8012db6:	b083      	sub	sp, #12
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012dc2:	b2db      	uxtb	r3, r3
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	370c      	adds	r7, #12
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dce:	4770      	bx	lr

08012dd0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8012dd0:	b480      	push	{r7}
 8012dd2:	b083      	sub	sp, #12
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8012ddc:	4618      	mov	r0, r3
 8012dde:	370c      	adds	r7, #12
 8012de0:	46bd      	mov	sp, r7
 8012de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de6:	4770      	bx	lr

08012de8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b088      	sub	sp, #32
 8012dec:	af02      	add	r7, sp, #8
 8012dee:	60f8      	str	r0, [r7, #12]
 8012df0:	607a      	str	r2, [r7, #4]
 8012df2:	603b      	str	r3, [r7, #0]
 8012df4:	460b      	mov	r3, r1
 8012df6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dfc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8012dfe:	697b      	ldr	r3, [r7, #20]
 8012e00:	2b08      	cmp	r3, #8
 8012e02:	d006      	beq.n	8012e12 <I2C_MasterRequestWrite+0x2a>
 8012e04:	697b      	ldr	r3, [r7, #20]
 8012e06:	2b01      	cmp	r3, #1
 8012e08:	d003      	beq.n	8012e12 <I2C_MasterRequestWrite+0x2a>
 8012e0a:	697b      	ldr	r3, [r7, #20]
 8012e0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012e10:	d108      	bne.n	8012e24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	681a      	ldr	r2, [r3, #0]
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012e20:	601a      	str	r2, [r3, #0]
 8012e22:	e00b      	b.n	8012e3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e28:	2b12      	cmp	r3, #18
 8012e2a:	d107      	bne.n	8012e3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	681a      	ldr	r2, [r3, #0]
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012e3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012e3c:	683b      	ldr	r3, [r7, #0]
 8012e3e:	9300      	str	r3, [sp, #0]
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	2200      	movs	r2, #0
 8012e44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012e48:	68f8      	ldr	r0, [r7, #12]
 8012e4a:	f000 f91d 	bl	8013088 <I2C_WaitOnFlagUntilTimeout>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d00d      	beq.n	8012e70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e62:	d103      	bne.n	8012e6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012e6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8012e6c:	2303      	movs	r3, #3
 8012e6e:	e035      	b.n	8012edc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	691b      	ldr	r3, [r3, #16]
 8012e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012e78:	d108      	bne.n	8012e8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8012e7a:	897b      	ldrh	r3, [r7, #10]
 8012e7c:	b2db      	uxtb	r3, r3
 8012e7e:	461a      	mov	r2, r3
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8012e88:	611a      	str	r2, [r3, #16]
 8012e8a:	e01b      	b.n	8012ec4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8012e8c:	897b      	ldrh	r3, [r7, #10]
 8012e8e:	11db      	asrs	r3, r3, #7
 8012e90:	b2db      	uxtb	r3, r3
 8012e92:	f003 0306 	and.w	r3, r3, #6
 8012e96:	b2db      	uxtb	r3, r3
 8012e98:	f063 030f 	orn	r3, r3, #15
 8012e9c:	b2da      	uxtb	r2, r3
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	687a      	ldr	r2, [r7, #4]
 8012ea8:	490e      	ldr	r1, [pc, #56]	; (8012ee4 <I2C_MasterRequestWrite+0xfc>)
 8012eaa:	68f8      	ldr	r0, [r7, #12]
 8012eac:	f000 f943 	bl	8013136 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d001      	beq.n	8012eba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	e010      	b.n	8012edc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8012eba:	897b      	ldrh	r3, [r7, #10]
 8012ebc:	b2da      	uxtb	r2, r3
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	687a      	ldr	r2, [r7, #4]
 8012ec8:	4907      	ldr	r1, [pc, #28]	; (8012ee8 <I2C_MasterRequestWrite+0x100>)
 8012eca:	68f8      	ldr	r0, [r7, #12]
 8012ecc:	f000 f933 	bl	8013136 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d001      	beq.n	8012eda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8012ed6:	2301      	movs	r3, #1
 8012ed8:	e000      	b.n	8012edc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8012eda:	2300      	movs	r3, #0
}
 8012edc:	4618      	mov	r0, r3
 8012ede:	3718      	adds	r7, #24
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd80      	pop	{r7, pc}
 8012ee4:	00010008 	.word	0x00010008
 8012ee8:	00010002 	.word	0x00010002

08012eec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b088      	sub	sp, #32
 8012ef0:	af02      	add	r7, sp, #8
 8012ef2:	60f8      	str	r0, [r7, #12]
 8012ef4:	607a      	str	r2, [r7, #4]
 8012ef6:	603b      	str	r3, [r7, #0]
 8012ef8:	460b      	mov	r3, r1
 8012efa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f00:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	681a      	ldr	r2, [r3, #0]
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012f10:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	2b08      	cmp	r3, #8
 8012f16:	d006      	beq.n	8012f26 <I2C_MasterRequestRead+0x3a>
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	2b01      	cmp	r3, #1
 8012f1c:	d003      	beq.n	8012f26 <I2C_MasterRequestRead+0x3a>
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012f24:	d108      	bne.n	8012f38 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	681a      	ldr	r2, [r3, #0]
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012f34:	601a      	str	r2, [r3, #0]
 8012f36:	e00b      	b.n	8012f50 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f3c:	2b11      	cmp	r3, #17
 8012f3e:	d107      	bne.n	8012f50 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	681a      	ldr	r2, [r3, #0]
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012f4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	9300      	str	r3, [sp, #0]
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	2200      	movs	r2, #0
 8012f58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012f5c:	68f8      	ldr	r0, [r7, #12]
 8012f5e:	f000 f893 	bl	8013088 <I2C_WaitOnFlagUntilTimeout>
 8012f62:	4603      	mov	r3, r0
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d00d      	beq.n	8012f84 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f76:	d103      	bne.n	8012f80 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8012f80:	2303      	movs	r3, #3
 8012f82:	e079      	b.n	8013078 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	691b      	ldr	r3, [r3, #16]
 8012f88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012f8c:	d108      	bne.n	8012fa0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8012f8e:	897b      	ldrh	r3, [r7, #10]
 8012f90:	b2db      	uxtb	r3, r3
 8012f92:	f043 0301 	orr.w	r3, r3, #1
 8012f96:	b2da      	uxtb	r2, r3
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	611a      	str	r2, [r3, #16]
 8012f9e:	e05f      	b.n	8013060 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8012fa0:	897b      	ldrh	r3, [r7, #10]
 8012fa2:	11db      	asrs	r3, r3, #7
 8012fa4:	b2db      	uxtb	r3, r3
 8012fa6:	f003 0306 	and.w	r3, r3, #6
 8012faa:	b2db      	uxtb	r3, r3
 8012fac:	f063 030f 	orn	r3, r3, #15
 8012fb0:	b2da      	uxtb	r2, r3
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8012fb8:	683b      	ldr	r3, [r7, #0]
 8012fba:	687a      	ldr	r2, [r7, #4]
 8012fbc:	4930      	ldr	r1, [pc, #192]	; (8013080 <I2C_MasterRequestRead+0x194>)
 8012fbe:	68f8      	ldr	r0, [r7, #12]
 8012fc0:	f000 f8b9 	bl	8013136 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d001      	beq.n	8012fce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8012fca:	2301      	movs	r3, #1
 8012fcc:	e054      	b.n	8013078 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8012fce:	897b      	ldrh	r3, [r7, #10]
 8012fd0:	b2da      	uxtb	r2, r3
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	687a      	ldr	r2, [r7, #4]
 8012fdc:	4929      	ldr	r1, [pc, #164]	; (8013084 <I2C_MasterRequestRead+0x198>)
 8012fde:	68f8      	ldr	r0, [r7, #12]
 8012fe0:	f000 f8a9 	bl	8013136 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d001      	beq.n	8012fee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8012fea:	2301      	movs	r3, #1
 8012fec:	e044      	b.n	8013078 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012fee:	2300      	movs	r3, #0
 8012ff0:	613b      	str	r3, [r7, #16]
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	695b      	ldr	r3, [r3, #20]
 8012ff8:	613b      	str	r3, [r7, #16]
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	699b      	ldr	r3, [r3, #24]
 8013000:	613b      	str	r3, [r7, #16]
 8013002:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	681a      	ldr	r2, [r3, #0]
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013012:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	9300      	str	r3, [sp, #0]
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	2200      	movs	r2, #0
 801301c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013020:	68f8      	ldr	r0, [r7, #12]
 8013022:	f000 f831 	bl	8013088 <I2C_WaitOnFlagUntilTimeout>
 8013026:	4603      	mov	r3, r0
 8013028:	2b00      	cmp	r3, #0
 801302a:	d00d      	beq.n	8013048 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801303a:	d103      	bne.n	8013044 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013042:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8013044:	2303      	movs	r3, #3
 8013046:	e017      	b.n	8013078 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8013048:	897b      	ldrh	r3, [r7, #10]
 801304a:	11db      	asrs	r3, r3, #7
 801304c:	b2db      	uxtb	r3, r3
 801304e:	f003 0306 	and.w	r3, r3, #6
 8013052:	b2db      	uxtb	r3, r3
 8013054:	f063 030e 	orn	r3, r3, #14
 8013058:	b2da      	uxtb	r2, r3
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013060:	683b      	ldr	r3, [r7, #0]
 8013062:	687a      	ldr	r2, [r7, #4]
 8013064:	4907      	ldr	r1, [pc, #28]	; (8013084 <I2C_MasterRequestRead+0x198>)
 8013066:	68f8      	ldr	r0, [r7, #12]
 8013068:	f000 f865 	bl	8013136 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801306c:	4603      	mov	r3, r0
 801306e:	2b00      	cmp	r3, #0
 8013070:	d001      	beq.n	8013076 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8013072:	2301      	movs	r3, #1
 8013074:	e000      	b.n	8013078 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8013076:	2300      	movs	r3, #0
}
 8013078:	4618      	mov	r0, r3
 801307a:	3718      	adds	r7, #24
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}
 8013080:	00010008 	.word	0x00010008
 8013084:	00010002 	.word	0x00010002

08013088 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b084      	sub	sp, #16
 801308c:	af00      	add	r7, sp, #0
 801308e:	60f8      	str	r0, [r7, #12]
 8013090:	60b9      	str	r1, [r7, #8]
 8013092:	603b      	str	r3, [r7, #0]
 8013094:	4613      	mov	r3, r2
 8013096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8013098:	e025      	b.n	80130e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130a0:	d021      	beq.n	80130e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80130a2:	f7fe fe2b 	bl	8011cfc <HAL_GetTick>
 80130a6:	4602      	mov	r2, r0
 80130a8:	69bb      	ldr	r3, [r7, #24]
 80130aa:	1ad3      	subs	r3, r2, r3
 80130ac:	683a      	ldr	r2, [r7, #0]
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d302      	bcc.n	80130b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d116      	bne.n	80130e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	2200      	movs	r2, #0
 80130bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	2220      	movs	r2, #32
 80130c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	2200      	movs	r2, #0
 80130ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130d2:	f043 0220 	orr.w	r2, r3, #32
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	2200      	movs	r2, #0
 80130de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80130e2:	2301      	movs	r3, #1
 80130e4:	e023      	b.n	801312e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80130e6:	68bb      	ldr	r3, [r7, #8]
 80130e8:	0c1b      	lsrs	r3, r3, #16
 80130ea:	b2db      	uxtb	r3, r3
 80130ec:	2b01      	cmp	r3, #1
 80130ee:	d10d      	bne.n	801310c <I2C_WaitOnFlagUntilTimeout+0x84>
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	695b      	ldr	r3, [r3, #20]
 80130f6:	43da      	mvns	r2, r3
 80130f8:	68bb      	ldr	r3, [r7, #8]
 80130fa:	4013      	ands	r3, r2
 80130fc:	b29b      	uxth	r3, r3
 80130fe:	2b00      	cmp	r3, #0
 8013100:	bf0c      	ite	eq
 8013102:	2301      	moveq	r3, #1
 8013104:	2300      	movne	r3, #0
 8013106:	b2db      	uxtb	r3, r3
 8013108:	461a      	mov	r2, r3
 801310a:	e00c      	b.n	8013126 <I2C_WaitOnFlagUntilTimeout+0x9e>
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	699b      	ldr	r3, [r3, #24]
 8013112:	43da      	mvns	r2, r3
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	4013      	ands	r3, r2
 8013118:	b29b      	uxth	r3, r3
 801311a:	2b00      	cmp	r3, #0
 801311c:	bf0c      	ite	eq
 801311e:	2301      	moveq	r3, #1
 8013120:	2300      	movne	r3, #0
 8013122:	b2db      	uxtb	r3, r3
 8013124:	461a      	mov	r2, r3
 8013126:	79fb      	ldrb	r3, [r7, #7]
 8013128:	429a      	cmp	r2, r3
 801312a:	d0b6      	beq.n	801309a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801312c:	2300      	movs	r3, #0
}
 801312e:	4618      	mov	r0, r3
 8013130:	3710      	adds	r7, #16
 8013132:	46bd      	mov	sp, r7
 8013134:	bd80      	pop	{r7, pc}

08013136 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8013136:	b580      	push	{r7, lr}
 8013138:	b084      	sub	sp, #16
 801313a:	af00      	add	r7, sp, #0
 801313c:	60f8      	str	r0, [r7, #12]
 801313e:	60b9      	str	r1, [r7, #8]
 8013140:	607a      	str	r2, [r7, #4]
 8013142:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8013144:	e051      	b.n	80131ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	695b      	ldr	r3, [r3, #20]
 801314c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013154:	d123      	bne.n	801319e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	681a      	ldr	r2, [r3, #0]
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013164:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801316e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	2200      	movs	r2, #0
 8013174:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	2220      	movs	r2, #32
 801317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	2200      	movs	r2, #0
 8013182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801318a:	f043 0204 	orr.w	r2, r3, #4
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	2200      	movs	r2, #0
 8013196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801319a:	2301      	movs	r3, #1
 801319c:	e046      	b.n	801322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131a4:	d021      	beq.n	80131ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80131a6:	f7fe fda9 	bl	8011cfc <HAL_GetTick>
 80131aa:	4602      	mov	r2, r0
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	1ad3      	subs	r3, r2, r3
 80131b0:	687a      	ldr	r2, [r7, #4]
 80131b2:	429a      	cmp	r2, r3
 80131b4:	d302      	bcc.n	80131bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d116      	bne.n	80131ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	2200      	movs	r2, #0
 80131c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	2220      	movs	r2, #32
 80131c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	2200      	movs	r2, #0
 80131ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131d6:	f043 0220 	orr.w	r2, r3, #32
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	2200      	movs	r2, #0
 80131e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80131e6:	2301      	movs	r3, #1
 80131e8:	e020      	b.n	801322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	0c1b      	lsrs	r3, r3, #16
 80131ee:	b2db      	uxtb	r3, r3
 80131f0:	2b01      	cmp	r3, #1
 80131f2:	d10c      	bne.n	801320e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	695b      	ldr	r3, [r3, #20]
 80131fa:	43da      	mvns	r2, r3
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	4013      	ands	r3, r2
 8013200:	b29b      	uxth	r3, r3
 8013202:	2b00      	cmp	r3, #0
 8013204:	bf14      	ite	ne
 8013206:	2301      	movne	r3, #1
 8013208:	2300      	moveq	r3, #0
 801320a:	b2db      	uxtb	r3, r3
 801320c:	e00b      	b.n	8013226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	699b      	ldr	r3, [r3, #24]
 8013214:	43da      	mvns	r2, r3
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	4013      	ands	r3, r2
 801321a:	b29b      	uxth	r3, r3
 801321c:	2b00      	cmp	r3, #0
 801321e:	bf14      	ite	ne
 8013220:	2301      	movne	r3, #1
 8013222:	2300      	moveq	r3, #0
 8013224:	b2db      	uxtb	r3, r3
 8013226:	2b00      	cmp	r3, #0
 8013228:	d18d      	bne.n	8013146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801322a:	2300      	movs	r3, #0
}
 801322c:	4618      	mov	r0, r3
 801322e:	3710      	adds	r7, #16
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}

08013234 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b084      	sub	sp, #16
 8013238:	af00      	add	r7, sp, #0
 801323a:	60f8      	str	r0, [r7, #12]
 801323c:	60b9      	str	r1, [r7, #8]
 801323e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8013240:	e02d      	b.n	801329e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8013242:	68f8      	ldr	r0, [r7, #12]
 8013244:	f000 f8ce 	bl	80133e4 <I2C_IsAcknowledgeFailed>
 8013248:	4603      	mov	r3, r0
 801324a:	2b00      	cmp	r3, #0
 801324c:	d001      	beq.n	8013252 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801324e:	2301      	movs	r3, #1
 8013250:	e02d      	b.n	80132ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013258:	d021      	beq.n	801329e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801325a:	f7fe fd4f 	bl	8011cfc <HAL_GetTick>
 801325e:	4602      	mov	r2, r0
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	1ad3      	subs	r3, r2, r3
 8013264:	68ba      	ldr	r2, [r7, #8]
 8013266:	429a      	cmp	r2, r3
 8013268:	d302      	bcc.n	8013270 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d116      	bne.n	801329e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	2200      	movs	r2, #0
 8013274:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2220      	movs	r2, #32
 801327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	2200      	movs	r2, #0
 8013282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801328a:	f043 0220 	orr.w	r2, r3, #32
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	2200      	movs	r2, #0
 8013296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801329a:	2301      	movs	r3, #1
 801329c:	e007      	b.n	80132ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	695b      	ldr	r3, [r3, #20]
 80132a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80132a8:	2b80      	cmp	r3, #128	; 0x80
 80132aa:	d1ca      	bne.n	8013242 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80132ac:	2300      	movs	r3, #0
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	3710      	adds	r7, #16
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}

080132b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80132b6:	b580      	push	{r7, lr}
 80132b8:	b084      	sub	sp, #16
 80132ba:	af00      	add	r7, sp, #0
 80132bc:	60f8      	str	r0, [r7, #12]
 80132be:	60b9      	str	r1, [r7, #8]
 80132c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80132c2:	e02d      	b.n	8013320 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80132c4:	68f8      	ldr	r0, [r7, #12]
 80132c6:	f000 f88d 	bl	80133e4 <I2C_IsAcknowledgeFailed>
 80132ca:	4603      	mov	r3, r0
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d001      	beq.n	80132d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80132d0:	2301      	movs	r3, #1
 80132d2:	e02d      	b.n	8013330 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80132d4:	68bb      	ldr	r3, [r7, #8]
 80132d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132da:	d021      	beq.n	8013320 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80132dc:	f7fe fd0e 	bl	8011cfc <HAL_GetTick>
 80132e0:	4602      	mov	r2, r0
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	1ad3      	subs	r3, r2, r3
 80132e6:	68ba      	ldr	r2, [r7, #8]
 80132e8:	429a      	cmp	r2, r3
 80132ea:	d302      	bcc.n	80132f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d116      	bne.n	8013320 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	2200      	movs	r2, #0
 80132f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	2220      	movs	r2, #32
 80132fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	2200      	movs	r2, #0
 8013304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801330c:	f043 0220 	orr.w	r2, r3, #32
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	2200      	movs	r2, #0
 8013318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801331c:	2301      	movs	r3, #1
 801331e:	e007      	b.n	8013330 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	695b      	ldr	r3, [r3, #20]
 8013326:	f003 0304 	and.w	r3, r3, #4
 801332a:	2b04      	cmp	r3, #4
 801332c:	d1ca      	bne.n	80132c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801332e:	2300      	movs	r3, #0
}
 8013330:	4618      	mov	r0, r3
 8013332:	3710      	adds	r7, #16
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}

08013338 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
 801333e:	60f8      	str	r0, [r7, #12]
 8013340:	60b9      	str	r1, [r7, #8]
 8013342:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8013344:	e042      	b.n	80133cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	695b      	ldr	r3, [r3, #20]
 801334c:	f003 0310 	and.w	r3, r3, #16
 8013350:	2b10      	cmp	r3, #16
 8013352:	d119      	bne.n	8013388 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	f06f 0210 	mvn.w	r2, #16
 801335c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	2200      	movs	r2, #0
 8013362:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	2220      	movs	r2, #32
 8013368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	2200      	movs	r2, #0
 8013370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	2200      	movs	r2, #0
 8013380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8013384:	2301      	movs	r3, #1
 8013386:	e029      	b.n	80133dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013388:	f7fe fcb8 	bl	8011cfc <HAL_GetTick>
 801338c:	4602      	mov	r2, r0
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	1ad3      	subs	r3, r2, r3
 8013392:	68ba      	ldr	r2, [r7, #8]
 8013394:	429a      	cmp	r2, r3
 8013396:	d302      	bcc.n	801339e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8013398:	68bb      	ldr	r3, [r7, #8]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d116      	bne.n	80133cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	2200      	movs	r2, #0
 80133a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	2220      	movs	r2, #32
 80133a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	2200      	movs	r2, #0
 80133b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133b8:	f043 0220 	orr.w	r2, r3, #32
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	2200      	movs	r2, #0
 80133c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80133c8:	2301      	movs	r3, #1
 80133ca:	e007      	b.n	80133dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	695b      	ldr	r3, [r3, #20]
 80133d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133d6:	2b40      	cmp	r3, #64	; 0x40
 80133d8:	d1b5      	bne.n	8013346 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80133da:	2300      	movs	r3, #0
}
 80133dc:	4618      	mov	r0, r3
 80133de:	3710      	adds	r7, #16
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd80      	pop	{r7, pc}

080133e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80133e4:	b480      	push	{r7}
 80133e6:	b083      	sub	sp, #12
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	695b      	ldr	r3, [r3, #20]
 80133f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80133f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80133fa:	d11b      	bne.n	8013434 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013404:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	2200      	movs	r2, #0
 801340a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2220      	movs	r2, #32
 8013410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2200      	movs	r2, #0
 8013418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013420:	f043 0204 	orr.w	r2, r3, #4
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	2200      	movs	r2, #0
 801342c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8013430:	2301      	movs	r3, #1
 8013432:	e000      	b.n	8013436 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8013434:	2300      	movs	r3, #0
}
 8013436:	4618      	mov	r0, r3
 8013438:	370c      	adds	r7, #12
 801343a:	46bd      	mov	sp, r7
 801343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013440:	4770      	bx	lr
	...

08013444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013444:	b580      	push	{r7, lr}
 8013446:	b086      	sub	sp, #24
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d101      	bne.n	8013456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8013452:	2301      	movs	r3, #1
 8013454:	e264      	b.n	8013920 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	f003 0301 	and.w	r3, r3, #1
 801345e:	2b00      	cmp	r3, #0
 8013460:	d075      	beq.n	801354e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013462:	4ba3      	ldr	r3, [pc, #652]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 8013464:	689b      	ldr	r3, [r3, #8]
 8013466:	f003 030c 	and.w	r3, r3, #12
 801346a:	2b04      	cmp	r3, #4
 801346c:	d00c      	beq.n	8013488 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801346e:	4ba0      	ldr	r3, [pc, #640]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 8013470:	689b      	ldr	r3, [r3, #8]
 8013472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8013476:	2b08      	cmp	r3, #8
 8013478:	d112      	bne.n	80134a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801347a:	4b9d      	ldr	r3, [pc, #628]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 801347c:	685b      	ldr	r3, [r3, #4]
 801347e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013486:	d10b      	bne.n	80134a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013488:	4b99      	ldr	r3, [pc, #612]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013490:	2b00      	cmp	r3, #0
 8013492:	d05b      	beq.n	801354c <HAL_RCC_OscConfig+0x108>
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	685b      	ldr	r3, [r3, #4]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d157      	bne.n	801354c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801349c:	2301      	movs	r3, #1
 801349e:	e23f      	b.n	8013920 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	685b      	ldr	r3, [r3, #4]
 80134a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80134a8:	d106      	bne.n	80134b8 <HAL_RCC_OscConfig+0x74>
 80134aa:	4b91      	ldr	r3, [pc, #580]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	4a90      	ldr	r2, [pc, #576]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 80134b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80134b4:	6013      	str	r3, [r2, #0]
 80134b6:	e01d      	b.n	80134f4 <HAL_RCC_OscConfig+0xb0>
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	685b      	ldr	r3, [r3, #4]
 80134bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80134c0:	d10c      	bne.n	80134dc <HAL_RCC_OscConfig+0x98>
 80134c2:	4b8b      	ldr	r3, [pc, #556]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	4a8a      	ldr	r2, [pc, #552]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 80134c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80134cc:	6013      	str	r3, [r2, #0]
 80134ce:	4b88      	ldr	r3, [pc, #544]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	4a87      	ldr	r2, [pc, #540]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 80134d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80134d8:	6013      	str	r3, [r2, #0]
 80134da:	e00b      	b.n	80134f4 <HAL_RCC_OscConfig+0xb0>
 80134dc:	4b84      	ldr	r3, [pc, #528]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	4a83      	ldr	r2, [pc, #524]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 80134e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80134e6:	6013      	str	r3, [r2, #0]
 80134e8:	4b81      	ldr	r3, [pc, #516]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	4a80      	ldr	r2, [pc, #512]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 80134ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80134f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	685b      	ldr	r3, [r3, #4]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d013      	beq.n	8013524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80134fc:	f7fe fbfe 	bl	8011cfc <HAL_GetTick>
 8013500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013502:	e008      	b.n	8013516 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013504:	f7fe fbfa 	bl	8011cfc <HAL_GetTick>
 8013508:	4602      	mov	r2, r0
 801350a:	693b      	ldr	r3, [r7, #16]
 801350c:	1ad3      	subs	r3, r2, r3
 801350e:	2b64      	cmp	r3, #100	; 0x64
 8013510:	d901      	bls.n	8013516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8013512:	2303      	movs	r3, #3
 8013514:	e204      	b.n	8013920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013516:	4b76      	ldr	r3, [pc, #472]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801351e:	2b00      	cmp	r3, #0
 8013520:	d0f0      	beq.n	8013504 <HAL_RCC_OscConfig+0xc0>
 8013522:	e014      	b.n	801354e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013524:	f7fe fbea 	bl	8011cfc <HAL_GetTick>
 8013528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801352a:	e008      	b.n	801353e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801352c:	f7fe fbe6 	bl	8011cfc <HAL_GetTick>
 8013530:	4602      	mov	r2, r0
 8013532:	693b      	ldr	r3, [r7, #16]
 8013534:	1ad3      	subs	r3, r2, r3
 8013536:	2b64      	cmp	r3, #100	; 0x64
 8013538:	d901      	bls.n	801353e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801353a:	2303      	movs	r3, #3
 801353c:	e1f0      	b.n	8013920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801353e:	4b6c      	ldr	r3, [pc, #432]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013546:	2b00      	cmp	r3, #0
 8013548:	d1f0      	bne.n	801352c <HAL_RCC_OscConfig+0xe8>
 801354a:	e000      	b.n	801354e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801354c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	f003 0302 	and.w	r3, r3, #2
 8013556:	2b00      	cmp	r3, #0
 8013558:	d063      	beq.n	8013622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801355a:	4b65      	ldr	r3, [pc, #404]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 801355c:	689b      	ldr	r3, [r3, #8]
 801355e:	f003 030c 	and.w	r3, r3, #12
 8013562:	2b00      	cmp	r3, #0
 8013564:	d00b      	beq.n	801357e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013566:	4b62      	ldr	r3, [pc, #392]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 8013568:	689b      	ldr	r3, [r3, #8]
 801356a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801356e:	2b08      	cmp	r3, #8
 8013570:	d11c      	bne.n	80135ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013572:	4b5f      	ldr	r3, [pc, #380]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 8013574:	685b      	ldr	r3, [r3, #4]
 8013576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801357a:	2b00      	cmp	r3, #0
 801357c:	d116      	bne.n	80135ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801357e:	4b5c      	ldr	r3, [pc, #368]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	f003 0302 	and.w	r3, r3, #2
 8013586:	2b00      	cmp	r3, #0
 8013588:	d005      	beq.n	8013596 <HAL_RCC_OscConfig+0x152>
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	68db      	ldr	r3, [r3, #12]
 801358e:	2b01      	cmp	r3, #1
 8013590:	d001      	beq.n	8013596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8013592:	2301      	movs	r3, #1
 8013594:	e1c4      	b.n	8013920 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013596:	4b56      	ldr	r3, [pc, #344]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	691b      	ldr	r3, [r3, #16]
 80135a2:	00db      	lsls	r3, r3, #3
 80135a4:	4952      	ldr	r1, [pc, #328]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 80135a6:	4313      	orrs	r3, r2
 80135a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80135aa:	e03a      	b.n	8013622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	68db      	ldr	r3, [r3, #12]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d020      	beq.n	80135f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80135b4:	4b4f      	ldr	r3, [pc, #316]	; (80136f4 <HAL_RCC_OscConfig+0x2b0>)
 80135b6:	2201      	movs	r2, #1
 80135b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80135ba:	f7fe fb9f 	bl	8011cfc <HAL_GetTick>
 80135be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80135c0:	e008      	b.n	80135d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80135c2:	f7fe fb9b 	bl	8011cfc <HAL_GetTick>
 80135c6:	4602      	mov	r2, r0
 80135c8:	693b      	ldr	r3, [r7, #16]
 80135ca:	1ad3      	subs	r3, r2, r3
 80135cc:	2b02      	cmp	r3, #2
 80135ce:	d901      	bls.n	80135d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80135d0:	2303      	movs	r3, #3
 80135d2:	e1a5      	b.n	8013920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80135d4:	4b46      	ldr	r3, [pc, #280]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	f003 0302 	and.w	r3, r3, #2
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d0f0      	beq.n	80135c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80135e0:	4b43      	ldr	r3, [pc, #268]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	691b      	ldr	r3, [r3, #16]
 80135ec:	00db      	lsls	r3, r3, #3
 80135ee:	4940      	ldr	r1, [pc, #256]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 80135f0:	4313      	orrs	r3, r2
 80135f2:	600b      	str	r3, [r1, #0]
 80135f4:	e015      	b.n	8013622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80135f6:	4b3f      	ldr	r3, [pc, #252]	; (80136f4 <HAL_RCC_OscConfig+0x2b0>)
 80135f8:	2200      	movs	r2, #0
 80135fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80135fc:	f7fe fb7e 	bl	8011cfc <HAL_GetTick>
 8013600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013602:	e008      	b.n	8013616 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013604:	f7fe fb7a 	bl	8011cfc <HAL_GetTick>
 8013608:	4602      	mov	r2, r0
 801360a:	693b      	ldr	r3, [r7, #16]
 801360c:	1ad3      	subs	r3, r2, r3
 801360e:	2b02      	cmp	r3, #2
 8013610:	d901      	bls.n	8013616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8013612:	2303      	movs	r3, #3
 8013614:	e184      	b.n	8013920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013616:	4b36      	ldr	r3, [pc, #216]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	f003 0302 	and.w	r3, r3, #2
 801361e:	2b00      	cmp	r3, #0
 8013620:	d1f0      	bne.n	8013604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	f003 0308 	and.w	r3, r3, #8
 801362a:	2b00      	cmp	r3, #0
 801362c:	d030      	beq.n	8013690 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	695b      	ldr	r3, [r3, #20]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d016      	beq.n	8013664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013636:	4b30      	ldr	r3, [pc, #192]	; (80136f8 <HAL_RCC_OscConfig+0x2b4>)
 8013638:	2201      	movs	r2, #1
 801363a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801363c:	f7fe fb5e 	bl	8011cfc <HAL_GetTick>
 8013640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013642:	e008      	b.n	8013656 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013644:	f7fe fb5a 	bl	8011cfc <HAL_GetTick>
 8013648:	4602      	mov	r2, r0
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	1ad3      	subs	r3, r2, r3
 801364e:	2b02      	cmp	r3, #2
 8013650:	d901      	bls.n	8013656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8013652:	2303      	movs	r3, #3
 8013654:	e164      	b.n	8013920 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8013656:	4b26      	ldr	r3, [pc, #152]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 8013658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801365a:	f003 0302 	and.w	r3, r3, #2
 801365e:	2b00      	cmp	r3, #0
 8013660:	d0f0      	beq.n	8013644 <HAL_RCC_OscConfig+0x200>
 8013662:	e015      	b.n	8013690 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013664:	4b24      	ldr	r3, [pc, #144]	; (80136f8 <HAL_RCC_OscConfig+0x2b4>)
 8013666:	2200      	movs	r2, #0
 8013668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801366a:	f7fe fb47 	bl	8011cfc <HAL_GetTick>
 801366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013670:	e008      	b.n	8013684 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013672:	f7fe fb43 	bl	8011cfc <HAL_GetTick>
 8013676:	4602      	mov	r2, r0
 8013678:	693b      	ldr	r3, [r7, #16]
 801367a:	1ad3      	subs	r3, r2, r3
 801367c:	2b02      	cmp	r3, #2
 801367e:	d901      	bls.n	8013684 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8013680:	2303      	movs	r3, #3
 8013682:	e14d      	b.n	8013920 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013684:	4b1a      	ldr	r3, [pc, #104]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 8013686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013688:	f003 0302 	and.w	r3, r3, #2
 801368c:	2b00      	cmp	r3, #0
 801368e:	d1f0      	bne.n	8013672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	f003 0304 	and.w	r3, r3, #4
 8013698:	2b00      	cmp	r3, #0
 801369a:	f000 80a0 	beq.w	80137de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801369e:	2300      	movs	r3, #0
 80136a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80136a2:	4b13      	ldr	r3, [pc, #76]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 80136a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d10f      	bne.n	80136ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80136ae:	2300      	movs	r3, #0
 80136b0:	60bb      	str	r3, [r7, #8]
 80136b2:	4b0f      	ldr	r3, [pc, #60]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 80136b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136b6:	4a0e      	ldr	r2, [pc, #56]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 80136b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136bc:	6413      	str	r3, [r2, #64]	; 0x40
 80136be:	4b0c      	ldr	r3, [pc, #48]	; (80136f0 <HAL_RCC_OscConfig+0x2ac>)
 80136c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80136c6:	60bb      	str	r3, [r7, #8]
 80136c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80136ca:	2301      	movs	r3, #1
 80136cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80136ce:	4b0b      	ldr	r3, [pc, #44]	; (80136fc <HAL_RCC_OscConfig+0x2b8>)
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d121      	bne.n	801371e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80136da:	4b08      	ldr	r3, [pc, #32]	; (80136fc <HAL_RCC_OscConfig+0x2b8>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	4a07      	ldr	r2, [pc, #28]	; (80136fc <HAL_RCC_OscConfig+0x2b8>)
 80136e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80136e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80136e6:	f7fe fb09 	bl	8011cfc <HAL_GetTick>
 80136ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80136ec:	e011      	b.n	8013712 <HAL_RCC_OscConfig+0x2ce>
 80136ee:	bf00      	nop
 80136f0:	40023800 	.word	0x40023800
 80136f4:	42470000 	.word	0x42470000
 80136f8:	42470e80 	.word	0x42470e80
 80136fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013700:	f7fe fafc 	bl	8011cfc <HAL_GetTick>
 8013704:	4602      	mov	r2, r0
 8013706:	693b      	ldr	r3, [r7, #16]
 8013708:	1ad3      	subs	r3, r2, r3
 801370a:	2b02      	cmp	r3, #2
 801370c:	d901      	bls.n	8013712 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801370e:	2303      	movs	r3, #3
 8013710:	e106      	b.n	8013920 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013712:	4b85      	ldr	r3, [pc, #532]	; (8013928 <HAL_RCC_OscConfig+0x4e4>)
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801371a:	2b00      	cmp	r3, #0
 801371c:	d0f0      	beq.n	8013700 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	689b      	ldr	r3, [r3, #8]
 8013722:	2b01      	cmp	r3, #1
 8013724:	d106      	bne.n	8013734 <HAL_RCC_OscConfig+0x2f0>
 8013726:	4b81      	ldr	r3, [pc, #516]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 8013728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801372a:	4a80      	ldr	r2, [pc, #512]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 801372c:	f043 0301 	orr.w	r3, r3, #1
 8013730:	6713      	str	r3, [r2, #112]	; 0x70
 8013732:	e01c      	b.n	801376e <HAL_RCC_OscConfig+0x32a>
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	689b      	ldr	r3, [r3, #8]
 8013738:	2b05      	cmp	r3, #5
 801373a:	d10c      	bne.n	8013756 <HAL_RCC_OscConfig+0x312>
 801373c:	4b7b      	ldr	r3, [pc, #492]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 801373e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013740:	4a7a      	ldr	r2, [pc, #488]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 8013742:	f043 0304 	orr.w	r3, r3, #4
 8013746:	6713      	str	r3, [r2, #112]	; 0x70
 8013748:	4b78      	ldr	r3, [pc, #480]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 801374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801374c:	4a77      	ldr	r2, [pc, #476]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 801374e:	f043 0301 	orr.w	r3, r3, #1
 8013752:	6713      	str	r3, [r2, #112]	; 0x70
 8013754:	e00b      	b.n	801376e <HAL_RCC_OscConfig+0x32a>
 8013756:	4b75      	ldr	r3, [pc, #468]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 8013758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801375a:	4a74      	ldr	r2, [pc, #464]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 801375c:	f023 0301 	bic.w	r3, r3, #1
 8013760:	6713      	str	r3, [r2, #112]	; 0x70
 8013762:	4b72      	ldr	r3, [pc, #456]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 8013764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013766:	4a71      	ldr	r2, [pc, #452]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 8013768:	f023 0304 	bic.w	r3, r3, #4
 801376c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	689b      	ldr	r3, [r3, #8]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d015      	beq.n	80137a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013776:	f7fe fac1 	bl	8011cfc <HAL_GetTick>
 801377a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801377c:	e00a      	b.n	8013794 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801377e:	f7fe fabd 	bl	8011cfc <HAL_GetTick>
 8013782:	4602      	mov	r2, r0
 8013784:	693b      	ldr	r3, [r7, #16]
 8013786:	1ad3      	subs	r3, r2, r3
 8013788:	f241 3288 	movw	r2, #5000	; 0x1388
 801378c:	4293      	cmp	r3, r2
 801378e:	d901      	bls.n	8013794 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8013790:	2303      	movs	r3, #3
 8013792:	e0c5      	b.n	8013920 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013794:	4b65      	ldr	r3, [pc, #404]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 8013796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013798:	f003 0302 	and.w	r3, r3, #2
 801379c:	2b00      	cmp	r3, #0
 801379e:	d0ee      	beq.n	801377e <HAL_RCC_OscConfig+0x33a>
 80137a0:	e014      	b.n	80137cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80137a2:	f7fe faab 	bl	8011cfc <HAL_GetTick>
 80137a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80137a8:	e00a      	b.n	80137c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80137aa:	f7fe faa7 	bl	8011cfc <HAL_GetTick>
 80137ae:	4602      	mov	r2, r0
 80137b0:	693b      	ldr	r3, [r7, #16]
 80137b2:	1ad3      	subs	r3, r2, r3
 80137b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80137b8:	4293      	cmp	r3, r2
 80137ba:	d901      	bls.n	80137c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80137bc:	2303      	movs	r3, #3
 80137be:	e0af      	b.n	8013920 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80137c0:	4b5a      	ldr	r3, [pc, #360]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 80137c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137c4:	f003 0302 	and.w	r3, r3, #2
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d1ee      	bne.n	80137aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80137cc:	7dfb      	ldrb	r3, [r7, #23]
 80137ce:	2b01      	cmp	r3, #1
 80137d0:	d105      	bne.n	80137de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80137d2:	4b56      	ldr	r3, [pc, #344]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 80137d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137d6:	4a55      	ldr	r2, [pc, #340]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 80137d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80137dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	699b      	ldr	r3, [r3, #24]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	f000 809b 	beq.w	801391e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80137e8:	4b50      	ldr	r3, [pc, #320]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 80137ea:	689b      	ldr	r3, [r3, #8]
 80137ec:	f003 030c 	and.w	r3, r3, #12
 80137f0:	2b08      	cmp	r3, #8
 80137f2:	d05c      	beq.n	80138ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	699b      	ldr	r3, [r3, #24]
 80137f8:	2b02      	cmp	r3, #2
 80137fa:	d141      	bne.n	8013880 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80137fc:	4b4c      	ldr	r3, [pc, #304]	; (8013930 <HAL_RCC_OscConfig+0x4ec>)
 80137fe:	2200      	movs	r2, #0
 8013800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013802:	f7fe fa7b 	bl	8011cfc <HAL_GetTick>
 8013806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013808:	e008      	b.n	801381c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801380a:	f7fe fa77 	bl	8011cfc <HAL_GetTick>
 801380e:	4602      	mov	r2, r0
 8013810:	693b      	ldr	r3, [r7, #16]
 8013812:	1ad3      	subs	r3, r2, r3
 8013814:	2b02      	cmp	r3, #2
 8013816:	d901      	bls.n	801381c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8013818:	2303      	movs	r3, #3
 801381a:	e081      	b.n	8013920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801381c:	4b43      	ldr	r3, [pc, #268]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013824:	2b00      	cmp	r3, #0
 8013826:	d1f0      	bne.n	801380a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	69da      	ldr	r2, [r3, #28]
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6a1b      	ldr	r3, [r3, #32]
 8013830:	431a      	orrs	r2, r3
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013836:	019b      	lsls	r3, r3, #6
 8013838:	431a      	orrs	r2, r3
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801383e:	085b      	lsrs	r3, r3, #1
 8013840:	3b01      	subs	r3, #1
 8013842:	041b      	lsls	r3, r3, #16
 8013844:	431a      	orrs	r2, r3
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801384a:	061b      	lsls	r3, r3, #24
 801384c:	4937      	ldr	r1, [pc, #220]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 801384e:	4313      	orrs	r3, r2
 8013850:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013852:	4b37      	ldr	r3, [pc, #220]	; (8013930 <HAL_RCC_OscConfig+0x4ec>)
 8013854:	2201      	movs	r2, #1
 8013856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013858:	f7fe fa50 	bl	8011cfc <HAL_GetTick>
 801385c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801385e:	e008      	b.n	8013872 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013860:	f7fe fa4c 	bl	8011cfc <HAL_GetTick>
 8013864:	4602      	mov	r2, r0
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	1ad3      	subs	r3, r2, r3
 801386a:	2b02      	cmp	r3, #2
 801386c:	d901      	bls.n	8013872 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801386e:	2303      	movs	r3, #3
 8013870:	e056      	b.n	8013920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013872:	4b2e      	ldr	r3, [pc, #184]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801387a:	2b00      	cmp	r3, #0
 801387c:	d0f0      	beq.n	8013860 <HAL_RCC_OscConfig+0x41c>
 801387e:	e04e      	b.n	801391e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013880:	4b2b      	ldr	r3, [pc, #172]	; (8013930 <HAL_RCC_OscConfig+0x4ec>)
 8013882:	2200      	movs	r2, #0
 8013884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013886:	f7fe fa39 	bl	8011cfc <HAL_GetTick>
 801388a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801388c:	e008      	b.n	80138a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801388e:	f7fe fa35 	bl	8011cfc <HAL_GetTick>
 8013892:	4602      	mov	r2, r0
 8013894:	693b      	ldr	r3, [r7, #16]
 8013896:	1ad3      	subs	r3, r2, r3
 8013898:	2b02      	cmp	r3, #2
 801389a:	d901      	bls.n	80138a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 801389c:	2303      	movs	r3, #3
 801389e:	e03f      	b.n	8013920 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80138a0:	4b22      	ldr	r3, [pc, #136]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d1f0      	bne.n	801388e <HAL_RCC_OscConfig+0x44a>
 80138ac:	e037      	b.n	801391e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	699b      	ldr	r3, [r3, #24]
 80138b2:	2b01      	cmp	r3, #1
 80138b4:	d101      	bne.n	80138ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80138b6:	2301      	movs	r3, #1
 80138b8:	e032      	b.n	8013920 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80138ba:	4b1c      	ldr	r3, [pc, #112]	; (801392c <HAL_RCC_OscConfig+0x4e8>)
 80138bc:	685b      	ldr	r3, [r3, #4]
 80138be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	699b      	ldr	r3, [r3, #24]
 80138c4:	2b01      	cmp	r3, #1
 80138c6:	d028      	beq.n	801391a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80138d2:	429a      	cmp	r2, r3
 80138d4:	d121      	bne.n	801391a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80138e0:	429a      	cmp	r2, r3
 80138e2:	d11a      	bne.n	801391a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80138e4:	68fa      	ldr	r2, [r7, #12]
 80138e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80138ea:	4013      	ands	r3, r2
 80138ec:	687a      	ldr	r2, [r7, #4]
 80138ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80138f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80138f2:	4293      	cmp	r3, r2
 80138f4:	d111      	bne.n	801391a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013900:	085b      	lsrs	r3, r3, #1
 8013902:	3b01      	subs	r3, #1
 8013904:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013906:	429a      	cmp	r2, r3
 8013908:	d107      	bne.n	801391a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013914:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013916:	429a      	cmp	r2, r3
 8013918:	d001      	beq.n	801391e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 801391a:	2301      	movs	r3, #1
 801391c:	e000      	b.n	8013920 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 801391e:	2300      	movs	r3, #0
}
 8013920:	4618      	mov	r0, r3
 8013922:	3718      	adds	r7, #24
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}
 8013928:	40007000 	.word	0x40007000
 801392c:	40023800 	.word	0x40023800
 8013930:	42470060 	.word	0x42470060

08013934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b084      	sub	sp, #16
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
 801393c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d101      	bne.n	8013948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013944:	2301      	movs	r3, #1
 8013946:	e0cc      	b.n	8013ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013948:	4b68      	ldr	r3, [pc, #416]	; (8013aec <HAL_RCC_ClockConfig+0x1b8>)
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	f003 0307 	and.w	r3, r3, #7
 8013950:	683a      	ldr	r2, [r7, #0]
 8013952:	429a      	cmp	r2, r3
 8013954:	d90c      	bls.n	8013970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013956:	4b65      	ldr	r3, [pc, #404]	; (8013aec <HAL_RCC_ClockConfig+0x1b8>)
 8013958:	683a      	ldr	r2, [r7, #0]
 801395a:	b2d2      	uxtb	r2, r2
 801395c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801395e:	4b63      	ldr	r3, [pc, #396]	; (8013aec <HAL_RCC_ClockConfig+0x1b8>)
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	f003 0307 	and.w	r3, r3, #7
 8013966:	683a      	ldr	r2, [r7, #0]
 8013968:	429a      	cmp	r2, r3
 801396a:	d001      	beq.n	8013970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801396c:	2301      	movs	r3, #1
 801396e:	e0b8      	b.n	8013ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	f003 0302 	and.w	r3, r3, #2
 8013978:	2b00      	cmp	r3, #0
 801397a:	d020      	beq.n	80139be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	f003 0304 	and.w	r3, r3, #4
 8013984:	2b00      	cmp	r3, #0
 8013986:	d005      	beq.n	8013994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8013988:	4b59      	ldr	r3, [pc, #356]	; (8013af0 <HAL_RCC_ClockConfig+0x1bc>)
 801398a:	689b      	ldr	r3, [r3, #8]
 801398c:	4a58      	ldr	r2, [pc, #352]	; (8013af0 <HAL_RCC_ClockConfig+0x1bc>)
 801398e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8013992:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	f003 0308 	and.w	r3, r3, #8
 801399c:	2b00      	cmp	r3, #0
 801399e:	d005      	beq.n	80139ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80139a0:	4b53      	ldr	r3, [pc, #332]	; (8013af0 <HAL_RCC_ClockConfig+0x1bc>)
 80139a2:	689b      	ldr	r3, [r3, #8]
 80139a4:	4a52      	ldr	r2, [pc, #328]	; (8013af0 <HAL_RCC_ClockConfig+0x1bc>)
 80139a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80139aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80139ac:	4b50      	ldr	r3, [pc, #320]	; (8013af0 <HAL_RCC_ClockConfig+0x1bc>)
 80139ae:	689b      	ldr	r3, [r3, #8]
 80139b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	689b      	ldr	r3, [r3, #8]
 80139b8:	494d      	ldr	r1, [pc, #308]	; (8013af0 <HAL_RCC_ClockConfig+0x1bc>)
 80139ba:	4313      	orrs	r3, r2
 80139bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	f003 0301 	and.w	r3, r3, #1
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d044      	beq.n	8013a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	685b      	ldr	r3, [r3, #4]
 80139ce:	2b01      	cmp	r3, #1
 80139d0:	d107      	bne.n	80139e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80139d2:	4b47      	ldr	r3, [pc, #284]	; (8013af0 <HAL_RCC_ClockConfig+0x1bc>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d119      	bne.n	8013a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80139de:	2301      	movs	r3, #1
 80139e0:	e07f      	b.n	8013ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	685b      	ldr	r3, [r3, #4]
 80139e6:	2b02      	cmp	r3, #2
 80139e8:	d003      	beq.n	80139f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80139ee:	2b03      	cmp	r3, #3
 80139f0:	d107      	bne.n	8013a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80139f2:	4b3f      	ldr	r3, [pc, #252]	; (8013af0 <HAL_RCC_ClockConfig+0x1bc>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d109      	bne.n	8013a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80139fe:	2301      	movs	r3, #1
 8013a00:	e06f      	b.n	8013ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013a02:	4b3b      	ldr	r3, [pc, #236]	; (8013af0 <HAL_RCC_ClockConfig+0x1bc>)
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	f003 0302 	and.w	r3, r3, #2
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d101      	bne.n	8013a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8013a0e:	2301      	movs	r3, #1
 8013a10:	e067      	b.n	8013ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013a12:	4b37      	ldr	r3, [pc, #220]	; (8013af0 <HAL_RCC_ClockConfig+0x1bc>)
 8013a14:	689b      	ldr	r3, [r3, #8]
 8013a16:	f023 0203 	bic.w	r2, r3, #3
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	685b      	ldr	r3, [r3, #4]
 8013a1e:	4934      	ldr	r1, [pc, #208]	; (8013af0 <HAL_RCC_ClockConfig+0x1bc>)
 8013a20:	4313      	orrs	r3, r2
 8013a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013a24:	f7fe f96a 	bl	8011cfc <HAL_GetTick>
 8013a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013a2a:	e00a      	b.n	8013a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013a2c:	f7fe f966 	bl	8011cfc <HAL_GetTick>
 8013a30:	4602      	mov	r2, r0
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	1ad3      	subs	r3, r2, r3
 8013a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8013a3a:	4293      	cmp	r3, r2
 8013a3c:	d901      	bls.n	8013a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8013a3e:	2303      	movs	r3, #3
 8013a40:	e04f      	b.n	8013ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013a42:	4b2b      	ldr	r3, [pc, #172]	; (8013af0 <HAL_RCC_ClockConfig+0x1bc>)
 8013a44:	689b      	ldr	r3, [r3, #8]
 8013a46:	f003 020c 	and.w	r2, r3, #12
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	685b      	ldr	r3, [r3, #4]
 8013a4e:	009b      	lsls	r3, r3, #2
 8013a50:	429a      	cmp	r2, r3
 8013a52:	d1eb      	bne.n	8013a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013a54:	4b25      	ldr	r3, [pc, #148]	; (8013aec <HAL_RCC_ClockConfig+0x1b8>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	f003 0307 	and.w	r3, r3, #7
 8013a5c:	683a      	ldr	r2, [r7, #0]
 8013a5e:	429a      	cmp	r2, r3
 8013a60:	d20c      	bcs.n	8013a7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013a62:	4b22      	ldr	r3, [pc, #136]	; (8013aec <HAL_RCC_ClockConfig+0x1b8>)
 8013a64:	683a      	ldr	r2, [r7, #0]
 8013a66:	b2d2      	uxtb	r2, r2
 8013a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8013a6a:	4b20      	ldr	r3, [pc, #128]	; (8013aec <HAL_RCC_ClockConfig+0x1b8>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	f003 0307 	and.w	r3, r3, #7
 8013a72:	683a      	ldr	r2, [r7, #0]
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d001      	beq.n	8013a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8013a78:	2301      	movs	r3, #1
 8013a7a:	e032      	b.n	8013ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	f003 0304 	and.w	r3, r3, #4
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d008      	beq.n	8013a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013a88:	4b19      	ldr	r3, [pc, #100]	; (8013af0 <HAL_RCC_ClockConfig+0x1bc>)
 8013a8a:	689b      	ldr	r3, [r3, #8]
 8013a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	68db      	ldr	r3, [r3, #12]
 8013a94:	4916      	ldr	r1, [pc, #88]	; (8013af0 <HAL_RCC_ClockConfig+0x1bc>)
 8013a96:	4313      	orrs	r3, r2
 8013a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	f003 0308 	and.w	r3, r3, #8
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d009      	beq.n	8013aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013aa6:	4b12      	ldr	r3, [pc, #72]	; (8013af0 <HAL_RCC_ClockConfig+0x1bc>)
 8013aa8:	689b      	ldr	r3, [r3, #8]
 8013aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	691b      	ldr	r3, [r3, #16]
 8013ab2:	00db      	lsls	r3, r3, #3
 8013ab4:	490e      	ldr	r1, [pc, #56]	; (8013af0 <HAL_RCC_ClockConfig+0x1bc>)
 8013ab6:	4313      	orrs	r3, r2
 8013ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013aba:	f000 f821 	bl	8013b00 <HAL_RCC_GetSysClockFreq>
 8013abe:	4602      	mov	r2, r0
 8013ac0:	4b0b      	ldr	r3, [pc, #44]	; (8013af0 <HAL_RCC_ClockConfig+0x1bc>)
 8013ac2:	689b      	ldr	r3, [r3, #8]
 8013ac4:	091b      	lsrs	r3, r3, #4
 8013ac6:	f003 030f 	and.w	r3, r3, #15
 8013aca:	490a      	ldr	r1, [pc, #40]	; (8013af4 <HAL_RCC_ClockConfig+0x1c0>)
 8013acc:	5ccb      	ldrb	r3, [r1, r3]
 8013ace:	fa22 f303 	lsr.w	r3, r2, r3
 8013ad2:	4a09      	ldr	r2, [pc, #36]	; (8013af8 <HAL_RCC_ClockConfig+0x1c4>)
 8013ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8013ad6:	4b09      	ldr	r3, [pc, #36]	; (8013afc <HAL_RCC_ClockConfig+0x1c8>)
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	4618      	mov	r0, r3
 8013adc:	f7fe f8ca 	bl	8011c74 <HAL_InitTick>

  return HAL_OK;
 8013ae0:	2300      	movs	r3, #0
}
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	3710      	adds	r7, #16
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}
 8013aea:	bf00      	nop
 8013aec:	40023c00 	.word	0x40023c00
 8013af0:	40023800 	.word	0x40023800
 8013af4:	08015578 	.word	0x08015578
 8013af8:	20000018 	.word	0x20000018
 8013afc:	20000080 	.word	0x20000080

08013b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013b00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8013b04:	b084      	sub	sp, #16
 8013b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013b08:	2300      	movs	r3, #0
 8013b0a:	607b      	str	r3, [r7, #4]
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	60fb      	str	r3, [r7, #12]
 8013b10:	2300      	movs	r3, #0
 8013b12:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8013b14:	2300      	movs	r3, #0
 8013b16:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013b18:	4b67      	ldr	r3, [pc, #412]	; (8013cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013b1a:	689b      	ldr	r3, [r3, #8]
 8013b1c:	f003 030c 	and.w	r3, r3, #12
 8013b20:	2b08      	cmp	r3, #8
 8013b22:	d00d      	beq.n	8013b40 <HAL_RCC_GetSysClockFreq+0x40>
 8013b24:	2b08      	cmp	r3, #8
 8013b26:	f200 80bd 	bhi.w	8013ca4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d002      	beq.n	8013b34 <HAL_RCC_GetSysClockFreq+0x34>
 8013b2e:	2b04      	cmp	r3, #4
 8013b30:	d003      	beq.n	8013b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8013b32:	e0b7      	b.n	8013ca4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013b34:	4b61      	ldr	r3, [pc, #388]	; (8013cbc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8013b36:	60bb      	str	r3, [r7, #8]
       break;
 8013b38:	e0b7      	b.n	8013caa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013b3a:	4b61      	ldr	r3, [pc, #388]	; (8013cc0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8013b3c:	60bb      	str	r3, [r7, #8]
      break;
 8013b3e:	e0b4      	b.n	8013caa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8013b40:	4b5d      	ldr	r3, [pc, #372]	; (8013cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013b42:	685b      	ldr	r3, [r3, #4]
 8013b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013b48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013b4a:	4b5b      	ldr	r3, [pc, #364]	; (8013cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d04d      	beq.n	8013bf2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013b56:	4b58      	ldr	r3, [pc, #352]	; (8013cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013b58:	685b      	ldr	r3, [r3, #4]
 8013b5a:	099b      	lsrs	r3, r3, #6
 8013b5c:	461a      	mov	r2, r3
 8013b5e:	f04f 0300 	mov.w	r3, #0
 8013b62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013b66:	f04f 0100 	mov.w	r1, #0
 8013b6a:	ea02 0800 	and.w	r8, r2, r0
 8013b6e:	ea03 0901 	and.w	r9, r3, r1
 8013b72:	4640      	mov	r0, r8
 8013b74:	4649      	mov	r1, r9
 8013b76:	f04f 0200 	mov.w	r2, #0
 8013b7a:	f04f 0300 	mov.w	r3, #0
 8013b7e:	014b      	lsls	r3, r1, #5
 8013b80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8013b84:	0142      	lsls	r2, r0, #5
 8013b86:	4610      	mov	r0, r2
 8013b88:	4619      	mov	r1, r3
 8013b8a:	ebb0 0008 	subs.w	r0, r0, r8
 8013b8e:	eb61 0109 	sbc.w	r1, r1, r9
 8013b92:	f04f 0200 	mov.w	r2, #0
 8013b96:	f04f 0300 	mov.w	r3, #0
 8013b9a:	018b      	lsls	r3, r1, #6
 8013b9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8013ba0:	0182      	lsls	r2, r0, #6
 8013ba2:	1a12      	subs	r2, r2, r0
 8013ba4:	eb63 0301 	sbc.w	r3, r3, r1
 8013ba8:	f04f 0000 	mov.w	r0, #0
 8013bac:	f04f 0100 	mov.w	r1, #0
 8013bb0:	00d9      	lsls	r1, r3, #3
 8013bb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013bb6:	00d0      	lsls	r0, r2, #3
 8013bb8:	4602      	mov	r2, r0
 8013bba:	460b      	mov	r3, r1
 8013bbc:	eb12 0208 	adds.w	r2, r2, r8
 8013bc0:	eb43 0309 	adc.w	r3, r3, r9
 8013bc4:	f04f 0000 	mov.w	r0, #0
 8013bc8:	f04f 0100 	mov.w	r1, #0
 8013bcc:	0259      	lsls	r1, r3, #9
 8013bce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8013bd2:	0250      	lsls	r0, r2, #9
 8013bd4:	4602      	mov	r2, r0
 8013bd6:	460b      	mov	r3, r1
 8013bd8:	4610      	mov	r0, r2
 8013bda:	4619      	mov	r1, r3
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	461a      	mov	r2, r3
 8013be0:	f04f 0300 	mov.w	r3, #0
 8013be4:	f7ec fb9c 	bl	8000320 <__aeabi_uldivmod>
 8013be8:	4602      	mov	r2, r0
 8013bea:	460b      	mov	r3, r1
 8013bec:	4613      	mov	r3, r2
 8013bee:	60fb      	str	r3, [r7, #12]
 8013bf0:	e04a      	b.n	8013c88 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013bf2:	4b31      	ldr	r3, [pc, #196]	; (8013cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013bf4:	685b      	ldr	r3, [r3, #4]
 8013bf6:	099b      	lsrs	r3, r3, #6
 8013bf8:	461a      	mov	r2, r3
 8013bfa:	f04f 0300 	mov.w	r3, #0
 8013bfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013c02:	f04f 0100 	mov.w	r1, #0
 8013c06:	ea02 0400 	and.w	r4, r2, r0
 8013c0a:	ea03 0501 	and.w	r5, r3, r1
 8013c0e:	4620      	mov	r0, r4
 8013c10:	4629      	mov	r1, r5
 8013c12:	f04f 0200 	mov.w	r2, #0
 8013c16:	f04f 0300 	mov.w	r3, #0
 8013c1a:	014b      	lsls	r3, r1, #5
 8013c1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8013c20:	0142      	lsls	r2, r0, #5
 8013c22:	4610      	mov	r0, r2
 8013c24:	4619      	mov	r1, r3
 8013c26:	1b00      	subs	r0, r0, r4
 8013c28:	eb61 0105 	sbc.w	r1, r1, r5
 8013c2c:	f04f 0200 	mov.w	r2, #0
 8013c30:	f04f 0300 	mov.w	r3, #0
 8013c34:	018b      	lsls	r3, r1, #6
 8013c36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8013c3a:	0182      	lsls	r2, r0, #6
 8013c3c:	1a12      	subs	r2, r2, r0
 8013c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8013c42:	f04f 0000 	mov.w	r0, #0
 8013c46:	f04f 0100 	mov.w	r1, #0
 8013c4a:	00d9      	lsls	r1, r3, #3
 8013c4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013c50:	00d0      	lsls	r0, r2, #3
 8013c52:	4602      	mov	r2, r0
 8013c54:	460b      	mov	r3, r1
 8013c56:	1912      	adds	r2, r2, r4
 8013c58:	eb45 0303 	adc.w	r3, r5, r3
 8013c5c:	f04f 0000 	mov.w	r0, #0
 8013c60:	f04f 0100 	mov.w	r1, #0
 8013c64:	0299      	lsls	r1, r3, #10
 8013c66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8013c6a:	0290      	lsls	r0, r2, #10
 8013c6c:	4602      	mov	r2, r0
 8013c6e:	460b      	mov	r3, r1
 8013c70:	4610      	mov	r0, r2
 8013c72:	4619      	mov	r1, r3
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	461a      	mov	r2, r3
 8013c78:	f04f 0300 	mov.w	r3, #0
 8013c7c:	f7ec fb50 	bl	8000320 <__aeabi_uldivmod>
 8013c80:	4602      	mov	r2, r0
 8013c82:	460b      	mov	r3, r1
 8013c84:	4613      	mov	r3, r2
 8013c86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8013c88:	4b0b      	ldr	r3, [pc, #44]	; (8013cb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013c8a:	685b      	ldr	r3, [r3, #4]
 8013c8c:	0c1b      	lsrs	r3, r3, #16
 8013c8e:	f003 0303 	and.w	r3, r3, #3
 8013c92:	3301      	adds	r3, #1
 8013c94:	005b      	lsls	r3, r3, #1
 8013c96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8013c98:	68fa      	ldr	r2, [r7, #12]
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ca0:	60bb      	str	r3, [r7, #8]
      break;
 8013ca2:	e002      	b.n	8013caa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013ca4:	4b05      	ldr	r3, [pc, #20]	; (8013cbc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8013ca6:	60bb      	str	r3, [r7, #8]
      break;
 8013ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013caa:	68bb      	ldr	r3, [r7, #8]
}
 8013cac:	4618      	mov	r0, r3
 8013cae:	3710      	adds	r7, #16
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8013cb6:	bf00      	nop
 8013cb8:	40023800 	.word	0x40023800
 8013cbc:	00f42400 	.word	0x00f42400
 8013cc0:	007a1200 	.word	0x007a1200

08013cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013cc4:	b480      	push	{r7}
 8013cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013cc8:	4b03      	ldr	r3, [pc, #12]	; (8013cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8013cca:	681b      	ldr	r3, [r3, #0]
}
 8013ccc:	4618      	mov	r0, r3
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd4:	4770      	bx	lr
 8013cd6:	bf00      	nop
 8013cd8:	20000018 	.word	0x20000018

08013cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013ce0:	f7ff fff0 	bl	8013cc4 <HAL_RCC_GetHCLKFreq>
 8013ce4:	4602      	mov	r2, r0
 8013ce6:	4b05      	ldr	r3, [pc, #20]	; (8013cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8013ce8:	689b      	ldr	r3, [r3, #8]
 8013cea:	0a9b      	lsrs	r3, r3, #10
 8013cec:	f003 0307 	and.w	r3, r3, #7
 8013cf0:	4903      	ldr	r1, [pc, #12]	; (8013d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013cf2:	5ccb      	ldrb	r3, [r1, r3]
 8013cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	bd80      	pop	{r7, pc}
 8013cfc:	40023800 	.word	0x40023800
 8013d00:	08015588 	.word	0x08015588

08013d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8013d08:	f7ff ffdc 	bl	8013cc4 <HAL_RCC_GetHCLKFreq>
 8013d0c:	4602      	mov	r2, r0
 8013d0e:	4b05      	ldr	r3, [pc, #20]	; (8013d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8013d10:	689b      	ldr	r3, [r3, #8]
 8013d12:	0b5b      	lsrs	r3, r3, #13
 8013d14:	f003 0307 	and.w	r3, r3, #7
 8013d18:	4903      	ldr	r1, [pc, #12]	; (8013d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013d1a:	5ccb      	ldrb	r3, [r1, r3]
 8013d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	bd80      	pop	{r7, pc}
 8013d24:	40023800 	.word	0x40023800
 8013d28:	08015588 	.word	0x08015588

08013d2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b082      	sub	sp, #8
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d101      	bne.n	8013d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013d3a:	2301      	movs	r3, #1
 8013d3c:	e03f      	b.n	8013dbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013d44:	b2db      	uxtb	r3, r3
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d106      	bne.n	8013d58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013d52:	6878      	ldr	r0, [r7, #4]
 8013d54:	f7ed f86c 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2224      	movs	r2, #36	; 0x24
 8013d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	68da      	ldr	r2, [r3, #12]
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013d6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8013d70:	6878      	ldr	r0, [r7, #4]
 8013d72:	f000 f929 	bl	8013fc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	691a      	ldr	r2, [r3, #16]
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013d84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	695a      	ldr	r2, [r3, #20]
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013d94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	68da      	ldr	r2, [r3, #12]
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013da4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	2200      	movs	r2, #0
 8013daa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	2220      	movs	r2, #32
 8013db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2220      	movs	r2, #32
 8013db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8013dbc:	2300      	movs	r3, #0
}
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	3708      	adds	r7, #8
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bd80      	pop	{r7, pc}

08013dc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013dc6:	b580      	push	{r7, lr}
 8013dc8:	b08a      	sub	sp, #40	; 0x28
 8013dca:	af02      	add	r7, sp, #8
 8013dcc:	60f8      	str	r0, [r7, #12]
 8013dce:	60b9      	str	r1, [r7, #8]
 8013dd0:	603b      	str	r3, [r7, #0]
 8013dd2:	4613      	mov	r3, r2
 8013dd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013de0:	b2db      	uxtb	r3, r3
 8013de2:	2b20      	cmp	r3, #32
 8013de4:	d17c      	bne.n	8013ee0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8013de6:	68bb      	ldr	r3, [r7, #8]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d002      	beq.n	8013df2 <HAL_UART_Transmit+0x2c>
 8013dec:	88fb      	ldrh	r3, [r7, #6]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d101      	bne.n	8013df6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8013df2:	2301      	movs	r3, #1
 8013df4:	e075      	b.n	8013ee2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	d101      	bne.n	8013e04 <HAL_UART_Transmit+0x3e>
 8013e00:	2302      	movs	r3, #2
 8013e02:	e06e      	b.n	8013ee2 <HAL_UART_Transmit+0x11c>
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	2201      	movs	r2, #1
 8013e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	2200      	movs	r2, #0
 8013e10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	2221      	movs	r2, #33	; 0x21
 8013e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013e1a:	f7fd ff6f 	bl	8011cfc <HAL_GetTick>
 8013e1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	88fa      	ldrh	r2, [r7, #6]
 8013e24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	88fa      	ldrh	r2, [r7, #6]
 8013e2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	689b      	ldr	r3, [r3, #8]
 8013e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013e34:	d108      	bne.n	8013e48 <HAL_UART_Transmit+0x82>
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	691b      	ldr	r3, [r3, #16]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d104      	bne.n	8013e48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8013e3e:	2300      	movs	r3, #0
 8013e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	61bb      	str	r3, [r7, #24]
 8013e46:	e003      	b.n	8013e50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	2200      	movs	r2, #0
 8013e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8013e58:	e02a      	b.n	8013eb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	9300      	str	r3, [sp, #0]
 8013e5e:	697b      	ldr	r3, [r7, #20]
 8013e60:	2200      	movs	r2, #0
 8013e62:	2180      	movs	r1, #128	; 0x80
 8013e64:	68f8      	ldr	r0, [r7, #12]
 8013e66:	f000 f840 	bl	8013eea <UART_WaitOnFlagUntilTimeout>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d001      	beq.n	8013e74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8013e70:	2303      	movs	r3, #3
 8013e72:	e036      	b.n	8013ee2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8013e74:	69fb      	ldr	r3, [r7, #28]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d10b      	bne.n	8013e92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013e7a:	69bb      	ldr	r3, [r7, #24]
 8013e7c:	881b      	ldrh	r3, [r3, #0]
 8013e7e:	461a      	mov	r2, r3
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013e88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8013e8a:	69bb      	ldr	r3, [r7, #24]
 8013e8c:	3302      	adds	r3, #2
 8013e8e:	61bb      	str	r3, [r7, #24]
 8013e90:	e007      	b.n	8013ea2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8013e92:	69fb      	ldr	r3, [r7, #28]
 8013e94:	781a      	ldrb	r2, [r3, #0]
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8013e9c:	69fb      	ldr	r3, [r7, #28]
 8013e9e:	3301      	adds	r3, #1
 8013ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013ea6:	b29b      	uxth	r3, r3
 8013ea8:	3b01      	subs	r3, #1
 8013eaa:	b29a      	uxth	r2, r3
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013eb4:	b29b      	uxth	r3, r3
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d1cf      	bne.n	8013e5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	9300      	str	r3, [sp, #0]
 8013ebe:	697b      	ldr	r3, [r7, #20]
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	2140      	movs	r1, #64	; 0x40
 8013ec4:	68f8      	ldr	r0, [r7, #12]
 8013ec6:	f000 f810 	bl	8013eea <UART_WaitOnFlagUntilTimeout>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d001      	beq.n	8013ed4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8013ed0:	2303      	movs	r3, #3
 8013ed2:	e006      	b.n	8013ee2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	2220      	movs	r2, #32
 8013ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8013edc:	2300      	movs	r3, #0
 8013ede:	e000      	b.n	8013ee2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8013ee0:	2302      	movs	r3, #2
  }
}
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	3720      	adds	r7, #32
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}

08013eea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8013eea:	b580      	push	{r7, lr}
 8013eec:	b090      	sub	sp, #64	; 0x40
 8013eee:	af00      	add	r7, sp, #0
 8013ef0:	60f8      	str	r0, [r7, #12]
 8013ef2:	60b9      	str	r1, [r7, #8]
 8013ef4:	603b      	str	r3, [r7, #0]
 8013ef6:	4613      	mov	r3, r2
 8013ef8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013efa:	e050      	b.n	8013f9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f02:	d04c      	beq.n	8013f9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8013f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d007      	beq.n	8013f1a <UART_WaitOnFlagUntilTimeout+0x30>
 8013f0a:	f7fd fef7 	bl	8011cfc <HAL_GetTick>
 8013f0e:	4602      	mov	r2, r0
 8013f10:	683b      	ldr	r3, [r7, #0]
 8013f12:	1ad3      	subs	r3, r2, r3
 8013f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f16:	429a      	cmp	r2, r3
 8013f18:	d241      	bcs.n	8013f9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	330c      	adds	r3, #12
 8013f20:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f24:	e853 3f00 	ldrex	r3, [r3]
 8013f28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	330c      	adds	r3, #12
 8013f38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013f3a:	637a      	str	r2, [r7, #52]	; 0x34
 8013f3c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f42:	e841 2300 	strex	r3, r2, [r1]
 8013f46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d1e5      	bne.n	8013f1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	3314      	adds	r3, #20
 8013f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f56:	697b      	ldr	r3, [r7, #20]
 8013f58:	e853 3f00 	ldrex	r3, [r3]
 8013f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	f023 0301 	bic.w	r3, r3, #1
 8013f64:	63bb      	str	r3, [r7, #56]	; 0x38
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	3314      	adds	r3, #20
 8013f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f6e:	623a      	str	r2, [r7, #32]
 8013f70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f72:	69f9      	ldr	r1, [r7, #28]
 8013f74:	6a3a      	ldr	r2, [r7, #32]
 8013f76:	e841 2300 	strex	r3, r2, [r1]
 8013f7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8013f7c:	69bb      	ldr	r3, [r7, #24]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d1e5      	bne.n	8013f4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	2220      	movs	r2, #32
 8013f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	2220      	movs	r2, #32
 8013f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	2200      	movs	r2, #0
 8013f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8013f9a:	2303      	movs	r3, #3
 8013f9c:	e00f      	b.n	8013fbe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	681a      	ldr	r2, [r3, #0]
 8013fa4:	68bb      	ldr	r3, [r7, #8]
 8013fa6:	4013      	ands	r3, r2
 8013fa8:	68ba      	ldr	r2, [r7, #8]
 8013faa:	429a      	cmp	r2, r3
 8013fac:	bf0c      	ite	eq
 8013fae:	2301      	moveq	r3, #1
 8013fb0:	2300      	movne	r3, #0
 8013fb2:	b2db      	uxtb	r3, r3
 8013fb4:	461a      	mov	r2, r3
 8013fb6:	79fb      	ldrb	r3, [r7, #7]
 8013fb8:	429a      	cmp	r2, r3
 8013fba:	d09f      	beq.n	8013efc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013fbc:	2300      	movs	r3, #0
}
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	3740      	adds	r7, #64	; 0x40
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}
	...

08013fc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fcc:	b09f      	sub	sp, #124	; 0x7c
 8013fce:	af00      	add	r7, sp, #0
 8013fd0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	691b      	ldr	r3, [r3, #16]
 8013fd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8013fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fde:	68d9      	ldr	r1, [r3, #12]
 8013fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fe2:	681a      	ldr	r2, [r3, #0]
 8013fe4:	ea40 0301 	orr.w	r3, r0, r1
 8013fe8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8013fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fec:	689a      	ldr	r2, [r3, #8]
 8013fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ff0:	691b      	ldr	r3, [r3, #16]
 8013ff2:	431a      	orrs	r2, r3
 8013ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ff6:	695b      	ldr	r3, [r3, #20]
 8013ff8:	431a      	orrs	r2, r3
 8013ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ffc:	69db      	ldr	r3, [r3, #28]
 8013ffe:	4313      	orrs	r3, r2
 8014000:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8014002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	68db      	ldr	r3, [r3, #12]
 8014008:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801400c:	f021 010c 	bic.w	r1, r1, #12
 8014010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014012:	681a      	ldr	r2, [r3, #0]
 8014014:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014016:	430b      	orrs	r3, r1
 8014018:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801401a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	695b      	ldr	r3, [r3, #20]
 8014020:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8014024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014026:	6999      	ldr	r1, [r3, #24]
 8014028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801402a:	681a      	ldr	r2, [r3, #0]
 801402c:	ea40 0301 	orr.w	r3, r0, r1
 8014030:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014034:	681a      	ldr	r2, [r3, #0]
 8014036:	4bc5      	ldr	r3, [pc, #788]	; (801434c <UART_SetConfig+0x384>)
 8014038:	429a      	cmp	r2, r3
 801403a:	d004      	beq.n	8014046 <UART_SetConfig+0x7e>
 801403c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801403e:	681a      	ldr	r2, [r3, #0]
 8014040:	4bc3      	ldr	r3, [pc, #780]	; (8014350 <UART_SetConfig+0x388>)
 8014042:	429a      	cmp	r2, r3
 8014044:	d103      	bne.n	801404e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8014046:	f7ff fe5d 	bl	8013d04 <HAL_RCC_GetPCLK2Freq>
 801404a:	6778      	str	r0, [r7, #116]	; 0x74
 801404c:	e002      	b.n	8014054 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801404e:	f7ff fe45 	bl	8013cdc <HAL_RCC_GetPCLK1Freq>
 8014052:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014056:	69db      	ldr	r3, [r3, #28]
 8014058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801405c:	f040 80b6 	bne.w	80141cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014062:	461c      	mov	r4, r3
 8014064:	f04f 0500 	mov.w	r5, #0
 8014068:	4622      	mov	r2, r4
 801406a:	462b      	mov	r3, r5
 801406c:	1891      	adds	r1, r2, r2
 801406e:	6439      	str	r1, [r7, #64]	; 0x40
 8014070:	415b      	adcs	r3, r3
 8014072:	647b      	str	r3, [r7, #68]	; 0x44
 8014074:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8014078:	1912      	adds	r2, r2, r4
 801407a:	eb45 0303 	adc.w	r3, r5, r3
 801407e:	f04f 0000 	mov.w	r0, #0
 8014082:	f04f 0100 	mov.w	r1, #0
 8014086:	00d9      	lsls	r1, r3, #3
 8014088:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801408c:	00d0      	lsls	r0, r2, #3
 801408e:	4602      	mov	r2, r0
 8014090:	460b      	mov	r3, r1
 8014092:	1911      	adds	r1, r2, r4
 8014094:	6639      	str	r1, [r7, #96]	; 0x60
 8014096:	416b      	adcs	r3, r5
 8014098:	667b      	str	r3, [r7, #100]	; 0x64
 801409a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801409c:	685b      	ldr	r3, [r3, #4]
 801409e:	461a      	mov	r2, r3
 80140a0:	f04f 0300 	mov.w	r3, #0
 80140a4:	1891      	adds	r1, r2, r2
 80140a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80140a8:	415b      	adcs	r3, r3
 80140aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80140ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80140b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80140b4:	f7ec f934 	bl	8000320 <__aeabi_uldivmod>
 80140b8:	4602      	mov	r2, r0
 80140ba:	460b      	mov	r3, r1
 80140bc:	4ba5      	ldr	r3, [pc, #660]	; (8014354 <UART_SetConfig+0x38c>)
 80140be:	fba3 2302 	umull	r2, r3, r3, r2
 80140c2:	095b      	lsrs	r3, r3, #5
 80140c4:	011e      	lsls	r6, r3, #4
 80140c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80140c8:	461c      	mov	r4, r3
 80140ca:	f04f 0500 	mov.w	r5, #0
 80140ce:	4622      	mov	r2, r4
 80140d0:	462b      	mov	r3, r5
 80140d2:	1891      	adds	r1, r2, r2
 80140d4:	6339      	str	r1, [r7, #48]	; 0x30
 80140d6:	415b      	adcs	r3, r3
 80140d8:	637b      	str	r3, [r7, #52]	; 0x34
 80140da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80140de:	1912      	adds	r2, r2, r4
 80140e0:	eb45 0303 	adc.w	r3, r5, r3
 80140e4:	f04f 0000 	mov.w	r0, #0
 80140e8:	f04f 0100 	mov.w	r1, #0
 80140ec:	00d9      	lsls	r1, r3, #3
 80140ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80140f2:	00d0      	lsls	r0, r2, #3
 80140f4:	4602      	mov	r2, r0
 80140f6:	460b      	mov	r3, r1
 80140f8:	1911      	adds	r1, r2, r4
 80140fa:	65b9      	str	r1, [r7, #88]	; 0x58
 80140fc:	416b      	adcs	r3, r5
 80140fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014102:	685b      	ldr	r3, [r3, #4]
 8014104:	461a      	mov	r2, r3
 8014106:	f04f 0300 	mov.w	r3, #0
 801410a:	1891      	adds	r1, r2, r2
 801410c:	62b9      	str	r1, [r7, #40]	; 0x28
 801410e:	415b      	adcs	r3, r3
 8014110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014112:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8014116:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801411a:	f7ec f901 	bl	8000320 <__aeabi_uldivmod>
 801411e:	4602      	mov	r2, r0
 8014120:	460b      	mov	r3, r1
 8014122:	4b8c      	ldr	r3, [pc, #560]	; (8014354 <UART_SetConfig+0x38c>)
 8014124:	fba3 1302 	umull	r1, r3, r3, r2
 8014128:	095b      	lsrs	r3, r3, #5
 801412a:	2164      	movs	r1, #100	; 0x64
 801412c:	fb01 f303 	mul.w	r3, r1, r3
 8014130:	1ad3      	subs	r3, r2, r3
 8014132:	00db      	lsls	r3, r3, #3
 8014134:	3332      	adds	r3, #50	; 0x32
 8014136:	4a87      	ldr	r2, [pc, #540]	; (8014354 <UART_SetConfig+0x38c>)
 8014138:	fba2 2303 	umull	r2, r3, r2, r3
 801413c:	095b      	lsrs	r3, r3, #5
 801413e:	005b      	lsls	r3, r3, #1
 8014140:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014144:	441e      	add	r6, r3
 8014146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014148:	4618      	mov	r0, r3
 801414a:	f04f 0100 	mov.w	r1, #0
 801414e:	4602      	mov	r2, r0
 8014150:	460b      	mov	r3, r1
 8014152:	1894      	adds	r4, r2, r2
 8014154:	623c      	str	r4, [r7, #32]
 8014156:	415b      	adcs	r3, r3
 8014158:	627b      	str	r3, [r7, #36]	; 0x24
 801415a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801415e:	1812      	adds	r2, r2, r0
 8014160:	eb41 0303 	adc.w	r3, r1, r3
 8014164:	f04f 0400 	mov.w	r4, #0
 8014168:	f04f 0500 	mov.w	r5, #0
 801416c:	00dd      	lsls	r5, r3, #3
 801416e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014172:	00d4      	lsls	r4, r2, #3
 8014174:	4622      	mov	r2, r4
 8014176:	462b      	mov	r3, r5
 8014178:	1814      	adds	r4, r2, r0
 801417a:	653c      	str	r4, [r7, #80]	; 0x50
 801417c:	414b      	adcs	r3, r1
 801417e:	657b      	str	r3, [r7, #84]	; 0x54
 8014180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014182:	685b      	ldr	r3, [r3, #4]
 8014184:	461a      	mov	r2, r3
 8014186:	f04f 0300 	mov.w	r3, #0
 801418a:	1891      	adds	r1, r2, r2
 801418c:	61b9      	str	r1, [r7, #24]
 801418e:	415b      	adcs	r3, r3
 8014190:	61fb      	str	r3, [r7, #28]
 8014192:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014196:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801419a:	f7ec f8c1 	bl	8000320 <__aeabi_uldivmod>
 801419e:	4602      	mov	r2, r0
 80141a0:	460b      	mov	r3, r1
 80141a2:	4b6c      	ldr	r3, [pc, #432]	; (8014354 <UART_SetConfig+0x38c>)
 80141a4:	fba3 1302 	umull	r1, r3, r3, r2
 80141a8:	095b      	lsrs	r3, r3, #5
 80141aa:	2164      	movs	r1, #100	; 0x64
 80141ac:	fb01 f303 	mul.w	r3, r1, r3
 80141b0:	1ad3      	subs	r3, r2, r3
 80141b2:	00db      	lsls	r3, r3, #3
 80141b4:	3332      	adds	r3, #50	; 0x32
 80141b6:	4a67      	ldr	r2, [pc, #412]	; (8014354 <UART_SetConfig+0x38c>)
 80141b8:	fba2 2303 	umull	r2, r3, r2, r3
 80141bc:	095b      	lsrs	r3, r3, #5
 80141be:	f003 0207 	and.w	r2, r3, #7
 80141c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	4432      	add	r2, r6
 80141c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80141ca:	e0b9      	b.n	8014340 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80141cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80141ce:	461c      	mov	r4, r3
 80141d0:	f04f 0500 	mov.w	r5, #0
 80141d4:	4622      	mov	r2, r4
 80141d6:	462b      	mov	r3, r5
 80141d8:	1891      	adds	r1, r2, r2
 80141da:	6139      	str	r1, [r7, #16]
 80141dc:	415b      	adcs	r3, r3
 80141de:	617b      	str	r3, [r7, #20]
 80141e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80141e4:	1912      	adds	r2, r2, r4
 80141e6:	eb45 0303 	adc.w	r3, r5, r3
 80141ea:	f04f 0000 	mov.w	r0, #0
 80141ee:	f04f 0100 	mov.w	r1, #0
 80141f2:	00d9      	lsls	r1, r3, #3
 80141f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80141f8:	00d0      	lsls	r0, r2, #3
 80141fa:	4602      	mov	r2, r0
 80141fc:	460b      	mov	r3, r1
 80141fe:	eb12 0804 	adds.w	r8, r2, r4
 8014202:	eb43 0905 	adc.w	r9, r3, r5
 8014206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014208:	685b      	ldr	r3, [r3, #4]
 801420a:	4618      	mov	r0, r3
 801420c:	f04f 0100 	mov.w	r1, #0
 8014210:	f04f 0200 	mov.w	r2, #0
 8014214:	f04f 0300 	mov.w	r3, #0
 8014218:	008b      	lsls	r3, r1, #2
 801421a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801421e:	0082      	lsls	r2, r0, #2
 8014220:	4640      	mov	r0, r8
 8014222:	4649      	mov	r1, r9
 8014224:	f7ec f87c 	bl	8000320 <__aeabi_uldivmod>
 8014228:	4602      	mov	r2, r0
 801422a:	460b      	mov	r3, r1
 801422c:	4b49      	ldr	r3, [pc, #292]	; (8014354 <UART_SetConfig+0x38c>)
 801422e:	fba3 2302 	umull	r2, r3, r3, r2
 8014232:	095b      	lsrs	r3, r3, #5
 8014234:	011e      	lsls	r6, r3, #4
 8014236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014238:	4618      	mov	r0, r3
 801423a:	f04f 0100 	mov.w	r1, #0
 801423e:	4602      	mov	r2, r0
 8014240:	460b      	mov	r3, r1
 8014242:	1894      	adds	r4, r2, r2
 8014244:	60bc      	str	r4, [r7, #8]
 8014246:	415b      	adcs	r3, r3
 8014248:	60fb      	str	r3, [r7, #12]
 801424a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801424e:	1812      	adds	r2, r2, r0
 8014250:	eb41 0303 	adc.w	r3, r1, r3
 8014254:	f04f 0400 	mov.w	r4, #0
 8014258:	f04f 0500 	mov.w	r5, #0
 801425c:	00dd      	lsls	r5, r3, #3
 801425e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014262:	00d4      	lsls	r4, r2, #3
 8014264:	4622      	mov	r2, r4
 8014266:	462b      	mov	r3, r5
 8014268:	1814      	adds	r4, r2, r0
 801426a:	64bc      	str	r4, [r7, #72]	; 0x48
 801426c:	414b      	adcs	r3, r1
 801426e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014272:	685b      	ldr	r3, [r3, #4]
 8014274:	4618      	mov	r0, r3
 8014276:	f04f 0100 	mov.w	r1, #0
 801427a:	f04f 0200 	mov.w	r2, #0
 801427e:	f04f 0300 	mov.w	r3, #0
 8014282:	008b      	lsls	r3, r1, #2
 8014284:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8014288:	0082      	lsls	r2, r0, #2
 801428a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801428e:	f7ec f847 	bl	8000320 <__aeabi_uldivmod>
 8014292:	4602      	mov	r2, r0
 8014294:	460b      	mov	r3, r1
 8014296:	4b2f      	ldr	r3, [pc, #188]	; (8014354 <UART_SetConfig+0x38c>)
 8014298:	fba3 1302 	umull	r1, r3, r3, r2
 801429c:	095b      	lsrs	r3, r3, #5
 801429e:	2164      	movs	r1, #100	; 0x64
 80142a0:	fb01 f303 	mul.w	r3, r1, r3
 80142a4:	1ad3      	subs	r3, r2, r3
 80142a6:	011b      	lsls	r3, r3, #4
 80142a8:	3332      	adds	r3, #50	; 0x32
 80142aa:	4a2a      	ldr	r2, [pc, #168]	; (8014354 <UART_SetConfig+0x38c>)
 80142ac:	fba2 2303 	umull	r2, r3, r2, r3
 80142b0:	095b      	lsrs	r3, r3, #5
 80142b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80142b6:	441e      	add	r6, r3
 80142b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80142ba:	4618      	mov	r0, r3
 80142bc:	f04f 0100 	mov.w	r1, #0
 80142c0:	4602      	mov	r2, r0
 80142c2:	460b      	mov	r3, r1
 80142c4:	1894      	adds	r4, r2, r2
 80142c6:	603c      	str	r4, [r7, #0]
 80142c8:	415b      	adcs	r3, r3
 80142ca:	607b      	str	r3, [r7, #4]
 80142cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80142d0:	1812      	adds	r2, r2, r0
 80142d2:	eb41 0303 	adc.w	r3, r1, r3
 80142d6:	f04f 0400 	mov.w	r4, #0
 80142da:	f04f 0500 	mov.w	r5, #0
 80142de:	00dd      	lsls	r5, r3, #3
 80142e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80142e4:	00d4      	lsls	r4, r2, #3
 80142e6:	4622      	mov	r2, r4
 80142e8:	462b      	mov	r3, r5
 80142ea:	eb12 0a00 	adds.w	sl, r2, r0
 80142ee:	eb43 0b01 	adc.w	fp, r3, r1
 80142f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142f4:	685b      	ldr	r3, [r3, #4]
 80142f6:	4618      	mov	r0, r3
 80142f8:	f04f 0100 	mov.w	r1, #0
 80142fc:	f04f 0200 	mov.w	r2, #0
 8014300:	f04f 0300 	mov.w	r3, #0
 8014304:	008b      	lsls	r3, r1, #2
 8014306:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801430a:	0082      	lsls	r2, r0, #2
 801430c:	4650      	mov	r0, sl
 801430e:	4659      	mov	r1, fp
 8014310:	f7ec f806 	bl	8000320 <__aeabi_uldivmod>
 8014314:	4602      	mov	r2, r0
 8014316:	460b      	mov	r3, r1
 8014318:	4b0e      	ldr	r3, [pc, #56]	; (8014354 <UART_SetConfig+0x38c>)
 801431a:	fba3 1302 	umull	r1, r3, r3, r2
 801431e:	095b      	lsrs	r3, r3, #5
 8014320:	2164      	movs	r1, #100	; 0x64
 8014322:	fb01 f303 	mul.w	r3, r1, r3
 8014326:	1ad3      	subs	r3, r2, r3
 8014328:	011b      	lsls	r3, r3, #4
 801432a:	3332      	adds	r3, #50	; 0x32
 801432c:	4a09      	ldr	r2, [pc, #36]	; (8014354 <UART_SetConfig+0x38c>)
 801432e:	fba2 2303 	umull	r2, r3, r2, r3
 8014332:	095b      	lsrs	r3, r3, #5
 8014334:	f003 020f 	and.w	r2, r3, #15
 8014338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	4432      	add	r2, r6
 801433e:	609a      	str	r2, [r3, #8]
}
 8014340:	bf00      	nop
 8014342:	377c      	adds	r7, #124	; 0x7c
 8014344:	46bd      	mov	sp, r7
 8014346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801434a:	bf00      	nop
 801434c:	40011000 	.word	0x40011000
 8014350:	40011400 	.word	0x40011400
 8014354:	51eb851f 	.word	0x51eb851f

08014358 <__errno>:
 8014358:	4b01      	ldr	r3, [pc, #4]	; (8014360 <__errno+0x8>)
 801435a:	6818      	ldr	r0, [r3, #0]
 801435c:	4770      	bx	lr
 801435e:	bf00      	nop
 8014360:	20000088 	.word	0x20000088

08014364 <__libc_init_array>:
 8014364:	b570      	push	{r4, r5, r6, lr}
 8014366:	4d0d      	ldr	r5, [pc, #52]	; (801439c <__libc_init_array+0x38>)
 8014368:	4c0d      	ldr	r4, [pc, #52]	; (80143a0 <__libc_init_array+0x3c>)
 801436a:	1b64      	subs	r4, r4, r5
 801436c:	10a4      	asrs	r4, r4, #2
 801436e:	2600      	movs	r6, #0
 8014370:	42a6      	cmp	r6, r4
 8014372:	d109      	bne.n	8014388 <__libc_init_array+0x24>
 8014374:	4d0b      	ldr	r5, [pc, #44]	; (80143a4 <__libc_init_array+0x40>)
 8014376:	4c0c      	ldr	r4, [pc, #48]	; (80143a8 <__libc_init_array+0x44>)
 8014378:	f001 f80e 	bl	8015398 <_init>
 801437c:	1b64      	subs	r4, r4, r5
 801437e:	10a4      	asrs	r4, r4, #2
 8014380:	2600      	movs	r6, #0
 8014382:	42a6      	cmp	r6, r4
 8014384:	d105      	bne.n	8014392 <__libc_init_array+0x2e>
 8014386:	bd70      	pop	{r4, r5, r6, pc}
 8014388:	f855 3b04 	ldr.w	r3, [r5], #4
 801438c:	4798      	blx	r3
 801438e:	3601      	adds	r6, #1
 8014390:	e7ee      	b.n	8014370 <__libc_init_array+0xc>
 8014392:	f855 3b04 	ldr.w	r3, [r5], #4
 8014396:	4798      	blx	r3
 8014398:	3601      	adds	r6, #1
 801439a:	e7f2      	b.n	8014382 <__libc_init_array+0x1e>
 801439c:	08015630 	.word	0x08015630
 80143a0:	08015630 	.word	0x08015630
 80143a4:	08015630 	.word	0x08015630
 80143a8:	08015634 	.word	0x08015634

080143ac <memcpy>:
 80143ac:	440a      	add	r2, r1
 80143ae:	4291      	cmp	r1, r2
 80143b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80143b4:	d100      	bne.n	80143b8 <memcpy+0xc>
 80143b6:	4770      	bx	lr
 80143b8:	b510      	push	{r4, lr}
 80143ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80143be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80143c2:	4291      	cmp	r1, r2
 80143c4:	d1f9      	bne.n	80143ba <memcpy+0xe>
 80143c6:	bd10      	pop	{r4, pc}

080143c8 <memset>:
 80143c8:	4402      	add	r2, r0
 80143ca:	4603      	mov	r3, r0
 80143cc:	4293      	cmp	r3, r2
 80143ce:	d100      	bne.n	80143d2 <memset+0xa>
 80143d0:	4770      	bx	lr
 80143d2:	f803 1b01 	strb.w	r1, [r3], #1
 80143d6:	e7f9      	b.n	80143cc <memset+0x4>

080143d8 <iprintf>:
 80143d8:	b40f      	push	{r0, r1, r2, r3}
 80143da:	4b0a      	ldr	r3, [pc, #40]	; (8014404 <iprintf+0x2c>)
 80143dc:	b513      	push	{r0, r1, r4, lr}
 80143de:	681c      	ldr	r4, [r3, #0]
 80143e0:	b124      	cbz	r4, 80143ec <iprintf+0x14>
 80143e2:	69a3      	ldr	r3, [r4, #24]
 80143e4:	b913      	cbnz	r3, 80143ec <iprintf+0x14>
 80143e6:	4620      	mov	r0, r4
 80143e8:	f000 fa72 	bl	80148d0 <__sinit>
 80143ec:	ab05      	add	r3, sp, #20
 80143ee:	9a04      	ldr	r2, [sp, #16]
 80143f0:	68a1      	ldr	r1, [r4, #8]
 80143f2:	9301      	str	r3, [sp, #4]
 80143f4:	4620      	mov	r0, r4
 80143f6:	f000 fc43 	bl	8014c80 <_vfiprintf_r>
 80143fa:	b002      	add	sp, #8
 80143fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014400:	b004      	add	sp, #16
 8014402:	4770      	bx	lr
 8014404:	20000088 	.word	0x20000088

08014408 <_puts_r>:
 8014408:	b570      	push	{r4, r5, r6, lr}
 801440a:	460e      	mov	r6, r1
 801440c:	4605      	mov	r5, r0
 801440e:	b118      	cbz	r0, 8014418 <_puts_r+0x10>
 8014410:	6983      	ldr	r3, [r0, #24]
 8014412:	b90b      	cbnz	r3, 8014418 <_puts_r+0x10>
 8014414:	f000 fa5c 	bl	80148d0 <__sinit>
 8014418:	69ab      	ldr	r3, [r5, #24]
 801441a:	68ac      	ldr	r4, [r5, #8]
 801441c:	b913      	cbnz	r3, 8014424 <_puts_r+0x1c>
 801441e:	4628      	mov	r0, r5
 8014420:	f000 fa56 	bl	80148d0 <__sinit>
 8014424:	4b2c      	ldr	r3, [pc, #176]	; (80144d8 <_puts_r+0xd0>)
 8014426:	429c      	cmp	r4, r3
 8014428:	d120      	bne.n	801446c <_puts_r+0x64>
 801442a:	686c      	ldr	r4, [r5, #4]
 801442c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801442e:	07db      	lsls	r3, r3, #31
 8014430:	d405      	bmi.n	801443e <_puts_r+0x36>
 8014432:	89a3      	ldrh	r3, [r4, #12]
 8014434:	0598      	lsls	r0, r3, #22
 8014436:	d402      	bmi.n	801443e <_puts_r+0x36>
 8014438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801443a:	f000 fae7 	bl	8014a0c <__retarget_lock_acquire_recursive>
 801443e:	89a3      	ldrh	r3, [r4, #12]
 8014440:	0719      	lsls	r1, r3, #28
 8014442:	d51d      	bpl.n	8014480 <_puts_r+0x78>
 8014444:	6923      	ldr	r3, [r4, #16]
 8014446:	b1db      	cbz	r3, 8014480 <_puts_r+0x78>
 8014448:	3e01      	subs	r6, #1
 801444a:	68a3      	ldr	r3, [r4, #8]
 801444c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014450:	3b01      	subs	r3, #1
 8014452:	60a3      	str	r3, [r4, #8]
 8014454:	bb39      	cbnz	r1, 80144a6 <_puts_r+0x9e>
 8014456:	2b00      	cmp	r3, #0
 8014458:	da38      	bge.n	80144cc <_puts_r+0xc4>
 801445a:	4622      	mov	r2, r4
 801445c:	210a      	movs	r1, #10
 801445e:	4628      	mov	r0, r5
 8014460:	f000 f85c 	bl	801451c <__swbuf_r>
 8014464:	3001      	adds	r0, #1
 8014466:	d011      	beq.n	801448c <_puts_r+0x84>
 8014468:	250a      	movs	r5, #10
 801446a:	e011      	b.n	8014490 <_puts_r+0x88>
 801446c:	4b1b      	ldr	r3, [pc, #108]	; (80144dc <_puts_r+0xd4>)
 801446e:	429c      	cmp	r4, r3
 8014470:	d101      	bne.n	8014476 <_puts_r+0x6e>
 8014472:	68ac      	ldr	r4, [r5, #8]
 8014474:	e7da      	b.n	801442c <_puts_r+0x24>
 8014476:	4b1a      	ldr	r3, [pc, #104]	; (80144e0 <_puts_r+0xd8>)
 8014478:	429c      	cmp	r4, r3
 801447a:	bf08      	it	eq
 801447c:	68ec      	ldreq	r4, [r5, #12]
 801447e:	e7d5      	b.n	801442c <_puts_r+0x24>
 8014480:	4621      	mov	r1, r4
 8014482:	4628      	mov	r0, r5
 8014484:	f000 f89c 	bl	80145c0 <__swsetup_r>
 8014488:	2800      	cmp	r0, #0
 801448a:	d0dd      	beq.n	8014448 <_puts_r+0x40>
 801448c:	f04f 35ff 	mov.w	r5, #4294967295
 8014490:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014492:	07da      	lsls	r2, r3, #31
 8014494:	d405      	bmi.n	80144a2 <_puts_r+0x9a>
 8014496:	89a3      	ldrh	r3, [r4, #12]
 8014498:	059b      	lsls	r3, r3, #22
 801449a:	d402      	bmi.n	80144a2 <_puts_r+0x9a>
 801449c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801449e:	f000 fab6 	bl	8014a0e <__retarget_lock_release_recursive>
 80144a2:	4628      	mov	r0, r5
 80144a4:	bd70      	pop	{r4, r5, r6, pc}
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	da04      	bge.n	80144b4 <_puts_r+0xac>
 80144aa:	69a2      	ldr	r2, [r4, #24]
 80144ac:	429a      	cmp	r2, r3
 80144ae:	dc06      	bgt.n	80144be <_puts_r+0xb6>
 80144b0:	290a      	cmp	r1, #10
 80144b2:	d004      	beq.n	80144be <_puts_r+0xb6>
 80144b4:	6823      	ldr	r3, [r4, #0]
 80144b6:	1c5a      	adds	r2, r3, #1
 80144b8:	6022      	str	r2, [r4, #0]
 80144ba:	7019      	strb	r1, [r3, #0]
 80144bc:	e7c5      	b.n	801444a <_puts_r+0x42>
 80144be:	4622      	mov	r2, r4
 80144c0:	4628      	mov	r0, r5
 80144c2:	f000 f82b 	bl	801451c <__swbuf_r>
 80144c6:	3001      	adds	r0, #1
 80144c8:	d1bf      	bne.n	801444a <_puts_r+0x42>
 80144ca:	e7df      	b.n	801448c <_puts_r+0x84>
 80144cc:	6823      	ldr	r3, [r4, #0]
 80144ce:	250a      	movs	r5, #10
 80144d0:	1c5a      	adds	r2, r3, #1
 80144d2:	6022      	str	r2, [r4, #0]
 80144d4:	701d      	strb	r5, [r3, #0]
 80144d6:	e7db      	b.n	8014490 <_puts_r+0x88>
 80144d8:	080155b4 	.word	0x080155b4
 80144dc:	080155d4 	.word	0x080155d4
 80144e0:	08015594 	.word	0x08015594

080144e4 <puts>:
 80144e4:	4b02      	ldr	r3, [pc, #8]	; (80144f0 <puts+0xc>)
 80144e6:	4601      	mov	r1, r0
 80144e8:	6818      	ldr	r0, [r3, #0]
 80144ea:	f7ff bf8d 	b.w	8014408 <_puts_r>
 80144ee:	bf00      	nop
 80144f0:	20000088 	.word	0x20000088

080144f4 <strncpy>:
 80144f4:	b510      	push	{r4, lr}
 80144f6:	3901      	subs	r1, #1
 80144f8:	4603      	mov	r3, r0
 80144fa:	b132      	cbz	r2, 801450a <strncpy+0x16>
 80144fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014500:	f803 4b01 	strb.w	r4, [r3], #1
 8014504:	3a01      	subs	r2, #1
 8014506:	2c00      	cmp	r4, #0
 8014508:	d1f7      	bne.n	80144fa <strncpy+0x6>
 801450a:	441a      	add	r2, r3
 801450c:	2100      	movs	r1, #0
 801450e:	4293      	cmp	r3, r2
 8014510:	d100      	bne.n	8014514 <strncpy+0x20>
 8014512:	bd10      	pop	{r4, pc}
 8014514:	f803 1b01 	strb.w	r1, [r3], #1
 8014518:	e7f9      	b.n	801450e <strncpy+0x1a>
	...

0801451c <__swbuf_r>:
 801451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801451e:	460e      	mov	r6, r1
 8014520:	4614      	mov	r4, r2
 8014522:	4605      	mov	r5, r0
 8014524:	b118      	cbz	r0, 801452e <__swbuf_r+0x12>
 8014526:	6983      	ldr	r3, [r0, #24]
 8014528:	b90b      	cbnz	r3, 801452e <__swbuf_r+0x12>
 801452a:	f000 f9d1 	bl	80148d0 <__sinit>
 801452e:	4b21      	ldr	r3, [pc, #132]	; (80145b4 <__swbuf_r+0x98>)
 8014530:	429c      	cmp	r4, r3
 8014532:	d12b      	bne.n	801458c <__swbuf_r+0x70>
 8014534:	686c      	ldr	r4, [r5, #4]
 8014536:	69a3      	ldr	r3, [r4, #24]
 8014538:	60a3      	str	r3, [r4, #8]
 801453a:	89a3      	ldrh	r3, [r4, #12]
 801453c:	071a      	lsls	r2, r3, #28
 801453e:	d52f      	bpl.n	80145a0 <__swbuf_r+0x84>
 8014540:	6923      	ldr	r3, [r4, #16]
 8014542:	b36b      	cbz	r3, 80145a0 <__swbuf_r+0x84>
 8014544:	6923      	ldr	r3, [r4, #16]
 8014546:	6820      	ldr	r0, [r4, #0]
 8014548:	1ac0      	subs	r0, r0, r3
 801454a:	6963      	ldr	r3, [r4, #20]
 801454c:	b2f6      	uxtb	r6, r6
 801454e:	4283      	cmp	r3, r0
 8014550:	4637      	mov	r7, r6
 8014552:	dc04      	bgt.n	801455e <__swbuf_r+0x42>
 8014554:	4621      	mov	r1, r4
 8014556:	4628      	mov	r0, r5
 8014558:	f000 f926 	bl	80147a8 <_fflush_r>
 801455c:	bb30      	cbnz	r0, 80145ac <__swbuf_r+0x90>
 801455e:	68a3      	ldr	r3, [r4, #8]
 8014560:	3b01      	subs	r3, #1
 8014562:	60a3      	str	r3, [r4, #8]
 8014564:	6823      	ldr	r3, [r4, #0]
 8014566:	1c5a      	adds	r2, r3, #1
 8014568:	6022      	str	r2, [r4, #0]
 801456a:	701e      	strb	r6, [r3, #0]
 801456c:	6963      	ldr	r3, [r4, #20]
 801456e:	3001      	adds	r0, #1
 8014570:	4283      	cmp	r3, r0
 8014572:	d004      	beq.n	801457e <__swbuf_r+0x62>
 8014574:	89a3      	ldrh	r3, [r4, #12]
 8014576:	07db      	lsls	r3, r3, #31
 8014578:	d506      	bpl.n	8014588 <__swbuf_r+0x6c>
 801457a:	2e0a      	cmp	r6, #10
 801457c:	d104      	bne.n	8014588 <__swbuf_r+0x6c>
 801457e:	4621      	mov	r1, r4
 8014580:	4628      	mov	r0, r5
 8014582:	f000 f911 	bl	80147a8 <_fflush_r>
 8014586:	b988      	cbnz	r0, 80145ac <__swbuf_r+0x90>
 8014588:	4638      	mov	r0, r7
 801458a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801458c:	4b0a      	ldr	r3, [pc, #40]	; (80145b8 <__swbuf_r+0x9c>)
 801458e:	429c      	cmp	r4, r3
 8014590:	d101      	bne.n	8014596 <__swbuf_r+0x7a>
 8014592:	68ac      	ldr	r4, [r5, #8]
 8014594:	e7cf      	b.n	8014536 <__swbuf_r+0x1a>
 8014596:	4b09      	ldr	r3, [pc, #36]	; (80145bc <__swbuf_r+0xa0>)
 8014598:	429c      	cmp	r4, r3
 801459a:	bf08      	it	eq
 801459c:	68ec      	ldreq	r4, [r5, #12]
 801459e:	e7ca      	b.n	8014536 <__swbuf_r+0x1a>
 80145a0:	4621      	mov	r1, r4
 80145a2:	4628      	mov	r0, r5
 80145a4:	f000 f80c 	bl	80145c0 <__swsetup_r>
 80145a8:	2800      	cmp	r0, #0
 80145aa:	d0cb      	beq.n	8014544 <__swbuf_r+0x28>
 80145ac:	f04f 37ff 	mov.w	r7, #4294967295
 80145b0:	e7ea      	b.n	8014588 <__swbuf_r+0x6c>
 80145b2:	bf00      	nop
 80145b4:	080155b4 	.word	0x080155b4
 80145b8:	080155d4 	.word	0x080155d4
 80145bc:	08015594 	.word	0x08015594

080145c0 <__swsetup_r>:
 80145c0:	4b32      	ldr	r3, [pc, #200]	; (801468c <__swsetup_r+0xcc>)
 80145c2:	b570      	push	{r4, r5, r6, lr}
 80145c4:	681d      	ldr	r5, [r3, #0]
 80145c6:	4606      	mov	r6, r0
 80145c8:	460c      	mov	r4, r1
 80145ca:	b125      	cbz	r5, 80145d6 <__swsetup_r+0x16>
 80145cc:	69ab      	ldr	r3, [r5, #24]
 80145ce:	b913      	cbnz	r3, 80145d6 <__swsetup_r+0x16>
 80145d0:	4628      	mov	r0, r5
 80145d2:	f000 f97d 	bl	80148d0 <__sinit>
 80145d6:	4b2e      	ldr	r3, [pc, #184]	; (8014690 <__swsetup_r+0xd0>)
 80145d8:	429c      	cmp	r4, r3
 80145da:	d10f      	bne.n	80145fc <__swsetup_r+0x3c>
 80145dc:	686c      	ldr	r4, [r5, #4]
 80145de:	89a3      	ldrh	r3, [r4, #12]
 80145e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80145e4:	0719      	lsls	r1, r3, #28
 80145e6:	d42c      	bmi.n	8014642 <__swsetup_r+0x82>
 80145e8:	06dd      	lsls	r5, r3, #27
 80145ea:	d411      	bmi.n	8014610 <__swsetup_r+0x50>
 80145ec:	2309      	movs	r3, #9
 80145ee:	6033      	str	r3, [r6, #0]
 80145f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80145f4:	81a3      	strh	r3, [r4, #12]
 80145f6:	f04f 30ff 	mov.w	r0, #4294967295
 80145fa:	e03e      	b.n	801467a <__swsetup_r+0xba>
 80145fc:	4b25      	ldr	r3, [pc, #148]	; (8014694 <__swsetup_r+0xd4>)
 80145fe:	429c      	cmp	r4, r3
 8014600:	d101      	bne.n	8014606 <__swsetup_r+0x46>
 8014602:	68ac      	ldr	r4, [r5, #8]
 8014604:	e7eb      	b.n	80145de <__swsetup_r+0x1e>
 8014606:	4b24      	ldr	r3, [pc, #144]	; (8014698 <__swsetup_r+0xd8>)
 8014608:	429c      	cmp	r4, r3
 801460a:	bf08      	it	eq
 801460c:	68ec      	ldreq	r4, [r5, #12]
 801460e:	e7e6      	b.n	80145de <__swsetup_r+0x1e>
 8014610:	0758      	lsls	r0, r3, #29
 8014612:	d512      	bpl.n	801463a <__swsetup_r+0x7a>
 8014614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014616:	b141      	cbz	r1, 801462a <__swsetup_r+0x6a>
 8014618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801461c:	4299      	cmp	r1, r3
 801461e:	d002      	beq.n	8014626 <__swsetup_r+0x66>
 8014620:	4630      	mov	r0, r6
 8014622:	f000 fa59 	bl	8014ad8 <_free_r>
 8014626:	2300      	movs	r3, #0
 8014628:	6363      	str	r3, [r4, #52]	; 0x34
 801462a:	89a3      	ldrh	r3, [r4, #12]
 801462c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014630:	81a3      	strh	r3, [r4, #12]
 8014632:	2300      	movs	r3, #0
 8014634:	6063      	str	r3, [r4, #4]
 8014636:	6923      	ldr	r3, [r4, #16]
 8014638:	6023      	str	r3, [r4, #0]
 801463a:	89a3      	ldrh	r3, [r4, #12]
 801463c:	f043 0308 	orr.w	r3, r3, #8
 8014640:	81a3      	strh	r3, [r4, #12]
 8014642:	6923      	ldr	r3, [r4, #16]
 8014644:	b94b      	cbnz	r3, 801465a <__swsetup_r+0x9a>
 8014646:	89a3      	ldrh	r3, [r4, #12]
 8014648:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801464c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014650:	d003      	beq.n	801465a <__swsetup_r+0x9a>
 8014652:	4621      	mov	r1, r4
 8014654:	4630      	mov	r0, r6
 8014656:	f000 f9ff 	bl	8014a58 <__smakebuf_r>
 801465a:	89a0      	ldrh	r0, [r4, #12]
 801465c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014660:	f010 0301 	ands.w	r3, r0, #1
 8014664:	d00a      	beq.n	801467c <__swsetup_r+0xbc>
 8014666:	2300      	movs	r3, #0
 8014668:	60a3      	str	r3, [r4, #8]
 801466a:	6963      	ldr	r3, [r4, #20]
 801466c:	425b      	negs	r3, r3
 801466e:	61a3      	str	r3, [r4, #24]
 8014670:	6923      	ldr	r3, [r4, #16]
 8014672:	b943      	cbnz	r3, 8014686 <__swsetup_r+0xc6>
 8014674:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014678:	d1ba      	bne.n	80145f0 <__swsetup_r+0x30>
 801467a:	bd70      	pop	{r4, r5, r6, pc}
 801467c:	0781      	lsls	r1, r0, #30
 801467e:	bf58      	it	pl
 8014680:	6963      	ldrpl	r3, [r4, #20]
 8014682:	60a3      	str	r3, [r4, #8]
 8014684:	e7f4      	b.n	8014670 <__swsetup_r+0xb0>
 8014686:	2000      	movs	r0, #0
 8014688:	e7f7      	b.n	801467a <__swsetup_r+0xba>
 801468a:	bf00      	nop
 801468c:	20000088 	.word	0x20000088
 8014690:	080155b4 	.word	0x080155b4
 8014694:	080155d4 	.word	0x080155d4
 8014698:	08015594 	.word	0x08015594

0801469c <__sflush_r>:
 801469c:	898a      	ldrh	r2, [r1, #12]
 801469e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146a2:	4605      	mov	r5, r0
 80146a4:	0710      	lsls	r0, r2, #28
 80146a6:	460c      	mov	r4, r1
 80146a8:	d458      	bmi.n	801475c <__sflush_r+0xc0>
 80146aa:	684b      	ldr	r3, [r1, #4]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	dc05      	bgt.n	80146bc <__sflush_r+0x20>
 80146b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	dc02      	bgt.n	80146bc <__sflush_r+0x20>
 80146b6:	2000      	movs	r0, #0
 80146b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80146be:	2e00      	cmp	r6, #0
 80146c0:	d0f9      	beq.n	80146b6 <__sflush_r+0x1a>
 80146c2:	2300      	movs	r3, #0
 80146c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80146c8:	682f      	ldr	r7, [r5, #0]
 80146ca:	602b      	str	r3, [r5, #0]
 80146cc:	d032      	beq.n	8014734 <__sflush_r+0x98>
 80146ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80146d0:	89a3      	ldrh	r3, [r4, #12]
 80146d2:	075a      	lsls	r2, r3, #29
 80146d4:	d505      	bpl.n	80146e2 <__sflush_r+0x46>
 80146d6:	6863      	ldr	r3, [r4, #4]
 80146d8:	1ac0      	subs	r0, r0, r3
 80146da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80146dc:	b10b      	cbz	r3, 80146e2 <__sflush_r+0x46>
 80146de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80146e0:	1ac0      	subs	r0, r0, r3
 80146e2:	2300      	movs	r3, #0
 80146e4:	4602      	mov	r2, r0
 80146e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80146e8:	6a21      	ldr	r1, [r4, #32]
 80146ea:	4628      	mov	r0, r5
 80146ec:	47b0      	blx	r6
 80146ee:	1c43      	adds	r3, r0, #1
 80146f0:	89a3      	ldrh	r3, [r4, #12]
 80146f2:	d106      	bne.n	8014702 <__sflush_r+0x66>
 80146f4:	6829      	ldr	r1, [r5, #0]
 80146f6:	291d      	cmp	r1, #29
 80146f8:	d82c      	bhi.n	8014754 <__sflush_r+0xb8>
 80146fa:	4a2a      	ldr	r2, [pc, #168]	; (80147a4 <__sflush_r+0x108>)
 80146fc:	40ca      	lsrs	r2, r1
 80146fe:	07d6      	lsls	r6, r2, #31
 8014700:	d528      	bpl.n	8014754 <__sflush_r+0xb8>
 8014702:	2200      	movs	r2, #0
 8014704:	6062      	str	r2, [r4, #4]
 8014706:	04d9      	lsls	r1, r3, #19
 8014708:	6922      	ldr	r2, [r4, #16]
 801470a:	6022      	str	r2, [r4, #0]
 801470c:	d504      	bpl.n	8014718 <__sflush_r+0x7c>
 801470e:	1c42      	adds	r2, r0, #1
 8014710:	d101      	bne.n	8014716 <__sflush_r+0x7a>
 8014712:	682b      	ldr	r3, [r5, #0]
 8014714:	b903      	cbnz	r3, 8014718 <__sflush_r+0x7c>
 8014716:	6560      	str	r0, [r4, #84]	; 0x54
 8014718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801471a:	602f      	str	r7, [r5, #0]
 801471c:	2900      	cmp	r1, #0
 801471e:	d0ca      	beq.n	80146b6 <__sflush_r+0x1a>
 8014720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014724:	4299      	cmp	r1, r3
 8014726:	d002      	beq.n	801472e <__sflush_r+0x92>
 8014728:	4628      	mov	r0, r5
 801472a:	f000 f9d5 	bl	8014ad8 <_free_r>
 801472e:	2000      	movs	r0, #0
 8014730:	6360      	str	r0, [r4, #52]	; 0x34
 8014732:	e7c1      	b.n	80146b8 <__sflush_r+0x1c>
 8014734:	6a21      	ldr	r1, [r4, #32]
 8014736:	2301      	movs	r3, #1
 8014738:	4628      	mov	r0, r5
 801473a:	47b0      	blx	r6
 801473c:	1c41      	adds	r1, r0, #1
 801473e:	d1c7      	bne.n	80146d0 <__sflush_r+0x34>
 8014740:	682b      	ldr	r3, [r5, #0]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d0c4      	beq.n	80146d0 <__sflush_r+0x34>
 8014746:	2b1d      	cmp	r3, #29
 8014748:	d001      	beq.n	801474e <__sflush_r+0xb2>
 801474a:	2b16      	cmp	r3, #22
 801474c:	d101      	bne.n	8014752 <__sflush_r+0xb6>
 801474e:	602f      	str	r7, [r5, #0]
 8014750:	e7b1      	b.n	80146b6 <__sflush_r+0x1a>
 8014752:	89a3      	ldrh	r3, [r4, #12]
 8014754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014758:	81a3      	strh	r3, [r4, #12]
 801475a:	e7ad      	b.n	80146b8 <__sflush_r+0x1c>
 801475c:	690f      	ldr	r7, [r1, #16]
 801475e:	2f00      	cmp	r7, #0
 8014760:	d0a9      	beq.n	80146b6 <__sflush_r+0x1a>
 8014762:	0793      	lsls	r3, r2, #30
 8014764:	680e      	ldr	r6, [r1, #0]
 8014766:	bf08      	it	eq
 8014768:	694b      	ldreq	r3, [r1, #20]
 801476a:	600f      	str	r7, [r1, #0]
 801476c:	bf18      	it	ne
 801476e:	2300      	movne	r3, #0
 8014770:	eba6 0807 	sub.w	r8, r6, r7
 8014774:	608b      	str	r3, [r1, #8]
 8014776:	f1b8 0f00 	cmp.w	r8, #0
 801477a:	dd9c      	ble.n	80146b6 <__sflush_r+0x1a>
 801477c:	6a21      	ldr	r1, [r4, #32]
 801477e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014780:	4643      	mov	r3, r8
 8014782:	463a      	mov	r2, r7
 8014784:	4628      	mov	r0, r5
 8014786:	47b0      	blx	r6
 8014788:	2800      	cmp	r0, #0
 801478a:	dc06      	bgt.n	801479a <__sflush_r+0xfe>
 801478c:	89a3      	ldrh	r3, [r4, #12]
 801478e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014792:	81a3      	strh	r3, [r4, #12]
 8014794:	f04f 30ff 	mov.w	r0, #4294967295
 8014798:	e78e      	b.n	80146b8 <__sflush_r+0x1c>
 801479a:	4407      	add	r7, r0
 801479c:	eba8 0800 	sub.w	r8, r8, r0
 80147a0:	e7e9      	b.n	8014776 <__sflush_r+0xda>
 80147a2:	bf00      	nop
 80147a4:	20400001 	.word	0x20400001

080147a8 <_fflush_r>:
 80147a8:	b538      	push	{r3, r4, r5, lr}
 80147aa:	690b      	ldr	r3, [r1, #16]
 80147ac:	4605      	mov	r5, r0
 80147ae:	460c      	mov	r4, r1
 80147b0:	b913      	cbnz	r3, 80147b8 <_fflush_r+0x10>
 80147b2:	2500      	movs	r5, #0
 80147b4:	4628      	mov	r0, r5
 80147b6:	bd38      	pop	{r3, r4, r5, pc}
 80147b8:	b118      	cbz	r0, 80147c2 <_fflush_r+0x1a>
 80147ba:	6983      	ldr	r3, [r0, #24]
 80147bc:	b90b      	cbnz	r3, 80147c2 <_fflush_r+0x1a>
 80147be:	f000 f887 	bl	80148d0 <__sinit>
 80147c2:	4b14      	ldr	r3, [pc, #80]	; (8014814 <_fflush_r+0x6c>)
 80147c4:	429c      	cmp	r4, r3
 80147c6:	d11b      	bne.n	8014800 <_fflush_r+0x58>
 80147c8:	686c      	ldr	r4, [r5, #4]
 80147ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d0ef      	beq.n	80147b2 <_fflush_r+0xa>
 80147d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80147d4:	07d0      	lsls	r0, r2, #31
 80147d6:	d404      	bmi.n	80147e2 <_fflush_r+0x3a>
 80147d8:	0599      	lsls	r1, r3, #22
 80147da:	d402      	bmi.n	80147e2 <_fflush_r+0x3a>
 80147dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147de:	f000 f915 	bl	8014a0c <__retarget_lock_acquire_recursive>
 80147e2:	4628      	mov	r0, r5
 80147e4:	4621      	mov	r1, r4
 80147e6:	f7ff ff59 	bl	801469c <__sflush_r>
 80147ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80147ec:	07da      	lsls	r2, r3, #31
 80147ee:	4605      	mov	r5, r0
 80147f0:	d4e0      	bmi.n	80147b4 <_fflush_r+0xc>
 80147f2:	89a3      	ldrh	r3, [r4, #12]
 80147f4:	059b      	lsls	r3, r3, #22
 80147f6:	d4dd      	bmi.n	80147b4 <_fflush_r+0xc>
 80147f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147fa:	f000 f908 	bl	8014a0e <__retarget_lock_release_recursive>
 80147fe:	e7d9      	b.n	80147b4 <_fflush_r+0xc>
 8014800:	4b05      	ldr	r3, [pc, #20]	; (8014818 <_fflush_r+0x70>)
 8014802:	429c      	cmp	r4, r3
 8014804:	d101      	bne.n	801480a <_fflush_r+0x62>
 8014806:	68ac      	ldr	r4, [r5, #8]
 8014808:	e7df      	b.n	80147ca <_fflush_r+0x22>
 801480a:	4b04      	ldr	r3, [pc, #16]	; (801481c <_fflush_r+0x74>)
 801480c:	429c      	cmp	r4, r3
 801480e:	bf08      	it	eq
 8014810:	68ec      	ldreq	r4, [r5, #12]
 8014812:	e7da      	b.n	80147ca <_fflush_r+0x22>
 8014814:	080155b4 	.word	0x080155b4
 8014818:	080155d4 	.word	0x080155d4
 801481c:	08015594 	.word	0x08015594

08014820 <std>:
 8014820:	2300      	movs	r3, #0
 8014822:	b510      	push	{r4, lr}
 8014824:	4604      	mov	r4, r0
 8014826:	e9c0 3300 	strd	r3, r3, [r0]
 801482a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801482e:	6083      	str	r3, [r0, #8]
 8014830:	8181      	strh	r1, [r0, #12]
 8014832:	6643      	str	r3, [r0, #100]	; 0x64
 8014834:	81c2      	strh	r2, [r0, #14]
 8014836:	6183      	str	r3, [r0, #24]
 8014838:	4619      	mov	r1, r3
 801483a:	2208      	movs	r2, #8
 801483c:	305c      	adds	r0, #92	; 0x5c
 801483e:	f7ff fdc3 	bl	80143c8 <memset>
 8014842:	4b05      	ldr	r3, [pc, #20]	; (8014858 <std+0x38>)
 8014844:	6263      	str	r3, [r4, #36]	; 0x24
 8014846:	4b05      	ldr	r3, [pc, #20]	; (801485c <std+0x3c>)
 8014848:	62a3      	str	r3, [r4, #40]	; 0x28
 801484a:	4b05      	ldr	r3, [pc, #20]	; (8014860 <std+0x40>)
 801484c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801484e:	4b05      	ldr	r3, [pc, #20]	; (8014864 <std+0x44>)
 8014850:	6224      	str	r4, [r4, #32]
 8014852:	6323      	str	r3, [r4, #48]	; 0x30
 8014854:	bd10      	pop	{r4, pc}
 8014856:	bf00      	nop
 8014858:	08015229 	.word	0x08015229
 801485c:	0801524b 	.word	0x0801524b
 8014860:	08015283 	.word	0x08015283
 8014864:	080152a7 	.word	0x080152a7

08014868 <_cleanup_r>:
 8014868:	4901      	ldr	r1, [pc, #4]	; (8014870 <_cleanup_r+0x8>)
 801486a:	f000 b8af 	b.w	80149cc <_fwalk_reent>
 801486e:	bf00      	nop
 8014870:	080147a9 	.word	0x080147a9

08014874 <__sfmoreglue>:
 8014874:	b570      	push	{r4, r5, r6, lr}
 8014876:	1e4a      	subs	r2, r1, #1
 8014878:	2568      	movs	r5, #104	; 0x68
 801487a:	4355      	muls	r5, r2
 801487c:	460e      	mov	r6, r1
 801487e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014882:	f000 f979 	bl	8014b78 <_malloc_r>
 8014886:	4604      	mov	r4, r0
 8014888:	b140      	cbz	r0, 801489c <__sfmoreglue+0x28>
 801488a:	2100      	movs	r1, #0
 801488c:	e9c0 1600 	strd	r1, r6, [r0]
 8014890:	300c      	adds	r0, #12
 8014892:	60a0      	str	r0, [r4, #8]
 8014894:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014898:	f7ff fd96 	bl	80143c8 <memset>
 801489c:	4620      	mov	r0, r4
 801489e:	bd70      	pop	{r4, r5, r6, pc}

080148a0 <__sfp_lock_acquire>:
 80148a0:	4801      	ldr	r0, [pc, #4]	; (80148a8 <__sfp_lock_acquire+0x8>)
 80148a2:	f000 b8b3 	b.w	8014a0c <__retarget_lock_acquire_recursive>
 80148a6:	bf00      	nop
 80148a8:	200073f8 	.word	0x200073f8

080148ac <__sfp_lock_release>:
 80148ac:	4801      	ldr	r0, [pc, #4]	; (80148b4 <__sfp_lock_release+0x8>)
 80148ae:	f000 b8ae 	b.w	8014a0e <__retarget_lock_release_recursive>
 80148b2:	bf00      	nop
 80148b4:	200073f8 	.word	0x200073f8

080148b8 <__sinit_lock_acquire>:
 80148b8:	4801      	ldr	r0, [pc, #4]	; (80148c0 <__sinit_lock_acquire+0x8>)
 80148ba:	f000 b8a7 	b.w	8014a0c <__retarget_lock_acquire_recursive>
 80148be:	bf00      	nop
 80148c0:	200073f3 	.word	0x200073f3

080148c4 <__sinit_lock_release>:
 80148c4:	4801      	ldr	r0, [pc, #4]	; (80148cc <__sinit_lock_release+0x8>)
 80148c6:	f000 b8a2 	b.w	8014a0e <__retarget_lock_release_recursive>
 80148ca:	bf00      	nop
 80148cc:	200073f3 	.word	0x200073f3

080148d0 <__sinit>:
 80148d0:	b510      	push	{r4, lr}
 80148d2:	4604      	mov	r4, r0
 80148d4:	f7ff fff0 	bl	80148b8 <__sinit_lock_acquire>
 80148d8:	69a3      	ldr	r3, [r4, #24]
 80148da:	b11b      	cbz	r3, 80148e4 <__sinit+0x14>
 80148dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148e0:	f7ff bff0 	b.w	80148c4 <__sinit_lock_release>
 80148e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80148e8:	6523      	str	r3, [r4, #80]	; 0x50
 80148ea:	4b13      	ldr	r3, [pc, #76]	; (8014938 <__sinit+0x68>)
 80148ec:	4a13      	ldr	r2, [pc, #76]	; (801493c <__sinit+0x6c>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80148f2:	42a3      	cmp	r3, r4
 80148f4:	bf04      	itt	eq
 80148f6:	2301      	moveq	r3, #1
 80148f8:	61a3      	streq	r3, [r4, #24]
 80148fa:	4620      	mov	r0, r4
 80148fc:	f000 f820 	bl	8014940 <__sfp>
 8014900:	6060      	str	r0, [r4, #4]
 8014902:	4620      	mov	r0, r4
 8014904:	f000 f81c 	bl	8014940 <__sfp>
 8014908:	60a0      	str	r0, [r4, #8]
 801490a:	4620      	mov	r0, r4
 801490c:	f000 f818 	bl	8014940 <__sfp>
 8014910:	2200      	movs	r2, #0
 8014912:	60e0      	str	r0, [r4, #12]
 8014914:	2104      	movs	r1, #4
 8014916:	6860      	ldr	r0, [r4, #4]
 8014918:	f7ff ff82 	bl	8014820 <std>
 801491c:	68a0      	ldr	r0, [r4, #8]
 801491e:	2201      	movs	r2, #1
 8014920:	2109      	movs	r1, #9
 8014922:	f7ff ff7d 	bl	8014820 <std>
 8014926:	68e0      	ldr	r0, [r4, #12]
 8014928:	2202      	movs	r2, #2
 801492a:	2112      	movs	r1, #18
 801492c:	f7ff ff78 	bl	8014820 <std>
 8014930:	2301      	movs	r3, #1
 8014932:	61a3      	str	r3, [r4, #24]
 8014934:	e7d2      	b.n	80148dc <__sinit+0xc>
 8014936:	bf00      	nop
 8014938:	08015590 	.word	0x08015590
 801493c:	08014869 	.word	0x08014869

08014940 <__sfp>:
 8014940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014942:	4607      	mov	r7, r0
 8014944:	f7ff ffac 	bl	80148a0 <__sfp_lock_acquire>
 8014948:	4b1e      	ldr	r3, [pc, #120]	; (80149c4 <__sfp+0x84>)
 801494a:	681e      	ldr	r6, [r3, #0]
 801494c:	69b3      	ldr	r3, [r6, #24]
 801494e:	b913      	cbnz	r3, 8014956 <__sfp+0x16>
 8014950:	4630      	mov	r0, r6
 8014952:	f7ff ffbd 	bl	80148d0 <__sinit>
 8014956:	3648      	adds	r6, #72	; 0x48
 8014958:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801495c:	3b01      	subs	r3, #1
 801495e:	d503      	bpl.n	8014968 <__sfp+0x28>
 8014960:	6833      	ldr	r3, [r6, #0]
 8014962:	b30b      	cbz	r3, 80149a8 <__sfp+0x68>
 8014964:	6836      	ldr	r6, [r6, #0]
 8014966:	e7f7      	b.n	8014958 <__sfp+0x18>
 8014968:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801496c:	b9d5      	cbnz	r5, 80149a4 <__sfp+0x64>
 801496e:	4b16      	ldr	r3, [pc, #88]	; (80149c8 <__sfp+0x88>)
 8014970:	60e3      	str	r3, [r4, #12]
 8014972:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014976:	6665      	str	r5, [r4, #100]	; 0x64
 8014978:	f000 f847 	bl	8014a0a <__retarget_lock_init_recursive>
 801497c:	f7ff ff96 	bl	80148ac <__sfp_lock_release>
 8014980:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014984:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014988:	6025      	str	r5, [r4, #0]
 801498a:	61a5      	str	r5, [r4, #24]
 801498c:	2208      	movs	r2, #8
 801498e:	4629      	mov	r1, r5
 8014990:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014994:	f7ff fd18 	bl	80143c8 <memset>
 8014998:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801499c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80149a0:	4620      	mov	r0, r4
 80149a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149a4:	3468      	adds	r4, #104	; 0x68
 80149a6:	e7d9      	b.n	801495c <__sfp+0x1c>
 80149a8:	2104      	movs	r1, #4
 80149aa:	4638      	mov	r0, r7
 80149ac:	f7ff ff62 	bl	8014874 <__sfmoreglue>
 80149b0:	4604      	mov	r4, r0
 80149b2:	6030      	str	r0, [r6, #0]
 80149b4:	2800      	cmp	r0, #0
 80149b6:	d1d5      	bne.n	8014964 <__sfp+0x24>
 80149b8:	f7ff ff78 	bl	80148ac <__sfp_lock_release>
 80149bc:	230c      	movs	r3, #12
 80149be:	603b      	str	r3, [r7, #0]
 80149c0:	e7ee      	b.n	80149a0 <__sfp+0x60>
 80149c2:	bf00      	nop
 80149c4:	08015590 	.word	0x08015590
 80149c8:	ffff0001 	.word	0xffff0001

080149cc <_fwalk_reent>:
 80149cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149d0:	4606      	mov	r6, r0
 80149d2:	4688      	mov	r8, r1
 80149d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80149d8:	2700      	movs	r7, #0
 80149da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80149de:	f1b9 0901 	subs.w	r9, r9, #1
 80149e2:	d505      	bpl.n	80149f0 <_fwalk_reent+0x24>
 80149e4:	6824      	ldr	r4, [r4, #0]
 80149e6:	2c00      	cmp	r4, #0
 80149e8:	d1f7      	bne.n	80149da <_fwalk_reent+0xe>
 80149ea:	4638      	mov	r0, r7
 80149ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149f0:	89ab      	ldrh	r3, [r5, #12]
 80149f2:	2b01      	cmp	r3, #1
 80149f4:	d907      	bls.n	8014a06 <_fwalk_reent+0x3a>
 80149f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80149fa:	3301      	adds	r3, #1
 80149fc:	d003      	beq.n	8014a06 <_fwalk_reent+0x3a>
 80149fe:	4629      	mov	r1, r5
 8014a00:	4630      	mov	r0, r6
 8014a02:	47c0      	blx	r8
 8014a04:	4307      	orrs	r7, r0
 8014a06:	3568      	adds	r5, #104	; 0x68
 8014a08:	e7e9      	b.n	80149de <_fwalk_reent+0x12>

08014a0a <__retarget_lock_init_recursive>:
 8014a0a:	4770      	bx	lr

08014a0c <__retarget_lock_acquire_recursive>:
 8014a0c:	4770      	bx	lr

08014a0e <__retarget_lock_release_recursive>:
 8014a0e:	4770      	bx	lr

08014a10 <__swhatbuf_r>:
 8014a10:	b570      	push	{r4, r5, r6, lr}
 8014a12:	460e      	mov	r6, r1
 8014a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a18:	2900      	cmp	r1, #0
 8014a1a:	b096      	sub	sp, #88	; 0x58
 8014a1c:	4614      	mov	r4, r2
 8014a1e:	461d      	mov	r5, r3
 8014a20:	da07      	bge.n	8014a32 <__swhatbuf_r+0x22>
 8014a22:	2300      	movs	r3, #0
 8014a24:	602b      	str	r3, [r5, #0]
 8014a26:	89b3      	ldrh	r3, [r6, #12]
 8014a28:	061a      	lsls	r2, r3, #24
 8014a2a:	d410      	bmi.n	8014a4e <__swhatbuf_r+0x3e>
 8014a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a30:	e00e      	b.n	8014a50 <__swhatbuf_r+0x40>
 8014a32:	466a      	mov	r2, sp
 8014a34:	f000 fc5e 	bl	80152f4 <_fstat_r>
 8014a38:	2800      	cmp	r0, #0
 8014a3a:	dbf2      	blt.n	8014a22 <__swhatbuf_r+0x12>
 8014a3c:	9a01      	ldr	r2, [sp, #4]
 8014a3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014a42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014a46:	425a      	negs	r2, r3
 8014a48:	415a      	adcs	r2, r3
 8014a4a:	602a      	str	r2, [r5, #0]
 8014a4c:	e7ee      	b.n	8014a2c <__swhatbuf_r+0x1c>
 8014a4e:	2340      	movs	r3, #64	; 0x40
 8014a50:	2000      	movs	r0, #0
 8014a52:	6023      	str	r3, [r4, #0]
 8014a54:	b016      	add	sp, #88	; 0x58
 8014a56:	bd70      	pop	{r4, r5, r6, pc}

08014a58 <__smakebuf_r>:
 8014a58:	898b      	ldrh	r3, [r1, #12]
 8014a5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014a5c:	079d      	lsls	r5, r3, #30
 8014a5e:	4606      	mov	r6, r0
 8014a60:	460c      	mov	r4, r1
 8014a62:	d507      	bpl.n	8014a74 <__smakebuf_r+0x1c>
 8014a64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014a68:	6023      	str	r3, [r4, #0]
 8014a6a:	6123      	str	r3, [r4, #16]
 8014a6c:	2301      	movs	r3, #1
 8014a6e:	6163      	str	r3, [r4, #20]
 8014a70:	b002      	add	sp, #8
 8014a72:	bd70      	pop	{r4, r5, r6, pc}
 8014a74:	ab01      	add	r3, sp, #4
 8014a76:	466a      	mov	r2, sp
 8014a78:	f7ff ffca 	bl	8014a10 <__swhatbuf_r>
 8014a7c:	9900      	ldr	r1, [sp, #0]
 8014a7e:	4605      	mov	r5, r0
 8014a80:	4630      	mov	r0, r6
 8014a82:	f000 f879 	bl	8014b78 <_malloc_r>
 8014a86:	b948      	cbnz	r0, 8014a9c <__smakebuf_r+0x44>
 8014a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a8c:	059a      	lsls	r2, r3, #22
 8014a8e:	d4ef      	bmi.n	8014a70 <__smakebuf_r+0x18>
 8014a90:	f023 0303 	bic.w	r3, r3, #3
 8014a94:	f043 0302 	orr.w	r3, r3, #2
 8014a98:	81a3      	strh	r3, [r4, #12]
 8014a9a:	e7e3      	b.n	8014a64 <__smakebuf_r+0xc>
 8014a9c:	4b0d      	ldr	r3, [pc, #52]	; (8014ad4 <__smakebuf_r+0x7c>)
 8014a9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014aa0:	89a3      	ldrh	r3, [r4, #12]
 8014aa2:	6020      	str	r0, [r4, #0]
 8014aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014aa8:	81a3      	strh	r3, [r4, #12]
 8014aaa:	9b00      	ldr	r3, [sp, #0]
 8014aac:	6163      	str	r3, [r4, #20]
 8014aae:	9b01      	ldr	r3, [sp, #4]
 8014ab0:	6120      	str	r0, [r4, #16]
 8014ab2:	b15b      	cbz	r3, 8014acc <__smakebuf_r+0x74>
 8014ab4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ab8:	4630      	mov	r0, r6
 8014aba:	f000 fc2d 	bl	8015318 <_isatty_r>
 8014abe:	b128      	cbz	r0, 8014acc <__smakebuf_r+0x74>
 8014ac0:	89a3      	ldrh	r3, [r4, #12]
 8014ac2:	f023 0303 	bic.w	r3, r3, #3
 8014ac6:	f043 0301 	orr.w	r3, r3, #1
 8014aca:	81a3      	strh	r3, [r4, #12]
 8014acc:	89a0      	ldrh	r0, [r4, #12]
 8014ace:	4305      	orrs	r5, r0
 8014ad0:	81a5      	strh	r5, [r4, #12]
 8014ad2:	e7cd      	b.n	8014a70 <__smakebuf_r+0x18>
 8014ad4:	08014869 	.word	0x08014869

08014ad8 <_free_r>:
 8014ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014ada:	2900      	cmp	r1, #0
 8014adc:	d048      	beq.n	8014b70 <_free_r+0x98>
 8014ade:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ae2:	9001      	str	r0, [sp, #4]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	f1a1 0404 	sub.w	r4, r1, #4
 8014aea:	bfb8      	it	lt
 8014aec:	18e4      	addlt	r4, r4, r3
 8014aee:	f000 fc35 	bl	801535c <__malloc_lock>
 8014af2:	4a20      	ldr	r2, [pc, #128]	; (8014b74 <_free_r+0x9c>)
 8014af4:	9801      	ldr	r0, [sp, #4]
 8014af6:	6813      	ldr	r3, [r2, #0]
 8014af8:	4615      	mov	r5, r2
 8014afa:	b933      	cbnz	r3, 8014b0a <_free_r+0x32>
 8014afc:	6063      	str	r3, [r4, #4]
 8014afe:	6014      	str	r4, [r2, #0]
 8014b00:	b003      	add	sp, #12
 8014b02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b06:	f000 bc2f 	b.w	8015368 <__malloc_unlock>
 8014b0a:	42a3      	cmp	r3, r4
 8014b0c:	d90b      	bls.n	8014b26 <_free_r+0x4e>
 8014b0e:	6821      	ldr	r1, [r4, #0]
 8014b10:	1862      	adds	r2, r4, r1
 8014b12:	4293      	cmp	r3, r2
 8014b14:	bf04      	itt	eq
 8014b16:	681a      	ldreq	r2, [r3, #0]
 8014b18:	685b      	ldreq	r3, [r3, #4]
 8014b1a:	6063      	str	r3, [r4, #4]
 8014b1c:	bf04      	itt	eq
 8014b1e:	1852      	addeq	r2, r2, r1
 8014b20:	6022      	streq	r2, [r4, #0]
 8014b22:	602c      	str	r4, [r5, #0]
 8014b24:	e7ec      	b.n	8014b00 <_free_r+0x28>
 8014b26:	461a      	mov	r2, r3
 8014b28:	685b      	ldr	r3, [r3, #4]
 8014b2a:	b10b      	cbz	r3, 8014b30 <_free_r+0x58>
 8014b2c:	42a3      	cmp	r3, r4
 8014b2e:	d9fa      	bls.n	8014b26 <_free_r+0x4e>
 8014b30:	6811      	ldr	r1, [r2, #0]
 8014b32:	1855      	adds	r5, r2, r1
 8014b34:	42a5      	cmp	r5, r4
 8014b36:	d10b      	bne.n	8014b50 <_free_r+0x78>
 8014b38:	6824      	ldr	r4, [r4, #0]
 8014b3a:	4421      	add	r1, r4
 8014b3c:	1854      	adds	r4, r2, r1
 8014b3e:	42a3      	cmp	r3, r4
 8014b40:	6011      	str	r1, [r2, #0]
 8014b42:	d1dd      	bne.n	8014b00 <_free_r+0x28>
 8014b44:	681c      	ldr	r4, [r3, #0]
 8014b46:	685b      	ldr	r3, [r3, #4]
 8014b48:	6053      	str	r3, [r2, #4]
 8014b4a:	4421      	add	r1, r4
 8014b4c:	6011      	str	r1, [r2, #0]
 8014b4e:	e7d7      	b.n	8014b00 <_free_r+0x28>
 8014b50:	d902      	bls.n	8014b58 <_free_r+0x80>
 8014b52:	230c      	movs	r3, #12
 8014b54:	6003      	str	r3, [r0, #0]
 8014b56:	e7d3      	b.n	8014b00 <_free_r+0x28>
 8014b58:	6825      	ldr	r5, [r4, #0]
 8014b5a:	1961      	adds	r1, r4, r5
 8014b5c:	428b      	cmp	r3, r1
 8014b5e:	bf04      	itt	eq
 8014b60:	6819      	ldreq	r1, [r3, #0]
 8014b62:	685b      	ldreq	r3, [r3, #4]
 8014b64:	6063      	str	r3, [r4, #4]
 8014b66:	bf04      	itt	eq
 8014b68:	1949      	addeq	r1, r1, r5
 8014b6a:	6021      	streq	r1, [r4, #0]
 8014b6c:	6054      	str	r4, [r2, #4]
 8014b6e:	e7c7      	b.n	8014b00 <_free_r+0x28>
 8014b70:	b003      	add	sp, #12
 8014b72:	bd30      	pop	{r4, r5, pc}
 8014b74:	20007030 	.word	0x20007030

08014b78 <_malloc_r>:
 8014b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b7a:	1ccd      	adds	r5, r1, #3
 8014b7c:	f025 0503 	bic.w	r5, r5, #3
 8014b80:	3508      	adds	r5, #8
 8014b82:	2d0c      	cmp	r5, #12
 8014b84:	bf38      	it	cc
 8014b86:	250c      	movcc	r5, #12
 8014b88:	2d00      	cmp	r5, #0
 8014b8a:	4606      	mov	r6, r0
 8014b8c:	db01      	blt.n	8014b92 <_malloc_r+0x1a>
 8014b8e:	42a9      	cmp	r1, r5
 8014b90:	d903      	bls.n	8014b9a <_malloc_r+0x22>
 8014b92:	230c      	movs	r3, #12
 8014b94:	6033      	str	r3, [r6, #0]
 8014b96:	2000      	movs	r0, #0
 8014b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b9a:	f000 fbdf 	bl	801535c <__malloc_lock>
 8014b9e:	4921      	ldr	r1, [pc, #132]	; (8014c24 <_malloc_r+0xac>)
 8014ba0:	680a      	ldr	r2, [r1, #0]
 8014ba2:	4614      	mov	r4, r2
 8014ba4:	b99c      	cbnz	r4, 8014bce <_malloc_r+0x56>
 8014ba6:	4f20      	ldr	r7, [pc, #128]	; (8014c28 <_malloc_r+0xb0>)
 8014ba8:	683b      	ldr	r3, [r7, #0]
 8014baa:	b923      	cbnz	r3, 8014bb6 <_malloc_r+0x3e>
 8014bac:	4621      	mov	r1, r4
 8014bae:	4630      	mov	r0, r6
 8014bb0:	f000 fb2a 	bl	8015208 <_sbrk_r>
 8014bb4:	6038      	str	r0, [r7, #0]
 8014bb6:	4629      	mov	r1, r5
 8014bb8:	4630      	mov	r0, r6
 8014bba:	f000 fb25 	bl	8015208 <_sbrk_r>
 8014bbe:	1c43      	adds	r3, r0, #1
 8014bc0:	d123      	bne.n	8014c0a <_malloc_r+0x92>
 8014bc2:	230c      	movs	r3, #12
 8014bc4:	6033      	str	r3, [r6, #0]
 8014bc6:	4630      	mov	r0, r6
 8014bc8:	f000 fbce 	bl	8015368 <__malloc_unlock>
 8014bcc:	e7e3      	b.n	8014b96 <_malloc_r+0x1e>
 8014bce:	6823      	ldr	r3, [r4, #0]
 8014bd0:	1b5b      	subs	r3, r3, r5
 8014bd2:	d417      	bmi.n	8014c04 <_malloc_r+0x8c>
 8014bd4:	2b0b      	cmp	r3, #11
 8014bd6:	d903      	bls.n	8014be0 <_malloc_r+0x68>
 8014bd8:	6023      	str	r3, [r4, #0]
 8014bda:	441c      	add	r4, r3
 8014bdc:	6025      	str	r5, [r4, #0]
 8014bde:	e004      	b.n	8014bea <_malloc_r+0x72>
 8014be0:	6863      	ldr	r3, [r4, #4]
 8014be2:	42a2      	cmp	r2, r4
 8014be4:	bf0c      	ite	eq
 8014be6:	600b      	streq	r3, [r1, #0]
 8014be8:	6053      	strne	r3, [r2, #4]
 8014bea:	4630      	mov	r0, r6
 8014bec:	f000 fbbc 	bl	8015368 <__malloc_unlock>
 8014bf0:	f104 000b 	add.w	r0, r4, #11
 8014bf4:	1d23      	adds	r3, r4, #4
 8014bf6:	f020 0007 	bic.w	r0, r0, #7
 8014bfa:	1ac2      	subs	r2, r0, r3
 8014bfc:	d0cc      	beq.n	8014b98 <_malloc_r+0x20>
 8014bfe:	1a1b      	subs	r3, r3, r0
 8014c00:	50a3      	str	r3, [r4, r2]
 8014c02:	e7c9      	b.n	8014b98 <_malloc_r+0x20>
 8014c04:	4622      	mov	r2, r4
 8014c06:	6864      	ldr	r4, [r4, #4]
 8014c08:	e7cc      	b.n	8014ba4 <_malloc_r+0x2c>
 8014c0a:	1cc4      	adds	r4, r0, #3
 8014c0c:	f024 0403 	bic.w	r4, r4, #3
 8014c10:	42a0      	cmp	r0, r4
 8014c12:	d0e3      	beq.n	8014bdc <_malloc_r+0x64>
 8014c14:	1a21      	subs	r1, r4, r0
 8014c16:	4630      	mov	r0, r6
 8014c18:	f000 faf6 	bl	8015208 <_sbrk_r>
 8014c1c:	3001      	adds	r0, #1
 8014c1e:	d1dd      	bne.n	8014bdc <_malloc_r+0x64>
 8014c20:	e7cf      	b.n	8014bc2 <_malloc_r+0x4a>
 8014c22:	bf00      	nop
 8014c24:	20007030 	.word	0x20007030
 8014c28:	20007034 	.word	0x20007034

08014c2c <__sfputc_r>:
 8014c2c:	6893      	ldr	r3, [r2, #8]
 8014c2e:	3b01      	subs	r3, #1
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	b410      	push	{r4}
 8014c34:	6093      	str	r3, [r2, #8]
 8014c36:	da08      	bge.n	8014c4a <__sfputc_r+0x1e>
 8014c38:	6994      	ldr	r4, [r2, #24]
 8014c3a:	42a3      	cmp	r3, r4
 8014c3c:	db01      	blt.n	8014c42 <__sfputc_r+0x16>
 8014c3e:	290a      	cmp	r1, #10
 8014c40:	d103      	bne.n	8014c4a <__sfputc_r+0x1e>
 8014c42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c46:	f7ff bc69 	b.w	801451c <__swbuf_r>
 8014c4a:	6813      	ldr	r3, [r2, #0]
 8014c4c:	1c58      	adds	r0, r3, #1
 8014c4e:	6010      	str	r0, [r2, #0]
 8014c50:	7019      	strb	r1, [r3, #0]
 8014c52:	4608      	mov	r0, r1
 8014c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c58:	4770      	bx	lr

08014c5a <__sfputs_r>:
 8014c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c5c:	4606      	mov	r6, r0
 8014c5e:	460f      	mov	r7, r1
 8014c60:	4614      	mov	r4, r2
 8014c62:	18d5      	adds	r5, r2, r3
 8014c64:	42ac      	cmp	r4, r5
 8014c66:	d101      	bne.n	8014c6c <__sfputs_r+0x12>
 8014c68:	2000      	movs	r0, #0
 8014c6a:	e007      	b.n	8014c7c <__sfputs_r+0x22>
 8014c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c70:	463a      	mov	r2, r7
 8014c72:	4630      	mov	r0, r6
 8014c74:	f7ff ffda 	bl	8014c2c <__sfputc_r>
 8014c78:	1c43      	adds	r3, r0, #1
 8014c7a:	d1f3      	bne.n	8014c64 <__sfputs_r+0xa>
 8014c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014c80 <_vfiprintf_r>:
 8014c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c84:	460d      	mov	r5, r1
 8014c86:	b09d      	sub	sp, #116	; 0x74
 8014c88:	4614      	mov	r4, r2
 8014c8a:	4698      	mov	r8, r3
 8014c8c:	4606      	mov	r6, r0
 8014c8e:	b118      	cbz	r0, 8014c98 <_vfiprintf_r+0x18>
 8014c90:	6983      	ldr	r3, [r0, #24]
 8014c92:	b90b      	cbnz	r3, 8014c98 <_vfiprintf_r+0x18>
 8014c94:	f7ff fe1c 	bl	80148d0 <__sinit>
 8014c98:	4b89      	ldr	r3, [pc, #548]	; (8014ec0 <_vfiprintf_r+0x240>)
 8014c9a:	429d      	cmp	r5, r3
 8014c9c:	d11b      	bne.n	8014cd6 <_vfiprintf_r+0x56>
 8014c9e:	6875      	ldr	r5, [r6, #4]
 8014ca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ca2:	07d9      	lsls	r1, r3, #31
 8014ca4:	d405      	bmi.n	8014cb2 <_vfiprintf_r+0x32>
 8014ca6:	89ab      	ldrh	r3, [r5, #12]
 8014ca8:	059a      	lsls	r2, r3, #22
 8014caa:	d402      	bmi.n	8014cb2 <_vfiprintf_r+0x32>
 8014cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014cae:	f7ff fead 	bl	8014a0c <__retarget_lock_acquire_recursive>
 8014cb2:	89ab      	ldrh	r3, [r5, #12]
 8014cb4:	071b      	lsls	r3, r3, #28
 8014cb6:	d501      	bpl.n	8014cbc <_vfiprintf_r+0x3c>
 8014cb8:	692b      	ldr	r3, [r5, #16]
 8014cba:	b9eb      	cbnz	r3, 8014cf8 <_vfiprintf_r+0x78>
 8014cbc:	4629      	mov	r1, r5
 8014cbe:	4630      	mov	r0, r6
 8014cc0:	f7ff fc7e 	bl	80145c0 <__swsetup_r>
 8014cc4:	b1c0      	cbz	r0, 8014cf8 <_vfiprintf_r+0x78>
 8014cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014cc8:	07dc      	lsls	r4, r3, #31
 8014cca:	d50e      	bpl.n	8014cea <_vfiprintf_r+0x6a>
 8014ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8014cd0:	b01d      	add	sp, #116	; 0x74
 8014cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cd6:	4b7b      	ldr	r3, [pc, #492]	; (8014ec4 <_vfiprintf_r+0x244>)
 8014cd8:	429d      	cmp	r5, r3
 8014cda:	d101      	bne.n	8014ce0 <_vfiprintf_r+0x60>
 8014cdc:	68b5      	ldr	r5, [r6, #8]
 8014cde:	e7df      	b.n	8014ca0 <_vfiprintf_r+0x20>
 8014ce0:	4b79      	ldr	r3, [pc, #484]	; (8014ec8 <_vfiprintf_r+0x248>)
 8014ce2:	429d      	cmp	r5, r3
 8014ce4:	bf08      	it	eq
 8014ce6:	68f5      	ldreq	r5, [r6, #12]
 8014ce8:	e7da      	b.n	8014ca0 <_vfiprintf_r+0x20>
 8014cea:	89ab      	ldrh	r3, [r5, #12]
 8014cec:	0598      	lsls	r0, r3, #22
 8014cee:	d4ed      	bmi.n	8014ccc <_vfiprintf_r+0x4c>
 8014cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014cf2:	f7ff fe8c 	bl	8014a0e <__retarget_lock_release_recursive>
 8014cf6:	e7e9      	b.n	8014ccc <_vfiprintf_r+0x4c>
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8014cfc:	2320      	movs	r3, #32
 8014cfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014d02:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d06:	2330      	movs	r3, #48	; 0x30
 8014d08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014ecc <_vfiprintf_r+0x24c>
 8014d0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014d10:	f04f 0901 	mov.w	r9, #1
 8014d14:	4623      	mov	r3, r4
 8014d16:	469a      	mov	sl, r3
 8014d18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d1c:	b10a      	cbz	r2, 8014d22 <_vfiprintf_r+0xa2>
 8014d1e:	2a25      	cmp	r2, #37	; 0x25
 8014d20:	d1f9      	bne.n	8014d16 <_vfiprintf_r+0x96>
 8014d22:	ebba 0b04 	subs.w	fp, sl, r4
 8014d26:	d00b      	beq.n	8014d40 <_vfiprintf_r+0xc0>
 8014d28:	465b      	mov	r3, fp
 8014d2a:	4622      	mov	r2, r4
 8014d2c:	4629      	mov	r1, r5
 8014d2e:	4630      	mov	r0, r6
 8014d30:	f7ff ff93 	bl	8014c5a <__sfputs_r>
 8014d34:	3001      	adds	r0, #1
 8014d36:	f000 80aa 	beq.w	8014e8e <_vfiprintf_r+0x20e>
 8014d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d3c:	445a      	add	r2, fp
 8014d3e:	9209      	str	r2, [sp, #36]	; 0x24
 8014d40:	f89a 3000 	ldrb.w	r3, [sl]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	f000 80a2 	beq.w	8014e8e <_vfiprintf_r+0x20e>
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8014d50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014d54:	f10a 0a01 	add.w	sl, sl, #1
 8014d58:	9304      	str	r3, [sp, #16]
 8014d5a:	9307      	str	r3, [sp, #28]
 8014d5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014d60:	931a      	str	r3, [sp, #104]	; 0x68
 8014d62:	4654      	mov	r4, sl
 8014d64:	2205      	movs	r2, #5
 8014d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d6a:	4858      	ldr	r0, [pc, #352]	; (8014ecc <_vfiprintf_r+0x24c>)
 8014d6c:	f7eb fa38 	bl	80001e0 <memchr>
 8014d70:	9a04      	ldr	r2, [sp, #16]
 8014d72:	b9d8      	cbnz	r0, 8014dac <_vfiprintf_r+0x12c>
 8014d74:	06d1      	lsls	r1, r2, #27
 8014d76:	bf44      	itt	mi
 8014d78:	2320      	movmi	r3, #32
 8014d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d7e:	0713      	lsls	r3, r2, #28
 8014d80:	bf44      	itt	mi
 8014d82:	232b      	movmi	r3, #43	; 0x2b
 8014d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d88:	f89a 3000 	ldrb.w	r3, [sl]
 8014d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8014d8e:	d015      	beq.n	8014dbc <_vfiprintf_r+0x13c>
 8014d90:	9a07      	ldr	r2, [sp, #28]
 8014d92:	4654      	mov	r4, sl
 8014d94:	2000      	movs	r0, #0
 8014d96:	f04f 0c0a 	mov.w	ip, #10
 8014d9a:	4621      	mov	r1, r4
 8014d9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014da0:	3b30      	subs	r3, #48	; 0x30
 8014da2:	2b09      	cmp	r3, #9
 8014da4:	d94e      	bls.n	8014e44 <_vfiprintf_r+0x1c4>
 8014da6:	b1b0      	cbz	r0, 8014dd6 <_vfiprintf_r+0x156>
 8014da8:	9207      	str	r2, [sp, #28]
 8014daa:	e014      	b.n	8014dd6 <_vfiprintf_r+0x156>
 8014dac:	eba0 0308 	sub.w	r3, r0, r8
 8014db0:	fa09 f303 	lsl.w	r3, r9, r3
 8014db4:	4313      	orrs	r3, r2
 8014db6:	9304      	str	r3, [sp, #16]
 8014db8:	46a2      	mov	sl, r4
 8014dba:	e7d2      	b.n	8014d62 <_vfiprintf_r+0xe2>
 8014dbc:	9b03      	ldr	r3, [sp, #12]
 8014dbe:	1d19      	adds	r1, r3, #4
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	9103      	str	r1, [sp, #12]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	bfbb      	ittet	lt
 8014dc8:	425b      	neglt	r3, r3
 8014dca:	f042 0202 	orrlt.w	r2, r2, #2
 8014dce:	9307      	strge	r3, [sp, #28]
 8014dd0:	9307      	strlt	r3, [sp, #28]
 8014dd2:	bfb8      	it	lt
 8014dd4:	9204      	strlt	r2, [sp, #16]
 8014dd6:	7823      	ldrb	r3, [r4, #0]
 8014dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8014dda:	d10c      	bne.n	8014df6 <_vfiprintf_r+0x176>
 8014ddc:	7863      	ldrb	r3, [r4, #1]
 8014dde:	2b2a      	cmp	r3, #42	; 0x2a
 8014de0:	d135      	bne.n	8014e4e <_vfiprintf_r+0x1ce>
 8014de2:	9b03      	ldr	r3, [sp, #12]
 8014de4:	1d1a      	adds	r2, r3, #4
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	9203      	str	r2, [sp, #12]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	bfb8      	it	lt
 8014dee:	f04f 33ff 	movlt.w	r3, #4294967295
 8014df2:	3402      	adds	r4, #2
 8014df4:	9305      	str	r3, [sp, #20]
 8014df6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014edc <_vfiprintf_r+0x25c>
 8014dfa:	7821      	ldrb	r1, [r4, #0]
 8014dfc:	2203      	movs	r2, #3
 8014dfe:	4650      	mov	r0, sl
 8014e00:	f7eb f9ee 	bl	80001e0 <memchr>
 8014e04:	b140      	cbz	r0, 8014e18 <_vfiprintf_r+0x198>
 8014e06:	2340      	movs	r3, #64	; 0x40
 8014e08:	eba0 000a 	sub.w	r0, r0, sl
 8014e0c:	fa03 f000 	lsl.w	r0, r3, r0
 8014e10:	9b04      	ldr	r3, [sp, #16]
 8014e12:	4303      	orrs	r3, r0
 8014e14:	3401      	adds	r4, #1
 8014e16:	9304      	str	r3, [sp, #16]
 8014e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e1c:	482c      	ldr	r0, [pc, #176]	; (8014ed0 <_vfiprintf_r+0x250>)
 8014e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014e22:	2206      	movs	r2, #6
 8014e24:	f7eb f9dc 	bl	80001e0 <memchr>
 8014e28:	2800      	cmp	r0, #0
 8014e2a:	d03f      	beq.n	8014eac <_vfiprintf_r+0x22c>
 8014e2c:	4b29      	ldr	r3, [pc, #164]	; (8014ed4 <_vfiprintf_r+0x254>)
 8014e2e:	bb1b      	cbnz	r3, 8014e78 <_vfiprintf_r+0x1f8>
 8014e30:	9b03      	ldr	r3, [sp, #12]
 8014e32:	3307      	adds	r3, #7
 8014e34:	f023 0307 	bic.w	r3, r3, #7
 8014e38:	3308      	adds	r3, #8
 8014e3a:	9303      	str	r3, [sp, #12]
 8014e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e3e:	443b      	add	r3, r7
 8014e40:	9309      	str	r3, [sp, #36]	; 0x24
 8014e42:	e767      	b.n	8014d14 <_vfiprintf_r+0x94>
 8014e44:	fb0c 3202 	mla	r2, ip, r2, r3
 8014e48:	460c      	mov	r4, r1
 8014e4a:	2001      	movs	r0, #1
 8014e4c:	e7a5      	b.n	8014d9a <_vfiprintf_r+0x11a>
 8014e4e:	2300      	movs	r3, #0
 8014e50:	3401      	adds	r4, #1
 8014e52:	9305      	str	r3, [sp, #20]
 8014e54:	4619      	mov	r1, r3
 8014e56:	f04f 0c0a 	mov.w	ip, #10
 8014e5a:	4620      	mov	r0, r4
 8014e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e60:	3a30      	subs	r2, #48	; 0x30
 8014e62:	2a09      	cmp	r2, #9
 8014e64:	d903      	bls.n	8014e6e <_vfiprintf_r+0x1ee>
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d0c5      	beq.n	8014df6 <_vfiprintf_r+0x176>
 8014e6a:	9105      	str	r1, [sp, #20]
 8014e6c:	e7c3      	b.n	8014df6 <_vfiprintf_r+0x176>
 8014e6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014e72:	4604      	mov	r4, r0
 8014e74:	2301      	movs	r3, #1
 8014e76:	e7f0      	b.n	8014e5a <_vfiprintf_r+0x1da>
 8014e78:	ab03      	add	r3, sp, #12
 8014e7a:	9300      	str	r3, [sp, #0]
 8014e7c:	462a      	mov	r2, r5
 8014e7e:	4b16      	ldr	r3, [pc, #88]	; (8014ed8 <_vfiprintf_r+0x258>)
 8014e80:	a904      	add	r1, sp, #16
 8014e82:	4630      	mov	r0, r6
 8014e84:	f3af 8000 	nop.w
 8014e88:	4607      	mov	r7, r0
 8014e8a:	1c78      	adds	r0, r7, #1
 8014e8c:	d1d6      	bne.n	8014e3c <_vfiprintf_r+0x1bc>
 8014e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e90:	07d9      	lsls	r1, r3, #31
 8014e92:	d405      	bmi.n	8014ea0 <_vfiprintf_r+0x220>
 8014e94:	89ab      	ldrh	r3, [r5, #12]
 8014e96:	059a      	lsls	r2, r3, #22
 8014e98:	d402      	bmi.n	8014ea0 <_vfiprintf_r+0x220>
 8014e9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014e9c:	f7ff fdb7 	bl	8014a0e <__retarget_lock_release_recursive>
 8014ea0:	89ab      	ldrh	r3, [r5, #12]
 8014ea2:	065b      	lsls	r3, r3, #25
 8014ea4:	f53f af12 	bmi.w	8014ccc <_vfiprintf_r+0x4c>
 8014ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014eaa:	e711      	b.n	8014cd0 <_vfiprintf_r+0x50>
 8014eac:	ab03      	add	r3, sp, #12
 8014eae:	9300      	str	r3, [sp, #0]
 8014eb0:	462a      	mov	r2, r5
 8014eb2:	4b09      	ldr	r3, [pc, #36]	; (8014ed8 <_vfiprintf_r+0x258>)
 8014eb4:	a904      	add	r1, sp, #16
 8014eb6:	4630      	mov	r0, r6
 8014eb8:	f000 f880 	bl	8014fbc <_printf_i>
 8014ebc:	e7e4      	b.n	8014e88 <_vfiprintf_r+0x208>
 8014ebe:	bf00      	nop
 8014ec0:	080155b4 	.word	0x080155b4
 8014ec4:	080155d4 	.word	0x080155d4
 8014ec8:	08015594 	.word	0x08015594
 8014ecc:	080155f4 	.word	0x080155f4
 8014ed0:	080155fe 	.word	0x080155fe
 8014ed4:	00000000 	.word	0x00000000
 8014ed8:	08014c5b 	.word	0x08014c5b
 8014edc:	080155fa 	.word	0x080155fa

08014ee0 <_printf_common>:
 8014ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ee4:	4616      	mov	r6, r2
 8014ee6:	4699      	mov	r9, r3
 8014ee8:	688a      	ldr	r2, [r1, #8]
 8014eea:	690b      	ldr	r3, [r1, #16]
 8014eec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014ef0:	4293      	cmp	r3, r2
 8014ef2:	bfb8      	it	lt
 8014ef4:	4613      	movlt	r3, r2
 8014ef6:	6033      	str	r3, [r6, #0]
 8014ef8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014efc:	4607      	mov	r7, r0
 8014efe:	460c      	mov	r4, r1
 8014f00:	b10a      	cbz	r2, 8014f06 <_printf_common+0x26>
 8014f02:	3301      	adds	r3, #1
 8014f04:	6033      	str	r3, [r6, #0]
 8014f06:	6823      	ldr	r3, [r4, #0]
 8014f08:	0699      	lsls	r1, r3, #26
 8014f0a:	bf42      	ittt	mi
 8014f0c:	6833      	ldrmi	r3, [r6, #0]
 8014f0e:	3302      	addmi	r3, #2
 8014f10:	6033      	strmi	r3, [r6, #0]
 8014f12:	6825      	ldr	r5, [r4, #0]
 8014f14:	f015 0506 	ands.w	r5, r5, #6
 8014f18:	d106      	bne.n	8014f28 <_printf_common+0x48>
 8014f1a:	f104 0a19 	add.w	sl, r4, #25
 8014f1e:	68e3      	ldr	r3, [r4, #12]
 8014f20:	6832      	ldr	r2, [r6, #0]
 8014f22:	1a9b      	subs	r3, r3, r2
 8014f24:	42ab      	cmp	r3, r5
 8014f26:	dc26      	bgt.n	8014f76 <_printf_common+0x96>
 8014f28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014f2c:	1e13      	subs	r3, r2, #0
 8014f2e:	6822      	ldr	r2, [r4, #0]
 8014f30:	bf18      	it	ne
 8014f32:	2301      	movne	r3, #1
 8014f34:	0692      	lsls	r2, r2, #26
 8014f36:	d42b      	bmi.n	8014f90 <_printf_common+0xb0>
 8014f38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014f3c:	4649      	mov	r1, r9
 8014f3e:	4638      	mov	r0, r7
 8014f40:	47c0      	blx	r8
 8014f42:	3001      	adds	r0, #1
 8014f44:	d01e      	beq.n	8014f84 <_printf_common+0xa4>
 8014f46:	6823      	ldr	r3, [r4, #0]
 8014f48:	68e5      	ldr	r5, [r4, #12]
 8014f4a:	6832      	ldr	r2, [r6, #0]
 8014f4c:	f003 0306 	and.w	r3, r3, #6
 8014f50:	2b04      	cmp	r3, #4
 8014f52:	bf08      	it	eq
 8014f54:	1aad      	subeq	r5, r5, r2
 8014f56:	68a3      	ldr	r3, [r4, #8]
 8014f58:	6922      	ldr	r2, [r4, #16]
 8014f5a:	bf0c      	ite	eq
 8014f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f60:	2500      	movne	r5, #0
 8014f62:	4293      	cmp	r3, r2
 8014f64:	bfc4      	itt	gt
 8014f66:	1a9b      	subgt	r3, r3, r2
 8014f68:	18ed      	addgt	r5, r5, r3
 8014f6a:	2600      	movs	r6, #0
 8014f6c:	341a      	adds	r4, #26
 8014f6e:	42b5      	cmp	r5, r6
 8014f70:	d11a      	bne.n	8014fa8 <_printf_common+0xc8>
 8014f72:	2000      	movs	r0, #0
 8014f74:	e008      	b.n	8014f88 <_printf_common+0xa8>
 8014f76:	2301      	movs	r3, #1
 8014f78:	4652      	mov	r2, sl
 8014f7a:	4649      	mov	r1, r9
 8014f7c:	4638      	mov	r0, r7
 8014f7e:	47c0      	blx	r8
 8014f80:	3001      	adds	r0, #1
 8014f82:	d103      	bne.n	8014f8c <_printf_common+0xac>
 8014f84:	f04f 30ff 	mov.w	r0, #4294967295
 8014f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f8c:	3501      	adds	r5, #1
 8014f8e:	e7c6      	b.n	8014f1e <_printf_common+0x3e>
 8014f90:	18e1      	adds	r1, r4, r3
 8014f92:	1c5a      	adds	r2, r3, #1
 8014f94:	2030      	movs	r0, #48	; 0x30
 8014f96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014f9a:	4422      	add	r2, r4
 8014f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014fa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014fa4:	3302      	adds	r3, #2
 8014fa6:	e7c7      	b.n	8014f38 <_printf_common+0x58>
 8014fa8:	2301      	movs	r3, #1
 8014faa:	4622      	mov	r2, r4
 8014fac:	4649      	mov	r1, r9
 8014fae:	4638      	mov	r0, r7
 8014fb0:	47c0      	blx	r8
 8014fb2:	3001      	adds	r0, #1
 8014fb4:	d0e6      	beq.n	8014f84 <_printf_common+0xa4>
 8014fb6:	3601      	adds	r6, #1
 8014fb8:	e7d9      	b.n	8014f6e <_printf_common+0x8e>
	...

08014fbc <_printf_i>:
 8014fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014fc0:	460c      	mov	r4, r1
 8014fc2:	4691      	mov	r9, r2
 8014fc4:	7e27      	ldrb	r7, [r4, #24]
 8014fc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014fc8:	2f78      	cmp	r7, #120	; 0x78
 8014fca:	4680      	mov	r8, r0
 8014fcc:	469a      	mov	sl, r3
 8014fce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014fd2:	d807      	bhi.n	8014fe4 <_printf_i+0x28>
 8014fd4:	2f62      	cmp	r7, #98	; 0x62
 8014fd6:	d80a      	bhi.n	8014fee <_printf_i+0x32>
 8014fd8:	2f00      	cmp	r7, #0
 8014fda:	f000 80d8 	beq.w	801518e <_printf_i+0x1d2>
 8014fde:	2f58      	cmp	r7, #88	; 0x58
 8014fe0:	f000 80a3 	beq.w	801512a <_printf_i+0x16e>
 8014fe4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014fe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014fec:	e03a      	b.n	8015064 <_printf_i+0xa8>
 8014fee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014ff2:	2b15      	cmp	r3, #21
 8014ff4:	d8f6      	bhi.n	8014fe4 <_printf_i+0x28>
 8014ff6:	a001      	add	r0, pc, #4	; (adr r0, 8014ffc <_printf_i+0x40>)
 8014ff8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014ffc:	08015055 	.word	0x08015055
 8015000:	08015069 	.word	0x08015069
 8015004:	08014fe5 	.word	0x08014fe5
 8015008:	08014fe5 	.word	0x08014fe5
 801500c:	08014fe5 	.word	0x08014fe5
 8015010:	08014fe5 	.word	0x08014fe5
 8015014:	08015069 	.word	0x08015069
 8015018:	08014fe5 	.word	0x08014fe5
 801501c:	08014fe5 	.word	0x08014fe5
 8015020:	08014fe5 	.word	0x08014fe5
 8015024:	08014fe5 	.word	0x08014fe5
 8015028:	08015175 	.word	0x08015175
 801502c:	08015099 	.word	0x08015099
 8015030:	08015157 	.word	0x08015157
 8015034:	08014fe5 	.word	0x08014fe5
 8015038:	08014fe5 	.word	0x08014fe5
 801503c:	08015197 	.word	0x08015197
 8015040:	08014fe5 	.word	0x08014fe5
 8015044:	08015099 	.word	0x08015099
 8015048:	08014fe5 	.word	0x08014fe5
 801504c:	08014fe5 	.word	0x08014fe5
 8015050:	0801515f 	.word	0x0801515f
 8015054:	680b      	ldr	r3, [r1, #0]
 8015056:	1d1a      	adds	r2, r3, #4
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	600a      	str	r2, [r1, #0]
 801505c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015064:	2301      	movs	r3, #1
 8015066:	e0a3      	b.n	80151b0 <_printf_i+0x1f4>
 8015068:	6825      	ldr	r5, [r4, #0]
 801506a:	6808      	ldr	r0, [r1, #0]
 801506c:	062e      	lsls	r6, r5, #24
 801506e:	f100 0304 	add.w	r3, r0, #4
 8015072:	d50a      	bpl.n	801508a <_printf_i+0xce>
 8015074:	6805      	ldr	r5, [r0, #0]
 8015076:	600b      	str	r3, [r1, #0]
 8015078:	2d00      	cmp	r5, #0
 801507a:	da03      	bge.n	8015084 <_printf_i+0xc8>
 801507c:	232d      	movs	r3, #45	; 0x2d
 801507e:	426d      	negs	r5, r5
 8015080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015084:	485e      	ldr	r0, [pc, #376]	; (8015200 <_printf_i+0x244>)
 8015086:	230a      	movs	r3, #10
 8015088:	e019      	b.n	80150be <_printf_i+0x102>
 801508a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801508e:	6805      	ldr	r5, [r0, #0]
 8015090:	600b      	str	r3, [r1, #0]
 8015092:	bf18      	it	ne
 8015094:	b22d      	sxthne	r5, r5
 8015096:	e7ef      	b.n	8015078 <_printf_i+0xbc>
 8015098:	680b      	ldr	r3, [r1, #0]
 801509a:	6825      	ldr	r5, [r4, #0]
 801509c:	1d18      	adds	r0, r3, #4
 801509e:	6008      	str	r0, [r1, #0]
 80150a0:	0628      	lsls	r0, r5, #24
 80150a2:	d501      	bpl.n	80150a8 <_printf_i+0xec>
 80150a4:	681d      	ldr	r5, [r3, #0]
 80150a6:	e002      	b.n	80150ae <_printf_i+0xf2>
 80150a8:	0669      	lsls	r1, r5, #25
 80150aa:	d5fb      	bpl.n	80150a4 <_printf_i+0xe8>
 80150ac:	881d      	ldrh	r5, [r3, #0]
 80150ae:	4854      	ldr	r0, [pc, #336]	; (8015200 <_printf_i+0x244>)
 80150b0:	2f6f      	cmp	r7, #111	; 0x6f
 80150b2:	bf0c      	ite	eq
 80150b4:	2308      	moveq	r3, #8
 80150b6:	230a      	movne	r3, #10
 80150b8:	2100      	movs	r1, #0
 80150ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80150be:	6866      	ldr	r6, [r4, #4]
 80150c0:	60a6      	str	r6, [r4, #8]
 80150c2:	2e00      	cmp	r6, #0
 80150c4:	bfa2      	ittt	ge
 80150c6:	6821      	ldrge	r1, [r4, #0]
 80150c8:	f021 0104 	bicge.w	r1, r1, #4
 80150cc:	6021      	strge	r1, [r4, #0]
 80150ce:	b90d      	cbnz	r5, 80150d4 <_printf_i+0x118>
 80150d0:	2e00      	cmp	r6, #0
 80150d2:	d04d      	beq.n	8015170 <_printf_i+0x1b4>
 80150d4:	4616      	mov	r6, r2
 80150d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80150da:	fb03 5711 	mls	r7, r3, r1, r5
 80150de:	5dc7      	ldrb	r7, [r0, r7]
 80150e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80150e4:	462f      	mov	r7, r5
 80150e6:	42bb      	cmp	r3, r7
 80150e8:	460d      	mov	r5, r1
 80150ea:	d9f4      	bls.n	80150d6 <_printf_i+0x11a>
 80150ec:	2b08      	cmp	r3, #8
 80150ee:	d10b      	bne.n	8015108 <_printf_i+0x14c>
 80150f0:	6823      	ldr	r3, [r4, #0]
 80150f2:	07df      	lsls	r7, r3, #31
 80150f4:	d508      	bpl.n	8015108 <_printf_i+0x14c>
 80150f6:	6923      	ldr	r3, [r4, #16]
 80150f8:	6861      	ldr	r1, [r4, #4]
 80150fa:	4299      	cmp	r1, r3
 80150fc:	bfde      	ittt	le
 80150fe:	2330      	movle	r3, #48	; 0x30
 8015100:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015104:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015108:	1b92      	subs	r2, r2, r6
 801510a:	6122      	str	r2, [r4, #16]
 801510c:	f8cd a000 	str.w	sl, [sp]
 8015110:	464b      	mov	r3, r9
 8015112:	aa03      	add	r2, sp, #12
 8015114:	4621      	mov	r1, r4
 8015116:	4640      	mov	r0, r8
 8015118:	f7ff fee2 	bl	8014ee0 <_printf_common>
 801511c:	3001      	adds	r0, #1
 801511e:	d14c      	bne.n	80151ba <_printf_i+0x1fe>
 8015120:	f04f 30ff 	mov.w	r0, #4294967295
 8015124:	b004      	add	sp, #16
 8015126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801512a:	4835      	ldr	r0, [pc, #212]	; (8015200 <_printf_i+0x244>)
 801512c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015130:	6823      	ldr	r3, [r4, #0]
 8015132:	680e      	ldr	r6, [r1, #0]
 8015134:	061f      	lsls	r7, r3, #24
 8015136:	f856 5b04 	ldr.w	r5, [r6], #4
 801513a:	600e      	str	r6, [r1, #0]
 801513c:	d514      	bpl.n	8015168 <_printf_i+0x1ac>
 801513e:	07d9      	lsls	r1, r3, #31
 8015140:	bf44      	itt	mi
 8015142:	f043 0320 	orrmi.w	r3, r3, #32
 8015146:	6023      	strmi	r3, [r4, #0]
 8015148:	b91d      	cbnz	r5, 8015152 <_printf_i+0x196>
 801514a:	6823      	ldr	r3, [r4, #0]
 801514c:	f023 0320 	bic.w	r3, r3, #32
 8015150:	6023      	str	r3, [r4, #0]
 8015152:	2310      	movs	r3, #16
 8015154:	e7b0      	b.n	80150b8 <_printf_i+0xfc>
 8015156:	6823      	ldr	r3, [r4, #0]
 8015158:	f043 0320 	orr.w	r3, r3, #32
 801515c:	6023      	str	r3, [r4, #0]
 801515e:	2378      	movs	r3, #120	; 0x78
 8015160:	4828      	ldr	r0, [pc, #160]	; (8015204 <_printf_i+0x248>)
 8015162:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015166:	e7e3      	b.n	8015130 <_printf_i+0x174>
 8015168:	065e      	lsls	r6, r3, #25
 801516a:	bf48      	it	mi
 801516c:	b2ad      	uxthmi	r5, r5
 801516e:	e7e6      	b.n	801513e <_printf_i+0x182>
 8015170:	4616      	mov	r6, r2
 8015172:	e7bb      	b.n	80150ec <_printf_i+0x130>
 8015174:	680b      	ldr	r3, [r1, #0]
 8015176:	6826      	ldr	r6, [r4, #0]
 8015178:	6960      	ldr	r0, [r4, #20]
 801517a:	1d1d      	adds	r5, r3, #4
 801517c:	600d      	str	r5, [r1, #0]
 801517e:	0635      	lsls	r5, r6, #24
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	d501      	bpl.n	8015188 <_printf_i+0x1cc>
 8015184:	6018      	str	r0, [r3, #0]
 8015186:	e002      	b.n	801518e <_printf_i+0x1d2>
 8015188:	0671      	lsls	r1, r6, #25
 801518a:	d5fb      	bpl.n	8015184 <_printf_i+0x1c8>
 801518c:	8018      	strh	r0, [r3, #0]
 801518e:	2300      	movs	r3, #0
 8015190:	6123      	str	r3, [r4, #16]
 8015192:	4616      	mov	r6, r2
 8015194:	e7ba      	b.n	801510c <_printf_i+0x150>
 8015196:	680b      	ldr	r3, [r1, #0]
 8015198:	1d1a      	adds	r2, r3, #4
 801519a:	600a      	str	r2, [r1, #0]
 801519c:	681e      	ldr	r6, [r3, #0]
 801519e:	6862      	ldr	r2, [r4, #4]
 80151a0:	2100      	movs	r1, #0
 80151a2:	4630      	mov	r0, r6
 80151a4:	f7eb f81c 	bl	80001e0 <memchr>
 80151a8:	b108      	cbz	r0, 80151ae <_printf_i+0x1f2>
 80151aa:	1b80      	subs	r0, r0, r6
 80151ac:	6060      	str	r0, [r4, #4]
 80151ae:	6863      	ldr	r3, [r4, #4]
 80151b0:	6123      	str	r3, [r4, #16]
 80151b2:	2300      	movs	r3, #0
 80151b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80151b8:	e7a8      	b.n	801510c <_printf_i+0x150>
 80151ba:	6923      	ldr	r3, [r4, #16]
 80151bc:	4632      	mov	r2, r6
 80151be:	4649      	mov	r1, r9
 80151c0:	4640      	mov	r0, r8
 80151c2:	47d0      	blx	sl
 80151c4:	3001      	adds	r0, #1
 80151c6:	d0ab      	beq.n	8015120 <_printf_i+0x164>
 80151c8:	6823      	ldr	r3, [r4, #0]
 80151ca:	079b      	lsls	r3, r3, #30
 80151cc:	d413      	bmi.n	80151f6 <_printf_i+0x23a>
 80151ce:	68e0      	ldr	r0, [r4, #12]
 80151d0:	9b03      	ldr	r3, [sp, #12]
 80151d2:	4298      	cmp	r0, r3
 80151d4:	bfb8      	it	lt
 80151d6:	4618      	movlt	r0, r3
 80151d8:	e7a4      	b.n	8015124 <_printf_i+0x168>
 80151da:	2301      	movs	r3, #1
 80151dc:	4632      	mov	r2, r6
 80151de:	4649      	mov	r1, r9
 80151e0:	4640      	mov	r0, r8
 80151e2:	47d0      	blx	sl
 80151e4:	3001      	adds	r0, #1
 80151e6:	d09b      	beq.n	8015120 <_printf_i+0x164>
 80151e8:	3501      	adds	r5, #1
 80151ea:	68e3      	ldr	r3, [r4, #12]
 80151ec:	9903      	ldr	r1, [sp, #12]
 80151ee:	1a5b      	subs	r3, r3, r1
 80151f0:	42ab      	cmp	r3, r5
 80151f2:	dcf2      	bgt.n	80151da <_printf_i+0x21e>
 80151f4:	e7eb      	b.n	80151ce <_printf_i+0x212>
 80151f6:	2500      	movs	r5, #0
 80151f8:	f104 0619 	add.w	r6, r4, #25
 80151fc:	e7f5      	b.n	80151ea <_printf_i+0x22e>
 80151fe:	bf00      	nop
 8015200:	08015605 	.word	0x08015605
 8015204:	08015616 	.word	0x08015616

08015208 <_sbrk_r>:
 8015208:	b538      	push	{r3, r4, r5, lr}
 801520a:	4d06      	ldr	r5, [pc, #24]	; (8015224 <_sbrk_r+0x1c>)
 801520c:	2300      	movs	r3, #0
 801520e:	4604      	mov	r4, r0
 8015210:	4608      	mov	r0, r1
 8015212:	602b      	str	r3, [r5, #0]
 8015214:	f7ec f90c 	bl	8001430 <_sbrk>
 8015218:	1c43      	adds	r3, r0, #1
 801521a:	d102      	bne.n	8015222 <_sbrk_r+0x1a>
 801521c:	682b      	ldr	r3, [r5, #0]
 801521e:	b103      	cbz	r3, 8015222 <_sbrk_r+0x1a>
 8015220:	6023      	str	r3, [r4, #0]
 8015222:	bd38      	pop	{r3, r4, r5, pc}
 8015224:	200073fc 	.word	0x200073fc

08015228 <__sread>:
 8015228:	b510      	push	{r4, lr}
 801522a:	460c      	mov	r4, r1
 801522c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015230:	f000 f8a0 	bl	8015374 <_read_r>
 8015234:	2800      	cmp	r0, #0
 8015236:	bfab      	itete	ge
 8015238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801523a:	89a3      	ldrhlt	r3, [r4, #12]
 801523c:	181b      	addge	r3, r3, r0
 801523e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015242:	bfac      	ite	ge
 8015244:	6563      	strge	r3, [r4, #84]	; 0x54
 8015246:	81a3      	strhlt	r3, [r4, #12]
 8015248:	bd10      	pop	{r4, pc}

0801524a <__swrite>:
 801524a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801524e:	461f      	mov	r7, r3
 8015250:	898b      	ldrh	r3, [r1, #12]
 8015252:	05db      	lsls	r3, r3, #23
 8015254:	4605      	mov	r5, r0
 8015256:	460c      	mov	r4, r1
 8015258:	4616      	mov	r6, r2
 801525a:	d505      	bpl.n	8015268 <__swrite+0x1e>
 801525c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015260:	2302      	movs	r3, #2
 8015262:	2200      	movs	r2, #0
 8015264:	f000 f868 	bl	8015338 <_lseek_r>
 8015268:	89a3      	ldrh	r3, [r4, #12]
 801526a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801526e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015272:	81a3      	strh	r3, [r4, #12]
 8015274:	4632      	mov	r2, r6
 8015276:	463b      	mov	r3, r7
 8015278:	4628      	mov	r0, r5
 801527a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801527e:	f000 b817 	b.w	80152b0 <_write_r>

08015282 <__sseek>:
 8015282:	b510      	push	{r4, lr}
 8015284:	460c      	mov	r4, r1
 8015286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801528a:	f000 f855 	bl	8015338 <_lseek_r>
 801528e:	1c43      	adds	r3, r0, #1
 8015290:	89a3      	ldrh	r3, [r4, #12]
 8015292:	bf15      	itete	ne
 8015294:	6560      	strne	r0, [r4, #84]	; 0x54
 8015296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801529a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801529e:	81a3      	strheq	r3, [r4, #12]
 80152a0:	bf18      	it	ne
 80152a2:	81a3      	strhne	r3, [r4, #12]
 80152a4:	bd10      	pop	{r4, pc}

080152a6 <__sclose>:
 80152a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152aa:	f000 b813 	b.w	80152d4 <_close_r>
	...

080152b0 <_write_r>:
 80152b0:	b538      	push	{r3, r4, r5, lr}
 80152b2:	4d07      	ldr	r5, [pc, #28]	; (80152d0 <_write_r+0x20>)
 80152b4:	4604      	mov	r4, r0
 80152b6:	4608      	mov	r0, r1
 80152b8:	4611      	mov	r1, r2
 80152ba:	2200      	movs	r2, #0
 80152bc:	602a      	str	r2, [r5, #0]
 80152be:	461a      	mov	r2, r3
 80152c0:	f7ec f865 	bl	800138e <_write>
 80152c4:	1c43      	adds	r3, r0, #1
 80152c6:	d102      	bne.n	80152ce <_write_r+0x1e>
 80152c8:	682b      	ldr	r3, [r5, #0]
 80152ca:	b103      	cbz	r3, 80152ce <_write_r+0x1e>
 80152cc:	6023      	str	r3, [r4, #0]
 80152ce:	bd38      	pop	{r3, r4, r5, pc}
 80152d0:	200073fc 	.word	0x200073fc

080152d4 <_close_r>:
 80152d4:	b538      	push	{r3, r4, r5, lr}
 80152d6:	4d06      	ldr	r5, [pc, #24]	; (80152f0 <_close_r+0x1c>)
 80152d8:	2300      	movs	r3, #0
 80152da:	4604      	mov	r4, r0
 80152dc:	4608      	mov	r0, r1
 80152de:	602b      	str	r3, [r5, #0]
 80152e0:	f7ec f871 	bl	80013c6 <_close>
 80152e4:	1c43      	adds	r3, r0, #1
 80152e6:	d102      	bne.n	80152ee <_close_r+0x1a>
 80152e8:	682b      	ldr	r3, [r5, #0]
 80152ea:	b103      	cbz	r3, 80152ee <_close_r+0x1a>
 80152ec:	6023      	str	r3, [r4, #0]
 80152ee:	bd38      	pop	{r3, r4, r5, pc}
 80152f0:	200073fc 	.word	0x200073fc

080152f4 <_fstat_r>:
 80152f4:	b538      	push	{r3, r4, r5, lr}
 80152f6:	4d07      	ldr	r5, [pc, #28]	; (8015314 <_fstat_r+0x20>)
 80152f8:	2300      	movs	r3, #0
 80152fa:	4604      	mov	r4, r0
 80152fc:	4608      	mov	r0, r1
 80152fe:	4611      	mov	r1, r2
 8015300:	602b      	str	r3, [r5, #0]
 8015302:	f7ec f86c 	bl	80013de <_fstat>
 8015306:	1c43      	adds	r3, r0, #1
 8015308:	d102      	bne.n	8015310 <_fstat_r+0x1c>
 801530a:	682b      	ldr	r3, [r5, #0]
 801530c:	b103      	cbz	r3, 8015310 <_fstat_r+0x1c>
 801530e:	6023      	str	r3, [r4, #0]
 8015310:	bd38      	pop	{r3, r4, r5, pc}
 8015312:	bf00      	nop
 8015314:	200073fc 	.word	0x200073fc

08015318 <_isatty_r>:
 8015318:	b538      	push	{r3, r4, r5, lr}
 801531a:	4d06      	ldr	r5, [pc, #24]	; (8015334 <_isatty_r+0x1c>)
 801531c:	2300      	movs	r3, #0
 801531e:	4604      	mov	r4, r0
 8015320:	4608      	mov	r0, r1
 8015322:	602b      	str	r3, [r5, #0]
 8015324:	f7ec f86b 	bl	80013fe <_isatty>
 8015328:	1c43      	adds	r3, r0, #1
 801532a:	d102      	bne.n	8015332 <_isatty_r+0x1a>
 801532c:	682b      	ldr	r3, [r5, #0]
 801532e:	b103      	cbz	r3, 8015332 <_isatty_r+0x1a>
 8015330:	6023      	str	r3, [r4, #0]
 8015332:	bd38      	pop	{r3, r4, r5, pc}
 8015334:	200073fc 	.word	0x200073fc

08015338 <_lseek_r>:
 8015338:	b538      	push	{r3, r4, r5, lr}
 801533a:	4d07      	ldr	r5, [pc, #28]	; (8015358 <_lseek_r+0x20>)
 801533c:	4604      	mov	r4, r0
 801533e:	4608      	mov	r0, r1
 8015340:	4611      	mov	r1, r2
 8015342:	2200      	movs	r2, #0
 8015344:	602a      	str	r2, [r5, #0]
 8015346:	461a      	mov	r2, r3
 8015348:	f7ec f864 	bl	8001414 <_lseek>
 801534c:	1c43      	adds	r3, r0, #1
 801534e:	d102      	bne.n	8015356 <_lseek_r+0x1e>
 8015350:	682b      	ldr	r3, [r5, #0]
 8015352:	b103      	cbz	r3, 8015356 <_lseek_r+0x1e>
 8015354:	6023      	str	r3, [r4, #0]
 8015356:	bd38      	pop	{r3, r4, r5, pc}
 8015358:	200073fc 	.word	0x200073fc

0801535c <__malloc_lock>:
 801535c:	4801      	ldr	r0, [pc, #4]	; (8015364 <__malloc_lock+0x8>)
 801535e:	f7ff bb55 	b.w	8014a0c <__retarget_lock_acquire_recursive>
 8015362:	bf00      	nop
 8015364:	200073f4 	.word	0x200073f4

08015368 <__malloc_unlock>:
 8015368:	4801      	ldr	r0, [pc, #4]	; (8015370 <__malloc_unlock+0x8>)
 801536a:	f7ff bb50 	b.w	8014a0e <__retarget_lock_release_recursive>
 801536e:	bf00      	nop
 8015370:	200073f4 	.word	0x200073f4

08015374 <_read_r>:
 8015374:	b538      	push	{r3, r4, r5, lr}
 8015376:	4d07      	ldr	r5, [pc, #28]	; (8015394 <_read_r+0x20>)
 8015378:	4604      	mov	r4, r0
 801537a:	4608      	mov	r0, r1
 801537c:	4611      	mov	r1, r2
 801537e:	2200      	movs	r2, #0
 8015380:	602a      	str	r2, [r5, #0]
 8015382:	461a      	mov	r2, r3
 8015384:	f7eb ffe6 	bl	8001354 <_read>
 8015388:	1c43      	adds	r3, r0, #1
 801538a:	d102      	bne.n	8015392 <_read_r+0x1e>
 801538c:	682b      	ldr	r3, [r5, #0]
 801538e:	b103      	cbz	r3, 8015392 <_read_r+0x1e>
 8015390:	6023      	str	r3, [r4, #0]
 8015392:	bd38      	pop	{r3, r4, r5, pc}
 8015394:	200073fc 	.word	0x200073fc

08015398 <_init>:
 8015398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801539a:	bf00      	nop
 801539c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801539e:	bc08      	pop	{r3}
 80153a0:	469e      	mov	lr, r3
 80153a2:	4770      	bx	lr

080153a4 <_fini>:
 80153a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153a6:	bf00      	nop
 80153a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80153aa:	bc08      	pop	{r3}
 80153ac:	469e      	mov	lr, r3
 80153ae:	4770      	bx	lr
